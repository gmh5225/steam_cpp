// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_hiddevices.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fhiddevices_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fhiddevices_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fhiddevices_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fhiddevices_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fhiddevices_2eproto;
class CHIDDeviceInfo;
struct CHIDDeviceInfoDefaultTypeInternal;
extern CHIDDeviceInfoDefaultTypeInternal _CHIDDeviceInfo_default_instance_;
class CHIDDeviceInputReport;
struct CHIDDeviceInputReportDefaultTypeInternal;
extern CHIDDeviceInputReportDefaultTypeInternal _CHIDDeviceInputReport_default_instance_;
class CHIDMessageFromRemote;
struct CHIDMessageFromRemoteDefaultTypeInternal;
extern CHIDMessageFromRemoteDefaultTypeInternal _CHIDMessageFromRemote_default_instance_;
class CHIDMessageFromRemote_CloseAllDevices;
struct CHIDMessageFromRemote_CloseAllDevicesDefaultTypeInternal;
extern CHIDMessageFromRemote_CloseAllDevicesDefaultTypeInternal _CHIDMessageFromRemote_CloseAllDevices_default_instance_;
class CHIDMessageFromRemote_CloseDevice;
struct CHIDMessageFromRemote_CloseDeviceDefaultTypeInternal;
extern CHIDMessageFromRemote_CloseDeviceDefaultTypeInternal _CHIDMessageFromRemote_CloseDevice_default_instance_;
class CHIDMessageFromRemote_DeviceInputReports;
struct CHIDMessageFromRemote_DeviceInputReportsDefaultTypeInternal;
extern CHIDMessageFromRemote_DeviceInputReportsDefaultTypeInternal _CHIDMessageFromRemote_DeviceInputReports_default_instance_;
class CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport;
struct CHIDMessageFromRemote_DeviceInputReports_DeviceInputReportDefaultTypeInternal;
extern CHIDMessageFromRemote_DeviceInputReports_DeviceInputReportDefaultTypeInternal _CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport_default_instance_;
class CHIDMessageFromRemote_RequestResponse;
struct CHIDMessageFromRemote_RequestResponseDefaultTypeInternal;
extern CHIDMessageFromRemote_RequestResponseDefaultTypeInternal _CHIDMessageFromRemote_RequestResponse_default_instance_;
class CHIDMessageFromRemote_UpdateDeviceList;
struct CHIDMessageFromRemote_UpdateDeviceListDefaultTypeInternal;
extern CHIDMessageFromRemote_UpdateDeviceListDefaultTypeInternal _CHIDMessageFromRemote_UpdateDeviceList_default_instance_;
class CHIDMessageToRemote;
struct CHIDMessageToRemoteDefaultTypeInternal;
extern CHIDMessageToRemoteDefaultTypeInternal _CHIDMessageToRemote_default_instance_;
class CHIDMessageToRemote_DeviceClose;
struct CHIDMessageToRemote_DeviceCloseDefaultTypeInternal;
extern CHIDMessageToRemote_DeviceCloseDefaultTypeInternal _CHIDMessageToRemote_DeviceClose_default_instance_;
class CHIDMessageToRemote_DeviceDisconnect;
struct CHIDMessageToRemote_DeviceDisconnectDefaultTypeInternal;
extern CHIDMessageToRemote_DeviceDisconnectDefaultTypeInternal _CHIDMessageToRemote_DeviceDisconnect_default_instance_;
class CHIDMessageToRemote_DeviceGetFeatureReport;
struct CHIDMessageToRemote_DeviceGetFeatureReportDefaultTypeInternal;
extern CHIDMessageToRemote_DeviceGetFeatureReportDefaultTypeInternal _CHIDMessageToRemote_DeviceGetFeatureReport_default_instance_;
class CHIDMessageToRemote_DeviceGetProductString;
struct CHIDMessageToRemote_DeviceGetProductStringDefaultTypeInternal;
extern CHIDMessageToRemote_DeviceGetProductStringDefaultTypeInternal _CHIDMessageToRemote_DeviceGetProductString_default_instance_;
class CHIDMessageToRemote_DeviceGetSerialNumberString;
struct CHIDMessageToRemote_DeviceGetSerialNumberStringDefaultTypeInternal;
extern CHIDMessageToRemote_DeviceGetSerialNumberStringDefaultTypeInternal _CHIDMessageToRemote_DeviceGetSerialNumberString_default_instance_;
class CHIDMessageToRemote_DeviceGetVendorString;
struct CHIDMessageToRemote_DeviceGetVendorStringDefaultTypeInternal;
extern CHIDMessageToRemote_DeviceGetVendorStringDefaultTypeInternal _CHIDMessageToRemote_DeviceGetVendorString_default_instance_;
class CHIDMessageToRemote_DeviceOpen;
struct CHIDMessageToRemote_DeviceOpenDefaultTypeInternal;
extern CHIDMessageToRemote_DeviceOpenDefaultTypeInternal _CHIDMessageToRemote_DeviceOpen_default_instance_;
class CHIDMessageToRemote_DeviceRead;
struct CHIDMessageToRemote_DeviceReadDefaultTypeInternal;
extern CHIDMessageToRemote_DeviceReadDefaultTypeInternal _CHIDMessageToRemote_DeviceRead_default_instance_;
class CHIDMessageToRemote_DeviceRequestFullReport;
struct CHIDMessageToRemote_DeviceRequestFullReportDefaultTypeInternal;
extern CHIDMessageToRemote_DeviceRequestFullReportDefaultTypeInternal _CHIDMessageToRemote_DeviceRequestFullReport_default_instance_;
class CHIDMessageToRemote_DeviceSendFeatureReport;
struct CHIDMessageToRemote_DeviceSendFeatureReportDefaultTypeInternal;
extern CHIDMessageToRemote_DeviceSendFeatureReportDefaultTypeInternal _CHIDMessageToRemote_DeviceSendFeatureReport_default_instance_;
class CHIDMessageToRemote_DeviceStartInputReports;
struct CHIDMessageToRemote_DeviceStartInputReportsDefaultTypeInternal;
extern CHIDMessageToRemote_DeviceStartInputReportsDefaultTypeInternal _CHIDMessageToRemote_DeviceStartInputReports_default_instance_;
class CHIDMessageToRemote_DeviceWrite;
struct CHIDMessageToRemote_DeviceWriteDefaultTypeInternal;
extern CHIDMessageToRemote_DeviceWriteDefaultTypeInternal _CHIDMessageToRemote_DeviceWrite_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CHIDDeviceInfo* Arena::CreateMaybeMessage<::CHIDDeviceInfo>(Arena*);
template<> ::CHIDDeviceInputReport* Arena::CreateMaybeMessage<::CHIDDeviceInputReport>(Arena*);
template<> ::CHIDMessageFromRemote* Arena::CreateMaybeMessage<::CHIDMessageFromRemote>(Arena*);
template<> ::CHIDMessageFromRemote_CloseAllDevices* Arena::CreateMaybeMessage<::CHIDMessageFromRemote_CloseAllDevices>(Arena*);
template<> ::CHIDMessageFromRemote_CloseDevice* Arena::CreateMaybeMessage<::CHIDMessageFromRemote_CloseDevice>(Arena*);
template<> ::CHIDMessageFromRemote_DeviceInputReports* Arena::CreateMaybeMessage<::CHIDMessageFromRemote_DeviceInputReports>(Arena*);
template<> ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* Arena::CreateMaybeMessage<::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport>(Arena*);
template<> ::CHIDMessageFromRemote_RequestResponse* Arena::CreateMaybeMessage<::CHIDMessageFromRemote_RequestResponse>(Arena*);
template<> ::CHIDMessageFromRemote_UpdateDeviceList* Arena::CreateMaybeMessage<::CHIDMessageFromRemote_UpdateDeviceList>(Arena*);
template<> ::CHIDMessageToRemote* Arena::CreateMaybeMessage<::CHIDMessageToRemote>(Arena*);
template<> ::CHIDMessageToRemote_DeviceClose* Arena::CreateMaybeMessage<::CHIDMessageToRemote_DeviceClose>(Arena*);
template<> ::CHIDMessageToRemote_DeviceDisconnect* Arena::CreateMaybeMessage<::CHIDMessageToRemote_DeviceDisconnect>(Arena*);
template<> ::CHIDMessageToRemote_DeviceGetFeatureReport* Arena::CreateMaybeMessage<::CHIDMessageToRemote_DeviceGetFeatureReport>(Arena*);
template<> ::CHIDMessageToRemote_DeviceGetProductString* Arena::CreateMaybeMessage<::CHIDMessageToRemote_DeviceGetProductString>(Arena*);
template<> ::CHIDMessageToRemote_DeviceGetSerialNumberString* Arena::CreateMaybeMessage<::CHIDMessageToRemote_DeviceGetSerialNumberString>(Arena*);
template<> ::CHIDMessageToRemote_DeviceGetVendorString* Arena::CreateMaybeMessage<::CHIDMessageToRemote_DeviceGetVendorString>(Arena*);
template<> ::CHIDMessageToRemote_DeviceOpen* Arena::CreateMaybeMessage<::CHIDMessageToRemote_DeviceOpen>(Arena*);
template<> ::CHIDMessageToRemote_DeviceRead* Arena::CreateMaybeMessage<::CHIDMessageToRemote_DeviceRead>(Arena*);
template<> ::CHIDMessageToRemote_DeviceRequestFullReport* Arena::CreateMaybeMessage<::CHIDMessageToRemote_DeviceRequestFullReport>(Arena*);
template<> ::CHIDMessageToRemote_DeviceSendFeatureReport* Arena::CreateMaybeMessage<::CHIDMessageToRemote_DeviceSendFeatureReport>(Arena*);
template<> ::CHIDMessageToRemote_DeviceStartInputReports* Arena::CreateMaybeMessage<::CHIDMessageToRemote_DeviceStartInputReports>(Arena*);
template<> ::CHIDMessageToRemote_DeviceWrite* Arena::CreateMaybeMessage<::CHIDMessageToRemote_DeviceWrite>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EHIDDeviceLocation : int {
  k_EDeviceLocationLocal = 0,
  k_EDeviceLocationRemote = 2,
  k_EDeviceLocationAny = 3
};
bool EHIDDeviceLocation_IsValid(int value);
constexpr EHIDDeviceLocation EHIDDeviceLocation_MIN = k_EDeviceLocationLocal;
constexpr EHIDDeviceLocation EHIDDeviceLocation_MAX = k_EDeviceLocationAny;
constexpr int EHIDDeviceLocation_ARRAYSIZE = EHIDDeviceLocation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHIDDeviceLocation_descriptor();
template<typename T>
inline const std::string& EHIDDeviceLocation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EHIDDeviceLocation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EHIDDeviceLocation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EHIDDeviceLocation_descriptor(), enum_t_value);
}
inline bool EHIDDeviceLocation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EHIDDeviceLocation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EHIDDeviceLocation>(
    EHIDDeviceLocation_descriptor(), name, value);
}
enum EHIDDeviceDisconnectMethod : int {
  k_EDeviceDisconnectMethodUnknown = 0,
  k_EDeviceDisconnectMethodBluetooth = 1,
  k_EDeviceDisconnectMethodFeatureReport = 2,
  k_EDeviceDisconnectMethodOutputReport = 3
};
bool EHIDDeviceDisconnectMethod_IsValid(int value);
constexpr EHIDDeviceDisconnectMethod EHIDDeviceDisconnectMethod_MIN = k_EDeviceDisconnectMethodUnknown;
constexpr EHIDDeviceDisconnectMethod EHIDDeviceDisconnectMethod_MAX = k_EDeviceDisconnectMethodOutputReport;
constexpr int EHIDDeviceDisconnectMethod_ARRAYSIZE = EHIDDeviceDisconnectMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHIDDeviceDisconnectMethod_descriptor();
template<typename T>
inline const std::string& EHIDDeviceDisconnectMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EHIDDeviceDisconnectMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EHIDDeviceDisconnectMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EHIDDeviceDisconnectMethod_descriptor(), enum_t_value);
}
inline bool EHIDDeviceDisconnectMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EHIDDeviceDisconnectMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EHIDDeviceDisconnectMethod>(
    EHIDDeviceDisconnectMethod_descriptor(), name, value);
}
// ===================================================================

class CHIDDeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDDeviceInfo) */ {
 public:
  inline CHIDDeviceInfo() : CHIDDeviceInfo(nullptr) {}
  ~CHIDDeviceInfo() override;
  explicit constexpr CHIDDeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDDeviceInfo(const CHIDDeviceInfo& from);
  CHIDDeviceInfo(CHIDDeviceInfo&& from) noexcept
    : CHIDDeviceInfo() {
    *this = ::std::move(from);
  }

  inline CHIDDeviceInfo& operator=(const CHIDDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDDeviceInfo& operator=(CHIDDeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDDeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const CHIDDeviceInfo*>(
               &_CHIDDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CHIDDeviceInfo& a, CHIDDeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDDeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDDeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDDeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDDeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDDeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDDeviceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDDeviceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDDeviceInfo";
  }
  protected:
  explicit CHIDDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kSerialNumberFieldNumber = 5,
    kManufacturerStringFieldNumber = 7,
    kProductStringFieldNumber = 8,
    kLocationFieldNumber = 1,
    kVendorIdFieldNumber = 3,
    kProductIdFieldNumber = 4,
    kReleaseNumberFieldNumber = 6,
    kUsagePageFieldNumber = 9,
    kUsageFieldNumber = 10,
    kCapsBitsFieldNumber = 15,
    kSessionIdFieldNumber = 16,
    kIsGenericGamepadFieldNumber = 13,
    kIsGenericJoystickFieldNumber = 14,
    kIsXinputDeviceOBSOLETEFieldNumber = 18,
    kIsSteamvrDeviceFieldNumber = 20,
    kEControllerTypeOBSOLETEFieldNumber = 17,
    kSessionRemotePlayTogetherAppidFieldNumber = 19,
    kInterfaceNumberFieldNumber = 11,
    kOstypeFieldNumber = 12,
  };
  // optional string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string serial_number = 5;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  const std::string& serial_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial_number();
  PROTOBUF_NODISCARD std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // optional string manufacturer_string = 7;
  bool has_manufacturer_string() const;
  private:
  bool _internal_has_manufacturer_string() const;
  public:
  void clear_manufacturer_string();
  const std::string& manufacturer_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_manufacturer_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_manufacturer_string();
  PROTOBUF_NODISCARD std::string* release_manufacturer_string();
  void set_allocated_manufacturer_string(std::string* manufacturer_string);
  private:
  const std::string& _internal_manufacturer_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_manufacturer_string(const std::string& value);
  std::string* _internal_mutable_manufacturer_string();
  public:

  // optional string product_string = 8;
  bool has_product_string() const;
  private:
  bool _internal_has_product_string() const;
  public:
  void clear_product_string();
  const std::string& product_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_string();
  PROTOBUF_NODISCARD std::string* release_product_string();
  void set_allocated_product_string(std::string* product_string);
  private:
  const std::string& _internal_product_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_string(const std::string& value);
  std::string* _internal_mutable_product_string();
  public:

  // optional .EHIDDeviceLocation location = 1 [default = k_EDeviceLocationLocal];
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  ::EHIDDeviceLocation location() const;
  void set_location(::EHIDDeviceLocation value);
  private:
  ::EHIDDeviceLocation _internal_location() const;
  void _internal_set_location(::EHIDDeviceLocation value);
  public:

  // optional uint32 vendor_id = 3;
  bool has_vendor_id() const;
  private:
  bool _internal_has_vendor_id() const;
  public:
  void clear_vendor_id();
  uint32_t vendor_id() const;
  void set_vendor_id(uint32_t value);
  private:
  uint32_t _internal_vendor_id() const;
  void _internal_set_vendor_id(uint32_t value);
  public:

  // optional uint32 product_id = 4;
  bool has_product_id() const;
  private:
  bool _internal_has_product_id() const;
  public:
  void clear_product_id();
  uint32_t product_id() const;
  void set_product_id(uint32_t value);
  private:
  uint32_t _internal_product_id() const;
  void _internal_set_product_id(uint32_t value);
  public:

  // optional uint32 release_number = 6;
  bool has_release_number() const;
  private:
  bool _internal_has_release_number() const;
  public:
  void clear_release_number();
  uint32_t release_number() const;
  void set_release_number(uint32_t value);
  private:
  uint32_t _internal_release_number() const;
  void _internal_set_release_number(uint32_t value);
  public:

  // optional uint32 usage_page = 9;
  bool has_usage_page() const;
  private:
  bool _internal_has_usage_page() const;
  public:
  void clear_usage_page();
  uint32_t usage_page() const;
  void set_usage_page(uint32_t value);
  private:
  uint32_t _internal_usage_page() const;
  void _internal_set_usage_page(uint32_t value);
  public:

  // optional uint32 usage = 10;
  bool has_usage() const;
  private:
  bool _internal_has_usage() const;
  public:
  void clear_usage();
  uint32_t usage() const;
  void set_usage(uint32_t value);
  private:
  uint32_t _internal_usage() const;
  void _internal_set_usage(uint32_t value);
  public:

  // optional uint32 caps_bits = 15;
  bool has_caps_bits() const;
  private:
  bool _internal_has_caps_bits() const;
  public:
  void clear_caps_bits();
  uint32_t caps_bits() const;
  void set_caps_bits(uint32_t value);
  private:
  uint32_t _internal_caps_bits() const;
  void _internal_set_caps_bits(uint32_t value);
  public:

  // optional uint32 session_id = 16;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  uint32_t session_id() const;
  void set_session_id(uint32_t value);
  private:
  uint32_t _internal_session_id() const;
  void _internal_set_session_id(uint32_t value);
  public:

  // optional bool is_generic_gamepad = 13;
  bool has_is_generic_gamepad() const;
  private:
  bool _internal_has_is_generic_gamepad() const;
  public:
  void clear_is_generic_gamepad();
  bool is_generic_gamepad() const;
  void set_is_generic_gamepad(bool value);
  private:
  bool _internal_is_generic_gamepad() const;
  void _internal_set_is_generic_gamepad(bool value);
  public:

  // optional bool is_generic_joystick = 14;
  bool has_is_generic_joystick() const;
  private:
  bool _internal_has_is_generic_joystick() const;
  public:
  void clear_is_generic_joystick();
  bool is_generic_joystick() const;
  void set_is_generic_joystick(bool value);
  private:
  bool _internal_is_generic_joystick() const;
  void _internal_set_is_generic_joystick(bool value);
  public:

  // optional bool is_xinput_device_OBSOLETE = 18 [default = false];
  bool has_is_xinput_device_obsolete() const;
  private:
  bool _internal_has_is_xinput_device_obsolete() const;
  public:
  void clear_is_xinput_device_obsolete();
  bool is_xinput_device_obsolete() const;
  void set_is_xinput_device_obsolete(bool value);
  private:
  bool _internal_is_xinput_device_obsolete() const;
  void _internal_set_is_xinput_device_obsolete(bool value);
  public:

  // optional bool is_steamvr_device = 20 [default = false];
  bool has_is_steamvr_device() const;
  private:
  bool _internal_has_is_steamvr_device() const;
  public:
  void clear_is_steamvr_device();
  bool is_steamvr_device() const;
  void set_is_steamvr_device(bool value);
  private:
  bool _internal_is_steamvr_device() const;
  void _internal_set_is_steamvr_device(bool value);
  public:

  // optional uint32 eControllerType_OBSOLETE = 17 [default = 0];
  bool has_econtrollertype_obsolete() const;
  private:
  bool _internal_has_econtrollertype_obsolete() const;
  public:
  void clear_econtrollertype_obsolete();
  uint32_t econtrollertype_obsolete() const;
  void set_econtrollertype_obsolete(uint32_t value);
  private:
  uint32_t _internal_econtrollertype_obsolete() const;
  void _internal_set_econtrollertype_obsolete(uint32_t value);
  public:

  // optional uint32 session_remote_play_together_appid = 19;
  bool has_session_remote_play_together_appid() const;
  private:
  bool _internal_has_session_remote_play_together_appid() const;
  public:
  void clear_session_remote_play_together_appid();
  uint32_t session_remote_play_together_appid() const;
  void set_session_remote_play_together_appid(uint32_t value);
  private:
  uint32_t _internal_session_remote_play_together_appid() const;
  void _internal_set_session_remote_play_together_appid(uint32_t value);
  public:

  // optional int32 interface_number = 11 [default = -1];
  bool has_interface_number() const;
  private:
  bool _internal_has_interface_number() const;
  public:
  void clear_interface_number();
  int32_t interface_number() const;
  void set_interface_number(int32_t value);
  private:
  int32_t _internal_interface_number() const;
  void _internal_set_interface_number(int32_t value);
  public:

  // optional int32 ostype = 12 [default = -1];
  bool has_ostype() const;
  private:
  bool _internal_has_ostype() const;
  public:
  void clear_ostype();
  int32_t ostype() const;
  void set_ostype(int32_t value);
  private:
  int32_t _internal_ostype() const;
  void _internal_set_ostype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDDeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_string_;
  int location_;
  uint32_t vendor_id_;
  uint32_t product_id_;
  uint32_t release_number_;
  uint32_t usage_page_;
  uint32_t usage_;
  uint32_t caps_bits_;
  uint32_t session_id_;
  bool is_generic_gamepad_;
  bool is_generic_joystick_;
  bool is_xinput_device_obsolete_;
  bool is_steamvr_device_;
  uint32_t econtrollertype_obsolete_;
  uint32_t session_remote_play_together_appid_;
  int32_t interface_number_;
  int32_t ostype_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDDeviceInputReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDDeviceInputReport) */ {
 public:
  inline CHIDDeviceInputReport() : CHIDDeviceInputReport(nullptr) {}
  ~CHIDDeviceInputReport() override;
  explicit constexpr CHIDDeviceInputReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDDeviceInputReport(const CHIDDeviceInputReport& from);
  CHIDDeviceInputReport(CHIDDeviceInputReport&& from) noexcept
    : CHIDDeviceInputReport() {
    *this = ::std::move(from);
  }

  inline CHIDDeviceInputReport& operator=(const CHIDDeviceInputReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDDeviceInputReport& operator=(CHIDDeviceInputReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDDeviceInputReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDDeviceInputReport* internal_default_instance() {
    return reinterpret_cast<const CHIDDeviceInputReport*>(
               &_CHIDDeviceInputReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CHIDDeviceInputReport& a, CHIDDeviceInputReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDDeviceInputReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDDeviceInputReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDDeviceInputReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDDeviceInputReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDDeviceInputReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDDeviceInputReport& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDDeviceInputReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDDeviceInputReport";
  }
  protected:
  explicit CHIDDeviceInputReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFullReportFieldNumber = 1,
    kDeltaReportFieldNumber = 2,
    kDeltaReportSizeFieldNumber = 3,
    kDeltaReportCrcFieldNumber = 4,
  };
  // optional bytes full_report = 1;
  bool has_full_report() const;
  private:
  bool _internal_has_full_report() const;
  public:
  void clear_full_report();
  const std::string& full_report() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_full_report(ArgT0&& arg0, ArgT... args);
  std::string* mutable_full_report();
  PROTOBUF_NODISCARD std::string* release_full_report();
  void set_allocated_full_report(std::string* full_report);
  private:
  const std::string& _internal_full_report() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_report(const std::string& value);
  std::string* _internal_mutable_full_report();
  public:

  // optional bytes delta_report = 2;
  bool has_delta_report() const;
  private:
  bool _internal_has_delta_report() const;
  public:
  void clear_delta_report();
  const std::string& delta_report() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delta_report(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delta_report();
  PROTOBUF_NODISCARD std::string* release_delta_report();
  void set_allocated_delta_report(std::string* delta_report);
  private:
  const std::string& _internal_delta_report() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delta_report(const std::string& value);
  std::string* _internal_mutable_delta_report();
  public:

  // optional uint32 delta_report_size = 3;
  bool has_delta_report_size() const;
  private:
  bool _internal_has_delta_report_size() const;
  public:
  void clear_delta_report_size();
  uint32_t delta_report_size() const;
  void set_delta_report_size(uint32_t value);
  private:
  uint32_t _internal_delta_report_size() const;
  void _internal_set_delta_report_size(uint32_t value);
  public:

  // optional uint32 delta_report_crc = 4;
  bool has_delta_report_crc() const;
  private:
  bool _internal_has_delta_report_crc() const;
  public:
  void clear_delta_report_crc();
  uint32_t delta_report_crc() const;
  void set_delta_report_crc(uint32_t value);
  private:
  uint32_t _internal_delta_report_crc() const;
  void _internal_set_delta_report_crc(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDDeviceInputReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_report_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delta_report_;
  uint32_t delta_report_size_;
  uint32_t delta_report_crc_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageToRemote_DeviceOpen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageToRemote.DeviceOpen) */ {
 public:
  inline CHIDMessageToRemote_DeviceOpen() : CHIDMessageToRemote_DeviceOpen(nullptr) {}
  ~CHIDMessageToRemote_DeviceOpen() override;
  explicit constexpr CHIDMessageToRemote_DeviceOpen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageToRemote_DeviceOpen(const CHIDMessageToRemote_DeviceOpen& from);
  CHIDMessageToRemote_DeviceOpen(CHIDMessageToRemote_DeviceOpen&& from) noexcept
    : CHIDMessageToRemote_DeviceOpen() {
    *this = ::std::move(from);
  }

  inline CHIDMessageToRemote_DeviceOpen& operator=(const CHIDMessageToRemote_DeviceOpen& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageToRemote_DeviceOpen& operator=(CHIDMessageToRemote_DeviceOpen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageToRemote_DeviceOpen& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageToRemote_DeviceOpen* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageToRemote_DeviceOpen*>(
               &_CHIDMessageToRemote_DeviceOpen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CHIDMessageToRemote_DeviceOpen& a, CHIDMessageToRemote_DeviceOpen& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageToRemote_DeviceOpen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageToRemote_DeviceOpen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageToRemote_DeviceOpen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageToRemote_DeviceOpen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageToRemote_DeviceOpen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageToRemote_DeviceOpen& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageToRemote_DeviceOpen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageToRemote.DeviceOpen";
  }
  protected:
  explicit CHIDMessageToRemote_DeviceOpen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // optional .CHIDDeviceInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::CHIDDeviceInfo& info() const;
  PROTOBUF_NODISCARD ::CHIDDeviceInfo* release_info();
  ::CHIDDeviceInfo* mutable_info();
  void set_allocated_info(::CHIDDeviceInfo* info);
  private:
  const ::CHIDDeviceInfo& _internal_info() const;
  ::CHIDDeviceInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::CHIDDeviceInfo* info);
  ::CHIDDeviceInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:CHIDMessageToRemote.DeviceOpen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CHIDDeviceInfo* info_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageToRemote_DeviceClose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageToRemote.DeviceClose) */ {
 public:
  inline CHIDMessageToRemote_DeviceClose() : CHIDMessageToRemote_DeviceClose(nullptr) {}
  ~CHIDMessageToRemote_DeviceClose() override;
  explicit constexpr CHIDMessageToRemote_DeviceClose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageToRemote_DeviceClose(const CHIDMessageToRemote_DeviceClose& from);
  CHIDMessageToRemote_DeviceClose(CHIDMessageToRemote_DeviceClose&& from) noexcept
    : CHIDMessageToRemote_DeviceClose() {
    *this = ::std::move(from);
  }

  inline CHIDMessageToRemote_DeviceClose& operator=(const CHIDMessageToRemote_DeviceClose& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageToRemote_DeviceClose& operator=(CHIDMessageToRemote_DeviceClose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageToRemote_DeviceClose& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageToRemote_DeviceClose* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageToRemote_DeviceClose*>(
               &_CHIDMessageToRemote_DeviceClose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CHIDMessageToRemote_DeviceClose& a, CHIDMessageToRemote_DeviceClose& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageToRemote_DeviceClose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageToRemote_DeviceClose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageToRemote_DeviceClose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageToRemote_DeviceClose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageToRemote_DeviceClose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageToRemote_DeviceClose& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageToRemote_DeviceClose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageToRemote.DeviceClose";
  }
  protected:
  explicit CHIDMessageToRemote_DeviceClose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  uint32_t device() const;
  void set_device(uint32_t value);
  private:
  uint32_t _internal_device() const;
  void _internal_set_device(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDMessageToRemote.DeviceClose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t device_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageToRemote_DeviceWrite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageToRemote.DeviceWrite) */ {
 public:
  inline CHIDMessageToRemote_DeviceWrite() : CHIDMessageToRemote_DeviceWrite(nullptr) {}
  ~CHIDMessageToRemote_DeviceWrite() override;
  explicit constexpr CHIDMessageToRemote_DeviceWrite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageToRemote_DeviceWrite(const CHIDMessageToRemote_DeviceWrite& from);
  CHIDMessageToRemote_DeviceWrite(CHIDMessageToRemote_DeviceWrite&& from) noexcept
    : CHIDMessageToRemote_DeviceWrite() {
    *this = ::std::move(from);
  }

  inline CHIDMessageToRemote_DeviceWrite& operator=(const CHIDMessageToRemote_DeviceWrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageToRemote_DeviceWrite& operator=(CHIDMessageToRemote_DeviceWrite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageToRemote_DeviceWrite& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageToRemote_DeviceWrite* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageToRemote_DeviceWrite*>(
               &_CHIDMessageToRemote_DeviceWrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CHIDMessageToRemote_DeviceWrite& a, CHIDMessageToRemote_DeviceWrite& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageToRemote_DeviceWrite* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageToRemote_DeviceWrite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageToRemote_DeviceWrite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageToRemote_DeviceWrite>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageToRemote_DeviceWrite& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageToRemote_DeviceWrite& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageToRemote_DeviceWrite* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageToRemote.DeviceWrite";
  }
  protected:
  explicit CHIDMessageToRemote_DeviceWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kDeviceFieldNumber = 1,
  };
  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  uint32_t device() const;
  void set_device(uint32_t value);
  private:
  uint32_t _internal_device() const;
  void _internal_set_device(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDMessageToRemote.DeviceWrite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t device_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageToRemote_DeviceRead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageToRemote.DeviceRead) */ {
 public:
  inline CHIDMessageToRemote_DeviceRead() : CHIDMessageToRemote_DeviceRead(nullptr) {}
  ~CHIDMessageToRemote_DeviceRead() override;
  explicit constexpr CHIDMessageToRemote_DeviceRead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageToRemote_DeviceRead(const CHIDMessageToRemote_DeviceRead& from);
  CHIDMessageToRemote_DeviceRead(CHIDMessageToRemote_DeviceRead&& from) noexcept
    : CHIDMessageToRemote_DeviceRead() {
    *this = ::std::move(from);
  }

  inline CHIDMessageToRemote_DeviceRead& operator=(const CHIDMessageToRemote_DeviceRead& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageToRemote_DeviceRead& operator=(CHIDMessageToRemote_DeviceRead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageToRemote_DeviceRead& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageToRemote_DeviceRead* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageToRemote_DeviceRead*>(
               &_CHIDMessageToRemote_DeviceRead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CHIDMessageToRemote_DeviceRead& a, CHIDMessageToRemote_DeviceRead& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageToRemote_DeviceRead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageToRemote_DeviceRead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageToRemote_DeviceRead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageToRemote_DeviceRead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageToRemote_DeviceRead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageToRemote_DeviceRead& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageToRemote_DeviceRead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageToRemote.DeviceRead";
  }
  protected:
  explicit CHIDMessageToRemote_DeviceRead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kLengthFieldNumber = 2,
    kTimeoutMsFieldNumber = 3,
  };
  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  uint32_t device() const;
  void set_device(uint32_t value);
  private:
  uint32_t _internal_device() const;
  void _internal_set_device(uint32_t value);
  public:

  // optional uint32 length = 2;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // optional int32 timeout_ms = 3;
  bool has_timeout_ms() const;
  private:
  bool _internal_has_timeout_ms() const;
  public:
  void clear_timeout_ms();
  int32_t timeout_ms() const;
  void set_timeout_ms(int32_t value);
  private:
  int32_t _internal_timeout_ms() const;
  void _internal_set_timeout_ms(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDMessageToRemote.DeviceRead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t device_;
  uint32_t length_;
  int32_t timeout_ms_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageToRemote_DeviceSendFeatureReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageToRemote.DeviceSendFeatureReport) */ {
 public:
  inline CHIDMessageToRemote_DeviceSendFeatureReport() : CHIDMessageToRemote_DeviceSendFeatureReport(nullptr) {}
  ~CHIDMessageToRemote_DeviceSendFeatureReport() override;
  explicit constexpr CHIDMessageToRemote_DeviceSendFeatureReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageToRemote_DeviceSendFeatureReport(const CHIDMessageToRemote_DeviceSendFeatureReport& from);
  CHIDMessageToRemote_DeviceSendFeatureReport(CHIDMessageToRemote_DeviceSendFeatureReport&& from) noexcept
    : CHIDMessageToRemote_DeviceSendFeatureReport() {
    *this = ::std::move(from);
  }

  inline CHIDMessageToRemote_DeviceSendFeatureReport& operator=(const CHIDMessageToRemote_DeviceSendFeatureReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageToRemote_DeviceSendFeatureReport& operator=(CHIDMessageToRemote_DeviceSendFeatureReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageToRemote_DeviceSendFeatureReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageToRemote_DeviceSendFeatureReport* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageToRemote_DeviceSendFeatureReport*>(
               &_CHIDMessageToRemote_DeviceSendFeatureReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CHIDMessageToRemote_DeviceSendFeatureReport& a, CHIDMessageToRemote_DeviceSendFeatureReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageToRemote_DeviceSendFeatureReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageToRemote_DeviceSendFeatureReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageToRemote_DeviceSendFeatureReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageToRemote_DeviceSendFeatureReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageToRemote_DeviceSendFeatureReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageToRemote_DeviceSendFeatureReport& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageToRemote_DeviceSendFeatureReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageToRemote.DeviceSendFeatureReport";
  }
  protected:
  explicit CHIDMessageToRemote_DeviceSendFeatureReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kDeviceFieldNumber = 1,
  };
  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  uint32_t device() const;
  void set_device(uint32_t value);
  private:
  uint32_t _internal_device() const;
  void _internal_set_device(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDMessageToRemote.DeviceSendFeatureReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t device_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageToRemote_DeviceGetFeatureReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageToRemote.DeviceGetFeatureReport) */ {
 public:
  inline CHIDMessageToRemote_DeviceGetFeatureReport() : CHIDMessageToRemote_DeviceGetFeatureReport(nullptr) {}
  ~CHIDMessageToRemote_DeviceGetFeatureReport() override;
  explicit constexpr CHIDMessageToRemote_DeviceGetFeatureReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageToRemote_DeviceGetFeatureReport(const CHIDMessageToRemote_DeviceGetFeatureReport& from);
  CHIDMessageToRemote_DeviceGetFeatureReport(CHIDMessageToRemote_DeviceGetFeatureReport&& from) noexcept
    : CHIDMessageToRemote_DeviceGetFeatureReport() {
    *this = ::std::move(from);
  }

  inline CHIDMessageToRemote_DeviceGetFeatureReport& operator=(const CHIDMessageToRemote_DeviceGetFeatureReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageToRemote_DeviceGetFeatureReport& operator=(CHIDMessageToRemote_DeviceGetFeatureReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageToRemote_DeviceGetFeatureReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageToRemote_DeviceGetFeatureReport* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageToRemote_DeviceGetFeatureReport*>(
               &_CHIDMessageToRemote_DeviceGetFeatureReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CHIDMessageToRemote_DeviceGetFeatureReport& a, CHIDMessageToRemote_DeviceGetFeatureReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageToRemote_DeviceGetFeatureReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageToRemote_DeviceGetFeatureReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageToRemote_DeviceGetFeatureReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageToRemote_DeviceGetFeatureReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageToRemote_DeviceGetFeatureReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageToRemote_DeviceGetFeatureReport& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageToRemote_DeviceGetFeatureReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageToRemote.DeviceGetFeatureReport";
  }
  protected:
  explicit CHIDMessageToRemote_DeviceGetFeatureReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportNumberFieldNumber = 2,
    kDeviceFieldNumber = 1,
    kLengthFieldNumber = 3,
  };
  // optional bytes report_number = 2;
  bool has_report_number() const;
  private:
  bool _internal_has_report_number() const;
  public:
  void clear_report_number();
  const std::string& report_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_report_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_report_number();
  PROTOBUF_NODISCARD std::string* release_report_number();
  void set_allocated_report_number(std::string* report_number);
  private:
  const std::string& _internal_report_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_report_number(const std::string& value);
  std::string* _internal_mutable_report_number();
  public:

  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  uint32_t device() const;
  void set_device(uint32_t value);
  private:
  uint32_t _internal_device() const;
  void _internal_set_device(uint32_t value);
  public:

  // optional uint32 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDMessageToRemote.DeviceGetFeatureReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_number_;
  uint32_t device_;
  uint32_t length_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageToRemote_DeviceGetVendorString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageToRemote.DeviceGetVendorString) */ {
 public:
  inline CHIDMessageToRemote_DeviceGetVendorString() : CHIDMessageToRemote_DeviceGetVendorString(nullptr) {}
  ~CHIDMessageToRemote_DeviceGetVendorString() override;
  explicit constexpr CHIDMessageToRemote_DeviceGetVendorString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageToRemote_DeviceGetVendorString(const CHIDMessageToRemote_DeviceGetVendorString& from);
  CHIDMessageToRemote_DeviceGetVendorString(CHIDMessageToRemote_DeviceGetVendorString&& from) noexcept
    : CHIDMessageToRemote_DeviceGetVendorString() {
    *this = ::std::move(from);
  }

  inline CHIDMessageToRemote_DeviceGetVendorString& operator=(const CHIDMessageToRemote_DeviceGetVendorString& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageToRemote_DeviceGetVendorString& operator=(CHIDMessageToRemote_DeviceGetVendorString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageToRemote_DeviceGetVendorString& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageToRemote_DeviceGetVendorString* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageToRemote_DeviceGetVendorString*>(
               &_CHIDMessageToRemote_DeviceGetVendorString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CHIDMessageToRemote_DeviceGetVendorString& a, CHIDMessageToRemote_DeviceGetVendorString& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageToRemote_DeviceGetVendorString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageToRemote_DeviceGetVendorString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageToRemote_DeviceGetVendorString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageToRemote_DeviceGetVendorString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageToRemote_DeviceGetVendorString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageToRemote_DeviceGetVendorString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageToRemote_DeviceGetVendorString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageToRemote.DeviceGetVendorString";
  }
  protected:
  explicit CHIDMessageToRemote_DeviceGetVendorString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  uint32_t device() const;
  void set_device(uint32_t value);
  private:
  uint32_t _internal_device() const;
  void _internal_set_device(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDMessageToRemote.DeviceGetVendorString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t device_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageToRemote_DeviceGetProductString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageToRemote.DeviceGetProductString) */ {
 public:
  inline CHIDMessageToRemote_DeviceGetProductString() : CHIDMessageToRemote_DeviceGetProductString(nullptr) {}
  ~CHIDMessageToRemote_DeviceGetProductString() override;
  explicit constexpr CHIDMessageToRemote_DeviceGetProductString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageToRemote_DeviceGetProductString(const CHIDMessageToRemote_DeviceGetProductString& from);
  CHIDMessageToRemote_DeviceGetProductString(CHIDMessageToRemote_DeviceGetProductString&& from) noexcept
    : CHIDMessageToRemote_DeviceGetProductString() {
    *this = ::std::move(from);
  }

  inline CHIDMessageToRemote_DeviceGetProductString& operator=(const CHIDMessageToRemote_DeviceGetProductString& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageToRemote_DeviceGetProductString& operator=(CHIDMessageToRemote_DeviceGetProductString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageToRemote_DeviceGetProductString& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageToRemote_DeviceGetProductString* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageToRemote_DeviceGetProductString*>(
               &_CHIDMessageToRemote_DeviceGetProductString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CHIDMessageToRemote_DeviceGetProductString& a, CHIDMessageToRemote_DeviceGetProductString& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageToRemote_DeviceGetProductString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageToRemote_DeviceGetProductString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageToRemote_DeviceGetProductString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageToRemote_DeviceGetProductString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageToRemote_DeviceGetProductString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageToRemote_DeviceGetProductString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageToRemote_DeviceGetProductString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageToRemote.DeviceGetProductString";
  }
  protected:
  explicit CHIDMessageToRemote_DeviceGetProductString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  uint32_t device() const;
  void set_device(uint32_t value);
  private:
  uint32_t _internal_device() const;
  void _internal_set_device(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDMessageToRemote.DeviceGetProductString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t device_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageToRemote_DeviceGetSerialNumberString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageToRemote.DeviceGetSerialNumberString) */ {
 public:
  inline CHIDMessageToRemote_DeviceGetSerialNumberString() : CHIDMessageToRemote_DeviceGetSerialNumberString(nullptr) {}
  ~CHIDMessageToRemote_DeviceGetSerialNumberString() override;
  explicit constexpr CHIDMessageToRemote_DeviceGetSerialNumberString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageToRemote_DeviceGetSerialNumberString(const CHIDMessageToRemote_DeviceGetSerialNumberString& from);
  CHIDMessageToRemote_DeviceGetSerialNumberString(CHIDMessageToRemote_DeviceGetSerialNumberString&& from) noexcept
    : CHIDMessageToRemote_DeviceGetSerialNumberString() {
    *this = ::std::move(from);
  }

  inline CHIDMessageToRemote_DeviceGetSerialNumberString& operator=(const CHIDMessageToRemote_DeviceGetSerialNumberString& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageToRemote_DeviceGetSerialNumberString& operator=(CHIDMessageToRemote_DeviceGetSerialNumberString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageToRemote_DeviceGetSerialNumberString& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageToRemote_DeviceGetSerialNumberString* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageToRemote_DeviceGetSerialNumberString*>(
               &_CHIDMessageToRemote_DeviceGetSerialNumberString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CHIDMessageToRemote_DeviceGetSerialNumberString& a, CHIDMessageToRemote_DeviceGetSerialNumberString& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageToRemote_DeviceGetSerialNumberString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageToRemote_DeviceGetSerialNumberString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageToRemote_DeviceGetSerialNumberString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageToRemote_DeviceGetSerialNumberString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageToRemote_DeviceGetSerialNumberString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageToRemote_DeviceGetSerialNumberString& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageToRemote_DeviceGetSerialNumberString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageToRemote.DeviceGetSerialNumberString";
  }
  protected:
  explicit CHIDMessageToRemote_DeviceGetSerialNumberString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  uint32_t device() const;
  void set_device(uint32_t value);
  private:
  uint32_t _internal_device() const;
  void _internal_set_device(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDMessageToRemote.DeviceGetSerialNumberString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t device_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageToRemote_DeviceStartInputReports final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageToRemote.DeviceStartInputReports) */ {
 public:
  inline CHIDMessageToRemote_DeviceStartInputReports() : CHIDMessageToRemote_DeviceStartInputReports(nullptr) {}
  ~CHIDMessageToRemote_DeviceStartInputReports() override;
  explicit constexpr CHIDMessageToRemote_DeviceStartInputReports(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageToRemote_DeviceStartInputReports(const CHIDMessageToRemote_DeviceStartInputReports& from);
  CHIDMessageToRemote_DeviceStartInputReports(CHIDMessageToRemote_DeviceStartInputReports&& from) noexcept
    : CHIDMessageToRemote_DeviceStartInputReports() {
    *this = ::std::move(from);
  }

  inline CHIDMessageToRemote_DeviceStartInputReports& operator=(const CHIDMessageToRemote_DeviceStartInputReports& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageToRemote_DeviceStartInputReports& operator=(CHIDMessageToRemote_DeviceStartInputReports&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageToRemote_DeviceStartInputReports& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageToRemote_DeviceStartInputReports* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageToRemote_DeviceStartInputReports*>(
               &_CHIDMessageToRemote_DeviceStartInputReports_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CHIDMessageToRemote_DeviceStartInputReports& a, CHIDMessageToRemote_DeviceStartInputReports& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageToRemote_DeviceStartInputReports* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageToRemote_DeviceStartInputReports* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageToRemote_DeviceStartInputReports* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageToRemote_DeviceStartInputReports>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageToRemote_DeviceStartInputReports& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageToRemote_DeviceStartInputReports& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageToRemote_DeviceStartInputReports* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageToRemote.DeviceStartInputReports";
  }
  protected:
  explicit CHIDMessageToRemote_DeviceStartInputReports(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  uint32_t device() const;
  void set_device(uint32_t value);
  private:
  uint32_t _internal_device() const;
  void _internal_set_device(uint32_t value);
  public:

  // optional uint32 length = 2;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDMessageToRemote.DeviceStartInputReports)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t device_;
  uint32_t length_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageToRemote_DeviceRequestFullReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageToRemote.DeviceRequestFullReport) */ {
 public:
  inline CHIDMessageToRemote_DeviceRequestFullReport() : CHIDMessageToRemote_DeviceRequestFullReport(nullptr) {}
  ~CHIDMessageToRemote_DeviceRequestFullReport() override;
  explicit constexpr CHIDMessageToRemote_DeviceRequestFullReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageToRemote_DeviceRequestFullReport(const CHIDMessageToRemote_DeviceRequestFullReport& from);
  CHIDMessageToRemote_DeviceRequestFullReport(CHIDMessageToRemote_DeviceRequestFullReport&& from) noexcept
    : CHIDMessageToRemote_DeviceRequestFullReport() {
    *this = ::std::move(from);
  }

  inline CHIDMessageToRemote_DeviceRequestFullReport& operator=(const CHIDMessageToRemote_DeviceRequestFullReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageToRemote_DeviceRequestFullReport& operator=(CHIDMessageToRemote_DeviceRequestFullReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageToRemote_DeviceRequestFullReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageToRemote_DeviceRequestFullReport* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageToRemote_DeviceRequestFullReport*>(
               &_CHIDMessageToRemote_DeviceRequestFullReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CHIDMessageToRemote_DeviceRequestFullReport& a, CHIDMessageToRemote_DeviceRequestFullReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageToRemote_DeviceRequestFullReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageToRemote_DeviceRequestFullReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageToRemote_DeviceRequestFullReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageToRemote_DeviceRequestFullReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageToRemote_DeviceRequestFullReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageToRemote_DeviceRequestFullReport& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageToRemote_DeviceRequestFullReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageToRemote.DeviceRequestFullReport";
  }
  protected:
  explicit CHIDMessageToRemote_DeviceRequestFullReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  uint32_t device() const;
  void set_device(uint32_t value);
  private:
  uint32_t _internal_device() const;
  void _internal_set_device(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDMessageToRemote.DeviceRequestFullReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t device_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageToRemote_DeviceDisconnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageToRemote.DeviceDisconnect) */ {
 public:
  inline CHIDMessageToRemote_DeviceDisconnect() : CHIDMessageToRemote_DeviceDisconnect(nullptr) {}
  ~CHIDMessageToRemote_DeviceDisconnect() override;
  explicit constexpr CHIDMessageToRemote_DeviceDisconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageToRemote_DeviceDisconnect(const CHIDMessageToRemote_DeviceDisconnect& from);
  CHIDMessageToRemote_DeviceDisconnect(CHIDMessageToRemote_DeviceDisconnect&& from) noexcept
    : CHIDMessageToRemote_DeviceDisconnect() {
    *this = ::std::move(from);
  }

  inline CHIDMessageToRemote_DeviceDisconnect& operator=(const CHIDMessageToRemote_DeviceDisconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageToRemote_DeviceDisconnect& operator=(CHIDMessageToRemote_DeviceDisconnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageToRemote_DeviceDisconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageToRemote_DeviceDisconnect* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageToRemote_DeviceDisconnect*>(
               &_CHIDMessageToRemote_DeviceDisconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CHIDMessageToRemote_DeviceDisconnect& a, CHIDMessageToRemote_DeviceDisconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageToRemote_DeviceDisconnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageToRemote_DeviceDisconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageToRemote_DeviceDisconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageToRemote_DeviceDisconnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageToRemote_DeviceDisconnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageToRemote_DeviceDisconnect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageToRemote_DeviceDisconnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageToRemote.DeviceDisconnect";
  }
  protected:
  explicit CHIDMessageToRemote_DeviceDisconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kDeviceFieldNumber = 1,
    kDisconnectMethodFieldNumber = 2,
  };
  // optional bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  uint32_t device() const;
  void set_device(uint32_t value);
  private:
  uint32_t _internal_device() const;
  void _internal_set_device(uint32_t value);
  public:

  // optional .EHIDDeviceDisconnectMethod disconnectMethod = 2 [default = k_EDeviceDisconnectMethodUnknown];
  bool has_disconnectmethod() const;
  private:
  bool _internal_has_disconnectmethod() const;
  public:
  void clear_disconnectmethod();
  ::EHIDDeviceDisconnectMethod disconnectmethod() const;
  void set_disconnectmethod(::EHIDDeviceDisconnectMethod value);
  private:
  ::EHIDDeviceDisconnectMethod _internal_disconnectmethod() const;
  void _internal_set_disconnectmethod(::EHIDDeviceDisconnectMethod value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDMessageToRemote.DeviceDisconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t device_;
  int disconnectmethod_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageToRemote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageToRemote) */ {
 public:
  inline CHIDMessageToRemote() : CHIDMessageToRemote(nullptr) {}
  ~CHIDMessageToRemote() override;
  explicit constexpr CHIDMessageToRemote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageToRemote(const CHIDMessageToRemote& from);
  CHIDMessageToRemote(CHIDMessageToRemote&& from) noexcept
    : CHIDMessageToRemote() {
    *this = ::std::move(from);
  }

  inline CHIDMessageToRemote& operator=(const CHIDMessageToRemote& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageToRemote& operator=(CHIDMessageToRemote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageToRemote& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kDeviceOpen = 2,
    kDeviceClose = 3,
    kDeviceWrite = 4,
    kDeviceRead = 5,
    kDeviceSendFeatureReport = 6,
    kDeviceGetFeatureReport = 7,
    kDeviceGetVendorString = 8,
    kDeviceGetProductString = 9,
    kDeviceGetSerialNumberString = 10,
    kDeviceStartInputReports = 11,
    kDeviceRequestFullReport = 12,
    kDeviceDisconnect = 13,
    COMMAND_NOT_SET = 0,
  };

  static inline const CHIDMessageToRemote* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageToRemote*>(
               &_CHIDMessageToRemote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CHIDMessageToRemote& a, CHIDMessageToRemote& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageToRemote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageToRemote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageToRemote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageToRemote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageToRemote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageToRemote& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageToRemote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageToRemote";
  }
  protected:
  explicit CHIDMessageToRemote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CHIDMessageToRemote_DeviceOpen DeviceOpen;
  typedef CHIDMessageToRemote_DeviceClose DeviceClose;
  typedef CHIDMessageToRemote_DeviceWrite DeviceWrite;
  typedef CHIDMessageToRemote_DeviceRead DeviceRead;
  typedef CHIDMessageToRemote_DeviceSendFeatureReport DeviceSendFeatureReport;
  typedef CHIDMessageToRemote_DeviceGetFeatureReport DeviceGetFeatureReport;
  typedef CHIDMessageToRemote_DeviceGetVendorString DeviceGetVendorString;
  typedef CHIDMessageToRemote_DeviceGetProductString DeviceGetProductString;
  typedef CHIDMessageToRemote_DeviceGetSerialNumberString DeviceGetSerialNumberString;
  typedef CHIDMessageToRemote_DeviceStartInputReports DeviceStartInputReports;
  typedef CHIDMessageToRemote_DeviceRequestFullReport DeviceRequestFullReport;
  typedef CHIDMessageToRemote_DeviceDisconnect DeviceDisconnect;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kDeviceOpenFieldNumber = 2,
    kDeviceCloseFieldNumber = 3,
    kDeviceWriteFieldNumber = 4,
    kDeviceReadFieldNumber = 5,
    kDeviceSendFeatureReportFieldNumber = 6,
    kDeviceGetFeatureReportFieldNumber = 7,
    kDeviceGetVendorStringFieldNumber = 8,
    kDeviceGetProductStringFieldNumber = 9,
    kDeviceGetSerialNumberStringFieldNumber = 10,
    kDeviceStartInputReportsFieldNumber = 11,
    kDeviceRequestFullReportFieldNumber = 12,
    kDeviceDisconnectFieldNumber = 13,
  };
  // optional uint32 request_id = 1;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  uint32_t request_id() const;
  void set_request_id(uint32_t value);
  private:
  uint32_t _internal_request_id() const;
  void _internal_set_request_id(uint32_t value);
  public:

  // .CHIDMessageToRemote.DeviceOpen device_open = 2;
  bool has_device_open() const;
  private:
  bool _internal_has_device_open() const;
  public:
  void clear_device_open();
  const ::CHIDMessageToRemote_DeviceOpen& device_open() const;
  PROTOBUF_NODISCARD ::CHIDMessageToRemote_DeviceOpen* release_device_open();
  ::CHIDMessageToRemote_DeviceOpen* mutable_device_open();
  void set_allocated_device_open(::CHIDMessageToRemote_DeviceOpen* device_open);
  private:
  const ::CHIDMessageToRemote_DeviceOpen& _internal_device_open() const;
  ::CHIDMessageToRemote_DeviceOpen* _internal_mutable_device_open();
  public:
  void unsafe_arena_set_allocated_device_open(
      ::CHIDMessageToRemote_DeviceOpen* device_open);
  ::CHIDMessageToRemote_DeviceOpen* unsafe_arena_release_device_open();

  // .CHIDMessageToRemote.DeviceClose device_close = 3;
  bool has_device_close() const;
  private:
  bool _internal_has_device_close() const;
  public:
  void clear_device_close();
  const ::CHIDMessageToRemote_DeviceClose& device_close() const;
  PROTOBUF_NODISCARD ::CHIDMessageToRemote_DeviceClose* release_device_close();
  ::CHIDMessageToRemote_DeviceClose* mutable_device_close();
  void set_allocated_device_close(::CHIDMessageToRemote_DeviceClose* device_close);
  private:
  const ::CHIDMessageToRemote_DeviceClose& _internal_device_close() const;
  ::CHIDMessageToRemote_DeviceClose* _internal_mutable_device_close();
  public:
  void unsafe_arena_set_allocated_device_close(
      ::CHIDMessageToRemote_DeviceClose* device_close);
  ::CHIDMessageToRemote_DeviceClose* unsafe_arena_release_device_close();

  // .CHIDMessageToRemote.DeviceWrite device_write = 4;
  bool has_device_write() const;
  private:
  bool _internal_has_device_write() const;
  public:
  void clear_device_write();
  const ::CHIDMessageToRemote_DeviceWrite& device_write() const;
  PROTOBUF_NODISCARD ::CHIDMessageToRemote_DeviceWrite* release_device_write();
  ::CHIDMessageToRemote_DeviceWrite* mutable_device_write();
  void set_allocated_device_write(::CHIDMessageToRemote_DeviceWrite* device_write);
  private:
  const ::CHIDMessageToRemote_DeviceWrite& _internal_device_write() const;
  ::CHIDMessageToRemote_DeviceWrite* _internal_mutable_device_write();
  public:
  void unsafe_arena_set_allocated_device_write(
      ::CHIDMessageToRemote_DeviceWrite* device_write);
  ::CHIDMessageToRemote_DeviceWrite* unsafe_arena_release_device_write();

  // .CHIDMessageToRemote.DeviceRead device_read = 5;
  bool has_device_read() const;
  private:
  bool _internal_has_device_read() const;
  public:
  void clear_device_read();
  const ::CHIDMessageToRemote_DeviceRead& device_read() const;
  PROTOBUF_NODISCARD ::CHIDMessageToRemote_DeviceRead* release_device_read();
  ::CHIDMessageToRemote_DeviceRead* mutable_device_read();
  void set_allocated_device_read(::CHIDMessageToRemote_DeviceRead* device_read);
  private:
  const ::CHIDMessageToRemote_DeviceRead& _internal_device_read() const;
  ::CHIDMessageToRemote_DeviceRead* _internal_mutable_device_read();
  public:
  void unsafe_arena_set_allocated_device_read(
      ::CHIDMessageToRemote_DeviceRead* device_read);
  ::CHIDMessageToRemote_DeviceRead* unsafe_arena_release_device_read();

  // .CHIDMessageToRemote.DeviceSendFeatureReport device_send_feature_report = 6;
  bool has_device_send_feature_report() const;
  private:
  bool _internal_has_device_send_feature_report() const;
  public:
  void clear_device_send_feature_report();
  const ::CHIDMessageToRemote_DeviceSendFeatureReport& device_send_feature_report() const;
  PROTOBUF_NODISCARD ::CHIDMessageToRemote_DeviceSendFeatureReport* release_device_send_feature_report();
  ::CHIDMessageToRemote_DeviceSendFeatureReport* mutable_device_send_feature_report();
  void set_allocated_device_send_feature_report(::CHIDMessageToRemote_DeviceSendFeatureReport* device_send_feature_report);
  private:
  const ::CHIDMessageToRemote_DeviceSendFeatureReport& _internal_device_send_feature_report() const;
  ::CHIDMessageToRemote_DeviceSendFeatureReport* _internal_mutable_device_send_feature_report();
  public:
  void unsafe_arena_set_allocated_device_send_feature_report(
      ::CHIDMessageToRemote_DeviceSendFeatureReport* device_send_feature_report);
  ::CHIDMessageToRemote_DeviceSendFeatureReport* unsafe_arena_release_device_send_feature_report();

  // .CHIDMessageToRemote.DeviceGetFeatureReport device_get_feature_report = 7;
  bool has_device_get_feature_report() const;
  private:
  bool _internal_has_device_get_feature_report() const;
  public:
  void clear_device_get_feature_report();
  const ::CHIDMessageToRemote_DeviceGetFeatureReport& device_get_feature_report() const;
  PROTOBUF_NODISCARD ::CHIDMessageToRemote_DeviceGetFeatureReport* release_device_get_feature_report();
  ::CHIDMessageToRemote_DeviceGetFeatureReport* mutable_device_get_feature_report();
  void set_allocated_device_get_feature_report(::CHIDMessageToRemote_DeviceGetFeatureReport* device_get_feature_report);
  private:
  const ::CHIDMessageToRemote_DeviceGetFeatureReport& _internal_device_get_feature_report() const;
  ::CHIDMessageToRemote_DeviceGetFeatureReport* _internal_mutable_device_get_feature_report();
  public:
  void unsafe_arena_set_allocated_device_get_feature_report(
      ::CHIDMessageToRemote_DeviceGetFeatureReport* device_get_feature_report);
  ::CHIDMessageToRemote_DeviceGetFeatureReport* unsafe_arena_release_device_get_feature_report();

  // .CHIDMessageToRemote.DeviceGetVendorString device_get_vendor_string = 8;
  bool has_device_get_vendor_string() const;
  private:
  bool _internal_has_device_get_vendor_string() const;
  public:
  void clear_device_get_vendor_string();
  const ::CHIDMessageToRemote_DeviceGetVendorString& device_get_vendor_string() const;
  PROTOBUF_NODISCARD ::CHIDMessageToRemote_DeviceGetVendorString* release_device_get_vendor_string();
  ::CHIDMessageToRemote_DeviceGetVendorString* mutable_device_get_vendor_string();
  void set_allocated_device_get_vendor_string(::CHIDMessageToRemote_DeviceGetVendorString* device_get_vendor_string);
  private:
  const ::CHIDMessageToRemote_DeviceGetVendorString& _internal_device_get_vendor_string() const;
  ::CHIDMessageToRemote_DeviceGetVendorString* _internal_mutable_device_get_vendor_string();
  public:
  void unsafe_arena_set_allocated_device_get_vendor_string(
      ::CHIDMessageToRemote_DeviceGetVendorString* device_get_vendor_string);
  ::CHIDMessageToRemote_DeviceGetVendorString* unsafe_arena_release_device_get_vendor_string();

  // .CHIDMessageToRemote.DeviceGetProductString device_get_product_string = 9;
  bool has_device_get_product_string() const;
  private:
  bool _internal_has_device_get_product_string() const;
  public:
  void clear_device_get_product_string();
  const ::CHIDMessageToRemote_DeviceGetProductString& device_get_product_string() const;
  PROTOBUF_NODISCARD ::CHIDMessageToRemote_DeviceGetProductString* release_device_get_product_string();
  ::CHIDMessageToRemote_DeviceGetProductString* mutable_device_get_product_string();
  void set_allocated_device_get_product_string(::CHIDMessageToRemote_DeviceGetProductString* device_get_product_string);
  private:
  const ::CHIDMessageToRemote_DeviceGetProductString& _internal_device_get_product_string() const;
  ::CHIDMessageToRemote_DeviceGetProductString* _internal_mutable_device_get_product_string();
  public:
  void unsafe_arena_set_allocated_device_get_product_string(
      ::CHIDMessageToRemote_DeviceGetProductString* device_get_product_string);
  ::CHIDMessageToRemote_DeviceGetProductString* unsafe_arena_release_device_get_product_string();

  // .CHIDMessageToRemote.DeviceGetSerialNumberString device_get_serial_number_string = 10;
  bool has_device_get_serial_number_string() const;
  private:
  bool _internal_has_device_get_serial_number_string() const;
  public:
  void clear_device_get_serial_number_string();
  const ::CHIDMessageToRemote_DeviceGetSerialNumberString& device_get_serial_number_string() const;
  PROTOBUF_NODISCARD ::CHIDMessageToRemote_DeviceGetSerialNumberString* release_device_get_serial_number_string();
  ::CHIDMessageToRemote_DeviceGetSerialNumberString* mutable_device_get_serial_number_string();
  void set_allocated_device_get_serial_number_string(::CHIDMessageToRemote_DeviceGetSerialNumberString* device_get_serial_number_string);
  private:
  const ::CHIDMessageToRemote_DeviceGetSerialNumberString& _internal_device_get_serial_number_string() const;
  ::CHIDMessageToRemote_DeviceGetSerialNumberString* _internal_mutable_device_get_serial_number_string();
  public:
  void unsafe_arena_set_allocated_device_get_serial_number_string(
      ::CHIDMessageToRemote_DeviceGetSerialNumberString* device_get_serial_number_string);
  ::CHIDMessageToRemote_DeviceGetSerialNumberString* unsafe_arena_release_device_get_serial_number_string();

  // .CHIDMessageToRemote.DeviceStartInputReports device_start_input_reports = 11;
  bool has_device_start_input_reports() const;
  private:
  bool _internal_has_device_start_input_reports() const;
  public:
  void clear_device_start_input_reports();
  const ::CHIDMessageToRemote_DeviceStartInputReports& device_start_input_reports() const;
  PROTOBUF_NODISCARD ::CHIDMessageToRemote_DeviceStartInputReports* release_device_start_input_reports();
  ::CHIDMessageToRemote_DeviceStartInputReports* mutable_device_start_input_reports();
  void set_allocated_device_start_input_reports(::CHIDMessageToRemote_DeviceStartInputReports* device_start_input_reports);
  private:
  const ::CHIDMessageToRemote_DeviceStartInputReports& _internal_device_start_input_reports() const;
  ::CHIDMessageToRemote_DeviceStartInputReports* _internal_mutable_device_start_input_reports();
  public:
  void unsafe_arena_set_allocated_device_start_input_reports(
      ::CHIDMessageToRemote_DeviceStartInputReports* device_start_input_reports);
  ::CHIDMessageToRemote_DeviceStartInputReports* unsafe_arena_release_device_start_input_reports();

  // .CHIDMessageToRemote.DeviceRequestFullReport device_request_full_report = 12;
  bool has_device_request_full_report() const;
  private:
  bool _internal_has_device_request_full_report() const;
  public:
  void clear_device_request_full_report();
  const ::CHIDMessageToRemote_DeviceRequestFullReport& device_request_full_report() const;
  PROTOBUF_NODISCARD ::CHIDMessageToRemote_DeviceRequestFullReport* release_device_request_full_report();
  ::CHIDMessageToRemote_DeviceRequestFullReport* mutable_device_request_full_report();
  void set_allocated_device_request_full_report(::CHIDMessageToRemote_DeviceRequestFullReport* device_request_full_report);
  private:
  const ::CHIDMessageToRemote_DeviceRequestFullReport& _internal_device_request_full_report() const;
  ::CHIDMessageToRemote_DeviceRequestFullReport* _internal_mutable_device_request_full_report();
  public:
  void unsafe_arena_set_allocated_device_request_full_report(
      ::CHIDMessageToRemote_DeviceRequestFullReport* device_request_full_report);
  ::CHIDMessageToRemote_DeviceRequestFullReport* unsafe_arena_release_device_request_full_report();

  // .CHIDMessageToRemote.DeviceDisconnect device_disconnect = 13;
  bool has_device_disconnect() const;
  private:
  bool _internal_has_device_disconnect() const;
  public:
  void clear_device_disconnect();
  const ::CHIDMessageToRemote_DeviceDisconnect& device_disconnect() const;
  PROTOBUF_NODISCARD ::CHIDMessageToRemote_DeviceDisconnect* release_device_disconnect();
  ::CHIDMessageToRemote_DeviceDisconnect* mutable_device_disconnect();
  void set_allocated_device_disconnect(::CHIDMessageToRemote_DeviceDisconnect* device_disconnect);
  private:
  const ::CHIDMessageToRemote_DeviceDisconnect& _internal_device_disconnect() const;
  ::CHIDMessageToRemote_DeviceDisconnect* _internal_mutable_device_disconnect();
  public:
  void unsafe_arena_set_allocated_device_disconnect(
      ::CHIDMessageToRemote_DeviceDisconnect* device_disconnect);
  ::CHIDMessageToRemote_DeviceDisconnect* unsafe_arena_release_device_disconnect();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:CHIDMessageToRemote)
 private:
  class _Internal;
  void set_has_device_open();
  void set_has_device_close();
  void set_has_device_write();
  void set_has_device_read();
  void set_has_device_send_feature_report();
  void set_has_device_get_feature_report();
  void set_has_device_get_vendor_string();
  void set_has_device_get_product_string();
  void set_has_device_get_serial_number_string();
  void set_has_device_start_input_reports();
  void set_has_device_request_full_report();
  void set_has_device_disconnect();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t request_id_;
  union CommandUnion {
    constexpr CommandUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CHIDMessageToRemote_DeviceOpen* device_open_;
    ::CHIDMessageToRemote_DeviceClose* device_close_;
    ::CHIDMessageToRemote_DeviceWrite* device_write_;
    ::CHIDMessageToRemote_DeviceRead* device_read_;
    ::CHIDMessageToRemote_DeviceSendFeatureReport* device_send_feature_report_;
    ::CHIDMessageToRemote_DeviceGetFeatureReport* device_get_feature_report_;
    ::CHIDMessageToRemote_DeviceGetVendorString* device_get_vendor_string_;
    ::CHIDMessageToRemote_DeviceGetProductString* device_get_product_string_;
    ::CHIDMessageToRemote_DeviceGetSerialNumberString* device_get_serial_number_string_;
    ::CHIDMessageToRemote_DeviceStartInputReports* device_start_input_reports_;
    ::CHIDMessageToRemote_DeviceRequestFullReport* device_request_full_report_;
    ::CHIDMessageToRemote_DeviceDisconnect* device_disconnect_;
  } command_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageFromRemote_UpdateDeviceList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageFromRemote.UpdateDeviceList) */ {
 public:
  inline CHIDMessageFromRemote_UpdateDeviceList() : CHIDMessageFromRemote_UpdateDeviceList(nullptr) {}
  ~CHIDMessageFromRemote_UpdateDeviceList() override;
  explicit constexpr CHIDMessageFromRemote_UpdateDeviceList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageFromRemote_UpdateDeviceList(const CHIDMessageFromRemote_UpdateDeviceList& from);
  CHIDMessageFromRemote_UpdateDeviceList(CHIDMessageFromRemote_UpdateDeviceList&& from) noexcept
    : CHIDMessageFromRemote_UpdateDeviceList() {
    *this = ::std::move(from);
  }

  inline CHIDMessageFromRemote_UpdateDeviceList& operator=(const CHIDMessageFromRemote_UpdateDeviceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageFromRemote_UpdateDeviceList& operator=(CHIDMessageFromRemote_UpdateDeviceList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageFromRemote_UpdateDeviceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageFromRemote_UpdateDeviceList* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageFromRemote_UpdateDeviceList*>(
               &_CHIDMessageFromRemote_UpdateDeviceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CHIDMessageFromRemote_UpdateDeviceList& a, CHIDMessageFromRemote_UpdateDeviceList& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageFromRemote_UpdateDeviceList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageFromRemote_UpdateDeviceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageFromRemote_UpdateDeviceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageFromRemote_UpdateDeviceList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageFromRemote_UpdateDeviceList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageFromRemote_UpdateDeviceList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageFromRemote_UpdateDeviceList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageFromRemote.UpdateDeviceList";
  }
  protected:
  explicit CHIDMessageFromRemote_UpdateDeviceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
  };
  // repeated .CHIDDeviceInfo devices = 1;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::CHIDDeviceInfo* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHIDDeviceInfo >*
      mutable_devices();
  private:
  const ::CHIDDeviceInfo& _internal_devices(int index) const;
  ::CHIDDeviceInfo* _internal_add_devices();
  public:
  const ::CHIDDeviceInfo& devices(int index) const;
  ::CHIDDeviceInfo* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHIDDeviceInfo >&
      devices() const;

  // @@protoc_insertion_point(class_scope:CHIDMessageFromRemote.UpdateDeviceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHIDDeviceInfo > devices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageFromRemote_RequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageFromRemote.RequestResponse) */ {
 public:
  inline CHIDMessageFromRemote_RequestResponse() : CHIDMessageFromRemote_RequestResponse(nullptr) {}
  ~CHIDMessageFromRemote_RequestResponse() override;
  explicit constexpr CHIDMessageFromRemote_RequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageFromRemote_RequestResponse(const CHIDMessageFromRemote_RequestResponse& from);
  CHIDMessageFromRemote_RequestResponse(CHIDMessageFromRemote_RequestResponse&& from) noexcept
    : CHIDMessageFromRemote_RequestResponse() {
    *this = ::std::move(from);
  }

  inline CHIDMessageFromRemote_RequestResponse& operator=(const CHIDMessageFromRemote_RequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageFromRemote_RequestResponse& operator=(CHIDMessageFromRemote_RequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageFromRemote_RequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageFromRemote_RequestResponse* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageFromRemote_RequestResponse*>(
               &_CHIDMessageFromRemote_RequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CHIDMessageFromRemote_RequestResponse& a, CHIDMessageFromRemote_RequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageFromRemote_RequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageFromRemote_RequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageFromRemote_RequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageFromRemote_RequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageFromRemote_RequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageFromRemote_RequestResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageFromRemote_RequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageFromRemote.RequestResponse";
  }
  protected:
  explicit CHIDMessageFromRemote_RequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // optional bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 request_id = 1;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  uint32_t request_id() const;
  void set_request_id(uint32_t value);
  private:
  uint32_t _internal_request_id() const;
  void _internal_set_request_id(uint32_t value);
  public:

  // optional int32 result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDMessageFromRemote.RequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t request_id_;
  int32_t result_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport) */ {
 public:
  inline CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport() : CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport(nullptr) {}
  ~CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport() override;
  explicit constexpr CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport(const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& from);
  CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport&& from) noexcept
    : CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport() {
    *this = ::std::move(from);
  }

  inline CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& operator=(const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& operator=(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport*>(
               &_CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& a, CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport";
  }
  protected:
  explicit CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportsFieldNumber = 2,
    kDeviceFieldNumber = 1,
  };
  // repeated .CHIDDeviceInputReport reports = 2;
  int reports_size() const;
  private:
  int _internal_reports_size() const;
  public:
  void clear_reports();
  ::CHIDDeviceInputReport* mutable_reports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHIDDeviceInputReport >*
      mutable_reports();
  private:
  const ::CHIDDeviceInputReport& _internal_reports(int index) const;
  ::CHIDDeviceInputReport* _internal_add_reports();
  public:
  const ::CHIDDeviceInputReport& reports(int index) const;
  ::CHIDDeviceInputReport* add_reports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHIDDeviceInputReport >&
      reports() const;

  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  uint32_t device() const;
  void set_device(uint32_t value);
  private:
  uint32_t _internal_device() const;
  void _internal_set_device(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHIDDeviceInputReport > reports_;
  uint32_t device_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageFromRemote_DeviceInputReports final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageFromRemote.DeviceInputReports) */ {
 public:
  inline CHIDMessageFromRemote_DeviceInputReports() : CHIDMessageFromRemote_DeviceInputReports(nullptr) {}
  ~CHIDMessageFromRemote_DeviceInputReports() override;
  explicit constexpr CHIDMessageFromRemote_DeviceInputReports(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageFromRemote_DeviceInputReports(const CHIDMessageFromRemote_DeviceInputReports& from);
  CHIDMessageFromRemote_DeviceInputReports(CHIDMessageFromRemote_DeviceInputReports&& from) noexcept
    : CHIDMessageFromRemote_DeviceInputReports() {
    *this = ::std::move(from);
  }

  inline CHIDMessageFromRemote_DeviceInputReports& operator=(const CHIDMessageFromRemote_DeviceInputReports& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageFromRemote_DeviceInputReports& operator=(CHIDMessageFromRemote_DeviceInputReports&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageFromRemote_DeviceInputReports& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageFromRemote_DeviceInputReports* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageFromRemote_DeviceInputReports*>(
               &_CHIDMessageFromRemote_DeviceInputReports_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CHIDMessageFromRemote_DeviceInputReports& a, CHIDMessageFromRemote_DeviceInputReports& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageFromRemote_DeviceInputReports* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageFromRemote_DeviceInputReports* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageFromRemote_DeviceInputReports* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageFromRemote_DeviceInputReports>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageFromRemote_DeviceInputReports& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageFromRemote_DeviceInputReports& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageFromRemote_DeviceInputReports* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageFromRemote.DeviceInputReports";
  }
  protected:
  explicit CHIDMessageFromRemote_DeviceInputReports(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport DeviceInputReport;

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceReportsFieldNumber = 1,
  };
  // repeated .CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport device_reports = 1;
  int device_reports_size() const;
  private:
  int _internal_device_reports_size() const;
  public:
  void clear_device_reports();
  ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* mutable_device_reports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport >*
      mutable_device_reports();
  private:
  const ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& _internal_device_reports(int index) const;
  ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* _internal_add_device_reports();
  public:
  const ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& device_reports(int index) const;
  ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* add_device_reports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport >&
      device_reports() const;

  // @@protoc_insertion_point(class_scope:CHIDMessageFromRemote.DeviceInputReports)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport > device_reports_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageFromRemote_CloseDevice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageFromRemote.CloseDevice) */ {
 public:
  inline CHIDMessageFromRemote_CloseDevice() : CHIDMessageFromRemote_CloseDevice(nullptr) {}
  ~CHIDMessageFromRemote_CloseDevice() override;
  explicit constexpr CHIDMessageFromRemote_CloseDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageFromRemote_CloseDevice(const CHIDMessageFromRemote_CloseDevice& from);
  CHIDMessageFromRemote_CloseDevice(CHIDMessageFromRemote_CloseDevice&& from) noexcept
    : CHIDMessageFromRemote_CloseDevice() {
    *this = ::std::move(from);
  }

  inline CHIDMessageFromRemote_CloseDevice& operator=(const CHIDMessageFromRemote_CloseDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageFromRemote_CloseDevice& operator=(CHIDMessageFromRemote_CloseDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageFromRemote_CloseDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageFromRemote_CloseDevice* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageFromRemote_CloseDevice*>(
               &_CHIDMessageFromRemote_CloseDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CHIDMessageFromRemote_CloseDevice& a, CHIDMessageFromRemote_CloseDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageFromRemote_CloseDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageFromRemote_CloseDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageFromRemote_CloseDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageFromRemote_CloseDevice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageFromRemote_CloseDevice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageFromRemote_CloseDevice& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageFromRemote_CloseDevice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageFromRemote.CloseDevice";
  }
  protected:
  explicit CHIDMessageFromRemote_CloseDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // optional uint32 device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  uint32_t device() const;
  void set_device(uint32_t value);
  private:
  uint32_t _internal_device() const;
  void _internal_set_device(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CHIDMessageFromRemote.CloseDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t device_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageFromRemote_CloseAllDevices final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CHIDMessageFromRemote.CloseAllDevices) */ {
 public:
  inline CHIDMessageFromRemote_CloseAllDevices() : CHIDMessageFromRemote_CloseAllDevices(nullptr) {}
  explicit constexpr CHIDMessageFromRemote_CloseAllDevices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageFromRemote_CloseAllDevices(const CHIDMessageFromRemote_CloseAllDevices& from);
  CHIDMessageFromRemote_CloseAllDevices(CHIDMessageFromRemote_CloseAllDevices&& from) noexcept
    : CHIDMessageFromRemote_CloseAllDevices() {
    *this = ::std::move(from);
  }

  inline CHIDMessageFromRemote_CloseAllDevices& operator=(const CHIDMessageFromRemote_CloseAllDevices& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageFromRemote_CloseAllDevices& operator=(CHIDMessageFromRemote_CloseAllDevices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageFromRemote_CloseAllDevices& default_instance() {
    return *internal_default_instance();
  }
  static inline const CHIDMessageFromRemote_CloseAllDevices* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageFromRemote_CloseAllDevices*>(
               &_CHIDMessageFromRemote_CloseAllDevices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CHIDMessageFromRemote_CloseAllDevices& a, CHIDMessageFromRemote_CloseAllDevices& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageFromRemote_CloseAllDevices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageFromRemote_CloseAllDevices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageFromRemote_CloseAllDevices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageFromRemote_CloseAllDevices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CHIDMessageFromRemote_CloseAllDevices& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CHIDMessageFromRemote_CloseAllDevices& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageFromRemote.CloseAllDevices";
  }
  protected:
  explicit CHIDMessageFromRemote_CloseAllDevices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CHIDMessageFromRemote.CloseAllDevices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// -------------------------------------------------------------------

class CHIDMessageFromRemote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHIDMessageFromRemote) */ {
 public:
  inline CHIDMessageFromRemote() : CHIDMessageFromRemote(nullptr) {}
  ~CHIDMessageFromRemote() override;
  explicit constexpr CHIDMessageFromRemote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CHIDMessageFromRemote(const CHIDMessageFromRemote& from);
  CHIDMessageFromRemote(CHIDMessageFromRemote&& from) noexcept
    : CHIDMessageFromRemote() {
    *this = ::std::move(from);
  }

  inline CHIDMessageFromRemote& operator=(const CHIDMessageFromRemote& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHIDMessageFromRemote& operator=(CHIDMessageFromRemote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CHIDMessageFromRemote& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kUpdateDeviceList = 1,
    kResponse = 2,
    kReports = 3,
    kCloseDevice = 4,
    kCloseAllDevices = 5,
    COMMAND_NOT_SET = 0,
  };

  static inline const CHIDMessageFromRemote* internal_default_instance() {
    return reinterpret_cast<const CHIDMessageFromRemote*>(
               &_CHIDMessageFromRemote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CHIDMessageFromRemote& a, CHIDMessageFromRemote& b) {
    a.Swap(&b);
  }
  inline void Swap(CHIDMessageFromRemote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHIDMessageFromRemote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CHIDMessageFromRemote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CHIDMessageFromRemote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CHIDMessageFromRemote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CHIDMessageFromRemote& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHIDMessageFromRemote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHIDMessageFromRemote";
  }
  protected:
  explicit CHIDMessageFromRemote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CHIDMessageFromRemote_UpdateDeviceList UpdateDeviceList;
  typedef CHIDMessageFromRemote_RequestResponse RequestResponse;
  typedef CHIDMessageFromRemote_DeviceInputReports DeviceInputReports;
  typedef CHIDMessageFromRemote_CloseDevice CloseDevice;
  typedef CHIDMessageFromRemote_CloseAllDevices CloseAllDevices;

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateDeviceListFieldNumber = 1,
    kResponseFieldNumber = 2,
    kReportsFieldNumber = 3,
    kCloseDeviceFieldNumber = 4,
    kCloseAllDevicesFieldNumber = 5,
  };
  // .CHIDMessageFromRemote.UpdateDeviceList update_device_list = 1;
  bool has_update_device_list() const;
  private:
  bool _internal_has_update_device_list() const;
  public:
  void clear_update_device_list();
  const ::CHIDMessageFromRemote_UpdateDeviceList& update_device_list() const;
  PROTOBUF_NODISCARD ::CHIDMessageFromRemote_UpdateDeviceList* release_update_device_list();
  ::CHIDMessageFromRemote_UpdateDeviceList* mutable_update_device_list();
  void set_allocated_update_device_list(::CHIDMessageFromRemote_UpdateDeviceList* update_device_list);
  private:
  const ::CHIDMessageFromRemote_UpdateDeviceList& _internal_update_device_list() const;
  ::CHIDMessageFromRemote_UpdateDeviceList* _internal_mutable_update_device_list();
  public:
  void unsafe_arena_set_allocated_update_device_list(
      ::CHIDMessageFromRemote_UpdateDeviceList* update_device_list);
  ::CHIDMessageFromRemote_UpdateDeviceList* unsafe_arena_release_update_device_list();

  // .CHIDMessageFromRemote.RequestResponse response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::CHIDMessageFromRemote_RequestResponse& response() const;
  PROTOBUF_NODISCARD ::CHIDMessageFromRemote_RequestResponse* release_response();
  ::CHIDMessageFromRemote_RequestResponse* mutable_response();
  void set_allocated_response(::CHIDMessageFromRemote_RequestResponse* response);
  private:
  const ::CHIDMessageFromRemote_RequestResponse& _internal_response() const;
  ::CHIDMessageFromRemote_RequestResponse* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::CHIDMessageFromRemote_RequestResponse* response);
  ::CHIDMessageFromRemote_RequestResponse* unsafe_arena_release_response();

  // .CHIDMessageFromRemote.DeviceInputReports reports = 3;
  bool has_reports() const;
  private:
  bool _internal_has_reports() const;
  public:
  void clear_reports();
  const ::CHIDMessageFromRemote_DeviceInputReports& reports() const;
  PROTOBUF_NODISCARD ::CHIDMessageFromRemote_DeviceInputReports* release_reports();
  ::CHIDMessageFromRemote_DeviceInputReports* mutable_reports();
  void set_allocated_reports(::CHIDMessageFromRemote_DeviceInputReports* reports);
  private:
  const ::CHIDMessageFromRemote_DeviceInputReports& _internal_reports() const;
  ::CHIDMessageFromRemote_DeviceInputReports* _internal_mutable_reports();
  public:
  void unsafe_arena_set_allocated_reports(
      ::CHIDMessageFromRemote_DeviceInputReports* reports);
  ::CHIDMessageFromRemote_DeviceInputReports* unsafe_arena_release_reports();

  // .CHIDMessageFromRemote.CloseDevice close_device = 4;
  bool has_close_device() const;
  private:
  bool _internal_has_close_device() const;
  public:
  void clear_close_device();
  const ::CHIDMessageFromRemote_CloseDevice& close_device() const;
  PROTOBUF_NODISCARD ::CHIDMessageFromRemote_CloseDevice* release_close_device();
  ::CHIDMessageFromRemote_CloseDevice* mutable_close_device();
  void set_allocated_close_device(::CHIDMessageFromRemote_CloseDevice* close_device);
  private:
  const ::CHIDMessageFromRemote_CloseDevice& _internal_close_device() const;
  ::CHIDMessageFromRemote_CloseDevice* _internal_mutable_close_device();
  public:
  void unsafe_arena_set_allocated_close_device(
      ::CHIDMessageFromRemote_CloseDevice* close_device);
  ::CHIDMessageFromRemote_CloseDevice* unsafe_arena_release_close_device();

  // .CHIDMessageFromRemote.CloseAllDevices close_all_devices = 5;
  bool has_close_all_devices() const;
  private:
  bool _internal_has_close_all_devices() const;
  public:
  void clear_close_all_devices();
  const ::CHIDMessageFromRemote_CloseAllDevices& close_all_devices() const;
  PROTOBUF_NODISCARD ::CHIDMessageFromRemote_CloseAllDevices* release_close_all_devices();
  ::CHIDMessageFromRemote_CloseAllDevices* mutable_close_all_devices();
  void set_allocated_close_all_devices(::CHIDMessageFromRemote_CloseAllDevices* close_all_devices);
  private:
  const ::CHIDMessageFromRemote_CloseAllDevices& _internal_close_all_devices() const;
  ::CHIDMessageFromRemote_CloseAllDevices* _internal_mutable_close_all_devices();
  public:
  void unsafe_arena_set_allocated_close_all_devices(
      ::CHIDMessageFromRemote_CloseAllDevices* close_all_devices);
  ::CHIDMessageFromRemote_CloseAllDevices* unsafe_arena_release_close_all_devices();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:CHIDMessageFromRemote)
 private:
  class _Internal;
  void set_has_update_device_list();
  void set_has_response();
  void set_has_reports();
  void set_has_close_device();
  void set_has_close_all_devices();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CommandUnion {
    constexpr CommandUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CHIDMessageFromRemote_UpdateDeviceList* update_device_list_;
    ::CHIDMessageFromRemote_RequestResponse* response_;
    ::CHIDMessageFromRemote_DeviceInputReports* reports_;
    ::CHIDMessageFromRemote_CloseDevice* close_device_;
    ::CHIDMessageFromRemote_CloseAllDevices* close_all_devices_;
  } command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_steammessages_5fhiddevices_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CHIDDeviceInfo

// optional .EHIDDeviceLocation location = 1 [default = k_EDeviceLocationLocal];
inline bool CHIDDeviceInfo::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_location() const {
  return _internal_has_location();
}
inline void CHIDDeviceInfo::clear_location() {
  location_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::EHIDDeviceLocation CHIDDeviceInfo::_internal_location() const {
  return static_cast< ::EHIDDeviceLocation >(location_);
}
inline ::EHIDDeviceLocation CHIDDeviceInfo::location() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.location)
  return _internal_location();
}
inline void CHIDDeviceInfo::_internal_set_location(::EHIDDeviceLocation value) {
  assert(::EHIDDeviceLocation_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  location_ = value;
}
inline void CHIDDeviceInfo::set_location(::EHIDDeviceLocation value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.location)
}

// optional string path = 2;
inline bool CHIDDeviceInfo::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_path() const {
  return _internal_has_path();
}
inline void CHIDDeviceInfo::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CHIDDeviceInfo::path() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHIDDeviceInfo::set_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.path)
}
inline std::string* CHIDDeviceInfo::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:CHIDDeviceInfo.path)
  return _s;
}
inline const std::string& CHIDDeviceInfo::_internal_path() const {
  return path_.Get();
}
inline void CHIDDeviceInfo::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHIDDeviceInfo::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHIDDeviceInfo::release_path() {
  // @@protoc_insertion_point(field_release:CHIDDeviceInfo.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHIDDeviceInfo::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHIDDeviceInfo.path)
}

// optional uint32 vendor_id = 3;
inline bool CHIDDeviceInfo::_internal_has_vendor_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_vendor_id() const {
  return _internal_has_vendor_id();
}
inline void CHIDDeviceInfo::clear_vendor_id() {
  vendor_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CHIDDeviceInfo::_internal_vendor_id() const {
  return vendor_id_;
}
inline uint32_t CHIDDeviceInfo::vendor_id() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.vendor_id)
  return _internal_vendor_id();
}
inline void CHIDDeviceInfo::_internal_set_vendor_id(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  vendor_id_ = value;
}
inline void CHIDDeviceInfo::set_vendor_id(uint32_t value) {
  _internal_set_vendor_id(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.vendor_id)
}

// optional uint32 product_id = 4;
inline bool CHIDDeviceInfo::_internal_has_product_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_product_id() const {
  return _internal_has_product_id();
}
inline void CHIDDeviceInfo::clear_product_id() {
  product_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CHIDDeviceInfo::_internal_product_id() const {
  return product_id_;
}
inline uint32_t CHIDDeviceInfo::product_id() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.product_id)
  return _internal_product_id();
}
inline void CHIDDeviceInfo::_internal_set_product_id(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  product_id_ = value;
}
inline void CHIDDeviceInfo::set_product_id(uint32_t value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.product_id)
}

// optional string serial_number = 5;
inline bool CHIDDeviceInfo::_internal_has_serial_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CHIDDeviceInfo::clear_serial_number() {
  serial_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CHIDDeviceInfo::serial_number() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.serial_number)
  return _internal_serial_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHIDDeviceInfo::set_serial_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.serial_number)
}
inline std::string* CHIDDeviceInfo::mutable_serial_number() {
  std::string* _s = _internal_mutable_serial_number();
  // @@protoc_insertion_point(field_mutable:CHIDDeviceInfo.serial_number)
  return _s;
}
inline const std::string& CHIDDeviceInfo::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void CHIDDeviceInfo::_internal_set_serial_number(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  serial_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHIDDeviceInfo::_internal_mutable_serial_number() {
  _has_bits_[0] |= 0x00000002u;
  return serial_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHIDDeviceInfo::release_serial_number() {
  // @@protoc_insertion_point(field_release:CHIDDeviceInfo.serial_number)
  if (!_internal_has_serial_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = serial_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHIDDeviceInfo::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHIDDeviceInfo.serial_number)
}

// optional uint32 release_number = 6;
inline bool CHIDDeviceInfo::_internal_has_release_number() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_release_number() const {
  return _internal_has_release_number();
}
inline void CHIDDeviceInfo::clear_release_number() {
  release_number_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CHIDDeviceInfo::_internal_release_number() const {
  return release_number_;
}
inline uint32_t CHIDDeviceInfo::release_number() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.release_number)
  return _internal_release_number();
}
inline void CHIDDeviceInfo::_internal_set_release_number(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  release_number_ = value;
}
inline void CHIDDeviceInfo::set_release_number(uint32_t value) {
  _internal_set_release_number(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.release_number)
}

// optional string manufacturer_string = 7;
inline bool CHIDDeviceInfo::_internal_has_manufacturer_string() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_manufacturer_string() const {
  return _internal_has_manufacturer_string();
}
inline void CHIDDeviceInfo::clear_manufacturer_string() {
  manufacturer_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CHIDDeviceInfo::manufacturer_string() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.manufacturer_string)
  return _internal_manufacturer_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHIDDeviceInfo::set_manufacturer_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 manufacturer_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.manufacturer_string)
}
inline std::string* CHIDDeviceInfo::mutable_manufacturer_string() {
  std::string* _s = _internal_mutable_manufacturer_string();
  // @@protoc_insertion_point(field_mutable:CHIDDeviceInfo.manufacturer_string)
  return _s;
}
inline const std::string& CHIDDeviceInfo::_internal_manufacturer_string() const {
  return manufacturer_string_.Get();
}
inline void CHIDDeviceInfo::_internal_set_manufacturer_string(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  manufacturer_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHIDDeviceInfo::_internal_mutable_manufacturer_string() {
  _has_bits_[0] |= 0x00000004u;
  return manufacturer_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHIDDeviceInfo::release_manufacturer_string() {
  // @@protoc_insertion_point(field_release:CHIDDeviceInfo.manufacturer_string)
  if (!_internal_has_manufacturer_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = manufacturer_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manufacturer_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    manufacturer_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHIDDeviceInfo::set_allocated_manufacturer_string(std::string* manufacturer_string) {
  if (manufacturer_string != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  manufacturer_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manufacturer_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    manufacturer_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHIDDeviceInfo.manufacturer_string)
}

// optional string product_string = 8;
inline bool CHIDDeviceInfo::_internal_has_product_string() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_product_string() const {
  return _internal_has_product_string();
}
inline void CHIDDeviceInfo::clear_product_string() {
  product_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CHIDDeviceInfo::product_string() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.product_string)
  return _internal_product_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHIDDeviceInfo::set_product_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 product_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.product_string)
}
inline std::string* CHIDDeviceInfo::mutable_product_string() {
  std::string* _s = _internal_mutable_product_string();
  // @@protoc_insertion_point(field_mutable:CHIDDeviceInfo.product_string)
  return _s;
}
inline const std::string& CHIDDeviceInfo::_internal_product_string() const {
  return product_string_.Get();
}
inline void CHIDDeviceInfo::_internal_set_product_string(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  product_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHIDDeviceInfo::_internal_mutable_product_string() {
  _has_bits_[0] |= 0x00000008u;
  return product_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHIDDeviceInfo::release_product_string() {
  // @@protoc_insertion_point(field_release:CHIDDeviceInfo.product_string)
  if (!_internal_has_product_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = product_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHIDDeviceInfo::set_allocated_product_string(std::string* product_string) {
  if (product_string != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  product_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHIDDeviceInfo.product_string)
}

// optional uint32 usage_page = 9;
inline bool CHIDDeviceInfo::_internal_has_usage_page() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_usage_page() const {
  return _internal_has_usage_page();
}
inline void CHIDDeviceInfo::clear_usage_page() {
  usage_page_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CHIDDeviceInfo::_internal_usage_page() const {
  return usage_page_;
}
inline uint32_t CHIDDeviceInfo::usage_page() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.usage_page)
  return _internal_usage_page();
}
inline void CHIDDeviceInfo::_internal_set_usage_page(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  usage_page_ = value;
}
inline void CHIDDeviceInfo::set_usage_page(uint32_t value) {
  _internal_set_usage_page(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.usage_page)
}

// optional uint32 usage = 10;
inline bool CHIDDeviceInfo::_internal_has_usage() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_usage() const {
  return _internal_has_usage();
}
inline void CHIDDeviceInfo::clear_usage() {
  usage_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CHIDDeviceInfo::_internal_usage() const {
  return usage_;
}
inline uint32_t CHIDDeviceInfo::usage() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.usage)
  return _internal_usage();
}
inline void CHIDDeviceInfo::_internal_set_usage(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  usage_ = value;
}
inline void CHIDDeviceInfo::set_usage(uint32_t value) {
  _internal_set_usage(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.usage)
}

// optional int32 interface_number = 11 [default = -1];
inline bool CHIDDeviceInfo::_internal_has_interface_number() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_interface_number() const {
  return _internal_has_interface_number();
}
inline void CHIDDeviceInfo::clear_interface_number() {
  interface_number_ = -1;
  _has_bits_[0] &= ~0x00040000u;
}
inline int32_t CHIDDeviceInfo::_internal_interface_number() const {
  return interface_number_;
}
inline int32_t CHIDDeviceInfo::interface_number() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.interface_number)
  return _internal_interface_number();
}
inline void CHIDDeviceInfo::_internal_set_interface_number(int32_t value) {
  _has_bits_[0] |= 0x00040000u;
  interface_number_ = value;
}
inline void CHIDDeviceInfo::set_interface_number(int32_t value) {
  _internal_set_interface_number(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.interface_number)
}

// optional int32 ostype = 12 [default = -1];
inline bool CHIDDeviceInfo::_internal_has_ostype() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_ostype() const {
  return _internal_has_ostype();
}
inline void CHIDDeviceInfo::clear_ostype() {
  ostype_ = -1;
  _has_bits_[0] &= ~0x00080000u;
}
inline int32_t CHIDDeviceInfo::_internal_ostype() const {
  return ostype_;
}
inline int32_t CHIDDeviceInfo::ostype() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.ostype)
  return _internal_ostype();
}
inline void CHIDDeviceInfo::_internal_set_ostype(int32_t value) {
  _has_bits_[0] |= 0x00080000u;
  ostype_ = value;
}
inline void CHIDDeviceInfo::set_ostype(int32_t value) {
  _internal_set_ostype(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.ostype)
}

// optional bool is_generic_gamepad = 13;
inline bool CHIDDeviceInfo::_internal_has_is_generic_gamepad() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_is_generic_gamepad() const {
  return _internal_has_is_generic_gamepad();
}
inline void CHIDDeviceInfo::clear_is_generic_gamepad() {
  is_generic_gamepad_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CHIDDeviceInfo::_internal_is_generic_gamepad() const {
  return is_generic_gamepad_;
}
inline bool CHIDDeviceInfo::is_generic_gamepad() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.is_generic_gamepad)
  return _internal_is_generic_gamepad();
}
inline void CHIDDeviceInfo::_internal_set_is_generic_gamepad(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_generic_gamepad_ = value;
}
inline void CHIDDeviceInfo::set_is_generic_gamepad(bool value) {
  _internal_set_is_generic_gamepad(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.is_generic_gamepad)
}

// optional bool is_generic_joystick = 14;
inline bool CHIDDeviceInfo::_internal_has_is_generic_joystick() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_is_generic_joystick() const {
  return _internal_has_is_generic_joystick();
}
inline void CHIDDeviceInfo::clear_is_generic_joystick() {
  is_generic_joystick_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CHIDDeviceInfo::_internal_is_generic_joystick() const {
  return is_generic_joystick_;
}
inline bool CHIDDeviceInfo::is_generic_joystick() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.is_generic_joystick)
  return _internal_is_generic_joystick();
}
inline void CHIDDeviceInfo::_internal_set_is_generic_joystick(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_generic_joystick_ = value;
}
inline void CHIDDeviceInfo::set_is_generic_joystick(bool value) {
  _internal_set_is_generic_joystick(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.is_generic_joystick)
}

// optional uint32 caps_bits = 15;
inline bool CHIDDeviceInfo::_internal_has_caps_bits() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_caps_bits() const {
  return _internal_has_caps_bits();
}
inline void CHIDDeviceInfo::clear_caps_bits() {
  caps_bits_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CHIDDeviceInfo::_internal_caps_bits() const {
  return caps_bits_;
}
inline uint32_t CHIDDeviceInfo::caps_bits() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.caps_bits)
  return _internal_caps_bits();
}
inline void CHIDDeviceInfo::_internal_set_caps_bits(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  caps_bits_ = value;
}
inline void CHIDDeviceInfo::set_caps_bits(uint32_t value) {
  _internal_set_caps_bits(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.caps_bits)
}

// optional uint32 session_id = 16;
inline bool CHIDDeviceInfo::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_session_id() const {
  return _internal_has_session_id();
}
inline void CHIDDeviceInfo::clear_session_id() {
  session_id_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CHIDDeviceInfo::_internal_session_id() const {
  return session_id_;
}
inline uint32_t CHIDDeviceInfo::session_id() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.session_id)
  return _internal_session_id();
}
inline void CHIDDeviceInfo::_internal_set_session_id(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  session_id_ = value;
}
inline void CHIDDeviceInfo::set_session_id(uint32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.session_id)
}

// optional uint32 eControllerType_OBSOLETE = 17 [default = 0];
inline bool CHIDDeviceInfo::_internal_has_econtrollertype_obsolete() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_econtrollertype_obsolete() const {
  return _internal_has_econtrollertype_obsolete();
}
inline void CHIDDeviceInfo::clear_econtrollertype_obsolete() {
  econtrollertype_obsolete_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CHIDDeviceInfo::_internal_econtrollertype_obsolete() const {
  return econtrollertype_obsolete_;
}
inline uint32_t CHIDDeviceInfo::econtrollertype_obsolete() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.eControllerType_OBSOLETE)
  return _internal_econtrollertype_obsolete();
}
inline void CHIDDeviceInfo::_internal_set_econtrollertype_obsolete(uint32_t value) {
  _has_bits_[0] |= 0x00010000u;
  econtrollertype_obsolete_ = value;
}
inline void CHIDDeviceInfo::set_econtrollertype_obsolete(uint32_t value) {
  _internal_set_econtrollertype_obsolete(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.eControllerType_OBSOLETE)
}

// optional bool is_xinput_device_OBSOLETE = 18 [default = false];
inline bool CHIDDeviceInfo::_internal_has_is_xinput_device_obsolete() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_is_xinput_device_obsolete() const {
  return _internal_has_is_xinput_device_obsolete();
}
inline void CHIDDeviceInfo::clear_is_xinput_device_obsolete() {
  is_xinput_device_obsolete_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CHIDDeviceInfo::_internal_is_xinput_device_obsolete() const {
  return is_xinput_device_obsolete_;
}
inline bool CHIDDeviceInfo::is_xinput_device_obsolete() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.is_xinput_device_OBSOLETE)
  return _internal_is_xinput_device_obsolete();
}
inline void CHIDDeviceInfo::_internal_set_is_xinput_device_obsolete(bool value) {
  _has_bits_[0] |= 0x00004000u;
  is_xinput_device_obsolete_ = value;
}
inline void CHIDDeviceInfo::set_is_xinput_device_obsolete(bool value) {
  _internal_set_is_xinput_device_obsolete(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.is_xinput_device_OBSOLETE)
}

// optional uint32 session_remote_play_together_appid = 19;
inline bool CHIDDeviceInfo::_internal_has_session_remote_play_together_appid() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_session_remote_play_together_appid() const {
  return _internal_has_session_remote_play_together_appid();
}
inline void CHIDDeviceInfo::clear_session_remote_play_together_appid() {
  session_remote_play_together_appid_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CHIDDeviceInfo::_internal_session_remote_play_together_appid() const {
  return session_remote_play_together_appid_;
}
inline uint32_t CHIDDeviceInfo::session_remote_play_together_appid() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.session_remote_play_together_appid)
  return _internal_session_remote_play_together_appid();
}
inline void CHIDDeviceInfo::_internal_set_session_remote_play_together_appid(uint32_t value) {
  _has_bits_[0] |= 0x00020000u;
  session_remote_play_together_appid_ = value;
}
inline void CHIDDeviceInfo::set_session_remote_play_together_appid(uint32_t value) {
  _internal_set_session_remote_play_together_appid(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.session_remote_play_together_appid)
}

// optional bool is_steamvr_device = 20 [default = false];
inline bool CHIDDeviceInfo::_internal_has_is_steamvr_device() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CHIDDeviceInfo::has_is_steamvr_device() const {
  return _internal_has_is_steamvr_device();
}
inline void CHIDDeviceInfo::clear_is_steamvr_device() {
  is_steamvr_device_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CHIDDeviceInfo::_internal_is_steamvr_device() const {
  return is_steamvr_device_;
}
inline bool CHIDDeviceInfo::is_steamvr_device() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInfo.is_steamvr_device)
  return _internal_is_steamvr_device();
}
inline void CHIDDeviceInfo::_internal_set_is_steamvr_device(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_steamvr_device_ = value;
}
inline void CHIDDeviceInfo::set_is_steamvr_device(bool value) {
  _internal_set_is_steamvr_device(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInfo.is_steamvr_device)
}

// -------------------------------------------------------------------

// CHIDDeviceInputReport

// optional bytes full_report = 1;
inline bool CHIDDeviceInputReport::_internal_has_full_report() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDDeviceInputReport::has_full_report() const {
  return _internal_has_full_report();
}
inline void CHIDDeviceInputReport::clear_full_report() {
  full_report_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CHIDDeviceInputReport::full_report() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInputReport.full_report)
  return _internal_full_report();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHIDDeviceInputReport::set_full_report(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 full_report_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHIDDeviceInputReport.full_report)
}
inline std::string* CHIDDeviceInputReport::mutable_full_report() {
  std::string* _s = _internal_mutable_full_report();
  // @@protoc_insertion_point(field_mutable:CHIDDeviceInputReport.full_report)
  return _s;
}
inline const std::string& CHIDDeviceInputReport::_internal_full_report() const {
  return full_report_.Get();
}
inline void CHIDDeviceInputReport::_internal_set_full_report(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  full_report_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHIDDeviceInputReport::_internal_mutable_full_report() {
  _has_bits_[0] |= 0x00000001u;
  return full_report_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHIDDeviceInputReport::release_full_report() {
  // @@protoc_insertion_point(field_release:CHIDDeviceInputReport.full_report)
  if (!_internal_has_full_report()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = full_report_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (full_report_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    full_report_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHIDDeviceInputReport::set_allocated_full_report(std::string* full_report) {
  if (full_report != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  full_report_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_report,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (full_report_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    full_report_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHIDDeviceInputReport.full_report)
}

// optional bytes delta_report = 2;
inline bool CHIDDeviceInputReport::_internal_has_delta_report() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CHIDDeviceInputReport::has_delta_report() const {
  return _internal_has_delta_report();
}
inline void CHIDDeviceInputReport::clear_delta_report() {
  delta_report_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CHIDDeviceInputReport::delta_report() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInputReport.delta_report)
  return _internal_delta_report();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHIDDeviceInputReport::set_delta_report(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 delta_report_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHIDDeviceInputReport.delta_report)
}
inline std::string* CHIDDeviceInputReport::mutable_delta_report() {
  std::string* _s = _internal_mutable_delta_report();
  // @@protoc_insertion_point(field_mutable:CHIDDeviceInputReport.delta_report)
  return _s;
}
inline const std::string& CHIDDeviceInputReport::_internal_delta_report() const {
  return delta_report_.Get();
}
inline void CHIDDeviceInputReport::_internal_set_delta_report(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  delta_report_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHIDDeviceInputReport::_internal_mutable_delta_report() {
  _has_bits_[0] |= 0x00000002u;
  return delta_report_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHIDDeviceInputReport::release_delta_report() {
  // @@protoc_insertion_point(field_release:CHIDDeviceInputReport.delta_report)
  if (!_internal_has_delta_report()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = delta_report_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (delta_report_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    delta_report_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHIDDeviceInputReport::set_allocated_delta_report(std::string* delta_report) {
  if (delta_report != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  delta_report_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delta_report,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (delta_report_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    delta_report_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHIDDeviceInputReport.delta_report)
}

// optional uint32 delta_report_size = 3;
inline bool CHIDDeviceInputReport::_internal_has_delta_report_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CHIDDeviceInputReport::has_delta_report_size() const {
  return _internal_has_delta_report_size();
}
inline void CHIDDeviceInputReport::clear_delta_report_size() {
  delta_report_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CHIDDeviceInputReport::_internal_delta_report_size() const {
  return delta_report_size_;
}
inline uint32_t CHIDDeviceInputReport::delta_report_size() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInputReport.delta_report_size)
  return _internal_delta_report_size();
}
inline void CHIDDeviceInputReport::_internal_set_delta_report_size(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  delta_report_size_ = value;
}
inline void CHIDDeviceInputReport::set_delta_report_size(uint32_t value) {
  _internal_set_delta_report_size(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInputReport.delta_report_size)
}

// optional uint32 delta_report_crc = 4;
inline bool CHIDDeviceInputReport::_internal_has_delta_report_crc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CHIDDeviceInputReport::has_delta_report_crc() const {
  return _internal_has_delta_report_crc();
}
inline void CHIDDeviceInputReport::clear_delta_report_crc() {
  delta_report_crc_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CHIDDeviceInputReport::_internal_delta_report_crc() const {
  return delta_report_crc_;
}
inline uint32_t CHIDDeviceInputReport::delta_report_crc() const {
  // @@protoc_insertion_point(field_get:CHIDDeviceInputReport.delta_report_crc)
  return _internal_delta_report_crc();
}
inline void CHIDDeviceInputReport::_internal_set_delta_report_crc(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  delta_report_crc_ = value;
}
inline void CHIDDeviceInputReport::set_delta_report_crc(uint32_t value) {
  _internal_set_delta_report_crc(value);
  // @@protoc_insertion_point(field_set:CHIDDeviceInputReport.delta_report_crc)
}

// -------------------------------------------------------------------

// CHIDMessageToRemote_DeviceOpen

// optional .CHIDDeviceInfo info = 1;
inline bool CHIDMessageToRemote_DeviceOpen::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool CHIDMessageToRemote_DeviceOpen::has_info() const {
  return _internal_has_info();
}
inline void CHIDMessageToRemote_DeviceOpen::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CHIDDeviceInfo& CHIDMessageToRemote_DeviceOpen::_internal_info() const {
  const ::CHIDDeviceInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CHIDDeviceInfo&>(
      ::_CHIDDeviceInfo_default_instance_);
}
inline const ::CHIDDeviceInfo& CHIDMessageToRemote_DeviceOpen::info() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceOpen.info)
  return _internal_info();
}
inline void CHIDMessageToRemote_DeviceOpen::unsafe_arena_set_allocated_info(
    ::CHIDDeviceInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageToRemote.DeviceOpen.info)
}
inline ::CHIDDeviceInfo* CHIDMessageToRemote_DeviceOpen::release_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::CHIDDeviceInfo* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CHIDDeviceInfo* CHIDMessageToRemote_DeviceOpen::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.DeviceOpen.info)
  _has_bits_[0] &= ~0x00000001u;
  ::CHIDDeviceInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::CHIDDeviceInfo* CHIDMessageToRemote_DeviceOpen::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CHIDDeviceInfo>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::CHIDDeviceInfo* CHIDMessageToRemote_DeviceOpen::mutable_info() {
  ::CHIDDeviceInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.DeviceOpen.info)
  return _msg;
}
inline void CHIDMessageToRemote_DeviceOpen::set_allocated_info(::CHIDDeviceInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CHIDDeviceInfo>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.DeviceOpen.info)
}

// -------------------------------------------------------------------

// CHIDMessageToRemote_DeviceClose

// optional uint32 device = 1;
inline bool CHIDMessageToRemote_DeviceClose::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceClose::has_device() const {
  return _internal_has_device();
}
inline void CHIDMessageToRemote_DeviceClose::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CHIDMessageToRemote_DeviceClose::_internal_device() const {
  return device_;
}
inline uint32_t CHIDMessageToRemote_DeviceClose::device() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceClose.device)
  return _internal_device();
}
inline void CHIDMessageToRemote_DeviceClose::_internal_set_device(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  device_ = value;
}
inline void CHIDMessageToRemote_DeviceClose::set_device(uint32_t value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceClose.device)
}

// -------------------------------------------------------------------

// CHIDMessageToRemote_DeviceWrite

// optional uint32 device = 1;
inline bool CHIDMessageToRemote_DeviceWrite::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceWrite::has_device() const {
  return _internal_has_device();
}
inline void CHIDMessageToRemote_DeviceWrite::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CHIDMessageToRemote_DeviceWrite::_internal_device() const {
  return device_;
}
inline uint32_t CHIDMessageToRemote_DeviceWrite::device() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceWrite.device)
  return _internal_device();
}
inline void CHIDMessageToRemote_DeviceWrite::_internal_set_device(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  device_ = value;
}
inline void CHIDMessageToRemote_DeviceWrite::set_device(uint32_t value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceWrite.device)
}

// optional bytes data = 2;
inline bool CHIDMessageToRemote_DeviceWrite::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceWrite::has_data() const {
  return _internal_has_data();
}
inline void CHIDMessageToRemote_DeviceWrite::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CHIDMessageToRemote_DeviceWrite::data() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceWrite.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHIDMessageToRemote_DeviceWrite::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceWrite.data)
}
inline std::string* CHIDMessageToRemote_DeviceWrite::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.DeviceWrite.data)
  return _s;
}
inline const std::string& CHIDMessageToRemote_DeviceWrite::_internal_data() const {
  return data_.Get();
}
inline void CHIDMessageToRemote_DeviceWrite::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHIDMessageToRemote_DeviceWrite::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHIDMessageToRemote_DeviceWrite::release_data() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.DeviceWrite.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHIDMessageToRemote_DeviceWrite::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.DeviceWrite.data)
}

// -------------------------------------------------------------------

// CHIDMessageToRemote_DeviceRead

// optional uint32 device = 1;
inline bool CHIDMessageToRemote_DeviceRead::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceRead::has_device() const {
  return _internal_has_device();
}
inline void CHIDMessageToRemote_DeviceRead::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CHIDMessageToRemote_DeviceRead::_internal_device() const {
  return device_;
}
inline uint32_t CHIDMessageToRemote_DeviceRead::device() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceRead.device)
  return _internal_device();
}
inline void CHIDMessageToRemote_DeviceRead::_internal_set_device(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  device_ = value;
}
inline void CHIDMessageToRemote_DeviceRead::set_device(uint32_t value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceRead.device)
}

// optional uint32 length = 2;
inline bool CHIDMessageToRemote_DeviceRead::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceRead::has_length() const {
  return _internal_has_length();
}
inline void CHIDMessageToRemote_DeviceRead::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CHIDMessageToRemote_DeviceRead::_internal_length() const {
  return length_;
}
inline uint32_t CHIDMessageToRemote_DeviceRead::length() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceRead.length)
  return _internal_length();
}
inline void CHIDMessageToRemote_DeviceRead::_internal_set_length(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  length_ = value;
}
inline void CHIDMessageToRemote_DeviceRead::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceRead.length)
}

// optional int32 timeout_ms = 3;
inline bool CHIDMessageToRemote_DeviceRead::_internal_has_timeout_ms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceRead::has_timeout_ms() const {
  return _internal_has_timeout_ms();
}
inline void CHIDMessageToRemote_DeviceRead::clear_timeout_ms() {
  timeout_ms_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CHIDMessageToRemote_DeviceRead::_internal_timeout_ms() const {
  return timeout_ms_;
}
inline int32_t CHIDMessageToRemote_DeviceRead::timeout_ms() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceRead.timeout_ms)
  return _internal_timeout_ms();
}
inline void CHIDMessageToRemote_DeviceRead::_internal_set_timeout_ms(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  timeout_ms_ = value;
}
inline void CHIDMessageToRemote_DeviceRead::set_timeout_ms(int32_t value) {
  _internal_set_timeout_ms(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceRead.timeout_ms)
}

// -------------------------------------------------------------------

// CHIDMessageToRemote_DeviceSendFeatureReport

// optional uint32 device = 1;
inline bool CHIDMessageToRemote_DeviceSendFeatureReport::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceSendFeatureReport::has_device() const {
  return _internal_has_device();
}
inline void CHIDMessageToRemote_DeviceSendFeatureReport::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CHIDMessageToRemote_DeviceSendFeatureReport::_internal_device() const {
  return device_;
}
inline uint32_t CHIDMessageToRemote_DeviceSendFeatureReport::device() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceSendFeatureReport.device)
  return _internal_device();
}
inline void CHIDMessageToRemote_DeviceSendFeatureReport::_internal_set_device(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  device_ = value;
}
inline void CHIDMessageToRemote_DeviceSendFeatureReport::set_device(uint32_t value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceSendFeatureReport.device)
}

// optional bytes data = 2;
inline bool CHIDMessageToRemote_DeviceSendFeatureReport::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceSendFeatureReport::has_data() const {
  return _internal_has_data();
}
inline void CHIDMessageToRemote_DeviceSendFeatureReport::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CHIDMessageToRemote_DeviceSendFeatureReport::data() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceSendFeatureReport.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHIDMessageToRemote_DeviceSendFeatureReport::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceSendFeatureReport.data)
}
inline std::string* CHIDMessageToRemote_DeviceSendFeatureReport::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.DeviceSendFeatureReport.data)
  return _s;
}
inline const std::string& CHIDMessageToRemote_DeviceSendFeatureReport::_internal_data() const {
  return data_.Get();
}
inline void CHIDMessageToRemote_DeviceSendFeatureReport::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHIDMessageToRemote_DeviceSendFeatureReport::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHIDMessageToRemote_DeviceSendFeatureReport::release_data() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.DeviceSendFeatureReport.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHIDMessageToRemote_DeviceSendFeatureReport::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.DeviceSendFeatureReport.data)
}

// -------------------------------------------------------------------

// CHIDMessageToRemote_DeviceGetFeatureReport

// optional uint32 device = 1;
inline bool CHIDMessageToRemote_DeviceGetFeatureReport::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceGetFeatureReport::has_device() const {
  return _internal_has_device();
}
inline void CHIDMessageToRemote_DeviceGetFeatureReport::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CHIDMessageToRemote_DeviceGetFeatureReport::_internal_device() const {
  return device_;
}
inline uint32_t CHIDMessageToRemote_DeviceGetFeatureReport::device() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceGetFeatureReport.device)
  return _internal_device();
}
inline void CHIDMessageToRemote_DeviceGetFeatureReport::_internal_set_device(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  device_ = value;
}
inline void CHIDMessageToRemote_DeviceGetFeatureReport::set_device(uint32_t value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceGetFeatureReport.device)
}

// optional bytes report_number = 2;
inline bool CHIDMessageToRemote_DeviceGetFeatureReport::_internal_has_report_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceGetFeatureReport::has_report_number() const {
  return _internal_has_report_number();
}
inline void CHIDMessageToRemote_DeviceGetFeatureReport::clear_report_number() {
  report_number_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CHIDMessageToRemote_DeviceGetFeatureReport::report_number() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceGetFeatureReport.report_number)
  return _internal_report_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHIDMessageToRemote_DeviceGetFeatureReport::set_report_number(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 report_number_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceGetFeatureReport.report_number)
}
inline std::string* CHIDMessageToRemote_DeviceGetFeatureReport::mutable_report_number() {
  std::string* _s = _internal_mutable_report_number();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.DeviceGetFeatureReport.report_number)
  return _s;
}
inline const std::string& CHIDMessageToRemote_DeviceGetFeatureReport::_internal_report_number() const {
  return report_number_.Get();
}
inline void CHIDMessageToRemote_DeviceGetFeatureReport::_internal_set_report_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  report_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHIDMessageToRemote_DeviceGetFeatureReport::_internal_mutable_report_number() {
  _has_bits_[0] |= 0x00000001u;
  return report_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHIDMessageToRemote_DeviceGetFeatureReport::release_report_number() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.DeviceGetFeatureReport.report_number)
  if (!_internal_has_report_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = report_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (report_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    report_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHIDMessageToRemote_DeviceGetFeatureReport::set_allocated_report_number(std::string* report_number) {
  if (report_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  report_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), report_number,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (report_number_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    report_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.DeviceGetFeatureReport.report_number)
}

// optional uint32 length = 3;
inline bool CHIDMessageToRemote_DeviceGetFeatureReport::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceGetFeatureReport::has_length() const {
  return _internal_has_length();
}
inline void CHIDMessageToRemote_DeviceGetFeatureReport::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CHIDMessageToRemote_DeviceGetFeatureReport::_internal_length() const {
  return length_;
}
inline uint32_t CHIDMessageToRemote_DeviceGetFeatureReport::length() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceGetFeatureReport.length)
  return _internal_length();
}
inline void CHIDMessageToRemote_DeviceGetFeatureReport::_internal_set_length(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  length_ = value;
}
inline void CHIDMessageToRemote_DeviceGetFeatureReport::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceGetFeatureReport.length)
}

// -------------------------------------------------------------------

// CHIDMessageToRemote_DeviceGetVendorString

// optional uint32 device = 1;
inline bool CHIDMessageToRemote_DeviceGetVendorString::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceGetVendorString::has_device() const {
  return _internal_has_device();
}
inline void CHIDMessageToRemote_DeviceGetVendorString::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CHIDMessageToRemote_DeviceGetVendorString::_internal_device() const {
  return device_;
}
inline uint32_t CHIDMessageToRemote_DeviceGetVendorString::device() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceGetVendorString.device)
  return _internal_device();
}
inline void CHIDMessageToRemote_DeviceGetVendorString::_internal_set_device(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  device_ = value;
}
inline void CHIDMessageToRemote_DeviceGetVendorString::set_device(uint32_t value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceGetVendorString.device)
}

// -------------------------------------------------------------------

// CHIDMessageToRemote_DeviceGetProductString

// optional uint32 device = 1;
inline bool CHIDMessageToRemote_DeviceGetProductString::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceGetProductString::has_device() const {
  return _internal_has_device();
}
inline void CHIDMessageToRemote_DeviceGetProductString::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CHIDMessageToRemote_DeviceGetProductString::_internal_device() const {
  return device_;
}
inline uint32_t CHIDMessageToRemote_DeviceGetProductString::device() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceGetProductString.device)
  return _internal_device();
}
inline void CHIDMessageToRemote_DeviceGetProductString::_internal_set_device(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  device_ = value;
}
inline void CHIDMessageToRemote_DeviceGetProductString::set_device(uint32_t value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceGetProductString.device)
}

// -------------------------------------------------------------------

// CHIDMessageToRemote_DeviceGetSerialNumberString

// optional uint32 device = 1;
inline bool CHIDMessageToRemote_DeviceGetSerialNumberString::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceGetSerialNumberString::has_device() const {
  return _internal_has_device();
}
inline void CHIDMessageToRemote_DeviceGetSerialNumberString::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CHIDMessageToRemote_DeviceGetSerialNumberString::_internal_device() const {
  return device_;
}
inline uint32_t CHIDMessageToRemote_DeviceGetSerialNumberString::device() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceGetSerialNumberString.device)
  return _internal_device();
}
inline void CHIDMessageToRemote_DeviceGetSerialNumberString::_internal_set_device(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  device_ = value;
}
inline void CHIDMessageToRemote_DeviceGetSerialNumberString::set_device(uint32_t value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceGetSerialNumberString.device)
}

// -------------------------------------------------------------------

// CHIDMessageToRemote_DeviceStartInputReports

// optional uint32 device = 1;
inline bool CHIDMessageToRemote_DeviceStartInputReports::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceStartInputReports::has_device() const {
  return _internal_has_device();
}
inline void CHIDMessageToRemote_DeviceStartInputReports::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CHIDMessageToRemote_DeviceStartInputReports::_internal_device() const {
  return device_;
}
inline uint32_t CHIDMessageToRemote_DeviceStartInputReports::device() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceStartInputReports.device)
  return _internal_device();
}
inline void CHIDMessageToRemote_DeviceStartInputReports::_internal_set_device(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  device_ = value;
}
inline void CHIDMessageToRemote_DeviceStartInputReports::set_device(uint32_t value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceStartInputReports.device)
}

// optional uint32 length = 2;
inline bool CHIDMessageToRemote_DeviceStartInputReports::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceStartInputReports::has_length() const {
  return _internal_has_length();
}
inline void CHIDMessageToRemote_DeviceStartInputReports::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CHIDMessageToRemote_DeviceStartInputReports::_internal_length() const {
  return length_;
}
inline uint32_t CHIDMessageToRemote_DeviceStartInputReports::length() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceStartInputReports.length)
  return _internal_length();
}
inline void CHIDMessageToRemote_DeviceStartInputReports::_internal_set_length(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  length_ = value;
}
inline void CHIDMessageToRemote_DeviceStartInputReports::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceStartInputReports.length)
}

// -------------------------------------------------------------------

// CHIDMessageToRemote_DeviceRequestFullReport

// optional uint32 device = 1;
inline bool CHIDMessageToRemote_DeviceRequestFullReport::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceRequestFullReport::has_device() const {
  return _internal_has_device();
}
inline void CHIDMessageToRemote_DeviceRequestFullReport::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CHIDMessageToRemote_DeviceRequestFullReport::_internal_device() const {
  return device_;
}
inline uint32_t CHIDMessageToRemote_DeviceRequestFullReport::device() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceRequestFullReport.device)
  return _internal_device();
}
inline void CHIDMessageToRemote_DeviceRequestFullReport::_internal_set_device(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  device_ = value;
}
inline void CHIDMessageToRemote_DeviceRequestFullReport::set_device(uint32_t value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceRequestFullReport.device)
}

// -------------------------------------------------------------------

// CHIDMessageToRemote_DeviceDisconnect

// optional uint32 device = 1;
inline bool CHIDMessageToRemote_DeviceDisconnect::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceDisconnect::has_device() const {
  return _internal_has_device();
}
inline void CHIDMessageToRemote_DeviceDisconnect::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CHIDMessageToRemote_DeviceDisconnect::_internal_device() const {
  return device_;
}
inline uint32_t CHIDMessageToRemote_DeviceDisconnect::device() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceDisconnect.device)
  return _internal_device();
}
inline void CHIDMessageToRemote_DeviceDisconnect::_internal_set_device(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  device_ = value;
}
inline void CHIDMessageToRemote_DeviceDisconnect::set_device(uint32_t value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceDisconnect.device)
}

// optional .EHIDDeviceDisconnectMethod disconnectMethod = 2 [default = k_EDeviceDisconnectMethodUnknown];
inline bool CHIDMessageToRemote_DeviceDisconnect::_internal_has_disconnectmethod() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceDisconnect::has_disconnectmethod() const {
  return _internal_has_disconnectmethod();
}
inline void CHIDMessageToRemote_DeviceDisconnect::clear_disconnectmethod() {
  disconnectmethod_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EHIDDeviceDisconnectMethod CHIDMessageToRemote_DeviceDisconnect::_internal_disconnectmethod() const {
  return static_cast< ::EHIDDeviceDisconnectMethod >(disconnectmethod_);
}
inline ::EHIDDeviceDisconnectMethod CHIDMessageToRemote_DeviceDisconnect::disconnectmethod() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceDisconnect.disconnectMethod)
  return _internal_disconnectmethod();
}
inline void CHIDMessageToRemote_DeviceDisconnect::_internal_set_disconnectmethod(::EHIDDeviceDisconnectMethod value) {
  assert(::EHIDDeviceDisconnectMethod_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  disconnectmethod_ = value;
}
inline void CHIDMessageToRemote_DeviceDisconnect::set_disconnectmethod(::EHIDDeviceDisconnectMethod value) {
  _internal_set_disconnectmethod(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceDisconnect.disconnectMethod)
}

// optional bytes data = 3;
inline bool CHIDMessageToRemote_DeviceDisconnect::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDMessageToRemote_DeviceDisconnect::has_data() const {
  return _internal_has_data();
}
inline void CHIDMessageToRemote_DeviceDisconnect::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CHIDMessageToRemote_DeviceDisconnect::data() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.DeviceDisconnect.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHIDMessageToRemote_DeviceDisconnect::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.DeviceDisconnect.data)
}
inline std::string* CHIDMessageToRemote_DeviceDisconnect::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.DeviceDisconnect.data)
  return _s;
}
inline const std::string& CHIDMessageToRemote_DeviceDisconnect::_internal_data() const {
  return data_.Get();
}
inline void CHIDMessageToRemote_DeviceDisconnect::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHIDMessageToRemote_DeviceDisconnect::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHIDMessageToRemote_DeviceDisconnect::release_data() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.DeviceDisconnect.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHIDMessageToRemote_DeviceDisconnect::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageToRemote.DeviceDisconnect.data)
}

// -------------------------------------------------------------------

// CHIDMessageToRemote

// optional uint32 request_id = 1;
inline bool CHIDMessageToRemote::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDMessageToRemote::has_request_id() const {
  return _internal_has_request_id();
}
inline void CHIDMessageToRemote::clear_request_id() {
  request_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CHIDMessageToRemote::_internal_request_id() const {
  return request_id_;
}
inline uint32_t CHIDMessageToRemote::request_id() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.request_id)
  return _internal_request_id();
}
inline void CHIDMessageToRemote::_internal_set_request_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  request_id_ = value;
}
inline void CHIDMessageToRemote::set_request_id(uint32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:CHIDMessageToRemote.request_id)
}

// .CHIDMessageToRemote.DeviceOpen device_open = 2;
inline bool CHIDMessageToRemote::_internal_has_device_open() const {
  return command_case() == kDeviceOpen;
}
inline bool CHIDMessageToRemote::has_device_open() const {
  return _internal_has_device_open();
}
inline void CHIDMessageToRemote::set_has_device_open() {
  _oneof_case_[0] = kDeviceOpen;
}
inline void CHIDMessageToRemote::clear_device_open() {
  if (_internal_has_device_open()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.device_open_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageToRemote_DeviceOpen* CHIDMessageToRemote::release_device_open() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.device_open)
  if (_internal_has_device_open()) {
    clear_has_command();
      ::CHIDMessageToRemote_DeviceOpen* temp = command_.device_open_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.device_open_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageToRemote_DeviceOpen& CHIDMessageToRemote::_internal_device_open() const {
  return _internal_has_device_open()
      ? *command_.device_open_
      : reinterpret_cast< ::CHIDMessageToRemote_DeviceOpen&>(::_CHIDMessageToRemote_DeviceOpen_default_instance_);
}
inline const ::CHIDMessageToRemote_DeviceOpen& CHIDMessageToRemote::device_open() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.device_open)
  return _internal_device_open();
}
inline ::CHIDMessageToRemote_DeviceOpen* CHIDMessageToRemote::unsafe_arena_release_device_open() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageToRemote.device_open)
  if (_internal_has_device_open()) {
    clear_has_command();
    ::CHIDMessageToRemote_DeviceOpen* temp = command_.device_open_;
    command_.device_open_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageToRemote::unsafe_arena_set_allocated_device_open(::CHIDMessageToRemote_DeviceOpen* device_open) {
  clear_command();
  if (device_open) {
    set_has_device_open();
    command_.device_open_ = device_open;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageToRemote.device_open)
}
inline ::CHIDMessageToRemote_DeviceOpen* CHIDMessageToRemote::_internal_mutable_device_open() {
  if (!_internal_has_device_open()) {
    clear_command();
    set_has_device_open();
    command_.device_open_ = CreateMaybeMessage< ::CHIDMessageToRemote_DeviceOpen >(GetArenaForAllocation());
  }
  return command_.device_open_;
}
inline ::CHIDMessageToRemote_DeviceOpen* CHIDMessageToRemote::mutable_device_open() {
  ::CHIDMessageToRemote_DeviceOpen* _msg = _internal_mutable_device_open();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.device_open)
  return _msg;
}

// .CHIDMessageToRemote.DeviceClose device_close = 3;
inline bool CHIDMessageToRemote::_internal_has_device_close() const {
  return command_case() == kDeviceClose;
}
inline bool CHIDMessageToRemote::has_device_close() const {
  return _internal_has_device_close();
}
inline void CHIDMessageToRemote::set_has_device_close() {
  _oneof_case_[0] = kDeviceClose;
}
inline void CHIDMessageToRemote::clear_device_close() {
  if (_internal_has_device_close()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.device_close_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageToRemote_DeviceClose* CHIDMessageToRemote::release_device_close() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.device_close)
  if (_internal_has_device_close()) {
    clear_has_command();
      ::CHIDMessageToRemote_DeviceClose* temp = command_.device_close_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.device_close_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageToRemote_DeviceClose& CHIDMessageToRemote::_internal_device_close() const {
  return _internal_has_device_close()
      ? *command_.device_close_
      : reinterpret_cast< ::CHIDMessageToRemote_DeviceClose&>(::_CHIDMessageToRemote_DeviceClose_default_instance_);
}
inline const ::CHIDMessageToRemote_DeviceClose& CHIDMessageToRemote::device_close() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.device_close)
  return _internal_device_close();
}
inline ::CHIDMessageToRemote_DeviceClose* CHIDMessageToRemote::unsafe_arena_release_device_close() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageToRemote.device_close)
  if (_internal_has_device_close()) {
    clear_has_command();
    ::CHIDMessageToRemote_DeviceClose* temp = command_.device_close_;
    command_.device_close_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageToRemote::unsafe_arena_set_allocated_device_close(::CHIDMessageToRemote_DeviceClose* device_close) {
  clear_command();
  if (device_close) {
    set_has_device_close();
    command_.device_close_ = device_close;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageToRemote.device_close)
}
inline ::CHIDMessageToRemote_DeviceClose* CHIDMessageToRemote::_internal_mutable_device_close() {
  if (!_internal_has_device_close()) {
    clear_command();
    set_has_device_close();
    command_.device_close_ = CreateMaybeMessage< ::CHIDMessageToRemote_DeviceClose >(GetArenaForAllocation());
  }
  return command_.device_close_;
}
inline ::CHIDMessageToRemote_DeviceClose* CHIDMessageToRemote::mutable_device_close() {
  ::CHIDMessageToRemote_DeviceClose* _msg = _internal_mutable_device_close();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.device_close)
  return _msg;
}

// .CHIDMessageToRemote.DeviceWrite device_write = 4;
inline bool CHIDMessageToRemote::_internal_has_device_write() const {
  return command_case() == kDeviceWrite;
}
inline bool CHIDMessageToRemote::has_device_write() const {
  return _internal_has_device_write();
}
inline void CHIDMessageToRemote::set_has_device_write() {
  _oneof_case_[0] = kDeviceWrite;
}
inline void CHIDMessageToRemote::clear_device_write() {
  if (_internal_has_device_write()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.device_write_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageToRemote_DeviceWrite* CHIDMessageToRemote::release_device_write() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.device_write)
  if (_internal_has_device_write()) {
    clear_has_command();
      ::CHIDMessageToRemote_DeviceWrite* temp = command_.device_write_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.device_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageToRemote_DeviceWrite& CHIDMessageToRemote::_internal_device_write() const {
  return _internal_has_device_write()
      ? *command_.device_write_
      : reinterpret_cast< ::CHIDMessageToRemote_DeviceWrite&>(::_CHIDMessageToRemote_DeviceWrite_default_instance_);
}
inline const ::CHIDMessageToRemote_DeviceWrite& CHIDMessageToRemote::device_write() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.device_write)
  return _internal_device_write();
}
inline ::CHIDMessageToRemote_DeviceWrite* CHIDMessageToRemote::unsafe_arena_release_device_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageToRemote.device_write)
  if (_internal_has_device_write()) {
    clear_has_command();
    ::CHIDMessageToRemote_DeviceWrite* temp = command_.device_write_;
    command_.device_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageToRemote::unsafe_arena_set_allocated_device_write(::CHIDMessageToRemote_DeviceWrite* device_write) {
  clear_command();
  if (device_write) {
    set_has_device_write();
    command_.device_write_ = device_write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageToRemote.device_write)
}
inline ::CHIDMessageToRemote_DeviceWrite* CHIDMessageToRemote::_internal_mutable_device_write() {
  if (!_internal_has_device_write()) {
    clear_command();
    set_has_device_write();
    command_.device_write_ = CreateMaybeMessage< ::CHIDMessageToRemote_DeviceWrite >(GetArenaForAllocation());
  }
  return command_.device_write_;
}
inline ::CHIDMessageToRemote_DeviceWrite* CHIDMessageToRemote::mutable_device_write() {
  ::CHIDMessageToRemote_DeviceWrite* _msg = _internal_mutable_device_write();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.device_write)
  return _msg;
}

// .CHIDMessageToRemote.DeviceRead device_read = 5;
inline bool CHIDMessageToRemote::_internal_has_device_read() const {
  return command_case() == kDeviceRead;
}
inline bool CHIDMessageToRemote::has_device_read() const {
  return _internal_has_device_read();
}
inline void CHIDMessageToRemote::set_has_device_read() {
  _oneof_case_[0] = kDeviceRead;
}
inline void CHIDMessageToRemote::clear_device_read() {
  if (_internal_has_device_read()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.device_read_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageToRemote_DeviceRead* CHIDMessageToRemote::release_device_read() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.device_read)
  if (_internal_has_device_read()) {
    clear_has_command();
      ::CHIDMessageToRemote_DeviceRead* temp = command_.device_read_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.device_read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageToRemote_DeviceRead& CHIDMessageToRemote::_internal_device_read() const {
  return _internal_has_device_read()
      ? *command_.device_read_
      : reinterpret_cast< ::CHIDMessageToRemote_DeviceRead&>(::_CHIDMessageToRemote_DeviceRead_default_instance_);
}
inline const ::CHIDMessageToRemote_DeviceRead& CHIDMessageToRemote::device_read() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.device_read)
  return _internal_device_read();
}
inline ::CHIDMessageToRemote_DeviceRead* CHIDMessageToRemote::unsafe_arena_release_device_read() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageToRemote.device_read)
  if (_internal_has_device_read()) {
    clear_has_command();
    ::CHIDMessageToRemote_DeviceRead* temp = command_.device_read_;
    command_.device_read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageToRemote::unsafe_arena_set_allocated_device_read(::CHIDMessageToRemote_DeviceRead* device_read) {
  clear_command();
  if (device_read) {
    set_has_device_read();
    command_.device_read_ = device_read;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageToRemote.device_read)
}
inline ::CHIDMessageToRemote_DeviceRead* CHIDMessageToRemote::_internal_mutable_device_read() {
  if (!_internal_has_device_read()) {
    clear_command();
    set_has_device_read();
    command_.device_read_ = CreateMaybeMessage< ::CHIDMessageToRemote_DeviceRead >(GetArenaForAllocation());
  }
  return command_.device_read_;
}
inline ::CHIDMessageToRemote_DeviceRead* CHIDMessageToRemote::mutable_device_read() {
  ::CHIDMessageToRemote_DeviceRead* _msg = _internal_mutable_device_read();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.device_read)
  return _msg;
}

// .CHIDMessageToRemote.DeviceSendFeatureReport device_send_feature_report = 6;
inline bool CHIDMessageToRemote::_internal_has_device_send_feature_report() const {
  return command_case() == kDeviceSendFeatureReport;
}
inline bool CHIDMessageToRemote::has_device_send_feature_report() const {
  return _internal_has_device_send_feature_report();
}
inline void CHIDMessageToRemote::set_has_device_send_feature_report() {
  _oneof_case_[0] = kDeviceSendFeatureReport;
}
inline void CHIDMessageToRemote::clear_device_send_feature_report() {
  if (_internal_has_device_send_feature_report()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.device_send_feature_report_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageToRemote_DeviceSendFeatureReport* CHIDMessageToRemote::release_device_send_feature_report() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.device_send_feature_report)
  if (_internal_has_device_send_feature_report()) {
    clear_has_command();
      ::CHIDMessageToRemote_DeviceSendFeatureReport* temp = command_.device_send_feature_report_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.device_send_feature_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageToRemote_DeviceSendFeatureReport& CHIDMessageToRemote::_internal_device_send_feature_report() const {
  return _internal_has_device_send_feature_report()
      ? *command_.device_send_feature_report_
      : reinterpret_cast< ::CHIDMessageToRemote_DeviceSendFeatureReport&>(::_CHIDMessageToRemote_DeviceSendFeatureReport_default_instance_);
}
inline const ::CHIDMessageToRemote_DeviceSendFeatureReport& CHIDMessageToRemote::device_send_feature_report() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.device_send_feature_report)
  return _internal_device_send_feature_report();
}
inline ::CHIDMessageToRemote_DeviceSendFeatureReport* CHIDMessageToRemote::unsafe_arena_release_device_send_feature_report() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageToRemote.device_send_feature_report)
  if (_internal_has_device_send_feature_report()) {
    clear_has_command();
    ::CHIDMessageToRemote_DeviceSendFeatureReport* temp = command_.device_send_feature_report_;
    command_.device_send_feature_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageToRemote::unsafe_arena_set_allocated_device_send_feature_report(::CHIDMessageToRemote_DeviceSendFeatureReport* device_send_feature_report) {
  clear_command();
  if (device_send_feature_report) {
    set_has_device_send_feature_report();
    command_.device_send_feature_report_ = device_send_feature_report;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageToRemote.device_send_feature_report)
}
inline ::CHIDMessageToRemote_DeviceSendFeatureReport* CHIDMessageToRemote::_internal_mutable_device_send_feature_report() {
  if (!_internal_has_device_send_feature_report()) {
    clear_command();
    set_has_device_send_feature_report();
    command_.device_send_feature_report_ = CreateMaybeMessage< ::CHIDMessageToRemote_DeviceSendFeatureReport >(GetArenaForAllocation());
  }
  return command_.device_send_feature_report_;
}
inline ::CHIDMessageToRemote_DeviceSendFeatureReport* CHIDMessageToRemote::mutable_device_send_feature_report() {
  ::CHIDMessageToRemote_DeviceSendFeatureReport* _msg = _internal_mutable_device_send_feature_report();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.device_send_feature_report)
  return _msg;
}

// .CHIDMessageToRemote.DeviceGetFeatureReport device_get_feature_report = 7;
inline bool CHIDMessageToRemote::_internal_has_device_get_feature_report() const {
  return command_case() == kDeviceGetFeatureReport;
}
inline bool CHIDMessageToRemote::has_device_get_feature_report() const {
  return _internal_has_device_get_feature_report();
}
inline void CHIDMessageToRemote::set_has_device_get_feature_report() {
  _oneof_case_[0] = kDeviceGetFeatureReport;
}
inline void CHIDMessageToRemote::clear_device_get_feature_report() {
  if (_internal_has_device_get_feature_report()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.device_get_feature_report_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageToRemote_DeviceGetFeatureReport* CHIDMessageToRemote::release_device_get_feature_report() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.device_get_feature_report)
  if (_internal_has_device_get_feature_report()) {
    clear_has_command();
      ::CHIDMessageToRemote_DeviceGetFeatureReport* temp = command_.device_get_feature_report_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.device_get_feature_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageToRemote_DeviceGetFeatureReport& CHIDMessageToRemote::_internal_device_get_feature_report() const {
  return _internal_has_device_get_feature_report()
      ? *command_.device_get_feature_report_
      : reinterpret_cast< ::CHIDMessageToRemote_DeviceGetFeatureReport&>(::_CHIDMessageToRemote_DeviceGetFeatureReport_default_instance_);
}
inline const ::CHIDMessageToRemote_DeviceGetFeatureReport& CHIDMessageToRemote::device_get_feature_report() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.device_get_feature_report)
  return _internal_device_get_feature_report();
}
inline ::CHIDMessageToRemote_DeviceGetFeatureReport* CHIDMessageToRemote::unsafe_arena_release_device_get_feature_report() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageToRemote.device_get_feature_report)
  if (_internal_has_device_get_feature_report()) {
    clear_has_command();
    ::CHIDMessageToRemote_DeviceGetFeatureReport* temp = command_.device_get_feature_report_;
    command_.device_get_feature_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageToRemote::unsafe_arena_set_allocated_device_get_feature_report(::CHIDMessageToRemote_DeviceGetFeatureReport* device_get_feature_report) {
  clear_command();
  if (device_get_feature_report) {
    set_has_device_get_feature_report();
    command_.device_get_feature_report_ = device_get_feature_report;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageToRemote.device_get_feature_report)
}
inline ::CHIDMessageToRemote_DeviceGetFeatureReport* CHIDMessageToRemote::_internal_mutable_device_get_feature_report() {
  if (!_internal_has_device_get_feature_report()) {
    clear_command();
    set_has_device_get_feature_report();
    command_.device_get_feature_report_ = CreateMaybeMessage< ::CHIDMessageToRemote_DeviceGetFeatureReport >(GetArenaForAllocation());
  }
  return command_.device_get_feature_report_;
}
inline ::CHIDMessageToRemote_DeviceGetFeatureReport* CHIDMessageToRemote::mutable_device_get_feature_report() {
  ::CHIDMessageToRemote_DeviceGetFeatureReport* _msg = _internal_mutable_device_get_feature_report();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.device_get_feature_report)
  return _msg;
}

// .CHIDMessageToRemote.DeviceGetVendorString device_get_vendor_string = 8;
inline bool CHIDMessageToRemote::_internal_has_device_get_vendor_string() const {
  return command_case() == kDeviceGetVendorString;
}
inline bool CHIDMessageToRemote::has_device_get_vendor_string() const {
  return _internal_has_device_get_vendor_string();
}
inline void CHIDMessageToRemote::set_has_device_get_vendor_string() {
  _oneof_case_[0] = kDeviceGetVendorString;
}
inline void CHIDMessageToRemote::clear_device_get_vendor_string() {
  if (_internal_has_device_get_vendor_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.device_get_vendor_string_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageToRemote_DeviceGetVendorString* CHIDMessageToRemote::release_device_get_vendor_string() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.device_get_vendor_string)
  if (_internal_has_device_get_vendor_string()) {
    clear_has_command();
      ::CHIDMessageToRemote_DeviceGetVendorString* temp = command_.device_get_vendor_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.device_get_vendor_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageToRemote_DeviceGetVendorString& CHIDMessageToRemote::_internal_device_get_vendor_string() const {
  return _internal_has_device_get_vendor_string()
      ? *command_.device_get_vendor_string_
      : reinterpret_cast< ::CHIDMessageToRemote_DeviceGetVendorString&>(::_CHIDMessageToRemote_DeviceGetVendorString_default_instance_);
}
inline const ::CHIDMessageToRemote_DeviceGetVendorString& CHIDMessageToRemote::device_get_vendor_string() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.device_get_vendor_string)
  return _internal_device_get_vendor_string();
}
inline ::CHIDMessageToRemote_DeviceGetVendorString* CHIDMessageToRemote::unsafe_arena_release_device_get_vendor_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageToRemote.device_get_vendor_string)
  if (_internal_has_device_get_vendor_string()) {
    clear_has_command();
    ::CHIDMessageToRemote_DeviceGetVendorString* temp = command_.device_get_vendor_string_;
    command_.device_get_vendor_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageToRemote::unsafe_arena_set_allocated_device_get_vendor_string(::CHIDMessageToRemote_DeviceGetVendorString* device_get_vendor_string) {
  clear_command();
  if (device_get_vendor_string) {
    set_has_device_get_vendor_string();
    command_.device_get_vendor_string_ = device_get_vendor_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageToRemote.device_get_vendor_string)
}
inline ::CHIDMessageToRemote_DeviceGetVendorString* CHIDMessageToRemote::_internal_mutable_device_get_vendor_string() {
  if (!_internal_has_device_get_vendor_string()) {
    clear_command();
    set_has_device_get_vendor_string();
    command_.device_get_vendor_string_ = CreateMaybeMessage< ::CHIDMessageToRemote_DeviceGetVendorString >(GetArenaForAllocation());
  }
  return command_.device_get_vendor_string_;
}
inline ::CHIDMessageToRemote_DeviceGetVendorString* CHIDMessageToRemote::mutable_device_get_vendor_string() {
  ::CHIDMessageToRemote_DeviceGetVendorString* _msg = _internal_mutable_device_get_vendor_string();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.device_get_vendor_string)
  return _msg;
}

// .CHIDMessageToRemote.DeviceGetProductString device_get_product_string = 9;
inline bool CHIDMessageToRemote::_internal_has_device_get_product_string() const {
  return command_case() == kDeviceGetProductString;
}
inline bool CHIDMessageToRemote::has_device_get_product_string() const {
  return _internal_has_device_get_product_string();
}
inline void CHIDMessageToRemote::set_has_device_get_product_string() {
  _oneof_case_[0] = kDeviceGetProductString;
}
inline void CHIDMessageToRemote::clear_device_get_product_string() {
  if (_internal_has_device_get_product_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.device_get_product_string_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageToRemote_DeviceGetProductString* CHIDMessageToRemote::release_device_get_product_string() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.device_get_product_string)
  if (_internal_has_device_get_product_string()) {
    clear_has_command();
      ::CHIDMessageToRemote_DeviceGetProductString* temp = command_.device_get_product_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.device_get_product_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageToRemote_DeviceGetProductString& CHIDMessageToRemote::_internal_device_get_product_string() const {
  return _internal_has_device_get_product_string()
      ? *command_.device_get_product_string_
      : reinterpret_cast< ::CHIDMessageToRemote_DeviceGetProductString&>(::_CHIDMessageToRemote_DeviceGetProductString_default_instance_);
}
inline const ::CHIDMessageToRemote_DeviceGetProductString& CHIDMessageToRemote::device_get_product_string() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.device_get_product_string)
  return _internal_device_get_product_string();
}
inline ::CHIDMessageToRemote_DeviceGetProductString* CHIDMessageToRemote::unsafe_arena_release_device_get_product_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageToRemote.device_get_product_string)
  if (_internal_has_device_get_product_string()) {
    clear_has_command();
    ::CHIDMessageToRemote_DeviceGetProductString* temp = command_.device_get_product_string_;
    command_.device_get_product_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageToRemote::unsafe_arena_set_allocated_device_get_product_string(::CHIDMessageToRemote_DeviceGetProductString* device_get_product_string) {
  clear_command();
  if (device_get_product_string) {
    set_has_device_get_product_string();
    command_.device_get_product_string_ = device_get_product_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageToRemote.device_get_product_string)
}
inline ::CHIDMessageToRemote_DeviceGetProductString* CHIDMessageToRemote::_internal_mutable_device_get_product_string() {
  if (!_internal_has_device_get_product_string()) {
    clear_command();
    set_has_device_get_product_string();
    command_.device_get_product_string_ = CreateMaybeMessage< ::CHIDMessageToRemote_DeviceGetProductString >(GetArenaForAllocation());
  }
  return command_.device_get_product_string_;
}
inline ::CHIDMessageToRemote_DeviceGetProductString* CHIDMessageToRemote::mutable_device_get_product_string() {
  ::CHIDMessageToRemote_DeviceGetProductString* _msg = _internal_mutable_device_get_product_string();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.device_get_product_string)
  return _msg;
}

// .CHIDMessageToRemote.DeviceGetSerialNumberString device_get_serial_number_string = 10;
inline bool CHIDMessageToRemote::_internal_has_device_get_serial_number_string() const {
  return command_case() == kDeviceGetSerialNumberString;
}
inline bool CHIDMessageToRemote::has_device_get_serial_number_string() const {
  return _internal_has_device_get_serial_number_string();
}
inline void CHIDMessageToRemote::set_has_device_get_serial_number_string() {
  _oneof_case_[0] = kDeviceGetSerialNumberString;
}
inline void CHIDMessageToRemote::clear_device_get_serial_number_string() {
  if (_internal_has_device_get_serial_number_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.device_get_serial_number_string_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageToRemote_DeviceGetSerialNumberString* CHIDMessageToRemote::release_device_get_serial_number_string() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.device_get_serial_number_string)
  if (_internal_has_device_get_serial_number_string()) {
    clear_has_command();
      ::CHIDMessageToRemote_DeviceGetSerialNumberString* temp = command_.device_get_serial_number_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.device_get_serial_number_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageToRemote_DeviceGetSerialNumberString& CHIDMessageToRemote::_internal_device_get_serial_number_string() const {
  return _internal_has_device_get_serial_number_string()
      ? *command_.device_get_serial_number_string_
      : reinterpret_cast< ::CHIDMessageToRemote_DeviceGetSerialNumberString&>(::_CHIDMessageToRemote_DeviceGetSerialNumberString_default_instance_);
}
inline const ::CHIDMessageToRemote_DeviceGetSerialNumberString& CHIDMessageToRemote::device_get_serial_number_string() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.device_get_serial_number_string)
  return _internal_device_get_serial_number_string();
}
inline ::CHIDMessageToRemote_DeviceGetSerialNumberString* CHIDMessageToRemote::unsafe_arena_release_device_get_serial_number_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageToRemote.device_get_serial_number_string)
  if (_internal_has_device_get_serial_number_string()) {
    clear_has_command();
    ::CHIDMessageToRemote_DeviceGetSerialNumberString* temp = command_.device_get_serial_number_string_;
    command_.device_get_serial_number_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageToRemote::unsafe_arena_set_allocated_device_get_serial_number_string(::CHIDMessageToRemote_DeviceGetSerialNumberString* device_get_serial_number_string) {
  clear_command();
  if (device_get_serial_number_string) {
    set_has_device_get_serial_number_string();
    command_.device_get_serial_number_string_ = device_get_serial_number_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageToRemote.device_get_serial_number_string)
}
inline ::CHIDMessageToRemote_DeviceGetSerialNumberString* CHIDMessageToRemote::_internal_mutable_device_get_serial_number_string() {
  if (!_internal_has_device_get_serial_number_string()) {
    clear_command();
    set_has_device_get_serial_number_string();
    command_.device_get_serial_number_string_ = CreateMaybeMessage< ::CHIDMessageToRemote_DeviceGetSerialNumberString >(GetArenaForAllocation());
  }
  return command_.device_get_serial_number_string_;
}
inline ::CHIDMessageToRemote_DeviceGetSerialNumberString* CHIDMessageToRemote::mutable_device_get_serial_number_string() {
  ::CHIDMessageToRemote_DeviceGetSerialNumberString* _msg = _internal_mutable_device_get_serial_number_string();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.device_get_serial_number_string)
  return _msg;
}

// .CHIDMessageToRemote.DeviceStartInputReports device_start_input_reports = 11;
inline bool CHIDMessageToRemote::_internal_has_device_start_input_reports() const {
  return command_case() == kDeviceStartInputReports;
}
inline bool CHIDMessageToRemote::has_device_start_input_reports() const {
  return _internal_has_device_start_input_reports();
}
inline void CHIDMessageToRemote::set_has_device_start_input_reports() {
  _oneof_case_[0] = kDeviceStartInputReports;
}
inline void CHIDMessageToRemote::clear_device_start_input_reports() {
  if (_internal_has_device_start_input_reports()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.device_start_input_reports_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageToRemote_DeviceStartInputReports* CHIDMessageToRemote::release_device_start_input_reports() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.device_start_input_reports)
  if (_internal_has_device_start_input_reports()) {
    clear_has_command();
      ::CHIDMessageToRemote_DeviceStartInputReports* temp = command_.device_start_input_reports_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.device_start_input_reports_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageToRemote_DeviceStartInputReports& CHIDMessageToRemote::_internal_device_start_input_reports() const {
  return _internal_has_device_start_input_reports()
      ? *command_.device_start_input_reports_
      : reinterpret_cast< ::CHIDMessageToRemote_DeviceStartInputReports&>(::_CHIDMessageToRemote_DeviceStartInputReports_default_instance_);
}
inline const ::CHIDMessageToRemote_DeviceStartInputReports& CHIDMessageToRemote::device_start_input_reports() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.device_start_input_reports)
  return _internal_device_start_input_reports();
}
inline ::CHIDMessageToRemote_DeviceStartInputReports* CHIDMessageToRemote::unsafe_arena_release_device_start_input_reports() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageToRemote.device_start_input_reports)
  if (_internal_has_device_start_input_reports()) {
    clear_has_command();
    ::CHIDMessageToRemote_DeviceStartInputReports* temp = command_.device_start_input_reports_;
    command_.device_start_input_reports_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageToRemote::unsafe_arena_set_allocated_device_start_input_reports(::CHIDMessageToRemote_DeviceStartInputReports* device_start_input_reports) {
  clear_command();
  if (device_start_input_reports) {
    set_has_device_start_input_reports();
    command_.device_start_input_reports_ = device_start_input_reports;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageToRemote.device_start_input_reports)
}
inline ::CHIDMessageToRemote_DeviceStartInputReports* CHIDMessageToRemote::_internal_mutable_device_start_input_reports() {
  if (!_internal_has_device_start_input_reports()) {
    clear_command();
    set_has_device_start_input_reports();
    command_.device_start_input_reports_ = CreateMaybeMessage< ::CHIDMessageToRemote_DeviceStartInputReports >(GetArenaForAllocation());
  }
  return command_.device_start_input_reports_;
}
inline ::CHIDMessageToRemote_DeviceStartInputReports* CHIDMessageToRemote::mutable_device_start_input_reports() {
  ::CHIDMessageToRemote_DeviceStartInputReports* _msg = _internal_mutable_device_start_input_reports();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.device_start_input_reports)
  return _msg;
}

// .CHIDMessageToRemote.DeviceRequestFullReport device_request_full_report = 12;
inline bool CHIDMessageToRemote::_internal_has_device_request_full_report() const {
  return command_case() == kDeviceRequestFullReport;
}
inline bool CHIDMessageToRemote::has_device_request_full_report() const {
  return _internal_has_device_request_full_report();
}
inline void CHIDMessageToRemote::set_has_device_request_full_report() {
  _oneof_case_[0] = kDeviceRequestFullReport;
}
inline void CHIDMessageToRemote::clear_device_request_full_report() {
  if (_internal_has_device_request_full_report()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.device_request_full_report_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageToRemote_DeviceRequestFullReport* CHIDMessageToRemote::release_device_request_full_report() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.device_request_full_report)
  if (_internal_has_device_request_full_report()) {
    clear_has_command();
      ::CHIDMessageToRemote_DeviceRequestFullReport* temp = command_.device_request_full_report_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.device_request_full_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageToRemote_DeviceRequestFullReport& CHIDMessageToRemote::_internal_device_request_full_report() const {
  return _internal_has_device_request_full_report()
      ? *command_.device_request_full_report_
      : reinterpret_cast< ::CHIDMessageToRemote_DeviceRequestFullReport&>(::_CHIDMessageToRemote_DeviceRequestFullReport_default_instance_);
}
inline const ::CHIDMessageToRemote_DeviceRequestFullReport& CHIDMessageToRemote::device_request_full_report() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.device_request_full_report)
  return _internal_device_request_full_report();
}
inline ::CHIDMessageToRemote_DeviceRequestFullReport* CHIDMessageToRemote::unsafe_arena_release_device_request_full_report() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageToRemote.device_request_full_report)
  if (_internal_has_device_request_full_report()) {
    clear_has_command();
    ::CHIDMessageToRemote_DeviceRequestFullReport* temp = command_.device_request_full_report_;
    command_.device_request_full_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageToRemote::unsafe_arena_set_allocated_device_request_full_report(::CHIDMessageToRemote_DeviceRequestFullReport* device_request_full_report) {
  clear_command();
  if (device_request_full_report) {
    set_has_device_request_full_report();
    command_.device_request_full_report_ = device_request_full_report;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageToRemote.device_request_full_report)
}
inline ::CHIDMessageToRemote_DeviceRequestFullReport* CHIDMessageToRemote::_internal_mutable_device_request_full_report() {
  if (!_internal_has_device_request_full_report()) {
    clear_command();
    set_has_device_request_full_report();
    command_.device_request_full_report_ = CreateMaybeMessage< ::CHIDMessageToRemote_DeviceRequestFullReport >(GetArenaForAllocation());
  }
  return command_.device_request_full_report_;
}
inline ::CHIDMessageToRemote_DeviceRequestFullReport* CHIDMessageToRemote::mutable_device_request_full_report() {
  ::CHIDMessageToRemote_DeviceRequestFullReport* _msg = _internal_mutable_device_request_full_report();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.device_request_full_report)
  return _msg;
}

// .CHIDMessageToRemote.DeviceDisconnect device_disconnect = 13;
inline bool CHIDMessageToRemote::_internal_has_device_disconnect() const {
  return command_case() == kDeviceDisconnect;
}
inline bool CHIDMessageToRemote::has_device_disconnect() const {
  return _internal_has_device_disconnect();
}
inline void CHIDMessageToRemote::set_has_device_disconnect() {
  _oneof_case_[0] = kDeviceDisconnect;
}
inline void CHIDMessageToRemote::clear_device_disconnect() {
  if (_internal_has_device_disconnect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.device_disconnect_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageToRemote_DeviceDisconnect* CHIDMessageToRemote::release_device_disconnect() {
  // @@protoc_insertion_point(field_release:CHIDMessageToRemote.device_disconnect)
  if (_internal_has_device_disconnect()) {
    clear_has_command();
      ::CHIDMessageToRemote_DeviceDisconnect* temp = command_.device_disconnect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.device_disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageToRemote_DeviceDisconnect& CHIDMessageToRemote::_internal_device_disconnect() const {
  return _internal_has_device_disconnect()
      ? *command_.device_disconnect_
      : reinterpret_cast< ::CHIDMessageToRemote_DeviceDisconnect&>(::_CHIDMessageToRemote_DeviceDisconnect_default_instance_);
}
inline const ::CHIDMessageToRemote_DeviceDisconnect& CHIDMessageToRemote::device_disconnect() const {
  // @@protoc_insertion_point(field_get:CHIDMessageToRemote.device_disconnect)
  return _internal_device_disconnect();
}
inline ::CHIDMessageToRemote_DeviceDisconnect* CHIDMessageToRemote::unsafe_arena_release_device_disconnect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageToRemote.device_disconnect)
  if (_internal_has_device_disconnect()) {
    clear_has_command();
    ::CHIDMessageToRemote_DeviceDisconnect* temp = command_.device_disconnect_;
    command_.device_disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageToRemote::unsafe_arena_set_allocated_device_disconnect(::CHIDMessageToRemote_DeviceDisconnect* device_disconnect) {
  clear_command();
  if (device_disconnect) {
    set_has_device_disconnect();
    command_.device_disconnect_ = device_disconnect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageToRemote.device_disconnect)
}
inline ::CHIDMessageToRemote_DeviceDisconnect* CHIDMessageToRemote::_internal_mutable_device_disconnect() {
  if (!_internal_has_device_disconnect()) {
    clear_command();
    set_has_device_disconnect();
    command_.device_disconnect_ = CreateMaybeMessage< ::CHIDMessageToRemote_DeviceDisconnect >(GetArenaForAllocation());
  }
  return command_.device_disconnect_;
}
inline ::CHIDMessageToRemote_DeviceDisconnect* CHIDMessageToRemote::mutable_device_disconnect() {
  ::CHIDMessageToRemote_DeviceDisconnect* _msg = _internal_mutable_device_disconnect();
  // @@protoc_insertion_point(field_mutable:CHIDMessageToRemote.device_disconnect)
  return _msg;
}

inline bool CHIDMessageToRemote::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void CHIDMessageToRemote::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline CHIDMessageToRemote::CommandCase CHIDMessageToRemote::command_case() const {
  return CHIDMessageToRemote::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CHIDMessageFromRemote_UpdateDeviceList

// repeated .CHIDDeviceInfo devices = 1;
inline int CHIDMessageFromRemote_UpdateDeviceList::_internal_devices_size() const {
  return devices_.size();
}
inline int CHIDMessageFromRemote_UpdateDeviceList::devices_size() const {
  return _internal_devices_size();
}
inline void CHIDMessageFromRemote_UpdateDeviceList::clear_devices() {
  devices_.Clear();
}
inline ::CHIDDeviceInfo* CHIDMessageFromRemote_UpdateDeviceList::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:CHIDMessageFromRemote.UpdateDeviceList.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHIDDeviceInfo >*
CHIDMessageFromRemote_UpdateDeviceList::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:CHIDMessageFromRemote.UpdateDeviceList.devices)
  return &devices_;
}
inline const ::CHIDDeviceInfo& CHIDMessageFromRemote_UpdateDeviceList::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::CHIDDeviceInfo& CHIDMessageFromRemote_UpdateDeviceList::devices(int index) const {
  // @@protoc_insertion_point(field_get:CHIDMessageFromRemote.UpdateDeviceList.devices)
  return _internal_devices(index);
}
inline ::CHIDDeviceInfo* CHIDMessageFromRemote_UpdateDeviceList::_internal_add_devices() {
  return devices_.Add();
}
inline ::CHIDDeviceInfo* CHIDMessageFromRemote_UpdateDeviceList::add_devices() {
  ::CHIDDeviceInfo* _add = _internal_add_devices();
  // @@protoc_insertion_point(field_add:CHIDMessageFromRemote.UpdateDeviceList.devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHIDDeviceInfo >&
CHIDMessageFromRemote_UpdateDeviceList::devices() const {
  // @@protoc_insertion_point(field_list:CHIDMessageFromRemote.UpdateDeviceList.devices)
  return devices_;
}

// -------------------------------------------------------------------

// CHIDMessageFromRemote_RequestResponse

// optional uint32 request_id = 1;
inline bool CHIDMessageFromRemote_RequestResponse::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CHIDMessageFromRemote_RequestResponse::has_request_id() const {
  return _internal_has_request_id();
}
inline void CHIDMessageFromRemote_RequestResponse::clear_request_id() {
  request_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CHIDMessageFromRemote_RequestResponse::_internal_request_id() const {
  return request_id_;
}
inline uint32_t CHIDMessageFromRemote_RequestResponse::request_id() const {
  // @@protoc_insertion_point(field_get:CHIDMessageFromRemote.RequestResponse.request_id)
  return _internal_request_id();
}
inline void CHIDMessageFromRemote_RequestResponse::_internal_set_request_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  request_id_ = value;
}
inline void CHIDMessageFromRemote_RequestResponse::set_request_id(uint32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:CHIDMessageFromRemote.RequestResponse.request_id)
}

// optional int32 result = 2;
inline bool CHIDMessageFromRemote_RequestResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CHIDMessageFromRemote_RequestResponse::has_result() const {
  return _internal_has_result();
}
inline void CHIDMessageFromRemote_RequestResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CHIDMessageFromRemote_RequestResponse::_internal_result() const {
  return result_;
}
inline int32_t CHIDMessageFromRemote_RequestResponse::result() const {
  // @@protoc_insertion_point(field_get:CHIDMessageFromRemote.RequestResponse.result)
  return _internal_result();
}
inline void CHIDMessageFromRemote_RequestResponse::_internal_set_result(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
}
inline void CHIDMessageFromRemote_RequestResponse::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CHIDMessageFromRemote.RequestResponse.result)
}

// optional bytes data = 3;
inline bool CHIDMessageFromRemote_RequestResponse::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDMessageFromRemote_RequestResponse::has_data() const {
  return _internal_has_data();
}
inline void CHIDMessageFromRemote_RequestResponse::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CHIDMessageFromRemote_RequestResponse::data() const {
  // @@protoc_insertion_point(field_get:CHIDMessageFromRemote.RequestResponse.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CHIDMessageFromRemote_RequestResponse::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CHIDMessageFromRemote.RequestResponse.data)
}
inline std::string* CHIDMessageFromRemote_RequestResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CHIDMessageFromRemote.RequestResponse.data)
  return _s;
}
inline const std::string& CHIDMessageFromRemote_RequestResponse::_internal_data() const {
  return data_.Get();
}
inline void CHIDMessageFromRemote_RequestResponse::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CHIDMessageFromRemote_RequestResponse::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CHIDMessageFromRemote_RequestResponse::release_data() {
  // @@protoc_insertion_point(field_release:CHIDMessageFromRemote.RequestResponse.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CHIDMessageFromRemote_RequestResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CHIDMessageFromRemote.RequestResponse.data)
}

// -------------------------------------------------------------------

// CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport

// optional uint32 device = 1;
inline bool CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::has_device() const {
  return _internal_has_device();
}
inline void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::_internal_device() const {
  return device_;
}
inline uint32_t CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::device() const {
  // @@protoc_insertion_point(field_get:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.device)
  return _internal_device();
}
inline void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::_internal_set_device(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  device_ = value;
}
inline void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::set_device(uint32_t value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.device)
}

// repeated .CHIDDeviceInputReport reports = 2;
inline int CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::_internal_reports_size() const {
  return reports_.size();
}
inline int CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::reports_size() const {
  return _internal_reports_size();
}
inline void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::clear_reports() {
  reports_.Clear();
}
inline ::CHIDDeviceInputReport* CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.reports)
  return reports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHIDDeviceInputReport >*
CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.reports)
  return &reports_;
}
inline const ::CHIDDeviceInputReport& CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::_internal_reports(int index) const {
  return reports_.Get(index);
}
inline const ::CHIDDeviceInputReport& CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::reports(int index) const {
  // @@protoc_insertion_point(field_get:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.reports)
  return _internal_reports(index);
}
inline ::CHIDDeviceInputReport* CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::_internal_add_reports() {
  return reports_.Add();
}
inline ::CHIDDeviceInputReport* CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::add_reports() {
  ::CHIDDeviceInputReport* _add = _internal_add_reports();
  // @@protoc_insertion_point(field_add:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.reports)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHIDDeviceInputReport >&
CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::reports() const {
  // @@protoc_insertion_point(field_list:CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.reports)
  return reports_;
}

// -------------------------------------------------------------------

// CHIDMessageFromRemote_DeviceInputReports

// repeated .CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport device_reports = 1;
inline int CHIDMessageFromRemote_DeviceInputReports::_internal_device_reports_size() const {
  return device_reports_.size();
}
inline int CHIDMessageFromRemote_DeviceInputReports::device_reports_size() const {
  return _internal_device_reports_size();
}
inline void CHIDMessageFromRemote_DeviceInputReports::clear_device_reports() {
  device_reports_.Clear();
}
inline ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* CHIDMessageFromRemote_DeviceInputReports::mutable_device_reports(int index) {
  // @@protoc_insertion_point(field_mutable:CHIDMessageFromRemote.DeviceInputReports.device_reports)
  return device_reports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport >*
CHIDMessageFromRemote_DeviceInputReports::mutable_device_reports() {
  // @@protoc_insertion_point(field_mutable_list:CHIDMessageFromRemote.DeviceInputReports.device_reports)
  return &device_reports_;
}
inline const ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& CHIDMessageFromRemote_DeviceInputReports::_internal_device_reports(int index) const {
  return device_reports_.Get(index);
}
inline const ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& CHIDMessageFromRemote_DeviceInputReports::device_reports(int index) const {
  // @@protoc_insertion_point(field_get:CHIDMessageFromRemote.DeviceInputReports.device_reports)
  return _internal_device_reports(index);
}
inline ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* CHIDMessageFromRemote_DeviceInputReports::_internal_add_device_reports() {
  return device_reports_.Add();
}
inline ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* CHIDMessageFromRemote_DeviceInputReports::add_device_reports() {
  ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* _add = _internal_add_device_reports();
  // @@protoc_insertion_point(field_add:CHIDMessageFromRemote.DeviceInputReports.device_reports)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport >&
CHIDMessageFromRemote_DeviceInputReports::device_reports() const {
  // @@protoc_insertion_point(field_list:CHIDMessageFromRemote.DeviceInputReports.device_reports)
  return device_reports_;
}

// -------------------------------------------------------------------

// CHIDMessageFromRemote_CloseDevice

// optional uint32 device = 1;
inline bool CHIDMessageFromRemote_CloseDevice::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHIDMessageFromRemote_CloseDevice::has_device() const {
  return _internal_has_device();
}
inline void CHIDMessageFromRemote_CloseDevice::clear_device() {
  device_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CHIDMessageFromRemote_CloseDevice::_internal_device() const {
  return device_;
}
inline uint32_t CHIDMessageFromRemote_CloseDevice::device() const {
  // @@protoc_insertion_point(field_get:CHIDMessageFromRemote.CloseDevice.device)
  return _internal_device();
}
inline void CHIDMessageFromRemote_CloseDevice::_internal_set_device(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  device_ = value;
}
inline void CHIDMessageFromRemote_CloseDevice::set_device(uint32_t value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:CHIDMessageFromRemote.CloseDevice.device)
}

// -------------------------------------------------------------------

// CHIDMessageFromRemote_CloseAllDevices

// -------------------------------------------------------------------

// CHIDMessageFromRemote

// .CHIDMessageFromRemote.UpdateDeviceList update_device_list = 1;
inline bool CHIDMessageFromRemote::_internal_has_update_device_list() const {
  return command_case() == kUpdateDeviceList;
}
inline bool CHIDMessageFromRemote::has_update_device_list() const {
  return _internal_has_update_device_list();
}
inline void CHIDMessageFromRemote::set_has_update_device_list() {
  _oneof_case_[0] = kUpdateDeviceList;
}
inline void CHIDMessageFromRemote::clear_update_device_list() {
  if (_internal_has_update_device_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.update_device_list_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageFromRemote_UpdateDeviceList* CHIDMessageFromRemote::release_update_device_list() {
  // @@protoc_insertion_point(field_release:CHIDMessageFromRemote.update_device_list)
  if (_internal_has_update_device_list()) {
    clear_has_command();
      ::CHIDMessageFromRemote_UpdateDeviceList* temp = command_.update_device_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.update_device_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageFromRemote_UpdateDeviceList& CHIDMessageFromRemote::_internal_update_device_list() const {
  return _internal_has_update_device_list()
      ? *command_.update_device_list_
      : reinterpret_cast< ::CHIDMessageFromRemote_UpdateDeviceList&>(::_CHIDMessageFromRemote_UpdateDeviceList_default_instance_);
}
inline const ::CHIDMessageFromRemote_UpdateDeviceList& CHIDMessageFromRemote::update_device_list() const {
  // @@protoc_insertion_point(field_get:CHIDMessageFromRemote.update_device_list)
  return _internal_update_device_list();
}
inline ::CHIDMessageFromRemote_UpdateDeviceList* CHIDMessageFromRemote::unsafe_arena_release_update_device_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageFromRemote.update_device_list)
  if (_internal_has_update_device_list()) {
    clear_has_command();
    ::CHIDMessageFromRemote_UpdateDeviceList* temp = command_.update_device_list_;
    command_.update_device_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageFromRemote::unsafe_arena_set_allocated_update_device_list(::CHIDMessageFromRemote_UpdateDeviceList* update_device_list) {
  clear_command();
  if (update_device_list) {
    set_has_update_device_list();
    command_.update_device_list_ = update_device_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageFromRemote.update_device_list)
}
inline ::CHIDMessageFromRemote_UpdateDeviceList* CHIDMessageFromRemote::_internal_mutable_update_device_list() {
  if (!_internal_has_update_device_list()) {
    clear_command();
    set_has_update_device_list();
    command_.update_device_list_ = CreateMaybeMessage< ::CHIDMessageFromRemote_UpdateDeviceList >(GetArenaForAllocation());
  }
  return command_.update_device_list_;
}
inline ::CHIDMessageFromRemote_UpdateDeviceList* CHIDMessageFromRemote::mutable_update_device_list() {
  ::CHIDMessageFromRemote_UpdateDeviceList* _msg = _internal_mutable_update_device_list();
  // @@protoc_insertion_point(field_mutable:CHIDMessageFromRemote.update_device_list)
  return _msg;
}

// .CHIDMessageFromRemote.RequestResponse response = 2;
inline bool CHIDMessageFromRemote::_internal_has_response() const {
  return command_case() == kResponse;
}
inline bool CHIDMessageFromRemote::has_response() const {
  return _internal_has_response();
}
inline void CHIDMessageFromRemote::set_has_response() {
  _oneof_case_[0] = kResponse;
}
inline void CHIDMessageFromRemote::clear_response() {
  if (_internal_has_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.response_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageFromRemote_RequestResponse* CHIDMessageFromRemote::release_response() {
  // @@protoc_insertion_point(field_release:CHIDMessageFromRemote.response)
  if (_internal_has_response()) {
    clear_has_command();
      ::CHIDMessageFromRemote_RequestResponse* temp = command_.response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageFromRemote_RequestResponse& CHIDMessageFromRemote::_internal_response() const {
  return _internal_has_response()
      ? *command_.response_
      : reinterpret_cast< ::CHIDMessageFromRemote_RequestResponse&>(::_CHIDMessageFromRemote_RequestResponse_default_instance_);
}
inline const ::CHIDMessageFromRemote_RequestResponse& CHIDMessageFromRemote::response() const {
  // @@protoc_insertion_point(field_get:CHIDMessageFromRemote.response)
  return _internal_response();
}
inline ::CHIDMessageFromRemote_RequestResponse* CHIDMessageFromRemote::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageFromRemote.response)
  if (_internal_has_response()) {
    clear_has_command();
    ::CHIDMessageFromRemote_RequestResponse* temp = command_.response_;
    command_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageFromRemote::unsafe_arena_set_allocated_response(::CHIDMessageFromRemote_RequestResponse* response) {
  clear_command();
  if (response) {
    set_has_response();
    command_.response_ = response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageFromRemote.response)
}
inline ::CHIDMessageFromRemote_RequestResponse* CHIDMessageFromRemote::_internal_mutable_response() {
  if (!_internal_has_response()) {
    clear_command();
    set_has_response();
    command_.response_ = CreateMaybeMessage< ::CHIDMessageFromRemote_RequestResponse >(GetArenaForAllocation());
  }
  return command_.response_;
}
inline ::CHIDMessageFromRemote_RequestResponse* CHIDMessageFromRemote::mutable_response() {
  ::CHIDMessageFromRemote_RequestResponse* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:CHIDMessageFromRemote.response)
  return _msg;
}

// .CHIDMessageFromRemote.DeviceInputReports reports = 3;
inline bool CHIDMessageFromRemote::_internal_has_reports() const {
  return command_case() == kReports;
}
inline bool CHIDMessageFromRemote::has_reports() const {
  return _internal_has_reports();
}
inline void CHIDMessageFromRemote::set_has_reports() {
  _oneof_case_[0] = kReports;
}
inline void CHIDMessageFromRemote::clear_reports() {
  if (_internal_has_reports()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.reports_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageFromRemote_DeviceInputReports* CHIDMessageFromRemote::release_reports() {
  // @@protoc_insertion_point(field_release:CHIDMessageFromRemote.reports)
  if (_internal_has_reports()) {
    clear_has_command();
      ::CHIDMessageFromRemote_DeviceInputReports* temp = command_.reports_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.reports_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageFromRemote_DeviceInputReports& CHIDMessageFromRemote::_internal_reports() const {
  return _internal_has_reports()
      ? *command_.reports_
      : reinterpret_cast< ::CHIDMessageFromRemote_DeviceInputReports&>(::_CHIDMessageFromRemote_DeviceInputReports_default_instance_);
}
inline const ::CHIDMessageFromRemote_DeviceInputReports& CHIDMessageFromRemote::reports() const {
  // @@protoc_insertion_point(field_get:CHIDMessageFromRemote.reports)
  return _internal_reports();
}
inline ::CHIDMessageFromRemote_DeviceInputReports* CHIDMessageFromRemote::unsafe_arena_release_reports() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageFromRemote.reports)
  if (_internal_has_reports()) {
    clear_has_command();
    ::CHIDMessageFromRemote_DeviceInputReports* temp = command_.reports_;
    command_.reports_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageFromRemote::unsafe_arena_set_allocated_reports(::CHIDMessageFromRemote_DeviceInputReports* reports) {
  clear_command();
  if (reports) {
    set_has_reports();
    command_.reports_ = reports;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageFromRemote.reports)
}
inline ::CHIDMessageFromRemote_DeviceInputReports* CHIDMessageFromRemote::_internal_mutable_reports() {
  if (!_internal_has_reports()) {
    clear_command();
    set_has_reports();
    command_.reports_ = CreateMaybeMessage< ::CHIDMessageFromRemote_DeviceInputReports >(GetArenaForAllocation());
  }
  return command_.reports_;
}
inline ::CHIDMessageFromRemote_DeviceInputReports* CHIDMessageFromRemote::mutable_reports() {
  ::CHIDMessageFromRemote_DeviceInputReports* _msg = _internal_mutable_reports();
  // @@protoc_insertion_point(field_mutable:CHIDMessageFromRemote.reports)
  return _msg;
}

// .CHIDMessageFromRemote.CloseDevice close_device = 4;
inline bool CHIDMessageFromRemote::_internal_has_close_device() const {
  return command_case() == kCloseDevice;
}
inline bool CHIDMessageFromRemote::has_close_device() const {
  return _internal_has_close_device();
}
inline void CHIDMessageFromRemote::set_has_close_device() {
  _oneof_case_[0] = kCloseDevice;
}
inline void CHIDMessageFromRemote::clear_close_device() {
  if (_internal_has_close_device()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.close_device_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageFromRemote_CloseDevice* CHIDMessageFromRemote::release_close_device() {
  // @@protoc_insertion_point(field_release:CHIDMessageFromRemote.close_device)
  if (_internal_has_close_device()) {
    clear_has_command();
      ::CHIDMessageFromRemote_CloseDevice* temp = command_.close_device_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.close_device_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageFromRemote_CloseDevice& CHIDMessageFromRemote::_internal_close_device() const {
  return _internal_has_close_device()
      ? *command_.close_device_
      : reinterpret_cast< ::CHIDMessageFromRemote_CloseDevice&>(::_CHIDMessageFromRemote_CloseDevice_default_instance_);
}
inline const ::CHIDMessageFromRemote_CloseDevice& CHIDMessageFromRemote::close_device() const {
  // @@protoc_insertion_point(field_get:CHIDMessageFromRemote.close_device)
  return _internal_close_device();
}
inline ::CHIDMessageFromRemote_CloseDevice* CHIDMessageFromRemote::unsafe_arena_release_close_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageFromRemote.close_device)
  if (_internal_has_close_device()) {
    clear_has_command();
    ::CHIDMessageFromRemote_CloseDevice* temp = command_.close_device_;
    command_.close_device_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageFromRemote::unsafe_arena_set_allocated_close_device(::CHIDMessageFromRemote_CloseDevice* close_device) {
  clear_command();
  if (close_device) {
    set_has_close_device();
    command_.close_device_ = close_device;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageFromRemote.close_device)
}
inline ::CHIDMessageFromRemote_CloseDevice* CHIDMessageFromRemote::_internal_mutable_close_device() {
  if (!_internal_has_close_device()) {
    clear_command();
    set_has_close_device();
    command_.close_device_ = CreateMaybeMessage< ::CHIDMessageFromRemote_CloseDevice >(GetArenaForAllocation());
  }
  return command_.close_device_;
}
inline ::CHIDMessageFromRemote_CloseDevice* CHIDMessageFromRemote::mutable_close_device() {
  ::CHIDMessageFromRemote_CloseDevice* _msg = _internal_mutable_close_device();
  // @@protoc_insertion_point(field_mutable:CHIDMessageFromRemote.close_device)
  return _msg;
}

// .CHIDMessageFromRemote.CloseAllDevices close_all_devices = 5;
inline bool CHIDMessageFromRemote::_internal_has_close_all_devices() const {
  return command_case() == kCloseAllDevices;
}
inline bool CHIDMessageFromRemote::has_close_all_devices() const {
  return _internal_has_close_all_devices();
}
inline void CHIDMessageFromRemote::set_has_close_all_devices() {
  _oneof_case_[0] = kCloseAllDevices;
}
inline void CHIDMessageFromRemote::clear_close_all_devices() {
  if (_internal_has_close_all_devices()) {
    if (GetArenaForAllocation() == nullptr) {
      delete command_.close_all_devices_;
    }
    clear_has_command();
  }
}
inline ::CHIDMessageFromRemote_CloseAllDevices* CHIDMessageFromRemote::release_close_all_devices() {
  // @@protoc_insertion_point(field_release:CHIDMessageFromRemote.close_all_devices)
  if (_internal_has_close_all_devices()) {
    clear_has_command();
      ::CHIDMessageFromRemote_CloseAllDevices* temp = command_.close_all_devices_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.close_all_devices_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CHIDMessageFromRemote_CloseAllDevices& CHIDMessageFromRemote::_internal_close_all_devices() const {
  return _internal_has_close_all_devices()
      ? *command_.close_all_devices_
      : reinterpret_cast< ::CHIDMessageFromRemote_CloseAllDevices&>(::_CHIDMessageFromRemote_CloseAllDevices_default_instance_);
}
inline const ::CHIDMessageFromRemote_CloseAllDevices& CHIDMessageFromRemote::close_all_devices() const {
  // @@protoc_insertion_point(field_get:CHIDMessageFromRemote.close_all_devices)
  return _internal_close_all_devices();
}
inline ::CHIDMessageFromRemote_CloseAllDevices* CHIDMessageFromRemote::unsafe_arena_release_close_all_devices() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CHIDMessageFromRemote.close_all_devices)
  if (_internal_has_close_all_devices()) {
    clear_has_command();
    ::CHIDMessageFromRemote_CloseAllDevices* temp = command_.close_all_devices_;
    command_.close_all_devices_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CHIDMessageFromRemote::unsafe_arena_set_allocated_close_all_devices(::CHIDMessageFromRemote_CloseAllDevices* close_all_devices) {
  clear_command();
  if (close_all_devices) {
    set_has_close_all_devices();
    command_.close_all_devices_ = close_all_devices;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CHIDMessageFromRemote.close_all_devices)
}
inline ::CHIDMessageFromRemote_CloseAllDevices* CHIDMessageFromRemote::_internal_mutable_close_all_devices() {
  if (!_internal_has_close_all_devices()) {
    clear_command();
    set_has_close_all_devices();
    command_.close_all_devices_ = CreateMaybeMessage< ::CHIDMessageFromRemote_CloseAllDevices >(GetArenaForAllocation());
  }
  return command_.close_all_devices_;
}
inline ::CHIDMessageFromRemote_CloseAllDevices* CHIDMessageFromRemote::mutable_close_all_devices() {
  ::CHIDMessageFromRemote_CloseAllDevices* _msg = _internal_mutable_close_all_devices();
  // @@protoc_insertion_point(field_mutable:CHIDMessageFromRemote.close_all_devices)
  return _msg;
}

inline bool CHIDMessageFromRemote::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void CHIDMessageFromRemote::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline CHIDMessageFromRemote::CommandCase CHIDMessageFromRemote::command_case() const {
  return CHIDMessageFromRemote::CommandCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EHIDDeviceLocation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EHIDDeviceLocation>() {
  return ::EHIDDeviceLocation_descriptor();
}
template <> struct is_proto_enum< ::EHIDDeviceDisconnectMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EHIDDeviceDisconnectMethod>() {
  return ::EHIDDeviceDisconnectMethod_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fhiddevices_2eproto
