// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content_manifest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_content_5fmanifest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_content_5fmanifest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_content_5fmanifest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_content_5fmanifest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_content_5fmanifest_2eproto;
class ContentDeltaChunks;
struct ContentDeltaChunksDefaultTypeInternal;
extern ContentDeltaChunksDefaultTypeInternal _ContentDeltaChunks_default_instance_;
class ContentDeltaChunks_DeltaChunk;
struct ContentDeltaChunks_DeltaChunkDefaultTypeInternal;
extern ContentDeltaChunks_DeltaChunkDefaultTypeInternal _ContentDeltaChunks_DeltaChunk_default_instance_;
class ContentManifestMetadata;
struct ContentManifestMetadataDefaultTypeInternal;
extern ContentManifestMetadataDefaultTypeInternal _ContentManifestMetadata_default_instance_;
class ContentManifestPayload;
struct ContentManifestPayloadDefaultTypeInternal;
extern ContentManifestPayloadDefaultTypeInternal _ContentManifestPayload_default_instance_;
class ContentManifestPayload_FileMapping;
struct ContentManifestPayload_FileMappingDefaultTypeInternal;
extern ContentManifestPayload_FileMappingDefaultTypeInternal _ContentManifestPayload_FileMapping_default_instance_;
class ContentManifestPayload_FileMapping_ChunkData;
struct ContentManifestPayload_FileMapping_ChunkDataDefaultTypeInternal;
extern ContentManifestPayload_FileMapping_ChunkDataDefaultTypeInternal _ContentManifestPayload_FileMapping_ChunkData_default_instance_;
class ContentManifestSignature;
struct ContentManifestSignatureDefaultTypeInternal;
extern ContentManifestSignatureDefaultTypeInternal _ContentManifestSignature_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ContentDeltaChunks* Arena::CreateMaybeMessage<::ContentDeltaChunks>(Arena*);
template<> ::ContentDeltaChunks_DeltaChunk* Arena::CreateMaybeMessage<::ContentDeltaChunks_DeltaChunk>(Arena*);
template<> ::ContentManifestMetadata* Arena::CreateMaybeMessage<::ContentManifestMetadata>(Arena*);
template<> ::ContentManifestPayload* Arena::CreateMaybeMessage<::ContentManifestPayload>(Arena*);
template<> ::ContentManifestPayload_FileMapping* Arena::CreateMaybeMessage<::ContentManifestPayload_FileMapping>(Arena*);
template<> ::ContentManifestPayload_FileMapping_ChunkData* Arena::CreateMaybeMessage<::ContentManifestPayload_FileMapping_ChunkData>(Arena*);
template<> ::ContentManifestSignature* Arena::CreateMaybeMessage<::ContentManifestSignature>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EContentDeltaChunkDataLocation : int {
  k_EContentDeltaChunkDataLocationInProtobuf = 0,
  k_EContentDeltaChunkDataLocationAfterProtobuf = 1
};
bool EContentDeltaChunkDataLocation_IsValid(int value);
constexpr EContentDeltaChunkDataLocation EContentDeltaChunkDataLocation_MIN = k_EContentDeltaChunkDataLocationInProtobuf;
constexpr EContentDeltaChunkDataLocation EContentDeltaChunkDataLocation_MAX = k_EContentDeltaChunkDataLocationAfterProtobuf;
constexpr int EContentDeltaChunkDataLocation_ARRAYSIZE = EContentDeltaChunkDataLocation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EContentDeltaChunkDataLocation_descriptor();
template<typename T>
inline const std::string& EContentDeltaChunkDataLocation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EContentDeltaChunkDataLocation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EContentDeltaChunkDataLocation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EContentDeltaChunkDataLocation_descriptor(), enum_t_value);
}
inline bool EContentDeltaChunkDataLocation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EContentDeltaChunkDataLocation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EContentDeltaChunkDataLocation>(
    EContentDeltaChunkDataLocation_descriptor(), name, value);
}
// ===================================================================

class ContentManifestPayload_FileMapping_ChunkData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContentManifestPayload.FileMapping.ChunkData) */ {
 public:
  inline ContentManifestPayload_FileMapping_ChunkData() : ContentManifestPayload_FileMapping_ChunkData(nullptr) {}
  ~ContentManifestPayload_FileMapping_ChunkData() override;
  explicit constexpr ContentManifestPayload_FileMapping_ChunkData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentManifestPayload_FileMapping_ChunkData(const ContentManifestPayload_FileMapping_ChunkData& from);
  ContentManifestPayload_FileMapping_ChunkData(ContentManifestPayload_FileMapping_ChunkData&& from) noexcept
    : ContentManifestPayload_FileMapping_ChunkData() {
    *this = ::std::move(from);
  }

  inline ContentManifestPayload_FileMapping_ChunkData& operator=(const ContentManifestPayload_FileMapping_ChunkData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentManifestPayload_FileMapping_ChunkData& operator=(ContentManifestPayload_FileMapping_ChunkData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContentManifestPayload_FileMapping_ChunkData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentManifestPayload_FileMapping_ChunkData* internal_default_instance() {
    return reinterpret_cast<const ContentManifestPayload_FileMapping_ChunkData*>(
               &_ContentManifestPayload_FileMapping_ChunkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContentManifestPayload_FileMapping_ChunkData& a, ContentManifestPayload_FileMapping_ChunkData& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentManifestPayload_FileMapping_ChunkData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentManifestPayload_FileMapping_ChunkData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentManifestPayload_FileMapping_ChunkData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentManifestPayload_FileMapping_ChunkData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContentManifestPayload_FileMapping_ChunkData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContentManifestPayload_FileMapping_ChunkData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentManifestPayload_FileMapping_ChunkData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContentManifestPayload.FileMapping.ChunkData";
  }
  protected:
  explicit ContentManifestPayload_FileMapping_ChunkData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFieldNumber = 1,
    kOffsetFieldNumber = 3,
    kCrcFieldNumber = 2,
    kCbOriginalFieldNumber = 4,
    kCbCompressedFieldNumber = 5,
  };
  // optional bytes sha = 1;
  bool has_sha() const;
  private:
  bool _internal_has_sha() const;
  public:
  void clear_sha();
  const std::string& sha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha();
  PROTOBUF_NODISCARD std::string* release_sha();
  void set_allocated_sha(std::string* sha);
  private:
  const std::string& _internal_sha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha(const std::string& value);
  std::string* _internal_mutable_sha();
  public:

  // optional uint64 offset = 3;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // optional fixed32 crc = 2;
  bool has_crc() const;
  private:
  bool _internal_has_crc() const;
  public:
  void clear_crc();
  uint32_t crc() const;
  void set_crc(uint32_t value);
  private:
  uint32_t _internal_crc() const;
  void _internal_set_crc(uint32_t value);
  public:

  // optional uint32 cb_original = 4;
  bool has_cb_original() const;
  private:
  bool _internal_has_cb_original() const;
  public:
  void clear_cb_original();
  uint32_t cb_original() const;
  void set_cb_original(uint32_t value);
  private:
  uint32_t _internal_cb_original() const;
  void _internal_set_cb_original(uint32_t value);
  public:

  // optional uint32 cb_compressed = 5;
  bool has_cb_compressed() const;
  private:
  bool _internal_has_cb_compressed() const;
  public:
  void clear_cb_compressed();
  uint32_t cb_compressed() const;
  void set_cb_compressed(uint32_t value);
  private:
  uint32_t _internal_cb_compressed() const;
  void _internal_set_cb_compressed(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ContentManifestPayload.FileMapping.ChunkData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_;
  uint64_t offset_;
  uint32_t crc_;
  uint32_t cb_original_;
  uint32_t cb_compressed_;
  friend struct ::TableStruct_content_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class ContentManifestPayload_FileMapping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContentManifestPayload.FileMapping) */ {
 public:
  inline ContentManifestPayload_FileMapping() : ContentManifestPayload_FileMapping(nullptr) {}
  ~ContentManifestPayload_FileMapping() override;
  explicit constexpr ContentManifestPayload_FileMapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentManifestPayload_FileMapping(const ContentManifestPayload_FileMapping& from);
  ContentManifestPayload_FileMapping(ContentManifestPayload_FileMapping&& from) noexcept
    : ContentManifestPayload_FileMapping() {
    *this = ::std::move(from);
  }

  inline ContentManifestPayload_FileMapping& operator=(const ContentManifestPayload_FileMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentManifestPayload_FileMapping& operator=(ContentManifestPayload_FileMapping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContentManifestPayload_FileMapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentManifestPayload_FileMapping* internal_default_instance() {
    return reinterpret_cast<const ContentManifestPayload_FileMapping*>(
               &_ContentManifestPayload_FileMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContentManifestPayload_FileMapping& a, ContentManifestPayload_FileMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentManifestPayload_FileMapping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentManifestPayload_FileMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentManifestPayload_FileMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentManifestPayload_FileMapping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContentManifestPayload_FileMapping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContentManifestPayload_FileMapping& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentManifestPayload_FileMapping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContentManifestPayload.FileMapping";
  }
  protected:
  explicit ContentManifestPayload_FileMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ContentManifestPayload_FileMapping_ChunkData ChunkData;

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 6,
    kFilenameFieldNumber = 1,
    kShaFilenameFieldNumber = 4,
    kShaContentFieldNumber = 5,
    kLinktargetFieldNumber = 7,
    kSizeFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // repeated .ContentManifestPayload.FileMapping.ChunkData chunks = 6;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::ContentManifestPayload_FileMapping_ChunkData* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContentManifestPayload_FileMapping_ChunkData >*
      mutable_chunks();
  private:
  const ::ContentManifestPayload_FileMapping_ChunkData& _internal_chunks(int index) const;
  ::ContentManifestPayload_FileMapping_ChunkData* _internal_add_chunks();
  public:
  const ::ContentManifestPayload_FileMapping_ChunkData& chunks(int index) const;
  ::ContentManifestPayload_FileMapping_ChunkData* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContentManifestPayload_FileMapping_ChunkData >&
      chunks() const;

  // optional string filename = 1;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional bytes sha_filename = 4;
  bool has_sha_filename() const;
  private:
  bool _internal_has_sha_filename() const;
  public:
  void clear_sha_filename();
  const std::string& sha_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_filename();
  PROTOBUF_NODISCARD std::string* release_sha_filename();
  void set_allocated_sha_filename(std::string* sha_filename);
  private:
  const std::string& _internal_sha_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_filename(const std::string& value);
  std::string* _internal_mutable_sha_filename();
  public:

  // optional bytes sha_content = 5;
  bool has_sha_content() const;
  private:
  bool _internal_has_sha_content() const;
  public:
  void clear_sha_content();
  const std::string& sha_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_content();
  PROTOBUF_NODISCARD std::string* release_sha_content();
  void set_allocated_sha_content(std::string* sha_content);
  private:
  const std::string& _internal_sha_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_content(const std::string& value);
  std::string* _internal_mutable_sha_content();
  public:

  // optional string linktarget = 7;
  bool has_linktarget() const;
  private:
  bool _internal_has_linktarget() const;
  public:
  void clear_linktarget();
  const std::string& linktarget() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_linktarget(ArgT0&& arg0, ArgT... args);
  std::string* mutable_linktarget();
  PROTOBUF_NODISCARD std::string* release_linktarget();
  void set_allocated_linktarget(std::string* linktarget);
  private:
  const std::string& _internal_linktarget() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_linktarget(const std::string& value);
  std::string* _internal_mutable_linktarget();
  public:

  // optional uint64 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // optional uint32 flags = 3;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ContentManifestPayload.FileMapping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContentManifestPayload_FileMapping_ChunkData > chunks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr linktarget_;
  uint64_t size_;
  uint32_t flags_;
  friend struct ::TableStruct_content_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class ContentManifestPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContentManifestPayload) */ {
 public:
  inline ContentManifestPayload() : ContentManifestPayload(nullptr) {}
  ~ContentManifestPayload() override;
  explicit constexpr ContentManifestPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentManifestPayload(const ContentManifestPayload& from);
  ContentManifestPayload(ContentManifestPayload&& from) noexcept
    : ContentManifestPayload() {
    *this = ::std::move(from);
  }

  inline ContentManifestPayload& operator=(const ContentManifestPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentManifestPayload& operator=(ContentManifestPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContentManifestPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentManifestPayload* internal_default_instance() {
    return reinterpret_cast<const ContentManifestPayload*>(
               &_ContentManifestPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContentManifestPayload& a, ContentManifestPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentManifestPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentManifestPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentManifestPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentManifestPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContentManifestPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContentManifestPayload& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentManifestPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContentManifestPayload";
  }
  protected:
  explicit ContentManifestPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ContentManifestPayload_FileMapping FileMapping;

  // accessors -------------------------------------------------------

  enum : int {
    kMappingsFieldNumber = 1,
  };
  // repeated .ContentManifestPayload.FileMapping mappings = 1;
  int mappings_size() const;
  private:
  int _internal_mappings_size() const;
  public:
  void clear_mappings();
  ::ContentManifestPayload_FileMapping* mutable_mappings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContentManifestPayload_FileMapping >*
      mutable_mappings();
  private:
  const ::ContentManifestPayload_FileMapping& _internal_mappings(int index) const;
  ::ContentManifestPayload_FileMapping* _internal_add_mappings();
  public:
  const ::ContentManifestPayload_FileMapping& mappings(int index) const;
  ::ContentManifestPayload_FileMapping* add_mappings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContentManifestPayload_FileMapping >&
      mappings() const;

  // @@protoc_insertion_point(class_scope:ContentManifestPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContentManifestPayload_FileMapping > mappings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_content_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class ContentManifestMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContentManifestMetadata) */ {
 public:
  inline ContentManifestMetadata() : ContentManifestMetadata(nullptr) {}
  ~ContentManifestMetadata() override;
  explicit constexpr ContentManifestMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentManifestMetadata(const ContentManifestMetadata& from);
  ContentManifestMetadata(ContentManifestMetadata&& from) noexcept
    : ContentManifestMetadata() {
    *this = ::std::move(from);
  }

  inline ContentManifestMetadata& operator=(const ContentManifestMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentManifestMetadata& operator=(ContentManifestMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContentManifestMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentManifestMetadata* internal_default_instance() {
    return reinterpret_cast<const ContentManifestMetadata*>(
               &_ContentManifestMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ContentManifestMetadata& a, ContentManifestMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentManifestMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentManifestMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentManifestMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentManifestMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContentManifestMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContentManifestMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentManifestMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContentManifestMetadata";
  }
  protected:
  explicit ContentManifestMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGidManifestFieldNumber = 2,
    kDepotIdFieldNumber = 1,
    kCreationTimeFieldNumber = 3,
    kCbDiskOriginalFieldNumber = 5,
    kFilenamesEncryptedFieldNumber = 4,
    kUniqueChunksFieldNumber = 7,
    kCbDiskCompressedFieldNumber = 6,
    kCrcEncryptedFieldNumber = 8,
    kCrcClearFieldNumber = 9,
  };
  // optional uint64 gid_manifest = 2;
  bool has_gid_manifest() const;
  private:
  bool _internal_has_gid_manifest() const;
  public:
  void clear_gid_manifest();
  uint64_t gid_manifest() const;
  void set_gid_manifest(uint64_t value);
  private:
  uint64_t _internal_gid_manifest() const;
  void _internal_set_gid_manifest(uint64_t value);
  public:

  // optional uint32 depot_id = 1;
  bool has_depot_id() const;
  private:
  bool _internal_has_depot_id() const;
  public:
  void clear_depot_id();
  uint32_t depot_id() const;
  void set_depot_id(uint32_t value);
  private:
  uint32_t _internal_depot_id() const;
  void _internal_set_depot_id(uint32_t value);
  public:

  // optional uint32 creation_time = 3;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  uint32_t creation_time() const;
  void set_creation_time(uint32_t value);
  private:
  uint32_t _internal_creation_time() const;
  void _internal_set_creation_time(uint32_t value);
  public:

  // optional uint64 cb_disk_original = 5;
  bool has_cb_disk_original() const;
  private:
  bool _internal_has_cb_disk_original() const;
  public:
  void clear_cb_disk_original();
  uint64_t cb_disk_original() const;
  void set_cb_disk_original(uint64_t value);
  private:
  uint64_t _internal_cb_disk_original() const;
  void _internal_set_cb_disk_original(uint64_t value);
  public:

  // optional bool filenames_encrypted = 4;
  bool has_filenames_encrypted() const;
  private:
  bool _internal_has_filenames_encrypted() const;
  public:
  void clear_filenames_encrypted();
  bool filenames_encrypted() const;
  void set_filenames_encrypted(bool value);
  private:
  bool _internal_filenames_encrypted() const;
  void _internal_set_filenames_encrypted(bool value);
  public:

  // optional uint32 unique_chunks = 7;
  bool has_unique_chunks() const;
  private:
  bool _internal_has_unique_chunks() const;
  public:
  void clear_unique_chunks();
  uint32_t unique_chunks() const;
  void set_unique_chunks(uint32_t value);
  private:
  uint32_t _internal_unique_chunks() const;
  void _internal_set_unique_chunks(uint32_t value);
  public:

  // optional uint64 cb_disk_compressed = 6;
  bool has_cb_disk_compressed() const;
  private:
  bool _internal_has_cb_disk_compressed() const;
  public:
  void clear_cb_disk_compressed();
  uint64_t cb_disk_compressed() const;
  void set_cb_disk_compressed(uint64_t value);
  private:
  uint64_t _internal_cb_disk_compressed() const;
  void _internal_set_cb_disk_compressed(uint64_t value);
  public:

  // optional uint32 crc_encrypted = 8;
  bool has_crc_encrypted() const;
  private:
  bool _internal_has_crc_encrypted() const;
  public:
  void clear_crc_encrypted();
  uint32_t crc_encrypted() const;
  void set_crc_encrypted(uint32_t value);
  private:
  uint32_t _internal_crc_encrypted() const;
  void _internal_set_crc_encrypted(uint32_t value);
  public:

  // optional uint32 crc_clear = 9;
  bool has_crc_clear() const;
  private:
  bool _internal_has_crc_clear() const;
  public:
  void clear_crc_clear();
  uint32_t crc_clear() const;
  void set_crc_clear(uint32_t value);
  private:
  uint32_t _internal_crc_clear() const;
  void _internal_set_crc_clear(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ContentManifestMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t gid_manifest_;
  uint32_t depot_id_;
  uint32_t creation_time_;
  uint64_t cb_disk_original_;
  bool filenames_encrypted_;
  uint32_t unique_chunks_;
  uint64_t cb_disk_compressed_;
  uint32_t crc_encrypted_;
  uint32_t crc_clear_;
  friend struct ::TableStruct_content_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class ContentManifestSignature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContentManifestSignature) */ {
 public:
  inline ContentManifestSignature() : ContentManifestSignature(nullptr) {}
  ~ContentManifestSignature() override;
  explicit constexpr ContentManifestSignature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentManifestSignature(const ContentManifestSignature& from);
  ContentManifestSignature(ContentManifestSignature&& from) noexcept
    : ContentManifestSignature() {
    *this = ::std::move(from);
  }

  inline ContentManifestSignature& operator=(const ContentManifestSignature& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentManifestSignature& operator=(ContentManifestSignature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContentManifestSignature& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentManifestSignature* internal_default_instance() {
    return reinterpret_cast<const ContentManifestSignature*>(
               &_ContentManifestSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ContentManifestSignature& a, ContentManifestSignature& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentManifestSignature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentManifestSignature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentManifestSignature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentManifestSignature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContentManifestSignature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContentManifestSignature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentManifestSignature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContentManifestSignature";
  }
  protected:
  explicit ContentManifestSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
  };
  // optional bytes signature = 1;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:ContentManifestSignature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  friend struct ::TableStruct_content_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class ContentDeltaChunks_DeltaChunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContentDeltaChunks.DeltaChunk) */ {
 public:
  inline ContentDeltaChunks_DeltaChunk() : ContentDeltaChunks_DeltaChunk(nullptr) {}
  ~ContentDeltaChunks_DeltaChunk() override;
  explicit constexpr ContentDeltaChunks_DeltaChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentDeltaChunks_DeltaChunk(const ContentDeltaChunks_DeltaChunk& from);
  ContentDeltaChunks_DeltaChunk(ContentDeltaChunks_DeltaChunk&& from) noexcept
    : ContentDeltaChunks_DeltaChunk() {
    *this = ::std::move(from);
  }

  inline ContentDeltaChunks_DeltaChunk& operator=(const ContentDeltaChunks_DeltaChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentDeltaChunks_DeltaChunk& operator=(ContentDeltaChunks_DeltaChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContentDeltaChunks_DeltaChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentDeltaChunks_DeltaChunk* internal_default_instance() {
    return reinterpret_cast<const ContentDeltaChunks_DeltaChunk*>(
               &_ContentDeltaChunks_DeltaChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ContentDeltaChunks_DeltaChunk& a, ContentDeltaChunks_DeltaChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentDeltaChunks_DeltaChunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentDeltaChunks_DeltaChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentDeltaChunks_DeltaChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentDeltaChunks_DeltaChunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContentDeltaChunks_DeltaChunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContentDeltaChunks_DeltaChunk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentDeltaChunks_DeltaChunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContentDeltaChunks.DeltaChunk";
  }
  protected:
  explicit ContentDeltaChunks_DeltaChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaSourceFieldNumber = 1,
    kShaTargetFieldNumber = 2,
    kChunkFieldNumber = 5,
    kSizeOriginalFieldNumber = 3,
    kPatchMethodFieldNumber = 4,
    kSizeDeltaFieldNumber = 6,
  };
  // optional bytes sha_source = 1;
  bool has_sha_source() const;
  private:
  bool _internal_has_sha_source() const;
  public:
  void clear_sha_source();
  const std::string& sha_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_source();
  PROTOBUF_NODISCARD std::string* release_sha_source();
  void set_allocated_sha_source(std::string* sha_source);
  private:
  const std::string& _internal_sha_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_source(const std::string& value);
  std::string* _internal_mutable_sha_source();
  public:

  // optional bytes sha_target = 2;
  bool has_sha_target() const;
  private:
  bool _internal_has_sha_target() const;
  public:
  void clear_sha_target();
  const std::string& sha_target() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha_target(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha_target();
  PROTOBUF_NODISCARD std::string* release_sha_target();
  void set_allocated_sha_target(std::string* sha_target);
  private:
  const std::string& _internal_sha_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha_target(const std::string& value);
  std::string* _internal_mutable_sha_target();
  public:

  // optional bytes chunk = 5;
  bool has_chunk() const;
  private:
  bool _internal_has_chunk() const;
  public:
  void clear_chunk();
  const std::string& chunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chunk();
  PROTOBUF_NODISCARD std::string* release_chunk();
  void set_allocated_chunk(std::string* chunk);
  private:
  const std::string& _internal_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk(const std::string& value);
  std::string* _internal_mutable_chunk();
  public:

  // optional uint32 size_original = 3;
  bool has_size_original() const;
  private:
  bool _internal_has_size_original() const;
  public:
  void clear_size_original();
  uint32_t size_original() const;
  void set_size_original(uint32_t value);
  private:
  uint32_t _internal_size_original() const;
  void _internal_set_size_original(uint32_t value);
  public:

  // optional uint32 patch_method = 4;
  bool has_patch_method() const;
  private:
  bool _internal_has_patch_method() const;
  public:
  void clear_patch_method();
  uint32_t patch_method() const;
  void set_patch_method(uint32_t value);
  private:
  uint32_t _internal_patch_method() const;
  void _internal_set_patch_method(uint32_t value);
  public:

  // optional uint32 size_delta = 6;
  bool has_size_delta() const;
  private:
  bool _internal_has_size_delta() const;
  public:
  void clear_size_delta();
  uint32_t size_delta() const;
  void set_size_delta(uint32_t value);
  private:
  uint32_t _internal_size_delta() const;
  void _internal_set_size_delta(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ContentDeltaChunks.DeltaChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_;
  uint32_t size_original_;
  uint32_t patch_method_;
  uint32_t size_delta_;
  friend struct ::TableStruct_content_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class ContentDeltaChunks final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContentDeltaChunks) */ {
 public:
  inline ContentDeltaChunks() : ContentDeltaChunks(nullptr) {}
  ~ContentDeltaChunks() override;
  explicit constexpr ContentDeltaChunks(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentDeltaChunks(const ContentDeltaChunks& from);
  ContentDeltaChunks(ContentDeltaChunks&& from) noexcept
    : ContentDeltaChunks() {
    *this = ::std::move(from);
  }

  inline ContentDeltaChunks& operator=(const ContentDeltaChunks& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentDeltaChunks& operator=(ContentDeltaChunks&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContentDeltaChunks& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentDeltaChunks* internal_default_instance() {
    return reinterpret_cast<const ContentDeltaChunks*>(
               &_ContentDeltaChunks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ContentDeltaChunks& a, ContentDeltaChunks& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentDeltaChunks* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentDeltaChunks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentDeltaChunks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentDeltaChunks>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContentDeltaChunks& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContentDeltaChunks& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentDeltaChunks* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContentDeltaChunks";
  }
  protected:
  explicit ContentDeltaChunks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ContentDeltaChunks_DeltaChunk DeltaChunk;

  // accessors -------------------------------------------------------

  enum : int {
    kDeltaChunksFieldNumber = 4,
    kManifestIdSourceFieldNumber = 2,
    kManifestIdTargetFieldNumber = 3,
    kDepotIdFieldNumber = 1,
    kChunkDataLocationFieldNumber = 5,
  };
  // repeated .ContentDeltaChunks.DeltaChunk deltaChunks = 4;
  int deltachunks_size() const;
  private:
  int _internal_deltachunks_size() const;
  public:
  void clear_deltachunks();
  ::ContentDeltaChunks_DeltaChunk* mutable_deltachunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContentDeltaChunks_DeltaChunk >*
      mutable_deltachunks();
  private:
  const ::ContentDeltaChunks_DeltaChunk& _internal_deltachunks(int index) const;
  ::ContentDeltaChunks_DeltaChunk* _internal_add_deltachunks();
  public:
  const ::ContentDeltaChunks_DeltaChunk& deltachunks(int index) const;
  ::ContentDeltaChunks_DeltaChunk* add_deltachunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContentDeltaChunks_DeltaChunk >&
      deltachunks() const;

  // optional uint64 manifest_id_source = 2;
  bool has_manifest_id_source() const;
  private:
  bool _internal_has_manifest_id_source() const;
  public:
  void clear_manifest_id_source();
  uint64_t manifest_id_source() const;
  void set_manifest_id_source(uint64_t value);
  private:
  uint64_t _internal_manifest_id_source() const;
  void _internal_set_manifest_id_source(uint64_t value);
  public:

  // optional uint64 manifest_id_target = 3;
  bool has_manifest_id_target() const;
  private:
  bool _internal_has_manifest_id_target() const;
  public:
  void clear_manifest_id_target();
  uint64_t manifest_id_target() const;
  void set_manifest_id_target(uint64_t value);
  private:
  uint64_t _internal_manifest_id_target() const;
  void _internal_set_manifest_id_target(uint64_t value);
  public:

  // optional uint32 depot_id = 1;
  bool has_depot_id() const;
  private:
  bool _internal_has_depot_id() const;
  public:
  void clear_depot_id();
  uint32_t depot_id() const;
  void set_depot_id(uint32_t value);
  private:
  uint32_t _internal_depot_id() const;
  void _internal_set_depot_id(uint32_t value);
  public:

  // optional .EContentDeltaChunkDataLocation chunk_data_location = 5 [default = k_EContentDeltaChunkDataLocationInProtobuf];
  bool has_chunk_data_location() const;
  private:
  bool _internal_has_chunk_data_location() const;
  public:
  void clear_chunk_data_location();
  ::EContentDeltaChunkDataLocation chunk_data_location() const;
  void set_chunk_data_location(::EContentDeltaChunkDataLocation value);
  private:
  ::EContentDeltaChunkDataLocation _internal_chunk_data_location() const;
  void _internal_set_chunk_data_location(::EContentDeltaChunkDataLocation value);
  public:

  // @@protoc_insertion_point(class_scope:ContentDeltaChunks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContentDeltaChunks_DeltaChunk > deltachunks_;
  uint64_t manifest_id_source_;
  uint64_t manifest_id_target_;
  uint32_t depot_id_;
  int chunk_data_location_;
  friend struct ::TableStruct_content_5fmanifest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContentManifestPayload_FileMapping_ChunkData

// optional bytes sha = 1;
inline bool ContentManifestPayload_FileMapping_ChunkData::_internal_has_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentManifestPayload_FileMapping_ChunkData::has_sha() const {
  return _internal_has_sha();
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_sha() {
  sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentManifestPayload_FileMapping_ChunkData::sha() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.ChunkData.sha)
  return _internal_sha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentManifestPayload_FileMapping_ChunkData::set_sha(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.ChunkData.sha)
}
inline std::string* ContentManifestPayload_FileMapping_ChunkData::mutable_sha() {
  std::string* _s = _internal_mutable_sha();
  // @@protoc_insertion_point(field_mutable:ContentManifestPayload.FileMapping.ChunkData.sha)
  return _s;
}
inline const std::string& ContentManifestPayload_FileMapping_ChunkData::_internal_sha() const {
  return sha_.Get();
}
inline void ContentManifestPayload_FileMapping_ChunkData::_internal_set_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContentManifestPayload_FileMapping_ChunkData::_internal_mutable_sha() {
  _has_bits_[0] |= 0x00000001u;
  return sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContentManifestPayload_FileMapping_ChunkData::release_sha() {
  // @@protoc_insertion_point(field_release:ContentManifestPayload.FileMapping.ChunkData.sha)
  if (!_internal_has_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_allocated_sha(std::string* sha) {
  if (sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ContentManifestPayload.FileMapping.ChunkData.sha)
}

// optional fixed32 crc = 2;
inline bool ContentManifestPayload_FileMapping_ChunkData::_internal_has_crc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentManifestPayload_FileMapping_ChunkData::has_crc() const {
  return _internal_has_crc();
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_crc() {
  crc_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ContentManifestPayload_FileMapping_ChunkData::_internal_crc() const {
  return crc_;
}
inline uint32_t ContentManifestPayload_FileMapping_ChunkData::crc() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.ChunkData.crc)
  return _internal_crc();
}
inline void ContentManifestPayload_FileMapping_ChunkData::_internal_set_crc(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  crc_ = value;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_crc(uint32_t value) {
  _internal_set_crc(value);
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.ChunkData.crc)
}

// optional uint64 offset = 3;
inline bool ContentManifestPayload_FileMapping_ChunkData::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentManifestPayload_FileMapping_ChunkData::has_offset() const {
  return _internal_has_offset();
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_offset() {
  offset_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ContentManifestPayload_FileMapping_ChunkData::_internal_offset() const {
  return offset_;
}
inline uint64_t ContentManifestPayload_FileMapping_ChunkData::offset() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.ChunkData.offset)
  return _internal_offset();
}
inline void ContentManifestPayload_FileMapping_ChunkData::_internal_set_offset(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  offset_ = value;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.ChunkData.offset)
}

// optional uint32 cb_original = 4;
inline bool ContentManifestPayload_FileMapping_ChunkData::_internal_has_cb_original() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContentManifestPayload_FileMapping_ChunkData::has_cb_original() const {
  return _internal_has_cb_original();
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_cb_original() {
  cb_original_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ContentManifestPayload_FileMapping_ChunkData::_internal_cb_original() const {
  return cb_original_;
}
inline uint32_t ContentManifestPayload_FileMapping_ChunkData::cb_original() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.ChunkData.cb_original)
  return _internal_cb_original();
}
inline void ContentManifestPayload_FileMapping_ChunkData::_internal_set_cb_original(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  cb_original_ = value;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_cb_original(uint32_t value) {
  _internal_set_cb_original(value);
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.ChunkData.cb_original)
}

// optional uint32 cb_compressed = 5;
inline bool ContentManifestPayload_FileMapping_ChunkData::_internal_has_cb_compressed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ContentManifestPayload_FileMapping_ChunkData::has_cb_compressed() const {
  return _internal_has_cb_compressed();
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_cb_compressed() {
  cb_compressed_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ContentManifestPayload_FileMapping_ChunkData::_internal_cb_compressed() const {
  return cb_compressed_;
}
inline uint32_t ContentManifestPayload_FileMapping_ChunkData::cb_compressed() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.ChunkData.cb_compressed)
  return _internal_cb_compressed();
}
inline void ContentManifestPayload_FileMapping_ChunkData::_internal_set_cb_compressed(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  cb_compressed_ = value;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_cb_compressed(uint32_t value) {
  _internal_set_cb_compressed(value);
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.ChunkData.cb_compressed)
}

// -------------------------------------------------------------------

// ContentManifestPayload_FileMapping

// optional string filename = 1;
inline bool ContentManifestPayload_FileMapping::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentManifestPayload_FileMapping::has_filename() const {
  return _internal_has_filename();
}
inline void ContentManifestPayload_FileMapping::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentManifestPayload_FileMapping::filename() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentManifestPayload_FileMapping::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.filename)
}
inline std::string* ContentManifestPayload_FileMapping::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:ContentManifestPayload.FileMapping.filename)
  return _s;
}
inline const std::string& ContentManifestPayload_FileMapping::_internal_filename() const {
  return filename_.Get();
}
inline void ContentManifestPayload_FileMapping::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContentManifestPayload_FileMapping::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContentManifestPayload_FileMapping::release_filename() {
  // @@protoc_insertion_point(field_release:ContentManifestPayload.FileMapping.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentManifestPayload_FileMapping::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ContentManifestPayload.FileMapping.filename)
}

// optional uint64 size = 2;
inline bool ContentManifestPayload_FileMapping::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ContentManifestPayload_FileMapping::has_size() const {
  return _internal_has_size();
}
inline void ContentManifestPayload_FileMapping::clear_size() {
  size_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t ContentManifestPayload_FileMapping::_internal_size() const {
  return size_;
}
inline uint64_t ContentManifestPayload_FileMapping::size() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.size)
  return _internal_size();
}
inline void ContentManifestPayload_FileMapping::_internal_set_size(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  size_ = value;
}
inline void ContentManifestPayload_FileMapping::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.size)
}

// optional uint32 flags = 3;
inline bool ContentManifestPayload_FileMapping::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ContentManifestPayload_FileMapping::has_flags() const {
  return _internal_has_flags();
}
inline void ContentManifestPayload_FileMapping::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t ContentManifestPayload_FileMapping::_internal_flags() const {
  return flags_;
}
inline uint32_t ContentManifestPayload_FileMapping::flags() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.flags)
  return _internal_flags();
}
inline void ContentManifestPayload_FileMapping::_internal_set_flags(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  flags_ = value;
}
inline void ContentManifestPayload_FileMapping::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.flags)
}

// optional bytes sha_filename = 4;
inline bool ContentManifestPayload_FileMapping::_internal_has_sha_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentManifestPayload_FileMapping::has_sha_filename() const {
  return _internal_has_sha_filename();
}
inline void ContentManifestPayload_FileMapping::clear_sha_filename() {
  sha_filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentManifestPayload_FileMapping::sha_filename() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.sha_filename)
  return _internal_sha_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentManifestPayload_FileMapping::set_sha_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sha_filename_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.sha_filename)
}
inline std::string* ContentManifestPayload_FileMapping::mutable_sha_filename() {
  std::string* _s = _internal_mutable_sha_filename();
  // @@protoc_insertion_point(field_mutable:ContentManifestPayload.FileMapping.sha_filename)
  return _s;
}
inline const std::string& ContentManifestPayload_FileMapping::_internal_sha_filename() const {
  return sha_filename_.Get();
}
inline void ContentManifestPayload_FileMapping::_internal_set_sha_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContentManifestPayload_FileMapping::_internal_mutable_sha_filename() {
  _has_bits_[0] |= 0x00000002u;
  return sha_filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContentManifestPayload_FileMapping::release_sha_filename() {
  // @@protoc_insertion_point(field_release:ContentManifestPayload.FileMapping.sha_filename)
  if (!_internal_has_sha_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sha_filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentManifestPayload_FileMapping::set_allocated_sha_filename(std::string* sha_filename) {
  if (sha_filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sha_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ContentManifestPayload.FileMapping.sha_filename)
}

// optional bytes sha_content = 5;
inline bool ContentManifestPayload_FileMapping::_internal_has_sha_content() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentManifestPayload_FileMapping::has_sha_content() const {
  return _internal_has_sha_content();
}
inline void ContentManifestPayload_FileMapping::clear_sha_content() {
  sha_content_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ContentManifestPayload_FileMapping::sha_content() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.sha_content)
  return _internal_sha_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentManifestPayload_FileMapping::set_sha_content(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 sha_content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.sha_content)
}
inline std::string* ContentManifestPayload_FileMapping::mutable_sha_content() {
  std::string* _s = _internal_mutable_sha_content();
  // @@protoc_insertion_point(field_mutable:ContentManifestPayload.FileMapping.sha_content)
  return _s;
}
inline const std::string& ContentManifestPayload_FileMapping::_internal_sha_content() const {
  return sha_content_.Get();
}
inline void ContentManifestPayload_FileMapping::_internal_set_sha_content(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sha_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContentManifestPayload_FileMapping::_internal_mutable_sha_content() {
  _has_bits_[0] |= 0x00000004u;
  return sha_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContentManifestPayload_FileMapping::release_sha_content() {
  // @@protoc_insertion_point(field_release:ContentManifestPayload.FileMapping.sha_content)
  if (!_internal_has_sha_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = sha_content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentManifestPayload_FileMapping::set_allocated_sha_content(std::string* sha_content) {
  if (sha_content != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sha_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ContentManifestPayload.FileMapping.sha_content)
}

// repeated .ContentManifestPayload.FileMapping.ChunkData chunks = 6;
inline int ContentManifestPayload_FileMapping::_internal_chunks_size() const {
  return chunks_.size();
}
inline int ContentManifestPayload_FileMapping::chunks_size() const {
  return _internal_chunks_size();
}
inline void ContentManifestPayload_FileMapping::clear_chunks() {
  chunks_.Clear();
}
inline ::ContentManifestPayload_FileMapping_ChunkData* ContentManifestPayload_FileMapping::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:ContentManifestPayload.FileMapping.chunks)
  return chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContentManifestPayload_FileMapping_ChunkData >*
ContentManifestPayload_FileMapping::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:ContentManifestPayload.FileMapping.chunks)
  return &chunks_;
}
inline const ::ContentManifestPayload_FileMapping_ChunkData& ContentManifestPayload_FileMapping::_internal_chunks(int index) const {
  return chunks_.Get(index);
}
inline const ::ContentManifestPayload_FileMapping_ChunkData& ContentManifestPayload_FileMapping::chunks(int index) const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.chunks)
  return _internal_chunks(index);
}
inline ::ContentManifestPayload_FileMapping_ChunkData* ContentManifestPayload_FileMapping::_internal_add_chunks() {
  return chunks_.Add();
}
inline ::ContentManifestPayload_FileMapping_ChunkData* ContentManifestPayload_FileMapping::add_chunks() {
  ::ContentManifestPayload_FileMapping_ChunkData* _add = _internal_add_chunks();
  // @@protoc_insertion_point(field_add:ContentManifestPayload.FileMapping.chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContentManifestPayload_FileMapping_ChunkData >&
ContentManifestPayload_FileMapping::chunks() const {
  // @@protoc_insertion_point(field_list:ContentManifestPayload.FileMapping.chunks)
  return chunks_;
}

// optional string linktarget = 7;
inline bool ContentManifestPayload_FileMapping::_internal_has_linktarget() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContentManifestPayload_FileMapping::has_linktarget() const {
  return _internal_has_linktarget();
}
inline void ContentManifestPayload_FileMapping::clear_linktarget() {
  linktarget_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ContentManifestPayload_FileMapping::linktarget() const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.FileMapping.linktarget)
  return _internal_linktarget();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentManifestPayload_FileMapping::set_linktarget(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 linktarget_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ContentManifestPayload.FileMapping.linktarget)
}
inline std::string* ContentManifestPayload_FileMapping::mutable_linktarget() {
  std::string* _s = _internal_mutable_linktarget();
  // @@protoc_insertion_point(field_mutable:ContentManifestPayload.FileMapping.linktarget)
  return _s;
}
inline const std::string& ContentManifestPayload_FileMapping::_internal_linktarget() const {
  return linktarget_.Get();
}
inline void ContentManifestPayload_FileMapping::_internal_set_linktarget(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  linktarget_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContentManifestPayload_FileMapping::_internal_mutable_linktarget() {
  _has_bits_[0] |= 0x00000008u;
  return linktarget_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContentManifestPayload_FileMapping::release_linktarget() {
  // @@protoc_insertion_point(field_release:ContentManifestPayload.FileMapping.linktarget)
  if (!_internal_has_linktarget()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = linktarget_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (linktarget_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    linktarget_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentManifestPayload_FileMapping::set_allocated_linktarget(std::string* linktarget) {
  if (linktarget != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  linktarget_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), linktarget,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (linktarget_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    linktarget_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ContentManifestPayload.FileMapping.linktarget)
}

// -------------------------------------------------------------------

// ContentManifestPayload

// repeated .ContentManifestPayload.FileMapping mappings = 1;
inline int ContentManifestPayload::_internal_mappings_size() const {
  return mappings_.size();
}
inline int ContentManifestPayload::mappings_size() const {
  return _internal_mappings_size();
}
inline void ContentManifestPayload::clear_mappings() {
  mappings_.Clear();
}
inline ::ContentManifestPayload_FileMapping* ContentManifestPayload::mutable_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:ContentManifestPayload.mappings)
  return mappings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContentManifestPayload_FileMapping >*
ContentManifestPayload::mutable_mappings() {
  // @@protoc_insertion_point(field_mutable_list:ContentManifestPayload.mappings)
  return &mappings_;
}
inline const ::ContentManifestPayload_FileMapping& ContentManifestPayload::_internal_mappings(int index) const {
  return mappings_.Get(index);
}
inline const ::ContentManifestPayload_FileMapping& ContentManifestPayload::mappings(int index) const {
  // @@protoc_insertion_point(field_get:ContentManifestPayload.mappings)
  return _internal_mappings(index);
}
inline ::ContentManifestPayload_FileMapping* ContentManifestPayload::_internal_add_mappings() {
  return mappings_.Add();
}
inline ::ContentManifestPayload_FileMapping* ContentManifestPayload::add_mappings() {
  ::ContentManifestPayload_FileMapping* _add = _internal_add_mappings();
  // @@protoc_insertion_point(field_add:ContentManifestPayload.mappings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContentManifestPayload_FileMapping >&
ContentManifestPayload::mappings() const {
  // @@protoc_insertion_point(field_list:ContentManifestPayload.mappings)
  return mappings_;
}

// -------------------------------------------------------------------

// ContentManifestMetadata

// optional uint32 depot_id = 1;
inline bool ContentManifestMetadata::_internal_has_depot_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentManifestMetadata::has_depot_id() const {
  return _internal_has_depot_id();
}
inline void ContentManifestMetadata::clear_depot_id() {
  depot_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ContentManifestMetadata::_internal_depot_id() const {
  return depot_id_;
}
inline uint32_t ContentManifestMetadata::depot_id() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.depot_id)
  return _internal_depot_id();
}
inline void ContentManifestMetadata::_internal_set_depot_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  depot_id_ = value;
}
inline void ContentManifestMetadata::set_depot_id(uint32_t value) {
  _internal_set_depot_id(value);
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.depot_id)
}

// optional uint64 gid_manifest = 2;
inline bool ContentManifestMetadata::_internal_has_gid_manifest() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentManifestMetadata::has_gid_manifest() const {
  return _internal_has_gid_manifest();
}
inline void ContentManifestMetadata::clear_gid_manifest() {
  gid_manifest_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ContentManifestMetadata::_internal_gid_manifest() const {
  return gid_manifest_;
}
inline uint64_t ContentManifestMetadata::gid_manifest() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.gid_manifest)
  return _internal_gid_manifest();
}
inline void ContentManifestMetadata::_internal_set_gid_manifest(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  gid_manifest_ = value;
}
inline void ContentManifestMetadata::set_gid_manifest(uint64_t value) {
  _internal_set_gid_manifest(value);
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.gid_manifest)
}

// optional uint32 creation_time = 3;
inline bool ContentManifestMetadata::_internal_has_creation_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentManifestMetadata::has_creation_time() const {
  return _internal_has_creation_time();
}
inline void ContentManifestMetadata::clear_creation_time() {
  creation_time_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ContentManifestMetadata::_internal_creation_time() const {
  return creation_time_;
}
inline uint32_t ContentManifestMetadata::creation_time() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.creation_time)
  return _internal_creation_time();
}
inline void ContentManifestMetadata::_internal_set_creation_time(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  creation_time_ = value;
}
inline void ContentManifestMetadata::set_creation_time(uint32_t value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.creation_time)
}

// optional bool filenames_encrypted = 4;
inline bool ContentManifestMetadata::_internal_has_filenames_encrypted() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ContentManifestMetadata::has_filenames_encrypted() const {
  return _internal_has_filenames_encrypted();
}
inline void ContentManifestMetadata::clear_filenames_encrypted() {
  filenames_encrypted_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ContentManifestMetadata::_internal_filenames_encrypted() const {
  return filenames_encrypted_;
}
inline bool ContentManifestMetadata::filenames_encrypted() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.filenames_encrypted)
  return _internal_filenames_encrypted();
}
inline void ContentManifestMetadata::_internal_set_filenames_encrypted(bool value) {
  _has_bits_[0] |= 0x00000010u;
  filenames_encrypted_ = value;
}
inline void ContentManifestMetadata::set_filenames_encrypted(bool value) {
  _internal_set_filenames_encrypted(value);
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.filenames_encrypted)
}

// optional uint64 cb_disk_original = 5;
inline bool ContentManifestMetadata::_internal_has_cb_disk_original() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContentManifestMetadata::has_cb_disk_original() const {
  return _internal_has_cb_disk_original();
}
inline void ContentManifestMetadata::clear_cb_disk_original() {
  cb_disk_original_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t ContentManifestMetadata::_internal_cb_disk_original() const {
  return cb_disk_original_;
}
inline uint64_t ContentManifestMetadata::cb_disk_original() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.cb_disk_original)
  return _internal_cb_disk_original();
}
inline void ContentManifestMetadata::_internal_set_cb_disk_original(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  cb_disk_original_ = value;
}
inline void ContentManifestMetadata::set_cb_disk_original(uint64_t value) {
  _internal_set_cb_disk_original(value);
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.cb_disk_original)
}

// optional uint64 cb_disk_compressed = 6;
inline bool ContentManifestMetadata::_internal_has_cb_disk_compressed() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ContentManifestMetadata::has_cb_disk_compressed() const {
  return _internal_has_cb_disk_compressed();
}
inline void ContentManifestMetadata::clear_cb_disk_compressed() {
  cb_disk_compressed_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t ContentManifestMetadata::_internal_cb_disk_compressed() const {
  return cb_disk_compressed_;
}
inline uint64_t ContentManifestMetadata::cb_disk_compressed() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.cb_disk_compressed)
  return _internal_cb_disk_compressed();
}
inline void ContentManifestMetadata::_internal_set_cb_disk_compressed(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  cb_disk_compressed_ = value;
}
inline void ContentManifestMetadata::set_cb_disk_compressed(uint64_t value) {
  _internal_set_cb_disk_compressed(value);
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.cb_disk_compressed)
}

// optional uint32 unique_chunks = 7;
inline bool ContentManifestMetadata::_internal_has_unique_chunks() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ContentManifestMetadata::has_unique_chunks() const {
  return _internal_has_unique_chunks();
}
inline void ContentManifestMetadata::clear_unique_chunks() {
  unique_chunks_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t ContentManifestMetadata::_internal_unique_chunks() const {
  return unique_chunks_;
}
inline uint32_t ContentManifestMetadata::unique_chunks() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.unique_chunks)
  return _internal_unique_chunks();
}
inline void ContentManifestMetadata::_internal_set_unique_chunks(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  unique_chunks_ = value;
}
inline void ContentManifestMetadata::set_unique_chunks(uint32_t value) {
  _internal_set_unique_chunks(value);
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.unique_chunks)
}

// optional uint32 crc_encrypted = 8;
inline bool ContentManifestMetadata::_internal_has_crc_encrypted() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ContentManifestMetadata::has_crc_encrypted() const {
  return _internal_has_crc_encrypted();
}
inline void ContentManifestMetadata::clear_crc_encrypted() {
  crc_encrypted_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t ContentManifestMetadata::_internal_crc_encrypted() const {
  return crc_encrypted_;
}
inline uint32_t ContentManifestMetadata::crc_encrypted() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.crc_encrypted)
  return _internal_crc_encrypted();
}
inline void ContentManifestMetadata::_internal_set_crc_encrypted(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  crc_encrypted_ = value;
}
inline void ContentManifestMetadata::set_crc_encrypted(uint32_t value) {
  _internal_set_crc_encrypted(value);
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.crc_encrypted)
}

// optional uint32 crc_clear = 9;
inline bool ContentManifestMetadata::_internal_has_crc_clear() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ContentManifestMetadata::has_crc_clear() const {
  return _internal_has_crc_clear();
}
inline void ContentManifestMetadata::clear_crc_clear() {
  crc_clear_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t ContentManifestMetadata::_internal_crc_clear() const {
  return crc_clear_;
}
inline uint32_t ContentManifestMetadata::crc_clear() const {
  // @@protoc_insertion_point(field_get:ContentManifestMetadata.crc_clear)
  return _internal_crc_clear();
}
inline void ContentManifestMetadata::_internal_set_crc_clear(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  crc_clear_ = value;
}
inline void ContentManifestMetadata::set_crc_clear(uint32_t value) {
  _internal_set_crc_clear(value);
  // @@protoc_insertion_point(field_set:ContentManifestMetadata.crc_clear)
}

// -------------------------------------------------------------------

// ContentManifestSignature

// optional bytes signature = 1;
inline bool ContentManifestSignature::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentManifestSignature::has_signature() const {
  return _internal_has_signature();
}
inline void ContentManifestSignature::clear_signature() {
  signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentManifestSignature::signature() const {
  // @@protoc_insertion_point(field_get:ContentManifestSignature.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentManifestSignature::set_signature(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ContentManifestSignature.signature)
}
inline std::string* ContentManifestSignature::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:ContentManifestSignature.signature)
  return _s;
}
inline const std::string& ContentManifestSignature::_internal_signature() const {
  return signature_.Get();
}
inline void ContentManifestSignature::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContentManifestSignature::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000001u;
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContentManifestSignature::release_signature() {
  // @@protoc_insertion_point(field_release:ContentManifestSignature.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentManifestSignature::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ContentManifestSignature.signature)
}

// -------------------------------------------------------------------

// ContentDeltaChunks_DeltaChunk

// optional bytes sha_source = 1;
inline bool ContentDeltaChunks_DeltaChunk::_internal_has_sha_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentDeltaChunks_DeltaChunk::has_sha_source() const {
  return _internal_has_sha_source();
}
inline void ContentDeltaChunks_DeltaChunk::clear_sha_source() {
  sha_source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentDeltaChunks_DeltaChunk::sha_source() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.DeltaChunk.sha_source)
  return _internal_sha_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentDeltaChunks_DeltaChunk::set_sha_source(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha_source_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.DeltaChunk.sha_source)
}
inline std::string* ContentDeltaChunks_DeltaChunk::mutable_sha_source() {
  std::string* _s = _internal_mutable_sha_source();
  // @@protoc_insertion_point(field_mutable:ContentDeltaChunks.DeltaChunk.sha_source)
  return _s;
}
inline const std::string& ContentDeltaChunks_DeltaChunk::_internal_sha_source() const {
  return sha_source_.Get();
}
inline void ContentDeltaChunks_DeltaChunk::_internal_set_sha_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContentDeltaChunks_DeltaChunk::_internal_mutable_sha_source() {
  _has_bits_[0] |= 0x00000001u;
  return sha_source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContentDeltaChunks_DeltaChunk::release_sha_source() {
  // @@protoc_insertion_point(field_release:ContentDeltaChunks.DeltaChunk.sha_source)
  if (!_internal_has_sha_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha_source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_source_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentDeltaChunks_DeltaChunk::set_allocated_sha_source(std::string* sha_source) {
  if (sha_source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_source,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_source_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ContentDeltaChunks.DeltaChunk.sha_source)
}

// optional bytes sha_target = 2;
inline bool ContentDeltaChunks_DeltaChunk::_internal_has_sha_target() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentDeltaChunks_DeltaChunk::has_sha_target() const {
  return _internal_has_sha_target();
}
inline void ContentDeltaChunks_DeltaChunk::clear_sha_target() {
  sha_target_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentDeltaChunks_DeltaChunk::sha_target() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.DeltaChunk.sha_target)
  return _internal_sha_target();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentDeltaChunks_DeltaChunk::set_sha_target(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sha_target_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.DeltaChunk.sha_target)
}
inline std::string* ContentDeltaChunks_DeltaChunk::mutable_sha_target() {
  std::string* _s = _internal_mutable_sha_target();
  // @@protoc_insertion_point(field_mutable:ContentDeltaChunks.DeltaChunk.sha_target)
  return _s;
}
inline const std::string& ContentDeltaChunks_DeltaChunk::_internal_sha_target() const {
  return sha_target_.Get();
}
inline void ContentDeltaChunks_DeltaChunk::_internal_set_sha_target(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sha_target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContentDeltaChunks_DeltaChunk::_internal_mutable_sha_target() {
  _has_bits_[0] |= 0x00000002u;
  return sha_target_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContentDeltaChunks_DeltaChunk::release_sha_target() {
  // @@protoc_insertion_point(field_release:ContentDeltaChunks.DeltaChunk.sha_target)
  if (!_internal_has_sha_target()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sha_target_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_target_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentDeltaChunks_DeltaChunk::set_allocated_sha_target(std::string* sha_target) {
  if (sha_target != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sha_target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_target,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_target_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ContentDeltaChunks.DeltaChunk.sha_target)
}

// optional uint32 size_original = 3;
inline bool ContentDeltaChunks_DeltaChunk::_internal_has_size_original() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContentDeltaChunks_DeltaChunk::has_size_original() const {
  return _internal_has_size_original();
}
inline void ContentDeltaChunks_DeltaChunk::clear_size_original() {
  size_original_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ContentDeltaChunks_DeltaChunk::_internal_size_original() const {
  return size_original_;
}
inline uint32_t ContentDeltaChunks_DeltaChunk::size_original() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.DeltaChunk.size_original)
  return _internal_size_original();
}
inline void ContentDeltaChunks_DeltaChunk::_internal_set_size_original(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  size_original_ = value;
}
inline void ContentDeltaChunks_DeltaChunk::set_size_original(uint32_t value) {
  _internal_set_size_original(value);
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.DeltaChunk.size_original)
}

// optional uint32 patch_method = 4;
inline bool ContentDeltaChunks_DeltaChunk::_internal_has_patch_method() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ContentDeltaChunks_DeltaChunk::has_patch_method() const {
  return _internal_has_patch_method();
}
inline void ContentDeltaChunks_DeltaChunk::clear_patch_method() {
  patch_method_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ContentDeltaChunks_DeltaChunk::_internal_patch_method() const {
  return patch_method_;
}
inline uint32_t ContentDeltaChunks_DeltaChunk::patch_method() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.DeltaChunk.patch_method)
  return _internal_patch_method();
}
inline void ContentDeltaChunks_DeltaChunk::_internal_set_patch_method(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  patch_method_ = value;
}
inline void ContentDeltaChunks_DeltaChunk::set_patch_method(uint32_t value) {
  _internal_set_patch_method(value);
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.DeltaChunk.patch_method)
}

// optional bytes chunk = 5;
inline bool ContentDeltaChunks_DeltaChunk::_internal_has_chunk() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentDeltaChunks_DeltaChunk::has_chunk() const {
  return _internal_has_chunk();
}
inline void ContentDeltaChunks_DeltaChunk::clear_chunk() {
  chunk_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ContentDeltaChunks_DeltaChunk::chunk() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.DeltaChunk.chunk)
  return _internal_chunk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentDeltaChunks_DeltaChunk::set_chunk(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 chunk_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.DeltaChunk.chunk)
}
inline std::string* ContentDeltaChunks_DeltaChunk::mutable_chunk() {
  std::string* _s = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:ContentDeltaChunks.DeltaChunk.chunk)
  return _s;
}
inline const std::string& ContentDeltaChunks_DeltaChunk::_internal_chunk() const {
  return chunk_.Get();
}
inline void ContentDeltaChunks_DeltaChunk::_internal_set_chunk(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContentDeltaChunks_DeltaChunk::_internal_mutable_chunk() {
  _has_bits_[0] |= 0x00000004u;
  return chunk_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContentDeltaChunks_DeltaChunk::release_chunk() {
  // @@protoc_insertion_point(field_release:ContentDeltaChunks.DeltaChunk.chunk)
  if (!_internal_has_chunk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = chunk_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chunk_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chunk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ContentDeltaChunks_DeltaChunk::set_allocated_chunk(std::string* chunk) {
  if (chunk != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  chunk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chunk,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chunk_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chunk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ContentDeltaChunks.DeltaChunk.chunk)
}

// optional uint32 size_delta = 6;
inline bool ContentDeltaChunks_DeltaChunk::_internal_has_size_delta() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ContentDeltaChunks_DeltaChunk::has_size_delta() const {
  return _internal_has_size_delta();
}
inline void ContentDeltaChunks_DeltaChunk::clear_size_delta() {
  size_delta_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t ContentDeltaChunks_DeltaChunk::_internal_size_delta() const {
  return size_delta_;
}
inline uint32_t ContentDeltaChunks_DeltaChunk::size_delta() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.DeltaChunk.size_delta)
  return _internal_size_delta();
}
inline void ContentDeltaChunks_DeltaChunk::_internal_set_size_delta(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  size_delta_ = value;
}
inline void ContentDeltaChunks_DeltaChunk::set_size_delta(uint32_t value) {
  _internal_set_size_delta(value);
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.DeltaChunk.size_delta)
}

// -------------------------------------------------------------------

// ContentDeltaChunks

// optional uint32 depot_id = 1;
inline bool ContentDeltaChunks::_internal_has_depot_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContentDeltaChunks::has_depot_id() const {
  return _internal_has_depot_id();
}
inline void ContentDeltaChunks::clear_depot_id() {
  depot_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ContentDeltaChunks::_internal_depot_id() const {
  return depot_id_;
}
inline uint32_t ContentDeltaChunks::depot_id() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.depot_id)
  return _internal_depot_id();
}
inline void ContentDeltaChunks::_internal_set_depot_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  depot_id_ = value;
}
inline void ContentDeltaChunks::set_depot_id(uint32_t value) {
  _internal_set_depot_id(value);
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.depot_id)
}

// optional uint64 manifest_id_source = 2;
inline bool ContentDeltaChunks::_internal_has_manifest_id_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContentDeltaChunks::has_manifest_id_source() const {
  return _internal_has_manifest_id_source();
}
inline void ContentDeltaChunks::clear_manifest_id_source() {
  manifest_id_source_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ContentDeltaChunks::_internal_manifest_id_source() const {
  return manifest_id_source_;
}
inline uint64_t ContentDeltaChunks::manifest_id_source() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.manifest_id_source)
  return _internal_manifest_id_source();
}
inline void ContentDeltaChunks::_internal_set_manifest_id_source(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  manifest_id_source_ = value;
}
inline void ContentDeltaChunks::set_manifest_id_source(uint64_t value) {
  _internal_set_manifest_id_source(value);
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.manifest_id_source)
}

// optional uint64 manifest_id_target = 3;
inline bool ContentDeltaChunks::_internal_has_manifest_id_target() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContentDeltaChunks::has_manifest_id_target() const {
  return _internal_has_manifest_id_target();
}
inline void ContentDeltaChunks::clear_manifest_id_target() {
  manifest_id_target_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ContentDeltaChunks::_internal_manifest_id_target() const {
  return manifest_id_target_;
}
inline uint64_t ContentDeltaChunks::manifest_id_target() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.manifest_id_target)
  return _internal_manifest_id_target();
}
inline void ContentDeltaChunks::_internal_set_manifest_id_target(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  manifest_id_target_ = value;
}
inline void ContentDeltaChunks::set_manifest_id_target(uint64_t value) {
  _internal_set_manifest_id_target(value);
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.manifest_id_target)
}

// repeated .ContentDeltaChunks.DeltaChunk deltaChunks = 4;
inline int ContentDeltaChunks::_internal_deltachunks_size() const {
  return deltachunks_.size();
}
inline int ContentDeltaChunks::deltachunks_size() const {
  return _internal_deltachunks_size();
}
inline void ContentDeltaChunks::clear_deltachunks() {
  deltachunks_.Clear();
}
inline ::ContentDeltaChunks_DeltaChunk* ContentDeltaChunks::mutable_deltachunks(int index) {
  // @@protoc_insertion_point(field_mutable:ContentDeltaChunks.deltaChunks)
  return deltachunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContentDeltaChunks_DeltaChunk >*
ContentDeltaChunks::mutable_deltachunks() {
  // @@protoc_insertion_point(field_mutable_list:ContentDeltaChunks.deltaChunks)
  return &deltachunks_;
}
inline const ::ContentDeltaChunks_DeltaChunk& ContentDeltaChunks::_internal_deltachunks(int index) const {
  return deltachunks_.Get(index);
}
inline const ::ContentDeltaChunks_DeltaChunk& ContentDeltaChunks::deltachunks(int index) const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.deltaChunks)
  return _internal_deltachunks(index);
}
inline ::ContentDeltaChunks_DeltaChunk* ContentDeltaChunks::_internal_add_deltachunks() {
  return deltachunks_.Add();
}
inline ::ContentDeltaChunks_DeltaChunk* ContentDeltaChunks::add_deltachunks() {
  ::ContentDeltaChunks_DeltaChunk* _add = _internal_add_deltachunks();
  // @@protoc_insertion_point(field_add:ContentDeltaChunks.deltaChunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ContentDeltaChunks_DeltaChunk >&
ContentDeltaChunks::deltachunks() const {
  // @@protoc_insertion_point(field_list:ContentDeltaChunks.deltaChunks)
  return deltachunks_;
}

// optional .EContentDeltaChunkDataLocation chunk_data_location = 5 [default = k_EContentDeltaChunkDataLocationInProtobuf];
inline bool ContentDeltaChunks::_internal_has_chunk_data_location() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContentDeltaChunks::has_chunk_data_location() const {
  return _internal_has_chunk_data_location();
}
inline void ContentDeltaChunks::clear_chunk_data_location() {
  chunk_data_location_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::EContentDeltaChunkDataLocation ContentDeltaChunks::_internal_chunk_data_location() const {
  return static_cast< ::EContentDeltaChunkDataLocation >(chunk_data_location_);
}
inline ::EContentDeltaChunkDataLocation ContentDeltaChunks::chunk_data_location() const {
  // @@protoc_insertion_point(field_get:ContentDeltaChunks.chunk_data_location)
  return _internal_chunk_data_location();
}
inline void ContentDeltaChunks::_internal_set_chunk_data_location(::EContentDeltaChunkDataLocation value) {
  assert(::EContentDeltaChunkDataLocation_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  chunk_data_location_ = value;
}
inline void ContentDeltaChunks::set_chunk_data_location(::EContentDeltaChunkDataLocation value) {
  _internal_set_chunk_data_location(value);
  // @@protoc_insertion_point(field_set:ContentDeltaChunks.chunk_data_location)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EContentDeltaChunkDataLocation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EContentDeltaChunkDataLocation>() {
  return ::EContentDeltaChunkDataLocation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_content_5fmanifest_2eproto
