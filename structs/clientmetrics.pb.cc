// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientmetrics.proto

#include "clientmetrics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CClientMetrics_ClientBootstrap_RequestInfo::CClientMetrics_ClientBootstrap_RequestInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : original_hostname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , actual_hostname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_of_request_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false)
  , status_code_(0u)
  , bytes_received_(uint64_t{0u})
  , response_time_ms_(0u)
  , num_retries_(0u){}
struct CClientMetrics_ClientBootstrap_RequestInfoDefaultTypeInternal {
  constexpr CClientMetrics_ClientBootstrap_RequestInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_ClientBootstrap_RequestInfoDefaultTypeInternal() {}
  union {
    CClientMetrics_ClientBootstrap_RequestInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_ClientBootstrap_RequestInfoDefaultTypeInternal _CClientMetrics_ClientBootstrap_RequestInfo_default_instance_;
constexpr CClientMetrics_ClientBootstrap_Summary::CClientMetrics_ClientBootstrap_Summary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : manifest_requests_()
  , package_requests_()
  , beta_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , launcher_type_(0u)
  , steam_realm_(0u)
  , download_completed_(false)
  , total_time_ms_(0u){}
struct CClientMetrics_ClientBootstrap_SummaryDefaultTypeInternal {
  constexpr CClientMetrics_ClientBootstrap_SummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_ClientBootstrap_SummaryDefaultTypeInternal() {}
  union {
    CClientMetrics_ClientBootstrap_Summary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_ClientBootstrap_SummaryDefaultTypeInternal _CClientMetrics_ClientBootstrap_Summary_default_instance_;
constexpr CClientMetrics_ContentDownloadResponse_Counts::CClientMetrics_ContentDownloadResponse_Counts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : class_100_(0u)
  , class_200_(0u)
  , class_300_(0u)
  , class_400_(0u)
  , class_500_(0u)
  , no_response_(0u)
  , class_unknown_(0u){}
struct CClientMetrics_ContentDownloadResponse_CountsDefaultTypeInternal {
  constexpr CClientMetrics_ContentDownloadResponse_CountsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_ContentDownloadResponse_CountsDefaultTypeInternal() {}
  union {
    CClientMetrics_ContentDownloadResponse_Counts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_ContentDownloadResponse_CountsDefaultTypeInternal _CClientMetrics_ContentDownloadResponse_Counts_default_instance_;
constexpr CClientMetrics_ContentDownloadResponse_HostCounts::CClientMetrics_ContentDownloadResponse_HostCounts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hostname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , counts_(nullptr)
  , source_type_(0u){}
struct CClientMetrics_ContentDownloadResponse_HostCountsDefaultTypeInternal {
  constexpr CClientMetrics_ContentDownloadResponse_HostCountsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_ContentDownloadResponse_HostCountsDefaultTypeInternal() {}
  union {
    CClientMetrics_ContentDownloadResponse_HostCounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_ContentDownloadResponse_HostCountsDefaultTypeInternal _CClientMetrics_ContentDownloadResponse_HostCounts_default_instance_;
constexpr CClientMetrics_ContentDownloadResponse_Hosts::CClientMetrics_ContentDownloadResponse_Hosts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hosts_(){}
struct CClientMetrics_ContentDownloadResponse_HostsDefaultTypeInternal {
  constexpr CClientMetrics_ContentDownloadResponse_HostsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_ContentDownloadResponse_HostsDefaultTypeInternal() {}
  union {
    CClientMetrics_ContentDownloadResponse_Hosts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_ContentDownloadResponse_HostsDefaultTypeInternal _CClientMetrics_ContentDownloadResponse_Hosts_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_clientmetrics_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_clientmetrics_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_clientmetrics_2eproto = nullptr;

const uint32_t TableStruct_clientmetrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_RequestInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_RequestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_RequestInfo, original_hostname_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_RequestInfo, actual_hostname_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_RequestInfo, path_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_RequestInfo, base_name_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_RequestInfo, success_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_RequestInfo, status_code_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_RequestInfo, address_of_request_url_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_RequestInfo, response_time_ms_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_RequestInfo, bytes_received_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_RequestInfo, num_retries_),
  0,
  1,
  2,
  3,
  5,
  6,
  4,
  8,
  7,
  9,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_Summary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_Summary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_Summary, launcher_type_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_Summary, steam_realm_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_Summary, beta_name_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_Summary, download_completed_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_Summary, total_time_ms_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_Summary, manifest_requests_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_Summary, package_requests_),
  1,
  2,
  0,
  3,
  4,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_Counts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_Counts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_Counts, class_100_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_Counts, class_200_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_Counts, class_300_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_Counts, class_400_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_Counts, class_500_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_Counts, no_response_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_Counts, class_unknown_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_HostCounts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_HostCounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_HostCounts, hostname_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_HostCounts, source_type_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_HostCounts, counts_),
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_Hosts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_Hosts, hosts_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::CClientMetrics_ClientBootstrap_RequestInfo)},
  { 26, 39, -1, sizeof(::CClientMetrics_ClientBootstrap_Summary)},
  { 46, 59, -1, sizeof(::CClientMetrics_ContentDownloadResponse_Counts)},
  { 66, 75, -1, sizeof(::CClientMetrics_ContentDownloadResponse_HostCounts)},
  { 78, -1, -1, sizeof(::CClientMetrics_ContentDownloadResponse_Hosts)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_ClientBootstrap_RequestInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_ClientBootstrap_Summary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_ContentDownloadResponse_Counts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_ContentDownloadResponse_HostCounts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_ContentDownloadResponse_Hosts_default_instance_),
};

const char descriptor_table_protodef_clientmetrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023clientmetrics.proto\"\216\002\n*CClientMetrics"
  "_ClientBootstrap_RequestInfo\022\031\n\021original"
  "_hostname\030\001 \001(\t\022\027\n\017actual_hostname\030\002 \001(\t"
  "\022\014\n\004path\030\003 \001(\t\022\021\n\tbase_name\030\004 \001(\t\022\017\n\007suc"
  "cess\030\005 \001(\010\022\023\n\013status_code\030\006 \001(\r\022\036\n\026addre"
  "ss_of_request_url\030\007 \001(\t\022\030\n\020response_time"
  "_ms\030\010 \001(\r\022\026\n\016bytes_received\030\t \001(\004\022\023\n\013num"
  "_retries\030\n \001(\r\"\251\002\n&CClientMetrics_Client"
  "Bootstrap_Summary\022\025\n\rlauncher_type\030\001 \001(\r"
  "\022\023\n\013steam_realm\030\002 \001(\r\022\021\n\tbeta_name\030\003 \001(\t"
  "\022\032\n\022download_completed\030\004 \001(\010\022\025\n\rtotal_ti"
  "me_ms\030\006 \001(\r\022F\n\021manifest_requests\030\007 \003(\0132+"
  ".CClientMetrics_ClientBootstrap_RequestI"
  "nfo\022E\n\020package_requests\030\010 \003(\0132+.CClientM"
  "etrics_ClientBootstrap_RequestInfo\"\272\001\n-C"
  "ClientMetrics_ContentDownloadResponse_Co"
  "unts\022\021\n\tclass_100\030\001 \001(\r\022\021\n\tclass_200\030\002 \001"
  "(\r\022\021\n\tclass_300\030\003 \001(\r\022\021\n\tclass_400\030\004 \001(\r"
  "\022\021\n\tclass_500\030\005 \001(\r\022\023\n\013no_response\030\006 \001(\r"
  "\022\025\n\rclass_unknown\030\007 \001(\r\"\232\001\n1CClientMetri"
  "cs_ContentDownloadResponse_HostCounts\022\020\n"
  "\010hostname\030\001 \001(\t\022\023\n\013source_type\030\002 \001(\r\022>\n\006"
  "counts\030\003 \001(\0132..CClientMetrics_ContentDow"
  "nloadResponse_Counts\"q\n,CClientMetrics_C"
  "ontentDownloadResponse_Hosts\022A\n\005hosts\030\001 "
  "\003(\01322.CClientMetrics_ContentDownloadResp"
  "onse_HostCountsB\005H\001\200\001\000"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_clientmetrics_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clientmetrics_2eproto = {
  false, false, 1062, descriptor_table_protodef_clientmetrics_2eproto, "clientmetrics.proto", 
  &descriptor_table_clientmetrics_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_clientmetrics_2eproto::offsets,
  file_level_metadata_clientmetrics_2eproto, file_level_enum_descriptors_clientmetrics_2eproto, file_level_service_descriptors_clientmetrics_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_clientmetrics_2eproto_getter() {
  return &descriptor_table_clientmetrics_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_clientmetrics_2eproto(&descriptor_table_clientmetrics_2eproto);

// ===================================================================

class CClientMetrics_ClientBootstrap_RequestInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_ClientBootstrap_RequestInfo>()._has_bits_);
  static void set_has_original_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_actual_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_base_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_status_code(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_address_of_request_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_response_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bytes_received(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_num_retries(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CClientMetrics_ClientBootstrap_RequestInfo::CClientMetrics_ClientBootstrap_RequestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_ClientBootstrap_RequestInfo)
}
CClientMetrics_ClientBootstrap_RequestInfo::CClientMetrics_ClientBootstrap_RequestInfo(const CClientMetrics_ClientBootstrap_RequestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  original_hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    original_hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_original_hostname()) {
    original_hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_original_hostname(), 
      GetArenaForAllocation());
  }
  actual_hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    actual_hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_actual_hostname()) {
    actual_hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actual_hostname(), 
      GetArenaForAllocation());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  base_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    base_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_base_name()) {
    base_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_base_name(), 
      GetArenaForAllocation());
  }
  address_of_request_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_of_request_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_address_of_request_url()) {
    address_of_request_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address_of_request_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_retries_) -
    reinterpret_cast<char*>(&success_)) + sizeof(num_retries_));
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_ClientBootstrap_RequestInfo)
}

inline void CClientMetrics_ClientBootstrap_RequestInfo::SharedCtor() {
original_hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  original_hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
actual_hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  actual_hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
base_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  base_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_of_request_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_of_request_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_retries_) -
    reinterpret_cast<char*>(&success_)) + sizeof(num_retries_));
}

CClientMetrics_ClientBootstrap_RequestInfo::~CClientMetrics_ClientBootstrap_RequestInfo() {
  // @@protoc_insertion_point(destructor:CClientMetrics_ClientBootstrap_RequestInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_ClientBootstrap_RequestInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  original_hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_of_request_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientMetrics_ClientBootstrap_RequestInfo::ArenaDtor(void* object) {
  CClientMetrics_ClientBootstrap_RequestInfo* _this = reinterpret_cast< CClientMetrics_ClientBootstrap_RequestInfo* >(object);
  (void)_this;
}
void CClientMetrics_ClientBootstrap_RequestInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_ClientBootstrap_RequestInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_ClientBootstrap_RequestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_ClientBootstrap_RequestInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      original_hostname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      actual_hostname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      base_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      address_of_request_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bytes_received_) -
        reinterpret_cast<char*>(&success_)) + sizeof(bytes_received_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&response_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_retries_) -
        reinterpret_cast<char*>(&response_time_ms_)) + sizeof(num_retries_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_ClientBootstrap_RequestInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string original_hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_original_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ClientBootstrap_RequestInfo.original_hostname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string actual_hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_actual_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ClientBootstrap_RequestInfo.actual_hostname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ClientBootstrap_RequestInfo.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string base_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_base_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ClientBootstrap_RequestInfo.base_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool success = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 status_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_status_code(&has_bits);
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string address_of_request_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_address_of_request_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ClientBootstrap_RequestInfo.address_of_request_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 response_time_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_response_time_ms(&has_bits);
          response_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_received = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_bytes_received(&has_bits);
          bytes_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_retries = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_num_retries(&has_bits);
          num_retries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_ClientBootstrap_RequestInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_ClientBootstrap_RequestInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string original_hostname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_original_hostname().data(), static_cast<int>(this->_internal_original_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ClientBootstrap_RequestInfo.original_hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_original_hostname(), target);
  }

  // optional string actual_hostname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_actual_hostname().data(), static_cast<int>(this->_internal_actual_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ClientBootstrap_RequestInfo.actual_hostname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_actual_hostname(), target);
  }

  // optional string path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ClientBootstrap_RequestInfo.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  // optional string base_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_base_name().data(), static_cast<int>(this->_internal_base_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ClientBootstrap_RequestInfo.base_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_base_name(), target);
  }

  // optional bool success = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_success(), target);
  }

  // optional uint32 status_code = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_status_code(), target);
  }

  // optional string address_of_request_url = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_address_of_request_url().data(), static_cast<int>(this->_internal_address_of_request_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ClientBootstrap_RequestInfo.address_of_request_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_address_of_request_url(), target);
  }

  // optional uint32 response_time_ms = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_response_time_ms(), target);
  }

  // optional uint64 bytes_received = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_bytes_received(), target);
  }

  // optional uint32 num_retries = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_num_retries(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_ClientBootstrap_RequestInfo)
  return target;
}

size_t CClientMetrics_ClientBootstrap_RequestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_ClientBootstrap_RequestInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string original_hostname = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_original_hostname());
    }

    // optional string actual_hostname = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_actual_hostname());
    }

    // optional string path = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string base_name = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_base_name());
    }

    // optional string address_of_request_url = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_of_request_url());
    }

    // optional bool success = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 status_code = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_status_code());
    }

    // optional uint64 bytes_received = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_received());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 response_time_ms = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_response_time_ms());
    }

    // optional uint32 num_retries = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_retries());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_ClientBootstrap_RequestInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_ClientBootstrap_RequestInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_ClientBootstrap_RequestInfo::GetClassData() const { return &_class_data_; }

void CClientMetrics_ClientBootstrap_RequestInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_ClientBootstrap_RequestInfo *>(to)->MergeFrom(
      static_cast<const CClientMetrics_ClientBootstrap_RequestInfo &>(from));
}


void CClientMetrics_ClientBootstrap_RequestInfo::MergeFrom(const CClientMetrics_ClientBootstrap_RequestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_ClientBootstrap_RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_original_hostname(from._internal_original_hostname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_actual_hostname(from._internal_actual_hostname());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_base_name(from._internal_base_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_address_of_request_url(from._internal_address_of_request_url());
    }
    if (cached_has_bits & 0x00000020u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_code_ = from.status_code_;
    }
    if (cached_has_bits & 0x00000080u) {
      bytes_received_ = from.bytes_received_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      response_time_ms_ = from.response_time_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      num_retries_ = from.num_retries_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_ClientBootstrap_RequestInfo::CopyFrom(const CClientMetrics_ClientBootstrap_RequestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_ClientBootstrap_RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_ClientBootstrap_RequestInfo::IsInitialized() const {
  return true;
}

void CClientMetrics_ClientBootstrap_RequestInfo::InternalSwap(CClientMetrics_ClientBootstrap_RequestInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &original_hostname_, lhs_arena,
      &other->original_hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &actual_hostname_, lhs_arena,
      &other->actual_hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &base_name_, lhs_arena,
      &other->base_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_of_request_url_, lhs_arena,
      &other->address_of_request_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMetrics_ClientBootstrap_RequestInfo, num_retries_)
      + sizeof(CClientMetrics_ClientBootstrap_RequestInfo::num_retries_)
      - PROTOBUF_FIELD_OFFSET(CClientMetrics_ClientBootstrap_RequestInfo, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_ClientBootstrap_RequestInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_clientmetrics_2eproto_getter, &descriptor_table_clientmetrics_2eproto_once,
      file_level_metadata_clientmetrics_2eproto[0]);
}

// ===================================================================

class CClientMetrics_ClientBootstrap_Summary::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_ClientBootstrap_Summary>()._has_bits_);
  static void set_has_launcher_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steam_realm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_beta_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_download_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_total_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CClientMetrics_ClientBootstrap_Summary::CClientMetrics_ClientBootstrap_Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  manifest_requests_(arena),
  package_requests_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_ClientBootstrap_Summary)
}
CClientMetrics_ClientBootstrap_Summary::CClientMetrics_ClientBootstrap_Summary(const CClientMetrics_ClientBootstrap_Summary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      manifest_requests_(from.manifest_requests_),
      package_requests_(from.package_requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  beta_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    beta_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_beta_name()) {
    beta_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_beta_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&launcher_type_, &from.launcher_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_time_ms_) -
    reinterpret_cast<char*>(&launcher_type_)) + sizeof(total_time_ms_));
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_ClientBootstrap_Summary)
}

inline void CClientMetrics_ClientBootstrap_Summary::SharedCtor() {
beta_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  beta_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&launcher_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_time_ms_) -
    reinterpret_cast<char*>(&launcher_type_)) + sizeof(total_time_ms_));
}

CClientMetrics_ClientBootstrap_Summary::~CClientMetrics_ClientBootstrap_Summary() {
  // @@protoc_insertion_point(destructor:CClientMetrics_ClientBootstrap_Summary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_ClientBootstrap_Summary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  beta_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientMetrics_ClientBootstrap_Summary::ArenaDtor(void* object) {
  CClientMetrics_ClientBootstrap_Summary* _this = reinterpret_cast< CClientMetrics_ClientBootstrap_Summary* >(object);
  (void)_this;
}
void CClientMetrics_ClientBootstrap_Summary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_ClientBootstrap_Summary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_ClientBootstrap_Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_ClientBootstrap_Summary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manifest_requests_.Clear();
  package_requests_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    beta_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&launcher_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_time_ms_) -
        reinterpret_cast<char*>(&launcher_type_)) + sizeof(total_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_ClientBootstrap_Summary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 launcher_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_launcher_type(&has_bits);
          launcher_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 steam_realm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_steam_realm(&has_bits);
          steam_realm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string beta_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_beta_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ClientBootstrap_Summary.beta_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool download_completed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_download_completed(&has_bits);
          download_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_time_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_total_time_ms(&has_bits);
          total_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CClientMetrics_ClientBootstrap_RequestInfo manifest_requests = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_manifest_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CClientMetrics_ClientBootstrap_RequestInfo package_requests = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_package_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_ClientBootstrap_Summary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_ClientBootstrap_Summary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 launcher_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_launcher_type(), target);
  }

  // optional uint32 steam_realm = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_steam_realm(), target);
  }

  // optional string beta_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_beta_name().data(), static_cast<int>(this->_internal_beta_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ClientBootstrap_Summary.beta_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_beta_name(), target);
  }

  // optional bool download_completed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_download_completed(), target);
  }

  // optional uint32 total_time_ms = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_total_time_ms(), target);
  }

  // repeated .CClientMetrics_ClientBootstrap_RequestInfo manifest_requests = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_manifest_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_manifest_requests(i), target, stream);
  }

  // repeated .CClientMetrics_ClientBootstrap_RequestInfo package_requests = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_package_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_package_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_ClientBootstrap_Summary)
  return target;
}

size_t CClientMetrics_ClientBootstrap_Summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_ClientBootstrap_Summary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CClientMetrics_ClientBootstrap_RequestInfo manifest_requests = 7;
  total_size += 1UL * this->_internal_manifest_requests_size();
  for (const auto& msg : this->manifest_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CClientMetrics_ClientBootstrap_RequestInfo package_requests = 8;
  total_size += 1UL * this->_internal_package_requests_size();
  for (const auto& msg : this->package_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string beta_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_beta_name());
    }

    // optional uint32 launcher_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_launcher_type());
    }

    // optional uint32 steam_realm = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_steam_realm());
    }

    // optional bool download_completed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 total_time_ms = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total_time_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_ClientBootstrap_Summary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_ClientBootstrap_Summary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_ClientBootstrap_Summary::GetClassData() const { return &_class_data_; }

void CClientMetrics_ClientBootstrap_Summary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_ClientBootstrap_Summary *>(to)->MergeFrom(
      static_cast<const CClientMetrics_ClientBootstrap_Summary &>(from));
}


void CClientMetrics_ClientBootstrap_Summary::MergeFrom(const CClientMetrics_ClientBootstrap_Summary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_ClientBootstrap_Summary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  manifest_requests_.MergeFrom(from.manifest_requests_);
  package_requests_.MergeFrom(from.package_requests_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_beta_name(from._internal_beta_name());
    }
    if (cached_has_bits & 0x00000002u) {
      launcher_type_ = from.launcher_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_realm_ = from.steam_realm_;
    }
    if (cached_has_bits & 0x00000008u) {
      download_completed_ = from.download_completed_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_time_ms_ = from.total_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_ClientBootstrap_Summary::CopyFrom(const CClientMetrics_ClientBootstrap_Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_ClientBootstrap_Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_ClientBootstrap_Summary::IsInitialized() const {
  return true;
}

void CClientMetrics_ClientBootstrap_Summary::InternalSwap(CClientMetrics_ClientBootstrap_Summary* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  manifest_requests_.InternalSwap(&other->manifest_requests_);
  package_requests_.InternalSwap(&other->package_requests_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &beta_name_, lhs_arena,
      &other->beta_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMetrics_ClientBootstrap_Summary, total_time_ms_)
      + sizeof(CClientMetrics_ClientBootstrap_Summary::total_time_ms_)
      - PROTOBUF_FIELD_OFFSET(CClientMetrics_ClientBootstrap_Summary, launcher_type_)>(
          reinterpret_cast<char*>(&launcher_type_),
          reinterpret_cast<char*>(&other->launcher_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_ClientBootstrap_Summary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_clientmetrics_2eproto_getter, &descriptor_table_clientmetrics_2eproto_once,
      file_level_metadata_clientmetrics_2eproto[1]);
}

// ===================================================================

class CClientMetrics_ContentDownloadResponse_Counts::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_ContentDownloadResponse_Counts>()._has_bits_);
  static void set_has_class_100(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_class_200(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_class_300(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_class_400(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_class_500(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_no_response(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_class_unknown(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CClientMetrics_ContentDownloadResponse_Counts::CClientMetrics_ContentDownloadResponse_Counts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_ContentDownloadResponse_Counts)
}
CClientMetrics_ContentDownloadResponse_Counts::CClientMetrics_ContentDownloadResponse_Counts(const CClientMetrics_ContentDownloadResponse_Counts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&class_100_, &from.class_100_,
    static_cast<size_t>(reinterpret_cast<char*>(&class_unknown_) -
    reinterpret_cast<char*>(&class_100_)) + sizeof(class_unknown_));
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_ContentDownloadResponse_Counts)
}

inline void CClientMetrics_ContentDownloadResponse_Counts::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&class_100_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&class_unknown_) -
    reinterpret_cast<char*>(&class_100_)) + sizeof(class_unknown_));
}

CClientMetrics_ContentDownloadResponse_Counts::~CClientMetrics_ContentDownloadResponse_Counts() {
  // @@protoc_insertion_point(destructor:CClientMetrics_ContentDownloadResponse_Counts)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_ContentDownloadResponse_Counts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientMetrics_ContentDownloadResponse_Counts::ArenaDtor(void* object) {
  CClientMetrics_ContentDownloadResponse_Counts* _this = reinterpret_cast< CClientMetrics_ContentDownloadResponse_Counts* >(object);
  (void)_this;
}
void CClientMetrics_ContentDownloadResponse_Counts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_ContentDownloadResponse_Counts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_ContentDownloadResponse_Counts::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_ContentDownloadResponse_Counts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&class_100_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&class_unknown_) -
        reinterpret_cast<char*>(&class_100_)) + sizeof(class_unknown_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_ContentDownloadResponse_Counts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 class_100 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_class_100(&has_bits);
          class_100_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 class_200 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_class_200(&has_bits);
          class_200_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 class_300 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_class_300(&has_bits);
          class_300_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 class_400 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_class_400(&has_bits);
          class_400_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 class_500 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_class_500(&has_bits);
          class_500_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 no_response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_no_response(&has_bits);
          no_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 class_unknown = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_class_unknown(&has_bits);
          class_unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_ContentDownloadResponse_Counts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_ContentDownloadResponse_Counts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 class_100 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_class_100(), target);
  }

  // optional uint32 class_200 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_class_200(), target);
  }

  // optional uint32 class_300 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_class_300(), target);
  }

  // optional uint32 class_400 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_class_400(), target);
  }

  // optional uint32 class_500 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_class_500(), target);
  }

  // optional uint32 no_response = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_no_response(), target);
  }

  // optional uint32 class_unknown = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_class_unknown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_ContentDownloadResponse_Counts)
  return target;
}

size_t CClientMetrics_ContentDownloadResponse_Counts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_ContentDownloadResponse_Counts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 class_100 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_class_100());
    }

    // optional uint32 class_200 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_class_200());
    }

    // optional uint32 class_300 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_class_300());
    }

    // optional uint32 class_400 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_class_400());
    }

    // optional uint32 class_500 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_class_500());
    }

    // optional uint32 no_response = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_no_response());
    }

    // optional uint32 class_unknown = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_class_unknown());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_ContentDownloadResponse_Counts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_ContentDownloadResponse_Counts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_ContentDownloadResponse_Counts::GetClassData() const { return &_class_data_; }

void CClientMetrics_ContentDownloadResponse_Counts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_ContentDownloadResponse_Counts *>(to)->MergeFrom(
      static_cast<const CClientMetrics_ContentDownloadResponse_Counts &>(from));
}


void CClientMetrics_ContentDownloadResponse_Counts::MergeFrom(const CClientMetrics_ContentDownloadResponse_Counts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_ContentDownloadResponse_Counts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      class_100_ = from.class_100_;
    }
    if (cached_has_bits & 0x00000002u) {
      class_200_ = from.class_200_;
    }
    if (cached_has_bits & 0x00000004u) {
      class_300_ = from.class_300_;
    }
    if (cached_has_bits & 0x00000008u) {
      class_400_ = from.class_400_;
    }
    if (cached_has_bits & 0x00000010u) {
      class_500_ = from.class_500_;
    }
    if (cached_has_bits & 0x00000020u) {
      no_response_ = from.no_response_;
    }
    if (cached_has_bits & 0x00000040u) {
      class_unknown_ = from.class_unknown_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_ContentDownloadResponse_Counts::CopyFrom(const CClientMetrics_ContentDownloadResponse_Counts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_ContentDownloadResponse_Counts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_ContentDownloadResponse_Counts::IsInitialized() const {
  return true;
}

void CClientMetrics_ContentDownloadResponse_Counts::InternalSwap(CClientMetrics_ContentDownloadResponse_Counts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMetrics_ContentDownloadResponse_Counts, class_unknown_)
      + sizeof(CClientMetrics_ContentDownloadResponse_Counts::class_unknown_)
      - PROTOBUF_FIELD_OFFSET(CClientMetrics_ContentDownloadResponse_Counts, class_100_)>(
          reinterpret_cast<char*>(&class_100_),
          reinterpret_cast<char*>(&other->class_100_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_ContentDownloadResponse_Counts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_clientmetrics_2eproto_getter, &descriptor_table_clientmetrics_2eproto_once,
      file_level_metadata_clientmetrics_2eproto[2]);
}

// ===================================================================

class CClientMetrics_ContentDownloadResponse_HostCounts::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_ContentDownloadResponse_HostCounts>()._has_bits_);
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CClientMetrics_ContentDownloadResponse_Counts& counts(const CClientMetrics_ContentDownloadResponse_HostCounts* msg);
  static void set_has_counts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CClientMetrics_ContentDownloadResponse_Counts&
CClientMetrics_ContentDownloadResponse_HostCounts::_Internal::counts(const CClientMetrics_ContentDownloadResponse_HostCounts* msg) {
  return *msg->counts_;
}
CClientMetrics_ContentDownloadResponse_HostCounts::CClientMetrics_ContentDownloadResponse_HostCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_ContentDownloadResponse_HostCounts)
}
CClientMetrics_ContentDownloadResponse_HostCounts::CClientMetrics_ContentDownloadResponse_HostCounts(const CClientMetrics_ContentDownloadResponse_HostCounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hostname()) {
    hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hostname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_counts()) {
    counts_ = new ::CClientMetrics_ContentDownloadResponse_Counts(*from.counts_);
  } else {
    counts_ = nullptr;
  }
  source_type_ = from.source_type_;
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_ContentDownloadResponse_HostCounts)
}

inline void CClientMetrics_ContentDownloadResponse_HostCounts::SharedCtor() {
hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&counts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_type_) -
    reinterpret_cast<char*>(&counts_)) + sizeof(source_type_));
}

CClientMetrics_ContentDownloadResponse_HostCounts::~CClientMetrics_ContentDownloadResponse_HostCounts() {
  // @@protoc_insertion_point(destructor:CClientMetrics_ContentDownloadResponse_HostCounts)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_ContentDownloadResponse_HostCounts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete counts_;
}

void CClientMetrics_ContentDownloadResponse_HostCounts::ArenaDtor(void* object) {
  CClientMetrics_ContentDownloadResponse_HostCounts* _this = reinterpret_cast< CClientMetrics_ContentDownloadResponse_HostCounts* >(object);
  (void)_this;
}
void CClientMetrics_ContentDownloadResponse_HostCounts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_ContentDownloadResponse_HostCounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_ContentDownloadResponse_HostCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_ContentDownloadResponse_HostCounts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hostname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(counts_ != nullptr);
      counts_->Clear();
    }
  }
  source_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_ContentDownloadResponse_HostCounts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ContentDownloadResponse_HostCounts.hostname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_source_type(&has_bits);
          source_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CClientMetrics_ContentDownloadResponse_Counts counts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_counts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_ContentDownloadResponse_HostCounts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_ContentDownloadResponse_HostCounts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hostname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ContentDownloadResponse_HostCounts.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // optional uint32 source_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_source_type(), target);
  }

  // optional .CClientMetrics_ContentDownloadResponse_Counts counts = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::counts(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_ContentDownloadResponse_HostCounts)
  return target;
}

size_t CClientMetrics_ContentDownloadResponse_HostCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_ContentDownloadResponse_HostCounts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string hostname = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hostname());
    }

    // optional .CClientMetrics_ContentDownloadResponse_Counts counts = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *counts_);
    }

    // optional uint32 source_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_source_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_ContentDownloadResponse_HostCounts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_ContentDownloadResponse_HostCounts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_ContentDownloadResponse_HostCounts::GetClassData() const { return &_class_data_; }

void CClientMetrics_ContentDownloadResponse_HostCounts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_ContentDownloadResponse_HostCounts *>(to)->MergeFrom(
      static_cast<const CClientMetrics_ContentDownloadResponse_HostCounts &>(from));
}


void CClientMetrics_ContentDownloadResponse_HostCounts::MergeFrom(const CClientMetrics_ContentDownloadResponse_HostCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_ContentDownloadResponse_HostCounts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hostname(from._internal_hostname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_counts()->::CClientMetrics_ContentDownloadResponse_Counts::MergeFrom(from._internal_counts());
    }
    if (cached_has_bits & 0x00000004u) {
      source_type_ = from.source_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_ContentDownloadResponse_HostCounts::CopyFrom(const CClientMetrics_ContentDownloadResponse_HostCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_ContentDownloadResponse_HostCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_ContentDownloadResponse_HostCounts::IsInitialized() const {
  return true;
}

void CClientMetrics_ContentDownloadResponse_HostCounts::InternalSwap(CClientMetrics_ContentDownloadResponse_HostCounts* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hostname_, lhs_arena,
      &other->hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMetrics_ContentDownloadResponse_HostCounts, source_type_)
      + sizeof(CClientMetrics_ContentDownloadResponse_HostCounts::source_type_)
      - PROTOBUF_FIELD_OFFSET(CClientMetrics_ContentDownloadResponse_HostCounts, counts_)>(
          reinterpret_cast<char*>(&counts_),
          reinterpret_cast<char*>(&other->counts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_ContentDownloadResponse_HostCounts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_clientmetrics_2eproto_getter, &descriptor_table_clientmetrics_2eproto_once,
      file_level_metadata_clientmetrics_2eproto[3]);
}

// ===================================================================

class CClientMetrics_ContentDownloadResponse_Hosts::_Internal {
 public:
};

CClientMetrics_ContentDownloadResponse_Hosts::CClientMetrics_ContentDownloadResponse_Hosts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hosts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_ContentDownloadResponse_Hosts)
}
CClientMetrics_ContentDownloadResponse_Hosts::CClientMetrics_ContentDownloadResponse_Hosts(const CClientMetrics_ContentDownloadResponse_Hosts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hosts_(from.hosts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_ContentDownloadResponse_Hosts)
}

inline void CClientMetrics_ContentDownloadResponse_Hosts::SharedCtor() {
}

CClientMetrics_ContentDownloadResponse_Hosts::~CClientMetrics_ContentDownloadResponse_Hosts() {
  // @@protoc_insertion_point(destructor:CClientMetrics_ContentDownloadResponse_Hosts)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_ContentDownloadResponse_Hosts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientMetrics_ContentDownloadResponse_Hosts::ArenaDtor(void* object) {
  CClientMetrics_ContentDownloadResponse_Hosts* _this = reinterpret_cast< CClientMetrics_ContentDownloadResponse_Hosts* >(object);
  (void)_this;
}
void CClientMetrics_ContentDownloadResponse_Hosts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_ContentDownloadResponse_Hosts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_ContentDownloadResponse_Hosts::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_ContentDownloadResponse_Hosts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hosts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_ContentDownloadResponse_Hosts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CClientMetrics_ContentDownloadResponse_HostCounts hosts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hosts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_ContentDownloadResponse_Hosts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_ContentDownloadResponse_Hosts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CClientMetrics_ContentDownloadResponse_HostCounts hosts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hosts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hosts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_ContentDownloadResponse_Hosts)
  return target;
}

size_t CClientMetrics_ContentDownloadResponse_Hosts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_ContentDownloadResponse_Hosts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CClientMetrics_ContentDownloadResponse_HostCounts hosts = 1;
  total_size += 1UL * this->_internal_hosts_size();
  for (const auto& msg : this->hosts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_ContentDownloadResponse_Hosts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_ContentDownloadResponse_Hosts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_ContentDownloadResponse_Hosts::GetClassData() const { return &_class_data_; }

void CClientMetrics_ContentDownloadResponse_Hosts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_ContentDownloadResponse_Hosts *>(to)->MergeFrom(
      static_cast<const CClientMetrics_ContentDownloadResponse_Hosts &>(from));
}


void CClientMetrics_ContentDownloadResponse_Hosts::MergeFrom(const CClientMetrics_ContentDownloadResponse_Hosts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_ContentDownloadResponse_Hosts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  hosts_.MergeFrom(from.hosts_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_ContentDownloadResponse_Hosts::CopyFrom(const CClientMetrics_ContentDownloadResponse_Hosts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_ContentDownloadResponse_Hosts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_ContentDownloadResponse_Hosts::IsInitialized() const {
  return true;
}

void CClientMetrics_ContentDownloadResponse_Hosts::InternalSwap(CClientMetrics_ContentDownloadResponse_Hosts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  hosts_.InternalSwap(&other->hosts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_ContentDownloadResponse_Hosts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_clientmetrics_2eproto_getter, &descriptor_table_clientmetrics_2eproto_once,
      file_level_metadata_clientmetrics_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CClientMetrics_ClientBootstrap_RequestInfo* Arena::CreateMaybeMessage< ::CClientMetrics_ClientBootstrap_RequestInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_ClientBootstrap_RequestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_ClientBootstrap_Summary* Arena::CreateMaybeMessage< ::CClientMetrics_ClientBootstrap_Summary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_ClientBootstrap_Summary >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_ContentDownloadResponse_Counts* Arena::CreateMaybeMessage< ::CClientMetrics_ContentDownloadResponse_Counts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_ContentDownloadResponse_Counts >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_ContentDownloadResponse_HostCounts* Arena::CreateMaybeMessage< ::CClientMetrics_ContentDownloadResponse_HostCounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_ContentDownloadResponse_HostCounts >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_ContentDownloadResponse_Hosts* Arena::CreateMaybeMessage< ::CClientMetrics_ContentDownloadResponse_Hosts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_ContentDownloadResponse_Hosts >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
