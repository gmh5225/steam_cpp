// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_friends.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5ffriends_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5ffriends_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_5ffriends_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fclientserver_5ffriends_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[39]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5ffriends_2eproto;
class CMsgClientAddFriend;
struct CMsgClientAddFriendDefaultTypeInternal;
extern CMsgClientAddFriendDefaultTypeInternal _CMsgClientAddFriend_default_instance_;
class CMsgClientAddFriendResponse;
struct CMsgClientAddFriendResponseDefaultTypeInternal;
extern CMsgClientAddFriendResponseDefaultTypeInternal _CMsgClientAddFriendResponse_default_instance_;
class CMsgClientAddFriendToGroup;
struct CMsgClientAddFriendToGroupDefaultTypeInternal;
extern CMsgClientAddFriendToGroupDefaultTypeInternal _CMsgClientAddFriendToGroup_default_instance_;
class CMsgClientAddFriendToGroupResponse;
struct CMsgClientAddFriendToGroupResponseDefaultTypeInternal;
extern CMsgClientAddFriendToGroupResponseDefaultTypeInternal _CMsgClientAddFriendToGroupResponse_default_instance_;
class CMsgClientChangeStatus;
struct CMsgClientChangeStatusDefaultTypeInternal;
extern CMsgClientChangeStatusDefaultTypeInternal _CMsgClientChangeStatus_default_instance_;
class CMsgClientCreateFriendsGroup;
struct CMsgClientCreateFriendsGroupDefaultTypeInternal;
extern CMsgClientCreateFriendsGroupDefaultTypeInternal _CMsgClientCreateFriendsGroup_default_instance_;
class CMsgClientCreateFriendsGroupResponse;
struct CMsgClientCreateFriendsGroupResponseDefaultTypeInternal;
extern CMsgClientCreateFriendsGroupResponseDefaultTypeInternal _CMsgClientCreateFriendsGroupResponse_default_instance_;
class CMsgClientDeleteFriendsGroup;
struct CMsgClientDeleteFriendsGroupDefaultTypeInternal;
extern CMsgClientDeleteFriendsGroupDefaultTypeInternal _CMsgClientDeleteFriendsGroup_default_instance_;
class CMsgClientDeleteFriendsGroupResponse;
struct CMsgClientDeleteFriendsGroupResponseDefaultTypeInternal;
extern CMsgClientDeleteFriendsGroupResponseDefaultTypeInternal _CMsgClientDeleteFriendsGroupResponse_default_instance_;
class CMsgClientEmoticonList;
struct CMsgClientEmoticonListDefaultTypeInternal;
extern CMsgClientEmoticonListDefaultTypeInternal _CMsgClientEmoticonList_default_instance_;
class CMsgClientEmoticonList_Effect;
struct CMsgClientEmoticonList_EffectDefaultTypeInternal;
extern CMsgClientEmoticonList_EffectDefaultTypeInternal _CMsgClientEmoticonList_Effect_default_instance_;
class CMsgClientEmoticonList_Emoticon;
struct CMsgClientEmoticonList_EmoticonDefaultTypeInternal;
extern CMsgClientEmoticonList_EmoticonDefaultTypeInternal _CMsgClientEmoticonList_Emoticon_default_instance_;
class CMsgClientEmoticonList_Sticker;
struct CMsgClientEmoticonList_StickerDefaultTypeInternal;
extern CMsgClientEmoticonList_StickerDefaultTypeInternal _CMsgClientEmoticonList_Sticker_default_instance_;
class CMsgClientFriendMsg;
struct CMsgClientFriendMsgDefaultTypeInternal;
extern CMsgClientFriendMsgDefaultTypeInternal _CMsgClientFriendMsg_default_instance_;
class CMsgClientFriendMsgIncoming;
struct CMsgClientFriendMsgIncomingDefaultTypeInternal;
extern CMsgClientFriendMsgIncomingDefaultTypeInternal _CMsgClientFriendMsgIncoming_default_instance_;
class CMsgClientFriendProfileInfo;
struct CMsgClientFriendProfileInfoDefaultTypeInternal;
extern CMsgClientFriendProfileInfoDefaultTypeInternal _CMsgClientFriendProfileInfo_default_instance_;
class CMsgClientFriendProfileInfoResponse;
struct CMsgClientFriendProfileInfoResponseDefaultTypeInternal;
extern CMsgClientFriendProfileInfoResponseDefaultTypeInternal _CMsgClientFriendProfileInfoResponse_default_instance_;
class CMsgClientFriendsGroupsList;
struct CMsgClientFriendsGroupsListDefaultTypeInternal;
extern CMsgClientFriendsGroupsListDefaultTypeInternal _CMsgClientFriendsGroupsList_default_instance_;
class CMsgClientFriendsGroupsList_FriendGroup;
struct CMsgClientFriendsGroupsList_FriendGroupDefaultTypeInternal;
extern CMsgClientFriendsGroupsList_FriendGroupDefaultTypeInternal _CMsgClientFriendsGroupsList_FriendGroup_default_instance_;
class CMsgClientFriendsGroupsList_FriendGroupsMembership;
struct CMsgClientFriendsGroupsList_FriendGroupsMembershipDefaultTypeInternal;
extern CMsgClientFriendsGroupsList_FriendGroupsMembershipDefaultTypeInternal _CMsgClientFriendsGroupsList_FriendGroupsMembership_default_instance_;
class CMsgClientFriendsList;
struct CMsgClientFriendsListDefaultTypeInternal;
extern CMsgClientFriendsListDefaultTypeInternal _CMsgClientFriendsList_default_instance_;
class CMsgClientFriendsList_Friend;
struct CMsgClientFriendsList_FriendDefaultTypeInternal;
extern CMsgClientFriendsList_FriendDefaultTypeInternal _CMsgClientFriendsList_Friend_default_instance_;
class CMsgClientGetEmoticonList;
struct CMsgClientGetEmoticonListDefaultTypeInternal;
extern CMsgClientGetEmoticonListDefaultTypeInternal _CMsgClientGetEmoticonList_default_instance_;
class CMsgClientHideFriend;
struct CMsgClientHideFriendDefaultTypeInternal;
extern CMsgClientHideFriendDefaultTypeInternal _CMsgClientHideFriend_default_instance_;
class CMsgClientManageFriendsGroup;
struct CMsgClientManageFriendsGroupDefaultTypeInternal;
extern CMsgClientManageFriendsGroupDefaultTypeInternal _CMsgClientManageFriendsGroup_default_instance_;
class CMsgClientManageFriendsGroupResponse;
struct CMsgClientManageFriendsGroupResponseDefaultTypeInternal;
extern CMsgClientManageFriendsGroupResponseDefaultTypeInternal _CMsgClientManageFriendsGroupResponse_default_instance_;
class CMsgClientPersonaState;
struct CMsgClientPersonaStateDefaultTypeInternal;
extern CMsgClientPersonaStateDefaultTypeInternal _CMsgClientPersonaState_default_instance_;
class CMsgClientPersonaState_Friend;
struct CMsgClientPersonaState_FriendDefaultTypeInternal;
extern CMsgClientPersonaState_FriendDefaultTypeInternal _CMsgClientPersonaState_Friend_default_instance_;
class CMsgClientPersonaState_Friend_ClanData;
struct CMsgClientPersonaState_Friend_ClanDataDefaultTypeInternal;
extern CMsgClientPersonaState_Friend_ClanDataDefaultTypeInternal _CMsgClientPersonaState_Friend_ClanData_default_instance_;
class CMsgClientPersonaState_Friend_KV;
struct CMsgClientPersonaState_Friend_KVDefaultTypeInternal;
extern CMsgClientPersonaState_Friend_KVDefaultTypeInternal _CMsgClientPersonaState_Friend_KV_default_instance_;
class CMsgClientPlayerNicknameList;
struct CMsgClientPlayerNicknameListDefaultTypeInternal;
extern CMsgClientPlayerNicknameListDefaultTypeInternal _CMsgClientPlayerNicknameList_default_instance_;
class CMsgClientPlayerNicknameList_PlayerNickname;
struct CMsgClientPlayerNicknameList_PlayerNicknameDefaultTypeInternal;
extern CMsgClientPlayerNicknameList_PlayerNicknameDefaultTypeInternal _CMsgClientPlayerNicknameList_PlayerNickname_default_instance_;
class CMsgClientRemoveFriend;
struct CMsgClientRemoveFriendDefaultTypeInternal;
extern CMsgClientRemoveFriendDefaultTypeInternal _CMsgClientRemoveFriend_default_instance_;
class CMsgClientRemoveFriendFromGroup;
struct CMsgClientRemoveFriendFromGroupDefaultTypeInternal;
extern CMsgClientRemoveFriendFromGroupDefaultTypeInternal _CMsgClientRemoveFriendFromGroup_default_instance_;
class CMsgClientRemoveFriendFromGroupResponse;
struct CMsgClientRemoveFriendFromGroupResponseDefaultTypeInternal;
extern CMsgClientRemoveFriendFromGroupResponseDefaultTypeInternal _CMsgClientRemoveFriendFromGroupResponse_default_instance_;
class CMsgClientRequestFriendData;
struct CMsgClientRequestFriendDataDefaultTypeInternal;
extern CMsgClientRequestFriendDataDefaultTypeInternal _CMsgClientRequestFriendData_default_instance_;
class CMsgClientSetPlayerNickname;
struct CMsgClientSetPlayerNicknameDefaultTypeInternal;
extern CMsgClientSetPlayerNicknameDefaultTypeInternal _CMsgClientSetPlayerNickname_default_instance_;
class CMsgClientSetPlayerNicknameResponse;
struct CMsgClientSetPlayerNicknameResponseDefaultTypeInternal;
extern CMsgClientSetPlayerNicknameResponseDefaultTypeInternal _CMsgClientSetPlayerNicknameResponse_default_instance_;
class CMsgPersonaChangeResponse;
struct CMsgPersonaChangeResponseDefaultTypeInternal;
extern CMsgPersonaChangeResponseDefaultTypeInternal _CMsgPersonaChangeResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgClientAddFriend* Arena::CreateMaybeMessage<::CMsgClientAddFriend>(Arena*);
template<> ::CMsgClientAddFriendResponse* Arena::CreateMaybeMessage<::CMsgClientAddFriendResponse>(Arena*);
template<> ::CMsgClientAddFriendToGroup* Arena::CreateMaybeMessage<::CMsgClientAddFriendToGroup>(Arena*);
template<> ::CMsgClientAddFriendToGroupResponse* Arena::CreateMaybeMessage<::CMsgClientAddFriendToGroupResponse>(Arena*);
template<> ::CMsgClientChangeStatus* Arena::CreateMaybeMessage<::CMsgClientChangeStatus>(Arena*);
template<> ::CMsgClientCreateFriendsGroup* Arena::CreateMaybeMessage<::CMsgClientCreateFriendsGroup>(Arena*);
template<> ::CMsgClientCreateFriendsGroupResponse* Arena::CreateMaybeMessage<::CMsgClientCreateFriendsGroupResponse>(Arena*);
template<> ::CMsgClientDeleteFriendsGroup* Arena::CreateMaybeMessage<::CMsgClientDeleteFriendsGroup>(Arena*);
template<> ::CMsgClientDeleteFriendsGroupResponse* Arena::CreateMaybeMessage<::CMsgClientDeleteFriendsGroupResponse>(Arena*);
template<> ::CMsgClientEmoticonList* Arena::CreateMaybeMessage<::CMsgClientEmoticonList>(Arena*);
template<> ::CMsgClientEmoticonList_Effect* Arena::CreateMaybeMessage<::CMsgClientEmoticonList_Effect>(Arena*);
template<> ::CMsgClientEmoticonList_Emoticon* Arena::CreateMaybeMessage<::CMsgClientEmoticonList_Emoticon>(Arena*);
template<> ::CMsgClientEmoticonList_Sticker* Arena::CreateMaybeMessage<::CMsgClientEmoticonList_Sticker>(Arena*);
template<> ::CMsgClientFriendMsg* Arena::CreateMaybeMessage<::CMsgClientFriendMsg>(Arena*);
template<> ::CMsgClientFriendMsgIncoming* Arena::CreateMaybeMessage<::CMsgClientFriendMsgIncoming>(Arena*);
template<> ::CMsgClientFriendProfileInfo* Arena::CreateMaybeMessage<::CMsgClientFriendProfileInfo>(Arena*);
template<> ::CMsgClientFriendProfileInfoResponse* Arena::CreateMaybeMessage<::CMsgClientFriendProfileInfoResponse>(Arena*);
template<> ::CMsgClientFriendsGroupsList* Arena::CreateMaybeMessage<::CMsgClientFriendsGroupsList>(Arena*);
template<> ::CMsgClientFriendsGroupsList_FriendGroup* Arena::CreateMaybeMessage<::CMsgClientFriendsGroupsList_FriendGroup>(Arena*);
template<> ::CMsgClientFriendsGroupsList_FriendGroupsMembership* Arena::CreateMaybeMessage<::CMsgClientFriendsGroupsList_FriendGroupsMembership>(Arena*);
template<> ::CMsgClientFriendsList* Arena::CreateMaybeMessage<::CMsgClientFriendsList>(Arena*);
template<> ::CMsgClientFriendsList_Friend* Arena::CreateMaybeMessage<::CMsgClientFriendsList_Friend>(Arena*);
template<> ::CMsgClientGetEmoticonList* Arena::CreateMaybeMessage<::CMsgClientGetEmoticonList>(Arena*);
template<> ::CMsgClientHideFriend* Arena::CreateMaybeMessage<::CMsgClientHideFriend>(Arena*);
template<> ::CMsgClientManageFriendsGroup* Arena::CreateMaybeMessage<::CMsgClientManageFriendsGroup>(Arena*);
template<> ::CMsgClientManageFriendsGroupResponse* Arena::CreateMaybeMessage<::CMsgClientManageFriendsGroupResponse>(Arena*);
template<> ::CMsgClientPersonaState* Arena::CreateMaybeMessage<::CMsgClientPersonaState>(Arena*);
template<> ::CMsgClientPersonaState_Friend* Arena::CreateMaybeMessage<::CMsgClientPersonaState_Friend>(Arena*);
template<> ::CMsgClientPersonaState_Friend_ClanData* Arena::CreateMaybeMessage<::CMsgClientPersonaState_Friend_ClanData>(Arena*);
template<> ::CMsgClientPersonaState_Friend_KV* Arena::CreateMaybeMessage<::CMsgClientPersonaState_Friend_KV>(Arena*);
template<> ::CMsgClientPlayerNicknameList* Arena::CreateMaybeMessage<::CMsgClientPlayerNicknameList>(Arena*);
template<> ::CMsgClientPlayerNicknameList_PlayerNickname* Arena::CreateMaybeMessage<::CMsgClientPlayerNicknameList_PlayerNickname>(Arena*);
template<> ::CMsgClientRemoveFriend* Arena::CreateMaybeMessage<::CMsgClientRemoveFriend>(Arena*);
template<> ::CMsgClientRemoveFriendFromGroup* Arena::CreateMaybeMessage<::CMsgClientRemoveFriendFromGroup>(Arena*);
template<> ::CMsgClientRemoveFriendFromGroupResponse* Arena::CreateMaybeMessage<::CMsgClientRemoveFriendFromGroupResponse>(Arena*);
template<> ::CMsgClientRequestFriendData* Arena::CreateMaybeMessage<::CMsgClientRequestFriendData>(Arena*);
template<> ::CMsgClientSetPlayerNickname* Arena::CreateMaybeMessage<::CMsgClientSetPlayerNickname>(Arena*);
template<> ::CMsgClientSetPlayerNicknameResponse* Arena::CreateMaybeMessage<::CMsgClientSetPlayerNicknameResponse>(Arena*);
template<> ::CMsgPersonaChangeResponse* Arena::CreateMaybeMessage<::CMsgPersonaChangeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CMsgClientFriendMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientFriendMsg) */ {
 public:
  inline CMsgClientFriendMsg() : CMsgClientFriendMsg(nullptr) {}
  ~CMsgClientFriendMsg() override;
  explicit constexpr CMsgClientFriendMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientFriendMsg(const CMsgClientFriendMsg& from);
  CMsgClientFriendMsg(CMsgClientFriendMsg&& from) noexcept
    : CMsgClientFriendMsg() {
    *this = ::std::move(from);
  }

  inline CMsgClientFriendMsg& operator=(const CMsgClientFriendMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientFriendMsg& operator=(CMsgClientFriendMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientFriendMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientFriendMsg* internal_default_instance() {
    return reinterpret_cast<const CMsgClientFriendMsg*>(
               &_CMsgClientFriendMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgClientFriendMsg& a, CMsgClientFriendMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientFriendMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientFriendMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientFriendMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientFriendMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientFriendMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientFriendMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientFriendMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientFriendMsg";
  }
  protected:
  explicit CMsgClientFriendMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kSteamidFieldNumber = 1,
    kChatEntryTypeFieldNumber = 2,
    kRtime32ServerTimestampFieldNumber = 4,
    kEchoToSenderFieldNumber = 5,
  };
  // optional bytes message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional int32 chat_entry_type = 2;
  bool has_chat_entry_type() const;
  private:
  bool _internal_has_chat_entry_type() const;
  public:
  void clear_chat_entry_type();
  int32_t chat_entry_type() const;
  void set_chat_entry_type(int32_t value);
  private:
  int32_t _internal_chat_entry_type() const;
  void _internal_set_chat_entry_type(int32_t value);
  public:

  // optional fixed32 rtime32_server_timestamp = 4;
  bool has_rtime32_server_timestamp() const;
  private:
  bool _internal_has_rtime32_server_timestamp() const;
  public:
  void clear_rtime32_server_timestamp();
  uint32_t rtime32_server_timestamp() const;
  void set_rtime32_server_timestamp(uint32_t value);
  private:
  uint32_t _internal_rtime32_server_timestamp() const;
  void _internal_set_rtime32_server_timestamp(uint32_t value);
  public:

  // optional bool echo_to_sender = 5;
  bool has_echo_to_sender() const;
  private:
  bool _internal_has_echo_to_sender() const;
  public:
  void clear_echo_to_sender();
  bool echo_to_sender() const;
  void set_echo_to_sender(bool value);
  private:
  bool _internal_echo_to_sender() const;
  void _internal_set_echo_to_sender(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientFriendMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  uint64_t steamid_;
  int32_t chat_entry_type_;
  uint32_t rtime32_server_timestamp_;
  bool echo_to_sender_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientFriendMsgIncoming final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientFriendMsgIncoming) */ {
 public:
  inline CMsgClientFriendMsgIncoming() : CMsgClientFriendMsgIncoming(nullptr) {}
  ~CMsgClientFriendMsgIncoming() override;
  explicit constexpr CMsgClientFriendMsgIncoming(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientFriendMsgIncoming(const CMsgClientFriendMsgIncoming& from);
  CMsgClientFriendMsgIncoming(CMsgClientFriendMsgIncoming&& from) noexcept
    : CMsgClientFriendMsgIncoming() {
    *this = ::std::move(from);
  }

  inline CMsgClientFriendMsgIncoming& operator=(const CMsgClientFriendMsgIncoming& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientFriendMsgIncoming& operator=(CMsgClientFriendMsgIncoming&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientFriendMsgIncoming& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientFriendMsgIncoming* internal_default_instance() {
    return reinterpret_cast<const CMsgClientFriendMsgIncoming*>(
               &_CMsgClientFriendMsgIncoming_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgClientFriendMsgIncoming& a, CMsgClientFriendMsgIncoming& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientFriendMsgIncoming* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientFriendMsgIncoming* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientFriendMsgIncoming* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientFriendMsgIncoming>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientFriendMsgIncoming& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientFriendMsgIncoming& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientFriendMsgIncoming* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientFriendMsgIncoming";
  }
  protected:
  explicit CMsgClientFriendMsgIncoming(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 4,
    kSteamidFromFieldNumber = 1,
    kChatEntryTypeFieldNumber = 2,
    kFromLimitedAccountFieldNumber = 3,
    kRtime32ServerTimestampFieldNumber = 5,
  };
  // optional bytes message = 4;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional fixed64 steamid_from = 1;
  bool has_steamid_from() const;
  private:
  bool _internal_has_steamid_from() const;
  public:
  void clear_steamid_from();
  uint64_t steamid_from() const;
  void set_steamid_from(uint64_t value);
  private:
  uint64_t _internal_steamid_from() const;
  void _internal_set_steamid_from(uint64_t value);
  public:

  // optional int32 chat_entry_type = 2;
  bool has_chat_entry_type() const;
  private:
  bool _internal_has_chat_entry_type() const;
  public:
  void clear_chat_entry_type();
  int32_t chat_entry_type() const;
  void set_chat_entry_type(int32_t value);
  private:
  int32_t _internal_chat_entry_type() const;
  void _internal_set_chat_entry_type(int32_t value);
  public:

  // optional bool from_limited_account = 3;
  bool has_from_limited_account() const;
  private:
  bool _internal_has_from_limited_account() const;
  public:
  void clear_from_limited_account();
  bool from_limited_account() const;
  void set_from_limited_account(bool value);
  private:
  bool _internal_from_limited_account() const;
  void _internal_set_from_limited_account(bool value);
  public:

  // optional fixed32 rtime32_server_timestamp = 5;
  bool has_rtime32_server_timestamp() const;
  private:
  bool _internal_has_rtime32_server_timestamp() const;
  public:
  void clear_rtime32_server_timestamp();
  uint32_t rtime32_server_timestamp() const;
  void set_rtime32_server_timestamp(uint32_t value);
  private:
  uint32_t _internal_rtime32_server_timestamp() const;
  void _internal_set_rtime32_server_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientFriendMsgIncoming)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  uint64_t steamid_from_;
  int32_t chat_entry_type_;
  bool from_limited_account_;
  uint32_t rtime32_server_timestamp_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientAddFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientAddFriend) */ {
 public:
  inline CMsgClientAddFriend() : CMsgClientAddFriend(nullptr) {}
  ~CMsgClientAddFriend() override;
  explicit constexpr CMsgClientAddFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientAddFriend(const CMsgClientAddFriend& from);
  CMsgClientAddFriend(CMsgClientAddFriend&& from) noexcept
    : CMsgClientAddFriend() {
    *this = ::std::move(from);
  }

  inline CMsgClientAddFriend& operator=(const CMsgClientAddFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientAddFriend& operator=(CMsgClientAddFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientAddFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientAddFriend* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAddFriend*>(
               &_CMsgClientAddFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgClientAddFriend& a, CMsgClientAddFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientAddFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientAddFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientAddFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientAddFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientAddFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientAddFriend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAddFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientAddFriend";
  }
  protected:
  explicit CMsgClientAddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountnameOrEmailToAddFieldNumber = 2,
    kSteamidToAddFieldNumber = 1,
  };
  // optional string accountname_or_email_to_add = 2;
  bool has_accountname_or_email_to_add() const;
  private:
  bool _internal_has_accountname_or_email_to_add() const;
  public:
  void clear_accountname_or_email_to_add();
  const std::string& accountname_or_email_to_add() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accountname_or_email_to_add(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accountname_or_email_to_add();
  PROTOBUF_NODISCARD std::string* release_accountname_or_email_to_add();
  void set_allocated_accountname_or_email_to_add(std::string* accountname_or_email_to_add);
  private:
  const std::string& _internal_accountname_or_email_to_add() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accountname_or_email_to_add(const std::string& value);
  std::string* _internal_mutable_accountname_or_email_to_add();
  public:

  // optional fixed64 steamid_to_add = 1;
  bool has_steamid_to_add() const;
  private:
  bool _internal_has_steamid_to_add() const;
  public:
  void clear_steamid_to_add();
  uint64_t steamid_to_add() const;
  void set_steamid_to_add(uint64_t value);
  private:
  uint64_t _internal_steamid_to_add() const;
  void _internal_set_steamid_to_add(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientAddFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountname_or_email_to_add_;
  uint64_t steamid_to_add_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientAddFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientAddFriendResponse) */ {
 public:
  inline CMsgClientAddFriendResponse() : CMsgClientAddFriendResponse(nullptr) {}
  ~CMsgClientAddFriendResponse() override;
  explicit constexpr CMsgClientAddFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientAddFriendResponse(const CMsgClientAddFriendResponse& from);
  CMsgClientAddFriendResponse(CMsgClientAddFriendResponse&& from) noexcept
    : CMsgClientAddFriendResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientAddFriendResponse& operator=(const CMsgClientAddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientAddFriendResponse& operator=(CMsgClientAddFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientAddFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientAddFriendResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAddFriendResponse*>(
               &_CMsgClientAddFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgClientAddFriendResponse& a, CMsgClientAddFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientAddFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientAddFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientAddFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientAddFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientAddFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientAddFriendResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAddFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientAddFriendResponse";
  }
  protected:
  explicit CMsgClientAddFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaNameAddedFieldNumber = 3,
    kSteamIdAddedFieldNumber = 2,
    kEresultFieldNumber = 1,
  };
  // optional string persona_name_added = 3;
  bool has_persona_name_added() const;
  private:
  bool _internal_has_persona_name_added() const;
  public:
  void clear_persona_name_added();
  const std::string& persona_name_added() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name_added(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name_added();
  PROTOBUF_NODISCARD std::string* release_persona_name_added();
  void set_allocated_persona_name_added(std::string* persona_name_added);
  private:
  const std::string& _internal_persona_name_added() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name_added(const std::string& value);
  std::string* _internal_mutable_persona_name_added();
  public:

  // optional fixed64 steam_id_added = 2;
  bool has_steam_id_added() const;
  private:
  bool _internal_has_steam_id_added() const;
  public:
  void clear_steam_id_added();
  uint64_t steam_id_added() const;
  void set_steam_id_added(uint64_t value);
  private:
  uint64_t _internal_steam_id_added() const;
  void _internal_set_steam_id_added(uint64_t value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientAddFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_added_;
  uint64_t steam_id_added_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientRemoveFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientRemoveFriend) */ {
 public:
  inline CMsgClientRemoveFriend() : CMsgClientRemoveFriend(nullptr) {}
  ~CMsgClientRemoveFriend() override;
  explicit constexpr CMsgClientRemoveFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientRemoveFriend(const CMsgClientRemoveFriend& from);
  CMsgClientRemoveFriend(CMsgClientRemoveFriend&& from) noexcept
    : CMsgClientRemoveFriend() {
    *this = ::std::move(from);
  }

  inline CMsgClientRemoveFriend& operator=(const CMsgClientRemoveFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientRemoveFriend& operator=(CMsgClientRemoveFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientRemoveFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientRemoveFriend* internal_default_instance() {
    return reinterpret_cast<const CMsgClientRemoveFriend*>(
               &_CMsgClientRemoveFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgClientRemoveFriend& a, CMsgClientRemoveFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientRemoveFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientRemoveFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientRemoveFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientRemoveFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientRemoveFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientRemoveFriend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientRemoveFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientRemoveFriend";
  }
  protected:
  explicit CMsgClientRemoveFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendidFieldNumber = 1,
  };
  // optional fixed64 friendid = 1;
  bool has_friendid() const;
  private:
  bool _internal_has_friendid() const;
  public:
  void clear_friendid();
  uint64_t friendid() const;
  void set_friendid(uint64_t value);
  private:
  uint64_t _internal_friendid() const;
  void _internal_set_friendid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientRemoveFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t friendid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientHideFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientHideFriend) */ {
 public:
  inline CMsgClientHideFriend() : CMsgClientHideFriend(nullptr) {}
  ~CMsgClientHideFriend() override;
  explicit constexpr CMsgClientHideFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientHideFriend(const CMsgClientHideFriend& from);
  CMsgClientHideFriend(CMsgClientHideFriend&& from) noexcept
    : CMsgClientHideFriend() {
    *this = ::std::move(from);
  }

  inline CMsgClientHideFriend& operator=(const CMsgClientHideFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientHideFriend& operator=(CMsgClientHideFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientHideFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientHideFriend* internal_default_instance() {
    return reinterpret_cast<const CMsgClientHideFriend*>(
               &_CMsgClientHideFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgClientHideFriend& a, CMsgClientHideFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientHideFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientHideFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientHideFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientHideFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientHideFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientHideFriend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientHideFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientHideFriend";
  }
  protected:
  explicit CMsgClientHideFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendidFieldNumber = 1,
    kHideFieldNumber = 2,
  };
  // optional fixed64 friendid = 1;
  bool has_friendid() const;
  private:
  bool _internal_has_friendid() const;
  public:
  void clear_friendid();
  uint64_t friendid() const;
  void set_friendid(uint64_t value);
  private:
  uint64_t _internal_friendid() const;
  void _internal_set_friendid(uint64_t value);
  public:

  // optional bool hide = 2;
  bool has_hide() const;
  private:
  bool _internal_has_hide() const;
  public:
  void clear_hide();
  bool hide() const;
  void set_hide(bool value);
  private:
  bool _internal_hide() const;
  void _internal_set_hide(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientHideFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t friendid_;
  bool hide_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientFriendsList_Friend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientFriendsList.Friend) */ {
 public:
  inline CMsgClientFriendsList_Friend() : CMsgClientFriendsList_Friend(nullptr) {}
  ~CMsgClientFriendsList_Friend() override;
  explicit constexpr CMsgClientFriendsList_Friend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientFriendsList_Friend(const CMsgClientFriendsList_Friend& from);
  CMsgClientFriendsList_Friend(CMsgClientFriendsList_Friend&& from) noexcept
    : CMsgClientFriendsList_Friend() {
    *this = ::std::move(from);
  }

  inline CMsgClientFriendsList_Friend& operator=(const CMsgClientFriendsList_Friend& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientFriendsList_Friend& operator=(CMsgClientFriendsList_Friend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientFriendsList_Friend& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientFriendsList_Friend* internal_default_instance() {
    return reinterpret_cast<const CMsgClientFriendsList_Friend*>(
               &_CMsgClientFriendsList_Friend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgClientFriendsList_Friend& a, CMsgClientFriendsList_Friend& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientFriendsList_Friend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientFriendsList_Friend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientFriendsList_Friend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientFriendsList_Friend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientFriendsList_Friend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientFriendsList_Friend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientFriendsList_Friend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientFriendsList.Friend";
  }
  protected:
  explicit CMsgClientFriendsList_Friend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUlfriendidFieldNumber = 1,
    kEfriendrelationshipFieldNumber = 2,
  };
  // optional fixed64 ulfriendid = 1;
  bool has_ulfriendid() const;
  private:
  bool _internal_has_ulfriendid() const;
  public:
  void clear_ulfriendid();
  uint64_t ulfriendid() const;
  void set_ulfriendid(uint64_t value);
  private:
  uint64_t _internal_ulfriendid() const;
  void _internal_set_ulfriendid(uint64_t value);
  public:

  // optional uint32 efriendrelationship = 2;
  bool has_efriendrelationship() const;
  private:
  bool _internal_has_efriendrelationship() const;
  public:
  void clear_efriendrelationship();
  uint32_t efriendrelationship() const;
  void set_efriendrelationship(uint32_t value);
  private:
  uint32_t _internal_efriendrelationship() const;
  void _internal_set_efriendrelationship(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientFriendsList.Friend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t ulfriendid_;
  uint32_t efriendrelationship_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientFriendsList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientFriendsList) */ {
 public:
  inline CMsgClientFriendsList() : CMsgClientFriendsList(nullptr) {}
  ~CMsgClientFriendsList() override;
  explicit constexpr CMsgClientFriendsList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientFriendsList(const CMsgClientFriendsList& from);
  CMsgClientFriendsList(CMsgClientFriendsList&& from) noexcept
    : CMsgClientFriendsList() {
    *this = ::std::move(from);
  }

  inline CMsgClientFriendsList& operator=(const CMsgClientFriendsList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientFriendsList& operator=(CMsgClientFriendsList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientFriendsList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientFriendsList* internal_default_instance() {
    return reinterpret_cast<const CMsgClientFriendsList*>(
               &_CMsgClientFriendsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgClientFriendsList& a, CMsgClientFriendsList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientFriendsList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientFriendsList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientFriendsList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientFriendsList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientFriendsList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientFriendsList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientFriendsList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientFriendsList";
  }
  protected:
  explicit CMsgClientFriendsList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientFriendsList_Friend Friend;

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 2,
    kMaxFriendCountFieldNumber = 3,
    kBincrementalFieldNumber = 1,
    kFriendsLimitHitFieldNumber = 5,
    kActiveFriendCountFieldNumber = 4,
  };
  // repeated .CMsgClientFriendsList.Friend friends = 2;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::CMsgClientFriendsList_Friend* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientFriendsList_Friend >*
      mutable_friends();
  private:
  const ::CMsgClientFriendsList_Friend& _internal_friends(int index) const;
  ::CMsgClientFriendsList_Friend* _internal_add_friends();
  public:
  const ::CMsgClientFriendsList_Friend& friends(int index) const;
  ::CMsgClientFriendsList_Friend* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientFriendsList_Friend >&
      friends() const;

  // optional uint32 max_friend_count = 3;
  bool has_max_friend_count() const;
  private:
  bool _internal_has_max_friend_count() const;
  public:
  void clear_max_friend_count();
  uint32_t max_friend_count() const;
  void set_max_friend_count(uint32_t value);
  private:
  uint32_t _internal_max_friend_count() const;
  void _internal_set_max_friend_count(uint32_t value);
  public:

  // optional bool bincremental = 1;
  bool has_bincremental() const;
  private:
  bool _internal_has_bincremental() const;
  public:
  void clear_bincremental();
  bool bincremental() const;
  void set_bincremental(bool value);
  private:
  bool _internal_bincremental() const;
  void _internal_set_bincremental(bool value);
  public:

  // optional bool friends_limit_hit = 5;
  bool has_friends_limit_hit() const;
  private:
  bool _internal_has_friends_limit_hit() const;
  public:
  void clear_friends_limit_hit();
  bool friends_limit_hit() const;
  void set_friends_limit_hit(bool value);
  private:
  bool _internal_friends_limit_hit() const;
  void _internal_set_friends_limit_hit(bool value);
  public:

  // optional uint32 active_friend_count = 4;
  bool has_active_friend_count() const;
  private:
  bool _internal_has_active_friend_count() const;
  public:
  void clear_active_friend_count();
  uint32_t active_friend_count() const;
  void set_active_friend_count(uint32_t value);
  private:
  uint32_t _internal_active_friend_count() const;
  void _internal_set_active_friend_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientFriendsList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientFriendsList_Friend > friends_;
  uint32_t max_friend_count_;
  bool bincremental_;
  bool friends_limit_hit_;
  uint32_t active_friend_count_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientFriendsGroupsList_FriendGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientFriendsGroupsList.FriendGroup) */ {
 public:
  inline CMsgClientFriendsGroupsList_FriendGroup() : CMsgClientFriendsGroupsList_FriendGroup(nullptr) {}
  ~CMsgClientFriendsGroupsList_FriendGroup() override;
  explicit constexpr CMsgClientFriendsGroupsList_FriendGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientFriendsGroupsList_FriendGroup(const CMsgClientFriendsGroupsList_FriendGroup& from);
  CMsgClientFriendsGroupsList_FriendGroup(CMsgClientFriendsGroupsList_FriendGroup&& from) noexcept
    : CMsgClientFriendsGroupsList_FriendGroup() {
    *this = ::std::move(from);
  }

  inline CMsgClientFriendsGroupsList_FriendGroup& operator=(const CMsgClientFriendsGroupsList_FriendGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientFriendsGroupsList_FriendGroup& operator=(CMsgClientFriendsGroupsList_FriendGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientFriendsGroupsList_FriendGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientFriendsGroupsList_FriendGroup* internal_default_instance() {
    return reinterpret_cast<const CMsgClientFriendsGroupsList_FriendGroup*>(
               &_CMsgClientFriendsGroupsList_FriendGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgClientFriendsGroupsList_FriendGroup& a, CMsgClientFriendsGroupsList_FriendGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientFriendsGroupsList_FriendGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientFriendsGroupsList_FriendGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientFriendsGroupsList_FriendGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientFriendsGroupsList_FriendGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientFriendsGroupsList_FriendGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientFriendsGroupsList_FriendGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientFriendsGroupsList_FriendGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientFriendsGroupsList.FriendGroup";
  }
  protected:
  explicit CMsgClientFriendsGroupsList_FriendGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrGroupNameFieldNumber = 2,
    kNGroupIDFieldNumber = 1,
  };
  // optional string strGroupName = 2;
  bool has_strgroupname() const;
  private:
  bool _internal_has_strgroupname() const;
  public:
  void clear_strgroupname();
  const std::string& strgroupname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strgroupname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strgroupname();
  PROTOBUF_NODISCARD std::string* release_strgroupname();
  void set_allocated_strgroupname(std::string* strgroupname);
  private:
  const std::string& _internal_strgroupname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strgroupname(const std::string& value);
  std::string* _internal_mutable_strgroupname();
  public:

  // optional int32 nGroupID = 1;
  bool has_ngroupid() const;
  private:
  bool _internal_has_ngroupid() const;
  public:
  void clear_ngroupid();
  int32_t ngroupid() const;
  void set_ngroupid(int32_t value);
  private:
  int32_t _internal_ngroupid() const;
  void _internal_set_ngroupid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientFriendsGroupsList.FriendGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strgroupname_;
  int32_t ngroupid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientFriendsGroupsList_FriendGroupsMembership final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientFriendsGroupsList.FriendGroupsMembership) */ {
 public:
  inline CMsgClientFriendsGroupsList_FriendGroupsMembership() : CMsgClientFriendsGroupsList_FriendGroupsMembership(nullptr) {}
  ~CMsgClientFriendsGroupsList_FriendGroupsMembership() override;
  explicit constexpr CMsgClientFriendsGroupsList_FriendGroupsMembership(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientFriendsGroupsList_FriendGroupsMembership(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from);
  CMsgClientFriendsGroupsList_FriendGroupsMembership(CMsgClientFriendsGroupsList_FriendGroupsMembership&& from) noexcept
    : CMsgClientFriendsGroupsList_FriendGroupsMembership() {
    *this = ::std::move(from);
  }

  inline CMsgClientFriendsGroupsList_FriendGroupsMembership& operator=(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientFriendsGroupsList_FriendGroupsMembership& operator=(CMsgClientFriendsGroupsList_FriendGroupsMembership&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientFriendsGroupsList_FriendGroupsMembership& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientFriendsGroupsList_FriendGroupsMembership* internal_default_instance() {
    return reinterpret_cast<const CMsgClientFriendsGroupsList_FriendGroupsMembership*>(
               &_CMsgClientFriendsGroupsList_FriendGroupsMembership_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgClientFriendsGroupsList_FriendGroupsMembership& a, CMsgClientFriendsGroupsList_FriendGroupsMembership& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientFriendsGroupsList_FriendGroupsMembership* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientFriendsGroupsList_FriendGroupsMembership* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientFriendsGroupsList_FriendGroupsMembership* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientFriendsGroupsList_FriendGroupsMembership>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientFriendsGroupsList_FriendGroupsMembership* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientFriendsGroupsList.FriendGroupsMembership";
  }
  protected:
  explicit CMsgClientFriendsGroupsList_FriendGroupsMembership(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUlSteamIDFieldNumber = 1,
    kNGroupIDFieldNumber = 2,
  };
  // optional fixed64 ulSteamID = 1;
  bool has_ulsteamid() const;
  private:
  bool _internal_has_ulsteamid() const;
  public:
  void clear_ulsteamid();
  uint64_t ulsteamid() const;
  void set_ulsteamid(uint64_t value);
  private:
  uint64_t _internal_ulsteamid() const;
  void _internal_set_ulsteamid(uint64_t value);
  public:

  // optional int32 nGroupID = 2;
  bool has_ngroupid() const;
  private:
  bool _internal_has_ngroupid() const;
  public:
  void clear_ngroupid();
  int32_t ngroupid() const;
  void set_ngroupid(int32_t value);
  private:
  int32_t _internal_ngroupid() const;
  void _internal_set_ngroupid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientFriendsGroupsList.FriendGroupsMembership)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t ulsteamid_;
  int32_t ngroupid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientFriendsGroupsList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientFriendsGroupsList) */ {
 public:
  inline CMsgClientFriendsGroupsList() : CMsgClientFriendsGroupsList(nullptr) {}
  ~CMsgClientFriendsGroupsList() override;
  explicit constexpr CMsgClientFriendsGroupsList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientFriendsGroupsList(const CMsgClientFriendsGroupsList& from);
  CMsgClientFriendsGroupsList(CMsgClientFriendsGroupsList&& from) noexcept
    : CMsgClientFriendsGroupsList() {
    *this = ::std::move(from);
  }

  inline CMsgClientFriendsGroupsList& operator=(const CMsgClientFriendsGroupsList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientFriendsGroupsList& operator=(CMsgClientFriendsGroupsList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientFriendsGroupsList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientFriendsGroupsList* internal_default_instance() {
    return reinterpret_cast<const CMsgClientFriendsGroupsList*>(
               &_CMsgClientFriendsGroupsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgClientFriendsGroupsList& a, CMsgClientFriendsGroupsList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientFriendsGroupsList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientFriendsGroupsList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientFriendsGroupsList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientFriendsGroupsList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientFriendsGroupsList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientFriendsGroupsList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientFriendsGroupsList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientFriendsGroupsList";
  }
  protected:
  explicit CMsgClientFriendsGroupsList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientFriendsGroupsList_FriendGroup FriendGroup;
  typedef CMsgClientFriendsGroupsList_FriendGroupsMembership FriendGroupsMembership;

  // accessors -------------------------------------------------------

  enum : int {
    kFriendGroupsFieldNumber = 3,
    kMembershipsFieldNumber = 4,
    kBremovalFieldNumber = 1,
    kBincrementalFieldNumber = 2,
  };
  // repeated .CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
  int friendgroups_size() const;
  private:
  int _internal_friendgroups_size() const;
  public:
  void clear_friendgroups();
  ::CMsgClientFriendsGroupsList_FriendGroup* mutable_friendgroups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroup >*
      mutable_friendgroups();
  private:
  const ::CMsgClientFriendsGroupsList_FriendGroup& _internal_friendgroups(int index) const;
  ::CMsgClientFriendsGroupsList_FriendGroup* _internal_add_friendgroups();
  public:
  const ::CMsgClientFriendsGroupsList_FriendGroup& friendgroups(int index) const;
  ::CMsgClientFriendsGroupsList_FriendGroup* add_friendgroups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroup >&
      friendgroups() const;

  // repeated .CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
  int memberships_size() const;
  private:
  int _internal_memberships_size() const;
  public:
  void clear_memberships();
  ::CMsgClientFriendsGroupsList_FriendGroupsMembership* mutable_memberships(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroupsMembership >*
      mutable_memberships();
  private:
  const ::CMsgClientFriendsGroupsList_FriendGroupsMembership& _internal_memberships(int index) const;
  ::CMsgClientFriendsGroupsList_FriendGroupsMembership* _internal_add_memberships();
  public:
  const ::CMsgClientFriendsGroupsList_FriendGroupsMembership& memberships(int index) const;
  ::CMsgClientFriendsGroupsList_FriendGroupsMembership* add_memberships();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroupsMembership >&
      memberships() const;

  // optional bool bremoval = 1;
  bool has_bremoval() const;
  private:
  bool _internal_has_bremoval() const;
  public:
  void clear_bremoval();
  bool bremoval() const;
  void set_bremoval(bool value);
  private:
  bool _internal_bremoval() const;
  void _internal_set_bremoval(bool value);
  public:

  // optional bool bincremental = 2;
  bool has_bincremental() const;
  private:
  bool _internal_has_bincremental() const;
  public:
  void clear_bincremental();
  bool bincremental() const;
  void set_bincremental(bool value);
  private:
  bool _internal_bincremental() const;
  void _internal_set_bincremental(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientFriendsGroupsList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroup > friendgroups_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroupsMembership > memberships_;
  bool bremoval_;
  bool bincremental_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientPlayerNicknameList_PlayerNickname final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientPlayerNicknameList.PlayerNickname) */ {
 public:
  inline CMsgClientPlayerNicknameList_PlayerNickname() : CMsgClientPlayerNicknameList_PlayerNickname(nullptr) {}
  ~CMsgClientPlayerNicknameList_PlayerNickname() override;
  explicit constexpr CMsgClientPlayerNicknameList_PlayerNickname(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientPlayerNicknameList_PlayerNickname(const CMsgClientPlayerNicknameList_PlayerNickname& from);
  CMsgClientPlayerNicknameList_PlayerNickname(CMsgClientPlayerNicknameList_PlayerNickname&& from) noexcept
    : CMsgClientPlayerNicknameList_PlayerNickname() {
    *this = ::std::move(from);
  }

  inline CMsgClientPlayerNicknameList_PlayerNickname& operator=(const CMsgClientPlayerNicknameList_PlayerNickname& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientPlayerNicknameList_PlayerNickname& operator=(CMsgClientPlayerNicknameList_PlayerNickname&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientPlayerNicknameList_PlayerNickname& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientPlayerNicknameList_PlayerNickname* internal_default_instance() {
    return reinterpret_cast<const CMsgClientPlayerNicknameList_PlayerNickname*>(
               &_CMsgClientPlayerNicknameList_PlayerNickname_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgClientPlayerNicknameList_PlayerNickname& a, CMsgClientPlayerNicknameList_PlayerNickname& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientPlayerNicknameList_PlayerNickname* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientPlayerNicknameList_PlayerNickname* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientPlayerNicknameList_PlayerNickname* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientPlayerNicknameList_PlayerNickname>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientPlayerNicknameList_PlayerNickname& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientPlayerNicknameList_PlayerNickname& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientPlayerNicknameList_PlayerNickname* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientPlayerNicknameList.PlayerNickname";
  }
  protected:
  explicit CMsgClientPlayerNicknameList_PlayerNickname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kSteamidFieldNumber = 1,
  };
  // optional string nickname = 3;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientPlayerNicknameList.PlayerNickname)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientPlayerNicknameList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientPlayerNicknameList) */ {
 public:
  inline CMsgClientPlayerNicknameList() : CMsgClientPlayerNicknameList(nullptr) {}
  ~CMsgClientPlayerNicknameList() override;
  explicit constexpr CMsgClientPlayerNicknameList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientPlayerNicknameList(const CMsgClientPlayerNicknameList& from);
  CMsgClientPlayerNicknameList(CMsgClientPlayerNicknameList&& from) noexcept
    : CMsgClientPlayerNicknameList() {
    *this = ::std::move(from);
  }

  inline CMsgClientPlayerNicknameList& operator=(const CMsgClientPlayerNicknameList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientPlayerNicknameList& operator=(CMsgClientPlayerNicknameList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientPlayerNicknameList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientPlayerNicknameList* internal_default_instance() {
    return reinterpret_cast<const CMsgClientPlayerNicknameList*>(
               &_CMsgClientPlayerNicknameList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgClientPlayerNicknameList& a, CMsgClientPlayerNicknameList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientPlayerNicknameList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientPlayerNicknameList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientPlayerNicknameList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientPlayerNicknameList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientPlayerNicknameList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientPlayerNicknameList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientPlayerNicknameList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientPlayerNicknameList";
  }
  protected:
  explicit CMsgClientPlayerNicknameList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientPlayerNicknameList_PlayerNickname PlayerNickname;

  // accessors -------------------------------------------------------

  enum : int {
    kNicknamesFieldNumber = 3,
    kRemovalFieldNumber = 1,
    kIncrementalFieldNumber = 2,
  };
  // repeated .CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
  int nicknames_size() const;
  private:
  int _internal_nicknames_size() const;
  public:
  void clear_nicknames();
  ::CMsgClientPlayerNicknameList_PlayerNickname* mutable_nicknames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientPlayerNicknameList_PlayerNickname >*
      mutable_nicknames();
  private:
  const ::CMsgClientPlayerNicknameList_PlayerNickname& _internal_nicknames(int index) const;
  ::CMsgClientPlayerNicknameList_PlayerNickname* _internal_add_nicknames();
  public:
  const ::CMsgClientPlayerNicknameList_PlayerNickname& nicknames(int index) const;
  ::CMsgClientPlayerNicknameList_PlayerNickname* add_nicknames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientPlayerNicknameList_PlayerNickname >&
      nicknames() const;

  // optional bool removal = 1;
  bool has_removal() const;
  private:
  bool _internal_has_removal() const;
  public:
  void clear_removal();
  bool removal() const;
  void set_removal(bool value);
  private:
  bool _internal_removal() const;
  void _internal_set_removal(bool value);
  public:

  // optional bool incremental = 2;
  bool has_incremental() const;
  private:
  bool _internal_has_incremental() const;
  public:
  void clear_incremental();
  bool incremental() const;
  void set_incremental(bool value);
  private:
  bool _internal_incremental() const;
  void _internal_set_incremental(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientPlayerNicknameList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientPlayerNicknameList_PlayerNickname > nicknames_;
  bool removal_;
  bool incremental_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientSetPlayerNickname final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientSetPlayerNickname) */ {
 public:
  inline CMsgClientSetPlayerNickname() : CMsgClientSetPlayerNickname(nullptr) {}
  ~CMsgClientSetPlayerNickname() override;
  explicit constexpr CMsgClientSetPlayerNickname(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientSetPlayerNickname(const CMsgClientSetPlayerNickname& from);
  CMsgClientSetPlayerNickname(CMsgClientSetPlayerNickname&& from) noexcept
    : CMsgClientSetPlayerNickname() {
    *this = ::std::move(from);
  }

  inline CMsgClientSetPlayerNickname& operator=(const CMsgClientSetPlayerNickname& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientSetPlayerNickname& operator=(CMsgClientSetPlayerNickname&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientSetPlayerNickname& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientSetPlayerNickname* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSetPlayerNickname*>(
               &_CMsgClientSetPlayerNickname_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgClientSetPlayerNickname& a, CMsgClientSetPlayerNickname& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientSetPlayerNickname* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientSetPlayerNickname* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientSetPlayerNickname* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientSetPlayerNickname>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientSetPlayerNickname& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientSetPlayerNickname& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSetPlayerNickname* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientSetPlayerNickname";
  }
  protected:
  explicit CMsgClientSetPlayerNickname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // optional string nickname = 2;
  bool has_nickname() const;
  private:
  bool _internal_has_nickname() const;
  public:
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientSetPlayerNickname)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientSetPlayerNicknameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientSetPlayerNicknameResponse) */ {
 public:
  inline CMsgClientSetPlayerNicknameResponse() : CMsgClientSetPlayerNicknameResponse(nullptr) {}
  ~CMsgClientSetPlayerNicknameResponse() override;
  explicit constexpr CMsgClientSetPlayerNicknameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientSetPlayerNicknameResponse(const CMsgClientSetPlayerNicknameResponse& from);
  CMsgClientSetPlayerNicknameResponse(CMsgClientSetPlayerNicknameResponse&& from) noexcept
    : CMsgClientSetPlayerNicknameResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientSetPlayerNicknameResponse& operator=(const CMsgClientSetPlayerNicknameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientSetPlayerNicknameResponse& operator=(CMsgClientSetPlayerNicknameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientSetPlayerNicknameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientSetPlayerNicknameResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSetPlayerNicknameResponse*>(
               &_CMsgClientSetPlayerNicknameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgClientSetPlayerNicknameResponse& a, CMsgClientSetPlayerNicknameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientSetPlayerNicknameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientSetPlayerNicknameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientSetPlayerNicknameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientSetPlayerNicknameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientSetPlayerNicknameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientSetPlayerNicknameResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSetPlayerNicknameResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientSetPlayerNicknameResponse";
  }
  protected:
  explicit CMsgClientSetPlayerNicknameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEresultFieldNumber = 1,
  };
  // optional uint32 eresult = 1;
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  uint32_t eresult() const;
  void set_eresult(uint32_t value);
  private:
  uint32_t _internal_eresult() const;
  void _internal_set_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientSetPlayerNicknameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientRequestFriendData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientRequestFriendData) */ {
 public:
  inline CMsgClientRequestFriendData() : CMsgClientRequestFriendData(nullptr) {}
  ~CMsgClientRequestFriendData() override;
  explicit constexpr CMsgClientRequestFriendData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientRequestFriendData(const CMsgClientRequestFriendData& from);
  CMsgClientRequestFriendData(CMsgClientRequestFriendData&& from) noexcept
    : CMsgClientRequestFriendData() {
    *this = ::std::move(from);
  }

  inline CMsgClientRequestFriendData& operator=(const CMsgClientRequestFriendData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientRequestFriendData& operator=(CMsgClientRequestFriendData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientRequestFriendData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientRequestFriendData* internal_default_instance() {
    return reinterpret_cast<const CMsgClientRequestFriendData*>(
               &_CMsgClientRequestFriendData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgClientRequestFriendData& a, CMsgClientRequestFriendData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientRequestFriendData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientRequestFriendData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientRequestFriendData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientRequestFriendData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientRequestFriendData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientRequestFriendData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientRequestFriendData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientRequestFriendData";
  }
  protected:
  explicit CMsgClientRequestFriendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 2,
    kPersonaStateRequestedFieldNumber = 1,
  };
  // repeated fixed64 friends = 2;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  private:
  uint64_t _internal_friends(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_friends() const;
  void _internal_add_friends(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_friends();
  public:
  uint64_t friends(int index) const;
  void set_friends(int index, uint64_t value);
  void add_friends(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      friends() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_friends();

  // optional uint32 persona_state_requested = 1;
  bool has_persona_state_requested() const;
  private:
  bool _internal_has_persona_state_requested() const;
  public:
  void clear_persona_state_requested();
  uint32_t persona_state_requested() const;
  void set_persona_state_requested(uint32_t value);
  private:
  uint32_t _internal_persona_state_requested() const;
  void _internal_set_persona_state_requested(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientRequestFriendData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > friends_;
  uint32_t persona_state_requested_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientChangeStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientChangeStatus) */ {
 public:
  inline CMsgClientChangeStatus() : CMsgClientChangeStatus(nullptr) {}
  ~CMsgClientChangeStatus() override;
  explicit constexpr CMsgClientChangeStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientChangeStatus(const CMsgClientChangeStatus& from);
  CMsgClientChangeStatus(CMsgClientChangeStatus&& from) noexcept
    : CMsgClientChangeStatus() {
    *this = ::std::move(from);
  }

  inline CMsgClientChangeStatus& operator=(const CMsgClientChangeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientChangeStatus& operator=(CMsgClientChangeStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientChangeStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientChangeStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgClientChangeStatus*>(
               &_CMsgClientChangeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgClientChangeStatus& a, CMsgClientChangeStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientChangeStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientChangeStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientChangeStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientChangeStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientChangeStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientChangeStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientChangeStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientChangeStatus";
  }
  protected:
  explicit CMsgClientChangeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 2,
    kPersonaStateFieldNumber = 1,
    kIsAutoGeneratedNameFieldNumber = 3,
    kHighPriorityFieldNumber = 4,
    kPersonaSetByUserFieldNumber = 5,
    kNeedPersonaResponseFieldNumber = 7,
    kPersonaStateFlagsFieldNumber = 6,
    kIsClientIdleFieldNumber = 8,
  };
  // optional string player_name = 2;
  bool has_player_name() const;
  private:
  bool _internal_has_player_name() const;
  public:
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // optional uint32 persona_state = 1;
  bool has_persona_state() const;
  private:
  bool _internal_has_persona_state() const;
  public:
  void clear_persona_state();
  uint32_t persona_state() const;
  void set_persona_state(uint32_t value);
  private:
  uint32_t _internal_persona_state() const;
  void _internal_set_persona_state(uint32_t value);
  public:

  // optional bool is_auto_generated_name = 3;
  bool has_is_auto_generated_name() const;
  private:
  bool _internal_has_is_auto_generated_name() const;
  public:
  void clear_is_auto_generated_name();
  bool is_auto_generated_name() const;
  void set_is_auto_generated_name(bool value);
  private:
  bool _internal_is_auto_generated_name() const;
  void _internal_set_is_auto_generated_name(bool value);
  public:

  // optional bool high_priority = 4;
  bool has_high_priority() const;
  private:
  bool _internal_has_high_priority() const;
  public:
  void clear_high_priority();
  bool high_priority() const;
  void set_high_priority(bool value);
  private:
  bool _internal_high_priority() const;
  void _internal_set_high_priority(bool value);
  public:

  // optional bool persona_set_by_user = 5;
  bool has_persona_set_by_user() const;
  private:
  bool _internal_has_persona_set_by_user() const;
  public:
  void clear_persona_set_by_user();
  bool persona_set_by_user() const;
  void set_persona_set_by_user(bool value);
  private:
  bool _internal_persona_set_by_user() const;
  void _internal_set_persona_set_by_user(bool value);
  public:

  // optional bool need_persona_response = 7;
  bool has_need_persona_response() const;
  private:
  bool _internal_has_need_persona_response() const;
  public:
  void clear_need_persona_response();
  bool need_persona_response() const;
  void set_need_persona_response(bool value);
  private:
  bool _internal_need_persona_response() const;
  void _internal_set_need_persona_response(bool value);
  public:

  // optional uint32 persona_state_flags = 6 [default = 0];
  bool has_persona_state_flags() const;
  private:
  bool _internal_has_persona_state_flags() const;
  public:
  void clear_persona_state_flags();
  uint32_t persona_state_flags() const;
  void set_persona_state_flags(uint32_t value);
  private:
  uint32_t _internal_persona_state_flags() const;
  void _internal_set_persona_state_flags(uint32_t value);
  public:

  // optional bool is_client_idle = 8;
  bool has_is_client_idle() const;
  private:
  bool _internal_has_is_client_idle() const;
  public:
  void clear_is_client_idle();
  bool is_client_idle() const;
  void set_is_client_idle(bool value);
  private:
  bool _internal_is_client_idle() const;
  void _internal_set_is_client_idle(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientChangeStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  uint32_t persona_state_;
  bool is_auto_generated_name_;
  bool high_priority_;
  bool persona_set_by_user_;
  bool need_persona_response_;
  uint32_t persona_state_flags_;
  bool is_client_idle_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgPersonaChangeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPersonaChangeResponse) */ {
 public:
  inline CMsgPersonaChangeResponse() : CMsgPersonaChangeResponse(nullptr) {}
  ~CMsgPersonaChangeResponse() override;
  explicit constexpr CMsgPersonaChangeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPersonaChangeResponse(const CMsgPersonaChangeResponse& from);
  CMsgPersonaChangeResponse(CMsgPersonaChangeResponse&& from) noexcept
    : CMsgPersonaChangeResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPersonaChangeResponse& operator=(const CMsgPersonaChangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPersonaChangeResponse& operator=(CMsgPersonaChangeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPersonaChangeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPersonaChangeResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPersonaChangeResponse*>(
               &_CMsgPersonaChangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgPersonaChangeResponse& a, CMsgPersonaChangeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPersonaChangeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPersonaChangeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPersonaChangeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPersonaChangeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPersonaChangeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgPersonaChangeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPersonaChangeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPersonaChangeResponse";
  }
  protected:
  explicit CMsgPersonaChangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional string player_name = 2;
  bool has_player_name() const;
  private:
  bool _internal_has_player_name() const;
  public:
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // optional uint32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPersonaChangeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  uint32_t result_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientPersonaState_Friend_ClanData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientPersonaState.Friend.ClanData) */ {
 public:
  inline CMsgClientPersonaState_Friend_ClanData() : CMsgClientPersonaState_Friend_ClanData(nullptr) {}
  ~CMsgClientPersonaState_Friend_ClanData() override;
  explicit constexpr CMsgClientPersonaState_Friend_ClanData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientPersonaState_Friend_ClanData(const CMsgClientPersonaState_Friend_ClanData& from);
  CMsgClientPersonaState_Friend_ClanData(CMsgClientPersonaState_Friend_ClanData&& from) noexcept
    : CMsgClientPersonaState_Friend_ClanData() {
    *this = ::std::move(from);
  }

  inline CMsgClientPersonaState_Friend_ClanData& operator=(const CMsgClientPersonaState_Friend_ClanData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientPersonaState_Friend_ClanData& operator=(CMsgClientPersonaState_Friend_ClanData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientPersonaState_Friend_ClanData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientPersonaState_Friend_ClanData* internal_default_instance() {
    return reinterpret_cast<const CMsgClientPersonaState_Friend_ClanData*>(
               &_CMsgClientPersonaState_Friend_ClanData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgClientPersonaState_Friend_ClanData& a, CMsgClientPersonaState_Friend_ClanData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientPersonaState_Friend_ClanData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientPersonaState_Friend_ClanData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientPersonaState_Friend_ClanData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientPersonaState_Friend_ClanData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientPersonaState_Friend_ClanData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientPersonaState_Friend_ClanData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientPersonaState_Friend_ClanData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientPersonaState.Friend.ClanData";
  }
  protected:
  explicit CMsgClientPersonaState_Friend_ClanData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatGroupIdFieldNumber = 2,
    kOggAppIdFieldNumber = 1,
  };
  // optional uint64 chat_group_id = 2;
  bool has_chat_group_id() const;
  private:
  bool _internal_has_chat_group_id() const;
  public:
  void clear_chat_group_id();
  uint64_t chat_group_id() const;
  void set_chat_group_id(uint64_t value);
  private:
  uint64_t _internal_chat_group_id() const;
  void _internal_set_chat_group_id(uint64_t value);
  public:

  // optional uint32 ogg_app_id = 1;
  bool has_ogg_app_id() const;
  private:
  bool _internal_has_ogg_app_id() const;
  public:
  void clear_ogg_app_id();
  uint32_t ogg_app_id() const;
  void set_ogg_app_id(uint32_t value);
  private:
  uint32_t _internal_ogg_app_id() const;
  void _internal_set_ogg_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientPersonaState.Friend.ClanData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t chat_group_id_;
  uint32_t ogg_app_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientPersonaState_Friend_KV final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientPersonaState.Friend.KV) */ {
 public:
  inline CMsgClientPersonaState_Friend_KV() : CMsgClientPersonaState_Friend_KV(nullptr) {}
  ~CMsgClientPersonaState_Friend_KV() override;
  explicit constexpr CMsgClientPersonaState_Friend_KV(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientPersonaState_Friend_KV(const CMsgClientPersonaState_Friend_KV& from);
  CMsgClientPersonaState_Friend_KV(CMsgClientPersonaState_Friend_KV&& from) noexcept
    : CMsgClientPersonaState_Friend_KV() {
    *this = ::std::move(from);
  }

  inline CMsgClientPersonaState_Friend_KV& operator=(const CMsgClientPersonaState_Friend_KV& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientPersonaState_Friend_KV& operator=(CMsgClientPersonaState_Friend_KV&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientPersonaState_Friend_KV& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientPersonaState_Friend_KV* internal_default_instance() {
    return reinterpret_cast<const CMsgClientPersonaState_Friend_KV*>(
               &_CMsgClientPersonaState_Friend_KV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgClientPersonaState_Friend_KV& a, CMsgClientPersonaState_Friend_KV& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientPersonaState_Friend_KV* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientPersonaState_Friend_KV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientPersonaState_Friend_KV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientPersonaState_Friend_KV>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientPersonaState_Friend_KV& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientPersonaState_Friend_KV& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientPersonaState_Friend_KV* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientPersonaState.Friend.KV";
  }
  protected:
  explicit CMsgClientPersonaState_Friend_KV(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientPersonaState.Friend.KV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientPersonaState_Friend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientPersonaState.Friend) */ {
 public:
  inline CMsgClientPersonaState_Friend() : CMsgClientPersonaState_Friend(nullptr) {}
  ~CMsgClientPersonaState_Friend() override;
  explicit constexpr CMsgClientPersonaState_Friend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientPersonaState_Friend(const CMsgClientPersonaState_Friend& from);
  CMsgClientPersonaState_Friend(CMsgClientPersonaState_Friend&& from) noexcept
    : CMsgClientPersonaState_Friend() {
    *this = ::std::move(from);
  }

  inline CMsgClientPersonaState_Friend& operator=(const CMsgClientPersonaState_Friend& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientPersonaState_Friend& operator=(CMsgClientPersonaState_Friend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientPersonaState_Friend& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientPersonaState_Friend* internal_default_instance() {
    return reinterpret_cast<const CMsgClientPersonaState_Friend*>(
               &_CMsgClientPersonaState_Friend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgClientPersonaState_Friend& a, CMsgClientPersonaState_Friend& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientPersonaState_Friend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientPersonaState_Friend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientPersonaState_Friend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientPersonaState_Friend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientPersonaState_Friend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientPersonaState_Friend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientPersonaState_Friend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientPersonaState.Friend";
  }
  protected:
  explicit CMsgClientPersonaState_Friend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientPersonaState_Friend_ClanData ClanData;
  typedef CMsgClientPersonaState_Friend_KV KV;

  // accessors -------------------------------------------------------

  enum : int {
    kRichPresenceFieldNumber = 71,
    kPlayerNameFieldNumber = 15,
    kAvatarHashFieldNumber = 31,
    kGameNameFieldNumber = 55,
    kGameDataBlobFieldNumber = 60,
    kClanTagFieldNumber = 65,
    kWatchingBroadcastTitleFieldNumber = 77,
    kClanDataFieldNumber = 64,
    kFriendidFieldNumber = 1,
    kPersonaStateFieldNumber = 2,
    kGamePlayedAppIdFieldNumber = 3,
    kGameServerIpFieldNumber = 4,
    kGameServerPortFieldNumber = 5,
    kPersonaStateFlagsFieldNumber = 6,
    kOnlineSessionInstancesFieldNumber = 7,
    kSteamidSourceFieldNumber = 25,
    kWatchingBroadcastViewersFieldNumber = 76,
    kQueryPortFieldNumber = 20,
    kLastLogoffFieldNumber = 45,
    kLastLogonFieldNumber = 46,
    kLastSeenOnlineFieldNumber = 47,
    kGameidFieldNumber = 56,
    kClanRankFieldNumber = 50,
    kPersonaSetByUserFieldNumber = 10,
    kIsCommunityBannedFieldNumber = 78,
    kPlayerNamePendingReviewFieldNumber = 79,
    kAvatarPendingReviewFieldNumber = 80,
    kBroadcastIdFieldNumber = 72,
    kGameLobbyIdFieldNumber = 73,
    kWatchingBroadcastAccountidFieldNumber = 74,
    kWatchingBroadcastAppidFieldNumber = 75,
  };
  // repeated .CMsgClientPersonaState.Friend.KV rich_presence = 71;
  int rich_presence_size() const;
  private:
  int _internal_rich_presence_size() const;
  public:
  void clear_rich_presence();
  ::CMsgClientPersonaState_Friend_KV* mutable_rich_presence(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientPersonaState_Friend_KV >*
      mutable_rich_presence();
  private:
  const ::CMsgClientPersonaState_Friend_KV& _internal_rich_presence(int index) const;
  ::CMsgClientPersonaState_Friend_KV* _internal_add_rich_presence();
  public:
  const ::CMsgClientPersonaState_Friend_KV& rich_presence(int index) const;
  ::CMsgClientPersonaState_Friend_KV* add_rich_presence();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientPersonaState_Friend_KV >&
      rich_presence() const;

  // optional string player_name = 15;
  bool has_player_name() const;
  private:
  bool _internal_has_player_name() const;
  public:
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // optional bytes avatar_hash = 31;
  bool has_avatar_hash() const;
  private:
  bool _internal_has_avatar_hash() const;
  public:
  void clear_avatar_hash();
  const std::string& avatar_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_hash();
  PROTOBUF_NODISCARD std::string* release_avatar_hash();
  void set_allocated_avatar_hash(std::string* avatar_hash);
  private:
  const std::string& _internal_avatar_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_hash(const std::string& value);
  std::string* _internal_mutable_avatar_hash();
  public:

  // optional string game_name = 55;
  bool has_game_name() const;
  private:
  bool _internal_has_game_name() const;
  public:
  void clear_game_name();
  const std::string& game_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_name();
  PROTOBUF_NODISCARD std::string* release_game_name();
  void set_allocated_game_name(std::string* game_name);
  private:
  const std::string& _internal_game_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_name(const std::string& value);
  std::string* _internal_mutable_game_name();
  public:

  // optional bytes game_data_blob = 60;
  bool has_game_data_blob() const;
  private:
  bool _internal_has_game_data_blob() const;
  public:
  void clear_game_data_blob();
  const std::string& game_data_blob() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_data_blob(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_data_blob();
  PROTOBUF_NODISCARD std::string* release_game_data_blob();
  void set_allocated_game_data_blob(std::string* game_data_blob);
  private:
  const std::string& _internal_game_data_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_data_blob(const std::string& value);
  std::string* _internal_mutable_game_data_blob();
  public:

  // optional string clan_tag = 65;
  bool has_clan_tag() const;
  private:
  bool _internal_has_clan_tag() const;
  public:
  void clear_clan_tag();
  const std::string& clan_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clan_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clan_tag();
  PROTOBUF_NODISCARD std::string* release_clan_tag();
  void set_allocated_clan_tag(std::string* clan_tag);
  private:
  const std::string& _internal_clan_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clan_tag(const std::string& value);
  std::string* _internal_mutable_clan_tag();
  public:

  // optional string watching_broadcast_title = 77;
  bool has_watching_broadcast_title() const;
  private:
  bool _internal_has_watching_broadcast_title() const;
  public:
  void clear_watching_broadcast_title();
  const std::string& watching_broadcast_title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_watching_broadcast_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_watching_broadcast_title();
  PROTOBUF_NODISCARD std::string* release_watching_broadcast_title();
  void set_allocated_watching_broadcast_title(std::string* watching_broadcast_title);
  private:
  const std::string& _internal_watching_broadcast_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_watching_broadcast_title(const std::string& value);
  std::string* _internal_mutable_watching_broadcast_title();
  public:

  // optional .CMsgClientPersonaState.Friend.ClanData clan_data = 64;
  bool has_clan_data() const;
  private:
  bool _internal_has_clan_data() const;
  public:
  void clear_clan_data();
  const ::CMsgClientPersonaState_Friend_ClanData& clan_data() const;
  PROTOBUF_NODISCARD ::CMsgClientPersonaState_Friend_ClanData* release_clan_data();
  ::CMsgClientPersonaState_Friend_ClanData* mutable_clan_data();
  void set_allocated_clan_data(::CMsgClientPersonaState_Friend_ClanData* clan_data);
  private:
  const ::CMsgClientPersonaState_Friend_ClanData& _internal_clan_data() const;
  ::CMsgClientPersonaState_Friend_ClanData* _internal_mutable_clan_data();
  public:
  void unsafe_arena_set_allocated_clan_data(
      ::CMsgClientPersonaState_Friend_ClanData* clan_data);
  ::CMsgClientPersonaState_Friend_ClanData* unsafe_arena_release_clan_data();

  // optional fixed64 friendid = 1;
  bool has_friendid() const;
  private:
  bool _internal_has_friendid() const;
  public:
  void clear_friendid();
  uint64_t friendid() const;
  void set_friendid(uint64_t value);
  private:
  uint64_t _internal_friendid() const;
  void _internal_set_friendid(uint64_t value);
  public:

  // optional uint32 persona_state = 2;
  bool has_persona_state() const;
  private:
  bool _internal_has_persona_state() const;
  public:
  void clear_persona_state();
  uint32_t persona_state() const;
  void set_persona_state(uint32_t value);
  private:
  uint32_t _internal_persona_state() const;
  void _internal_set_persona_state(uint32_t value);
  public:

  // optional uint32 game_played_app_id = 3;
  bool has_game_played_app_id() const;
  private:
  bool _internal_has_game_played_app_id() const;
  public:
  void clear_game_played_app_id();
  uint32_t game_played_app_id() const;
  void set_game_played_app_id(uint32_t value);
  private:
  uint32_t _internal_game_played_app_id() const;
  void _internal_set_game_played_app_id(uint32_t value);
  public:

  // optional uint32 game_server_ip = 4;
  bool has_game_server_ip() const;
  private:
  bool _internal_has_game_server_ip() const;
  public:
  void clear_game_server_ip();
  uint32_t game_server_ip() const;
  void set_game_server_ip(uint32_t value);
  private:
  uint32_t _internal_game_server_ip() const;
  void _internal_set_game_server_ip(uint32_t value);
  public:

  // optional uint32 game_server_port = 5;
  bool has_game_server_port() const;
  private:
  bool _internal_has_game_server_port() const;
  public:
  void clear_game_server_port();
  uint32_t game_server_port() const;
  void set_game_server_port(uint32_t value);
  private:
  uint32_t _internal_game_server_port() const;
  void _internal_set_game_server_port(uint32_t value);
  public:

  // optional uint32 persona_state_flags = 6;
  bool has_persona_state_flags() const;
  private:
  bool _internal_has_persona_state_flags() const;
  public:
  void clear_persona_state_flags();
  uint32_t persona_state_flags() const;
  void set_persona_state_flags(uint32_t value);
  private:
  uint32_t _internal_persona_state_flags() const;
  void _internal_set_persona_state_flags(uint32_t value);
  public:

  // optional uint32 online_session_instances = 7;
  bool has_online_session_instances() const;
  private:
  bool _internal_has_online_session_instances() const;
  public:
  void clear_online_session_instances();
  uint32_t online_session_instances() const;
  void set_online_session_instances(uint32_t value);
  private:
  uint32_t _internal_online_session_instances() const;
  void _internal_set_online_session_instances(uint32_t value);
  public:

  // optional fixed64 steamid_source = 25;
  bool has_steamid_source() const;
  private:
  bool _internal_has_steamid_source() const;
  public:
  void clear_steamid_source();
  uint64_t steamid_source() const;
  void set_steamid_source(uint64_t value);
  private:
  uint64_t _internal_steamid_source() const;
  void _internal_set_steamid_source(uint64_t value);
  public:

  // optional uint32 watching_broadcast_viewers = 76;
  bool has_watching_broadcast_viewers() const;
  private:
  bool _internal_has_watching_broadcast_viewers() const;
  public:
  void clear_watching_broadcast_viewers();
  uint32_t watching_broadcast_viewers() const;
  void set_watching_broadcast_viewers(uint32_t value);
  private:
  uint32_t _internal_watching_broadcast_viewers() const;
  void _internal_set_watching_broadcast_viewers(uint32_t value);
  public:

  // optional uint32 query_port = 20;
  bool has_query_port() const;
  private:
  bool _internal_has_query_port() const;
  public:
  void clear_query_port();
  uint32_t query_port() const;
  void set_query_port(uint32_t value);
  private:
  uint32_t _internal_query_port() const;
  void _internal_set_query_port(uint32_t value);
  public:

  // optional uint32 last_logoff = 45;
  bool has_last_logoff() const;
  private:
  bool _internal_has_last_logoff() const;
  public:
  void clear_last_logoff();
  uint32_t last_logoff() const;
  void set_last_logoff(uint32_t value);
  private:
  uint32_t _internal_last_logoff() const;
  void _internal_set_last_logoff(uint32_t value);
  public:

  // optional uint32 last_logon = 46;
  bool has_last_logon() const;
  private:
  bool _internal_has_last_logon() const;
  public:
  void clear_last_logon();
  uint32_t last_logon() const;
  void set_last_logon(uint32_t value);
  private:
  uint32_t _internal_last_logon() const;
  void _internal_set_last_logon(uint32_t value);
  public:

  // optional uint32 last_seen_online = 47;
  bool has_last_seen_online() const;
  private:
  bool _internal_has_last_seen_online() const;
  public:
  void clear_last_seen_online();
  uint32_t last_seen_online() const;
  void set_last_seen_online(uint32_t value);
  private:
  uint32_t _internal_last_seen_online() const;
  void _internal_set_last_seen_online(uint32_t value);
  public:

  // optional fixed64 gameid = 56;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  uint64_t gameid() const;
  void set_gameid(uint64_t value);
  private:
  uint64_t _internal_gameid() const;
  void _internal_set_gameid(uint64_t value);
  public:

  // optional uint32 clan_rank = 50;
  bool has_clan_rank() const;
  private:
  bool _internal_has_clan_rank() const;
  public:
  void clear_clan_rank();
  uint32_t clan_rank() const;
  void set_clan_rank(uint32_t value);
  private:
  uint32_t _internal_clan_rank() const;
  void _internal_set_clan_rank(uint32_t value);
  public:

  // optional bool persona_set_by_user = 10;
  bool has_persona_set_by_user() const;
  private:
  bool _internal_has_persona_set_by_user() const;
  public:
  void clear_persona_set_by_user();
  bool persona_set_by_user() const;
  void set_persona_set_by_user(bool value);
  private:
  bool _internal_persona_set_by_user() const;
  void _internal_set_persona_set_by_user(bool value);
  public:

  // optional bool is_community_banned = 78;
  bool has_is_community_banned() const;
  private:
  bool _internal_has_is_community_banned() const;
  public:
  void clear_is_community_banned();
  bool is_community_banned() const;
  void set_is_community_banned(bool value);
  private:
  bool _internal_is_community_banned() const;
  void _internal_set_is_community_banned(bool value);
  public:

  // optional bool player_name_pending_review = 79;
  bool has_player_name_pending_review() const;
  private:
  bool _internal_has_player_name_pending_review() const;
  public:
  void clear_player_name_pending_review();
  bool player_name_pending_review() const;
  void set_player_name_pending_review(bool value);
  private:
  bool _internal_player_name_pending_review() const;
  void _internal_set_player_name_pending_review(bool value);
  public:

  // optional bool avatar_pending_review = 80;
  bool has_avatar_pending_review() const;
  private:
  bool _internal_has_avatar_pending_review() const;
  public:
  void clear_avatar_pending_review();
  bool avatar_pending_review() const;
  void set_avatar_pending_review(bool value);
  private:
  bool _internal_avatar_pending_review() const;
  void _internal_set_avatar_pending_review(bool value);
  public:

  // optional fixed64 broadcast_id = 72;
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // optional fixed64 game_lobby_id = 73;
  bool has_game_lobby_id() const;
  private:
  bool _internal_has_game_lobby_id() const;
  public:
  void clear_game_lobby_id();
  uint64_t game_lobby_id() const;
  void set_game_lobby_id(uint64_t value);
  private:
  uint64_t _internal_game_lobby_id() const;
  void _internal_set_game_lobby_id(uint64_t value);
  public:

  // optional uint32 watching_broadcast_accountid = 74;
  bool has_watching_broadcast_accountid() const;
  private:
  bool _internal_has_watching_broadcast_accountid() const;
  public:
  void clear_watching_broadcast_accountid();
  uint32_t watching_broadcast_accountid() const;
  void set_watching_broadcast_accountid(uint32_t value);
  private:
  uint32_t _internal_watching_broadcast_accountid() const;
  void _internal_set_watching_broadcast_accountid(uint32_t value);
  public:

  // optional uint32 watching_broadcast_appid = 75;
  bool has_watching_broadcast_appid() const;
  private:
  bool _internal_has_watching_broadcast_appid() const;
  public:
  void clear_watching_broadcast_appid();
  uint32_t watching_broadcast_appid() const;
  void set_watching_broadcast_appid(uint32_t value);
  private:
  uint32_t _internal_watching_broadcast_appid() const;
  void _internal_set_watching_broadcast_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientPersonaState.Friend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientPersonaState_Friend_KV > rich_presence_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_data_blob_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clan_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr watching_broadcast_title_;
  ::CMsgClientPersonaState_Friend_ClanData* clan_data_;
  uint64_t friendid_;
  uint32_t persona_state_;
  uint32_t game_played_app_id_;
  uint32_t game_server_ip_;
  uint32_t game_server_port_;
  uint32_t persona_state_flags_;
  uint32_t online_session_instances_;
  uint64_t steamid_source_;
  uint32_t watching_broadcast_viewers_;
  uint32_t query_port_;
  uint32_t last_logoff_;
  uint32_t last_logon_;
  uint32_t last_seen_online_;
  uint64_t gameid_;
  uint32_t clan_rank_;
  bool persona_set_by_user_;
  bool is_community_banned_;
  bool player_name_pending_review_;
  bool avatar_pending_review_;
  uint64_t broadcast_id_;
  uint64_t game_lobby_id_;
  uint32_t watching_broadcast_accountid_;
  uint32_t watching_broadcast_appid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientPersonaState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientPersonaState) */ {
 public:
  inline CMsgClientPersonaState() : CMsgClientPersonaState(nullptr) {}
  ~CMsgClientPersonaState() override;
  explicit constexpr CMsgClientPersonaState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientPersonaState(const CMsgClientPersonaState& from);
  CMsgClientPersonaState(CMsgClientPersonaState&& from) noexcept
    : CMsgClientPersonaState() {
    *this = ::std::move(from);
  }

  inline CMsgClientPersonaState& operator=(const CMsgClientPersonaState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientPersonaState& operator=(CMsgClientPersonaState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientPersonaState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientPersonaState* internal_default_instance() {
    return reinterpret_cast<const CMsgClientPersonaState*>(
               &_CMsgClientPersonaState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgClientPersonaState& a, CMsgClientPersonaState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientPersonaState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientPersonaState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientPersonaState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientPersonaState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientPersonaState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientPersonaState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientPersonaState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientPersonaState";
  }
  protected:
  explicit CMsgClientPersonaState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientPersonaState_Friend Friend;

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 2,
    kStatusFlagsFieldNumber = 1,
  };
  // repeated .CMsgClientPersonaState.Friend friends = 2;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::CMsgClientPersonaState_Friend* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientPersonaState_Friend >*
      mutable_friends();
  private:
  const ::CMsgClientPersonaState_Friend& _internal_friends(int index) const;
  ::CMsgClientPersonaState_Friend* _internal_add_friends();
  public:
  const ::CMsgClientPersonaState_Friend& friends(int index) const;
  ::CMsgClientPersonaState_Friend* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientPersonaState_Friend >&
      friends() const;

  // optional uint32 status_flags = 1;
  bool has_status_flags() const;
  private:
  bool _internal_has_status_flags() const;
  public:
  void clear_status_flags();
  uint32_t status_flags() const;
  void set_status_flags(uint32_t value);
  private:
  uint32_t _internal_status_flags() const;
  void _internal_set_status_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientPersonaState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientPersonaState_Friend > friends_;
  uint32_t status_flags_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientFriendProfileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientFriendProfileInfo) */ {
 public:
  inline CMsgClientFriendProfileInfo() : CMsgClientFriendProfileInfo(nullptr) {}
  ~CMsgClientFriendProfileInfo() override;
  explicit constexpr CMsgClientFriendProfileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientFriendProfileInfo(const CMsgClientFriendProfileInfo& from);
  CMsgClientFriendProfileInfo(CMsgClientFriendProfileInfo&& from) noexcept
    : CMsgClientFriendProfileInfo() {
    *this = ::std::move(from);
  }

  inline CMsgClientFriendProfileInfo& operator=(const CMsgClientFriendProfileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientFriendProfileInfo& operator=(CMsgClientFriendProfileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientFriendProfileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientFriendProfileInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgClientFriendProfileInfo*>(
               &_CMsgClientFriendProfileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgClientFriendProfileInfo& a, CMsgClientFriendProfileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientFriendProfileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientFriendProfileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientFriendProfileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientFriendProfileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientFriendProfileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientFriendProfileInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientFriendProfileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientFriendProfileInfo";
  }
  protected:
  explicit CMsgClientFriendProfileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFriendFieldNumber = 1,
  };
  // optional fixed64 steamid_friend = 1;
  bool has_steamid_friend() const;
  private:
  bool _internal_has_steamid_friend() const;
  public:
  void clear_steamid_friend();
  uint64_t steamid_friend() const;
  void set_steamid_friend(uint64_t value);
  private:
  uint64_t _internal_steamid_friend() const;
  void _internal_set_steamid_friend(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientFriendProfileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_friend_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientFriendProfileInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientFriendProfileInfoResponse) */ {
 public:
  inline CMsgClientFriendProfileInfoResponse() : CMsgClientFriendProfileInfoResponse(nullptr) {}
  ~CMsgClientFriendProfileInfoResponse() override;
  explicit constexpr CMsgClientFriendProfileInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientFriendProfileInfoResponse(const CMsgClientFriendProfileInfoResponse& from);
  CMsgClientFriendProfileInfoResponse(CMsgClientFriendProfileInfoResponse&& from) noexcept
    : CMsgClientFriendProfileInfoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientFriendProfileInfoResponse& operator=(const CMsgClientFriendProfileInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientFriendProfileInfoResponse& operator=(CMsgClientFriendProfileInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientFriendProfileInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientFriendProfileInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientFriendProfileInfoResponse*>(
               &_CMsgClientFriendProfileInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgClientFriendProfileInfoResponse& a, CMsgClientFriendProfileInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientFriendProfileInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientFriendProfileInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientFriendProfileInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientFriendProfileInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientFriendProfileInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientFriendProfileInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientFriendProfileInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientFriendProfileInfoResponse";
  }
  protected:
  explicit CMsgClientFriendProfileInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealNameFieldNumber = 4,
    kCityNameFieldNumber = 5,
    kStateNameFieldNumber = 6,
    kCountryNameFieldNumber = 7,
    kHeadlineFieldNumber = 8,
    kSummaryFieldNumber = 9,
    kSteamidFriendFieldNumber = 2,
    kTimeCreatedFieldNumber = 3,
    kEresultFieldNumber = 1,
  };
  // optional string real_name = 4;
  bool has_real_name() const;
  private:
  bool _internal_has_real_name() const;
  public:
  void clear_real_name();
  const std::string& real_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_real_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* real_name);
  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(const std::string& value);
  std::string* _internal_mutable_real_name();
  public:

  // optional string city_name = 5;
  bool has_city_name() const;
  private:
  bool _internal_has_city_name() const;
  public:
  void clear_city_name();
  const std::string& city_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_city_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_city_name();
  PROTOBUF_NODISCARD std::string* release_city_name();
  void set_allocated_city_name(std::string* city_name);
  private:
  const std::string& _internal_city_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city_name(const std::string& value);
  std::string* _internal_mutable_city_name();
  public:

  // optional string state_name = 6;
  bool has_state_name() const;
  private:
  bool _internal_has_state_name() const;
  public:
  void clear_state_name();
  const std::string& state_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state_name();
  PROTOBUF_NODISCARD std::string* release_state_name();
  void set_allocated_state_name(std::string* state_name);
  private:
  const std::string& _internal_state_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state_name(const std::string& value);
  std::string* _internal_mutable_state_name();
  public:

  // optional string country_name = 7;
  bool has_country_name() const;
  private:
  bool _internal_has_country_name() const;
  public:
  void clear_country_name();
  const std::string& country_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_name();
  PROTOBUF_NODISCARD std::string* release_country_name();
  void set_allocated_country_name(std::string* country_name);
  private:
  const std::string& _internal_country_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_name(const std::string& value);
  std::string* _internal_mutable_country_name();
  public:

  // optional string headline = 8;
  bool has_headline() const;
  private:
  bool _internal_has_headline() const;
  public:
  void clear_headline();
  const std::string& headline() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_headline(ArgT0&& arg0, ArgT... args);
  std::string* mutable_headline();
  PROTOBUF_NODISCARD std::string* release_headline();
  void set_allocated_headline(std::string* headline);
  private:
  const std::string& _internal_headline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_headline(const std::string& value);
  std::string* _internal_mutable_headline();
  public:

  // optional string summary = 9;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const std::string& summary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_summary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_summary();
  PROTOBUF_NODISCARD std::string* release_summary();
  void set_allocated_summary(std::string* summary);
  private:
  const std::string& _internal_summary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary(const std::string& value);
  std::string* _internal_mutable_summary();
  public:

  // optional fixed64 steamid_friend = 2;
  bool has_steamid_friend() const;
  private:
  bool _internal_has_steamid_friend() const;
  public:
  void clear_steamid_friend();
  uint64_t steamid_friend() const;
  void set_steamid_friend(uint64_t value);
  private:
  uint64_t _internal_steamid_friend() const;
  void _internal_set_steamid_friend(uint64_t value);
  public:

  // optional uint32 time_created = 3;
  bool has_time_created() const;
  private:
  bool _internal_has_time_created() const;
  public:
  void clear_time_created();
  uint32_t time_created() const;
  void set_time_created(uint32_t value);
  private:
  uint32_t _internal_time_created() const;
  void _internal_set_time_created(uint32_t value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientFriendProfileInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_;
  uint64_t steamid_friend_;
  uint32_t time_created_;
  int32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientCreateFriendsGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientCreateFriendsGroup) */ {
 public:
  inline CMsgClientCreateFriendsGroup() : CMsgClientCreateFriendsGroup(nullptr) {}
  ~CMsgClientCreateFriendsGroup() override;
  explicit constexpr CMsgClientCreateFriendsGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientCreateFriendsGroup(const CMsgClientCreateFriendsGroup& from);
  CMsgClientCreateFriendsGroup(CMsgClientCreateFriendsGroup&& from) noexcept
    : CMsgClientCreateFriendsGroup() {
    *this = ::std::move(from);
  }

  inline CMsgClientCreateFriendsGroup& operator=(const CMsgClientCreateFriendsGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientCreateFriendsGroup& operator=(CMsgClientCreateFriendsGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientCreateFriendsGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientCreateFriendsGroup* internal_default_instance() {
    return reinterpret_cast<const CMsgClientCreateFriendsGroup*>(
               &_CMsgClientCreateFriendsGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgClientCreateFriendsGroup& a, CMsgClientCreateFriendsGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientCreateFriendsGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientCreateFriendsGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientCreateFriendsGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientCreateFriendsGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientCreateFriendsGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientCreateFriendsGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientCreateFriendsGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientCreateFriendsGroup";
  }
  protected:
  explicit CMsgClientCreateFriendsGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFriendsFieldNumber = 3,
    kGroupnameFieldNumber = 2,
    kSteamidFieldNumber = 1,
  };
  // repeated fixed64 steamid_friends = 3;
  int steamid_friends_size() const;
  private:
  int _internal_steamid_friends_size() const;
  public:
  void clear_steamid_friends();
  private:
  uint64_t _internal_steamid_friends(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_steamid_friends() const;
  void _internal_add_steamid_friends(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_steamid_friends();
  public:
  uint64_t steamid_friends(int index) const;
  void set_steamid_friends(int index, uint64_t value);
  void add_steamid_friends(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      steamid_friends() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_steamid_friends();

  // optional string groupname = 2;
  bool has_groupname() const;
  private:
  bool _internal_has_groupname() const;
  public:
  void clear_groupname();
  const std::string& groupname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupname();
  PROTOBUF_NODISCARD std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientCreateFriendsGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > steamid_friends_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientCreateFriendsGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientCreateFriendsGroupResponse) */ {
 public:
  inline CMsgClientCreateFriendsGroupResponse() : CMsgClientCreateFriendsGroupResponse(nullptr) {}
  ~CMsgClientCreateFriendsGroupResponse() override;
  explicit constexpr CMsgClientCreateFriendsGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientCreateFriendsGroupResponse(const CMsgClientCreateFriendsGroupResponse& from);
  CMsgClientCreateFriendsGroupResponse(CMsgClientCreateFriendsGroupResponse&& from) noexcept
    : CMsgClientCreateFriendsGroupResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientCreateFriendsGroupResponse& operator=(const CMsgClientCreateFriendsGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientCreateFriendsGroupResponse& operator=(CMsgClientCreateFriendsGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientCreateFriendsGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientCreateFriendsGroupResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientCreateFriendsGroupResponse*>(
               &_CMsgClientCreateFriendsGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgClientCreateFriendsGroupResponse& a, CMsgClientCreateFriendsGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientCreateFriendsGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientCreateFriendsGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientCreateFriendsGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientCreateFriendsGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientCreateFriendsGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientCreateFriendsGroupResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientCreateFriendsGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientCreateFriendsGroupResponse";
  }
  protected:
  explicit CMsgClientCreateFriendsGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEresultFieldNumber = 1,
    kGroupidFieldNumber = 2,
  };
  // optional uint32 eresult = 1;
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  uint32_t eresult() const;
  void set_eresult(uint32_t value);
  private:
  uint32_t _internal_eresult() const;
  void _internal_set_eresult(uint32_t value);
  public:

  // optional int32 groupid = 2;
  bool has_groupid() const;
  private:
  bool _internal_has_groupid() const;
  public:
  void clear_groupid();
  int32_t groupid() const;
  void set_groupid(int32_t value);
  private:
  int32_t _internal_groupid() const;
  void _internal_set_groupid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientCreateFriendsGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t eresult_;
  int32_t groupid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientDeleteFriendsGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientDeleteFriendsGroup) */ {
 public:
  inline CMsgClientDeleteFriendsGroup() : CMsgClientDeleteFriendsGroup(nullptr) {}
  ~CMsgClientDeleteFriendsGroup() override;
  explicit constexpr CMsgClientDeleteFriendsGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientDeleteFriendsGroup(const CMsgClientDeleteFriendsGroup& from);
  CMsgClientDeleteFriendsGroup(CMsgClientDeleteFriendsGroup&& from) noexcept
    : CMsgClientDeleteFriendsGroup() {
    *this = ::std::move(from);
  }

  inline CMsgClientDeleteFriendsGroup& operator=(const CMsgClientDeleteFriendsGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientDeleteFriendsGroup& operator=(CMsgClientDeleteFriendsGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientDeleteFriendsGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientDeleteFriendsGroup* internal_default_instance() {
    return reinterpret_cast<const CMsgClientDeleteFriendsGroup*>(
               &_CMsgClientDeleteFriendsGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgClientDeleteFriendsGroup& a, CMsgClientDeleteFriendsGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientDeleteFriendsGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientDeleteFriendsGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientDeleteFriendsGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientDeleteFriendsGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientDeleteFriendsGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientDeleteFriendsGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientDeleteFriendsGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientDeleteFriendsGroup";
  }
  protected:
  explicit CMsgClientDeleteFriendsGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kGroupidFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional int32 groupid = 2;
  bool has_groupid() const;
  private:
  bool _internal_has_groupid() const;
  public:
  void clear_groupid();
  int32_t groupid() const;
  void set_groupid(int32_t value);
  private:
  int32_t _internal_groupid() const;
  void _internal_set_groupid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientDeleteFriendsGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  int32_t groupid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientDeleteFriendsGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientDeleteFriendsGroupResponse) */ {
 public:
  inline CMsgClientDeleteFriendsGroupResponse() : CMsgClientDeleteFriendsGroupResponse(nullptr) {}
  ~CMsgClientDeleteFriendsGroupResponse() override;
  explicit constexpr CMsgClientDeleteFriendsGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientDeleteFriendsGroupResponse(const CMsgClientDeleteFriendsGroupResponse& from);
  CMsgClientDeleteFriendsGroupResponse(CMsgClientDeleteFriendsGroupResponse&& from) noexcept
    : CMsgClientDeleteFriendsGroupResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientDeleteFriendsGroupResponse& operator=(const CMsgClientDeleteFriendsGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientDeleteFriendsGroupResponse& operator=(CMsgClientDeleteFriendsGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientDeleteFriendsGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientDeleteFriendsGroupResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientDeleteFriendsGroupResponse*>(
               &_CMsgClientDeleteFriendsGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgClientDeleteFriendsGroupResponse& a, CMsgClientDeleteFriendsGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientDeleteFriendsGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientDeleteFriendsGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientDeleteFriendsGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientDeleteFriendsGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientDeleteFriendsGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientDeleteFriendsGroupResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientDeleteFriendsGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientDeleteFriendsGroupResponse";
  }
  protected:
  explicit CMsgClientDeleteFriendsGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEresultFieldNumber = 1,
  };
  // optional uint32 eresult = 1;
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  uint32_t eresult() const;
  void set_eresult(uint32_t value);
  private:
  uint32_t _internal_eresult() const;
  void _internal_set_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientDeleteFriendsGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientManageFriendsGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientManageFriendsGroup) */ {
 public:
  inline CMsgClientManageFriendsGroup() : CMsgClientManageFriendsGroup(nullptr) {}
  ~CMsgClientManageFriendsGroup() override;
  explicit constexpr CMsgClientManageFriendsGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientManageFriendsGroup(const CMsgClientManageFriendsGroup& from);
  CMsgClientManageFriendsGroup(CMsgClientManageFriendsGroup&& from) noexcept
    : CMsgClientManageFriendsGroup() {
    *this = ::std::move(from);
  }

  inline CMsgClientManageFriendsGroup& operator=(const CMsgClientManageFriendsGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientManageFriendsGroup& operator=(CMsgClientManageFriendsGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientManageFriendsGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientManageFriendsGroup* internal_default_instance() {
    return reinterpret_cast<const CMsgClientManageFriendsGroup*>(
               &_CMsgClientManageFriendsGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgClientManageFriendsGroup& a, CMsgClientManageFriendsGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientManageFriendsGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientManageFriendsGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientManageFriendsGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientManageFriendsGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientManageFriendsGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientManageFriendsGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientManageFriendsGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientManageFriendsGroup";
  }
  protected:
  explicit CMsgClientManageFriendsGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFriendsAddedFieldNumber = 3,
    kSteamidFriendsRemovedFieldNumber = 4,
    kGroupnameFieldNumber = 2,
    kGroupidFieldNumber = 1,
  };
  // repeated fixed64 steamid_friends_added = 3;
  int steamid_friends_added_size() const;
  private:
  int _internal_steamid_friends_added_size() const;
  public:
  void clear_steamid_friends_added();
  private:
  uint64_t _internal_steamid_friends_added(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_steamid_friends_added() const;
  void _internal_add_steamid_friends_added(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_steamid_friends_added();
  public:
  uint64_t steamid_friends_added(int index) const;
  void set_steamid_friends_added(int index, uint64_t value);
  void add_steamid_friends_added(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      steamid_friends_added() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_steamid_friends_added();

  // repeated fixed64 steamid_friends_removed = 4;
  int steamid_friends_removed_size() const;
  private:
  int _internal_steamid_friends_removed_size() const;
  public:
  void clear_steamid_friends_removed();
  private:
  uint64_t _internal_steamid_friends_removed(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_steamid_friends_removed() const;
  void _internal_add_steamid_friends_removed(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_steamid_friends_removed();
  public:
  uint64_t steamid_friends_removed(int index) const;
  void set_steamid_friends_removed(int index, uint64_t value);
  void add_steamid_friends_removed(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      steamid_friends_removed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_steamid_friends_removed();

  // optional string groupname = 2;
  bool has_groupname() const;
  private:
  bool _internal_has_groupname() const;
  public:
  void clear_groupname();
  const std::string& groupname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupname();
  PROTOBUF_NODISCARD std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // optional int32 groupid = 1;
  bool has_groupid() const;
  private:
  bool _internal_has_groupid() const;
  public:
  void clear_groupid();
  int32_t groupid() const;
  void set_groupid(int32_t value);
  private:
  int32_t _internal_groupid() const;
  void _internal_set_groupid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientManageFriendsGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > steamid_friends_added_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > steamid_friends_removed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  int32_t groupid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientManageFriendsGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientManageFriendsGroupResponse) */ {
 public:
  inline CMsgClientManageFriendsGroupResponse() : CMsgClientManageFriendsGroupResponse(nullptr) {}
  ~CMsgClientManageFriendsGroupResponse() override;
  explicit constexpr CMsgClientManageFriendsGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientManageFriendsGroupResponse(const CMsgClientManageFriendsGroupResponse& from);
  CMsgClientManageFriendsGroupResponse(CMsgClientManageFriendsGroupResponse&& from) noexcept
    : CMsgClientManageFriendsGroupResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientManageFriendsGroupResponse& operator=(const CMsgClientManageFriendsGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientManageFriendsGroupResponse& operator=(CMsgClientManageFriendsGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientManageFriendsGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientManageFriendsGroupResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientManageFriendsGroupResponse*>(
               &_CMsgClientManageFriendsGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgClientManageFriendsGroupResponse& a, CMsgClientManageFriendsGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientManageFriendsGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientManageFriendsGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientManageFriendsGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientManageFriendsGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientManageFriendsGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientManageFriendsGroupResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientManageFriendsGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientManageFriendsGroupResponse";
  }
  protected:
  explicit CMsgClientManageFriendsGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEresultFieldNumber = 1,
  };
  // optional uint32 eresult = 1;
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  uint32_t eresult() const;
  void set_eresult(uint32_t value);
  private:
  uint32_t _internal_eresult() const;
  void _internal_set_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientManageFriendsGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientAddFriendToGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientAddFriendToGroup) */ {
 public:
  inline CMsgClientAddFriendToGroup() : CMsgClientAddFriendToGroup(nullptr) {}
  ~CMsgClientAddFriendToGroup() override;
  explicit constexpr CMsgClientAddFriendToGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientAddFriendToGroup(const CMsgClientAddFriendToGroup& from);
  CMsgClientAddFriendToGroup(CMsgClientAddFriendToGroup&& from) noexcept
    : CMsgClientAddFriendToGroup() {
    *this = ::std::move(from);
  }

  inline CMsgClientAddFriendToGroup& operator=(const CMsgClientAddFriendToGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientAddFriendToGroup& operator=(CMsgClientAddFriendToGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientAddFriendToGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientAddFriendToGroup* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAddFriendToGroup*>(
               &_CMsgClientAddFriendToGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgClientAddFriendToGroup& a, CMsgClientAddFriendToGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientAddFriendToGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientAddFriendToGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientAddFriendToGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientAddFriendToGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientAddFriendToGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientAddFriendToGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAddFriendToGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientAddFriendToGroup";
  }
  protected:
  explicit CMsgClientAddFriendToGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamiduserFieldNumber = 2,
    kGroupidFieldNumber = 1,
  };
  // optional fixed64 steamiduser = 2;
  bool has_steamiduser() const;
  private:
  bool _internal_has_steamiduser() const;
  public:
  void clear_steamiduser();
  uint64_t steamiduser() const;
  void set_steamiduser(uint64_t value);
  private:
  uint64_t _internal_steamiduser() const;
  void _internal_set_steamiduser(uint64_t value);
  public:

  // optional int32 groupid = 1;
  bool has_groupid() const;
  private:
  bool _internal_has_groupid() const;
  public:
  void clear_groupid();
  int32_t groupid() const;
  void set_groupid(int32_t value);
  private:
  int32_t _internal_groupid() const;
  void _internal_set_groupid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientAddFriendToGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamiduser_;
  int32_t groupid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientAddFriendToGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientAddFriendToGroupResponse) */ {
 public:
  inline CMsgClientAddFriendToGroupResponse() : CMsgClientAddFriendToGroupResponse(nullptr) {}
  ~CMsgClientAddFriendToGroupResponse() override;
  explicit constexpr CMsgClientAddFriendToGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientAddFriendToGroupResponse(const CMsgClientAddFriendToGroupResponse& from);
  CMsgClientAddFriendToGroupResponse(CMsgClientAddFriendToGroupResponse&& from) noexcept
    : CMsgClientAddFriendToGroupResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientAddFriendToGroupResponse& operator=(const CMsgClientAddFriendToGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientAddFriendToGroupResponse& operator=(CMsgClientAddFriendToGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientAddFriendToGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientAddFriendToGroupResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAddFriendToGroupResponse*>(
               &_CMsgClientAddFriendToGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CMsgClientAddFriendToGroupResponse& a, CMsgClientAddFriendToGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientAddFriendToGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientAddFriendToGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientAddFriendToGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientAddFriendToGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientAddFriendToGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientAddFriendToGroupResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAddFriendToGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientAddFriendToGroupResponse";
  }
  protected:
  explicit CMsgClientAddFriendToGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEresultFieldNumber = 1,
  };
  // optional uint32 eresult = 1;
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  uint32_t eresult() const;
  void set_eresult(uint32_t value);
  private:
  uint32_t _internal_eresult() const;
  void _internal_set_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientAddFriendToGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientRemoveFriendFromGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientRemoveFriendFromGroup) */ {
 public:
  inline CMsgClientRemoveFriendFromGroup() : CMsgClientRemoveFriendFromGroup(nullptr) {}
  ~CMsgClientRemoveFriendFromGroup() override;
  explicit constexpr CMsgClientRemoveFriendFromGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientRemoveFriendFromGroup(const CMsgClientRemoveFriendFromGroup& from);
  CMsgClientRemoveFriendFromGroup(CMsgClientRemoveFriendFromGroup&& from) noexcept
    : CMsgClientRemoveFriendFromGroup() {
    *this = ::std::move(from);
  }

  inline CMsgClientRemoveFriendFromGroup& operator=(const CMsgClientRemoveFriendFromGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientRemoveFriendFromGroup& operator=(CMsgClientRemoveFriendFromGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientRemoveFriendFromGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientRemoveFriendFromGroup* internal_default_instance() {
    return reinterpret_cast<const CMsgClientRemoveFriendFromGroup*>(
               &_CMsgClientRemoveFriendFromGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CMsgClientRemoveFriendFromGroup& a, CMsgClientRemoveFriendFromGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientRemoveFriendFromGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientRemoveFriendFromGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientRemoveFriendFromGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientRemoveFriendFromGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientRemoveFriendFromGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientRemoveFriendFromGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientRemoveFriendFromGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientRemoveFriendFromGroup";
  }
  protected:
  explicit CMsgClientRemoveFriendFromGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamiduserFieldNumber = 2,
    kGroupidFieldNumber = 1,
  };
  // optional fixed64 steamiduser = 2;
  bool has_steamiduser() const;
  private:
  bool _internal_has_steamiduser() const;
  public:
  void clear_steamiduser();
  uint64_t steamiduser() const;
  void set_steamiduser(uint64_t value);
  private:
  uint64_t _internal_steamiduser() const;
  void _internal_set_steamiduser(uint64_t value);
  public:

  // optional int32 groupid = 1;
  bool has_groupid() const;
  private:
  bool _internal_has_groupid() const;
  public:
  void clear_groupid();
  int32_t groupid() const;
  void set_groupid(int32_t value);
  private:
  int32_t _internal_groupid() const;
  void _internal_set_groupid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientRemoveFriendFromGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamiduser_;
  int32_t groupid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientRemoveFriendFromGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientRemoveFriendFromGroupResponse) */ {
 public:
  inline CMsgClientRemoveFriendFromGroupResponse() : CMsgClientRemoveFriendFromGroupResponse(nullptr) {}
  ~CMsgClientRemoveFriendFromGroupResponse() override;
  explicit constexpr CMsgClientRemoveFriendFromGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientRemoveFriendFromGroupResponse(const CMsgClientRemoveFriendFromGroupResponse& from);
  CMsgClientRemoveFriendFromGroupResponse(CMsgClientRemoveFriendFromGroupResponse&& from) noexcept
    : CMsgClientRemoveFriendFromGroupResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientRemoveFriendFromGroupResponse& operator=(const CMsgClientRemoveFriendFromGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientRemoveFriendFromGroupResponse& operator=(CMsgClientRemoveFriendFromGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientRemoveFriendFromGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientRemoveFriendFromGroupResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientRemoveFriendFromGroupResponse*>(
               &_CMsgClientRemoveFriendFromGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CMsgClientRemoveFriendFromGroupResponse& a, CMsgClientRemoveFriendFromGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientRemoveFriendFromGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientRemoveFriendFromGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientRemoveFriendFromGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientRemoveFriendFromGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientRemoveFriendFromGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientRemoveFriendFromGroupResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientRemoveFriendFromGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientRemoveFriendFromGroupResponse";
  }
  protected:
  explicit CMsgClientRemoveFriendFromGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEresultFieldNumber = 1,
  };
  // optional uint32 eresult = 1;
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  uint32_t eresult() const;
  void set_eresult(uint32_t value);
  private:
  uint32_t _internal_eresult() const;
  void _internal_set_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientRemoveFriendFromGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientGetEmoticonList final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgClientGetEmoticonList) */ {
 public:
  inline CMsgClientGetEmoticonList() : CMsgClientGetEmoticonList(nullptr) {}
  explicit constexpr CMsgClientGetEmoticonList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientGetEmoticonList(const CMsgClientGetEmoticonList& from);
  CMsgClientGetEmoticonList(CMsgClientGetEmoticonList&& from) noexcept
    : CMsgClientGetEmoticonList() {
    *this = ::std::move(from);
  }

  inline CMsgClientGetEmoticonList& operator=(const CMsgClientGetEmoticonList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientGetEmoticonList& operator=(CMsgClientGetEmoticonList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientGetEmoticonList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientGetEmoticonList* internal_default_instance() {
    return reinterpret_cast<const CMsgClientGetEmoticonList*>(
               &_CMsgClientGetEmoticonList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CMsgClientGetEmoticonList& a, CMsgClientGetEmoticonList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientGetEmoticonList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientGetEmoticonList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientGetEmoticonList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientGetEmoticonList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgClientGetEmoticonList& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgClientGetEmoticonList& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientGetEmoticonList";
  }
  protected:
  explicit CMsgClientGetEmoticonList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClientGetEmoticonList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientEmoticonList_Emoticon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientEmoticonList.Emoticon) */ {
 public:
  inline CMsgClientEmoticonList_Emoticon() : CMsgClientEmoticonList_Emoticon(nullptr) {}
  ~CMsgClientEmoticonList_Emoticon() override;
  explicit constexpr CMsgClientEmoticonList_Emoticon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientEmoticonList_Emoticon(const CMsgClientEmoticonList_Emoticon& from);
  CMsgClientEmoticonList_Emoticon(CMsgClientEmoticonList_Emoticon&& from) noexcept
    : CMsgClientEmoticonList_Emoticon() {
    *this = ::std::move(from);
  }

  inline CMsgClientEmoticonList_Emoticon& operator=(const CMsgClientEmoticonList_Emoticon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientEmoticonList_Emoticon& operator=(CMsgClientEmoticonList_Emoticon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientEmoticonList_Emoticon& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientEmoticonList_Emoticon* internal_default_instance() {
    return reinterpret_cast<const CMsgClientEmoticonList_Emoticon*>(
               &_CMsgClientEmoticonList_Emoticon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CMsgClientEmoticonList_Emoticon& a, CMsgClientEmoticonList_Emoticon& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientEmoticonList_Emoticon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientEmoticonList_Emoticon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientEmoticonList_Emoticon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientEmoticonList_Emoticon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientEmoticonList_Emoticon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientEmoticonList_Emoticon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientEmoticonList_Emoticon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientEmoticonList.Emoticon";
  }
  protected:
  explicit CMsgClientEmoticonList_Emoticon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCountFieldNumber = 2,
    kTimeLastUsedFieldNumber = 3,
    kUseCountFieldNumber = 4,
    kTimeReceivedFieldNumber = 5,
    kAppidFieldNumber = 6,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // optional uint32 time_last_used = 3;
  bool has_time_last_used() const;
  private:
  bool _internal_has_time_last_used() const;
  public:
  void clear_time_last_used();
  uint32_t time_last_used() const;
  void set_time_last_used(uint32_t value);
  private:
  uint32_t _internal_time_last_used() const;
  void _internal_set_time_last_used(uint32_t value);
  public:

  // optional uint32 use_count = 4;
  bool has_use_count() const;
  private:
  bool _internal_has_use_count() const;
  public:
  void clear_use_count();
  uint32_t use_count() const;
  void set_use_count(uint32_t value);
  private:
  uint32_t _internal_use_count() const;
  void _internal_set_use_count(uint32_t value);
  public:

  // optional uint32 time_received = 5;
  bool has_time_received() const;
  private:
  bool _internal_has_time_received() const;
  public:
  void clear_time_received();
  uint32_t time_received() const;
  void set_time_received(uint32_t value);
  private:
  uint32_t _internal_time_received() const;
  void _internal_set_time_received(uint32_t value);
  public:

  // optional uint32 appid = 6;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientEmoticonList.Emoticon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t count_;
  uint32_t time_last_used_;
  uint32_t use_count_;
  uint32_t time_received_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientEmoticonList_Sticker final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientEmoticonList.Sticker) */ {
 public:
  inline CMsgClientEmoticonList_Sticker() : CMsgClientEmoticonList_Sticker(nullptr) {}
  ~CMsgClientEmoticonList_Sticker() override;
  explicit constexpr CMsgClientEmoticonList_Sticker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientEmoticonList_Sticker(const CMsgClientEmoticonList_Sticker& from);
  CMsgClientEmoticonList_Sticker(CMsgClientEmoticonList_Sticker&& from) noexcept
    : CMsgClientEmoticonList_Sticker() {
    *this = ::std::move(from);
  }

  inline CMsgClientEmoticonList_Sticker& operator=(const CMsgClientEmoticonList_Sticker& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientEmoticonList_Sticker& operator=(CMsgClientEmoticonList_Sticker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientEmoticonList_Sticker& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientEmoticonList_Sticker* internal_default_instance() {
    return reinterpret_cast<const CMsgClientEmoticonList_Sticker*>(
               &_CMsgClientEmoticonList_Sticker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CMsgClientEmoticonList_Sticker& a, CMsgClientEmoticonList_Sticker& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientEmoticonList_Sticker* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientEmoticonList_Sticker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientEmoticonList_Sticker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientEmoticonList_Sticker>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientEmoticonList_Sticker& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientEmoticonList_Sticker& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientEmoticonList_Sticker* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientEmoticonList.Sticker";
  }
  protected:
  explicit CMsgClientEmoticonList_Sticker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCountFieldNumber = 2,
    kTimeReceivedFieldNumber = 3,
    kAppidFieldNumber = 4,
    kTimeLastUsedFieldNumber = 5,
    kUseCountFieldNumber = 6,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // optional uint32 time_received = 3;
  bool has_time_received() const;
  private:
  bool _internal_has_time_received() const;
  public:
  void clear_time_received();
  uint32_t time_received() const;
  void set_time_received(uint32_t value);
  private:
  uint32_t _internal_time_received() const;
  void _internal_set_time_received(uint32_t value);
  public:

  // optional uint32 appid = 4;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 time_last_used = 5;
  bool has_time_last_used() const;
  private:
  bool _internal_has_time_last_used() const;
  public:
  void clear_time_last_used();
  uint32_t time_last_used() const;
  void set_time_last_used(uint32_t value);
  private:
  uint32_t _internal_time_last_used() const;
  void _internal_set_time_last_used(uint32_t value);
  public:

  // optional uint32 use_count = 6;
  bool has_use_count() const;
  private:
  bool _internal_has_use_count() const;
  public:
  void clear_use_count();
  uint32_t use_count() const;
  void set_use_count(uint32_t value);
  private:
  uint32_t _internal_use_count() const;
  void _internal_set_use_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientEmoticonList.Sticker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t count_;
  uint32_t time_received_;
  uint32_t appid_;
  uint32_t time_last_used_;
  uint32_t use_count_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientEmoticonList_Effect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientEmoticonList.Effect) */ {
 public:
  inline CMsgClientEmoticonList_Effect() : CMsgClientEmoticonList_Effect(nullptr) {}
  ~CMsgClientEmoticonList_Effect() override;
  explicit constexpr CMsgClientEmoticonList_Effect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientEmoticonList_Effect(const CMsgClientEmoticonList_Effect& from);
  CMsgClientEmoticonList_Effect(CMsgClientEmoticonList_Effect&& from) noexcept
    : CMsgClientEmoticonList_Effect() {
    *this = ::std::move(from);
  }

  inline CMsgClientEmoticonList_Effect& operator=(const CMsgClientEmoticonList_Effect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientEmoticonList_Effect& operator=(CMsgClientEmoticonList_Effect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientEmoticonList_Effect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientEmoticonList_Effect* internal_default_instance() {
    return reinterpret_cast<const CMsgClientEmoticonList_Effect*>(
               &_CMsgClientEmoticonList_Effect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CMsgClientEmoticonList_Effect& a, CMsgClientEmoticonList_Effect& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientEmoticonList_Effect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientEmoticonList_Effect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientEmoticonList_Effect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientEmoticonList_Effect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientEmoticonList_Effect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientEmoticonList_Effect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientEmoticonList_Effect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientEmoticonList.Effect";
  }
  protected:
  explicit CMsgClientEmoticonList_Effect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCountFieldNumber = 2,
    kTimeReceivedFieldNumber = 3,
    kInfiniteUseFieldNumber = 4,
    kAppidFieldNumber = 5,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // optional uint32 time_received = 3;
  bool has_time_received() const;
  private:
  bool _internal_has_time_received() const;
  public:
  void clear_time_received();
  uint32_t time_received() const;
  void set_time_received(uint32_t value);
  private:
  uint32_t _internal_time_received() const;
  void _internal_set_time_received(uint32_t value);
  public:

  // optional bool infinite_use = 4;
  bool has_infinite_use() const;
  private:
  bool _internal_has_infinite_use() const;
  public:
  void clear_infinite_use();
  bool infinite_use() const;
  void set_infinite_use(bool value);
  private:
  bool _internal_infinite_use() const;
  void _internal_set_infinite_use(bool value);
  public:

  // optional uint32 appid = 5;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientEmoticonList.Effect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t count_;
  uint32_t time_received_;
  bool infinite_use_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientEmoticonList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientEmoticonList) */ {
 public:
  inline CMsgClientEmoticonList() : CMsgClientEmoticonList(nullptr) {}
  ~CMsgClientEmoticonList() override;
  explicit constexpr CMsgClientEmoticonList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientEmoticonList(const CMsgClientEmoticonList& from);
  CMsgClientEmoticonList(CMsgClientEmoticonList&& from) noexcept
    : CMsgClientEmoticonList() {
    *this = ::std::move(from);
  }

  inline CMsgClientEmoticonList& operator=(const CMsgClientEmoticonList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientEmoticonList& operator=(CMsgClientEmoticonList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientEmoticonList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientEmoticonList* internal_default_instance() {
    return reinterpret_cast<const CMsgClientEmoticonList*>(
               &_CMsgClientEmoticonList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CMsgClientEmoticonList& a, CMsgClientEmoticonList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientEmoticonList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientEmoticonList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientEmoticonList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientEmoticonList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientEmoticonList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientEmoticonList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientEmoticonList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientEmoticonList";
  }
  protected:
  explicit CMsgClientEmoticonList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientEmoticonList_Emoticon Emoticon;
  typedef CMsgClientEmoticonList_Sticker Sticker;
  typedef CMsgClientEmoticonList_Effect Effect;

  // accessors -------------------------------------------------------

  enum : int {
    kEmoticonsFieldNumber = 1,
    kStickersFieldNumber = 2,
    kEffectsFieldNumber = 3,
  };
  // repeated .CMsgClientEmoticonList.Emoticon emoticons = 1;
  int emoticons_size() const;
  private:
  int _internal_emoticons_size() const;
  public:
  void clear_emoticons();
  ::CMsgClientEmoticonList_Emoticon* mutable_emoticons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientEmoticonList_Emoticon >*
      mutable_emoticons();
  private:
  const ::CMsgClientEmoticonList_Emoticon& _internal_emoticons(int index) const;
  ::CMsgClientEmoticonList_Emoticon* _internal_add_emoticons();
  public:
  const ::CMsgClientEmoticonList_Emoticon& emoticons(int index) const;
  ::CMsgClientEmoticonList_Emoticon* add_emoticons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientEmoticonList_Emoticon >&
      emoticons() const;

  // repeated .CMsgClientEmoticonList.Sticker stickers = 2;
  int stickers_size() const;
  private:
  int _internal_stickers_size() const;
  public:
  void clear_stickers();
  ::CMsgClientEmoticonList_Sticker* mutable_stickers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientEmoticonList_Sticker >*
      mutable_stickers();
  private:
  const ::CMsgClientEmoticonList_Sticker& _internal_stickers(int index) const;
  ::CMsgClientEmoticonList_Sticker* _internal_add_stickers();
  public:
  const ::CMsgClientEmoticonList_Sticker& stickers(int index) const;
  ::CMsgClientEmoticonList_Sticker* add_stickers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientEmoticonList_Sticker >&
      stickers() const;

  // repeated .CMsgClientEmoticonList.Effect effects = 3;
  int effects_size() const;
  private:
  int _internal_effects_size() const;
  public:
  void clear_effects();
  ::CMsgClientEmoticonList_Effect* mutable_effects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientEmoticonList_Effect >*
      mutable_effects();
  private:
  const ::CMsgClientEmoticonList_Effect& _internal_effects(int index) const;
  ::CMsgClientEmoticonList_Effect* _internal_add_effects();
  public:
  const ::CMsgClientEmoticonList_Effect& effects(int index) const;
  ::CMsgClientEmoticonList_Effect* add_effects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientEmoticonList_Effect >&
      effects() const;

  // @@protoc_insertion_point(class_scope:CMsgClientEmoticonList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientEmoticonList_Emoticon > emoticons_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientEmoticonList_Sticker > stickers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientEmoticonList_Effect > effects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclientserver_5ffriends_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgClientFriendMsg

// optional fixed64 steamid = 1;
inline bool CMsgClientFriendMsg::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientFriendMsg::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgClientFriendMsg::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientFriendMsg::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CMsgClientFriendMsg::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendMsg.steamid)
  return _internal_steamid();
}
inline void CMsgClientFriendMsg::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CMsgClientFriendMsg::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendMsg.steamid)
}

// optional int32 chat_entry_type = 2;
inline bool CMsgClientFriendMsg::_internal_has_chat_entry_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientFriendMsg::has_chat_entry_type() const {
  return _internal_has_chat_entry_type();
}
inline void CMsgClientFriendMsg::clear_chat_entry_type() {
  chat_entry_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientFriendMsg::_internal_chat_entry_type() const {
  return chat_entry_type_;
}
inline int32_t CMsgClientFriendMsg::chat_entry_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendMsg.chat_entry_type)
  return _internal_chat_entry_type();
}
inline void CMsgClientFriendMsg::_internal_set_chat_entry_type(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  chat_entry_type_ = value;
}
inline void CMsgClientFriendMsg::set_chat_entry_type(int32_t value) {
  _internal_set_chat_entry_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendMsg.chat_entry_type)
}

// optional bytes message = 3;
inline bool CMsgClientFriendMsg::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientFriendMsg::has_message() const {
  return _internal_has_message();
}
inline void CMsgClientFriendMsg::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientFriendMsg::message() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendMsg.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientFriendMsg::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientFriendMsg.message)
}
inline std::string* CMsgClientFriendMsg::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CMsgClientFriendMsg.message)
  return _s;
}
inline const std::string& CMsgClientFriendMsg::_internal_message() const {
  return message_.Get();
}
inline void CMsgClientFriendMsg::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendMsg::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendMsg::release_message() {
  // @@protoc_insertion_point(field_release:CMsgClientFriendMsg.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientFriendMsg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientFriendMsg.message)
}

// optional fixed32 rtime32_server_timestamp = 4;
inline bool CMsgClientFriendMsg::_internal_has_rtime32_server_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientFriendMsg::has_rtime32_server_timestamp() const {
  return _internal_has_rtime32_server_timestamp();
}
inline void CMsgClientFriendMsg::clear_rtime32_server_timestamp() {
  rtime32_server_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientFriendMsg::_internal_rtime32_server_timestamp() const {
  return rtime32_server_timestamp_;
}
inline uint32_t CMsgClientFriendMsg::rtime32_server_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendMsg.rtime32_server_timestamp)
  return _internal_rtime32_server_timestamp();
}
inline void CMsgClientFriendMsg::_internal_set_rtime32_server_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  rtime32_server_timestamp_ = value;
}
inline void CMsgClientFriendMsg::set_rtime32_server_timestamp(uint32_t value) {
  _internal_set_rtime32_server_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendMsg.rtime32_server_timestamp)
}

// optional bool echo_to_sender = 5;
inline bool CMsgClientFriendMsg::_internal_has_echo_to_sender() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientFriendMsg::has_echo_to_sender() const {
  return _internal_has_echo_to_sender();
}
inline void CMsgClientFriendMsg::clear_echo_to_sender() {
  echo_to_sender_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgClientFriendMsg::_internal_echo_to_sender() const {
  return echo_to_sender_;
}
inline bool CMsgClientFriendMsg::echo_to_sender() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendMsg.echo_to_sender)
  return _internal_echo_to_sender();
}
inline void CMsgClientFriendMsg::_internal_set_echo_to_sender(bool value) {
  _has_bits_[0] |= 0x00000010u;
  echo_to_sender_ = value;
}
inline void CMsgClientFriendMsg::set_echo_to_sender(bool value) {
  _internal_set_echo_to_sender(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendMsg.echo_to_sender)
}

// -------------------------------------------------------------------

// CMsgClientFriendMsgIncoming

// optional fixed64 steamid_from = 1;
inline bool CMsgClientFriendMsgIncoming::_internal_has_steamid_from() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientFriendMsgIncoming::has_steamid_from() const {
  return _internal_has_steamid_from();
}
inline void CMsgClientFriendMsgIncoming::clear_steamid_from() {
  steamid_from_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientFriendMsgIncoming::_internal_steamid_from() const {
  return steamid_from_;
}
inline uint64_t CMsgClientFriendMsgIncoming::steamid_from() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendMsgIncoming.steamid_from)
  return _internal_steamid_from();
}
inline void CMsgClientFriendMsgIncoming::_internal_set_steamid_from(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_from_ = value;
}
inline void CMsgClientFriendMsgIncoming::set_steamid_from(uint64_t value) {
  _internal_set_steamid_from(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendMsgIncoming.steamid_from)
}

// optional int32 chat_entry_type = 2;
inline bool CMsgClientFriendMsgIncoming::_internal_has_chat_entry_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientFriendMsgIncoming::has_chat_entry_type() const {
  return _internal_has_chat_entry_type();
}
inline void CMsgClientFriendMsgIncoming::clear_chat_entry_type() {
  chat_entry_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientFriendMsgIncoming::_internal_chat_entry_type() const {
  return chat_entry_type_;
}
inline int32_t CMsgClientFriendMsgIncoming::chat_entry_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendMsgIncoming.chat_entry_type)
  return _internal_chat_entry_type();
}
inline void CMsgClientFriendMsgIncoming::_internal_set_chat_entry_type(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  chat_entry_type_ = value;
}
inline void CMsgClientFriendMsgIncoming::set_chat_entry_type(int32_t value) {
  _internal_set_chat_entry_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendMsgIncoming.chat_entry_type)
}

// optional bool from_limited_account = 3;
inline bool CMsgClientFriendMsgIncoming::_internal_has_from_limited_account() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientFriendMsgIncoming::has_from_limited_account() const {
  return _internal_has_from_limited_account();
}
inline void CMsgClientFriendMsgIncoming::clear_from_limited_account() {
  from_limited_account_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgClientFriendMsgIncoming::_internal_from_limited_account() const {
  return from_limited_account_;
}
inline bool CMsgClientFriendMsgIncoming::from_limited_account() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendMsgIncoming.from_limited_account)
  return _internal_from_limited_account();
}
inline void CMsgClientFriendMsgIncoming::_internal_set_from_limited_account(bool value) {
  _has_bits_[0] |= 0x00000008u;
  from_limited_account_ = value;
}
inline void CMsgClientFriendMsgIncoming::set_from_limited_account(bool value) {
  _internal_set_from_limited_account(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendMsgIncoming.from_limited_account)
}

// optional bytes message = 4;
inline bool CMsgClientFriendMsgIncoming::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientFriendMsgIncoming::has_message() const {
  return _internal_has_message();
}
inline void CMsgClientFriendMsgIncoming::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientFriendMsgIncoming::message() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendMsgIncoming.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientFriendMsgIncoming::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientFriendMsgIncoming.message)
}
inline std::string* CMsgClientFriendMsgIncoming::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CMsgClientFriendMsgIncoming.message)
  return _s;
}
inline const std::string& CMsgClientFriendMsgIncoming::_internal_message() const {
  return message_.Get();
}
inline void CMsgClientFriendMsgIncoming::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendMsgIncoming::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendMsgIncoming::release_message() {
  // @@protoc_insertion_point(field_release:CMsgClientFriendMsgIncoming.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientFriendMsgIncoming::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientFriendMsgIncoming.message)
}

// optional fixed32 rtime32_server_timestamp = 5;
inline bool CMsgClientFriendMsgIncoming::_internal_has_rtime32_server_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientFriendMsgIncoming::has_rtime32_server_timestamp() const {
  return _internal_has_rtime32_server_timestamp();
}
inline void CMsgClientFriendMsgIncoming::clear_rtime32_server_timestamp() {
  rtime32_server_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientFriendMsgIncoming::_internal_rtime32_server_timestamp() const {
  return rtime32_server_timestamp_;
}
inline uint32_t CMsgClientFriendMsgIncoming::rtime32_server_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendMsgIncoming.rtime32_server_timestamp)
  return _internal_rtime32_server_timestamp();
}
inline void CMsgClientFriendMsgIncoming::_internal_set_rtime32_server_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  rtime32_server_timestamp_ = value;
}
inline void CMsgClientFriendMsgIncoming::set_rtime32_server_timestamp(uint32_t value) {
  _internal_set_rtime32_server_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendMsgIncoming.rtime32_server_timestamp)
}

// -------------------------------------------------------------------

// CMsgClientAddFriend

// optional fixed64 steamid_to_add = 1;
inline bool CMsgClientAddFriend::_internal_has_steamid_to_add() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientAddFriend::has_steamid_to_add() const {
  return _internal_has_steamid_to_add();
}
inline void CMsgClientAddFriend::clear_steamid_to_add() {
  steamid_to_add_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientAddFriend::_internal_steamid_to_add() const {
  return steamid_to_add_;
}
inline uint64_t CMsgClientAddFriend::steamid_to_add() const {
  // @@protoc_insertion_point(field_get:CMsgClientAddFriend.steamid_to_add)
  return _internal_steamid_to_add();
}
inline void CMsgClientAddFriend::_internal_set_steamid_to_add(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_to_add_ = value;
}
inline void CMsgClientAddFriend::set_steamid_to_add(uint64_t value) {
  _internal_set_steamid_to_add(value);
  // @@protoc_insertion_point(field_set:CMsgClientAddFriend.steamid_to_add)
}

// optional string accountname_or_email_to_add = 2;
inline bool CMsgClientAddFriend::_internal_has_accountname_or_email_to_add() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientAddFriend::has_accountname_or_email_to_add() const {
  return _internal_has_accountname_or_email_to_add();
}
inline void CMsgClientAddFriend::clear_accountname_or_email_to_add() {
  accountname_or_email_to_add_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientAddFriend::accountname_or_email_to_add() const {
  // @@protoc_insertion_point(field_get:CMsgClientAddFriend.accountname_or_email_to_add)
  return _internal_accountname_or_email_to_add();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientAddFriend::set_accountname_or_email_to_add(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 accountname_or_email_to_add_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientAddFriend.accountname_or_email_to_add)
}
inline std::string* CMsgClientAddFriend::mutable_accountname_or_email_to_add() {
  std::string* _s = _internal_mutable_accountname_or_email_to_add();
  // @@protoc_insertion_point(field_mutable:CMsgClientAddFriend.accountname_or_email_to_add)
  return _s;
}
inline const std::string& CMsgClientAddFriend::_internal_accountname_or_email_to_add() const {
  return accountname_or_email_to_add_.Get();
}
inline void CMsgClientAddFriend::_internal_set_accountname_or_email_to_add(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  accountname_or_email_to_add_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientAddFriend::_internal_mutable_accountname_or_email_to_add() {
  _has_bits_[0] |= 0x00000001u;
  return accountname_or_email_to_add_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientAddFriend::release_accountname_or_email_to_add() {
  // @@protoc_insertion_point(field_release:CMsgClientAddFriend.accountname_or_email_to_add)
  if (!_internal_has_accountname_or_email_to_add()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = accountname_or_email_to_add_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (accountname_or_email_to_add_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    accountname_or_email_to_add_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientAddFriend::set_allocated_accountname_or_email_to_add(std::string* accountname_or_email_to_add) {
  if (accountname_or_email_to_add != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  accountname_or_email_to_add_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountname_or_email_to_add,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (accountname_or_email_to_add_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    accountname_or_email_to_add_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientAddFriend.accountname_or_email_to_add)
}

// -------------------------------------------------------------------

// CMsgClientAddFriendResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientAddFriendResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientAddFriendResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientAddFriendResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgClientAddFriendResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientAddFriendResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientAddFriendResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientAddFriendResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  eresult_ = value;
}
inline void CMsgClientAddFriendResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientAddFriendResponse.eresult)
}

// optional fixed64 steam_id_added = 2;
inline bool CMsgClientAddFriendResponse::_internal_has_steam_id_added() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientAddFriendResponse::has_steam_id_added() const {
  return _internal_has_steam_id_added();
}
inline void CMsgClientAddFriendResponse::clear_steam_id_added() {
  steam_id_added_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientAddFriendResponse::_internal_steam_id_added() const {
  return steam_id_added_;
}
inline uint64_t CMsgClientAddFriendResponse::steam_id_added() const {
  // @@protoc_insertion_point(field_get:CMsgClientAddFriendResponse.steam_id_added)
  return _internal_steam_id_added();
}
inline void CMsgClientAddFriendResponse::_internal_set_steam_id_added(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_added_ = value;
}
inline void CMsgClientAddFriendResponse::set_steam_id_added(uint64_t value) {
  _internal_set_steam_id_added(value);
  // @@protoc_insertion_point(field_set:CMsgClientAddFriendResponse.steam_id_added)
}

// optional string persona_name_added = 3;
inline bool CMsgClientAddFriendResponse::_internal_has_persona_name_added() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientAddFriendResponse::has_persona_name_added() const {
  return _internal_has_persona_name_added();
}
inline void CMsgClientAddFriendResponse::clear_persona_name_added() {
  persona_name_added_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientAddFriendResponse::persona_name_added() const {
  // @@protoc_insertion_point(field_get:CMsgClientAddFriendResponse.persona_name_added)
  return _internal_persona_name_added();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientAddFriendResponse::set_persona_name_added(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 persona_name_added_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientAddFriendResponse.persona_name_added)
}
inline std::string* CMsgClientAddFriendResponse::mutable_persona_name_added() {
  std::string* _s = _internal_mutable_persona_name_added();
  // @@protoc_insertion_point(field_mutable:CMsgClientAddFriendResponse.persona_name_added)
  return _s;
}
inline const std::string& CMsgClientAddFriendResponse::_internal_persona_name_added() const {
  return persona_name_added_.Get();
}
inline void CMsgClientAddFriendResponse::_internal_set_persona_name_added(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_added_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientAddFriendResponse::_internal_mutable_persona_name_added() {
  _has_bits_[0] |= 0x00000001u;
  return persona_name_added_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientAddFriendResponse::release_persona_name_added() {
  // @@protoc_insertion_point(field_release:CMsgClientAddFriendResponse.persona_name_added)
  if (!_internal_has_persona_name_added()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = persona_name_added_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_added_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_added_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientAddFriendResponse::set_allocated_persona_name_added(std::string* persona_name_added) {
  if (persona_name_added != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_name_added_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), persona_name_added,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_added_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_added_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientAddFriendResponse.persona_name_added)
}

// -------------------------------------------------------------------

// CMsgClientRemoveFriend

// optional fixed64 friendid = 1;
inline bool CMsgClientRemoveFriend::_internal_has_friendid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientRemoveFriend::has_friendid() const {
  return _internal_has_friendid();
}
inline void CMsgClientRemoveFriend::clear_friendid() {
  friendid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientRemoveFriend::_internal_friendid() const {
  return friendid_;
}
inline uint64_t CMsgClientRemoveFriend::friendid() const {
  // @@protoc_insertion_point(field_get:CMsgClientRemoveFriend.friendid)
  return _internal_friendid();
}
inline void CMsgClientRemoveFriend::_internal_set_friendid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  friendid_ = value;
}
inline void CMsgClientRemoveFriend::set_friendid(uint64_t value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:CMsgClientRemoveFriend.friendid)
}

// -------------------------------------------------------------------

// CMsgClientHideFriend

// optional fixed64 friendid = 1;
inline bool CMsgClientHideFriend::_internal_has_friendid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientHideFriend::has_friendid() const {
  return _internal_has_friendid();
}
inline void CMsgClientHideFriend::clear_friendid() {
  friendid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientHideFriend::_internal_friendid() const {
  return friendid_;
}
inline uint64_t CMsgClientHideFriend::friendid() const {
  // @@protoc_insertion_point(field_get:CMsgClientHideFriend.friendid)
  return _internal_friendid();
}
inline void CMsgClientHideFriend::_internal_set_friendid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  friendid_ = value;
}
inline void CMsgClientHideFriend::set_friendid(uint64_t value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:CMsgClientHideFriend.friendid)
}

// optional bool hide = 2;
inline bool CMsgClientHideFriend::_internal_has_hide() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientHideFriend::has_hide() const {
  return _internal_has_hide();
}
inline void CMsgClientHideFriend::clear_hide() {
  hide_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgClientHideFriend::_internal_hide() const {
  return hide_;
}
inline bool CMsgClientHideFriend::hide() const {
  // @@protoc_insertion_point(field_get:CMsgClientHideFriend.hide)
  return _internal_hide();
}
inline void CMsgClientHideFriend::_internal_set_hide(bool value) {
  _has_bits_[0] |= 0x00000002u;
  hide_ = value;
}
inline void CMsgClientHideFriend::set_hide(bool value) {
  _internal_set_hide(value);
  // @@protoc_insertion_point(field_set:CMsgClientHideFriend.hide)
}

// -------------------------------------------------------------------

// CMsgClientFriendsList_Friend

// optional fixed64 ulfriendid = 1;
inline bool CMsgClientFriendsList_Friend::_internal_has_ulfriendid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientFriendsList_Friend::has_ulfriendid() const {
  return _internal_has_ulfriendid();
}
inline void CMsgClientFriendsList_Friend::clear_ulfriendid() {
  ulfriendid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientFriendsList_Friend::_internal_ulfriendid() const {
  return ulfriendid_;
}
inline uint64_t CMsgClientFriendsList_Friend::ulfriendid() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendsList.Friend.ulfriendid)
  return _internal_ulfriendid();
}
inline void CMsgClientFriendsList_Friend::_internal_set_ulfriendid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  ulfriendid_ = value;
}
inline void CMsgClientFriendsList_Friend::set_ulfriendid(uint64_t value) {
  _internal_set_ulfriendid(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendsList.Friend.ulfriendid)
}

// optional uint32 efriendrelationship = 2;
inline bool CMsgClientFriendsList_Friend::_internal_has_efriendrelationship() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientFriendsList_Friend::has_efriendrelationship() const {
  return _internal_has_efriendrelationship();
}
inline void CMsgClientFriendsList_Friend::clear_efriendrelationship() {
  efriendrelationship_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientFriendsList_Friend::_internal_efriendrelationship() const {
  return efriendrelationship_;
}
inline uint32_t CMsgClientFriendsList_Friend::efriendrelationship() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendsList.Friend.efriendrelationship)
  return _internal_efriendrelationship();
}
inline void CMsgClientFriendsList_Friend::_internal_set_efriendrelationship(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  efriendrelationship_ = value;
}
inline void CMsgClientFriendsList_Friend::set_efriendrelationship(uint32_t value) {
  _internal_set_efriendrelationship(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendsList.Friend.efriendrelationship)
}

// -------------------------------------------------------------------

// CMsgClientFriendsList

// optional bool bincremental = 1;
inline bool CMsgClientFriendsList::_internal_has_bincremental() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientFriendsList::has_bincremental() const {
  return _internal_has_bincremental();
}
inline void CMsgClientFriendsList::clear_bincremental() {
  bincremental_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgClientFriendsList::_internal_bincremental() const {
  return bincremental_;
}
inline bool CMsgClientFriendsList::bincremental() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendsList.bincremental)
  return _internal_bincremental();
}
inline void CMsgClientFriendsList::_internal_set_bincremental(bool value) {
  _has_bits_[0] |= 0x00000002u;
  bincremental_ = value;
}
inline void CMsgClientFriendsList::set_bincremental(bool value) {
  _internal_set_bincremental(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendsList.bincremental)
}

// repeated .CMsgClientFriendsList.Friend friends = 2;
inline int CMsgClientFriendsList::_internal_friends_size() const {
  return friends_.size();
}
inline int CMsgClientFriendsList::friends_size() const {
  return _internal_friends_size();
}
inline void CMsgClientFriendsList::clear_friends() {
  friends_.Clear();
}
inline ::CMsgClientFriendsList_Friend* CMsgClientFriendsList::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientFriendsList.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientFriendsList_Friend >*
CMsgClientFriendsList::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientFriendsList.friends)
  return &friends_;
}
inline const ::CMsgClientFriendsList_Friend& CMsgClientFriendsList::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::CMsgClientFriendsList_Friend& CMsgClientFriendsList::friends(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendsList.friends)
  return _internal_friends(index);
}
inline ::CMsgClientFriendsList_Friend* CMsgClientFriendsList::_internal_add_friends() {
  return friends_.Add();
}
inline ::CMsgClientFriendsList_Friend* CMsgClientFriendsList::add_friends() {
  ::CMsgClientFriendsList_Friend* _add = _internal_add_friends();
  // @@protoc_insertion_point(field_add:CMsgClientFriendsList.friends)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientFriendsList_Friend >&
CMsgClientFriendsList::friends() const {
  // @@protoc_insertion_point(field_list:CMsgClientFriendsList.friends)
  return friends_;
}

// optional uint32 max_friend_count = 3;
inline bool CMsgClientFriendsList::_internal_has_max_friend_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientFriendsList::has_max_friend_count() const {
  return _internal_has_max_friend_count();
}
inline void CMsgClientFriendsList::clear_max_friend_count() {
  max_friend_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientFriendsList::_internal_max_friend_count() const {
  return max_friend_count_;
}
inline uint32_t CMsgClientFriendsList::max_friend_count() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendsList.max_friend_count)
  return _internal_max_friend_count();
}
inline void CMsgClientFriendsList::_internal_set_max_friend_count(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  max_friend_count_ = value;
}
inline void CMsgClientFriendsList::set_max_friend_count(uint32_t value) {
  _internal_set_max_friend_count(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendsList.max_friend_count)
}

// optional uint32 active_friend_count = 4;
inline bool CMsgClientFriendsList::_internal_has_active_friend_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientFriendsList::has_active_friend_count() const {
  return _internal_has_active_friend_count();
}
inline void CMsgClientFriendsList::clear_active_friend_count() {
  active_friend_count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientFriendsList::_internal_active_friend_count() const {
  return active_friend_count_;
}
inline uint32_t CMsgClientFriendsList::active_friend_count() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendsList.active_friend_count)
  return _internal_active_friend_count();
}
inline void CMsgClientFriendsList::_internal_set_active_friend_count(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  active_friend_count_ = value;
}
inline void CMsgClientFriendsList::set_active_friend_count(uint32_t value) {
  _internal_set_active_friend_count(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendsList.active_friend_count)
}

// optional bool friends_limit_hit = 5;
inline bool CMsgClientFriendsList::_internal_has_friends_limit_hit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientFriendsList::has_friends_limit_hit() const {
  return _internal_has_friends_limit_hit();
}
inline void CMsgClientFriendsList::clear_friends_limit_hit() {
  friends_limit_hit_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgClientFriendsList::_internal_friends_limit_hit() const {
  return friends_limit_hit_;
}
inline bool CMsgClientFriendsList::friends_limit_hit() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendsList.friends_limit_hit)
  return _internal_friends_limit_hit();
}
inline void CMsgClientFriendsList::_internal_set_friends_limit_hit(bool value) {
  _has_bits_[0] |= 0x00000004u;
  friends_limit_hit_ = value;
}
inline void CMsgClientFriendsList::set_friends_limit_hit(bool value) {
  _internal_set_friends_limit_hit(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendsList.friends_limit_hit)
}

// -------------------------------------------------------------------

// CMsgClientFriendsGroupsList_FriendGroup

// optional int32 nGroupID = 1;
inline bool CMsgClientFriendsGroupsList_FriendGroup::_internal_has_ngroupid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientFriendsGroupsList_FriendGroup::has_ngroupid() const {
  return _internal_has_ngroupid();
}
inline void CMsgClientFriendsGroupsList_FriendGroup::clear_ngroupid() {
  ngroupid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientFriendsGroupsList_FriendGroup::_internal_ngroupid() const {
  return ngroupid_;
}
inline int32_t CMsgClientFriendsGroupsList_FriendGroup::ngroupid() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendsGroupsList.FriendGroup.nGroupID)
  return _internal_ngroupid();
}
inline void CMsgClientFriendsGroupsList_FriendGroup::_internal_set_ngroupid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ngroupid_ = value;
}
inline void CMsgClientFriendsGroupsList_FriendGroup::set_ngroupid(int32_t value) {
  _internal_set_ngroupid(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendsGroupsList.FriendGroup.nGroupID)
}

// optional string strGroupName = 2;
inline bool CMsgClientFriendsGroupsList_FriendGroup::_internal_has_strgroupname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientFriendsGroupsList_FriendGroup::has_strgroupname() const {
  return _internal_has_strgroupname();
}
inline void CMsgClientFriendsGroupsList_FriendGroup::clear_strgroupname() {
  strgroupname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientFriendsGroupsList_FriendGroup::strgroupname() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendsGroupsList.FriendGroup.strGroupName)
  return _internal_strgroupname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientFriendsGroupsList_FriendGroup::set_strgroupname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 strgroupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientFriendsGroupsList.FriendGroup.strGroupName)
}
inline std::string* CMsgClientFriendsGroupsList_FriendGroup::mutable_strgroupname() {
  std::string* _s = _internal_mutable_strgroupname();
  // @@protoc_insertion_point(field_mutable:CMsgClientFriendsGroupsList.FriendGroup.strGroupName)
  return _s;
}
inline const std::string& CMsgClientFriendsGroupsList_FriendGroup::_internal_strgroupname() const {
  return strgroupname_.Get();
}
inline void CMsgClientFriendsGroupsList_FriendGroup::_internal_set_strgroupname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  strgroupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendsGroupsList_FriendGroup::_internal_mutable_strgroupname() {
  _has_bits_[0] |= 0x00000001u;
  return strgroupname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendsGroupsList_FriendGroup::release_strgroupname() {
  // @@protoc_insertion_point(field_release:CMsgClientFriendsGroupsList.FriendGroup.strGroupName)
  if (!_internal_has_strgroupname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = strgroupname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strgroupname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strgroupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientFriendsGroupsList_FriendGroup::set_allocated_strgroupname(std::string* strgroupname) {
  if (strgroupname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  strgroupname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strgroupname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strgroupname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strgroupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientFriendsGroupsList.FriendGroup.strGroupName)
}

// -------------------------------------------------------------------

// CMsgClientFriendsGroupsList_FriendGroupsMembership

// optional fixed64 ulSteamID = 1;
inline bool CMsgClientFriendsGroupsList_FriendGroupsMembership::_internal_has_ulsteamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientFriendsGroupsList_FriendGroupsMembership::has_ulsteamid() const {
  return _internal_has_ulsteamid();
}
inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::clear_ulsteamid() {
  ulsteamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientFriendsGroupsList_FriendGroupsMembership::_internal_ulsteamid() const {
  return ulsteamid_;
}
inline uint64_t CMsgClientFriendsGroupsList_FriendGroupsMembership::ulsteamid() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendsGroupsList.FriendGroupsMembership.ulSteamID)
  return _internal_ulsteamid();
}
inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::_internal_set_ulsteamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  ulsteamid_ = value;
}
inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::set_ulsteamid(uint64_t value) {
  _internal_set_ulsteamid(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendsGroupsList.FriendGroupsMembership.ulSteamID)
}

// optional int32 nGroupID = 2;
inline bool CMsgClientFriendsGroupsList_FriendGroupsMembership::_internal_has_ngroupid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientFriendsGroupsList_FriendGroupsMembership::has_ngroupid() const {
  return _internal_has_ngroupid();
}
inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::clear_ngroupid() {
  ngroupid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientFriendsGroupsList_FriendGroupsMembership::_internal_ngroupid() const {
  return ngroupid_;
}
inline int32_t CMsgClientFriendsGroupsList_FriendGroupsMembership::ngroupid() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendsGroupsList.FriendGroupsMembership.nGroupID)
  return _internal_ngroupid();
}
inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::_internal_set_ngroupid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ngroupid_ = value;
}
inline void CMsgClientFriendsGroupsList_FriendGroupsMembership::set_ngroupid(int32_t value) {
  _internal_set_ngroupid(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendsGroupsList.FriendGroupsMembership.nGroupID)
}

// -------------------------------------------------------------------

// CMsgClientFriendsGroupsList

// optional bool bremoval = 1;
inline bool CMsgClientFriendsGroupsList::_internal_has_bremoval() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientFriendsGroupsList::has_bremoval() const {
  return _internal_has_bremoval();
}
inline void CMsgClientFriendsGroupsList::clear_bremoval() {
  bremoval_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgClientFriendsGroupsList::_internal_bremoval() const {
  return bremoval_;
}
inline bool CMsgClientFriendsGroupsList::bremoval() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendsGroupsList.bremoval)
  return _internal_bremoval();
}
inline void CMsgClientFriendsGroupsList::_internal_set_bremoval(bool value) {
  _has_bits_[0] |= 0x00000001u;
  bremoval_ = value;
}
inline void CMsgClientFriendsGroupsList::set_bremoval(bool value) {
  _internal_set_bremoval(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendsGroupsList.bremoval)
}

// optional bool bincremental = 2;
inline bool CMsgClientFriendsGroupsList::_internal_has_bincremental() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientFriendsGroupsList::has_bincremental() const {
  return _internal_has_bincremental();
}
inline void CMsgClientFriendsGroupsList::clear_bincremental() {
  bincremental_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgClientFriendsGroupsList::_internal_bincremental() const {
  return bincremental_;
}
inline bool CMsgClientFriendsGroupsList::bincremental() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendsGroupsList.bincremental)
  return _internal_bincremental();
}
inline void CMsgClientFriendsGroupsList::_internal_set_bincremental(bool value) {
  _has_bits_[0] |= 0x00000002u;
  bincremental_ = value;
}
inline void CMsgClientFriendsGroupsList::set_bincremental(bool value) {
  _internal_set_bincremental(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendsGroupsList.bincremental)
}

// repeated .CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
inline int CMsgClientFriendsGroupsList::_internal_friendgroups_size() const {
  return friendgroups_.size();
}
inline int CMsgClientFriendsGroupsList::friendgroups_size() const {
  return _internal_friendgroups_size();
}
inline void CMsgClientFriendsGroupsList::clear_friendgroups() {
  friendgroups_.Clear();
}
inline ::CMsgClientFriendsGroupsList_FriendGroup* CMsgClientFriendsGroupsList::mutable_friendgroups(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientFriendsGroupsList.friendGroups)
  return friendgroups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroup >*
CMsgClientFriendsGroupsList::mutable_friendgroups() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientFriendsGroupsList.friendGroups)
  return &friendgroups_;
}
inline const ::CMsgClientFriendsGroupsList_FriendGroup& CMsgClientFriendsGroupsList::_internal_friendgroups(int index) const {
  return friendgroups_.Get(index);
}
inline const ::CMsgClientFriendsGroupsList_FriendGroup& CMsgClientFriendsGroupsList::friendgroups(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendsGroupsList.friendGroups)
  return _internal_friendgroups(index);
}
inline ::CMsgClientFriendsGroupsList_FriendGroup* CMsgClientFriendsGroupsList::_internal_add_friendgroups() {
  return friendgroups_.Add();
}
inline ::CMsgClientFriendsGroupsList_FriendGroup* CMsgClientFriendsGroupsList::add_friendgroups() {
  ::CMsgClientFriendsGroupsList_FriendGroup* _add = _internal_add_friendgroups();
  // @@protoc_insertion_point(field_add:CMsgClientFriendsGroupsList.friendGroups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroup >&
CMsgClientFriendsGroupsList::friendgroups() const {
  // @@protoc_insertion_point(field_list:CMsgClientFriendsGroupsList.friendGroups)
  return friendgroups_;
}

// repeated .CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
inline int CMsgClientFriendsGroupsList::_internal_memberships_size() const {
  return memberships_.size();
}
inline int CMsgClientFriendsGroupsList::memberships_size() const {
  return _internal_memberships_size();
}
inline void CMsgClientFriendsGroupsList::clear_memberships() {
  memberships_.Clear();
}
inline ::CMsgClientFriendsGroupsList_FriendGroupsMembership* CMsgClientFriendsGroupsList::mutable_memberships(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientFriendsGroupsList.memberships)
  return memberships_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroupsMembership >*
CMsgClientFriendsGroupsList::mutable_memberships() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientFriendsGroupsList.memberships)
  return &memberships_;
}
inline const ::CMsgClientFriendsGroupsList_FriendGroupsMembership& CMsgClientFriendsGroupsList::_internal_memberships(int index) const {
  return memberships_.Get(index);
}
inline const ::CMsgClientFriendsGroupsList_FriendGroupsMembership& CMsgClientFriendsGroupsList::memberships(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendsGroupsList.memberships)
  return _internal_memberships(index);
}
inline ::CMsgClientFriendsGroupsList_FriendGroupsMembership* CMsgClientFriendsGroupsList::_internal_add_memberships() {
  return memberships_.Add();
}
inline ::CMsgClientFriendsGroupsList_FriendGroupsMembership* CMsgClientFriendsGroupsList::add_memberships() {
  ::CMsgClientFriendsGroupsList_FriendGroupsMembership* _add = _internal_add_memberships();
  // @@protoc_insertion_point(field_add:CMsgClientFriendsGroupsList.memberships)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientFriendsGroupsList_FriendGroupsMembership >&
CMsgClientFriendsGroupsList::memberships() const {
  // @@protoc_insertion_point(field_list:CMsgClientFriendsGroupsList.memberships)
  return memberships_;
}

// -------------------------------------------------------------------

// CMsgClientPlayerNicknameList_PlayerNickname

// optional fixed64 steamid = 1;
inline bool CMsgClientPlayerNicknameList_PlayerNickname::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientPlayerNicknameList_PlayerNickname::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientPlayerNicknameList_PlayerNickname::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CMsgClientPlayerNicknameList_PlayerNickname::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgClientPlayerNicknameList.PlayerNickname.steamid)
  return _internal_steamid();
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgClientPlayerNicknameList.PlayerNickname.steamid)
}

// optional string nickname = 3;
inline bool CMsgClientPlayerNicknameList_PlayerNickname::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientPlayerNicknameList_PlayerNickname::has_nickname() const {
  return _internal_has_nickname();
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::clear_nickname() {
  nickname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientPlayerNicknameList_PlayerNickname::nickname() const {
  // @@protoc_insertion_point(field_get:CMsgClientPlayerNicknameList.PlayerNickname.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientPlayerNicknameList_PlayerNickname::set_nickname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientPlayerNicknameList.PlayerNickname.nickname)
}
inline std::string* CMsgClientPlayerNicknameList_PlayerNickname::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:CMsgClientPlayerNicknameList.PlayerNickname.nickname)
  return _s;
}
inline const std::string& CMsgClientPlayerNicknameList_PlayerNickname::_internal_nickname() const {
  return nickname_.Get();
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientPlayerNicknameList_PlayerNickname::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000001u;
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientPlayerNicknameList_PlayerNickname::release_nickname() {
  // @@protoc_insertion_point(field_release:CMsgClientPlayerNicknameList.PlayerNickname.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = nickname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientPlayerNicknameList_PlayerNickname::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientPlayerNicknameList.PlayerNickname.nickname)
}

// -------------------------------------------------------------------

// CMsgClientPlayerNicknameList

// optional bool removal = 1;
inline bool CMsgClientPlayerNicknameList::_internal_has_removal() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientPlayerNicknameList::has_removal() const {
  return _internal_has_removal();
}
inline void CMsgClientPlayerNicknameList::clear_removal() {
  removal_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgClientPlayerNicknameList::_internal_removal() const {
  return removal_;
}
inline bool CMsgClientPlayerNicknameList::removal() const {
  // @@protoc_insertion_point(field_get:CMsgClientPlayerNicknameList.removal)
  return _internal_removal();
}
inline void CMsgClientPlayerNicknameList::_internal_set_removal(bool value) {
  _has_bits_[0] |= 0x00000001u;
  removal_ = value;
}
inline void CMsgClientPlayerNicknameList::set_removal(bool value) {
  _internal_set_removal(value);
  // @@protoc_insertion_point(field_set:CMsgClientPlayerNicknameList.removal)
}

// optional bool incremental = 2;
inline bool CMsgClientPlayerNicknameList::_internal_has_incremental() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientPlayerNicknameList::has_incremental() const {
  return _internal_has_incremental();
}
inline void CMsgClientPlayerNicknameList::clear_incremental() {
  incremental_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgClientPlayerNicknameList::_internal_incremental() const {
  return incremental_;
}
inline bool CMsgClientPlayerNicknameList::incremental() const {
  // @@protoc_insertion_point(field_get:CMsgClientPlayerNicknameList.incremental)
  return _internal_incremental();
}
inline void CMsgClientPlayerNicknameList::_internal_set_incremental(bool value) {
  _has_bits_[0] |= 0x00000002u;
  incremental_ = value;
}
inline void CMsgClientPlayerNicknameList::set_incremental(bool value) {
  _internal_set_incremental(value);
  // @@protoc_insertion_point(field_set:CMsgClientPlayerNicknameList.incremental)
}

// repeated .CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
inline int CMsgClientPlayerNicknameList::_internal_nicknames_size() const {
  return nicknames_.size();
}
inline int CMsgClientPlayerNicknameList::nicknames_size() const {
  return _internal_nicknames_size();
}
inline void CMsgClientPlayerNicknameList::clear_nicknames() {
  nicknames_.Clear();
}
inline ::CMsgClientPlayerNicknameList_PlayerNickname* CMsgClientPlayerNicknameList::mutable_nicknames(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientPlayerNicknameList.nicknames)
  return nicknames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientPlayerNicknameList_PlayerNickname >*
CMsgClientPlayerNicknameList::mutable_nicknames() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientPlayerNicknameList.nicknames)
  return &nicknames_;
}
inline const ::CMsgClientPlayerNicknameList_PlayerNickname& CMsgClientPlayerNicknameList::_internal_nicknames(int index) const {
  return nicknames_.Get(index);
}
inline const ::CMsgClientPlayerNicknameList_PlayerNickname& CMsgClientPlayerNicknameList::nicknames(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientPlayerNicknameList.nicknames)
  return _internal_nicknames(index);
}
inline ::CMsgClientPlayerNicknameList_PlayerNickname* CMsgClientPlayerNicknameList::_internal_add_nicknames() {
  return nicknames_.Add();
}
inline ::CMsgClientPlayerNicknameList_PlayerNickname* CMsgClientPlayerNicknameList::add_nicknames() {
  ::CMsgClientPlayerNicknameList_PlayerNickname* _add = _internal_add_nicknames();
  // @@protoc_insertion_point(field_add:CMsgClientPlayerNicknameList.nicknames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientPlayerNicknameList_PlayerNickname >&
CMsgClientPlayerNicknameList::nicknames() const {
  // @@protoc_insertion_point(field_list:CMsgClientPlayerNicknameList.nicknames)
  return nicknames_;
}

// -------------------------------------------------------------------

// CMsgClientSetPlayerNickname

// optional fixed64 steamid = 1;
inline bool CMsgClientSetPlayerNickname::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientSetPlayerNickname::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgClientSetPlayerNickname::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientSetPlayerNickname::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CMsgClientSetPlayerNickname::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgClientSetPlayerNickname.steamid)
  return _internal_steamid();
}
inline void CMsgClientSetPlayerNickname::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CMsgClientSetPlayerNickname::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgClientSetPlayerNickname.steamid)
}

// optional string nickname = 2;
inline bool CMsgClientSetPlayerNickname::_internal_has_nickname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSetPlayerNickname::has_nickname() const {
  return _internal_has_nickname();
}
inline void CMsgClientSetPlayerNickname::clear_nickname() {
  nickname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientSetPlayerNickname::nickname() const {
  // @@protoc_insertion_point(field_get:CMsgClientSetPlayerNickname.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientSetPlayerNickname::set_nickname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientSetPlayerNickname.nickname)
}
inline std::string* CMsgClientSetPlayerNickname::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:CMsgClientSetPlayerNickname.nickname)
  return _s;
}
inline const std::string& CMsgClientSetPlayerNickname::_internal_nickname() const {
  return nickname_.Get();
}
inline void CMsgClientSetPlayerNickname::_internal_set_nickname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientSetPlayerNickname::_internal_mutable_nickname() {
  _has_bits_[0] |= 0x00000001u;
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientSetPlayerNickname::release_nickname() {
  // @@protoc_insertion_point(field_release:CMsgClientSetPlayerNickname.nickname)
  if (!_internal_has_nickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = nickname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientSetPlayerNickname::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSetPlayerNickname.nickname)
}

// -------------------------------------------------------------------

// CMsgClientSetPlayerNicknameResponse

// optional uint32 eresult = 1;
inline bool CMsgClientSetPlayerNicknameResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSetPlayerNicknameResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientSetPlayerNicknameResponse::clear_eresult() {
  eresult_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientSetPlayerNicknameResponse::_internal_eresult() const {
  return eresult_;
}
inline uint32_t CMsgClientSetPlayerNicknameResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientSetPlayerNicknameResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientSetPlayerNicknameResponse::_internal_set_eresult(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  eresult_ = value;
}
inline void CMsgClientSetPlayerNicknameResponse::set_eresult(uint32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientSetPlayerNicknameResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgClientRequestFriendData

// optional uint32 persona_state_requested = 1;
inline bool CMsgClientRequestFriendData::_internal_has_persona_state_requested() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientRequestFriendData::has_persona_state_requested() const {
  return _internal_has_persona_state_requested();
}
inline void CMsgClientRequestFriendData::clear_persona_state_requested() {
  persona_state_requested_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientRequestFriendData::_internal_persona_state_requested() const {
  return persona_state_requested_;
}
inline uint32_t CMsgClientRequestFriendData::persona_state_requested() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestFriendData.persona_state_requested)
  return _internal_persona_state_requested();
}
inline void CMsgClientRequestFriendData::_internal_set_persona_state_requested(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  persona_state_requested_ = value;
}
inline void CMsgClientRequestFriendData::set_persona_state_requested(uint32_t value) {
  _internal_set_persona_state_requested(value);
  // @@protoc_insertion_point(field_set:CMsgClientRequestFriendData.persona_state_requested)
}

// repeated fixed64 friends = 2;
inline int CMsgClientRequestFriendData::_internal_friends_size() const {
  return friends_.size();
}
inline int CMsgClientRequestFriendData::friends_size() const {
  return _internal_friends_size();
}
inline void CMsgClientRequestFriendData::clear_friends() {
  friends_.Clear();
}
inline uint64_t CMsgClientRequestFriendData::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline uint64_t CMsgClientRequestFriendData::friends(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestFriendData.friends)
  return _internal_friends(index);
}
inline void CMsgClientRequestFriendData::set_friends(int index, uint64_t value) {
  friends_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientRequestFriendData.friends)
}
inline void CMsgClientRequestFriendData::_internal_add_friends(uint64_t value) {
  friends_.Add(value);
}
inline void CMsgClientRequestFriendData::add_friends(uint64_t value) {
  _internal_add_friends(value);
  // @@protoc_insertion_point(field_add:CMsgClientRequestFriendData.friends)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientRequestFriendData::_internal_friends() const {
  return friends_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientRequestFriendData::friends() const {
  // @@protoc_insertion_point(field_list:CMsgClientRequestFriendData.friends)
  return _internal_friends();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientRequestFriendData::_internal_mutable_friends() {
  return &friends_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientRequestFriendData::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientRequestFriendData.friends)
  return _internal_mutable_friends();
}

// -------------------------------------------------------------------

// CMsgClientChangeStatus

// optional uint32 persona_state = 1;
inline bool CMsgClientChangeStatus::_internal_has_persona_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientChangeStatus::has_persona_state() const {
  return _internal_has_persona_state();
}
inline void CMsgClientChangeStatus::clear_persona_state() {
  persona_state_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientChangeStatus::_internal_persona_state() const {
  return persona_state_;
}
inline uint32_t CMsgClientChangeStatus::persona_state() const {
  // @@protoc_insertion_point(field_get:CMsgClientChangeStatus.persona_state)
  return _internal_persona_state();
}
inline void CMsgClientChangeStatus::_internal_set_persona_state(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  persona_state_ = value;
}
inline void CMsgClientChangeStatus::set_persona_state(uint32_t value) {
  _internal_set_persona_state(value);
  // @@protoc_insertion_point(field_set:CMsgClientChangeStatus.persona_state)
}

// optional string player_name = 2;
inline bool CMsgClientChangeStatus::_internal_has_player_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientChangeStatus::has_player_name() const {
  return _internal_has_player_name();
}
inline void CMsgClientChangeStatus::clear_player_name() {
  player_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientChangeStatus::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientChangeStatus.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientChangeStatus::set_player_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientChangeStatus.player_name)
}
inline std::string* CMsgClientChangeStatus::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientChangeStatus.player_name)
  return _s;
}
inline const std::string& CMsgClientChangeStatus::_internal_player_name() const {
  return player_name_.Get();
}
inline void CMsgClientChangeStatus::_internal_set_player_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientChangeStatus::_internal_mutable_player_name() {
  _has_bits_[0] |= 0x00000001u;
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientChangeStatus::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgClientChangeStatus.player_name)
  if (!_internal_has_player_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = player_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (player_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientChangeStatus::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (player_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientChangeStatus.player_name)
}

// optional bool is_auto_generated_name = 3;
inline bool CMsgClientChangeStatus::_internal_has_is_auto_generated_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientChangeStatus::has_is_auto_generated_name() const {
  return _internal_has_is_auto_generated_name();
}
inline void CMsgClientChangeStatus::clear_is_auto_generated_name() {
  is_auto_generated_name_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgClientChangeStatus::_internal_is_auto_generated_name() const {
  return is_auto_generated_name_;
}
inline bool CMsgClientChangeStatus::is_auto_generated_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientChangeStatus.is_auto_generated_name)
  return _internal_is_auto_generated_name();
}
inline void CMsgClientChangeStatus::_internal_set_is_auto_generated_name(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_auto_generated_name_ = value;
}
inline void CMsgClientChangeStatus::set_is_auto_generated_name(bool value) {
  _internal_set_is_auto_generated_name(value);
  // @@protoc_insertion_point(field_set:CMsgClientChangeStatus.is_auto_generated_name)
}

// optional bool high_priority = 4;
inline bool CMsgClientChangeStatus::_internal_has_high_priority() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientChangeStatus::has_high_priority() const {
  return _internal_has_high_priority();
}
inline void CMsgClientChangeStatus::clear_high_priority() {
  high_priority_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgClientChangeStatus::_internal_high_priority() const {
  return high_priority_;
}
inline bool CMsgClientChangeStatus::high_priority() const {
  // @@protoc_insertion_point(field_get:CMsgClientChangeStatus.high_priority)
  return _internal_high_priority();
}
inline void CMsgClientChangeStatus::_internal_set_high_priority(bool value) {
  _has_bits_[0] |= 0x00000008u;
  high_priority_ = value;
}
inline void CMsgClientChangeStatus::set_high_priority(bool value) {
  _internal_set_high_priority(value);
  // @@protoc_insertion_point(field_set:CMsgClientChangeStatus.high_priority)
}

// optional bool persona_set_by_user = 5;
inline bool CMsgClientChangeStatus::_internal_has_persona_set_by_user() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientChangeStatus::has_persona_set_by_user() const {
  return _internal_has_persona_set_by_user();
}
inline void CMsgClientChangeStatus::clear_persona_set_by_user() {
  persona_set_by_user_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgClientChangeStatus::_internal_persona_set_by_user() const {
  return persona_set_by_user_;
}
inline bool CMsgClientChangeStatus::persona_set_by_user() const {
  // @@protoc_insertion_point(field_get:CMsgClientChangeStatus.persona_set_by_user)
  return _internal_persona_set_by_user();
}
inline void CMsgClientChangeStatus::_internal_set_persona_set_by_user(bool value) {
  _has_bits_[0] |= 0x00000010u;
  persona_set_by_user_ = value;
}
inline void CMsgClientChangeStatus::set_persona_set_by_user(bool value) {
  _internal_set_persona_set_by_user(value);
  // @@protoc_insertion_point(field_set:CMsgClientChangeStatus.persona_set_by_user)
}

// optional uint32 persona_state_flags = 6 [default = 0];
inline bool CMsgClientChangeStatus::_internal_has_persona_state_flags() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientChangeStatus::has_persona_state_flags() const {
  return _internal_has_persona_state_flags();
}
inline void CMsgClientChangeStatus::clear_persona_state_flags() {
  persona_state_flags_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgClientChangeStatus::_internal_persona_state_flags() const {
  return persona_state_flags_;
}
inline uint32_t CMsgClientChangeStatus::persona_state_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientChangeStatus.persona_state_flags)
  return _internal_persona_state_flags();
}
inline void CMsgClientChangeStatus::_internal_set_persona_state_flags(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  persona_state_flags_ = value;
}
inline void CMsgClientChangeStatus::set_persona_state_flags(uint32_t value) {
  _internal_set_persona_state_flags(value);
  // @@protoc_insertion_point(field_set:CMsgClientChangeStatus.persona_state_flags)
}

// optional bool need_persona_response = 7;
inline bool CMsgClientChangeStatus::_internal_has_need_persona_response() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientChangeStatus::has_need_persona_response() const {
  return _internal_has_need_persona_response();
}
inline void CMsgClientChangeStatus::clear_need_persona_response() {
  need_persona_response_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgClientChangeStatus::_internal_need_persona_response() const {
  return need_persona_response_;
}
inline bool CMsgClientChangeStatus::need_persona_response() const {
  // @@protoc_insertion_point(field_get:CMsgClientChangeStatus.need_persona_response)
  return _internal_need_persona_response();
}
inline void CMsgClientChangeStatus::_internal_set_need_persona_response(bool value) {
  _has_bits_[0] |= 0x00000020u;
  need_persona_response_ = value;
}
inline void CMsgClientChangeStatus::set_need_persona_response(bool value) {
  _internal_set_need_persona_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientChangeStatus.need_persona_response)
}

// optional bool is_client_idle = 8;
inline bool CMsgClientChangeStatus::_internal_has_is_client_idle() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientChangeStatus::has_is_client_idle() const {
  return _internal_has_is_client_idle();
}
inline void CMsgClientChangeStatus::clear_is_client_idle() {
  is_client_idle_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgClientChangeStatus::_internal_is_client_idle() const {
  return is_client_idle_;
}
inline bool CMsgClientChangeStatus::is_client_idle() const {
  // @@protoc_insertion_point(field_get:CMsgClientChangeStatus.is_client_idle)
  return _internal_is_client_idle();
}
inline void CMsgClientChangeStatus::_internal_set_is_client_idle(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_client_idle_ = value;
}
inline void CMsgClientChangeStatus::set_is_client_idle(bool value) {
  _internal_set_is_client_idle(value);
  // @@protoc_insertion_point(field_set:CMsgClientChangeStatus.is_client_idle)
}

// -------------------------------------------------------------------

// CMsgPersonaChangeResponse

// optional uint32 result = 1;
inline bool CMsgPersonaChangeResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPersonaChangeResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgPersonaChangeResponse::clear_result() {
  result_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgPersonaChangeResponse::_internal_result() const {
  return result_;
}
inline uint32_t CMsgPersonaChangeResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgPersonaChangeResponse.result)
  return _internal_result();
}
inline void CMsgPersonaChangeResponse::_internal_set_result(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
}
inline void CMsgPersonaChangeResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgPersonaChangeResponse.result)
}

// optional string player_name = 2;
inline bool CMsgPersonaChangeResponse::_internal_has_player_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPersonaChangeResponse::has_player_name() const {
  return _internal_has_player_name();
}
inline void CMsgPersonaChangeResponse::clear_player_name() {
  player_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPersonaChangeResponse::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgPersonaChangeResponse.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgPersonaChangeResponse::set_player_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgPersonaChangeResponse.player_name)
}
inline std::string* CMsgPersonaChangeResponse::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:CMsgPersonaChangeResponse.player_name)
  return _s;
}
inline const std::string& CMsgPersonaChangeResponse::_internal_player_name() const {
  return player_name_.Get();
}
inline void CMsgPersonaChangeResponse::_internal_set_player_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgPersonaChangeResponse::_internal_mutable_player_name() {
  _has_bits_[0] |= 0x00000001u;
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgPersonaChangeResponse::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgPersonaChangeResponse.player_name)
  if (!_internal_has_player_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = player_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (player_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgPersonaChangeResponse::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (player_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgPersonaChangeResponse.player_name)
}

// -------------------------------------------------------------------

// CMsgClientPersonaState_Friend_ClanData

// optional uint32 ogg_app_id = 1;
inline bool CMsgClientPersonaState_Friend_ClanData::_internal_has_ogg_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend_ClanData::has_ogg_app_id() const {
  return _internal_has_ogg_app_id();
}
inline void CMsgClientPersonaState_Friend_ClanData::clear_ogg_app_id() {
  ogg_app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientPersonaState_Friend_ClanData::_internal_ogg_app_id() const {
  return ogg_app_id_;
}
inline uint32_t CMsgClientPersonaState_Friend_ClanData::ogg_app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.ClanData.ogg_app_id)
  return _internal_ogg_app_id();
}
inline void CMsgClientPersonaState_Friend_ClanData::_internal_set_ogg_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ogg_app_id_ = value;
}
inline void CMsgClientPersonaState_Friend_ClanData::set_ogg_app_id(uint32_t value) {
  _internal_set_ogg_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.ClanData.ogg_app_id)
}

// optional uint64 chat_group_id = 2;
inline bool CMsgClientPersonaState_Friend_ClanData::_internal_has_chat_group_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend_ClanData::has_chat_group_id() const {
  return _internal_has_chat_group_id();
}
inline void CMsgClientPersonaState_Friend_ClanData::clear_chat_group_id() {
  chat_group_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientPersonaState_Friend_ClanData::_internal_chat_group_id() const {
  return chat_group_id_;
}
inline uint64_t CMsgClientPersonaState_Friend_ClanData::chat_group_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.ClanData.chat_group_id)
  return _internal_chat_group_id();
}
inline void CMsgClientPersonaState_Friend_ClanData::_internal_set_chat_group_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  chat_group_id_ = value;
}
inline void CMsgClientPersonaState_Friend_ClanData::set_chat_group_id(uint64_t value) {
  _internal_set_chat_group_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.ClanData.chat_group_id)
}

// -------------------------------------------------------------------

// CMsgClientPersonaState_Friend_KV

// optional string key = 1;
inline bool CMsgClientPersonaState_Friend_KV::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend_KV::has_key() const {
  return _internal_has_key();
}
inline void CMsgClientPersonaState_Friend_KV::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientPersonaState_Friend_KV::key() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.KV.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientPersonaState_Friend_KV::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.KV.key)
}
inline std::string* CMsgClientPersonaState_Friend_KV::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:CMsgClientPersonaState.Friend.KV.key)
  return _s;
}
inline const std::string& CMsgClientPersonaState_Friend_KV::_internal_key() const {
  return key_.Get();
}
inline void CMsgClientPersonaState_Friend_KV::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend_KV::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend_KV::release_key() {
  // @@protoc_insertion_point(field_release:CMsgClientPersonaState.Friend.KV.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientPersonaState_Friend_KV::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientPersonaState.Friend.KV.key)
}

// optional string value = 2;
inline bool CMsgClientPersonaState_Friend_KV::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend_KV::has_value() const {
  return _internal_has_value();
}
inline void CMsgClientPersonaState_Friend_KV::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientPersonaState_Friend_KV::value() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.KV.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientPersonaState_Friend_KV::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.KV.value)
}
inline std::string* CMsgClientPersonaState_Friend_KV::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsgClientPersonaState.Friend.KV.value)
  return _s;
}
inline const std::string& CMsgClientPersonaState_Friend_KV::_internal_value() const {
  return value_.Get();
}
inline void CMsgClientPersonaState_Friend_KV::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend_KV::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend_KV::release_value() {
  // @@protoc_insertion_point(field_release:CMsgClientPersonaState.Friend.KV.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientPersonaState_Friend_KV::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientPersonaState.Friend.KV.value)
}

// -------------------------------------------------------------------

// CMsgClientPersonaState_Friend

// optional fixed64 friendid = 1;
inline bool CMsgClientPersonaState_Friend::_internal_has_friendid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_friendid() const {
  return _internal_has_friendid();
}
inline void CMsgClientPersonaState_Friend::clear_friendid() {
  friendid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CMsgClientPersonaState_Friend::_internal_friendid() const {
  return friendid_;
}
inline uint64_t CMsgClientPersonaState_Friend::friendid() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.friendid)
  return _internal_friendid();
}
inline void CMsgClientPersonaState_Friend::_internal_set_friendid(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  friendid_ = value;
}
inline void CMsgClientPersonaState_Friend::set_friendid(uint64_t value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.friendid)
}

// optional uint32 persona_state = 2;
inline bool CMsgClientPersonaState_Friend::_internal_has_persona_state() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_persona_state() const {
  return _internal_has_persona_state();
}
inline void CMsgClientPersonaState_Friend::clear_persona_state() {
  persona_state_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgClientPersonaState_Friend::_internal_persona_state() const {
  return persona_state_;
}
inline uint32_t CMsgClientPersonaState_Friend::persona_state() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.persona_state)
  return _internal_persona_state();
}
inline void CMsgClientPersonaState_Friend::_internal_set_persona_state(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  persona_state_ = value;
}
inline void CMsgClientPersonaState_Friend::set_persona_state(uint32_t value) {
  _internal_set_persona_state(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.persona_state)
}

// optional uint32 game_played_app_id = 3;
inline bool CMsgClientPersonaState_Friend::_internal_has_game_played_app_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_game_played_app_id() const {
  return _internal_has_game_played_app_id();
}
inline void CMsgClientPersonaState_Friend::clear_game_played_app_id() {
  game_played_app_id_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgClientPersonaState_Friend::_internal_game_played_app_id() const {
  return game_played_app_id_;
}
inline uint32_t CMsgClientPersonaState_Friend::game_played_app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.game_played_app_id)
  return _internal_game_played_app_id();
}
inline void CMsgClientPersonaState_Friend::_internal_set_game_played_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  game_played_app_id_ = value;
}
inline void CMsgClientPersonaState_Friend::set_game_played_app_id(uint32_t value) {
  _internal_set_game_played_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.game_played_app_id)
}

// optional uint32 game_server_ip = 4;
inline bool CMsgClientPersonaState_Friend::_internal_has_game_server_ip() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_game_server_ip() const {
  return _internal_has_game_server_ip();
}
inline void CMsgClientPersonaState_Friend::clear_game_server_ip() {
  game_server_ip_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgClientPersonaState_Friend::_internal_game_server_ip() const {
  return game_server_ip_;
}
inline uint32_t CMsgClientPersonaState_Friend::game_server_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.game_server_ip)
  return _internal_game_server_ip();
}
inline void CMsgClientPersonaState_Friend::_internal_set_game_server_ip(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  game_server_ip_ = value;
}
inline void CMsgClientPersonaState_Friend::set_game_server_ip(uint32_t value) {
  _internal_set_game_server_ip(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.game_server_ip)
}

// optional uint32 game_server_port = 5;
inline bool CMsgClientPersonaState_Friend::_internal_has_game_server_port() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_game_server_port() const {
  return _internal_has_game_server_port();
}
inline void CMsgClientPersonaState_Friend::clear_game_server_port() {
  game_server_port_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgClientPersonaState_Friend::_internal_game_server_port() const {
  return game_server_port_;
}
inline uint32_t CMsgClientPersonaState_Friend::game_server_port() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.game_server_port)
  return _internal_game_server_port();
}
inline void CMsgClientPersonaState_Friend::_internal_set_game_server_port(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  game_server_port_ = value;
}
inline void CMsgClientPersonaState_Friend::set_game_server_port(uint32_t value) {
  _internal_set_game_server_port(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.game_server_port)
}

// optional uint32 persona_state_flags = 6;
inline bool CMsgClientPersonaState_Friend::_internal_has_persona_state_flags() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_persona_state_flags() const {
  return _internal_has_persona_state_flags();
}
inline void CMsgClientPersonaState_Friend::clear_persona_state_flags() {
  persona_state_flags_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgClientPersonaState_Friend::_internal_persona_state_flags() const {
  return persona_state_flags_;
}
inline uint32_t CMsgClientPersonaState_Friend::persona_state_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.persona_state_flags)
  return _internal_persona_state_flags();
}
inline void CMsgClientPersonaState_Friend::_internal_set_persona_state_flags(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  persona_state_flags_ = value;
}
inline void CMsgClientPersonaState_Friend::set_persona_state_flags(uint32_t value) {
  _internal_set_persona_state_flags(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.persona_state_flags)
}

// optional uint32 online_session_instances = 7;
inline bool CMsgClientPersonaState_Friend::_internal_has_online_session_instances() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_online_session_instances() const {
  return _internal_has_online_session_instances();
}
inline void CMsgClientPersonaState_Friend::clear_online_session_instances() {
  online_session_instances_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgClientPersonaState_Friend::_internal_online_session_instances() const {
  return online_session_instances_;
}
inline uint32_t CMsgClientPersonaState_Friend::online_session_instances() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.online_session_instances)
  return _internal_online_session_instances();
}
inline void CMsgClientPersonaState_Friend::_internal_set_online_session_instances(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  online_session_instances_ = value;
}
inline void CMsgClientPersonaState_Friend::set_online_session_instances(uint32_t value) {
  _internal_set_online_session_instances(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.online_session_instances)
}

// optional bool persona_set_by_user = 10;
inline bool CMsgClientPersonaState_Friend::_internal_has_persona_set_by_user() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_persona_set_by_user() const {
  return _internal_has_persona_set_by_user();
}
inline void CMsgClientPersonaState_Friend::clear_persona_set_by_user() {
  persona_set_by_user_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool CMsgClientPersonaState_Friend::_internal_persona_set_by_user() const {
  return persona_set_by_user_;
}
inline bool CMsgClientPersonaState_Friend::persona_set_by_user() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.persona_set_by_user)
  return _internal_persona_set_by_user();
}
inline void CMsgClientPersonaState_Friend::_internal_set_persona_set_by_user(bool value) {
  _has_bits_[0] |= 0x00400000u;
  persona_set_by_user_ = value;
}
inline void CMsgClientPersonaState_Friend::set_persona_set_by_user(bool value) {
  _internal_set_persona_set_by_user(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.persona_set_by_user)
}

// optional string player_name = 15;
inline bool CMsgClientPersonaState_Friend::_internal_has_player_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_player_name() const {
  return _internal_has_player_name();
}
inline void CMsgClientPersonaState_Friend::clear_player_name() {
  player_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientPersonaState_Friend::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientPersonaState_Friend::set_player_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.player_name)
}
inline std::string* CMsgClientPersonaState_Friend::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientPersonaState.Friend.player_name)
  return _s;
}
inline const std::string& CMsgClientPersonaState_Friend::_internal_player_name() const {
  return player_name_.Get();
}
inline void CMsgClientPersonaState_Friend::_internal_set_player_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend::_internal_mutable_player_name() {
  _has_bits_[0] |= 0x00000001u;
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgClientPersonaState.Friend.player_name)
  if (!_internal_has_player_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = player_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (player_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientPersonaState_Friend::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (player_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientPersonaState.Friend.player_name)
}

// optional uint32 query_port = 20;
inline bool CMsgClientPersonaState_Friend::_internal_has_query_port() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_query_port() const {
  return _internal_has_query_port();
}
inline void CMsgClientPersonaState_Friend::clear_query_port() {
  query_port_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgClientPersonaState_Friend::_internal_query_port() const {
  return query_port_;
}
inline uint32_t CMsgClientPersonaState_Friend::query_port() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.query_port)
  return _internal_query_port();
}
inline void CMsgClientPersonaState_Friend::_internal_set_query_port(uint32_t value) {
  _has_bits_[0] |= 0x00010000u;
  query_port_ = value;
}
inline void CMsgClientPersonaState_Friend::set_query_port(uint32_t value) {
  _internal_set_query_port(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.query_port)
}

// optional fixed64 steamid_source = 25;
inline bool CMsgClientPersonaState_Friend::_internal_has_steamid_source() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_steamid_source() const {
  return _internal_has_steamid_source();
}
inline void CMsgClientPersonaState_Friend::clear_steamid_source() {
  steamid_source_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00004000u;
}
inline uint64_t CMsgClientPersonaState_Friend::_internal_steamid_source() const {
  return steamid_source_;
}
inline uint64_t CMsgClientPersonaState_Friend::steamid_source() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.steamid_source)
  return _internal_steamid_source();
}
inline void CMsgClientPersonaState_Friend::_internal_set_steamid_source(uint64_t value) {
  _has_bits_[0] |= 0x00004000u;
  steamid_source_ = value;
}
inline void CMsgClientPersonaState_Friend::set_steamid_source(uint64_t value) {
  _internal_set_steamid_source(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.steamid_source)
}

// optional bytes avatar_hash = 31;
inline bool CMsgClientPersonaState_Friend::_internal_has_avatar_hash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_avatar_hash() const {
  return _internal_has_avatar_hash();
}
inline void CMsgClientPersonaState_Friend::clear_avatar_hash() {
  avatar_hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientPersonaState_Friend::avatar_hash() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.avatar_hash)
  return _internal_avatar_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientPersonaState_Friend::set_avatar_hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 avatar_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.avatar_hash)
}
inline std::string* CMsgClientPersonaState_Friend::mutable_avatar_hash() {
  std::string* _s = _internal_mutable_avatar_hash();
  // @@protoc_insertion_point(field_mutable:CMsgClientPersonaState.Friend.avatar_hash)
  return _s;
}
inline const std::string& CMsgClientPersonaState_Friend::_internal_avatar_hash() const {
  return avatar_hash_.Get();
}
inline void CMsgClientPersonaState_Friend::_internal_set_avatar_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  avatar_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend::_internal_mutable_avatar_hash() {
  _has_bits_[0] |= 0x00000002u;
  return avatar_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend::release_avatar_hash() {
  // @@protoc_insertion_point(field_release:CMsgClientPersonaState.Friend.avatar_hash)
  if (!_internal_has_avatar_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = avatar_hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (avatar_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    avatar_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientPersonaState_Friend::set_allocated_avatar_hash(std::string* avatar_hash) {
  if (avatar_hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  avatar_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (avatar_hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    avatar_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientPersonaState.Friend.avatar_hash)
}

// optional uint32 last_logoff = 45;
inline bool CMsgClientPersonaState_Friend::_internal_has_last_logoff() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_last_logoff() const {
  return _internal_has_last_logoff();
}
inline void CMsgClientPersonaState_Friend::clear_last_logoff() {
  last_logoff_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgClientPersonaState_Friend::_internal_last_logoff() const {
  return last_logoff_;
}
inline uint32_t CMsgClientPersonaState_Friend::last_logoff() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.last_logoff)
  return _internal_last_logoff();
}
inline void CMsgClientPersonaState_Friend::_internal_set_last_logoff(uint32_t value) {
  _has_bits_[0] |= 0x00020000u;
  last_logoff_ = value;
}
inline void CMsgClientPersonaState_Friend::set_last_logoff(uint32_t value) {
  _internal_set_last_logoff(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.last_logoff)
}

// optional uint32 last_logon = 46;
inline bool CMsgClientPersonaState_Friend::_internal_has_last_logon() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_last_logon() const {
  return _internal_has_last_logon();
}
inline void CMsgClientPersonaState_Friend::clear_last_logon() {
  last_logon_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CMsgClientPersonaState_Friend::_internal_last_logon() const {
  return last_logon_;
}
inline uint32_t CMsgClientPersonaState_Friend::last_logon() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.last_logon)
  return _internal_last_logon();
}
inline void CMsgClientPersonaState_Friend::_internal_set_last_logon(uint32_t value) {
  _has_bits_[0] |= 0x00040000u;
  last_logon_ = value;
}
inline void CMsgClientPersonaState_Friend::set_last_logon(uint32_t value) {
  _internal_set_last_logon(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.last_logon)
}

// optional uint32 last_seen_online = 47;
inline bool CMsgClientPersonaState_Friend::_internal_has_last_seen_online() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_last_seen_online() const {
  return _internal_has_last_seen_online();
}
inline void CMsgClientPersonaState_Friend::clear_last_seen_online() {
  last_seen_online_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMsgClientPersonaState_Friend::_internal_last_seen_online() const {
  return last_seen_online_;
}
inline uint32_t CMsgClientPersonaState_Friend::last_seen_online() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.last_seen_online)
  return _internal_last_seen_online();
}
inline void CMsgClientPersonaState_Friend::_internal_set_last_seen_online(uint32_t value) {
  _has_bits_[0] |= 0x00080000u;
  last_seen_online_ = value;
}
inline void CMsgClientPersonaState_Friend::set_last_seen_online(uint32_t value) {
  _internal_set_last_seen_online(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.last_seen_online)
}

// optional uint32 clan_rank = 50;
inline bool CMsgClientPersonaState_Friend::_internal_has_clan_rank() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_clan_rank() const {
  return _internal_has_clan_rank();
}
inline void CMsgClientPersonaState_Friend::clear_clan_rank() {
  clan_rank_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CMsgClientPersonaState_Friend::_internal_clan_rank() const {
  return clan_rank_;
}
inline uint32_t CMsgClientPersonaState_Friend::clan_rank() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.clan_rank)
  return _internal_clan_rank();
}
inline void CMsgClientPersonaState_Friend::_internal_set_clan_rank(uint32_t value) {
  _has_bits_[0] |= 0x00200000u;
  clan_rank_ = value;
}
inline void CMsgClientPersonaState_Friend::set_clan_rank(uint32_t value) {
  _internal_set_clan_rank(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.clan_rank)
}

// optional string game_name = 55;
inline bool CMsgClientPersonaState_Friend::_internal_has_game_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_game_name() const {
  return _internal_has_game_name();
}
inline void CMsgClientPersonaState_Friend::clear_game_name() {
  game_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgClientPersonaState_Friend::game_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.game_name)
  return _internal_game_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientPersonaState_Friend::set_game_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.game_name)
}
inline std::string* CMsgClientPersonaState_Friend::mutable_game_name() {
  std::string* _s = _internal_mutable_game_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientPersonaState.Friend.game_name)
  return _s;
}
inline const std::string& CMsgClientPersonaState_Friend::_internal_game_name() const {
  return game_name_.Get();
}
inline void CMsgClientPersonaState_Friend::_internal_set_game_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend::_internal_mutable_game_name() {
  _has_bits_[0] |= 0x00000004u;
  return game_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend::release_game_name() {
  // @@protoc_insertion_point(field_release:CMsgClientPersonaState.Friend.game_name)
  if (!_internal_has_game_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = game_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientPersonaState_Friend::set_allocated_game_name(std::string* game_name) {
  if (game_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  game_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientPersonaState.Friend.game_name)
}

// optional fixed64 gameid = 56;
inline bool CMsgClientPersonaState_Friend::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_gameid() const {
  return _internal_has_gameid();
}
inline void CMsgClientPersonaState_Friend::clear_gameid() {
  gameid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00100000u;
}
inline uint64_t CMsgClientPersonaState_Friend::_internal_gameid() const {
  return gameid_;
}
inline uint64_t CMsgClientPersonaState_Friend::gameid() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.gameid)
  return _internal_gameid();
}
inline void CMsgClientPersonaState_Friend::_internal_set_gameid(uint64_t value) {
  _has_bits_[0] |= 0x00100000u;
  gameid_ = value;
}
inline void CMsgClientPersonaState_Friend::set_gameid(uint64_t value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.gameid)
}

// optional bytes game_data_blob = 60;
inline bool CMsgClientPersonaState_Friend::_internal_has_game_data_blob() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_game_data_blob() const {
  return _internal_has_game_data_blob();
}
inline void CMsgClientPersonaState_Friend::clear_game_data_blob() {
  game_data_blob_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgClientPersonaState_Friend::game_data_blob() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.game_data_blob)
  return _internal_game_data_blob();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientPersonaState_Friend::set_game_data_blob(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 game_data_blob_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.game_data_blob)
}
inline std::string* CMsgClientPersonaState_Friend::mutable_game_data_blob() {
  std::string* _s = _internal_mutable_game_data_blob();
  // @@protoc_insertion_point(field_mutable:CMsgClientPersonaState.Friend.game_data_blob)
  return _s;
}
inline const std::string& CMsgClientPersonaState_Friend::_internal_game_data_blob() const {
  return game_data_blob_.Get();
}
inline void CMsgClientPersonaState_Friend::_internal_set_game_data_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  game_data_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend::_internal_mutable_game_data_blob() {
  _has_bits_[0] |= 0x00000008u;
  return game_data_blob_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend::release_game_data_blob() {
  // @@protoc_insertion_point(field_release:CMsgClientPersonaState.Friend.game_data_blob)
  if (!_internal_has_game_data_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = game_data_blob_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_data_blob_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_data_blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientPersonaState_Friend::set_allocated_game_data_blob(std::string* game_data_blob) {
  if (game_data_blob != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  game_data_blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_data_blob,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_data_blob_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_data_blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientPersonaState.Friend.game_data_blob)
}

// optional .CMsgClientPersonaState.Friend.ClanData clan_data = 64;
inline bool CMsgClientPersonaState_Friend::_internal_has_clan_data() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || clan_data_ != nullptr);
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_clan_data() const {
  return _internal_has_clan_data();
}
inline void CMsgClientPersonaState_Friend::clear_clan_data() {
  if (clan_data_ != nullptr) clan_data_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::CMsgClientPersonaState_Friend_ClanData& CMsgClientPersonaState_Friend::_internal_clan_data() const {
  const ::CMsgClientPersonaState_Friend_ClanData* p = clan_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgClientPersonaState_Friend_ClanData&>(
      ::_CMsgClientPersonaState_Friend_ClanData_default_instance_);
}
inline const ::CMsgClientPersonaState_Friend_ClanData& CMsgClientPersonaState_Friend::clan_data() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.clan_data)
  return _internal_clan_data();
}
inline void CMsgClientPersonaState_Friend::unsafe_arena_set_allocated_clan_data(
    ::CMsgClientPersonaState_Friend_ClanData* clan_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clan_data_);
  }
  clan_data_ = clan_data;
  if (clan_data) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientPersonaState.Friend.clan_data)
}
inline ::CMsgClientPersonaState_Friend_ClanData* CMsgClientPersonaState_Friend::release_clan_data() {
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgClientPersonaState_Friend_ClanData* temp = clan_data_;
  clan_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgClientPersonaState_Friend_ClanData* CMsgClientPersonaState_Friend::unsafe_arena_release_clan_data() {
  // @@protoc_insertion_point(field_release:CMsgClientPersonaState.Friend.clan_data)
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgClientPersonaState_Friend_ClanData* temp = clan_data_;
  clan_data_ = nullptr;
  return temp;
}
inline ::CMsgClientPersonaState_Friend_ClanData* CMsgClientPersonaState_Friend::_internal_mutable_clan_data() {
  _has_bits_[0] |= 0x00000040u;
  if (clan_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgClientPersonaState_Friend_ClanData>(GetArenaForAllocation());
    clan_data_ = p;
  }
  return clan_data_;
}
inline ::CMsgClientPersonaState_Friend_ClanData* CMsgClientPersonaState_Friend::mutable_clan_data() {
  ::CMsgClientPersonaState_Friend_ClanData* _msg = _internal_mutable_clan_data();
  // @@protoc_insertion_point(field_mutable:CMsgClientPersonaState.Friend.clan_data)
  return _msg;
}
inline void CMsgClientPersonaState_Friend::set_allocated_clan_data(::CMsgClientPersonaState_Friend_ClanData* clan_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete clan_data_;
  }
  if (clan_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgClientPersonaState_Friend_ClanData>::GetOwningArena(clan_data);
    if (message_arena != submessage_arena) {
      clan_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clan_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  clan_data_ = clan_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientPersonaState.Friend.clan_data)
}

// optional string clan_tag = 65;
inline bool CMsgClientPersonaState_Friend::_internal_has_clan_tag() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_clan_tag() const {
  return _internal_has_clan_tag();
}
inline void CMsgClientPersonaState_Friend::clear_clan_tag() {
  clan_tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgClientPersonaState_Friend::clan_tag() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.clan_tag)
  return _internal_clan_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientPersonaState_Friend::set_clan_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 clan_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.clan_tag)
}
inline std::string* CMsgClientPersonaState_Friend::mutable_clan_tag() {
  std::string* _s = _internal_mutable_clan_tag();
  // @@protoc_insertion_point(field_mutable:CMsgClientPersonaState.Friend.clan_tag)
  return _s;
}
inline const std::string& CMsgClientPersonaState_Friend::_internal_clan_tag() const {
  return clan_tag_.Get();
}
inline void CMsgClientPersonaState_Friend::_internal_set_clan_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  clan_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend::_internal_mutable_clan_tag() {
  _has_bits_[0] |= 0x00000010u;
  return clan_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend::release_clan_tag() {
  // @@protoc_insertion_point(field_release:CMsgClientPersonaState.Friend.clan_tag)
  if (!_internal_has_clan_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = clan_tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (clan_tag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    clan_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientPersonaState_Friend::set_allocated_clan_tag(std::string* clan_tag) {
  if (clan_tag != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  clan_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clan_tag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (clan_tag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    clan_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientPersonaState.Friend.clan_tag)
}

// repeated .CMsgClientPersonaState.Friend.KV rich_presence = 71;
inline int CMsgClientPersonaState_Friend::_internal_rich_presence_size() const {
  return rich_presence_.size();
}
inline int CMsgClientPersonaState_Friend::rich_presence_size() const {
  return _internal_rich_presence_size();
}
inline void CMsgClientPersonaState_Friend::clear_rich_presence() {
  rich_presence_.Clear();
}
inline ::CMsgClientPersonaState_Friend_KV* CMsgClientPersonaState_Friend::mutable_rich_presence(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientPersonaState.Friend.rich_presence)
  return rich_presence_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientPersonaState_Friend_KV >*
CMsgClientPersonaState_Friend::mutable_rich_presence() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientPersonaState.Friend.rich_presence)
  return &rich_presence_;
}
inline const ::CMsgClientPersonaState_Friend_KV& CMsgClientPersonaState_Friend::_internal_rich_presence(int index) const {
  return rich_presence_.Get(index);
}
inline const ::CMsgClientPersonaState_Friend_KV& CMsgClientPersonaState_Friend::rich_presence(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.rich_presence)
  return _internal_rich_presence(index);
}
inline ::CMsgClientPersonaState_Friend_KV* CMsgClientPersonaState_Friend::_internal_add_rich_presence() {
  return rich_presence_.Add();
}
inline ::CMsgClientPersonaState_Friend_KV* CMsgClientPersonaState_Friend::add_rich_presence() {
  ::CMsgClientPersonaState_Friend_KV* _add = _internal_add_rich_presence();
  // @@protoc_insertion_point(field_add:CMsgClientPersonaState.Friend.rich_presence)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientPersonaState_Friend_KV >&
CMsgClientPersonaState_Friend::rich_presence() const {
  // @@protoc_insertion_point(field_list:CMsgClientPersonaState.Friend.rich_presence)
  return rich_presence_;
}

// optional fixed64 broadcast_id = 72;
inline bool CMsgClientPersonaState_Friend::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CMsgClientPersonaState_Friend::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x04000000u;
}
inline uint64_t CMsgClientPersonaState_Friend::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CMsgClientPersonaState_Friend::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.broadcast_id)
  return _internal_broadcast_id();
}
inline void CMsgClientPersonaState_Friend::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x04000000u;
  broadcast_id_ = value;
}
inline void CMsgClientPersonaState_Friend::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.broadcast_id)
}

// optional fixed64 game_lobby_id = 73;
inline bool CMsgClientPersonaState_Friend::_internal_has_game_lobby_id() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_game_lobby_id() const {
  return _internal_has_game_lobby_id();
}
inline void CMsgClientPersonaState_Friend::clear_game_lobby_id() {
  game_lobby_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x08000000u;
}
inline uint64_t CMsgClientPersonaState_Friend::_internal_game_lobby_id() const {
  return game_lobby_id_;
}
inline uint64_t CMsgClientPersonaState_Friend::game_lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.game_lobby_id)
  return _internal_game_lobby_id();
}
inline void CMsgClientPersonaState_Friend::_internal_set_game_lobby_id(uint64_t value) {
  _has_bits_[0] |= 0x08000000u;
  game_lobby_id_ = value;
}
inline void CMsgClientPersonaState_Friend::set_game_lobby_id(uint64_t value) {
  _internal_set_game_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.game_lobby_id)
}

// optional uint32 watching_broadcast_accountid = 74;
inline bool CMsgClientPersonaState_Friend::_internal_has_watching_broadcast_accountid() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_watching_broadcast_accountid() const {
  return _internal_has_watching_broadcast_accountid();
}
inline void CMsgClientPersonaState_Friend::clear_watching_broadcast_accountid() {
  watching_broadcast_accountid_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CMsgClientPersonaState_Friend::_internal_watching_broadcast_accountid() const {
  return watching_broadcast_accountid_;
}
inline uint32_t CMsgClientPersonaState_Friend::watching_broadcast_accountid() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.watching_broadcast_accountid)
  return _internal_watching_broadcast_accountid();
}
inline void CMsgClientPersonaState_Friend::_internal_set_watching_broadcast_accountid(uint32_t value) {
  _has_bits_[0] |= 0x10000000u;
  watching_broadcast_accountid_ = value;
}
inline void CMsgClientPersonaState_Friend::set_watching_broadcast_accountid(uint32_t value) {
  _internal_set_watching_broadcast_accountid(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.watching_broadcast_accountid)
}

// optional uint32 watching_broadcast_appid = 75;
inline bool CMsgClientPersonaState_Friend::_internal_has_watching_broadcast_appid() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_watching_broadcast_appid() const {
  return _internal_has_watching_broadcast_appid();
}
inline void CMsgClientPersonaState_Friend::clear_watching_broadcast_appid() {
  watching_broadcast_appid_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CMsgClientPersonaState_Friend::_internal_watching_broadcast_appid() const {
  return watching_broadcast_appid_;
}
inline uint32_t CMsgClientPersonaState_Friend::watching_broadcast_appid() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.watching_broadcast_appid)
  return _internal_watching_broadcast_appid();
}
inline void CMsgClientPersonaState_Friend::_internal_set_watching_broadcast_appid(uint32_t value) {
  _has_bits_[0] |= 0x20000000u;
  watching_broadcast_appid_ = value;
}
inline void CMsgClientPersonaState_Friend::set_watching_broadcast_appid(uint32_t value) {
  _internal_set_watching_broadcast_appid(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.watching_broadcast_appid)
}

// optional uint32 watching_broadcast_viewers = 76;
inline bool CMsgClientPersonaState_Friend::_internal_has_watching_broadcast_viewers() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_watching_broadcast_viewers() const {
  return _internal_has_watching_broadcast_viewers();
}
inline void CMsgClientPersonaState_Friend::clear_watching_broadcast_viewers() {
  watching_broadcast_viewers_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgClientPersonaState_Friend::_internal_watching_broadcast_viewers() const {
  return watching_broadcast_viewers_;
}
inline uint32_t CMsgClientPersonaState_Friend::watching_broadcast_viewers() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.watching_broadcast_viewers)
  return _internal_watching_broadcast_viewers();
}
inline void CMsgClientPersonaState_Friend::_internal_set_watching_broadcast_viewers(uint32_t value) {
  _has_bits_[0] |= 0x00008000u;
  watching_broadcast_viewers_ = value;
}
inline void CMsgClientPersonaState_Friend::set_watching_broadcast_viewers(uint32_t value) {
  _internal_set_watching_broadcast_viewers(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.watching_broadcast_viewers)
}

// optional string watching_broadcast_title = 77;
inline bool CMsgClientPersonaState_Friend::_internal_has_watching_broadcast_title() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_watching_broadcast_title() const {
  return _internal_has_watching_broadcast_title();
}
inline void CMsgClientPersonaState_Friend::clear_watching_broadcast_title() {
  watching_broadcast_title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CMsgClientPersonaState_Friend::watching_broadcast_title() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.watching_broadcast_title)
  return _internal_watching_broadcast_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientPersonaState_Friend::set_watching_broadcast_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 watching_broadcast_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.watching_broadcast_title)
}
inline std::string* CMsgClientPersonaState_Friend::mutable_watching_broadcast_title() {
  std::string* _s = _internal_mutable_watching_broadcast_title();
  // @@protoc_insertion_point(field_mutable:CMsgClientPersonaState.Friend.watching_broadcast_title)
  return _s;
}
inline const std::string& CMsgClientPersonaState_Friend::_internal_watching_broadcast_title() const {
  return watching_broadcast_title_.Get();
}
inline void CMsgClientPersonaState_Friend::_internal_set_watching_broadcast_title(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  watching_broadcast_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend::_internal_mutable_watching_broadcast_title() {
  _has_bits_[0] |= 0x00000020u;
  return watching_broadcast_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientPersonaState_Friend::release_watching_broadcast_title() {
  // @@protoc_insertion_point(field_release:CMsgClientPersonaState.Friend.watching_broadcast_title)
  if (!_internal_has_watching_broadcast_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = watching_broadcast_title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (watching_broadcast_title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    watching_broadcast_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientPersonaState_Friend::set_allocated_watching_broadcast_title(std::string* watching_broadcast_title) {
  if (watching_broadcast_title != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  watching_broadcast_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), watching_broadcast_title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (watching_broadcast_title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    watching_broadcast_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientPersonaState.Friend.watching_broadcast_title)
}

// optional bool is_community_banned = 78;
inline bool CMsgClientPersonaState_Friend::_internal_has_is_community_banned() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_is_community_banned() const {
  return _internal_has_is_community_banned();
}
inline void CMsgClientPersonaState_Friend::clear_is_community_banned() {
  is_community_banned_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool CMsgClientPersonaState_Friend::_internal_is_community_banned() const {
  return is_community_banned_;
}
inline bool CMsgClientPersonaState_Friend::is_community_banned() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.is_community_banned)
  return _internal_is_community_banned();
}
inline void CMsgClientPersonaState_Friend::_internal_set_is_community_banned(bool value) {
  _has_bits_[0] |= 0x00800000u;
  is_community_banned_ = value;
}
inline void CMsgClientPersonaState_Friend::set_is_community_banned(bool value) {
  _internal_set_is_community_banned(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.is_community_banned)
}

// optional bool player_name_pending_review = 79;
inline bool CMsgClientPersonaState_Friend::_internal_has_player_name_pending_review() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_player_name_pending_review() const {
  return _internal_has_player_name_pending_review();
}
inline void CMsgClientPersonaState_Friend::clear_player_name_pending_review() {
  player_name_pending_review_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool CMsgClientPersonaState_Friend::_internal_player_name_pending_review() const {
  return player_name_pending_review_;
}
inline bool CMsgClientPersonaState_Friend::player_name_pending_review() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.player_name_pending_review)
  return _internal_player_name_pending_review();
}
inline void CMsgClientPersonaState_Friend::_internal_set_player_name_pending_review(bool value) {
  _has_bits_[0] |= 0x01000000u;
  player_name_pending_review_ = value;
}
inline void CMsgClientPersonaState_Friend::set_player_name_pending_review(bool value) {
  _internal_set_player_name_pending_review(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.player_name_pending_review)
}

// optional bool avatar_pending_review = 80;
inline bool CMsgClientPersonaState_Friend::_internal_has_avatar_pending_review() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgClientPersonaState_Friend::has_avatar_pending_review() const {
  return _internal_has_avatar_pending_review();
}
inline void CMsgClientPersonaState_Friend::clear_avatar_pending_review() {
  avatar_pending_review_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool CMsgClientPersonaState_Friend::_internal_avatar_pending_review() const {
  return avatar_pending_review_;
}
inline bool CMsgClientPersonaState_Friend::avatar_pending_review() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.Friend.avatar_pending_review)
  return _internal_avatar_pending_review();
}
inline void CMsgClientPersonaState_Friend::_internal_set_avatar_pending_review(bool value) {
  _has_bits_[0] |= 0x02000000u;
  avatar_pending_review_ = value;
}
inline void CMsgClientPersonaState_Friend::set_avatar_pending_review(bool value) {
  _internal_set_avatar_pending_review(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.Friend.avatar_pending_review)
}

// -------------------------------------------------------------------

// CMsgClientPersonaState

// optional uint32 status_flags = 1;
inline bool CMsgClientPersonaState::_internal_has_status_flags() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientPersonaState::has_status_flags() const {
  return _internal_has_status_flags();
}
inline void CMsgClientPersonaState::clear_status_flags() {
  status_flags_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientPersonaState::_internal_status_flags() const {
  return status_flags_;
}
inline uint32_t CMsgClientPersonaState::status_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.status_flags)
  return _internal_status_flags();
}
inline void CMsgClientPersonaState::_internal_set_status_flags(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  status_flags_ = value;
}
inline void CMsgClientPersonaState::set_status_flags(uint32_t value) {
  _internal_set_status_flags(value);
  // @@protoc_insertion_point(field_set:CMsgClientPersonaState.status_flags)
}

// repeated .CMsgClientPersonaState.Friend friends = 2;
inline int CMsgClientPersonaState::_internal_friends_size() const {
  return friends_.size();
}
inline int CMsgClientPersonaState::friends_size() const {
  return _internal_friends_size();
}
inline void CMsgClientPersonaState::clear_friends() {
  friends_.Clear();
}
inline ::CMsgClientPersonaState_Friend* CMsgClientPersonaState::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientPersonaState.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientPersonaState_Friend >*
CMsgClientPersonaState::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientPersonaState.friends)
  return &friends_;
}
inline const ::CMsgClientPersonaState_Friend& CMsgClientPersonaState::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::CMsgClientPersonaState_Friend& CMsgClientPersonaState::friends(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientPersonaState.friends)
  return _internal_friends(index);
}
inline ::CMsgClientPersonaState_Friend* CMsgClientPersonaState::_internal_add_friends() {
  return friends_.Add();
}
inline ::CMsgClientPersonaState_Friend* CMsgClientPersonaState::add_friends() {
  ::CMsgClientPersonaState_Friend* _add = _internal_add_friends();
  // @@protoc_insertion_point(field_add:CMsgClientPersonaState.friends)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientPersonaState_Friend >&
CMsgClientPersonaState::friends() const {
  // @@protoc_insertion_point(field_list:CMsgClientPersonaState.friends)
  return friends_;
}

// -------------------------------------------------------------------

// CMsgClientFriendProfileInfo

// optional fixed64 steamid_friend = 1;
inline bool CMsgClientFriendProfileInfo::_internal_has_steamid_friend() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientFriendProfileInfo::has_steamid_friend() const {
  return _internal_has_steamid_friend();
}
inline void CMsgClientFriendProfileInfo::clear_steamid_friend() {
  steamid_friend_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientFriendProfileInfo::_internal_steamid_friend() const {
  return steamid_friend_;
}
inline uint64_t CMsgClientFriendProfileInfo::steamid_friend() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendProfileInfo.steamid_friend)
  return _internal_steamid_friend();
}
inline void CMsgClientFriendProfileInfo::_internal_set_steamid_friend(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_friend_ = value;
}
inline void CMsgClientFriendProfileInfo::set_steamid_friend(uint64_t value) {
  _internal_set_steamid_friend(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendProfileInfo.steamid_friend)
}

// -------------------------------------------------------------------

// CMsgClientFriendProfileInfoResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientFriendProfileInfoResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientFriendProfileInfoResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientFriendProfileInfoResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t CMsgClientFriendProfileInfoResponse::_internal_eresult() const {
  return eresult_;
}
inline int32_t CMsgClientFriendProfileInfoResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendProfileInfoResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientFriendProfileInfoResponse::_internal_set_eresult(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  eresult_ = value;
}
inline void CMsgClientFriendProfileInfoResponse::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendProfileInfoResponse.eresult)
}

// optional fixed64 steamid_friend = 2;
inline bool CMsgClientFriendProfileInfoResponse::_internal_has_steamid_friend() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientFriendProfileInfoResponse::has_steamid_friend() const {
  return _internal_has_steamid_friend();
}
inline void CMsgClientFriendProfileInfoResponse::clear_steamid_friend() {
  steamid_friend_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CMsgClientFriendProfileInfoResponse::_internal_steamid_friend() const {
  return steamid_friend_;
}
inline uint64_t CMsgClientFriendProfileInfoResponse::steamid_friend() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendProfileInfoResponse.steamid_friend)
  return _internal_steamid_friend();
}
inline void CMsgClientFriendProfileInfoResponse::_internal_set_steamid_friend(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  steamid_friend_ = value;
}
inline void CMsgClientFriendProfileInfoResponse::set_steamid_friend(uint64_t value) {
  _internal_set_steamid_friend(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendProfileInfoResponse.steamid_friend)
}

// optional uint32 time_created = 3;
inline bool CMsgClientFriendProfileInfoResponse::_internal_has_time_created() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientFriendProfileInfoResponse::has_time_created() const {
  return _internal_has_time_created();
}
inline void CMsgClientFriendProfileInfoResponse::clear_time_created() {
  time_created_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgClientFriendProfileInfoResponse::_internal_time_created() const {
  return time_created_;
}
inline uint32_t CMsgClientFriendProfileInfoResponse::time_created() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendProfileInfoResponse.time_created)
  return _internal_time_created();
}
inline void CMsgClientFriendProfileInfoResponse::_internal_set_time_created(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  time_created_ = value;
}
inline void CMsgClientFriendProfileInfoResponse::set_time_created(uint32_t value) {
  _internal_set_time_created(value);
  // @@protoc_insertion_point(field_set:CMsgClientFriendProfileInfoResponse.time_created)
}

// optional string real_name = 4;
inline bool CMsgClientFriendProfileInfoResponse::_internal_has_real_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientFriendProfileInfoResponse::has_real_name() const {
  return _internal_has_real_name();
}
inline void CMsgClientFriendProfileInfoResponse::clear_real_name() {
  real_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientFriendProfileInfoResponse::real_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendProfileInfoResponse.real_name)
  return _internal_real_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientFriendProfileInfoResponse::set_real_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientFriendProfileInfoResponse.real_name)
}
inline std::string* CMsgClientFriendProfileInfoResponse::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientFriendProfileInfoResponse.real_name)
  return _s;
}
inline const std::string& CMsgClientFriendProfileInfoResponse::_internal_real_name() const {
  return real_name_.Get();
}
inline void CMsgClientFriendProfileInfoResponse::_internal_set_real_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendProfileInfoResponse::_internal_mutable_real_name() {
  _has_bits_[0] |= 0x00000001u;
  return real_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendProfileInfoResponse::release_real_name() {
  // @@protoc_insertion_point(field_release:CMsgClientFriendProfileInfoResponse.real_name)
  if (!_internal_has_real_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = real_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (real_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    real_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientFriendProfileInfoResponse::set_allocated_real_name(std::string* real_name) {
  if (real_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  real_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (real_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    real_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientFriendProfileInfoResponse.real_name)
}

// optional string city_name = 5;
inline bool CMsgClientFriendProfileInfoResponse::_internal_has_city_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientFriendProfileInfoResponse::has_city_name() const {
  return _internal_has_city_name();
}
inline void CMsgClientFriendProfileInfoResponse::clear_city_name() {
  city_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientFriendProfileInfoResponse::city_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendProfileInfoResponse.city_name)
  return _internal_city_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientFriendProfileInfoResponse::set_city_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 city_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientFriendProfileInfoResponse.city_name)
}
inline std::string* CMsgClientFriendProfileInfoResponse::mutable_city_name() {
  std::string* _s = _internal_mutable_city_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientFriendProfileInfoResponse.city_name)
  return _s;
}
inline const std::string& CMsgClientFriendProfileInfoResponse::_internal_city_name() const {
  return city_name_.Get();
}
inline void CMsgClientFriendProfileInfoResponse::_internal_set_city_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  city_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendProfileInfoResponse::_internal_mutable_city_name() {
  _has_bits_[0] |= 0x00000002u;
  return city_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendProfileInfoResponse::release_city_name() {
  // @@protoc_insertion_point(field_release:CMsgClientFriendProfileInfoResponse.city_name)
  if (!_internal_has_city_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = city_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (city_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    city_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientFriendProfileInfoResponse::set_allocated_city_name(std::string* city_name) {
  if (city_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  city_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (city_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    city_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientFriendProfileInfoResponse.city_name)
}

// optional string state_name = 6;
inline bool CMsgClientFriendProfileInfoResponse::_internal_has_state_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientFriendProfileInfoResponse::has_state_name() const {
  return _internal_has_state_name();
}
inline void CMsgClientFriendProfileInfoResponse::clear_state_name() {
  state_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgClientFriendProfileInfoResponse::state_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendProfileInfoResponse.state_name)
  return _internal_state_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientFriendProfileInfoResponse::set_state_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 state_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientFriendProfileInfoResponse.state_name)
}
inline std::string* CMsgClientFriendProfileInfoResponse::mutable_state_name() {
  std::string* _s = _internal_mutable_state_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientFriendProfileInfoResponse.state_name)
  return _s;
}
inline const std::string& CMsgClientFriendProfileInfoResponse::_internal_state_name() const {
  return state_name_.Get();
}
inline void CMsgClientFriendProfileInfoResponse::_internal_set_state_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  state_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendProfileInfoResponse::_internal_mutable_state_name() {
  _has_bits_[0] |= 0x00000004u;
  return state_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendProfileInfoResponse::release_state_name() {
  // @@protoc_insertion_point(field_release:CMsgClientFriendProfileInfoResponse.state_name)
  if (!_internal_has_state_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = state_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (state_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    state_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientFriendProfileInfoResponse::set_allocated_state_name(std::string* state_name) {
  if (state_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  state_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (state_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    state_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientFriendProfileInfoResponse.state_name)
}

// optional string country_name = 7;
inline bool CMsgClientFriendProfileInfoResponse::_internal_has_country_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientFriendProfileInfoResponse::has_country_name() const {
  return _internal_has_country_name();
}
inline void CMsgClientFriendProfileInfoResponse::clear_country_name() {
  country_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgClientFriendProfileInfoResponse::country_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendProfileInfoResponse.country_name)
  return _internal_country_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientFriendProfileInfoResponse::set_country_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 country_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientFriendProfileInfoResponse.country_name)
}
inline std::string* CMsgClientFriendProfileInfoResponse::mutable_country_name() {
  std::string* _s = _internal_mutable_country_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientFriendProfileInfoResponse.country_name)
  return _s;
}
inline const std::string& CMsgClientFriendProfileInfoResponse::_internal_country_name() const {
  return country_name_.Get();
}
inline void CMsgClientFriendProfileInfoResponse::_internal_set_country_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  country_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendProfileInfoResponse::_internal_mutable_country_name() {
  _has_bits_[0] |= 0x00000008u;
  return country_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendProfileInfoResponse::release_country_name() {
  // @@protoc_insertion_point(field_release:CMsgClientFriendProfileInfoResponse.country_name)
  if (!_internal_has_country_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = country_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientFriendProfileInfoResponse::set_allocated_country_name(std::string* country_name) {
  if (country_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  country_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientFriendProfileInfoResponse.country_name)
}

// optional string headline = 8;
inline bool CMsgClientFriendProfileInfoResponse::_internal_has_headline() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientFriendProfileInfoResponse::has_headline() const {
  return _internal_has_headline();
}
inline void CMsgClientFriendProfileInfoResponse::clear_headline() {
  headline_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgClientFriendProfileInfoResponse::headline() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendProfileInfoResponse.headline)
  return _internal_headline();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientFriendProfileInfoResponse::set_headline(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientFriendProfileInfoResponse.headline)
}
inline std::string* CMsgClientFriendProfileInfoResponse::mutable_headline() {
  std::string* _s = _internal_mutable_headline();
  // @@protoc_insertion_point(field_mutable:CMsgClientFriendProfileInfoResponse.headline)
  return _s;
}
inline const std::string& CMsgClientFriendProfileInfoResponse::_internal_headline() const {
  return headline_.Get();
}
inline void CMsgClientFriendProfileInfoResponse::_internal_set_headline(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendProfileInfoResponse::_internal_mutable_headline() {
  _has_bits_[0] |= 0x00000010u;
  return headline_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendProfileInfoResponse::release_headline() {
  // @@protoc_insertion_point(field_release:CMsgClientFriendProfileInfoResponse.headline)
  if (!_internal_has_headline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = headline_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (headline_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientFriendProfileInfoResponse::set_allocated_headline(std::string* headline) {
  if (headline != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  headline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headline,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (headline_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    headline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientFriendProfileInfoResponse.headline)
}

// optional string summary = 9;
inline bool CMsgClientFriendProfileInfoResponse::_internal_has_summary() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientFriendProfileInfoResponse::has_summary() const {
  return _internal_has_summary();
}
inline void CMsgClientFriendProfileInfoResponse::clear_summary() {
  summary_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CMsgClientFriendProfileInfoResponse::summary() const {
  // @@protoc_insertion_point(field_get:CMsgClientFriendProfileInfoResponse.summary)
  return _internal_summary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientFriendProfileInfoResponse::set_summary(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientFriendProfileInfoResponse.summary)
}
inline std::string* CMsgClientFriendProfileInfoResponse::mutable_summary() {
  std::string* _s = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:CMsgClientFriendProfileInfoResponse.summary)
  return _s;
}
inline const std::string& CMsgClientFriendProfileInfoResponse::_internal_summary() const {
  return summary_.Get();
}
inline void CMsgClientFriendProfileInfoResponse::_internal_set_summary(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendProfileInfoResponse::_internal_mutable_summary() {
  _has_bits_[0] |= 0x00000020u;
  return summary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientFriendProfileInfoResponse::release_summary() {
  // @@protoc_insertion_point(field_release:CMsgClientFriendProfileInfoResponse.summary)
  if (!_internal_has_summary()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = summary_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (summary_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    summary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientFriendProfileInfoResponse::set_allocated_summary(std::string* summary) {
  if (summary != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  summary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), summary,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (summary_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    summary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientFriendProfileInfoResponse.summary)
}

// -------------------------------------------------------------------

// CMsgClientCreateFriendsGroup

// optional fixed64 steamid = 1;
inline bool CMsgClientCreateFriendsGroup::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientCreateFriendsGroup::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgClientCreateFriendsGroup::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientCreateFriendsGroup::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CMsgClientCreateFriendsGroup::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgClientCreateFriendsGroup.steamid)
  return _internal_steamid();
}
inline void CMsgClientCreateFriendsGroup::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CMsgClientCreateFriendsGroup::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgClientCreateFriendsGroup.steamid)
}

// optional string groupname = 2;
inline bool CMsgClientCreateFriendsGroup::_internal_has_groupname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientCreateFriendsGroup::has_groupname() const {
  return _internal_has_groupname();
}
inline void CMsgClientCreateFriendsGroup::clear_groupname() {
  groupname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientCreateFriendsGroup::groupname() const {
  // @@protoc_insertion_point(field_get:CMsgClientCreateFriendsGroup.groupname)
  return _internal_groupname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientCreateFriendsGroup::set_groupname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 groupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientCreateFriendsGroup.groupname)
}
inline std::string* CMsgClientCreateFriendsGroup::mutable_groupname() {
  std::string* _s = _internal_mutable_groupname();
  // @@protoc_insertion_point(field_mutable:CMsgClientCreateFriendsGroup.groupname)
  return _s;
}
inline const std::string& CMsgClientCreateFriendsGroup::_internal_groupname() const {
  return groupname_.Get();
}
inline void CMsgClientCreateFriendsGroup::_internal_set_groupname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  groupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientCreateFriendsGroup::_internal_mutable_groupname() {
  _has_bits_[0] |= 0x00000001u;
  return groupname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientCreateFriendsGroup::release_groupname() {
  // @@protoc_insertion_point(field_release:CMsgClientCreateFriendsGroup.groupname)
  if (!_internal_has_groupname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = groupname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (groupname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientCreateFriendsGroup::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  groupname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (groupname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientCreateFriendsGroup.groupname)
}

// repeated fixed64 steamid_friends = 3;
inline int CMsgClientCreateFriendsGroup::_internal_steamid_friends_size() const {
  return steamid_friends_.size();
}
inline int CMsgClientCreateFriendsGroup::steamid_friends_size() const {
  return _internal_steamid_friends_size();
}
inline void CMsgClientCreateFriendsGroup::clear_steamid_friends() {
  steamid_friends_.Clear();
}
inline uint64_t CMsgClientCreateFriendsGroup::_internal_steamid_friends(int index) const {
  return steamid_friends_.Get(index);
}
inline uint64_t CMsgClientCreateFriendsGroup::steamid_friends(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientCreateFriendsGroup.steamid_friends)
  return _internal_steamid_friends(index);
}
inline void CMsgClientCreateFriendsGroup::set_steamid_friends(int index, uint64_t value) {
  steamid_friends_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientCreateFriendsGroup.steamid_friends)
}
inline void CMsgClientCreateFriendsGroup::_internal_add_steamid_friends(uint64_t value) {
  steamid_friends_.Add(value);
}
inline void CMsgClientCreateFriendsGroup::add_steamid_friends(uint64_t value) {
  _internal_add_steamid_friends(value);
  // @@protoc_insertion_point(field_add:CMsgClientCreateFriendsGroup.steamid_friends)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientCreateFriendsGroup::_internal_steamid_friends() const {
  return steamid_friends_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientCreateFriendsGroup::steamid_friends() const {
  // @@protoc_insertion_point(field_list:CMsgClientCreateFriendsGroup.steamid_friends)
  return _internal_steamid_friends();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientCreateFriendsGroup::_internal_mutable_steamid_friends() {
  return &steamid_friends_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientCreateFriendsGroup::mutable_steamid_friends() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientCreateFriendsGroup.steamid_friends)
  return _internal_mutable_steamid_friends();
}

// -------------------------------------------------------------------

// CMsgClientCreateFriendsGroupResponse

// optional uint32 eresult = 1;
inline bool CMsgClientCreateFriendsGroupResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientCreateFriendsGroupResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientCreateFriendsGroupResponse::clear_eresult() {
  eresult_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientCreateFriendsGroupResponse::_internal_eresult() const {
  return eresult_;
}
inline uint32_t CMsgClientCreateFriendsGroupResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientCreateFriendsGroupResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientCreateFriendsGroupResponse::_internal_set_eresult(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  eresult_ = value;
}
inline void CMsgClientCreateFriendsGroupResponse::set_eresult(uint32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientCreateFriendsGroupResponse.eresult)
}

// optional int32 groupid = 2;
inline bool CMsgClientCreateFriendsGroupResponse::_internal_has_groupid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientCreateFriendsGroupResponse::has_groupid() const {
  return _internal_has_groupid();
}
inline void CMsgClientCreateFriendsGroupResponse::clear_groupid() {
  groupid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientCreateFriendsGroupResponse::_internal_groupid() const {
  return groupid_;
}
inline int32_t CMsgClientCreateFriendsGroupResponse::groupid() const {
  // @@protoc_insertion_point(field_get:CMsgClientCreateFriendsGroupResponse.groupid)
  return _internal_groupid();
}
inline void CMsgClientCreateFriendsGroupResponse::_internal_set_groupid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  groupid_ = value;
}
inline void CMsgClientCreateFriendsGroupResponse::set_groupid(int32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:CMsgClientCreateFriendsGroupResponse.groupid)
}

// -------------------------------------------------------------------

// CMsgClientDeleteFriendsGroup

// optional fixed64 steamid = 1;
inline bool CMsgClientDeleteFriendsGroup::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientDeleteFriendsGroup::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgClientDeleteFriendsGroup::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientDeleteFriendsGroup::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CMsgClientDeleteFriendsGroup::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgClientDeleteFriendsGroup.steamid)
  return _internal_steamid();
}
inline void CMsgClientDeleteFriendsGroup::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CMsgClientDeleteFriendsGroup::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgClientDeleteFriendsGroup.steamid)
}

// optional int32 groupid = 2;
inline bool CMsgClientDeleteFriendsGroup::_internal_has_groupid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientDeleteFriendsGroup::has_groupid() const {
  return _internal_has_groupid();
}
inline void CMsgClientDeleteFriendsGroup::clear_groupid() {
  groupid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientDeleteFriendsGroup::_internal_groupid() const {
  return groupid_;
}
inline int32_t CMsgClientDeleteFriendsGroup::groupid() const {
  // @@protoc_insertion_point(field_get:CMsgClientDeleteFriendsGroup.groupid)
  return _internal_groupid();
}
inline void CMsgClientDeleteFriendsGroup::_internal_set_groupid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  groupid_ = value;
}
inline void CMsgClientDeleteFriendsGroup::set_groupid(int32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:CMsgClientDeleteFriendsGroup.groupid)
}

// -------------------------------------------------------------------

// CMsgClientDeleteFriendsGroupResponse

// optional uint32 eresult = 1;
inline bool CMsgClientDeleteFriendsGroupResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientDeleteFriendsGroupResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientDeleteFriendsGroupResponse::clear_eresult() {
  eresult_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientDeleteFriendsGroupResponse::_internal_eresult() const {
  return eresult_;
}
inline uint32_t CMsgClientDeleteFriendsGroupResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientDeleteFriendsGroupResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientDeleteFriendsGroupResponse::_internal_set_eresult(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  eresult_ = value;
}
inline void CMsgClientDeleteFriendsGroupResponse::set_eresult(uint32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientDeleteFriendsGroupResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgClientManageFriendsGroup

// optional int32 groupid = 1;
inline bool CMsgClientManageFriendsGroup::_internal_has_groupid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientManageFriendsGroup::has_groupid() const {
  return _internal_has_groupid();
}
inline void CMsgClientManageFriendsGroup::clear_groupid() {
  groupid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientManageFriendsGroup::_internal_groupid() const {
  return groupid_;
}
inline int32_t CMsgClientManageFriendsGroup::groupid() const {
  // @@protoc_insertion_point(field_get:CMsgClientManageFriendsGroup.groupid)
  return _internal_groupid();
}
inline void CMsgClientManageFriendsGroup::_internal_set_groupid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  groupid_ = value;
}
inline void CMsgClientManageFriendsGroup::set_groupid(int32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:CMsgClientManageFriendsGroup.groupid)
}

// optional string groupname = 2;
inline bool CMsgClientManageFriendsGroup::_internal_has_groupname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientManageFriendsGroup::has_groupname() const {
  return _internal_has_groupname();
}
inline void CMsgClientManageFriendsGroup::clear_groupname() {
  groupname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientManageFriendsGroup::groupname() const {
  // @@protoc_insertion_point(field_get:CMsgClientManageFriendsGroup.groupname)
  return _internal_groupname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientManageFriendsGroup::set_groupname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 groupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientManageFriendsGroup.groupname)
}
inline std::string* CMsgClientManageFriendsGroup::mutable_groupname() {
  std::string* _s = _internal_mutable_groupname();
  // @@protoc_insertion_point(field_mutable:CMsgClientManageFriendsGroup.groupname)
  return _s;
}
inline const std::string& CMsgClientManageFriendsGroup::_internal_groupname() const {
  return groupname_.Get();
}
inline void CMsgClientManageFriendsGroup::_internal_set_groupname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  groupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientManageFriendsGroup::_internal_mutable_groupname() {
  _has_bits_[0] |= 0x00000001u;
  return groupname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientManageFriendsGroup::release_groupname() {
  // @@protoc_insertion_point(field_release:CMsgClientManageFriendsGroup.groupname)
  if (!_internal_has_groupname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = groupname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (groupname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientManageFriendsGroup::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  groupname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (groupname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientManageFriendsGroup.groupname)
}

// repeated fixed64 steamid_friends_added = 3;
inline int CMsgClientManageFriendsGroup::_internal_steamid_friends_added_size() const {
  return steamid_friends_added_.size();
}
inline int CMsgClientManageFriendsGroup::steamid_friends_added_size() const {
  return _internal_steamid_friends_added_size();
}
inline void CMsgClientManageFriendsGroup::clear_steamid_friends_added() {
  steamid_friends_added_.Clear();
}
inline uint64_t CMsgClientManageFriendsGroup::_internal_steamid_friends_added(int index) const {
  return steamid_friends_added_.Get(index);
}
inline uint64_t CMsgClientManageFriendsGroup::steamid_friends_added(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientManageFriendsGroup.steamid_friends_added)
  return _internal_steamid_friends_added(index);
}
inline void CMsgClientManageFriendsGroup::set_steamid_friends_added(int index, uint64_t value) {
  steamid_friends_added_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientManageFriendsGroup.steamid_friends_added)
}
inline void CMsgClientManageFriendsGroup::_internal_add_steamid_friends_added(uint64_t value) {
  steamid_friends_added_.Add(value);
}
inline void CMsgClientManageFriendsGroup::add_steamid_friends_added(uint64_t value) {
  _internal_add_steamid_friends_added(value);
  // @@protoc_insertion_point(field_add:CMsgClientManageFriendsGroup.steamid_friends_added)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientManageFriendsGroup::_internal_steamid_friends_added() const {
  return steamid_friends_added_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientManageFriendsGroup::steamid_friends_added() const {
  // @@protoc_insertion_point(field_list:CMsgClientManageFriendsGroup.steamid_friends_added)
  return _internal_steamid_friends_added();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientManageFriendsGroup::_internal_mutable_steamid_friends_added() {
  return &steamid_friends_added_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientManageFriendsGroup::mutable_steamid_friends_added() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientManageFriendsGroup.steamid_friends_added)
  return _internal_mutable_steamid_friends_added();
}

// repeated fixed64 steamid_friends_removed = 4;
inline int CMsgClientManageFriendsGroup::_internal_steamid_friends_removed_size() const {
  return steamid_friends_removed_.size();
}
inline int CMsgClientManageFriendsGroup::steamid_friends_removed_size() const {
  return _internal_steamid_friends_removed_size();
}
inline void CMsgClientManageFriendsGroup::clear_steamid_friends_removed() {
  steamid_friends_removed_.Clear();
}
inline uint64_t CMsgClientManageFriendsGroup::_internal_steamid_friends_removed(int index) const {
  return steamid_friends_removed_.Get(index);
}
inline uint64_t CMsgClientManageFriendsGroup::steamid_friends_removed(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientManageFriendsGroup.steamid_friends_removed)
  return _internal_steamid_friends_removed(index);
}
inline void CMsgClientManageFriendsGroup::set_steamid_friends_removed(int index, uint64_t value) {
  steamid_friends_removed_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientManageFriendsGroup.steamid_friends_removed)
}
inline void CMsgClientManageFriendsGroup::_internal_add_steamid_friends_removed(uint64_t value) {
  steamid_friends_removed_.Add(value);
}
inline void CMsgClientManageFriendsGroup::add_steamid_friends_removed(uint64_t value) {
  _internal_add_steamid_friends_removed(value);
  // @@protoc_insertion_point(field_add:CMsgClientManageFriendsGroup.steamid_friends_removed)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientManageFriendsGroup::_internal_steamid_friends_removed() const {
  return steamid_friends_removed_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientManageFriendsGroup::steamid_friends_removed() const {
  // @@protoc_insertion_point(field_list:CMsgClientManageFriendsGroup.steamid_friends_removed)
  return _internal_steamid_friends_removed();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientManageFriendsGroup::_internal_mutable_steamid_friends_removed() {
  return &steamid_friends_removed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientManageFriendsGroup::mutable_steamid_friends_removed() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientManageFriendsGroup.steamid_friends_removed)
  return _internal_mutable_steamid_friends_removed();
}

// -------------------------------------------------------------------

// CMsgClientManageFriendsGroupResponse

// optional uint32 eresult = 1;
inline bool CMsgClientManageFriendsGroupResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientManageFriendsGroupResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientManageFriendsGroupResponse::clear_eresult() {
  eresult_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientManageFriendsGroupResponse::_internal_eresult() const {
  return eresult_;
}
inline uint32_t CMsgClientManageFriendsGroupResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientManageFriendsGroupResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientManageFriendsGroupResponse::_internal_set_eresult(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  eresult_ = value;
}
inline void CMsgClientManageFriendsGroupResponse::set_eresult(uint32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientManageFriendsGroupResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgClientAddFriendToGroup

// optional int32 groupid = 1;
inline bool CMsgClientAddFriendToGroup::_internal_has_groupid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientAddFriendToGroup::has_groupid() const {
  return _internal_has_groupid();
}
inline void CMsgClientAddFriendToGroup::clear_groupid() {
  groupid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientAddFriendToGroup::_internal_groupid() const {
  return groupid_;
}
inline int32_t CMsgClientAddFriendToGroup::groupid() const {
  // @@protoc_insertion_point(field_get:CMsgClientAddFriendToGroup.groupid)
  return _internal_groupid();
}
inline void CMsgClientAddFriendToGroup::_internal_set_groupid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  groupid_ = value;
}
inline void CMsgClientAddFriendToGroup::set_groupid(int32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:CMsgClientAddFriendToGroup.groupid)
}

// optional fixed64 steamiduser = 2;
inline bool CMsgClientAddFriendToGroup::_internal_has_steamiduser() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientAddFriendToGroup::has_steamiduser() const {
  return _internal_has_steamiduser();
}
inline void CMsgClientAddFriendToGroup::clear_steamiduser() {
  steamiduser_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientAddFriendToGroup::_internal_steamiduser() const {
  return steamiduser_;
}
inline uint64_t CMsgClientAddFriendToGroup::steamiduser() const {
  // @@protoc_insertion_point(field_get:CMsgClientAddFriendToGroup.steamiduser)
  return _internal_steamiduser();
}
inline void CMsgClientAddFriendToGroup::_internal_set_steamiduser(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamiduser_ = value;
}
inline void CMsgClientAddFriendToGroup::set_steamiduser(uint64_t value) {
  _internal_set_steamiduser(value);
  // @@protoc_insertion_point(field_set:CMsgClientAddFriendToGroup.steamiduser)
}

// -------------------------------------------------------------------

// CMsgClientAddFriendToGroupResponse

// optional uint32 eresult = 1;
inline bool CMsgClientAddFriendToGroupResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientAddFriendToGroupResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientAddFriendToGroupResponse::clear_eresult() {
  eresult_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientAddFriendToGroupResponse::_internal_eresult() const {
  return eresult_;
}
inline uint32_t CMsgClientAddFriendToGroupResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientAddFriendToGroupResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientAddFriendToGroupResponse::_internal_set_eresult(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  eresult_ = value;
}
inline void CMsgClientAddFriendToGroupResponse::set_eresult(uint32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientAddFriendToGroupResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgClientRemoveFriendFromGroup

// optional int32 groupid = 1;
inline bool CMsgClientRemoveFriendFromGroup::_internal_has_groupid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientRemoveFriendFromGroup::has_groupid() const {
  return _internal_has_groupid();
}
inline void CMsgClientRemoveFriendFromGroup::clear_groupid() {
  groupid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientRemoveFriendFromGroup::_internal_groupid() const {
  return groupid_;
}
inline int32_t CMsgClientRemoveFriendFromGroup::groupid() const {
  // @@protoc_insertion_point(field_get:CMsgClientRemoveFriendFromGroup.groupid)
  return _internal_groupid();
}
inline void CMsgClientRemoveFriendFromGroup::_internal_set_groupid(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  groupid_ = value;
}
inline void CMsgClientRemoveFriendFromGroup::set_groupid(int32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:CMsgClientRemoveFriendFromGroup.groupid)
}

// optional fixed64 steamiduser = 2;
inline bool CMsgClientRemoveFriendFromGroup::_internal_has_steamiduser() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientRemoveFriendFromGroup::has_steamiduser() const {
  return _internal_has_steamiduser();
}
inline void CMsgClientRemoveFriendFromGroup::clear_steamiduser() {
  steamiduser_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgClientRemoveFriendFromGroup::_internal_steamiduser() const {
  return steamiduser_;
}
inline uint64_t CMsgClientRemoveFriendFromGroup::steamiduser() const {
  // @@protoc_insertion_point(field_get:CMsgClientRemoveFriendFromGroup.steamiduser)
  return _internal_steamiduser();
}
inline void CMsgClientRemoveFriendFromGroup::_internal_set_steamiduser(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamiduser_ = value;
}
inline void CMsgClientRemoveFriendFromGroup::set_steamiduser(uint64_t value) {
  _internal_set_steamiduser(value);
  // @@protoc_insertion_point(field_set:CMsgClientRemoveFriendFromGroup.steamiduser)
}

// -------------------------------------------------------------------

// CMsgClientRemoveFriendFromGroupResponse

// optional uint32 eresult = 1;
inline bool CMsgClientRemoveFriendFromGroupResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientRemoveFriendFromGroupResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientRemoveFriendFromGroupResponse::clear_eresult() {
  eresult_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientRemoveFriendFromGroupResponse::_internal_eresult() const {
  return eresult_;
}
inline uint32_t CMsgClientRemoveFriendFromGroupResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientRemoveFriendFromGroupResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientRemoveFriendFromGroupResponse::_internal_set_eresult(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  eresult_ = value;
}
inline void CMsgClientRemoveFriendFromGroupResponse::set_eresult(uint32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientRemoveFriendFromGroupResponse.eresult)
}

// -------------------------------------------------------------------

// CMsgClientGetEmoticonList

// -------------------------------------------------------------------

// CMsgClientEmoticonList_Emoticon

// optional string name = 1;
inline bool CMsgClientEmoticonList_Emoticon::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Emoticon::has_name() const {
  return _internal_has_name();
}
inline void CMsgClientEmoticonList_Emoticon::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientEmoticonList_Emoticon::name() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Emoticon.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientEmoticonList_Emoticon::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Emoticon.name)
}
inline std::string* CMsgClientEmoticonList_Emoticon::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientEmoticonList.Emoticon.name)
  return _s;
}
inline const std::string& CMsgClientEmoticonList_Emoticon::_internal_name() const {
  return name_.Get();
}
inline void CMsgClientEmoticonList_Emoticon::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientEmoticonList_Emoticon::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientEmoticonList_Emoticon::release_name() {
  // @@protoc_insertion_point(field_release:CMsgClientEmoticonList.Emoticon.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientEmoticonList_Emoticon::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientEmoticonList.Emoticon.name)
}

// optional int32 count = 2;
inline bool CMsgClientEmoticonList_Emoticon::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Emoticon::has_count() const {
  return _internal_has_count();
}
inline void CMsgClientEmoticonList_Emoticon::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientEmoticonList_Emoticon::_internal_count() const {
  return count_;
}
inline int32_t CMsgClientEmoticonList_Emoticon::count() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Emoticon.count)
  return _internal_count();
}
inline void CMsgClientEmoticonList_Emoticon::_internal_set_count(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CMsgClientEmoticonList_Emoticon::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Emoticon.count)
}

// optional uint32 time_last_used = 3;
inline bool CMsgClientEmoticonList_Emoticon::_internal_has_time_last_used() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Emoticon::has_time_last_used() const {
  return _internal_has_time_last_used();
}
inline void CMsgClientEmoticonList_Emoticon::clear_time_last_used() {
  time_last_used_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientEmoticonList_Emoticon::_internal_time_last_used() const {
  return time_last_used_;
}
inline uint32_t CMsgClientEmoticonList_Emoticon::time_last_used() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Emoticon.time_last_used)
  return _internal_time_last_used();
}
inline void CMsgClientEmoticonList_Emoticon::_internal_set_time_last_used(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  time_last_used_ = value;
}
inline void CMsgClientEmoticonList_Emoticon::set_time_last_used(uint32_t value) {
  _internal_set_time_last_used(value);
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Emoticon.time_last_used)
}

// optional uint32 use_count = 4;
inline bool CMsgClientEmoticonList_Emoticon::_internal_has_use_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Emoticon::has_use_count() const {
  return _internal_has_use_count();
}
inline void CMsgClientEmoticonList_Emoticon::clear_use_count() {
  use_count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientEmoticonList_Emoticon::_internal_use_count() const {
  return use_count_;
}
inline uint32_t CMsgClientEmoticonList_Emoticon::use_count() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Emoticon.use_count)
  return _internal_use_count();
}
inline void CMsgClientEmoticonList_Emoticon::_internal_set_use_count(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  use_count_ = value;
}
inline void CMsgClientEmoticonList_Emoticon::set_use_count(uint32_t value) {
  _internal_set_use_count(value);
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Emoticon.use_count)
}

// optional uint32 time_received = 5;
inline bool CMsgClientEmoticonList_Emoticon::_internal_has_time_received() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Emoticon::has_time_received() const {
  return _internal_has_time_received();
}
inline void CMsgClientEmoticonList_Emoticon::clear_time_received() {
  time_received_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientEmoticonList_Emoticon::_internal_time_received() const {
  return time_received_;
}
inline uint32_t CMsgClientEmoticonList_Emoticon::time_received() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Emoticon.time_received)
  return _internal_time_received();
}
inline void CMsgClientEmoticonList_Emoticon::_internal_set_time_received(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  time_received_ = value;
}
inline void CMsgClientEmoticonList_Emoticon::set_time_received(uint32_t value) {
  _internal_set_time_received(value);
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Emoticon.time_received)
}

// optional uint32 appid = 6;
inline bool CMsgClientEmoticonList_Emoticon::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Emoticon::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgClientEmoticonList_Emoticon::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgClientEmoticonList_Emoticon::_internal_appid() const {
  return appid_;
}
inline uint32_t CMsgClientEmoticonList_Emoticon::appid() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Emoticon.appid)
  return _internal_appid();
}
inline void CMsgClientEmoticonList_Emoticon::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  appid_ = value;
}
inline void CMsgClientEmoticonList_Emoticon::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Emoticon.appid)
}

// -------------------------------------------------------------------

// CMsgClientEmoticonList_Sticker

// optional string name = 1;
inline bool CMsgClientEmoticonList_Sticker::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Sticker::has_name() const {
  return _internal_has_name();
}
inline void CMsgClientEmoticonList_Sticker::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientEmoticonList_Sticker::name() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Sticker.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientEmoticonList_Sticker::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Sticker.name)
}
inline std::string* CMsgClientEmoticonList_Sticker::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientEmoticonList.Sticker.name)
  return _s;
}
inline const std::string& CMsgClientEmoticonList_Sticker::_internal_name() const {
  return name_.Get();
}
inline void CMsgClientEmoticonList_Sticker::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientEmoticonList_Sticker::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientEmoticonList_Sticker::release_name() {
  // @@protoc_insertion_point(field_release:CMsgClientEmoticonList.Sticker.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientEmoticonList_Sticker::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientEmoticonList.Sticker.name)
}

// optional int32 count = 2;
inline bool CMsgClientEmoticonList_Sticker::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Sticker::has_count() const {
  return _internal_has_count();
}
inline void CMsgClientEmoticonList_Sticker::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientEmoticonList_Sticker::_internal_count() const {
  return count_;
}
inline int32_t CMsgClientEmoticonList_Sticker::count() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Sticker.count)
  return _internal_count();
}
inline void CMsgClientEmoticonList_Sticker::_internal_set_count(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CMsgClientEmoticonList_Sticker::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Sticker.count)
}

// optional uint32 time_received = 3;
inline bool CMsgClientEmoticonList_Sticker::_internal_has_time_received() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Sticker::has_time_received() const {
  return _internal_has_time_received();
}
inline void CMsgClientEmoticonList_Sticker::clear_time_received() {
  time_received_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientEmoticonList_Sticker::_internal_time_received() const {
  return time_received_;
}
inline uint32_t CMsgClientEmoticonList_Sticker::time_received() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Sticker.time_received)
  return _internal_time_received();
}
inline void CMsgClientEmoticonList_Sticker::_internal_set_time_received(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  time_received_ = value;
}
inline void CMsgClientEmoticonList_Sticker::set_time_received(uint32_t value) {
  _internal_set_time_received(value);
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Sticker.time_received)
}

// optional uint32 appid = 4;
inline bool CMsgClientEmoticonList_Sticker::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Sticker::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgClientEmoticonList_Sticker::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientEmoticonList_Sticker::_internal_appid() const {
  return appid_;
}
inline uint32_t CMsgClientEmoticonList_Sticker::appid() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Sticker.appid)
  return _internal_appid();
}
inline void CMsgClientEmoticonList_Sticker::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
}
inline void CMsgClientEmoticonList_Sticker::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Sticker.appid)
}

// optional uint32 time_last_used = 5;
inline bool CMsgClientEmoticonList_Sticker::_internal_has_time_last_used() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Sticker::has_time_last_used() const {
  return _internal_has_time_last_used();
}
inline void CMsgClientEmoticonList_Sticker::clear_time_last_used() {
  time_last_used_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientEmoticonList_Sticker::_internal_time_last_used() const {
  return time_last_used_;
}
inline uint32_t CMsgClientEmoticonList_Sticker::time_last_used() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Sticker.time_last_used)
  return _internal_time_last_used();
}
inline void CMsgClientEmoticonList_Sticker::_internal_set_time_last_used(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  time_last_used_ = value;
}
inline void CMsgClientEmoticonList_Sticker::set_time_last_used(uint32_t value) {
  _internal_set_time_last_used(value);
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Sticker.time_last_used)
}

// optional uint32 use_count = 6;
inline bool CMsgClientEmoticonList_Sticker::_internal_has_use_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Sticker::has_use_count() const {
  return _internal_has_use_count();
}
inline void CMsgClientEmoticonList_Sticker::clear_use_count() {
  use_count_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgClientEmoticonList_Sticker::_internal_use_count() const {
  return use_count_;
}
inline uint32_t CMsgClientEmoticonList_Sticker::use_count() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Sticker.use_count)
  return _internal_use_count();
}
inline void CMsgClientEmoticonList_Sticker::_internal_set_use_count(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  use_count_ = value;
}
inline void CMsgClientEmoticonList_Sticker::set_use_count(uint32_t value) {
  _internal_set_use_count(value);
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Sticker.use_count)
}

// -------------------------------------------------------------------

// CMsgClientEmoticonList_Effect

// optional string name = 1;
inline bool CMsgClientEmoticonList_Effect::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Effect::has_name() const {
  return _internal_has_name();
}
inline void CMsgClientEmoticonList_Effect::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientEmoticonList_Effect::name() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Effect.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientEmoticonList_Effect::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Effect.name)
}
inline std::string* CMsgClientEmoticonList_Effect::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientEmoticonList.Effect.name)
  return _s;
}
inline const std::string& CMsgClientEmoticonList_Effect::_internal_name() const {
  return name_.Get();
}
inline void CMsgClientEmoticonList_Effect::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientEmoticonList_Effect::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientEmoticonList_Effect::release_name() {
  // @@protoc_insertion_point(field_release:CMsgClientEmoticonList.Effect.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientEmoticonList_Effect::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientEmoticonList.Effect.name)
}

// optional int32 count = 2;
inline bool CMsgClientEmoticonList_Effect::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Effect::has_count() const {
  return _internal_has_count();
}
inline void CMsgClientEmoticonList_Effect::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgClientEmoticonList_Effect::_internal_count() const {
  return count_;
}
inline int32_t CMsgClientEmoticonList_Effect::count() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Effect.count)
  return _internal_count();
}
inline void CMsgClientEmoticonList_Effect::_internal_set_count(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CMsgClientEmoticonList_Effect::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Effect.count)
}

// optional uint32 time_received = 3;
inline bool CMsgClientEmoticonList_Effect::_internal_has_time_received() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Effect::has_time_received() const {
  return _internal_has_time_received();
}
inline void CMsgClientEmoticonList_Effect::clear_time_received() {
  time_received_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientEmoticonList_Effect::_internal_time_received() const {
  return time_received_;
}
inline uint32_t CMsgClientEmoticonList_Effect::time_received() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Effect.time_received)
  return _internal_time_received();
}
inline void CMsgClientEmoticonList_Effect::_internal_set_time_received(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  time_received_ = value;
}
inline void CMsgClientEmoticonList_Effect::set_time_received(uint32_t value) {
  _internal_set_time_received(value);
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Effect.time_received)
}

// optional bool infinite_use = 4;
inline bool CMsgClientEmoticonList_Effect::_internal_has_infinite_use() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Effect::has_infinite_use() const {
  return _internal_has_infinite_use();
}
inline void CMsgClientEmoticonList_Effect::clear_infinite_use() {
  infinite_use_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgClientEmoticonList_Effect::_internal_infinite_use() const {
  return infinite_use_;
}
inline bool CMsgClientEmoticonList_Effect::infinite_use() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Effect.infinite_use)
  return _internal_infinite_use();
}
inline void CMsgClientEmoticonList_Effect::_internal_set_infinite_use(bool value) {
  _has_bits_[0] |= 0x00000008u;
  infinite_use_ = value;
}
inline void CMsgClientEmoticonList_Effect::set_infinite_use(bool value) {
  _internal_set_infinite_use(value);
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Effect.infinite_use)
}

// optional uint32 appid = 5;
inline bool CMsgClientEmoticonList_Effect::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientEmoticonList_Effect::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgClientEmoticonList_Effect::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientEmoticonList_Effect::_internal_appid() const {
  return appid_;
}
inline uint32_t CMsgClientEmoticonList_Effect::appid() const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.Effect.appid)
  return _internal_appid();
}
inline void CMsgClientEmoticonList_Effect::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  appid_ = value;
}
inline void CMsgClientEmoticonList_Effect::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgClientEmoticonList.Effect.appid)
}

// -------------------------------------------------------------------

// CMsgClientEmoticonList

// repeated .CMsgClientEmoticonList.Emoticon emoticons = 1;
inline int CMsgClientEmoticonList::_internal_emoticons_size() const {
  return emoticons_.size();
}
inline int CMsgClientEmoticonList::emoticons_size() const {
  return _internal_emoticons_size();
}
inline void CMsgClientEmoticonList::clear_emoticons() {
  emoticons_.Clear();
}
inline ::CMsgClientEmoticonList_Emoticon* CMsgClientEmoticonList::mutable_emoticons(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientEmoticonList.emoticons)
  return emoticons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientEmoticonList_Emoticon >*
CMsgClientEmoticonList::mutable_emoticons() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientEmoticonList.emoticons)
  return &emoticons_;
}
inline const ::CMsgClientEmoticonList_Emoticon& CMsgClientEmoticonList::_internal_emoticons(int index) const {
  return emoticons_.Get(index);
}
inline const ::CMsgClientEmoticonList_Emoticon& CMsgClientEmoticonList::emoticons(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.emoticons)
  return _internal_emoticons(index);
}
inline ::CMsgClientEmoticonList_Emoticon* CMsgClientEmoticonList::_internal_add_emoticons() {
  return emoticons_.Add();
}
inline ::CMsgClientEmoticonList_Emoticon* CMsgClientEmoticonList::add_emoticons() {
  ::CMsgClientEmoticonList_Emoticon* _add = _internal_add_emoticons();
  // @@protoc_insertion_point(field_add:CMsgClientEmoticonList.emoticons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientEmoticonList_Emoticon >&
CMsgClientEmoticonList::emoticons() const {
  // @@protoc_insertion_point(field_list:CMsgClientEmoticonList.emoticons)
  return emoticons_;
}

// repeated .CMsgClientEmoticonList.Sticker stickers = 2;
inline int CMsgClientEmoticonList::_internal_stickers_size() const {
  return stickers_.size();
}
inline int CMsgClientEmoticonList::stickers_size() const {
  return _internal_stickers_size();
}
inline void CMsgClientEmoticonList::clear_stickers() {
  stickers_.Clear();
}
inline ::CMsgClientEmoticonList_Sticker* CMsgClientEmoticonList::mutable_stickers(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientEmoticonList.stickers)
  return stickers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientEmoticonList_Sticker >*
CMsgClientEmoticonList::mutable_stickers() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientEmoticonList.stickers)
  return &stickers_;
}
inline const ::CMsgClientEmoticonList_Sticker& CMsgClientEmoticonList::_internal_stickers(int index) const {
  return stickers_.Get(index);
}
inline const ::CMsgClientEmoticonList_Sticker& CMsgClientEmoticonList::stickers(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.stickers)
  return _internal_stickers(index);
}
inline ::CMsgClientEmoticonList_Sticker* CMsgClientEmoticonList::_internal_add_stickers() {
  return stickers_.Add();
}
inline ::CMsgClientEmoticonList_Sticker* CMsgClientEmoticonList::add_stickers() {
  ::CMsgClientEmoticonList_Sticker* _add = _internal_add_stickers();
  // @@protoc_insertion_point(field_add:CMsgClientEmoticonList.stickers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientEmoticonList_Sticker >&
CMsgClientEmoticonList::stickers() const {
  // @@protoc_insertion_point(field_list:CMsgClientEmoticonList.stickers)
  return stickers_;
}

// repeated .CMsgClientEmoticonList.Effect effects = 3;
inline int CMsgClientEmoticonList::_internal_effects_size() const {
  return effects_.size();
}
inline int CMsgClientEmoticonList::effects_size() const {
  return _internal_effects_size();
}
inline void CMsgClientEmoticonList::clear_effects() {
  effects_.Clear();
}
inline ::CMsgClientEmoticonList_Effect* CMsgClientEmoticonList::mutable_effects(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientEmoticonList.effects)
  return effects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientEmoticonList_Effect >*
CMsgClientEmoticonList::mutable_effects() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientEmoticonList.effects)
  return &effects_;
}
inline const ::CMsgClientEmoticonList_Effect& CMsgClientEmoticonList::_internal_effects(int index) const {
  return effects_.Get(index);
}
inline const ::CMsgClientEmoticonList_Effect& CMsgClientEmoticonList::effects(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientEmoticonList.effects)
  return _internal_effects(index);
}
inline ::CMsgClientEmoticonList_Effect* CMsgClientEmoticonList::_internal_add_effects() {
  return effects_.Add();
}
inline ::CMsgClientEmoticonList_Effect* CMsgClientEmoticonList::add_effects() {
  ::CMsgClientEmoticonList_Effect* _add = _internal_add_effects();
  // @@protoc_insertion_point(field_add:CMsgClientEmoticonList.effects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientEmoticonList_Effect >&
CMsgClientEmoticonList::effects() const {
  // @@protoc_insertion_point(field_list:CMsgClientEmoticonList.effects)
  return effects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5ffriends_2eproto
