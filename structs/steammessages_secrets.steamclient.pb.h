// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_secrets.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fsecrets_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fsecrets_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fsecrets_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fsecrets_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fsecrets_2esteamclient_2eproto;
class CKeyEscrow_Request;
struct CKeyEscrow_RequestDefaultTypeInternal;
extern CKeyEscrow_RequestDefaultTypeInternal _CKeyEscrow_Request_default_instance_;
class CKeyEscrow_Response;
struct CKeyEscrow_ResponseDefaultTypeInternal;
extern CKeyEscrow_ResponseDefaultTypeInternal _CKeyEscrow_Response_default_instance_;
class CKeyEscrow_Ticket;
struct CKeyEscrow_TicketDefaultTypeInternal;
extern CKeyEscrow_TicketDefaultTypeInternal _CKeyEscrow_Ticket_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CKeyEscrow_Request* Arena::CreateMaybeMessage<::CKeyEscrow_Request>(Arena*);
template<> ::CKeyEscrow_Response* Arena::CreateMaybeMessage<::CKeyEscrow_Response>(Arena*);
template<> ::CKeyEscrow_Ticket* Arena::CreateMaybeMessage<::CKeyEscrow_Ticket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EKeyEscrowUsage : int {
  k_EKeyEscrowUsageStreamingDevice = 0
};
bool EKeyEscrowUsage_IsValid(int value);
constexpr EKeyEscrowUsage EKeyEscrowUsage_MIN = k_EKeyEscrowUsageStreamingDevice;
constexpr EKeyEscrowUsage EKeyEscrowUsage_MAX = k_EKeyEscrowUsageStreamingDevice;
constexpr int EKeyEscrowUsage_ARRAYSIZE = EKeyEscrowUsage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EKeyEscrowUsage_descriptor();
template<typename T>
inline const std::string& EKeyEscrowUsage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EKeyEscrowUsage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EKeyEscrowUsage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EKeyEscrowUsage_descriptor(), enum_t_value);
}
inline bool EKeyEscrowUsage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EKeyEscrowUsage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EKeyEscrowUsage>(
    EKeyEscrowUsage_descriptor(), name, value);
}
// ===================================================================

class CKeyEscrow_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CKeyEscrow_Request) */ {
 public:
  inline CKeyEscrow_Request() : CKeyEscrow_Request(nullptr) {}
  ~CKeyEscrow_Request() override;
  explicit constexpr CKeyEscrow_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CKeyEscrow_Request(const CKeyEscrow_Request& from);
  CKeyEscrow_Request(CKeyEscrow_Request&& from) noexcept
    : CKeyEscrow_Request() {
    *this = ::std::move(from);
  }

  inline CKeyEscrow_Request& operator=(const CKeyEscrow_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CKeyEscrow_Request& operator=(CKeyEscrow_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CKeyEscrow_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CKeyEscrow_Request* internal_default_instance() {
    return reinterpret_cast<const CKeyEscrow_Request*>(
               &_CKeyEscrow_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CKeyEscrow_Request& a, CKeyEscrow_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CKeyEscrow_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CKeyEscrow_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CKeyEscrow_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CKeyEscrow_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CKeyEscrow_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CKeyEscrow_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CKeyEscrow_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKeyEscrow_Request";
  }
  protected:
  explicit CKeyEscrow_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRsaOaepShaTicketFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kDeviceNameFieldNumber = 4,
    kUsageFieldNumber = 3,
  };
  // optional bytes rsa_oaep_sha_ticket = 1;
  bool has_rsa_oaep_sha_ticket() const;
  private:
  bool _internal_has_rsa_oaep_sha_ticket() const;
  public:
  void clear_rsa_oaep_sha_ticket();
  const std::string& rsa_oaep_sha_ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rsa_oaep_sha_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rsa_oaep_sha_ticket();
  PROTOBUF_NODISCARD std::string* release_rsa_oaep_sha_ticket();
  void set_allocated_rsa_oaep_sha_ticket(std::string* rsa_oaep_sha_ticket);
  private:
  const std::string& _internal_rsa_oaep_sha_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rsa_oaep_sha_ticket(const std::string& value);
  std::string* _internal_mutable_rsa_oaep_sha_ticket();
  public:

  // optional bytes password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string device_name = 4;
  bool has_device_name() const;
  private:
  bool _internal_has_device_name() const;
  public:
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // optional .EKeyEscrowUsage usage = 3 [default = k_EKeyEscrowUsageStreamingDevice];
  bool has_usage() const;
  private:
  bool _internal_has_usage() const;
  public:
  void clear_usage();
  ::EKeyEscrowUsage usage() const;
  void set_usage(::EKeyEscrowUsage value);
  private:
  ::EKeyEscrowUsage _internal_usage() const;
  void _internal_set_usage(::EKeyEscrowUsage value);
  public:

  // @@protoc_insertion_point(class_scope:CKeyEscrow_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rsa_oaep_sha_ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  int usage_;
  friend struct ::TableStruct_steammessages_5fsecrets_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CKeyEscrow_Ticket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CKeyEscrow_Ticket) */ {
 public:
  inline CKeyEscrow_Ticket() : CKeyEscrow_Ticket(nullptr) {}
  ~CKeyEscrow_Ticket() override;
  explicit constexpr CKeyEscrow_Ticket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CKeyEscrow_Ticket(const CKeyEscrow_Ticket& from);
  CKeyEscrow_Ticket(CKeyEscrow_Ticket&& from) noexcept
    : CKeyEscrow_Ticket() {
    *this = ::std::move(from);
  }

  inline CKeyEscrow_Ticket& operator=(const CKeyEscrow_Ticket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CKeyEscrow_Ticket& operator=(CKeyEscrow_Ticket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CKeyEscrow_Ticket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CKeyEscrow_Ticket* internal_default_instance() {
    return reinterpret_cast<const CKeyEscrow_Ticket*>(
               &_CKeyEscrow_Ticket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CKeyEscrow_Ticket& a, CKeyEscrow_Ticket& b) {
    a.Swap(&b);
  }
  inline void Swap(CKeyEscrow_Ticket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CKeyEscrow_Ticket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CKeyEscrow_Ticket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CKeyEscrow_Ticket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CKeyEscrow_Ticket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CKeyEscrow_Ticket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CKeyEscrow_Ticket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKeyEscrow_Ticket";
  }
  protected:
  explicit CKeyEscrow_Ticket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 1,
    kPayloadFieldNumber = 3,
    kDeviceNameFieldNumber = 6,
    kDeviceModelFieldNumber = 7,
    kDeviceSerialFieldNumber = 8,
    kIdentifierFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kUsageFieldNumber = 5,
    kDeviceProvisioningIdFieldNumber = 9,
  };
  // optional bytes password = 1;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional bytes payload = 3;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional string device_name = 6;
  bool has_device_name() const;
  private:
  bool _internal_has_device_name() const;
  public:
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // optional string device_model = 7;
  bool has_device_model() const;
  private:
  bool _internal_has_device_model() const;
  public:
  void clear_device_model();
  const std::string& device_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_model();
  PROTOBUF_NODISCARD std::string* release_device_model();
  void set_allocated_device_model(std::string* device_model);
  private:
  const std::string& _internal_device_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_model(const std::string& value);
  std::string* _internal_mutable_device_model();
  public:

  // optional string device_serial = 8;
  bool has_device_serial() const;
  private:
  bool _internal_has_device_serial() const;
  public:
  void clear_device_serial();
  const std::string& device_serial() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_serial(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_serial();
  PROTOBUF_NODISCARD std::string* release_device_serial();
  void set_allocated_device_serial(std::string* device_serial);
  private:
  const std::string& _internal_device_serial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_serial(const std::string& value);
  std::string* _internal_mutable_device_serial();
  public:

  // optional uint64 identifier = 2;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  uint64_t identifier() const;
  void set_identifier(uint64_t value);
  private:
  uint64_t _internal_identifier() const;
  void _internal_set_identifier(uint64_t value);
  public:

  // optional uint32 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional .EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
  bool has_usage() const;
  private:
  bool _internal_has_usage() const;
  public:
  void clear_usage();
  ::EKeyEscrowUsage usage() const;
  void set_usage(::EKeyEscrowUsage value);
  private:
  ::EKeyEscrowUsage _internal_usage() const;
  void _internal_set_usage(::EKeyEscrowUsage value);
  public:

  // optional uint32 device_provisioning_id = 9;
  bool has_device_provisioning_id() const;
  private:
  bool _internal_has_device_provisioning_id() const;
  public:
  void clear_device_provisioning_id();
  uint32_t device_provisioning_id() const;
  void set_device_provisioning_id(uint32_t value);
  private:
  uint32_t _internal_device_provisioning_id() const;
  void _internal_set_device_provisioning_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CKeyEscrow_Ticket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_serial_;
  uint64_t identifier_;
  uint32_t timestamp_;
  int usage_;
  uint32_t device_provisioning_id_;
  friend struct ::TableStruct_steammessages_5fsecrets_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CKeyEscrow_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CKeyEscrow_Response) */ {
 public:
  inline CKeyEscrow_Response() : CKeyEscrow_Response(nullptr) {}
  ~CKeyEscrow_Response() override;
  explicit constexpr CKeyEscrow_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CKeyEscrow_Response(const CKeyEscrow_Response& from);
  CKeyEscrow_Response(CKeyEscrow_Response&& from) noexcept
    : CKeyEscrow_Response() {
    *this = ::std::move(from);
  }

  inline CKeyEscrow_Response& operator=(const CKeyEscrow_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CKeyEscrow_Response& operator=(CKeyEscrow_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CKeyEscrow_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CKeyEscrow_Response* internal_default_instance() {
    return reinterpret_cast<const CKeyEscrow_Response*>(
               &_CKeyEscrow_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CKeyEscrow_Response& a, CKeyEscrow_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CKeyEscrow_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CKeyEscrow_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CKeyEscrow_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CKeyEscrow_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CKeyEscrow_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CKeyEscrow_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CKeyEscrow_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CKeyEscrow_Response";
  }
  protected:
  explicit CKeyEscrow_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
  };
  // optional .CKeyEscrow_Ticket ticket = 1;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const ::CKeyEscrow_Ticket& ticket() const;
  PROTOBUF_NODISCARD ::CKeyEscrow_Ticket* release_ticket();
  ::CKeyEscrow_Ticket* mutable_ticket();
  void set_allocated_ticket(::CKeyEscrow_Ticket* ticket);
  private:
  const ::CKeyEscrow_Ticket& _internal_ticket() const;
  ::CKeyEscrow_Ticket* _internal_mutable_ticket();
  public:
  void unsafe_arena_set_allocated_ticket(
      ::CKeyEscrow_Ticket* ticket);
  ::CKeyEscrow_Ticket* unsafe_arena_release_ticket();

  // @@protoc_insertion_point(class_scope:CKeyEscrow_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CKeyEscrow_Ticket* ticket_;
  friend struct ::TableStruct_steammessages_5fsecrets_2esteamclient_2eproto;
};
// ===================================================================

class Secrets_Stub;

class Secrets : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Secrets() {};
 public:
  virtual ~Secrets();

  typedef Secrets_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void KeyEscrow(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CKeyEscrow_Request* request,
                       ::CKeyEscrow_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Secrets);
};

class Secrets_Stub : public Secrets {
 public:
  Secrets_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Secrets_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Secrets_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Secrets ------------------------------------------

  void KeyEscrow(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CKeyEscrow_Request* request,
                       ::CKeyEscrow_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Secrets_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CKeyEscrow_Request

// optional bytes rsa_oaep_sha_ticket = 1;
inline bool CKeyEscrow_Request::_internal_has_rsa_oaep_sha_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CKeyEscrow_Request::has_rsa_oaep_sha_ticket() const {
  return _internal_has_rsa_oaep_sha_ticket();
}
inline void CKeyEscrow_Request::clear_rsa_oaep_sha_ticket() {
  rsa_oaep_sha_ticket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CKeyEscrow_Request::rsa_oaep_sha_ticket() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Request.rsa_oaep_sha_ticket)
  return _internal_rsa_oaep_sha_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CKeyEscrow_Request::set_rsa_oaep_sha_ticket(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 rsa_oaep_sha_ticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CKeyEscrow_Request.rsa_oaep_sha_ticket)
}
inline std::string* CKeyEscrow_Request::mutable_rsa_oaep_sha_ticket() {
  std::string* _s = _internal_mutable_rsa_oaep_sha_ticket();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Request.rsa_oaep_sha_ticket)
  return _s;
}
inline const std::string& CKeyEscrow_Request::_internal_rsa_oaep_sha_ticket() const {
  return rsa_oaep_sha_ticket_.Get();
}
inline void CKeyEscrow_Request::_internal_set_rsa_oaep_sha_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rsa_oaep_sha_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Request::_internal_mutable_rsa_oaep_sha_ticket() {
  _has_bits_[0] |= 0x00000001u;
  return rsa_oaep_sha_ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Request::release_rsa_oaep_sha_ticket() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Request.rsa_oaep_sha_ticket)
  if (!_internal_has_rsa_oaep_sha_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = rsa_oaep_sha_ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rsa_oaep_sha_ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rsa_oaep_sha_ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CKeyEscrow_Request::set_allocated_rsa_oaep_sha_ticket(std::string* rsa_oaep_sha_ticket) {
  if (rsa_oaep_sha_ticket != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rsa_oaep_sha_ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rsa_oaep_sha_ticket,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rsa_oaep_sha_ticket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rsa_oaep_sha_ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Request.rsa_oaep_sha_ticket)
}

// optional bytes password = 2;
inline bool CKeyEscrow_Request::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CKeyEscrow_Request::has_password() const {
  return _internal_has_password();
}
inline void CKeyEscrow_Request::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CKeyEscrow_Request::password() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Request.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CKeyEscrow_Request::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 password_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CKeyEscrow_Request.password)
}
inline std::string* CKeyEscrow_Request::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Request.password)
  return _s;
}
inline const std::string& CKeyEscrow_Request::_internal_password() const {
  return password_.Get();
}
inline void CKeyEscrow_Request::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Request::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Request::release_password() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Request.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CKeyEscrow_Request::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Request.password)
}

// optional .EKeyEscrowUsage usage = 3 [default = k_EKeyEscrowUsageStreamingDevice];
inline bool CKeyEscrow_Request::_internal_has_usage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CKeyEscrow_Request::has_usage() const {
  return _internal_has_usage();
}
inline void CKeyEscrow_Request::clear_usage() {
  usage_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::EKeyEscrowUsage CKeyEscrow_Request::_internal_usage() const {
  return static_cast< ::EKeyEscrowUsage >(usage_);
}
inline ::EKeyEscrowUsage CKeyEscrow_Request::usage() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Request.usage)
  return _internal_usage();
}
inline void CKeyEscrow_Request::_internal_set_usage(::EKeyEscrowUsage value) {
  assert(::EKeyEscrowUsage_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  usage_ = value;
}
inline void CKeyEscrow_Request::set_usage(::EKeyEscrowUsage value) {
  _internal_set_usage(value);
  // @@protoc_insertion_point(field_set:CKeyEscrow_Request.usage)
}

// optional string device_name = 4;
inline bool CKeyEscrow_Request::_internal_has_device_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CKeyEscrow_Request::has_device_name() const {
  return _internal_has_device_name();
}
inline void CKeyEscrow_Request::clear_device_name() {
  device_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CKeyEscrow_Request::device_name() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Request.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CKeyEscrow_Request::set_device_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CKeyEscrow_Request.device_name)
}
inline std::string* CKeyEscrow_Request::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Request.device_name)
  return _s;
}
inline const std::string& CKeyEscrow_Request::_internal_device_name() const {
  return device_name_.Get();
}
inline void CKeyEscrow_Request::_internal_set_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Request::_internal_mutable_device_name() {
  _has_bits_[0] |= 0x00000004u;
  return device_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Request::release_device_name() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Request.device_name)
  if (!_internal_has_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = device_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CKeyEscrow_Request::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Request.device_name)
}

// -------------------------------------------------------------------

// CKeyEscrow_Ticket

// optional bytes password = 1;
inline bool CKeyEscrow_Ticket::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CKeyEscrow_Ticket::has_password() const {
  return _internal_has_password();
}
inline void CKeyEscrow_Ticket::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CKeyEscrow_Ticket::password() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CKeyEscrow_Ticket::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 password_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.password)
}
inline std::string* CKeyEscrow_Ticket::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Ticket.password)
  return _s;
}
inline const std::string& CKeyEscrow_Ticket::_internal_password() const {
  return password_.Get();
}
inline void CKeyEscrow_Ticket::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Ticket::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Ticket::release_password() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Ticket.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CKeyEscrow_Ticket::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Ticket.password)
}

// optional uint64 identifier = 2;
inline bool CKeyEscrow_Ticket::_internal_has_identifier() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CKeyEscrow_Ticket::has_identifier() const {
  return _internal_has_identifier();
}
inline void CKeyEscrow_Ticket::clear_identifier() {
  identifier_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CKeyEscrow_Ticket::_internal_identifier() const {
  return identifier_;
}
inline uint64_t CKeyEscrow_Ticket::identifier() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.identifier)
  return _internal_identifier();
}
inline void CKeyEscrow_Ticket::_internal_set_identifier(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  identifier_ = value;
}
inline void CKeyEscrow_Ticket::set_identifier(uint64_t value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.identifier)
}

// optional bytes payload = 3;
inline bool CKeyEscrow_Ticket::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CKeyEscrow_Ticket::has_payload() const {
  return _internal_has_payload();
}
inline void CKeyEscrow_Ticket::clear_payload() {
  payload_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CKeyEscrow_Ticket::payload() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CKeyEscrow_Ticket::set_payload(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.payload)
}
inline std::string* CKeyEscrow_Ticket::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Ticket.payload)
  return _s;
}
inline const std::string& CKeyEscrow_Ticket::_internal_payload() const {
  return payload_.Get();
}
inline void CKeyEscrow_Ticket::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Ticket::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000002u;
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Ticket::release_payload() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Ticket.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = payload_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CKeyEscrow_Ticket::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Ticket.payload)
}

// optional uint32 timestamp = 4;
inline bool CKeyEscrow_Ticket::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CKeyEscrow_Ticket::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CKeyEscrow_Ticket::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CKeyEscrow_Ticket::_internal_timestamp() const {
  return timestamp_;
}
inline uint32_t CKeyEscrow_Ticket::timestamp() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.timestamp)
  return _internal_timestamp();
}
inline void CKeyEscrow_Ticket::_internal_set_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  timestamp_ = value;
}
inline void CKeyEscrow_Ticket::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.timestamp)
}

// optional .EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
inline bool CKeyEscrow_Ticket::_internal_has_usage() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CKeyEscrow_Ticket::has_usage() const {
  return _internal_has_usage();
}
inline void CKeyEscrow_Ticket::clear_usage() {
  usage_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::EKeyEscrowUsage CKeyEscrow_Ticket::_internal_usage() const {
  return static_cast< ::EKeyEscrowUsage >(usage_);
}
inline ::EKeyEscrowUsage CKeyEscrow_Ticket::usage() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.usage)
  return _internal_usage();
}
inline void CKeyEscrow_Ticket::_internal_set_usage(::EKeyEscrowUsage value) {
  assert(::EKeyEscrowUsage_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  usage_ = value;
}
inline void CKeyEscrow_Ticket::set_usage(::EKeyEscrowUsage value) {
  _internal_set_usage(value);
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.usage)
}

// optional string device_name = 6;
inline bool CKeyEscrow_Ticket::_internal_has_device_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CKeyEscrow_Ticket::has_device_name() const {
  return _internal_has_device_name();
}
inline void CKeyEscrow_Ticket::clear_device_name() {
  device_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CKeyEscrow_Ticket::device_name() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CKeyEscrow_Ticket::set_device_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.device_name)
}
inline std::string* CKeyEscrow_Ticket::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Ticket.device_name)
  return _s;
}
inline const std::string& CKeyEscrow_Ticket::_internal_device_name() const {
  return device_name_.Get();
}
inline void CKeyEscrow_Ticket::_internal_set_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Ticket::_internal_mutable_device_name() {
  _has_bits_[0] |= 0x00000004u;
  return device_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Ticket::release_device_name() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Ticket.device_name)
  if (!_internal_has_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = device_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CKeyEscrow_Ticket::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Ticket.device_name)
}

// optional string device_model = 7;
inline bool CKeyEscrow_Ticket::_internal_has_device_model() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CKeyEscrow_Ticket::has_device_model() const {
  return _internal_has_device_model();
}
inline void CKeyEscrow_Ticket::clear_device_model() {
  device_model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CKeyEscrow_Ticket::device_model() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.device_model)
  return _internal_device_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CKeyEscrow_Ticket::set_device_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 device_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.device_model)
}
inline std::string* CKeyEscrow_Ticket::mutable_device_model() {
  std::string* _s = _internal_mutable_device_model();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Ticket.device_model)
  return _s;
}
inline const std::string& CKeyEscrow_Ticket::_internal_device_model() const {
  return device_model_.Get();
}
inline void CKeyEscrow_Ticket::_internal_set_device_model(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  device_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Ticket::_internal_mutable_device_model() {
  _has_bits_[0] |= 0x00000008u;
  return device_model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Ticket::release_device_model() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Ticket.device_model)
  if (!_internal_has_device_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = device_model_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CKeyEscrow_Ticket::set_allocated_device_model(std::string* device_model) {
  if (device_model != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  device_model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Ticket.device_model)
}

// optional string device_serial = 8;
inline bool CKeyEscrow_Ticket::_internal_has_device_serial() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CKeyEscrow_Ticket::has_device_serial() const {
  return _internal_has_device_serial();
}
inline void CKeyEscrow_Ticket::clear_device_serial() {
  device_serial_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CKeyEscrow_Ticket::device_serial() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.device_serial)
  return _internal_device_serial();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CKeyEscrow_Ticket::set_device_serial(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 device_serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.device_serial)
}
inline std::string* CKeyEscrow_Ticket::mutable_device_serial() {
  std::string* _s = _internal_mutable_device_serial();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Ticket.device_serial)
  return _s;
}
inline const std::string& CKeyEscrow_Ticket::_internal_device_serial() const {
  return device_serial_.Get();
}
inline void CKeyEscrow_Ticket::_internal_set_device_serial(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  device_serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Ticket::_internal_mutable_device_serial() {
  _has_bits_[0] |= 0x00000010u;
  return device_serial_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CKeyEscrow_Ticket::release_device_serial() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Ticket.device_serial)
  if (!_internal_has_device_serial()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = device_serial_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_serial_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CKeyEscrow_Ticket::set_allocated_device_serial(std::string* device_serial) {
  if (device_serial != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  device_serial_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_serial,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (device_serial_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    device_serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Ticket.device_serial)
}

// optional uint32 device_provisioning_id = 9;
inline bool CKeyEscrow_Ticket::_internal_has_device_provisioning_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CKeyEscrow_Ticket::has_device_provisioning_id() const {
  return _internal_has_device_provisioning_id();
}
inline void CKeyEscrow_Ticket::clear_device_provisioning_id() {
  device_provisioning_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CKeyEscrow_Ticket::_internal_device_provisioning_id() const {
  return device_provisioning_id_;
}
inline uint32_t CKeyEscrow_Ticket::device_provisioning_id() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Ticket.device_provisioning_id)
  return _internal_device_provisioning_id();
}
inline void CKeyEscrow_Ticket::_internal_set_device_provisioning_id(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  device_provisioning_id_ = value;
}
inline void CKeyEscrow_Ticket::set_device_provisioning_id(uint32_t value) {
  _internal_set_device_provisioning_id(value);
  // @@protoc_insertion_point(field_set:CKeyEscrow_Ticket.device_provisioning_id)
}

// -------------------------------------------------------------------

// CKeyEscrow_Response

// optional .CKeyEscrow_Ticket ticket = 1;
inline bool CKeyEscrow_Response::_internal_has_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ticket_ != nullptr);
  return value;
}
inline bool CKeyEscrow_Response::has_ticket() const {
  return _internal_has_ticket();
}
inline void CKeyEscrow_Response::clear_ticket() {
  if (ticket_ != nullptr) ticket_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CKeyEscrow_Ticket& CKeyEscrow_Response::_internal_ticket() const {
  const ::CKeyEscrow_Ticket* p = ticket_;
  return p != nullptr ? *p : reinterpret_cast<const ::CKeyEscrow_Ticket&>(
      ::_CKeyEscrow_Ticket_default_instance_);
}
inline const ::CKeyEscrow_Ticket& CKeyEscrow_Response::ticket() const {
  // @@protoc_insertion_point(field_get:CKeyEscrow_Response.ticket)
  return _internal_ticket();
}
inline void CKeyEscrow_Response::unsafe_arena_set_allocated_ticket(
    ::CKeyEscrow_Ticket* ticket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ticket_);
  }
  ticket_ = ticket;
  if (ticket) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CKeyEscrow_Response.ticket)
}
inline ::CKeyEscrow_Ticket* CKeyEscrow_Response::release_ticket() {
  _has_bits_[0] &= ~0x00000001u;
  ::CKeyEscrow_Ticket* temp = ticket_;
  ticket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CKeyEscrow_Ticket* CKeyEscrow_Response::unsafe_arena_release_ticket() {
  // @@protoc_insertion_point(field_release:CKeyEscrow_Response.ticket)
  _has_bits_[0] &= ~0x00000001u;
  ::CKeyEscrow_Ticket* temp = ticket_;
  ticket_ = nullptr;
  return temp;
}
inline ::CKeyEscrow_Ticket* CKeyEscrow_Response::_internal_mutable_ticket() {
  _has_bits_[0] |= 0x00000001u;
  if (ticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::CKeyEscrow_Ticket>(GetArenaForAllocation());
    ticket_ = p;
  }
  return ticket_;
}
inline ::CKeyEscrow_Ticket* CKeyEscrow_Response::mutable_ticket() {
  ::CKeyEscrow_Ticket* _msg = _internal_mutable_ticket();
  // @@protoc_insertion_point(field_mutable:CKeyEscrow_Response.ticket)
  return _msg;
}
inline void CKeyEscrow_Response::set_allocated_ticket(::CKeyEscrow_Ticket* ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ticket_;
  }
  if (ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CKeyEscrow_Ticket>::GetOwningArena(ticket);
    if (message_arena != submessage_arena) {
      ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ticket, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_ = ticket;
  // @@protoc_insertion_point(field_set_allocated:CKeyEscrow_Response.ticket)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EKeyEscrowUsage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EKeyEscrowUsage>() {
  return ::EKeyEscrowUsage_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fsecrets_2esteamclient_2eproto
