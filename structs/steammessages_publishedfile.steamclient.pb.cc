// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_publishedfile.steamclient.proto

#include "steammessages_publishedfile.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CPublishedFile_Vote_Request::CPublishedFile_Vote_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u})
  , vote_up_(false){}
struct CPublishedFile_Vote_RequestDefaultTypeInternal {
  constexpr CPublishedFile_Vote_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Vote_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_Vote_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Vote_RequestDefaultTypeInternal _CPublishedFile_Vote_Request_default_instance_;
constexpr CPublishedFile_Vote_Response::CPublishedFile_Vote_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_Vote_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_Vote_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Vote_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_Vote_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Vote_ResponseDefaultTypeInternal _CPublishedFile_Vote_Response_default_instance_;
constexpr CPublishedFile_Subscribe_Request::CPublishedFile_Subscribe_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u})
  , list_type_(0u)
  , appid_(0)
  , notify_client_(false){}
struct CPublishedFile_Subscribe_RequestDefaultTypeInternal {
  constexpr CPublishedFile_Subscribe_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Subscribe_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_Subscribe_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Subscribe_RequestDefaultTypeInternal _CPublishedFile_Subscribe_Request_default_instance_;
constexpr CPublishedFile_Subscribe_Response::CPublishedFile_Subscribe_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_Subscribe_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_Subscribe_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Subscribe_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_Subscribe_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Subscribe_ResponseDefaultTypeInternal _CPublishedFile_Subscribe_Response_default_instance_;
constexpr CPublishedFile_Unsubscribe_Request::CPublishedFile_Unsubscribe_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u})
  , list_type_(0u)
  , appid_(0)
  , notify_client_(false){}
struct CPublishedFile_Unsubscribe_RequestDefaultTypeInternal {
  constexpr CPublishedFile_Unsubscribe_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Unsubscribe_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_Unsubscribe_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Unsubscribe_RequestDefaultTypeInternal _CPublishedFile_Unsubscribe_Request_default_instance_;
constexpr CPublishedFile_Unsubscribe_Response::CPublishedFile_Unsubscribe_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_Unsubscribe_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_Unsubscribe_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Unsubscribe_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_Unsubscribe_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Unsubscribe_ResponseDefaultTypeInternal _CPublishedFile_Unsubscribe_Response_default_instance_;
constexpr CPublishedFile_CanSubscribe_Request::CPublishedFile_CanSubscribe_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u}){}
struct CPublishedFile_CanSubscribe_RequestDefaultTypeInternal {
  constexpr CPublishedFile_CanSubscribe_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_CanSubscribe_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_CanSubscribe_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_CanSubscribe_RequestDefaultTypeInternal _CPublishedFile_CanSubscribe_Request_default_instance_;
constexpr CPublishedFile_CanSubscribe_Response::CPublishedFile_CanSubscribe_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : can_subscribe_(false){}
struct CPublishedFile_CanSubscribe_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_CanSubscribe_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_CanSubscribe_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_CanSubscribe_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_CanSubscribe_ResponseDefaultTypeInternal _CPublishedFile_CanSubscribe_Response_default_instance_;
constexpr CPublishedFile_GetSubSectionData_Request::CPublishedFile_GetSubSectionData_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u})
  , specific_sectionid_(uint64_t{0u})
  , for_table_of_contents_(false)
  , desired_revision_(0)
{}
struct CPublishedFile_GetSubSectionData_RequestDefaultTypeInternal {
  constexpr CPublishedFile_GetSubSectionData_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetSubSectionData_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_GetSubSectionData_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetSubSectionData_RequestDefaultTypeInternal _CPublishedFile_GetSubSectionData_Request_default_instance_;
constexpr PublishedFileSubSection::PublishedFileSubSection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sectionid_(uint64_t{0u})
  , sort_order_(0u){}
struct PublishedFileSubSectionDefaultTypeInternal {
  constexpr PublishedFileSubSectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileSubSectionDefaultTypeInternal() {}
  union {
    PublishedFileSubSection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileSubSectionDefaultTypeInternal _PublishedFileSubSection_default_instance_;
constexpr CPublishedFile_GetSubSectionData_Response::CPublishedFile_GetSubSectionData_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sub_sections_(){}
struct CPublishedFile_GetSubSectionData_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_GetSubSectionData_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetSubSectionData_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_GetSubSectionData_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetSubSectionData_ResponseDefaultTypeInternal _CPublishedFile_GetSubSectionData_Response_default_instance_;
constexpr CPublishedFile_Publish_Request::CPublishedFile_Publish_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , cloudfilename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , preview_cloudfilename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , consumer_shortcut_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , youtube_username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , youtube_videoid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , redirect_uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , collection_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , consumer_appid_(0u)
  , file_type_(0u)
  , visibility_(0u){}
struct CPublishedFile_Publish_RequestDefaultTypeInternal {
  constexpr CPublishedFile_Publish_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Publish_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_Publish_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Publish_RequestDefaultTypeInternal _CPublishedFile_Publish_Request_default_instance_;
constexpr CPublishedFile_Publish_Response::CPublishedFile_Publish_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : redirect_uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , publishedfileid_(uint64_t{0u}){}
struct CPublishedFile_Publish_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_Publish_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Publish_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_Publish_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Publish_ResponseDefaultTypeInternal _CPublishedFile_Publish_Response_default_instance_;
constexpr CPublishedFile_GetDetails_Request::CPublishedFile_GetDetails_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileids_()
  , includetags_(false)
  , includeadditionalpreviews_(false)
  , includechildren_(false)
  , includekvtags_(false)
  , includevotes_(false)
  , short_description_(false)
  , includeforsaledata_(false)
  , includemetadata_(false)
  , language_(0)
  , return_playtime_stats_(0u)
  , appid_(0u)
  , desired_revision_(0)

  , strip_description_bbcode_(false)
  , includereactions_(false){}
struct CPublishedFile_GetDetails_RequestDefaultTypeInternal {
  constexpr CPublishedFile_GetDetails_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetDetails_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_GetDetails_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetDetails_RequestDefaultTypeInternal _CPublishedFile_GetDetails_Request_default_instance_;
constexpr PublishedFileDetails_Tag::PublishedFileDetails_Tag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , display_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , adminonly_(false){}
struct PublishedFileDetails_TagDefaultTypeInternal {
  constexpr PublishedFileDetails_TagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileDetails_TagDefaultTypeInternal() {}
  union {
    PublishedFileDetails_Tag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileDetails_TagDefaultTypeInternal _PublishedFileDetails_Tag_default_instance_;
constexpr PublishedFileDetails_Preview::PublishedFileDetails_Preview(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , youtubevideoid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , external_reference_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previewid_(uint64_t{0u})
  , sortorder_(0u)
  , size_(0u)
  , preview_type_(0u){}
struct PublishedFileDetails_PreviewDefaultTypeInternal {
  constexpr PublishedFileDetails_PreviewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileDetails_PreviewDefaultTypeInternal() {}
  union {
    PublishedFileDetails_Preview _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileDetails_PreviewDefaultTypeInternal _PublishedFileDetails_Preview_default_instance_;
constexpr PublishedFileDetails_Child::PublishedFileDetails_Child(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u})
  , sortorder_(0u)
  , file_type_(0u){}
struct PublishedFileDetails_ChildDefaultTypeInternal {
  constexpr PublishedFileDetails_ChildDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileDetails_ChildDefaultTypeInternal() {}
  union {
    PublishedFileDetails_Child _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileDetails_ChildDefaultTypeInternal _PublishedFileDetails_Child_default_instance_;
constexpr PublishedFileDetails_KVTag::PublishedFileDetails_KVTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PublishedFileDetails_KVTagDefaultTypeInternal {
  constexpr PublishedFileDetails_KVTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileDetails_KVTagDefaultTypeInternal() {}
  union {
    PublishedFileDetails_KVTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileDetails_KVTagDefaultTypeInternal _PublishedFileDetails_KVTag_default_instance_;
constexpr PublishedFileDetails_VoteData::PublishedFileDetails_VoteData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : score_(0)
  , votes_up_(0u)
  , votes_down_(0u){}
struct PublishedFileDetails_VoteDataDefaultTypeInternal {
  constexpr PublishedFileDetails_VoteDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileDetails_VoteDataDefaultTypeInternal() {}
  union {
    PublishedFileDetails_VoteData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileDetails_VoteDataDefaultTypeInternal _PublishedFileDetails_VoteData_default_instance_;
constexpr PublishedFileDetails_ForSaleData::PublishedFileDetails_ForSaleData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_category_(0u)
  , estatus_(0)

  , is_for_sale_(false)
  , price_is_pay_what_you_want_(false)
  , price_category_floor_(0u)
  , discount_percentage_(0u){}
struct PublishedFileDetails_ForSaleDataDefaultTypeInternal {
  constexpr PublishedFileDetails_ForSaleDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileDetails_ForSaleDataDefaultTypeInternal() {}
  union {
    PublishedFileDetails_ForSaleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileDetails_ForSaleDataDefaultTypeInternal _PublishedFileDetails_ForSaleData_default_instance_;
constexpr PublishedFileDetails_PlaytimeStats::PublishedFileDetails_PlaytimeStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playtime_seconds_(uint64_t{0u})
  , num_sessions_(uint64_t{0u}){}
struct PublishedFileDetails_PlaytimeStatsDefaultTypeInternal {
  constexpr PublishedFileDetails_PlaytimeStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileDetails_PlaytimeStatsDefaultTypeInternal() {}
  union {
    PublishedFileDetails_PlaytimeStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileDetails_PlaytimeStatsDefaultTypeInternal _PublishedFileDetails_PlaytimeStats_default_instance_;
constexpr PublishedFileDetails_Reaction::PublishedFileDetails_Reaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reactionid_(0u)
  , count_(0u){}
struct PublishedFileDetails_ReactionDefaultTypeInternal {
  constexpr PublishedFileDetails_ReactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileDetails_ReactionDefaultTypeInternal() {}
  union {
    PublishedFileDetails_Reaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileDetails_ReactionDefaultTypeInternal _PublishedFileDetails_Reaction_default_instance_;
constexpr PublishedFileDetails::PublishedFileDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : previews_()
  , tags_()
  , children_()
  , kvtags_()
  , available_revisions_()
  , reactions_()
  , content_descriptorids_()
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , preview_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , youtubevideoid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , short_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ban_reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shortcutname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vote_data_(nullptr)
  , for_sale_data_(nullptr)
  , playtime_stats_(nullptr)
  , publishedfileid_(uint64_t{0u})
  , result_(0u)
  , creator_appid_(0u)
  , creator_(uint64_t{0u})
  , consumer_appid_(0u)
  , consumer_shortcutid_(0u)
  , file_size_(uint64_t{0u})
  , preview_file_size_(uint64_t{0u})
  , hcontent_file_(uint64_t{0u})
  , hcontent_preview_(uint64_t{0u})
  , time_created_(0u)
  , time_updated_(0u)
  , visibility_(0u)
  , flags_(0u)
  , workshop_file_(false)
  , workshop_accepted_(false)
  , show_subscribe_all_(false)
  , banned_(false)
  , num_comments_developer_(0)
  , banner_(uint64_t{0u})
  , num_comments_public_(0)
  , file_type_(0u)
  , subscriptions_(0u)
  , can_be_deleted_(false)
  , incompatible_(false)
  , can_subscribe_(false)
  , spoiler_tag_(false)
  , favorited_(0u)
  , followers_(0u)
  , lifetime_subscriptions_(0u)
  , lifetime_favorited_(0u)
  , lifetime_followers_(0u)
  , views_(0u)
  , image_width_(0u)
  , image_height_(0u)
  , shortcutid_(0u)
  , num_children_(0u)
  , num_reports_(0u)
  , time_subscribed_(0u)
  , lifetime_playtime_(uint64_t{0u})
  , lifetime_playtime_sessions_(uint64_t{0u})
  , language_(0)
  , maybe_inappropriate_sex_(false)
  , maybe_inappropriate_violence_(false)
  , revision_change_number_(uint64_t{0u})
  , revision_(0)

  , ban_text_check_result_(0)

  , search_score_(0){}
struct PublishedFileDetailsDefaultTypeInternal {
  constexpr PublishedFileDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileDetailsDefaultTypeInternal() {}
  union {
    PublishedFileDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileDetailsDefaultTypeInternal _PublishedFileDetails_default_instance_;
constexpr CPublishedFile_GetDetails_Response::CPublishedFile_GetDetails_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfiledetails_(){}
struct CPublishedFile_GetDetails_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_GetDetails_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetDetails_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_GetDetails_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetDetails_ResponseDefaultTypeInternal _CPublishedFile_GetDetails_Response_default_instance_;
constexpr CPublishedFile_GetItemInfo_Request_WorkshopItem::CPublishedFile_GetItemInfo_Request_WorkshopItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : published_file_id_(uint64_t{0u})
  , time_updated_(0u)
  , desired_revision_(0)
{}
struct CPublishedFile_GetItemInfo_Request_WorkshopItemDefaultTypeInternal {
  constexpr CPublishedFile_GetItemInfo_Request_WorkshopItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetItemInfo_Request_WorkshopItemDefaultTypeInternal() {}
  union {
    CPublishedFile_GetItemInfo_Request_WorkshopItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetItemInfo_Request_WorkshopItemDefaultTypeInternal _CPublishedFile_GetItemInfo_Request_WorkshopItem_default_instance_;
constexpr CPublishedFile_GetItemInfo_Request::CPublishedFile_GetItemInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workshop_items_()
  , appid_(0u)
  , last_time_updated_(0u){}
struct CPublishedFile_GetItemInfo_RequestDefaultTypeInternal {
  constexpr CPublishedFile_GetItemInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetItemInfo_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_GetItemInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetItemInfo_RequestDefaultTypeInternal _CPublishedFile_GetItemInfo_Request_default_instance_;
constexpr CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : published_file_id_(uint64_t{0u})
  , manifest_id_(uint64_t{0u})
  , time_updated_(0u)
  , flags_(0u){}
struct CPublishedFile_GetItemInfo_Response_WorkshopItemInfoDefaultTypeInternal {
  constexpr CPublishedFile_GetItemInfo_Response_WorkshopItemInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetItemInfo_Response_WorkshopItemInfoDefaultTypeInternal() {}
  union {
    CPublishedFile_GetItemInfo_Response_WorkshopItemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetItemInfo_Response_WorkshopItemInfoDefaultTypeInternal _CPublishedFile_GetItemInfo_Response_WorkshopItemInfo_default_instance_;
constexpr CPublishedFile_GetItemInfo_Response::CPublishedFile_GetItemInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workshop_items_()
  , private_items_()
  , update_time_(0u){}
struct CPublishedFile_GetItemInfo_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_GetItemInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetItemInfo_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_GetItemInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetItemInfo_ResponseDefaultTypeInternal _CPublishedFile_GetItemInfo_Response_default_instance_;
constexpr CPublishedFile_GetUserFiles_Request_KVTag::CPublishedFile_GetUserFiles_Request_KVTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CPublishedFile_GetUserFiles_Request_KVTagDefaultTypeInternal {
  constexpr CPublishedFile_GetUserFiles_Request_KVTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetUserFiles_Request_KVTagDefaultTypeInternal() {}
  union {
    CPublishedFile_GetUserFiles_Request_KVTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetUserFiles_Request_KVTagDefaultTypeInternal _CPublishedFile_GetUserFiles_Request_KVTag_default_instance_;
constexpr CPublishedFile_GetUserFiles_Request_TagGroup::CPublishedFile_GetUserFiles_Request_TagGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(){}
struct CPublishedFile_GetUserFiles_Request_TagGroupDefaultTypeInternal {
  constexpr CPublishedFile_GetUserFiles_Request_TagGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetUserFiles_Request_TagGroupDefaultTypeInternal() {}
  union {
    CPublishedFile_GetUserFiles_Request_TagGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetUserFiles_Request_TagGroupDefaultTypeInternal _CPublishedFile_GetUserFiles_Request_TagGroup_default_instance_;
constexpr CPublishedFile_GetUserFiles_Request::CPublishedFile_GetUserFiles_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requiredtags_()
  , excludedtags_()
  , required_kv_tags_()
  , taggroups_()
  , excluded_content_descriptors_()
  , type_(nullptr)
  , sortmethod_(nullptr)
  , match_cloud_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , appid_(0u)
  , shortcutid_(0u)
  , privacy_(0u)
  , filetype_(0u)
  , creator_appid_(0u)
  , totalonly_(false)
  , ids_only_(false)
  , return_tags_(false)
  , return_previews_(false)
  , startindex_override_(0u)
  , cache_max_age_seconds_(0u)
  , return_children_(false)
  , return_for_sale_data_(false)
  , return_metadata_(false)
  , strip_description_bbcode_(false)
  , language_(0)
  , return_playtime_stats_(0u)
  , desired_revision_(0)

  , return_reactions_(false)
  , return_apps_(false)
  , return_vote_data_(true)
  , return_kv_tags_(true)
  , return_short_description_(true)
  , page_(1u)
  , numperpage_(1u){}
struct CPublishedFile_GetUserFiles_RequestDefaultTypeInternal {
  constexpr CPublishedFile_GetUserFiles_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetUserFiles_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_GetUserFiles_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetUserFiles_RequestDefaultTypeInternal _CPublishedFile_GetUserFiles_Request_default_instance_;
constexpr CPublishedFile_GetUserFiles_Response_App::CPublishedFile_GetUserFiles_Response_App(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , shortcutid_(0u)
  , private__(false){}
struct CPublishedFile_GetUserFiles_Response_AppDefaultTypeInternal {
  constexpr CPublishedFile_GetUserFiles_Response_AppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetUserFiles_Response_AppDefaultTypeInternal() {}
  union {
    CPublishedFile_GetUserFiles_Response_App _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetUserFiles_Response_AppDefaultTypeInternal _CPublishedFile_GetUserFiles_Response_App_default_instance_;
constexpr CPublishedFile_GetUserFiles_Response::CPublishedFile_GetUserFiles_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfiledetails_()
  , apps_()
  , total_(0u)
  , startindex_(0u){}
struct CPublishedFile_GetUserFiles_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_GetUserFiles_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetUserFiles_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_GetUserFiles_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetUserFiles_ResponseDefaultTypeInternal _CPublishedFile_GetUserFiles_Response_default_instance_;
constexpr CPublishedFile_AreFilesInSubscriptionList_Request::CPublishedFile_AreFilesInSubscriptionList_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileids_()
  , appid_(0u)
  , listtype_(0u)
  , filetype_(0u)
  , workshopfiletype_(0u){}
struct CPublishedFile_AreFilesInSubscriptionList_RequestDefaultTypeInternal {
  constexpr CPublishedFile_AreFilesInSubscriptionList_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_AreFilesInSubscriptionList_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_AreFilesInSubscriptionList_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_AreFilesInSubscriptionList_RequestDefaultTypeInternal _CPublishedFile_AreFilesInSubscriptionList_Request_default_instance_;
constexpr CPublishedFile_AreFilesInSubscriptionList_Response_InList::CPublishedFile_AreFilesInSubscriptionList_Response_InList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u})
  , inlist_(false){}
struct CPublishedFile_AreFilesInSubscriptionList_Response_InListDefaultTypeInternal {
  constexpr CPublishedFile_AreFilesInSubscriptionList_Response_InListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_AreFilesInSubscriptionList_Response_InListDefaultTypeInternal() {}
  union {
    CPublishedFile_AreFilesInSubscriptionList_Response_InList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_AreFilesInSubscriptionList_Response_InListDefaultTypeInternal _CPublishedFile_AreFilesInSubscriptionList_Response_InList_default_instance_;
constexpr CPublishedFile_AreFilesInSubscriptionList_Response::CPublishedFile_AreFilesInSubscriptionList_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : files_(){}
struct CPublishedFile_AreFilesInSubscriptionList_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_AreFilesInSubscriptionList_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_AreFilesInSubscriptionList_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_AreFilesInSubscriptionList_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_AreFilesInSubscriptionList_ResponseDefaultTypeInternal _CPublishedFile_AreFilesInSubscriptionList_Response_default_instance_;
constexpr CPublishedFile_Update_Request::CPublishedFile_Update_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , preview_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , publishedfileid_(uint64_t{0u})
  , appid_(0u)
  , visibility_(0u)
  , image_height_(0u)
  , spoiler_tag_(false)
  , image_width_(0u){}
struct CPublishedFile_Update_RequestDefaultTypeInternal {
  constexpr CPublishedFile_Update_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Update_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_Update_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Update_RequestDefaultTypeInternal _CPublishedFile_Update_Request_default_instance_;
constexpr CPublishedFile_Update_Response::CPublishedFile_Update_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_Update_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_Update_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Update_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_Update_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Update_ResponseDefaultTypeInternal _CPublishedFile_Update_Response_default_instance_;
constexpr CPublishedFile_Delete_Request::CPublishedFile_Delete_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u}){}
struct CPublishedFile_Delete_RequestDefaultTypeInternal {
  constexpr CPublishedFile_Delete_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Delete_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_Delete_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Delete_RequestDefaultTypeInternal _CPublishedFile_Delete_Request_default_instance_;
constexpr CPublishedFile_Delete_Response::CPublishedFile_Delete_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_Delete_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_Delete_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Delete_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_Delete_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Delete_ResponseDefaultTypeInternal _CPublishedFile_Delete_Response_default_instance_;
constexpr CPublishedFile_GetChangeHistoryEntry_Request::CPublishedFile_GetChangeHistoryEntry_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u})
  , timestamp_(0u)
  , language_(0){}
struct CPublishedFile_GetChangeHistoryEntry_RequestDefaultTypeInternal {
  constexpr CPublishedFile_GetChangeHistoryEntry_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetChangeHistoryEntry_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_GetChangeHistoryEntry_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetChangeHistoryEntry_RequestDefaultTypeInternal _CPublishedFile_GetChangeHistoryEntry_Request_default_instance_;
constexpr CPublishedFile_GetChangeHistoryEntry_Response::CPublishedFile_GetChangeHistoryEntry_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : change_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(0){}
struct CPublishedFile_GetChangeHistoryEntry_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_GetChangeHistoryEntry_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetChangeHistoryEntry_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_GetChangeHistoryEntry_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetChangeHistoryEntry_ResponseDefaultTypeInternal _CPublishedFile_GetChangeHistoryEntry_Response_default_instance_;
constexpr CPublishedFile_GetChangeHistory_Request::CPublishedFile_GetChangeHistory_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u})
  , total_only_(false)
  , startindex_(0u)
  , count_(0u)
  , language_(0){}
struct CPublishedFile_GetChangeHistory_RequestDefaultTypeInternal {
  constexpr CPublishedFile_GetChangeHistory_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetChangeHistory_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_GetChangeHistory_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetChangeHistory_RequestDefaultTypeInternal _CPublishedFile_GetChangeHistory_Request_default_instance_;
constexpr CPublishedFile_GetChangeHistory_Response_ChangeLog::CPublishedFile_GetChangeHistory_Response_ChangeLog(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : change_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(0u)
  , language_(0){}
struct CPublishedFile_GetChangeHistory_Response_ChangeLogDefaultTypeInternal {
  constexpr CPublishedFile_GetChangeHistory_Response_ChangeLogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetChangeHistory_Response_ChangeLogDefaultTypeInternal() {}
  union {
    CPublishedFile_GetChangeHistory_Response_ChangeLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetChangeHistory_Response_ChangeLogDefaultTypeInternal _CPublishedFile_GetChangeHistory_Response_ChangeLog_default_instance_;
constexpr CPublishedFile_GetChangeHistory_Response::CPublishedFile_GetChangeHistory_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : changes_()
  , total_(0u){}
struct CPublishedFile_GetChangeHistory_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_GetChangeHistory_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetChangeHistory_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_GetChangeHistory_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetChangeHistory_ResponseDefaultTypeInternal _CPublishedFile_GetChangeHistory_Response_default_instance_;
constexpr CPublishedFile_RefreshVotingQueue_Request::CPublishedFile_RefreshVotingQueue_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , excluded_tags_()
  , appid_(0u)
  , matching_file_type_(0u)
  , desired_queue_size_(0u)
  , desired_revision_(0)

  , match_all_tags_(true){}
struct CPublishedFile_RefreshVotingQueue_RequestDefaultTypeInternal {
  constexpr CPublishedFile_RefreshVotingQueue_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_RefreshVotingQueue_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_RefreshVotingQueue_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_RefreshVotingQueue_RequestDefaultTypeInternal _CPublishedFile_RefreshVotingQueue_Request_default_instance_;
constexpr CPublishedFile_RefreshVotingQueue_Response::CPublishedFile_RefreshVotingQueue_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_RefreshVotingQueue_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_RefreshVotingQueue_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_RefreshVotingQueue_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_RefreshVotingQueue_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_RefreshVotingQueue_ResponseDefaultTypeInternal _CPublishedFile_RefreshVotingQueue_Response_default_instance_;
constexpr CPublishedFile_QueryFiles_Request_KVTag::CPublishedFile_QueryFiles_Request_KVTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CPublishedFile_QueryFiles_Request_KVTagDefaultTypeInternal {
  constexpr CPublishedFile_QueryFiles_Request_KVTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_QueryFiles_Request_KVTagDefaultTypeInternal() {}
  union {
    CPublishedFile_QueryFiles_Request_KVTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_QueryFiles_Request_KVTagDefaultTypeInternal _CPublishedFile_QueryFiles_Request_KVTag_default_instance_;
constexpr CPublishedFile_QueryFiles_Request_TagGroup::CPublishedFile_QueryFiles_Request_TagGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(){}
struct CPublishedFile_QueryFiles_Request_TagGroupDefaultTypeInternal {
  constexpr CPublishedFile_QueryFiles_Request_TagGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_QueryFiles_Request_TagGroupDefaultTypeInternal() {}
  union {
    CPublishedFile_QueryFiles_Request_TagGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_QueryFiles_Request_TagGroupDefaultTypeInternal _CPublishedFile_QueryFiles_Request_TagGroup_default_instance_;
constexpr CPublishedFile_QueryFiles_Request_DateRange::CPublishedFile_QueryFiles_Request_DateRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_start_(0u)
  , timestamp_end_(0u){}
struct CPublishedFile_QueryFiles_Request_DateRangeDefaultTypeInternal {
  constexpr CPublishedFile_QueryFiles_Request_DateRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_QueryFiles_Request_DateRangeDefaultTypeInternal() {}
  union {
    CPublishedFile_QueryFiles_Request_DateRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_QueryFiles_Request_DateRangeDefaultTypeInternal _CPublishedFile_QueryFiles_Request_DateRange_default_instance_;
constexpr CPublishedFile_QueryFiles_Request::CPublishedFile_QueryFiles_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requiredtags_()
  , excludedtags_()
  , required_flags_()
  , omitted_flags_()
  , required_kv_tags_()
  , taggroups_()
  , excluded_content_descriptors_()
  , search_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cursor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , date_range_created_(nullptr)
  , date_range_updated_(nullptr)
  , query_type_(0u)
  , page_(0u)
  , creator_appid_(0u)
  , appid_(0u)
  , child_publishedfileid_(uint64_t{0u})
  , filetype_(0u)
  , days_(0u)
  , return_tags_(false)
  , return_kv_tags_(false)
  , return_previews_(false)
  , return_children_(false)
  , include_recent_votes_only_(false)
  , totalonly_(false)
  , ids_only_(false)
  , return_vote_data_(false)
  , return_short_description_(false)
  , return_for_sale_data_(false)
  , return_metadata_(false)
  , return_details_(false)
  , cache_max_age_seconds_(0u)
  , language_(0)
  , return_playtime_stats_(0u)
  , desired_revision_(0)

  , strip_description_bbcode_(false)
  , return_reactions_(false)
  , numperpage_(1u)
  , match_all_tags_(true){}
struct CPublishedFile_QueryFiles_RequestDefaultTypeInternal {
  constexpr CPublishedFile_QueryFiles_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_QueryFiles_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_QueryFiles_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_QueryFiles_RequestDefaultTypeInternal _CPublishedFile_QueryFiles_Request_default_instance_;
constexpr CPublishedFile_QueryFiles_Response::CPublishedFile_QueryFiles_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfiledetails_()
  , next_cursor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_(0u){}
struct CPublishedFile_QueryFiles_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_QueryFiles_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_QueryFiles_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_QueryFiles_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_QueryFiles_ResponseDefaultTypeInternal _CPublishedFile_QueryFiles_Response_default_instance_;
constexpr CPublishedFile_AddAppRelationship_Request::CPublishedFile_AddAppRelationship_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u})
  , appid_(0u)
  , relationship_(0u){}
struct CPublishedFile_AddAppRelationship_RequestDefaultTypeInternal {
  constexpr CPublishedFile_AddAppRelationship_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_AddAppRelationship_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_AddAppRelationship_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_AddAppRelationship_RequestDefaultTypeInternal _CPublishedFile_AddAppRelationship_Request_default_instance_;
constexpr CPublishedFile_AddAppRelationship_Response::CPublishedFile_AddAppRelationship_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_AddAppRelationship_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_AddAppRelationship_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_AddAppRelationship_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_AddAppRelationship_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_AddAppRelationship_ResponseDefaultTypeInternal _CPublishedFile_AddAppRelationship_Response_default_instance_;
constexpr CPublishedFile_RemoveAppRelationship_Request::CPublishedFile_RemoveAppRelationship_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u})
  , appid_(0u)
  , relationship_(0u){}
struct CPublishedFile_RemoveAppRelationship_RequestDefaultTypeInternal {
  constexpr CPublishedFile_RemoveAppRelationship_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_RemoveAppRelationship_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_RemoveAppRelationship_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_RemoveAppRelationship_RequestDefaultTypeInternal _CPublishedFile_RemoveAppRelationship_Request_default_instance_;
constexpr CPublishedFile_RemoveAppRelationship_Response::CPublishedFile_RemoveAppRelationship_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_RemoveAppRelationship_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_RemoveAppRelationship_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_RemoveAppRelationship_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_RemoveAppRelationship_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_RemoveAppRelationship_ResponseDefaultTypeInternal _CPublishedFile_RemoveAppRelationship_Response_default_instance_;
constexpr CPublishedFile_GetAppRelationships_Request::CPublishedFile_GetAppRelationships_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u}){}
struct CPublishedFile_GetAppRelationships_RequestDefaultTypeInternal {
  constexpr CPublishedFile_GetAppRelationships_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetAppRelationships_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_GetAppRelationships_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetAppRelationships_RequestDefaultTypeInternal _CPublishedFile_GetAppRelationships_Request_default_instance_;
constexpr CPublishedFile_GetAppRelationships_Response_AppRelationship::CPublishedFile_GetAppRelationships_Response_AppRelationship(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , relationship_(0u){}
struct CPublishedFile_GetAppRelationships_Response_AppRelationshipDefaultTypeInternal {
  constexpr CPublishedFile_GetAppRelationships_Response_AppRelationshipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetAppRelationships_Response_AppRelationshipDefaultTypeInternal() {}
  union {
    CPublishedFile_GetAppRelationships_Response_AppRelationship _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetAppRelationships_Response_AppRelationshipDefaultTypeInternal _CPublishedFile_GetAppRelationships_Response_AppRelationship_default_instance_;
constexpr CPublishedFile_GetAppRelationships_Response::CPublishedFile_GetAppRelationships_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_relationships_(){}
struct CPublishedFile_GetAppRelationships_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_GetAppRelationships_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetAppRelationships_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_GetAppRelationships_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetAppRelationships_ResponseDefaultTypeInternal _CPublishedFile_GetAppRelationships_Response_default_instance_;
constexpr CPublishedFile_GetAppRelationshipsBatched_Request::CPublishedFile_GetAppRelationshipsBatched_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileids_()
  , filter_relationship_(0u){}
struct CPublishedFile_GetAppRelationshipsBatched_RequestDefaultTypeInternal {
  constexpr CPublishedFile_GetAppRelationshipsBatched_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetAppRelationshipsBatched_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_GetAppRelationshipsBatched_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetAppRelationshipsBatched_RequestDefaultTypeInternal _CPublishedFile_GetAppRelationshipsBatched_Request_default_instance_;
constexpr CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , relationship_(0u){}
struct CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationshipDefaultTypeInternal {
  constexpr CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationshipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationshipDefaultTypeInternal() {}
  union {
    CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationshipDefaultTypeInternal _CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship_default_instance_;
constexpr CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_relationships_()
  , publishedfileid_(uint64_t{0u})
  , result_(0u){}
struct CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationshipDefaultTypeInternal {
  constexpr CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationshipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationshipDefaultTypeInternal() {}
  union {
    CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationshipDefaultTypeInternal _CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship_default_instance_;
constexpr CPublishedFile_GetAppRelationshipsBatched_Response::CPublishedFile_GetAppRelationshipsBatched_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : relationships_(){}
struct CPublishedFile_GetAppRelationshipsBatched_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_GetAppRelationshipsBatched_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetAppRelationshipsBatched_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_GetAppRelationshipsBatched_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetAppRelationshipsBatched_ResponseDefaultTypeInternal _CPublishedFile_GetAppRelationshipsBatched_Response_default_instance_;
constexpr CPublishedFile_StartPlaytimeTracking_Request::CPublishedFile_StartPlaytimeTracking_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileids_()
  , appid_(0u){}
struct CPublishedFile_StartPlaytimeTracking_RequestDefaultTypeInternal {
  constexpr CPublishedFile_StartPlaytimeTracking_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_StartPlaytimeTracking_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_StartPlaytimeTracking_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_StartPlaytimeTracking_RequestDefaultTypeInternal _CPublishedFile_StartPlaytimeTracking_Request_default_instance_;
constexpr CPublishedFile_StartPlaytimeTracking_Response::CPublishedFile_StartPlaytimeTracking_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_StartPlaytimeTracking_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_StartPlaytimeTracking_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_StartPlaytimeTracking_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_StartPlaytimeTracking_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_StartPlaytimeTracking_ResponseDefaultTypeInternal _CPublishedFile_StartPlaytimeTracking_Response_default_instance_;
constexpr CPublishedFile_StopPlaytimeTracking_Request::CPublishedFile_StopPlaytimeTracking_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileids_()
  , appid_(0u){}
struct CPublishedFile_StopPlaytimeTracking_RequestDefaultTypeInternal {
  constexpr CPublishedFile_StopPlaytimeTracking_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_StopPlaytimeTracking_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_StopPlaytimeTracking_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_StopPlaytimeTracking_RequestDefaultTypeInternal _CPublishedFile_StopPlaytimeTracking_Request_default_instance_;
constexpr CPublishedFile_StopPlaytimeTracking_Response::CPublishedFile_StopPlaytimeTracking_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_StopPlaytimeTracking_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_StopPlaytimeTracking_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_StopPlaytimeTracking_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_StopPlaytimeTracking_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_StopPlaytimeTracking_ResponseDefaultTypeInternal _CPublishedFile_StopPlaytimeTracking_Response_default_instance_;
constexpr CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CPublishedFile_StopPlaytimeTrackingForAllAppItems_RequestDefaultTypeInternal {
  constexpr CPublishedFile_StopPlaytimeTrackingForAllAppItems_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_StopPlaytimeTrackingForAllAppItems_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_StopPlaytimeTrackingForAllAppItems_RequestDefaultTypeInternal _CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request_default_instance_;
constexpr CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_StopPlaytimeTrackingForAllAppItems_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_StopPlaytimeTrackingForAllAppItems_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_StopPlaytimeTrackingForAllAppItems_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_StopPlaytimeTrackingForAllAppItems_ResponseDefaultTypeInternal _CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response_default_instance_;
constexpr CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u})
  , seconds_active_(0){}
struct CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsageDefaultTypeInternal {
  constexpr CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsageDefaultTypeInternal() {}
  union {
    CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsageDefaultTypeInternal _CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage_default_instance_;
constexpr CPublishedFile_SetPlaytimeForControllerConfigs_Request::CPublishedFile_SetPlaytimeForControllerConfigs_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_config_usage_()
  , appid_(0u){}
struct CPublishedFile_SetPlaytimeForControllerConfigs_RequestDefaultTypeInternal {
  constexpr CPublishedFile_SetPlaytimeForControllerConfigs_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_SetPlaytimeForControllerConfigs_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_SetPlaytimeForControllerConfigs_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_SetPlaytimeForControllerConfigs_RequestDefaultTypeInternal _CPublishedFile_SetPlaytimeForControllerConfigs_Request_default_instance_;
constexpr CPublishedFile_SetPlaytimeForControllerConfigs_Response::CPublishedFile_SetPlaytimeForControllerConfigs_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_SetPlaytimeForControllerConfigs_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_SetPlaytimeForControllerConfigs_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_SetPlaytimeForControllerConfigs_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_SetPlaytimeForControllerConfigs_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_SetPlaytimeForControllerConfigs_ResponseDefaultTypeInternal _CPublishedFile_SetPlaytimeForControllerConfigs_Response_default_instance_;
constexpr CPublishedFile_AddChild_Request::CPublishedFile_AddChild_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u})
  , child_publishedfileid_(uint64_t{0u}){}
struct CPublishedFile_AddChild_RequestDefaultTypeInternal {
  constexpr CPublishedFile_AddChild_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_AddChild_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_AddChild_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_AddChild_RequestDefaultTypeInternal _CPublishedFile_AddChild_Request_default_instance_;
constexpr CPublishedFile_AddChild_Response::CPublishedFile_AddChild_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_AddChild_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_AddChild_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_AddChild_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_AddChild_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_AddChild_ResponseDefaultTypeInternal _CPublishedFile_AddChild_Response_default_instance_;
constexpr CPublishedFile_RemoveChild_Request::CPublishedFile_RemoveChild_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u})
  , child_publishedfileid_(uint64_t{0u}){}
struct CPublishedFile_RemoveChild_RequestDefaultTypeInternal {
  constexpr CPublishedFile_RemoveChild_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_RemoveChild_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_RemoveChild_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_RemoveChild_RequestDefaultTypeInternal _CPublishedFile_RemoveChild_Request_default_instance_;
constexpr CPublishedFile_RemoveChild_Response::CPublishedFile_RemoveChild_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_RemoveChild_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_RemoveChild_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_RemoveChild_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_RemoveChild_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_RemoveChild_ResponseDefaultTypeInternal _CPublishedFile_RemoveChild_Response_default_instance_;
constexpr CPublishedFile_GetUserVoteSummary_Request::CPublishedFile_GetUserVoteSummary_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileids_(){}
struct CPublishedFile_GetUserVoteSummary_RequestDefaultTypeInternal {
  constexpr CPublishedFile_GetUserVoteSummary_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetUserVoteSummary_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_GetUserVoteSummary_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetUserVoteSummary_RequestDefaultTypeInternal _CPublishedFile_GetUserVoteSummary_Request_default_instance_;
constexpr CPublishedFile_GetUserVoteSummary_Response_VoteSummary::CPublishedFile_GetUserVoteSummary_Response_VoteSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u})
  , vote_for_(false)
  , vote_against_(false)
  , reported_(false){}
struct CPublishedFile_GetUserVoteSummary_Response_VoteSummaryDefaultTypeInternal {
  constexpr CPublishedFile_GetUserVoteSummary_Response_VoteSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetUserVoteSummary_Response_VoteSummaryDefaultTypeInternal() {}
  union {
    CPublishedFile_GetUserVoteSummary_Response_VoteSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetUserVoteSummary_Response_VoteSummaryDefaultTypeInternal _CPublishedFile_GetUserVoteSummary_Response_VoteSummary_default_instance_;
constexpr CPublishedFile_GetUserVoteSummary_Response::CPublishedFile_GetUserVoteSummary_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : summaries_(){}
struct CPublishedFile_GetUserVoteSummary_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_GetUserVoteSummary_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetUserVoteSummary_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_GetUserVoteSummary_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetUserVoteSummary_ResponseDefaultTypeInternal _CPublishedFile_GetUserVoteSummary_Response_default_instance_;
constexpr CPublishedFile_GetItemChanges_Request::CPublishedFile_GetItemChanges_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , last_time_updated_(0u)
  , num_items_max_(0u){}
struct CPublishedFile_GetItemChanges_RequestDefaultTypeInternal {
  constexpr CPublishedFile_GetItemChanges_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetItemChanges_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_GetItemChanges_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetItemChanges_RequestDefaultTypeInternal _CPublishedFile_GetItemChanges_Request_default_instance_;
constexpr CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : published_file_id_(uint64_t{0u})
  , manifest_id_(uint64_t{0u})
  , time_updated_(0u){}
struct CPublishedFile_GetItemChanges_Response_WorkshopItemInfoDefaultTypeInternal {
  constexpr CPublishedFile_GetItemChanges_Response_WorkshopItemInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetItemChanges_Response_WorkshopItemInfoDefaultTypeInternal() {}
  union {
    CPublishedFile_GetItemChanges_Response_WorkshopItemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetItemChanges_Response_WorkshopItemInfoDefaultTypeInternal _CPublishedFile_GetItemChanges_Response_WorkshopItemInfo_default_instance_;
constexpr CPublishedFile_GetItemChanges_Response::CPublishedFile_GetItemChanges_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workshop_items_()
  , update_time_(0u){}
struct CPublishedFile_GetItemChanges_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_GetItemChanges_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetItemChanges_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_GetItemChanges_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetItemChanges_ResponseDefaultTypeInternal _CPublishedFile_GetItemChanges_Response_default_instance_;
constexpr CPublishedFile_GetContentDescriptors_Request::CPublishedFile_GetContentDescriptors_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(uint64_t{0u}){}
struct CPublishedFile_GetContentDescriptors_RequestDefaultTypeInternal {
  constexpr CPublishedFile_GetContentDescriptors_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetContentDescriptors_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_GetContentDescriptors_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetContentDescriptors_RequestDefaultTypeInternal _CPublishedFile_GetContentDescriptors_Request_default_instance_;
constexpr CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accountid_(0u)
  , timestamp_(0u)
  , moderator_set_(false)
  , descriptorid_(1)
{}
struct CPublishedFile_GetContentDescriptors_Response_ContentDescriptorDefaultTypeInternal {
  constexpr CPublishedFile_GetContentDescriptors_Response_ContentDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetContentDescriptors_Response_ContentDescriptorDefaultTypeInternal() {}
  union {
    CPublishedFile_GetContentDescriptors_Response_ContentDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetContentDescriptors_Response_ContentDescriptorDefaultTypeInternal _CPublishedFile_GetContentDescriptors_Response_ContentDescriptor_default_instance_;
constexpr CPublishedFile_GetContentDescriptors_Response::CPublishedFile_GetContentDescriptors_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_descriptors_(){}
struct CPublishedFile_GetContentDescriptors_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_GetContentDescriptors_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetContentDescriptors_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_GetContentDescriptors_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetContentDescriptors_ResponseDefaultTypeInternal _CPublishedFile_GetContentDescriptors_Response_default_instance_;
constexpr CPublishedFile_UpdateContentDescriptors_Request::CPublishedFile_UpdateContentDescriptors_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : descriptors_to_add_()
  , descriptors_to_remove_()
  , publishedfileid_(uint64_t{0u}){}
struct CPublishedFile_UpdateContentDescriptors_RequestDefaultTypeInternal {
  constexpr CPublishedFile_UpdateContentDescriptors_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_UpdateContentDescriptors_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_UpdateContentDescriptors_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_UpdateContentDescriptors_RequestDefaultTypeInternal _CPublishedFile_UpdateContentDescriptors_Request_default_instance_;
constexpr CPublishedFile_UpdateContentDescriptors_Response::CPublishedFile_UpdateContentDescriptors_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_updated_(0u){}
struct CPublishedFile_UpdateContentDescriptors_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_UpdateContentDescriptors_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_UpdateContentDescriptors_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_UpdateContentDescriptors_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_UpdateContentDescriptors_ResponseDefaultTypeInternal _CPublishedFile_UpdateContentDescriptors_Response_default_instance_;
constexpr CPublishedFile_FileSubscribed_Notification_RevisionData::CPublishedFile_FileSubscribed_Notification_RevisionData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_hcontent_(uint64_t{0u})
  , revision_(0)

  , rtime_updated_(0u){}
struct CPublishedFile_FileSubscribed_Notification_RevisionDataDefaultTypeInternal {
  constexpr CPublishedFile_FileSubscribed_Notification_RevisionDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_FileSubscribed_Notification_RevisionDataDefaultTypeInternal() {}
  union {
    CPublishedFile_FileSubscribed_Notification_RevisionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_FileSubscribed_Notification_RevisionDataDefaultTypeInternal _CPublishedFile_FileSubscribed_Notification_RevisionData_default_instance_;
constexpr CPublishedFile_FileSubscribed_Notification::CPublishedFile_FileSubscribed_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : revisions_()
  , published_file_id_(uint64_t{0u})
  , file_hcontent_(uint64_t{0u})
  , app_id_(0u)
  , file_size_(0u)
  , rtime_subscribed_(0u)
  , is_depot_content_(false)
  , rtime_updated_(0u){}
struct CPublishedFile_FileSubscribed_NotificationDefaultTypeInternal {
  constexpr CPublishedFile_FileSubscribed_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_FileSubscribed_NotificationDefaultTypeInternal() {}
  union {
    CPublishedFile_FileSubscribed_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_FileSubscribed_NotificationDefaultTypeInternal _CPublishedFile_FileSubscribed_Notification_default_instance_;
constexpr CPublishedFile_FileUnsubscribed_Notification::CPublishedFile_FileUnsubscribed_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : published_file_id_(uint64_t{0u})
  , app_id_(0u){}
struct CPublishedFile_FileUnsubscribed_NotificationDefaultTypeInternal {
  constexpr CPublishedFile_FileUnsubscribed_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_FileUnsubscribed_NotificationDefaultTypeInternal() {}
  union {
    CPublishedFile_FileUnsubscribed_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_FileUnsubscribed_NotificationDefaultTypeInternal _CPublishedFile_FileUnsubscribed_Notification_default_instance_;
constexpr CPublishedFile_FileDeleted_Client_Notification::CPublishedFile_FileDeleted_Client_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : published_file_id_(uint64_t{0u})
  , app_id_(0u){}
struct CPublishedFile_FileDeleted_Client_NotificationDefaultTypeInternal {
  constexpr CPublishedFile_FileDeleted_Client_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_FileDeleted_Client_NotificationDefaultTypeInternal() {}
  union {
    CPublishedFile_FileDeleted_Client_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_FileDeleted_Client_NotificationDefaultTypeInternal _CPublishedFile_FileDeleted_Client_Notification_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[91];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fpublishedfile_2esteamclient_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fpublishedfile_2esteamclient_2eproto[2];

const uint32_t TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Vote_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Vote_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Vote_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Vote_Request, vote_up_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Vote_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Subscribe_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Subscribe_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Subscribe_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Subscribe_Request, list_type_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Subscribe_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Subscribe_Request, notify_client_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Subscribe_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Unsubscribe_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Unsubscribe_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Unsubscribe_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Unsubscribe_Request, list_type_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Unsubscribe_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Unsubscribe_Request, notify_client_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Unsubscribe_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_CanSubscribe_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_CanSubscribe_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_CanSubscribe_Request, publishedfileid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_CanSubscribe_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_CanSubscribe_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_CanSubscribe_Response, can_subscribe_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetSubSectionData_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetSubSectionData_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetSubSectionData_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetSubSectionData_Request, for_table_of_contents_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetSubSectionData_Request, specific_sectionid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetSubSectionData_Request, desired_revision_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::PublishedFileSubSection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileSubSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PublishedFileSubSection, sectionid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileSubSection, title_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileSubSection, description_text_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileSubSection, sort_order_),
  2,
  0,
  1,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetSubSectionData_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetSubSectionData_Response, sub_sections_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, consumer_appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, cloudfilename_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, preview_cloudfilename_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, title_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, file_description_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, file_type_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, consumer_shortcut_name_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, youtube_username_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, youtube_videoid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, visibility_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, redirect_uri_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, collection_type_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, game_type_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, url_),
  11,
  12,
  0,
  1,
  2,
  3,
  13,
  4,
  5,
  6,
  14,
  7,
  ~0u,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Response, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Response, redirect_uri_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, publishedfileids_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, includetags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, includeadditionalpreviews_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, includechildren_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, includekvtags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, includevotes_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, short_description_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, includeforsaledata_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, includemetadata_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, return_playtime_stats_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, strip_description_bbcode_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, desired_revision_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, includereactions_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  12,
  11,
  13,
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Tag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Tag, tag_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Tag, adminonly_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Tag, display_name_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, previewid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, sortorder_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, url_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, size_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, filename_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, youtubevideoid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, preview_type_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, external_reference_),
  4,
  5,
  0,
  6,
  1,
  2,
  7,
  3,
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Child, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Child, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Child, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Child, sortorder_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Child, file_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_KVTag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_KVTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_KVTag, key_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_KVTag, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_VoteData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_VoteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_VoteData, score_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_VoteData, votes_up_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_VoteData, votes_down_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_ForSaleData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_ForSaleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_ForSaleData, is_for_sale_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_ForSaleData, price_category_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_ForSaleData, estatus_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_ForSaleData, price_category_floor_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_ForSaleData, price_is_pay_what_you_want_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_ForSaleData, discount_percentage_),
  2,
  0,
  1,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_PlaytimeStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_PlaytimeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_PlaytimeStats, playtime_seconds_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_PlaytimeStats, num_sessions_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Reaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Reaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Reaction, reactionid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Reaction, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, result_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, creator_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, creator_appid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, consumer_appid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, consumer_shortcutid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, filename_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, file_size_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, preview_file_size_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, file_url_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, preview_url_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, youtubevideoid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, url_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, hcontent_file_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, hcontent_preview_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, title_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, file_description_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, short_description_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, time_created_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, time_updated_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, visibility_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, flags_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, workshop_file_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, workshop_accepted_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, show_subscribe_all_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, num_comments_developer_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, num_comments_public_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, banned_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, ban_reason_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, banner_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, can_be_deleted_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, incompatible_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, app_name_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, file_type_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, can_subscribe_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, subscriptions_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, favorited_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, followers_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, lifetime_subscriptions_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, lifetime_favorited_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, lifetime_followers_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, lifetime_playtime_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, lifetime_playtime_sessions_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, views_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, image_width_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, image_height_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, image_url_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, spoiler_tag_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, shortcutid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, shortcutname_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, num_children_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, num_reports_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, previews_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, tags_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, children_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, kvtags_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, vote_data_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, playtime_stats_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, time_subscribed_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, for_sale_data_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, metadata_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, language_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, maybe_inappropriate_sex_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, maybe_inappropriate_violence_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, content_descriptorids_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, revision_change_number_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, revision_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, available_revisions_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, reactions_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, ban_text_check_result_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, search_score_),
  17,
  16,
  19,
  18,
  20,
  21,
  0,
  22,
  23,
  1,
  2,
  3,
  4,
  24,
  25,
  5,
  6,
  7,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  34,
  36,
  33,
  8,
  35,
  39,
  40,
  9,
  37,
  41,
  38,
  43,
  44,
  45,
  46,
  47,
  55,
  56,
  48,
  49,
  50,
  10,
  42,
  51,
  11,
  52,
  53,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  13,
  15,
  54,
  14,
  12,
  57,
  58,
  59,
  ~0u,
  60,
  61,
  ~0u,
  ~0u,
  62,
  63,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Response, publishedfiledetails_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Request_WorkshopItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Request_WorkshopItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Request_WorkshopItem, published_file_id_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Request_WorkshopItem, time_updated_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Request_WorkshopItem, desired_revision_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Request, last_time_updated_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Request, workshop_items_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo, published_file_id_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo, time_updated_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo, manifest_id_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo, flags_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Response, update_time_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Response, workshop_items_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemInfo_Response, private_items_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request_KVTag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request_KVTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request_KVTag, key_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request_KVTag, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request_TagGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request_TagGroup, tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, shortcutid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, page_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, numperpage_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, type_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, sortmethod_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, privacy_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, requiredtags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, excludedtags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, required_kv_tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, filetype_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, creator_appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, match_cloud_filename_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, cache_max_age_seconds_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, taggroups_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, excluded_content_descriptors_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, totalonly_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, ids_only_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, return_vote_data_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, return_tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, return_kv_tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, return_previews_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, return_children_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, return_short_description_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, return_for_sale_data_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, return_metadata_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, return_playtime_stats_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, strip_description_bbcode_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, return_reactions_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, startindex_override_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, desired_revision_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, return_apps_),
  3,
  4,
  5,
  27,
  28,
  0,
  1,
  6,
  ~0u,
  ~0u,
  ~0u,
  7,
  8,
  2,
  14,
  19,
  ~0u,
  ~0u,
  9,
  10,
  24,
  11,
  25,
  12,
  15,
  26,
  16,
  17,
  20,
  18,
  22,
  13,
  21,
  23,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response_App, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response_App, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response_App, name_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response_App, shortcutid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response_App, private__),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response, total_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response, startindex_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response, publishedfiledetails_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response, apps_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AreFilesInSubscriptionList_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AreFilesInSubscriptionList_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AreFilesInSubscriptionList_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AreFilesInSubscriptionList_Request, publishedfileids_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AreFilesInSubscriptionList_Request, listtype_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AreFilesInSubscriptionList_Request, filetype_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AreFilesInSubscriptionList_Request, workshopfiletype_),
  0,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AreFilesInSubscriptionList_Response_InList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AreFilesInSubscriptionList_Response_InList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AreFilesInSubscriptionList_Response_InList, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AreFilesInSubscriptionList_Response_InList, inlist_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AreFilesInSubscriptionList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AreFilesInSubscriptionList_Response, files_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, title_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, file_description_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, visibility_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, filename_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, preview_filename_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, spoiler_tag_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, image_width_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, image_height_),
  5,
  4,
  0,
  1,
  6,
  ~0u,
  2,
  3,
  8,
  9,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Delete_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Delete_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Delete_Request, publishedfileid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Delete_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistoryEntry_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistoryEntry_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistoryEntry_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistoryEntry_Request, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistoryEntry_Request, language_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistoryEntry_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistoryEntry_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistoryEntry_Response, change_description_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistoryEntry_Response, language_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Request, total_only_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Request, startindex_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Request, count_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Request, language_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Response_ChangeLog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Response_ChangeLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Response_ChangeLog, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Response_ChangeLog, change_description_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Response_ChangeLog, language_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Response, changes_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetChangeHistory_Response, total_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, matching_file_type_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, match_all_tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, excluded_tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, desired_queue_size_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, desired_revision_),
  0,
  1,
  ~0u,
  4,
  ~0u,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request_KVTag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request_KVTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request_KVTag, key_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request_KVTag, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request_TagGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request_TagGroup, tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request_DateRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request_DateRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request_DateRange, timestamp_start_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request_DateRange, timestamp_end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, query_type_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, page_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, cursor_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, numperpage_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, creator_appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, requiredtags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, excludedtags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, match_all_tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, required_flags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, omitted_flags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, search_text_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, filetype_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, child_publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, days_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, include_recent_votes_only_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, cache_max_age_seconds_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, required_kv_tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, taggroups_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, date_range_created_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, date_range_updated_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, excluded_content_descriptors_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, totalonly_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, ids_only_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, return_vote_data_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, return_tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, return_kv_tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, return_previews_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, return_children_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, return_short_description_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, return_for_sale_data_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, return_metadata_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, return_playtime_stats_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, return_details_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, strip_description_bbcode_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, desired_revision_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Request, return_reactions_),
  4,
  5,
  1,
  29,
  6,
  7,
  ~0u,
  ~0u,
  30,
  ~0u,
  ~0u,
  0,
  9,
  8,
  10,
  15,
  23,
  24,
  ~0u,
  ~0u,
  2,
  3,
  ~0u,
  16,
  17,
  18,
  11,
  12,
  13,
  14,
  19,
  20,
  21,
  25,
  22,
  27,
  26,
  28,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Response, total_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Response, publishedfiledetails_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_QueryFiles_Response, next_cursor_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AddAppRelationship_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AddAppRelationship_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AddAppRelationship_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AddAppRelationship_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AddAppRelationship_Request, relationship_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AddAppRelationship_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RemoveAppRelationship_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RemoveAppRelationship_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RemoveAppRelationship_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RemoveAppRelationship_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RemoveAppRelationship_Request, relationship_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RemoveAppRelationship_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationships_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationships_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationships_Request, publishedfileid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationships_Response_AppRelationship, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationships_Response_AppRelationship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationships_Response_AppRelationship, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationships_Response_AppRelationship, relationship_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationships_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationships_Response, app_relationships_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationshipsBatched_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationshipsBatched_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationshipsBatched_Request, publishedfileids_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationshipsBatched_Request, filter_relationship_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship, relationship_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship, result_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship, app_relationships_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationshipsBatched_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetAppRelationshipsBatched_Response, relationships_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_StartPlaytimeTracking_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_StartPlaytimeTracking_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_StartPlaytimeTracking_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_StartPlaytimeTracking_Request, publishedfileids_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_StartPlaytimeTracking_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_StopPlaytimeTracking_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_StopPlaytimeTracking_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_StopPlaytimeTracking_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_StopPlaytimeTracking_Request, publishedfileids_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_StopPlaytimeTracking_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request, appid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage, seconds_active_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_SetPlaytimeForControllerConfigs_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_SetPlaytimeForControllerConfigs_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_SetPlaytimeForControllerConfigs_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_SetPlaytimeForControllerConfigs_Request, controller_config_usage_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_SetPlaytimeForControllerConfigs_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AddChild_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AddChild_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AddChild_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AddChild_Request, child_publishedfileid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_AddChild_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RemoveChild_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RemoveChild_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RemoveChild_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RemoveChild_Request, child_publishedfileid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RemoveChild_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserVoteSummary_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserVoteSummary_Request, publishedfileids_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserVoteSummary_Response_VoteSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserVoteSummary_Response_VoteSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserVoteSummary_Response_VoteSummary, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserVoteSummary_Response_VoteSummary, vote_for_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserVoteSummary_Response_VoteSummary, vote_against_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserVoteSummary_Response_VoteSummary, reported_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserVoteSummary_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserVoteSummary_Response, summaries_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemChanges_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemChanges_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemChanges_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemChanges_Request, last_time_updated_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemChanges_Request, num_items_max_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo, published_file_id_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo, time_updated_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo, manifest_id_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemChanges_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemChanges_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemChanges_Response, update_time_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetItemChanges_Response, workshop_items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetContentDescriptors_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetContentDescriptors_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetContentDescriptors_Request, publishedfileid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor, descriptorid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor, accountid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor, moderator_set_),
  3,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetContentDescriptors_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetContentDescriptors_Response, content_descriptors_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_UpdateContentDescriptors_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_UpdateContentDescriptors_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_UpdateContentDescriptors_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_UpdateContentDescriptors_Request, descriptors_to_add_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_UpdateContentDescriptors_Request, descriptors_to_remove_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_UpdateContentDescriptors_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_UpdateContentDescriptors_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_UpdateContentDescriptors_Response, timestamp_updated_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileSubscribed_Notification_RevisionData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileSubscribed_Notification_RevisionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileSubscribed_Notification_RevisionData, revision_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileSubscribed_Notification_RevisionData, file_hcontent_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileSubscribed_Notification_RevisionData, rtime_updated_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileSubscribed_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileSubscribed_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileSubscribed_Notification, published_file_id_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileSubscribed_Notification, app_id_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileSubscribed_Notification, file_hcontent_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileSubscribed_Notification, file_size_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileSubscribed_Notification, rtime_subscribed_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileSubscribed_Notification, is_depot_content_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileSubscribed_Notification, rtime_updated_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileSubscribed_Notification, revisions_),
  0,
  2,
  1,
  3,
  4,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileUnsubscribed_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileUnsubscribed_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileUnsubscribed_Notification, published_file_id_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileUnsubscribed_Notification, app_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileDeleted_Client_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileDeleted_Client_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileDeleted_Client_Notification, published_file_id_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_FileDeleted_Client_Notification, app_id_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CPublishedFile_Vote_Request)},
  { 10, -1, -1, sizeof(::CPublishedFile_Vote_Response)},
  { 16, 26, -1, sizeof(::CPublishedFile_Subscribe_Request)},
  { 30, -1, -1, sizeof(::CPublishedFile_Subscribe_Response)},
  { 36, 46, -1, sizeof(::CPublishedFile_Unsubscribe_Request)},
  { 50, -1, -1, sizeof(::CPublishedFile_Unsubscribe_Response)},
  { 56, 63, -1, sizeof(::CPublishedFile_CanSubscribe_Request)},
  { 64, 71, -1, sizeof(::CPublishedFile_CanSubscribe_Response)},
  { 72, 82, -1, sizeof(::CPublishedFile_GetSubSectionData_Request)},
  { 86, 96, -1, sizeof(::PublishedFileSubSection)},
  { 100, -1, -1, sizeof(::CPublishedFile_GetSubSectionData_Response)},
  { 107, 129, -1, sizeof(::CPublishedFile_Publish_Request)},
  { 145, 153, -1, sizeof(::CPublishedFile_Publish_Response)},
  { 155, 176, -1, sizeof(::CPublishedFile_GetDetails_Request)},
  { 191, 200, -1, sizeof(::PublishedFileDetails_Tag)},
  { 203, 217, -1, sizeof(::PublishedFileDetails_Preview)},
  { 225, 234, -1, sizeof(::PublishedFileDetails_Child)},
  { 237, 245, -1, sizeof(::PublishedFileDetails_KVTag)},
  { 247, 256, -1, sizeof(::PublishedFileDetails_VoteData)},
  { 259, 271, -1, sizeof(::PublishedFileDetails_ForSaleData)},
  { 277, 285, -1, sizeof(::PublishedFileDetails_PlaytimeStats)},
  { 287, 295, -1, sizeof(::PublishedFileDetails_Reaction)},
  { 297, 374, -1, sizeof(::PublishedFileDetails)},
  { 445, -1, -1, sizeof(::CPublishedFile_GetDetails_Response)},
  { 452, 461, -1, sizeof(::CPublishedFile_GetItemInfo_Request_WorkshopItem)},
  { 464, 473, -1, sizeof(::CPublishedFile_GetItemInfo_Request)},
  { 476, 486, -1, sizeof(::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo)},
  { 490, 499, -1, sizeof(::CPublishedFile_GetItemInfo_Response)},
  { 502, 510, -1, sizeof(::CPublishedFile_GetUserFiles_Request_KVTag)},
  { 512, -1, -1, sizeof(::CPublishedFile_GetUserFiles_Request_TagGroup)},
  { 519, 559, -1, sizeof(::CPublishedFile_GetUserFiles_Request)},
  { 593, 603, -1, sizeof(::CPublishedFile_GetUserFiles_Response_App)},
  { 607, 617, -1, sizeof(::CPublishedFile_GetUserFiles_Response)},
  { 621, 632, -1, sizeof(::CPublishedFile_AreFilesInSubscriptionList_Request)},
  { 637, 645, -1, sizeof(::CPublishedFile_AreFilesInSubscriptionList_Response_InList)},
  { 647, -1, -1, sizeof(::CPublishedFile_AreFilesInSubscriptionList_Response)},
  { 654, 671, -1, sizeof(::CPublishedFile_Update_Request)},
  { 682, -1, -1, sizeof(::CPublishedFile_Update_Response)},
  { 688, 695, -1, sizeof(::CPublishedFile_Delete_Request)},
  { 696, -1, -1, sizeof(::CPublishedFile_Delete_Response)},
  { 702, 711, -1, sizeof(::CPublishedFile_GetChangeHistoryEntry_Request)},
  { 714, 722, -1, sizeof(::CPublishedFile_GetChangeHistoryEntry_Response)},
  { 724, 735, -1, sizeof(::CPublishedFile_GetChangeHistory_Request)},
  { 740, 749, -1, sizeof(::CPublishedFile_GetChangeHistory_Response_ChangeLog)},
  { 752, 760, -1, sizeof(::CPublishedFile_GetChangeHistory_Response)},
  { 762, 775, -1, sizeof(::CPublishedFile_RefreshVotingQueue_Request)},
  { 782, -1, -1, sizeof(::CPublishedFile_RefreshVotingQueue_Response)},
  { 788, 796, -1, sizeof(::CPublishedFile_QueryFiles_Request_KVTag)},
  { 798, -1, -1, sizeof(::CPublishedFile_QueryFiles_Request_TagGroup)},
  { 805, 813, -1, sizeof(::CPublishedFile_QueryFiles_Request_DateRange)},
  { 815, 859, -1, sizeof(::CPublishedFile_QueryFiles_Request)},
  { 897, 906, -1, sizeof(::CPublishedFile_QueryFiles_Response)},
  { 909, 918, -1, sizeof(::CPublishedFile_AddAppRelationship_Request)},
  { 921, -1, -1, sizeof(::CPublishedFile_AddAppRelationship_Response)},
  { 927, 936, -1, sizeof(::CPublishedFile_RemoveAppRelationship_Request)},
  { 939, -1, -1, sizeof(::CPublishedFile_RemoveAppRelationship_Response)},
  { 945, 952, -1, sizeof(::CPublishedFile_GetAppRelationships_Request)},
  { 953, 961, -1, sizeof(::CPublishedFile_GetAppRelationships_Response_AppRelationship)},
  { 963, -1, -1, sizeof(::CPublishedFile_GetAppRelationships_Response)},
  { 970, 978, -1, sizeof(::CPublishedFile_GetAppRelationshipsBatched_Request)},
  { 980, 988, -1, sizeof(::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship)},
  { 990, 999, -1, sizeof(::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship)},
  { 1002, -1, -1, sizeof(::CPublishedFile_GetAppRelationshipsBatched_Response)},
  { 1009, 1017, -1, sizeof(::CPublishedFile_StartPlaytimeTracking_Request)},
  { 1019, -1, -1, sizeof(::CPublishedFile_StartPlaytimeTracking_Response)},
  { 1025, 1033, -1, sizeof(::CPublishedFile_StopPlaytimeTracking_Request)},
  { 1035, -1, -1, sizeof(::CPublishedFile_StopPlaytimeTracking_Response)},
  { 1041, 1048, -1, sizeof(::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)},
  { 1049, -1, -1, sizeof(::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)},
  { 1055, 1063, -1, sizeof(::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage)},
  { 1065, 1073, -1, sizeof(::CPublishedFile_SetPlaytimeForControllerConfigs_Request)},
  { 1075, -1, -1, sizeof(::CPublishedFile_SetPlaytimeForControllerConfigs_Response)},
  { 1081, 1089, -1, sizeof(::CPublishedFile_AddChild_Request)},
  { 1091, -1, -1, sizeof(::CPublishedFile_AddChild_Response)},
  { 1097, 1105, -1, sizeof(::CPublishedFile_RemoveChild_Request)},
  { 1107, -1, -1, sizeof(::CPublishedFile_RemoveChild_Response)},
  { 1113, -1, -1, sizeof(::CPublishedFile_GetUserVoteSummary_Request)},
  { 1120, 1130, -1, sizeof(::CPublishedFile_GetUserVoteSummary_Response_VoteSummary)},
  { 1134, -1, -1, sizeof(::CPublishedFile_GetUserVoteSummary_Response)},
  { 1141, 1150, -1, sizeof(::CPublishedFile_GetItemChanges_Request)},
  { 1153, 1162, -1, sizeof(::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo)},
  { 1165, 1173, -1, sizeof(::CPublishedFile_GetItemChanges_Response)},
  { 1175, 1182, -1, sizeof(::CPublishedFile_GetContentDescriptors_Request)},
  { 1183, 1193, -1, sizeof(::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor)},
  { 1197, -1, -1, sizeof(::CPublishedFile_GetContentDescriptors_Response)},
  { 1204, 1213, -1, sizeof(::CPublishedFile_UpdateContentDescriptors_Request)},
  { 1216, 1223, -1, sizeof(::CPublishedFile_UpdateContentDescriptors_Response)},
  { 1224, 1233, -1, sizeof(::CPublishedFile_FileSubscribed_Notification_RevisionData)},
  { 1236, 1250, -1, sizeof(::CPublishedFile_FileSubscribed_Notification)},
  { 1258, 1266, -1, sizeof(::CPublishedFile_FileUnsubscribed_Notification)},
  { 1268, 1276, -1, sizeof(::CPublishedFile_FileDeleted_Client_Notification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Vote_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Vote_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Subscribe_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Subscribe_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Unsubscribe_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Unsubscribe_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_CanSubscribe_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_CanSubscribe_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetSubSectionData_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileSubSection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetSubSectionData_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Publish_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Publish_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetDetails_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileDetails_Tag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileDetails_Preview_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileDetails_Child_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileDetails_KVTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileDetails_VoteData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileDetails_ForSaleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileDetails_PlaytimeStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileDetails_Reaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetDetails_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetItemInfo_Request_WorkshopItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetItemInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetItemInfo_Response_WorkshopItemInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetItemInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetUserFiles_Request_KVTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetUserFiles_Request_TagGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetUserFiles_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetUserFiles_Response_App_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetUserFiles_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_AreFilesInSubscriptionList_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_AreFilesInSubscriptionList_Response_InList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_AreFilesInSubscriptionList_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Update_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Update_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Delete_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Delete_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetChangeHistoryEntry_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetChangeHistoryEntry_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetChangeHistory_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetChangeHistory_Response_ChangeLog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetChangeHistory_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_RefreshVotingQueue_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_RefreshVotingQueue_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_QueryFiles_Request_KVTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_QueryFiles_Request_TagGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_QueryFiles_Request_DateRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_QueryFiles_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_QueryFiles_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_AddAppRelationship_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_AddAppRelationship_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_RemoveAppRelationship_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_RemoveAppRelationship_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetAppRelationships_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetAppRelationships_Response_AppRelationship_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetAppRelationships_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetAppRelationshipsBatched_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetAppRelationshipsBatched_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_StartPlaytimeTracking_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_StartPlaytimeTracking_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_StopPlaytimeTracking_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_StopPlaytimeTracking_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_SetPlaytimeForControllerConfigs_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_SetPlaytimeForControllerConfigs_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_AddChild_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_AddChild_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_RemoveChild_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_RemoveChild_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetUserVoteSummary_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetUserVoteSummary_Response_VoteSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetUserVoteSummary_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetItemChanges_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetItemChanges_Response_WorkshopItemInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetItemChanges_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetContentDescriptors_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetContentDescriptors_Response_ContentDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetContentDescriptors_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_UpdateContentDescriptors_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_UpdateContentDescriptors_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_FileSubscribed_Notification_RevisionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_FileSubscribed_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_FileUnsubscribed_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_FileDeleted_Client_Notification_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fpublishedfile_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-steammessages_publishedfile.steamclien"
  "t.proto\032\030steammessages_base.proto\032,steam"
  "messages_unified_base.steamclient.proto\032"
  "\027enums_productinfo.proto\"G\n\033CPublishedFi"
  "le_Vote_Request\022\027\n\017publishedfileid\030\001 \001(\004"
  "\022\017\n\007vote_up\030\002 \001(\010\"\036\n\034CPublishedFile_Vote"
  "_Response\"t\n CPublishedFile_Subscribe_Re"
  "quest\022\027\n\017publishedfileid\030\001 \001(\004\022\021\n\tlist_t"
  "ype\030\002 \001(\r\022\r\n\005appid\030\003 \001(\005\022\025\n\rnotify_clien"
  "t\030\004 \001(\010\"#\n!CPublishedFile_Subscribe_Resp"
  "onse\"v\n\"CPublishedFile_Unsubscribe_Reque"
  "st\022\027\n\017publishedfileid\030\001 \001(\004\022\021\n\tlist_type"
  "\030\002 \001(\r\022\r\n\005appid\030\003 \001(\005\022\025\n\rnotify_client\030\004"
  " \001(\010\"%\n#CPublishedFile_Unsubscribe_Respo"
  "nse\">\n#CPublishedFile_CanSubscribe_Reque"
  "st\022\027\n\017publishedfileid\030\001 \001(\004\"=\n$CPublishe"
  "dFile_CanSubscribe_Response\022\025\n\rcan_subsc"
  "ribe\030\001 \001(\010\"\205\002\n(CPublishedFile_GetSubSect"
  "ionData_Request\022\027\n\017publishedfileid\030\001 \001(\004"
  "\022\035\n\025for_table_of_contents\030\002 \001(\010\022\032\n\022speci"
  "fic_sectionid\030\003 \001(\004\022\204\001\n\020desired_revision"
  "\030\004 \001(\0162\027.EPublishedFileRevision: k_EPubl"
  "ishedFileRevision_DefaultB/\202\265\030+Return th"
  "e data for the specified revision.\"i\n\027Pu"
  "blishedFileSubSection\022\021\n\tsectionid\030\001 \001(\004"
  "\022\r\n\005title\030\002 \001(\t\022\030\n\020description_text\030\003 \001("
  "\t\022\022\n\nsort_order\030\004 \001(\r\"[\n)CPublishedFile_"
  "GetSubSectionData_Response\022.\n\014sub_sectio"
  "ns\030\001 \003(\0132\030.PublishedFileSubSection\"\314\n\n\036C"
  "PublishedFile_Publish_Request\022<\n\005appid\030\001"
  " \001(\rB-\202\265\030)App Id this file is being publ"
  "ished FROM.\022C\n\016consumer_appid\030\002 \001(\rB+\202\265\030"
  "\'App Id this file is being published TO."
  "\022K\n\rcloudfilename\030\003 \001(\tB4\202\265\0300Name of the"
  " file to publish in the user\'s cloud.\022[\n"
  "\025preview_cloudfilename\030\004 \001(\tB<\202\265\0308Name o"
  "f the file to use as the published file\'"
  "s preview.\0225\n\005title\030\005 \001(\tB&\202\265\030\"Text titl"
  "e for the published file.\022F\n\020file_descri"
  "ption\030\006 \001(\tB,\202\265\030(Text description for th"
  "e published file.\022L\n\tfile_type\030\007 \001(\rB9\202\265"
  "\0305(EWorkshopFileType) Type of Workshop f"
  "ile to publish.\022I\n\026consumer_shortcut_nam"
  "e\030\010 \001(\tB)\202\265\030%Shortcut name for the publi"
  "shed file.\022I\n\020youtube_username\030\t \001(\tB/\202\265"
  "\030+(Optional) User\'s YouTube account user"
  "name.\022\\\n\017youtube_videoid\030\n \001(\tBC\202\265\030\?(Opt"
  "ional) Video Id of a YouTube video for t"
  "his published file.\022\201\001\n\nvisibility\030\013 \001(\r"
  "Bm\202\265\030i(ERemoteStoragePublishedFileVisibi"
  "lity) Visibility of the published file ("
  "private, friends, public, etc.)\022k\n\014redir"
  "ect_uri\030\014 \001(\tBU\202\265\030Q(Optional) If supplie"
  "d, the resulting published file\'s Id is "
  "appended to the URI.\022D\n\004tags\030\r \003(\tB6\202\265\0302"
  "Array of text tags to apply to the publi"
  "shed file.\022Y\n\017collection_type\030\016 \001(\tB@\202\265\030"
  "<(Optional) Type of collection the publi"
  "shed file represents.\022M\n\tgame_type\030\017 \001(\t"
  "B:\202\265\0306(Optional) Type of game the publis"
  "hed file represents.\022[\n\003url\030\020 \001(\tBN\202\265\030J("
  "Optional) If this represents a game, thi"
  "s is the URL to that game\'s page.\"P\n\037CPu"
  "blishedFile_Publish_Response\022\027\n\017publishe"
  "dfileid\030\001 \001(\004\022\024\n\014redirect_uri\030\002 \001(\t\"\215\n\n!"
  "CPublishedFile_GetDetails_Request\022P\n\020pub"
  "lishedfileids\030\001 \003(\006B6\202\265\0302Set of publishe"
  "d file Ids to retrieve details for.\022Q\n\013i"
  "ncludetags\030\002 \001(\010B<\202\265\0308If true, return ta"
  "g information in the returned details.\022c"
  "\n\031includeadditionalpreviews\030\003 \001(\010B@\202\265\030<I"
  "f true, return preview information in th"
  "e returned details.\022N\n\017includechildren\030\004"
  " \001(\010B5\202\265\0301If true, return children in th"
  "e returned details.\022R\n\rincludekvtags\030\005 \001"
  "(\010B;\202\265\0307If true, return key value tags i"
  "n the returned details.\022L\n\014includevotes\030"
  "\006 \001(\010B6\202\265\0302If true, return vote data in "
  "the returned details.\022c\n\021short_descripti"
  "on\030\010 \001(\010BH\202\265\030DIf true, return a short de"
  "scription instead of the full descriptio"
  "n.\022L\n\022includeforsaledata\030\n \001(\010B0\202\265\030,If t"
  "rue, return pricing data, if applicable."
  "\022B\n\017includemetadata\030\013 \001(\010B)\202\265\030%If true, "
  "populate the metadata field.\022U\n\010language"
  "\030\014 \001(\005:\0010B@\202\265\030<Specifies the localized t"
  "ext to return. Defaults to English.\022g\n\025r"
  "eturn_playtime_stats\030\r \001(\rBH\202\265\030DReturn p"
  "laytime stats for the specified number o"
  "f days before today.\022\r\n\005appid\030\016 \001(\r\022F\n\030s"
  "trip_description_bbcode\030\017 \001(\010B$\202\265\030 Strip"
  "s BBCode from descriptions.\022\204\001\n\020desired_"
  "revision\030\020 \001(\0162\027.EPublishedFileRevision:"
  " k_EPublishedFileRevision_DefaultB/\202\265\030+R"
  "eturn the data for the specified revisio"
  "n.\022W\n\020includereactions\030\021 \001(\010:\005falseB6\202\265\030"
  "2If true, then reactions to items will b"
  "e returned.\"\334\031\n\024PublishedFileDetails\022\016\n\006"
  "result\030\001 \001(\r\022\027\n\017publishedfileid\030\002 \001(\004\022\017\n"
  "\007creator\030\003 \001(\006\022\025\n\rcreator_appid\030\004 \001(\r\022\026\n"
  "\016consumer_appid\030\005 \001(\r\022\033\n\023consumer_shortc"
  "utid\030\006 \001(\r\022\020\n\010filename\030\007 \001(\t\022\021\n\tfile_siz"
  "e\030\010 \001(\004\022\031\n\021preview_file_size\030\t \001(\004\022\020\n\010fi"
  "le_url\030\n \001(\t\022\023\n\013preview_url\030\013 \001(\t\022\026\n\016you"
  "tubevideoid\030\014 \001(\t\022\013\n\003url\030\r \001(\t\022\025\n\rhconte"
  "nt_file\030\016 \001(\006\022\030\n\020hcontent_preview\030\017 \001(\006\022"
  "\r\n\005title\030\020 \001(\t\022\030\n\020file_description\030\021 \001(\t"
  "\022\031\n\021short_description\030\022 \001(\t\022\024\n\014time_crea"
  "ted\030\023 \001(\r\022\024\n\014time_updated\030\024 \001(\r\022\022\n\nvisib"
  "ility\030\025 \001(\r\022\r\n\005flags\030\026 \001(\r\022\025\n\rworkshop_f"
  "ile\030\027 \001(\010\022\031\n\021workshop_accepted\030\030 \001(\010\022\032\n\022"
  "show_subscribe_all\030\031 \001(\010\022\036\n\026num_comments"
  "_developer\030\032 \001(\005\022\033\n\023num_comments_public\030"
  "\033 \001(\005\022\016\n\006banned\030\034 \001(\010\022\022\n\nban_reason\030\035 \001("
  "\t\022\016\n\006banner\030\036 \001(\006\022\026\n\016can_be_deleted\030\037 \001("
  "\010\022\024\n\014incompatible\030  \001(\010\022\020\n\010app_name\030! \001("
  "\t\022\021\n\tfile_type\030\" \001(\r\022\025\n\rcan_subscribe\030# "
  "\001(\010\022\025\n\rsubscriptions\030$ \001(\r\022\021\n\tfavorited\030"
  "% \001(\r\022\021\n\tfollowers\030& \001(\r\022\036\n\026lifetime_sub"
  "scriptions\030\' \001(\r\022\032\n\022lifetime_favorited\030("
  " \001(\r\022\032\n\022lifetime_followers\030) \001(\r\022\031\n\021life"
  "time_playtime\030> \001(\004\022\"\n\032lifetime_playtime"
  "_sessions\030\? \001(\004\022\r\n\005views\030* \001(\r\022\023\n\013image_"
  "width\030+ \001(\r\022\024\n\014image_height\030, \001(\r\022\021\n\tima"
  "ge_url\030- \001(\t\022\023\n\013spoiler_tag\030. \001(\010\022\022\n\nsho"
  "rtcutid\030/ \001(\r\022\024\n\014shortcutname\0300 \001(\t\022\024\n\014n"
  "um_children\0301 \001(\r\022\023\n\013num_reports\0302 \001(\r\022/"
  "\n\010previews\0303 \003(\0132\035.PublishedFileDetails."
  "Preview\022\'\n\004tags\0304 \003(\0132\031.PublishedFileDet"
  "ails.Tag\022-\n\010children\0305 \003(\0132\033.PublishedFi"
  "leDetails.Child\022+\n\006kvtags\0306 \003(\0132\033.Publis"
  "hedFileDetails.KVTag\0221\n\tvote_data\0307 \001(\0132"
  "\036.PublishedFileDetails.VoteData\022;\n\016playt"
  "ime_stats\030@ \001(\0132#.PublishedFileDetails.P"
  "laytimeStats\022r\n\017time_subscribed\0308 \001(\rBY\202"
  "\265\030UOnly valid in PublishedFile.GetUserFi"
  "les and not normal PublishedFile.GetDeta"
  "il calls\022a\n\rfor_sale_data\0309 \001(\0132!.Publis"
  "hedFileDetails.ForSaleDataB\'\202\265\030#Pricing "
  "information, if applicable.\0227\n\010metadata\030"
  ": \001(\tB%\202\265\030!Metadata associated with the "
  "item\022C\n\010language\030= \001(\005:\0010B.\202\265\030*The langu"
  "age of the title and description.\022\037\n\027may"
  "be_inappropriate_sex\030A \001(\010\022$\n\034maybe_inap"
  "propriate_violence\030B \001(\010\0224\n\025content_desc"
  "riptorids\030H \003(\0162\025.EContentDescriptorID\022Q"
  "\n\026revision_change_number\030C \001(\004B1\202\265\030-The "
  "change number for the specified revision"
  ".\022\334\001\n\010revision\030D \001(\0162\027.EPublishedFileRev"
  "ision: k_EPublishedFileRevision_DefaultB"
  "\216\001\202\265\030\211\001The revision of the data returned"
  ", usually k_EPublishedFileRevision_Lates"
  "t, but can be another revision/snapshot "
  "depending on the caller.\022M\n\023available_re"
  "visions\030E \003(\0162\027.EPublishedFileRevisionB\027"
  "\202\265\030\023Available revisions\022M\n\treactions\030F \003"
  "(\0132\036.PublishedFileDetails.ReactionB\032\202\265\030\026"
  "Reactions to this item\022[\n\025ban_text_check"
  "_result\030G \001(\0162\027.EBanContentCheckResult:#"
  "k_EBanContentCheckResult_NotScanned\0222\n\014s"
  "earch_score\030I \001(\002B\034\202\265\030\030Search score, adm"
  "in only\032;\n\003Tag\022\013\n\003tag\030\001 \001(\t\022\021\n\tadminonly"
  "\030\002 \001(\010\022\024\n\014display_name\030\003 \001(\t\032\246\001\n\007Preview"
  "\022\021\n\tpreviewid\030\001 \001(\004\022\021\n\tsortorder\030\002 \001(\r\022\013"
  "\n\003url\030\003 \001(\t\022\014\n\004size\030\004 \001(\r\022\020\n\010filename\030\005 "
  "\001(\t\022\026\n\016youtubevideoid\030\006 \001(\t\022\024\n\014preview_t"
  "ype\030\007 \001(\r\022\032\n\022external_reference\030\010 \001(\t\032F\n"
  "\005Child\022\027\n\017publishedfileid\030\001 \001(\004\022\021\n\tsorto"
  "rder\030\002 \001(\r\022\021\n\tfile_type\030\003 \001(\r\032#\n\005KVTag\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\032\?\n\010VoteData\022\r"
  "\n\005score\030\001 \001(\002\022\020\n\010votes_up\030\002 \001(\r\022\022\n\nvotes"
  "_down\030\003 \001(\r\032\334\001\n\013ForSaleData\022\023\n\013is_for_sa"
  "le\030\001 \001(\010\022\026\n\016price_category\030\002 \001(\r\022A\n\007esta"
  "tus\030\003 \001(\0162\034.EPublishedFileForSaleStatus:"
  "\022k_PFFSS_NotForSale\022\034\n\024price_category_fl"
  "oor\030\004 \001(\r\022\"\n\032price_is_pay_what_you_want\030"
  "\005 \001(\010\022\033\n\023discount_percentage\030\006 \001(\r\032\?\n\rPl"
  "aytimeStats\022\030\n\020playtime_seconds\030\001 \001(\004\022\024\n"
  "\014num_sessions\030\002 \001(\004\032-\n\010Reaction\022\022\n\nreact"
  "ionid\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\"Y\n\"CPublished"
  "File_GetDetails_Response\0223\n\024publishedfil"
  "edetails\030\001 \003(\0132\025.PublishedFileDetails\"\341\002"
  "\n\"CPublishedFile_GetItemInfo_Request\022\r\n\005"
  "appid\030\001 \001(\r\022\031\n\021last_time_updated\030\002 \001(\r\022H"
  "\n\016workshop_items\030\003 \003(\01320.CPublishedFile_"
  "GetItemInfo_Request.WorkshopItem\032\306\001\n\014Wor"
  "kshopItem\022\031\n\021published_file_id\030\001 \001(\006\022\024\n\014"
  "time_updated\030\002 \001(\r\022\204\001\n\020desired_revision\030"
  "\003 \001(\0162\027.EPublishedFileRevision: k_EPubli"
  "shedFileRevision_DefaultB/\202\265\030+Return the"
  " data for the specified revision.\"\211\002\n#CP"
  "ublishedFile_GetItemInfo_Response\022\023\n\013upd"
  "ate_time\030\001 \001(\r\022M\n\016workshop_items\030\002 \003(\01325"
  ".CPublishedFile_GetItemInfo_Response.Wor"
  "kshopItemInfo\022\025\n\rprivate_items\030\003 \003(\006\032g\n\020"
  "WorkshopItemInfo\022\031\n\021published_file_id\030\001 "
  "\001(\006\022\024\n\014time_updated\030\002 \001(\r\022\023\n\013manifest_id"
  "\030\003 \001(\006\022\r\n\005flags\030\004 \001(\r\"\246\030\n#CPublishedFile"
  "_GetUserFiles_Request\022J\n\007steamid\030\001 \001(\006B9"
  "\202\265\0305Steam ID of the user whose files are"
  " being requested.\022F\n\005appid\030\002 \001(\rB7\202\265\0303Ap"
  "p Id of the app that the files were publ"
  "ished to.\022P\n\nshortcutid\030\003 \001(\rB<\202\265\0308(Opti"
  "onal) Shortcut Id to retrieve published "
  "files from.\022:\n\004page\030\004 \001(\r:\0011B)\202\265\030%(Optio"
  "nal) Starting page for results.\022P\n\nnumpe"
  "rpage\030\005 \001(\r:\0011B9\202\265\0305(Optional) The numbe"
  "r of results, per page to return.\022C\n\004typ"
  "e\030\006 \001(\t:\007myfilesB,\202\265\030((Optional) Type of"
  " files to be returned.\022Y\n\nsortmethod\030\007 \001"
  "(\t:\013lastupdatedB8\202\265\0304(Optional) Sorting "
  "method to use on returned values.\022;\n\007pri"
  "vacy\030\t \001(\rB*\202\265\030&(optional) Filter by pri"
  "vacy settings.\022h\n\014requiredtags\030\n \003(\tBR\202\265"
  "\030N(Optional) Tags that must be present o"
  "n a published file to satisfy the query."
  "\022l\n\014excludedtags\030\013 \003(\tBV\202\265\030R(Optional) T"
  "ags that must NOT be present on a publis"
  "hed file to satisfy the query.\022n\n\020requir"
  "ed_kv_tags\030\036 \003(\0132*.CPublishedFile_GetUse"
  "rFiles_Request.KVTagB(\202\265\030$Required key-v"
  "alue tags to match on.\022=\n\010filetype\030\016 \001(\r"
  "B+\202\265\030\'(Optional) File type to match file"
  "s to.\022a\n\rcreator_appid\030\017 \001(\rBJ\202\265\030FApp Id"
  " of the app that published the files, on"
  "ly matched if specified.\022I\n\024match_cloud_"
  "filename\030\020 \001(\tB+\202\265\030\'Match this cloud fil"
  "ename if specified.\022j\n\025cache_max_age_sec"
  "onds\030\033 \001(\r:\0010BH\202\265\030DAllow stale data to b"
  "e returned for the specified number of s"
  "econds.\022U\n\010language\030\035 \001(\005:\0010B@\202\265\030<Specif"
  "ies the localized text to return. Defaul"
  "ts to English.\022\243\001\n\ttaggroups\030\" \003(\0132-.CPu"
  "blishedFile_GetUserFiles_Request.TagGrou"
  "pBa\202\265\030](Optional) At least one of the ta"
  "gs must be present on a published file t"
  "o satisfy the query.\022\201\001\n\034excluded_conten"
  "t_descriptors\030% \003(\0162\025.EContentDescriptor"
  "IDBD\202\265\030@(Optional) Filter out items that"
  " have these content descriptors.\022i\n\ttota"
  "lonly\030\021 \001(\010BV\202\265\030R(Optional) If true, onl"
  "y return the total number of files that "
  "satisfy this query.\022n\n\010ids_only\030\022 \001(\010B\\\202"
  "\265\030X(Optional) If true, only return the p"
  "ublished file ids of files that satisfy "
  "this query.\0224\n\020return_vote_data\030\023 \001(\010:\004t"
  "rueB\024\202\265\030\020Return vote data\0228\n\013return_tags"
  "\030\024 \001(\010B#\202\265\030\037Return tags in the file deta"
  "ils\022K\n\016return_kv_tags\030\025 \001(\010:\004trueB-\202\265\030)R"
  "eturn key-value tags in the file details"
  "\022W\n\017return_previews\030\026 \001(\010B>\202\265\030:Return pr"
  "eview image and video details in the fil"
  "e details\022F\n\017return_children\030\027 \001(\010B-\202\265\030)"
  "Return child item ids in the file detail"
  "s\022l\n\030return_short_description\030\030 \001(\010:\004tru"
  "eBD\202\265\030@Populate the short_description fi"
  "eld instead of file_description\022K\n\024retur"
  "n_for_sale_data\030\032 \001(\010B-\202\265\030)Return pricin"
  "g information, if applicable\022\?\n\017return_m"
  "etadata\030\034 \001(\010:\005falseB\037\202\265\030\033Populate the m"
  "etadata field\022g\n\025return_playtime_stats\030\037"
  " \001(\rBH\202\265\030DReturn playtime stats for the "
  "specified number of days before today.\022F"
  "\n\030strip_description_bbcode\030  \001(\010B$\202\265\030 St"
  "rips BBCode from descriptions.\022W\n\020return"
  "_reactions\030# \001(\010:\005falseB6\202\265\0302If true, th"
  "en reactions to items will be returned.\022"
  "E\n\023startindex_override\030\031 \001(\rB(\202\265\030$Backwa"
  "rds compatible for the client.\022\204\001\n\020desir"
  "ed_revision\030! \001(\0162\027.EPublishedFileRevisi"
  "on: k_EPublishedFileRevision_DefaultB/\202\265"
  "\030+Return the data for the specified revi"
  "sion.\022@\n\013return_apps\030$ \001(\010B+\202\265\030\'Return l"
  "ist of apps the items belong to\032#\n\005KVTag"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\032\030\n\010TagGroup"
  "\022\014\n\004tags\030\001 \003(\t\"\200\002\n$CPublishedFile_GetUse"
  "rFiles_Response\022\r\n\005total\030\001 \001(\r\022\022\n\nstarti"
  "ndex\030\002 \001(\r\0223\n\024publishedfiledetails\030\003 \003(\013"
  "2\025.PublishedFileDetails\0227\n\004apps\030\004 \003(\0132)."
  "CPublishedFile_GetUserFiles_Response.App"
  "\032G\n\003App\022\r\n\005appid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\022\n\n"
  "shortcutid\030\003 \001(\r\022\017\n\007private\030\004 \001(\010\"\232\002\n1CP"
  "ublishedFile_AreFilesInSubscriptionList_"
  "Request\022\r\n\005appid\030\001 \001(\r\022\030\n\020publishedfilei"
  "ds\030\002 \003(\006\022&\n\010listtype\030\003 \001(\rB\024\202\265\030\020See EUCM"
  "ListType\022<\n\010filetype\030\004 \001(\rB*\202\265\030&See EPub"
  "lishedFileInfoMatchingFileType\022V\n\020worksh"
  "opfiletype\030\005 \001(\rB<\202\265\0308See EWorkshopFileT"
  "ype.  If specified, overrides filetype\"\262"
  "\001\n2CPublishedFile_AreFilesInSubscription"
  "List_Response\022I\n\005files\030\001 \003(\0132:.CPublishe"
  "dFile_AreFilesInSubscriptionList_Respons"
  "e.InList\0321\n\006InList\022\027\n\017publishedfileid\030\001 "
  "\001(\006\022\016\n\006inlist\030\002 \001(\010\"\377\006\n\035CPublishedFile_U"
  "pdate_Request\0229\n\005appid\030\001 \001(\rB*\202\265\030&App Id"
  " this published file belongs to.\022O\n\017publ"
  "ishedfileid\030\002 \001(\006B6\202\265\0302Published file id"
  " of the file we\'d like to update.\022:\n\005tit"
  "le\030\003 \001(\tB+\202\265\030\'(Optional) Title of the pu"
  "blished file.\022K\n\020file_description\030\004 \001(\tB"
  "1\202\265\030-(Optional) Description of the publi"
  "shed file.\022D\n\nvisibility\030\005 \001(\rB0\202\265\030,(Opt"
  "ional) Visibility of the published file."
  "\022@\n\004tags\030\006 \003(\tB2\202\265\030.(Optional) Set of ta"
  "gs for the published file.\022A\n\010filename\030\007"
  " \001(\tB/\202\265\030+(Optional) Filename for the pu"
  "blished file.\022Q\n\020preview_filename\030\010 \001(\tB"
  "7\202\265\0303(Optional) Preview filename for the"
  " published file.\022i\n\013spoiler_tag\030\n \001(\010BT\202"
  "\265\030P(Optional) Whether this published fil"
  "e should have a spoiler tag attached to "
  "it.\022^\n\013image_width\030\017 \001(\rBI\202\265\030E(Optional)"
  " If this is an image file, you can speci"
  "fy the image width.\022`\n\014image_height\030\020 \001("
  "\rBJ\202\265\030F(Optional) If this is an image fi"
  "le, you can specify the image height.\" \n"
  "\036CPublishedFile_Update_Response\"p\n\035CPubl"
  "ishedFile_Delete_Request\022O\n\017publishedfil"
  "eid\030\001 \001(\006B6\202\265\0302Published file id of the "
  "file we\'d like to delete.\" \n\036CPublishedF"
  "ile_Delete_Response\"\270\001\n,CPublishedFile_G"
  "etChangeHistoryEntry_Request\022c\n\017publishe"
  "dfileid\030\001 \001(\006BJ\202\265\030FPublished file id of "
  "the file we\'d like to get the change his"
  "tory for.\022\021\n\ttimestamp\030\002 \001(\r\022\020\n\010language"
  "\030\003 \001(\005\"]\n-CPublishedFile_GetChangeHistor"
  "yEntry_Response\022\032\n\022change_description\030\001 "
  "\001(\t\022\020\n\010language\030\002 \001(\005\"\236\002\n\'CPublishedFile"
  "_GetChangeHistory_Request\022c\n\017publishedfi"
  "leid\030\001 \001(\006BJ\202\265\030FPublished file id of the"
  " file we\'d like to get the change histor"
  "y for.\022@\n\ntotal_only\030\002 \001(\010B,\202\265\030(Return t"
  "he total number of changes only.\022\022\n\nstar"
  "tindex\030\003 \001(\r\022\r\n\005count\030\004 \001(\r\022)\n\010language\030"
  "\005 \001(\005:\0010B\024\202\265\030\020Desired language\"\315\001\n(CPubl"
  "ishedFile_GetChangeHistory_Response\022D\n\007c"
  "hanges\030\001 \003(\01323.CPublishedFile_GetChangeH"
  "istory_Response.ChangeLog\022\r\n\005total\030\002 \001(\r"
  "\032L\n\tChangeLog\022\021\n\ttimestamp\030\001 \001(\r\022\032\n\022chan"
  "ge_description\030\002 \001(\t\022\020\n\010language\030\003 \001(\005\"\321"
  "\005\n)CPublishedFile_RefreshVotingQueue_Req"
  "uest\022\r\n\005appid\030\001 \001(\r\022B\n\022matching_file_typ"
  "e\030\002 \001(\rB&\202\265\030\"EPublishedFileInfoMatchingF"
  "ileType\022l\n\004tags\030\003 \003(\tB^\202\265\030ZInclude files"
  " that have all the tags or any of the ta"
  "gs if match_all_tags is set to false.\022\225\001"
  "\n\016match_all_tags\030\004 \001(\010:\004trueBw\202\265\030sIf tru"
  "e, then files must have all the tags spe"
  "cified.  If false, then must have at lea"
  "st one of the tags specified.\022I\n\rexclude"
  "d_tags\030\005 \003(\tB2\202\265\030.Exclude any files that"
  " have any of these tags.\022j\n\022desired_queu"
  "e_size\030\006 \001(\rBN\202\265\030JDesired number of item"
  "s in the voting queue.  May be clamped b"
  "y the server\022\223\001\n\020desired_revision\030\010 \001(\0162"
  "\027.EPublishedFileRevision: k_EPublishedFi"
  "leRevision_DefaultB>\202\265\030:Filter to items "
  "that have data for the specified revisio"
  "n.\",\n*CPublishedFile_RefreshVotingQueue_"
  "Response\"\237 \n!CPublishedFile_QueryFiles_R"
  "equest\022L\n\nquery_type\030\001 \001(\rB8\202\265\0304enumerat"
  "ion EPublishedFileQueryType in clientenu"
  "ms.h\022\036\n\004page\030\002 \001(\rB\020\202\265\030\014Current page\022\350\001\n"
  "\006cursor\030\' \001(\tB\327\001\202\265\030\322\001Cursor to paginate "
  "through the results (set to \'*\' for the "
  "first request).  Prefer this over using "
  "the page parameter, as it will allow you"
  " to do deep pagination.  When used, the "
  "page parameter will be ignored.\022P\n\nnumpe"
  "rpage\030\003 \001(\r:\0011B9\202\265\0305(Optional) The numbe"
  "r of results, per page to return.\0225\n\rcre"
  "ator_appid\030\004 \001(\rB\036\202\265\030\032App that created t"
  "he files\022.\n\005appid\030\005 \001(\rB\037\202\265\030\033App that co"
  "nsumes the files\022N\n\014requiredtags\030\006 \003(\tB8"
  "\202\265\0304Tags to match on. See match_all_tags"
  " parameter below\022l\n\014excludedtags\030\007 \003(\tBV"
  "\202\265\030R(Optional) Tags that must NOT be pre"
  "sent on a published file to satisfy the "
  "query.\022\212\001\n\016match_all_tags\030\010 \001(\010:\004trueBl\202"
  "\265\030hIf true, then items must have all the"
  " tags specified, otherwise they must hav"
  "e at least one of the tags.\022Q\n\016required_"
  "flags\030\t \003(\tB9\202\265\0305Required flags that mus"
  "t be set on any returned items\022K\n\romitte"
  "d_flags\030\n \003(\tB4\202\265\0300Flags that must not b"
  "e set on any returned items\022I\n\013search_te"
  "xt\030\013 \001(\tB4\202\265\0300Text to match in the item\'"
  "s title or description\0228\n\010filetype\030\014 \001(\r"
  "B&\202\265\030\"EPublishedFileInfoMatchingFileType"
  "\022P\n\025child_publishedfileid\030\r \001(\006B1\202\265\030-Fin"
  "d all items that reference the given ite"
  "m.\022\202\001\n\004days\030\016 \001(\rBt\202\265\030pIf query_type is "
  "k_PublishedFileQueryType_RankedByTrend, "
  "then this is the number of days to get v"
  "otes for [1,7].\022\260\001\n\031include_recent_votes"
  "_only\030\017 \001(\010B\214\001\202\265\030\207\001If query_type is k_Pu"
  "blishedFileQueryType_RankedByTrend, then"
  " limit result set just to items that hav"
  "e votes within the day range given\022j\n\025ca"
  "che_max_age_seconds\030\037 \001(\r:\0010BH\202\265\030DAllow "
  "stale data to be returned for the specif"
  "ied number of seconds.\022`\n\010language\030! \001(\005"
  ":\0010BK\202\265\030GLanguage to search in and also "
  "what gets returned. Defaults to English."
  "\022l\n\020required_kv_tags\030\" \003(\0132(.CPublishedF"
  "ile_QueryFiles_Request.KVTagB(\202\265\030$Requir"
  "ed key-value tags to match on.\022\241\001\n\ttaggr"
  "oups\030* \003(\0132+.CPublishedFile_QueryFiles_R"
  "equest.TagGroupBa\202\265\030](Optional) At least"
  " one of the tags must be present on a pu"
  "blished file to satisfy the query.\022\203\001\n\022d"
  "ate_range_created\030, \001(\0132,.CPublishedFile"
  "_QueryFiles_Request.DateRangeB9\202\265\0305(Opti"
  "onal) Filter to items created within thi"
  "s range.\022\203\001\n\022date_range_updated\030- \001(\0132,."
  "CPublishedFile_QueryFiles_Request.DateRa"
  "ngeB9\202\265\0305(Optional) Filter to items upda"
  "ted within this range.\022\201\001\n\034excluded_cont"
  "ent_descriptors\030. \003(\0162\025.EContentDescript"
  "orIDBD\202\265\030@(Optional) Filter out items th"
  "at have these content descriptors.\022i\n\tto"
  "talonly\030\020 \001(\010BV\202\265\030R(Optional) If true, o"
  "nly return the total number of files tha"
  "t satisfy this query.\022n\n\010ids_only\030# \001(\010B"
  "\\\202\265\030X(Optional) If true, only return the"
  " published file ids of files that satisf"
  "y this query.\022.\n\020return_vote_data\030\021 \001(\010B"
  "\024\202\265\030\020Return vote data\0228\n\013return_tags\030\022 \001"
  "(\010B#\202\265\030\037Return tags in the file details\022"
  "E\n\016return_kv_tags\030\023 \001(\010B-\202\265\030)Return key-"
  "value tags in the file details\022W\n\017return"
  "_previews\030\024 \001(\010B>\202\265\030:Return preview imag"
  "e and video details in the file details\022"
  "F\n\017return_children\030\025 \001(\010B-\202\265\030)Return chi"
  "ld item ids in the file details\022f\n\030retur"
  "n_short_description\030\026 \001(\010BD\202\265\030@Populate "
  "the short_description field instead of f"
  "ile_description\022K\n\024return_for_sale_data\030"
  "\036 \001(\010B-\202\265\030)Return pricing information, i"
  "f applicable\0229\n\017return_metadata\030  \001(\010:\005f"
  "alseB\031\202\265\030\025Populate the metadata\022g\n\025retur"
  "n_playtime_stats\030$ \001(\rBH\202\265\030DReturn playt"
  "ime stats for the specified number of da"
  "ys before today.\022\267\001\n\016return_details\030% \001("
  "\010B\236\001\202\265\030\231\001By default, if none of the othe"
  "r \'return_*\' fields are set, only some v"
  "oting details are returned. Set this to "
  "true to return the default set of detail"
  "s.\022F\n\030strip_description_bbcode\030& \001(\010B$\202\265"
  "\030 Strips BBCode from descriptions.\022\204\001\n\020d"
  "esired_revision\030( \001(\0162\027.EPublishedFileRe"
  "vision: k_EPublishedFileRevision_Default"
  "B/\202\265\030+Return the data for the specified "
  "revision.\022W\n\020return_reactions\030+ \001(\010:\005fal"
  "seB6\202\265\0302If true, then reactions to items"
  " will be returned.\032#\n\005KVTag\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t\032\030\n\010TagGroup\022\014\n\004tags\030\001 \003("
  "\t\032\326\001\n\tDateRange\022d\n\017timestamp_start\030\001 \001(\r"
  "BK\202\265\030G(Optional) Include items with the "
  "relevant date field after this value.\022c\n"
  "\rtimestamp_end\030\002 \001(\rBL\202\265\030H(Optional) Inc"
  "lude items with the relevant date field "
  "before this value.\"\205\003\n\"CPublishedFile_Qu"
  "eryFiles_Response\022T\n\005total\030\001 \001(\rBE\202\265\030ANu"
  "mber of matches found, not necessarily n"
  "umber of items returned\022\215\001\n\024publishedfil"
  "edetails\030\002 \003(\0132\025.PublishedFileDetailsBX\202"
  "\265\030TEach file details will be populated, "
  "depending on what return values were req"
  "uested.\022y\n\013next_cursor\030\003 \001(\tBd\202\265\030`If a p"
  "aging cursor was used, then this will be"
  " the next cursor to use for paging throu"
  "gh results\"i\n)CPublishedFile_AddAppRelat"
  "ionship_Request\022\027\n\017publishedfileid\030\001 \001(\004"
  "\022\r\n\005appid\030\002 \001(\r\022\024\n\014relationship\030\003 \001(\r\",\n"
  "*CPublishedFile_AddAppRelationship_Respo"
  "nse\"l\n,CPublishedFile_RemoveAppRelations"
  "hip_Request\022\027\n\017publishedfileid\030\001 \001(\004\022\r\n\005"
  "appid\030\002 \001(\r\022\024\n\014relationship\030\003 \001(\r\"/\n-CPu"
  "blishedFile_RemoveAppRelationship_Respon"
  "se\"E\n*CPublishedFile_GetAppRelationships"
  "_Request\022\027\n\017publishedfileid\030\001 \001(\004\"\276\001\n+CP"
  "ublishedFile_GetAppRelationships_Respons"
  "e\022W\n\021app_relationships\030\003 \003(\0132<.CPublishe"
  "dFile_GetAppRelationships_Response.AppRe"
  "lationship\0326\n\017AppRelationship\022\r\n\005appid\030\001"
  " \001(\r\022\024\n\014relationship\030\002 \001(\r\"j\n1CPublished"
  "File_GetAppRelationshipsBatched_Request\022"
  "\030\n\020publishedfileids\030\001 \003(\004\022\033\n\023filter_rela"
  "tionship\030\002 \001(\r\"\377\002\n2CPublishedFile_GetApp"
  "RelationshipsBatched_Response\022g\n\rrelatio"
  "nships\030\001 \003(\0132P.CPublishedFile_GetAppRela"
  "tionshipsBatched_Response.PublishedFileA"
  "ppRelationship\0326\n\017AppRelationship\022\r\n\005app"
  "id\030\001 \001(\r\022\024\n\014relationship\030\002 \001(\r\032\247\001\n\034Publi"
  "shedFileAppRelationship\022\027\n\017publishedfile"
  "id\030\001 \001(\004\022\016\n\006result\030\002 \001(\r\022^\n\021app_relation"
  "ships\030\003 \003(\0132C.CPublishedFile_GetAppRelat"
  "ionshipsBatched_Response.AppRelationship"
  "\"W\n,CPublishedFile_StartPlaytimeTracking"
  "_Request\022\r\n\005appid\030\001 \001(\r\022\030\n\020publishedfile"
  "ids\030\002 \003(\004\"/\n-CPublishedFile_StartPlaytim"
  "eTracking_Response\"V\n+CPublishedFile_Sto"
  "pPlaytimeTracking_Request\022\r\n\005appid\030\001 \001(\r"
  "\022\030\n\020publishedfileids\030\002 \003(\004\".\n,CPublished"
  "File_StopPlaytimeTracking_Response\"J\n9CP"
  "ublishedFile_StopPlaytimeTrackingForAllA"
  "ppItems_Request\022\r\n\005appid\030\001 \001(\r\"<\n:CPubli"
  "shedFile_StopPlaytimeTrackingForAllAppIt"
  "ems_Response\"\201\002\n6CPublishedFile_SetPlayt"
  "imeForControllerConfigs_Request\022\r\n\005appid"
  "\030\001 \001(\r\022n\n\027controller_config_usage\030\002 \003(\0132"
  "M.CPublishedFile_SetPlaytimeForControlle"
  "rConfigs_Request.ControllerConfigUsage\032H"
  "\n\025ControllerConfigUsage\022\027\n\017publishedfile"
  "id\030\001 \001(\004\022\026\n\016seconds_active\030\002 \001(\002\"9\n7CPub"
  "lishedFile_SetPlaytimeForControllerConfi"
  "gs_Response\"Y\n\037CPublishedFile_AddChild_R"
  "equest\022\027\n\017publishedfileid\030\001 \001(\004\022\035\n\025child"
  "_publishedfileid\030\002 \001(\004\"\"\n CPublishedFile"
  "_AddChild_Response\"\\\n\"CPublishedFile_Rem"
  "oveChild_Request\022\027\n\017publishedfileid\030\001 \001("
  "\004\022\035\n\025child_publishedfileid\030\002 \001(\004\"%\n#CPub"
  "lishedFile_RemoveChild_Response\"E\n)CPubl"
  "ishedFile_GetUserVoteSummary_Request\022\030\n\020"
  "publishedfileids\030\001 \003(\006\"\332\001\n*CPublishedFil"
  "e_GetUserVoteSummary_Response\022J\n\tsummari"
  "es\030\001 \003(\01327.CPublishedFile_GetUserVoteSum"
  "mary_Response.VoteSummary\032`\n\013VoteSummary"
  "\022\027\n\017publishedfileid\030\001 \001(\006\022\020\n\010vote_for\030\002 "
  "\001(\010\022\024\n\014vote_against\030\003 \001(\010\022\020\n\010reported\030\004 "
  "\001(\010\"h\n%CPublishedFile_GetItemChanges_Req"
  "uest\022\r\n\005appid\030\001 \001(\r\022\031\n\021last_time_updated"
  "\030\002 \001(\r\022\025\n\rnum_items_max\030\003 \001(\r\"\351\001\n&CPubli"
  "shedFile_GetItemChanges_Response\022\023\n\013upda"
  "te_time\030\001 \001(\r\022P\n\016workshop_items\030\002 \003(\01328."
  "CPublishedFile_GetItemChanges_Response.W"
  "orkshopItemInfo\032X\n\020WorkshopItemInfo\022\031\n\021p"
  "ublished_file_id\030\001 \001(\006\022\024\n\014time_updated\030\002"
  " \001(\r\022\023\n\013manifest_id\030\003 \001(\006\"G\n,CPublishedF"
  "ile_GetContentDescriptors_Request\022\027\n\017pub"
  "lishedfileid\030\001 \001(\006\"\272\002\n-CPublishedFile_Ge"
  "tContentDescriptors_Response\022]\n\023content_"
  "descriptors\030\001 \003(\0132@.CPublishedFile_GetCo"
  "ntentDescriptors_Response.ContentDescrip"
  "tor\032\251\001\n\021ContentDescriptor\022W\n\014descriptori"
  "d\030\001 \001(\0162\025.EContentDescriptorID:*k_EConte"
  "ntDescriptor_NudityOrSexualContent\022\021\n\tac"
  "countid\030\002 \001(\r\022\021\n\ttimestamp\030\003 \001(\r\022\025\n\rmode"
  "rator_set\030\004 \001(\010\"\263\001\n/CPublishedFile_Updat"
  "eContentDescriptors_Request\022\027\n\017published"
  "fileid\030\001 \001(\006\0221\n\022descriptors_to_add\030\002 \003(\016"
  "2\025.EContentDescriptorID\0224\n\025descriptors_t"
  "o_remove\030\003 \003(\0162\025.EContentDescriptorID\"M\n"
  "0CPublishedFile_UpdateContentDescriptors"
  "_Response\022\031\n\021timestamp_updated\030\001 \001(\r\"\257\005\n"
  "*CPublishedFile_FileSubscribed_Notificat"
  "ion\022@\n\021published_file_id\030\001 \001(\006B%\202\265\030!Publ"
  "ishedFileID_t for the content\022\016\n\006app_id\030"
  "\002 \001(\r\022:\n\rfile_hcontent\030\003 \001(\006B#\202\265\030\037UGC fi"
  "le handle or manifest GID\022\021\n\tfile_size\030\004"
  " \001(\r\022\030\n\020rtime_subscribed\030\005 \001(\r\022N\n\020is_dep"
  "ot_content\030\006 \001(\010B4\202\265\0300True if workshop i"
  "tem is delivered via Steampipe\0224\n\rrtime_"
  "updated\030\007 \001(\rB\035\202\265\030\031Last time content upd"
  "ated\022\202\001\n\trevisions\030\010 \003(\01328.CPublishedFil"
  "e_FileSubscribed_Notification.RevisionDa"
  "taB5\202\265\0301Data for each of the revisions t"
  "hat this item has\032\272\001\n\014RevisionData\022K\n\010re"
  "vision\030\001 \001(\0162\027.EPublishedFileRevision: k"
  "_EPublishedFileRevision_Default\022\'\n\rfile_"
  "hcontent\030\002 \001(\006B\020\202\265\030\014Manifest GID\0224\n\rrtim"
  "e_updated\030\003 \001(\rB\035\202\265\030\031Last time content u"
  "pdated\"\200\001\n,CPublishedFile_FileUnsubscrib"
  "ed_Notification\022@\n\021published_file_id\030\001 \001"
  "(\006B%\202\265\030!PublishedFileID_t for the conten"
  "t\022\016\n\006app_id\030\002 \001(\r\"\202\001\n.CPublishedFile_Fil"
  "eDeleted_Client_Notification\022@\n\021publishe"
  "d_file_id\030\001 \001(\006B%\202\265\030!PublishedFileID_t f"
  "or the content\022\016\n\006app_id\030\002 \001(\r*\253\002\n\026EPubl"
  "ishedFileRevision\022$\n k_EPublishedFileRev"
  "ision_Default\020\000\022#\n\037k_EPublishedFileRevis"
  "ion_Latest\020\001\022-\n)k_EPublishedFileRevision"
  "_ApprovedSnapshot\020\002\0223\n/k_EPublishedFileR"
  "evision_ApprovedSnapshot_China\020\003\022-\n)k_EP"
  "ublishedFileRevision_RejectedSnapshot\020\004\022"
  "3\n/k_EPublishedFileRevision_RejectedSnap"
  "shot_China\020\005*\310\001\n\033EPublishedFileForSaleSt"
  "atus\022\026\n\022k_PFFSS_NotForSale\020\000\022\033\n\027k_PFFSS_"
  "PendingApproval\020\001\022\033\n\027k_PFFSS_ApprovedFor"
  "Sale\020\002\022\033\n\027k_PFFSS_RejectedForSale\020\003\022\033\n\027k"
  "_PFFSS_NoLongerForSale\020\004\022\035\n\031k_PFFSS_Tent"
  "ativeApproval\020\0052\257)\n\rPublishedFile\022g\n\004Vot"
  "e\022\034.CPublishedFile_Vote_Request\032\035.CPubli"
  "shedFile_Vote_Response\"\"\202\265\030\036User wants t"
  "o vote on the item\022\201\001\n\tSubscribe\022!.CPubl"
  "ishedFile_Subscribe_Request\032\".CPublished"
  "File_Subscribe_Response\"-\202\265\030)Subscribes "
  "the user to the published file\022\213\001\n\013Unsub"
  "scribe\022#.CPublishedFile_Unsubscribe_Requ"
  "est\032$.CPublishedFile_Unsubscribe_Respons"
  "e\"1\202\265\030-Unsubscribes the user from the pu"
  "blished file\022\226\001\n\014CanSubscribe\022$.CPublish"
  "edFile_CanSubscribe_Request\032%.CPublished"
  "File_CanSubscribe_Response\"9\202\265\0305Check if"
  " the user can subscribe to the published"
  " file\022\270\001\n\021GetSubSectionData\022).CPublished"
  "File_GetSubSectionData_Request\032*.CPublis"
  "hedFile_GetSubSectionData_Response\"L\202\265\030H"
  "Get sub section data (for table of conte"
  "nts, a specific section, or all)\022\200\001\n\007Pub"
  "lish\022\037.CPublishedFile_Publish_Request\032 ."
  "CPublishedFile_Publish_Response\"2\202\265\030.Pub"
  "lishes a clouded user file to the Worksh"
  "op.\022\220\001\n\nGetDetails\022\".CPublishedFile_GetD"
  "etails_Request\032#.CPublishedFile_GetDetai"
  "ls_Response\"9\202\265\0305Retrieves information a"
  "bout a set of published files.\022\223\001\n\013GetIt"
  "emInfo\022#.CPublishedFile_GetItemInfo_Requ"
  "est\032$.CPublishedFile_GetItemInfo_Respons"
  "e\"9\202\265\0305Retrieves information about a set"
  " of published files.\022\205\001\n\014GetUserFiles\022$."
  "CPublishedFile_GetUserFiles_Request\032%.CP"
  "ublishedFile_GetUserFiles_Response\"(\202\265\030$"
  "Retrieves files published by a user.\022\327\001\n"
  "\020GetUserFileCount\022$.CPublishedFile_GetUs"
  "erFiles_Request\032%.CPublishedFile_GetUser"
  "Files_Response\"v\202\265\030rRetrieves a count of"
  " files published by a user. Uses the sam"
  "e messages as GetUserFiles but totalonly"
  " must be true.\022\325\001\n\032AreFilesInSubscriptio"
  "nList\0222.CPublishedFile_AreFilesInSubscri"
  "ptionList_Request\0323.CPublishedFile_AreFi"
  "lesInSubscriptionList_Response\"N\202\265\030JDete"
  "rmines which files in the given list are"
  " in a user\'s subscription list\022z\n\006Update"
  "\022\036.CPublishedFile_Update_Request\032\037.CPubl"
  "ishedFile_Update_Response\"/\202\265\030+Updates i"
  "nformation about a published file.\022h\n\006De"
  "lete\022\036.CPublishedFile_Delete_Request\032\037.C"
  "PublishedFile_Delete_Response\"\035\202\265\030\031Delet"
  "es a published file.\022\300\001\n\025GetChangeHistor"
  "yEntry\022-.CPublishedFile_GetChangeHistory"
  "Entry_Request\032..CPublishedFile_GetChange"
  "HistoryEntry_Response\"H\202\265\030DReturns data "
  "on a specific change history entry for a"
  " published file\022\244\001\n\020GetChangeHistory\022(.C"
  "PublishedFile_GetChangeHistory_Request\032)"
  ".CPublishedFile_GetChangeHistory_Respons"
  "e\";\202\265\0307Returns data on the change histor"
  "y for a published file\022\230\001\n\022RefreshVoting"
  "Queue\022*.CPublishedFile_RefreshVotingQueu"
  "e_Request\032+.CPublishedFile_RefreshVoting"
  "Queue_Response\")\202\265\030%Refresh the voting q"
  "ueue for the user\022\206\001\n\nQueryFiles\022\".CPubl"
  "ishedFile_QueryFiles_Request\032#.CPublishe"
  "dFile_QueryFiles_Response\"/\202\265\030+Performs "
  "a search query for published files\022\263\001\n\022A"
  "ddAppRelationship\022*.CPublishedFile_AddAp"
  "pRelationship_Request\032+.CPublishedFile_A"
  "ddAppRelationship_Response\"D\202\265\030@Adds a r"
  "elationship between the published file a"
  "nd the given app\022\276\001\n\025RemoveAppRelationsh"
  "ip\022-.CPublishedFile_RemoveAppRelationshi"
  "p_Request\032..CPublishedFile_RemoveAppRela"
  "tionship_Response\"F\202\265\030BRemove a relation"
  "ship between the published file and the "
  "given app\022\263\001\n\023GetAppRelationships\022+.CPub"
  "lishedFile_GetAppRelationships_Request\032,"
  ".CPublishedFile_GetAppRelationships_Resp"
  "onse\"A\202\265\030=Returns the list of app relati"
  "onships for this published file\022\313\001\n\032GetA"
  "ppRelationshipsBatched\0222.CPublishedFile_"
  "GetAppRelationshipsBatched_Request\0323.CPu"
  "blishedFile_GetAppRelationshipsBatched_R"
  "esponse\"D\202\265\030@Returns the list of app rel"
  "ationships for set of published files\022\263\001"
  "\n\025StartPlaytimeTracking\022-.CPublishedFile"
  "_StartPlaytimeTracking_Request\032..CPublis"
  "hedFile_StartPlaytimeTracking_Response\";"
  "\202\265\0307Start usage tracking for a given set"
  " of published files\022\260\001\n\024StopPlaytimeTrac"
  "king\022,.CPublishedFile_StopPlaytimeTracki"
  "ng_Request\032-.CPublishedFile_StopPlaytime"
  "Tracking_Response\";\202\265\0307Stops usage track"
  "ing for a given set of published files\022\355"
  "\001\n\"StopPlaytimeTrackingForAllAppItems\022:."
  "CPublishedFile_StopPlaytimeTrackingForAl"
  "lAppItems_Request\032;.CPublishedFile_StopP"
  "laytimeTrackingForAllAppItems_Response\"N"
  "\202\265\030JStops usage tracking for all items c"
  "urrently tracked for the specified app\022\230"
  "\002\n\037SetPlaytimeForControllerConfigs\0227.CPu"
  "blishedFile_SetPlaytimeForControllerConf"
  "igs_Request\0328.CPublishedFile_SetPlaytime"
  "ForControllerConfigs_Response\"\201\001\202\265\030}Stop"
  "s usage tracking all controller configs "
  "for the given app and set the usage time"
  " for the for the given controller config"
  "s\022\217\001\n\010AddChild\022 .CPublishedFile_AddChild"
  "_Request\032!.CPublishedFile_AddChild_Respo"
  "nse\">\202\265\030:Adds a parent->child relationsh"
  "ip between the given items.\022\231\001\n\013RemoveCh"
  "ild\022#.CPublishedFile_RemoveChild_Request"
  "\032$.CPublishedFile_RemoveChild_Response\"\?"
  "\202\265\030;Removes parent->child relationship b"
  "etween the given items.\022\210\001\n\022GetUserVoteS"
  "ummary\022*.CPublishedFile_GetUserVoteSumma"
  "ry_Request\032+.CPublishedFile_GetUserVoteS"
  "ummary_Response\"\031\202\265\030\025Get user vote summa"
  "ry\022\221\001\n\016GetItemChanges\022&.CPublishedFile_G"
  "etItemChanges_Request\032\'.CPublishedFile_G"
  "etItemChanges_Response\".\202\265\030*Get list of "
  "updated items since given date\022\322\001\n\025GetCo"
  "ntentDescriptors\022-.CPublishedFile_GetCon"
  "tentDescriptors_Request\032..CPublishedFile"
  "_GetContentDescriptors_Response\"Z\202\265\030VRet"
  "urns more detailed information about the"
  " content descriptors for the published f"
  "ile\022\266\001\n\030UpdateContentDescriptors\0220.CPubl"
  "ishedFile_UpdateContentDescriptors_Reque"
  "st\0321.CPublishedFile_UpdateContentDescrip"
  "tors_Response\"5\202\265\0301Updates content descr"
  "iptors on the published file\032+\202\265\030\'A serv"
  "ice to access published file data2\215\004\n\023Pu"
  "blishedFileClient\022\223\001\n\024NotifyFileSubscrib"
  "ed\022+.CPublishedFile_FileSubscribed_Notif"
  "ication\032\013.NoResponse\"A\202\265\030=Notification f"
  "rom the server when a user subscribes to"
  " a file\022\233\001\n\026NotifyFileUnsubscribed\022-.CPu"
  "blishedFile_FileUnsubscribed_Notificatio"
  "n\032\013.NoResponse\"E\202\265\030ANotification from th"
  "e server when a user unsubscribes from a"
  " file\022\224\001\n\021NotifyFileDeleted\022/.CPublished"
  "File_FileDeleted_Client_Notification\032\013.N"
  "oResponse\"A\202\265\030=Notification from the ser"
  "ver when a published file is deleted\032+\202\265"
  "\030#Published file client notifications\300\265\030"
  "\002B\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_enums_5fproductinfo_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto = {
  false, false, 29526, descriptor_table_protodef_steammessages_5fpublishedfile_2esteamclient_2eproto, "steammessages_publishedfile.steamclient.proto", 
  &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once, descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_deps, 3, 91,
  schemas, file_default_instances, TableStruct_steammessages_5fpublishedfile_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fpublishedfile_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fpublishedfile_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fpublishedfile_2esteamclient_2eproto(&descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileRevision_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fpublishedfile_2esteamclient_2eproto[0];
}
bool EPublishedFileRevision_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPublishedFileForSaleStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fpublishedfile_2esteamclient_2eproto[1];
}
bool EPublishedFileForSaleStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CPublishedFile_Vote_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_Vote_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vote_up(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_Vote_Request::CPublishedFile_Vote_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Vote_Request)
}
CPublishedFile_Vote_Request::CPublishedFile_Vote_Request(const CPublishedFile_Vote_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&vote_up_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(vote_up_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Vote_Request)
}

inline void CPublishedFile_Vote_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vote_up_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(vote_up_));
}

CPublishedFile_Vote_Request::~CPublishedFile_Vote_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Vote_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_Vote_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_Vote_Request::ArenaDtor(void* object) {
  CPublishedFile_Vote_Request* _this = reinterpret_cast< CPublishedFile_Vote_Request* >(object);
  (void)_this;
}
void CPublishedFile_Vote_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_Vote_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_Vote_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_Vote_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vote_up_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(vote_up_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_Vote_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vote_up = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_vote_up(&has_bits);
          vote_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_Vote_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Vote_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional bool vote_up = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_vote_up(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Vote_Request)
  return target;
}

size_t CPublishedFile_Vote_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_Vote_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
    }

    // optional bool vote_up = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_Vote_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_Vote_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_Vote_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_Vote_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_Vote_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_Vote_Request &>(from));
}


void CPublishedFile_Vote_Request::MergeFrom(const CPublishedFile_Vote_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_Vote_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      vote_up_ = from.vote_up_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_Vote_Request::CopyFrom(const CPublishedFile_Vote_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_Vote_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Vote_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Vote_Request::InternalSwap(CPublishedFile_Vote_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_Vote_Request, vote_up_)
      + sizeof(CPublishedFile_Vote_Request::vote_up_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_Vote_Request, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Vote_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[0]);
}

// ===================================================================

class CPublishedFile_Vote_Response::_Internal {
 public:
};

CPublishedFile_Vote_Response::CPublishedFile_Vote_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Vote_Response)
}
CPublishedFile_Vote_Response::CPublishedFile_Vote_Response(const CPublishedFile_Vote_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Vote_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_Vote_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_Vote_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Vote_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[1]);
}

// ===================================================================

class CPublishedFile_Subscribe_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_Subscribe_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_list_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_notify_client(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CPublishedFile_Subscribe_Request::CPublishedFile_Subscribe_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Subscribe_Request)
}
CPublishedFile_Subscribe_Request::CPublishedFile_Subscribe_Request(const CPublishedFile_Subscribe_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&notify_client_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Subscribe_Request)
}

inline void CPublishedFile_Subscribe_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&notify_client_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
}

CPublishedFile_Subscribe_Request::~CPublishedFile_Subscribe_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Subscribe_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_Subscribe_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_Subscribe_Request::ArenaDtor(void* object) {
  CPublishedFile_Subscribe_Request* _this = reinterpret_cast< CPublishedFile_Subscribe_Request* >(object);
  (void)_this;
}
void CPublishedFile_Subscribe_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_Subscribe_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_Subscribe_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_Subscribe_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&notify_client_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_Subscribe_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 list_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_list_type(&has_bits);
          list_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 appid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool notify_client = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_notify_client(&has_bits);
          notify_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_Subscribe_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Subscribe_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional uint32 list_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_list_type(), target);
  }

  // optional int32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_appid(), target);
  }

  // optional bool notify_client = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_notify_client(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Subscribe_Request)
  return target;
}

size_t CPublishedFile_Subscribe_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_Subscribe_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
    }

    // optional uint32 list_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_list_type());
    }

    // optional int32 appid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_appid());
    }

    // optional bool notify_client = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_Subscribe_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_Subscribe_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_Subscribe_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_Subscribe_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_Subscribe_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_Subscribe_Request &>(from));
}


void CPublishedFile_Subscribe_Request::MergeFrom(const CPublishedFile_Subscribe_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_Subscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      list_type_ = from.list_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      notify_client_ = from.notify_client_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_Subscribe_Request::CopyFrom(const CPublishedFile_Subscribe_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_Subscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Subscribe_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Subscribe_Request::InternalSwap(CPublishedFile_Subscribe_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_Subscribe_Request, notify_client_)
      + sizeof(CPublishedFile_Subscribe_Request::notify_client_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_Subscribe_Request, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Subscribe_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[2]);
}

// ===================================================================

class CPublishedFile_Subscribe_Response::_Internal {
 public:
};

CPublishedFile_Subscribe_Response::CPublishedFile_Subscribe_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Subscribe_Response)
}
CPublishedFile_Subscribe_Response::CPublishedFile_Subscribe_Response(const CPublishedFile_Subscribe_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Subscribe_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_Subscribe_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_Subscribe_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Subscribe_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[3]);
}

// ===================================================================

class CPublishedFile_Unsubscribe_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_Unsubscribe_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_list_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_notify_client(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CPublishedFile_Unsubscribe_Request::CPublishedFile_Unsubscribe_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Unsubscribe_Request)
}
CPublishedFile_Unsubscribe_Request::CPublishedFile_Unsubscribe_Request(const CPublishedFile_Unsubscribe_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&notify_client_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Unsubscribe_Request)
}

inline void CPublishedFile_Unsubscribe_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&notify_client_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
}

CPublishedFile_Unsubscribe_Request::~CPublishedFile_Unsubscribe_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Unsubscribe_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_Unsubscribe_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_Unsubscribe_Request::ArenaDtor(void* object) {
  CPublishedFile_Unsubscribe_Request* _this = reinterpret_cast< CPublishedFile_Unsubscribe_Request* >(object);
  (void)_this;
}
void CPublishedFile_Unsubscribe_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_Unsubscribe_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_Unsubscribe_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_Unsubscribe_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&notify_client_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_Unsubscribe_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 list_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_list_type(&has_bits);
          list_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 appid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool notify_client = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_notify_client(&has_bits);
          notify_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_Unsubscribe_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Unsubscribe_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional uint32 list_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_list_type(), target);
  }

  // optional int32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_appid(), target);
  }

  // optional bool notify_client = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_notify_client(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Unsubscribe_Request)
  return target;
}

size_t CPublishedFile_Unsubscribe_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_Unsubscribe_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
    }

    // optional uint32 list_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_list_type());
    }

    // optional int32 appid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_appid());
    }

    // optional bool notify_client = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_Unsubscribe_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_Unsubscribe_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_Unsubscribe_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_Unsubscribe_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_Unsubscribe_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_Unsubscribe_Request &>(from));
}


void CPublishedFile_Unsubscribe_Request::MergeFrom(const CPublishedFile_Unsubscribe_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_Unsubscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      list_type_ = from.list_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      notify_client_ = from.notify_client_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_Unsubscribe_Request::CopyFrom(const CPublishedFile_Unsubscribe_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_Unsubscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Unsubscribe_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Unsubscribe_Request::InternalSwap(CPublishedFile_Unsubscribe_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, notify_client_)
      + sizeof(CPublishedFile_Unsubscribe_Request::notify_client_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Unsubscribe_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[4]);
}

// ===================================================================

class CPublishedFile_Unsubscribe_Response::_Internal {
 public:
};

CPublishedFile_Unsubscribe_Response::CPublishedFile_Unsubscribe_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Unsubscribe_Response)
}
CPublishedFile_Unsubscribe_Response::CPublishedFile_Unsubscribe_Response(const CPublishedFile_Unsubscribe_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Unsubscribe_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_Unsubscribe_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_Unsubscribe_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Unsubscribe_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[5]);
}

// ===================================================================

class CPublishedFile_CanSubscribe_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_CanSubscribe_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_CanSubscribe_Request::CPublishedFile_CanSubscribe_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_CanSubscribe_Request)
}
CPublishedFile_CanSubscribe_Request::CPublishedFile_CanSubscribe_Request(const CPublishedFile_CanSubscribe_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_CanSubscribe_Request)
}

inline void CPublishedFile_CanSubscribe_Request::SharedCtor() {
publishedfileid_ = uint64_t{0u};
}

CPublishedFile_CanSubscribe_Request::~CPublishedFile_CanSubscribe_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_CanSubscribe_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_CanSubscribe_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_CanSubscribe_Request::ArenaDtor(void* object) {
  CPublishedFile_CanSubscribe_Request* _this = reinterpret_cast< CPublishedFile_CanSubscribe_Request* >(object);
  (void)_this;
}
void CPublishedFile_CanSubscribe_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_CanSubscribe_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_CanSubscribe_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_CanSubscribe_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfileid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_CanSubscribe_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_CanSubscribe_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_CanSubscribe_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_CanSubscribe_Request)
  return target;
}

size_t CPublishedFile_CanSubscribe_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_CanSubscribe_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 publishedfileid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_CanSubscribe_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_CanSubscribe_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_CanSubscribe_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_CanSubscribe_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_CanSubscribe_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_CanSubscribe_Request &>(from));
}


void CPublishedFile_CanSubscribe_Request::MergeFrom(const CPublishedFile_CanSubscribe_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_CanSubscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_publishedfileid()) {
    _internal_set_publishedfileid(from._internal_publishedfileid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_CanSubscribe_Request::CopyFrom(const CPublishedFile_CanSubscribe_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_CanSubscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_CanSubscribe_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_CanSubscribe_Request::InternalSwap(CPublishedFile_CanSubscribe_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(publishedfileid_, other->publishedfileid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_CanSubscribe_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[6]);
}

// ===================================================================

class CPublishedFile_CanSubscribe_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_CanSubscribe_Response>()._has_bits_);
  static void set_has_can_subscribe(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_CanSubscribe_Response::CPublishedFile_CanSubscribe_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_CanSubscribe_Response)
}
CPublishedFile_CanSubscribe_Response::CPublishedFile_CanSubscribe_Response(const CPublishedFile_CanSubscribe_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  can_subscribe_ = from.can_subscribe_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_CanSubscribe_Response)
}

inline void CPublishedFile_CanSubscribe_Response::SharedCtor() {
can_subscribe_ = false;
}

CPublishedFile_CanSubscribe_Response::~CPublishedFile_CanSubscribe_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_CanSubscribe_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_CanSubscribe_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_CanSubscribe_Response::ArenaDtor(void* object) {
  CPublishedFile_CanSubscribe_Response* _this = reinterpret_cast< CPublishedFile_CanSubscribe_Response* >(object);
  (void)_this;
}
void CPublishedFile_CanSubscribe_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_CanSubscribe_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_CanSubscribe_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_CanSubscribe_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  can_subscribe_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_CanSubscribe_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool can_subscribe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_can_subscribe(&has_bits);
          can_subscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_CanSubscribe_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_CanSubscribe_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool can_subscribe = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_can_subscribe(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_CanSubscribe_Response)
  return target;
}

size_t CPublishedFile_CanSubscribe_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_CanSubscribe_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool can_subscribe = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_CanSubscribe_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_CanSubscribe_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_CanSubscribe_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_CanSubscribe_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_CanSubscribe_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_CanSubscribe_Response &>(from));
}


void CPublishedFile_CanSubscribe_Response::MergeFrom(const CPublishedFile_CanSubscribe_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_CanSubscribe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_can_subscribe()) {
    _internal_set_can_subscribe(from._internal_can_subscribe());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_CanSubscribe_Response::CopyFrom(const CPublishedFile_CanSubscribe_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_CanSubscribe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_CanSubscribe_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_CanSubscribe_Response::InternalSwap(CPublishedFile_CanSubscribe_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_subscribe_, other->can_subscribe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_CanSubscribe_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[7]);
}

// ===================================================================

class CPublishedFile_GetSubSectionData_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetSubSectionData_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_for_table_of_contents(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_specific_sectionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desired_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CPublishedFile_GetSubSectionData_Request::CPublishedFile_GetSubSectionData_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetSubSectionData_Request)
}
CPublishedFile_GetSubSectionData_Request::CPublishedFile_GetSubSectionData_Request(const CPublishedFile_GetSubSectionData_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&desired_revision_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(desired_revision_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetSubSectionData_Request)
}

inline void CPublishedFile_GetSubSectionData_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&desired_revision_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(desired_revision_));
}

CPublishedFile_GetSubSectionData_Request::~CPublishedFile_GetSubSectionData_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetSubSectionData_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetSubSectionData_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetSubSectionData_Request::ArenaDtor(void* object) {
  CPublishedFile_GetSubSectionData_Request* _this = reinterpret_cast< CPublishedFile_GetSubSectionData_Request* >(object);
  (void)_this;
}
void CPublishedFile_GetSubSectionData_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetSubSectionData_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetSubSectionData_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetSubSectionData_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&desired_revision_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(desired_revision_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetSubSectionData_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool for_table_of_contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_for_table_of_contents(&has_bits);
          for_table_of_contents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 specific_sectionid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_specific_sectionid(&has_bits);
          specific_sectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EPublishedFileRevision desired_revision = 4 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPublishedFileRevision_IsValid(val))) {
            _internal_set_desired_revision(static_cast<::EPublishedFileRevision>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetSubSectionData_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetSubSectionData_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional bool for_table_of_contents = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_for_table_of_contents(), target);
  }

  // optional uint64 specific_sectionid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_specific_sectionid(), target);
  }

  // optional .EPublishedFileRevision desired_revision = 4 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_desired_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetSubSectionData_Request)
  return target;
}

size_t CPublishedFile_GetSubSectionData_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetSubSectionData_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
    }

    // optional uint64 specific_sectionid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_specific_sectionid());
    }

    // optional bool for_table_of_contents = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .EPublishedFileRevision desired_revision = 4 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_desired_revision());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetSubSectionData_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetSubSectionData_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetSubSectionData_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetSubSectionData_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetSubSectionData_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetSubSectionData_Request &>(from));
}


void CPublishedFile_GetSubSectionData_Request::MergeFrom(const CPublishedFile_GetSubSectionData_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetSubSectionData_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      specific_sectionid_ = from.specific_sectionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      for_table_of_contents_ = from.for_table_of_contents_;
    }
    if (cached_has_bits & 0x00000008u) {
      desired_revision_ = from.desired_revision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetSubSectionData_Request::CopyFrom(const CPublishedFile_GetSubSectionData_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetSubSectionData_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetSubSectionData_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetSubSectionData_Request::InternalSwap(CPublishedFile_GetSubSectionData_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetSubSectionData_Request, desired_revision_)
      + sizeof(CPublishedFile_GetSubSectionData_Request::desired_revision_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetSubSectionData_Request, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetSubSectionData_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[8]);
}

// ===================================================================

class PublishedFileSubSection::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileSubSection>()._has_bits_);
  static void set_has_sectionid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PublishedFileSubSection::PublishedFileSubSection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PublishedFileSubSection)
}
PublishedFileSubSection::PublishedFileSubSection(const PublishedFileSubSection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  description_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description_text()) {
    description_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&sectionid_, &from.sectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sort_order_) -
    reinterpret_cast<char*>(&sectionid_)) + sizeof(sort_order_));
  // @@protoc_insertion_point(copy_constructor:PublishedFileSubSection)
}

inline void PublishedFileSubSection::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sectionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sort_order_) -
    reinterpret_cast<char*>(&sectionid_)) + sizeof(sort_order_));
}

PublishedFileSubSection::~PublishedFileSubSection() {
  // @@protoc_insertion_point(destructor:PublishedFileSubSection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishedFileSubSection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublishedFileSubSection::ArenaDtor(void* object) {
  PublishedFileSubSection* _this = reinterpret_cast< PublishedFileSubSection* >(object);
  (void)_this;
}
void PublishedFileSubSection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileSubSection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileSubSection::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileSubSection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_text_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&sectionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sort_order_) -
        reinterpret_cast<char*>(&sectionid_)) + sizeof(sort_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileSubSection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 sectionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sectionid(&has_bits);
          sectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileSubSection.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileSubSection.description_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sort_order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sort_order(&has_bits);
          sort_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishedFileSubSection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileSubSection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sectionid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sectionid(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileSubSection.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string description_text = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description_text().data(), static_cast<int>(this->_internal_description_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileSubSection.description_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description_text(), target);
  }

  // optional uint32 sort_order = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sort_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileSubSection)
  return target;
}

size_t PublishedFileSubSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileSubSection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description_text = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description_text());
    }

    // optional uint64 sectionid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sectionid());
    }

    // optional uint32 sort_order = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sort_order());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishedFileSubSection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishedFileSubSection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishedFileSubSection::GetClassData() const { return &_class_data_; }

void PublishedFileSubSection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublishedFileSubSection *>(to)->MergeFrom(
      static_cast<const PublishedFileSubSection &>(from));
}


void PublishedFileSubSection::MergeFrom(const PublishedFileSubSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileSubSection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description_text(from._internal_description_text());
    }
    if (cached_has_bits & 0x00000004u) {
      sectionid_ = from.sectionid_;
    }
    if (cached_has_bits & 0x00000008u) {
      sort_order_ = from.sort_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishedFileSubSection::CopyFrom(const PublishedFileSubSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileSubSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileSubSection::IsInitialized() const {
  return true;
}

void PublishedFileSubSection::InternalSwap(PublishedFileSubSection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_text_, lhs_arena,
      &other->description_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishedFileSubSection, sort_order_)
      + sizeof(PublishedFileSubSection::sort_order_)
      - PROTOBUF_FIELD_OFFSET(PublishedFileSubSection, sectionid_)>(
          reinterpret_cast<char*>(&sectionid_),
          reinterpret_cast<char*>(&other->sectionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileSubSection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[9]);
}

// ===================================================================

class CPublishedFile_GetSubSectionData_Response::_Internal {
 public:
};

CPublishedFile_GetSubSectionData_Response::CPublishedFile_GetSubSectionData_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sub_sections_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetSubSectionData_Response)
}
CPublishedFile_GetSubSectionData_Response::CPublishedFile_GetSubSectionData_Response(const CPublishedFile_GetSubSectionData_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sub_sections_(from.sub_sections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetSubSectionData_Response)
}

inline void CPublishedFile_GetSubSectionData_Response::SharedCtor() {
}

CPublishedFile_GetSubSectionData_Response::~CPublishedFile_GetSubSectionData_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetSubSectionData_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetSubSectionData_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetSubSectionData_Response::ArenaDtor(void* object) {
  CPublishedFile_GetSubSectionData_Response* _this = reinterpret_cast< CPublishedFile_GetSubSectionData_Response* >(object);
  (void)_this;
}
void CPublishedFile_GetSubSectionData_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetSubSectionData_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetSubSectionData_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetSubSectionData_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_sections_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetSubSectionData_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PublishedFileSubSection sub_sections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_sections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetSubSectionData_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetSubSectionData_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PublishedFileSubSection sub_sections = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sub_sections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sub_sections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetSubSectionData_Response)
  return target;
}

size_t CPublishedFile_GetSubSectionData_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetSubSectionData_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PublishedFileSubSection sub_sections = 1;
  total_size += 1UL * this->_internal_sub_sections_size();
  for (const auto& msg : this->sub_sections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetSubSectionData_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetSubSectionData_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetSubSectionData_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetSubSectionData_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetSubSectionData_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetSubSectionData_Response &>(from));
}


void CPublishedFile_GetSubSectionData_Response::MergeFrom(const CPublishedFile_GetSubSectionData_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetSubSectionData_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sub_sections_.MergeFrom(from.sub_sections_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetSubSectionData_Response::CopyFrom(const CPublishedFile_GetSubSectionData_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetSubSectionData_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetSubSectionData_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetSubSectionData_Response::InternalSwap(CPublishedFile_GetSubSectionData_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sub_sections_.InternalSwap(&other->sub_sections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetSubSectionData_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[10]);
}

// ===================================================================

class CPublishedFile_Publish_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_Publish_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_consumer_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cloudfilename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preview_cloudfilename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_file_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_consumer_shortcut_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_youtube_username(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_youtube_videoid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_redirect_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_collection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CPublishedFile_Publish_Request::CPublishedFile_Publish_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Publish_Request)
}
CPublishedFile_Publish_Request::CPublishedFile_Publish_Request(const CPublishedFile_Publish_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cloudfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cloudfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cloudfilename()) {
    cloudfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cloudfilename(), 
      GetArenaForAllocation());
  }
  preview_cloudfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    preview_cloudfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preview_cloudfilename()) {
    preview_cloudfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preview_cloudfilename(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  file_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_description()) {
    file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_description(), 
      GetArenaForAllocation());
  }
  consumer_shortcut_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    consumer_shortcut_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_consumer_shortcut_name()) {
    consumer_shortcut_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_consumer_shortcut_name(), 
      GetArenaForAllocation());
  }
  youtube_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    youtube_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_youtube_username()) {
    youtube_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_youtube_username(), 
      GetArenaForAllocation());
  }
  youtube_videoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    youtube_videoid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_youtube_videoid()) {
    youtube_videoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_youtube_videoid(), 
      GetArenaForAllocation());
  }
  redirect_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    redirect_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_redirect_uri()) {
    redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redirect_uri(), 
      GetArenaForAllocation());
  }
  collection_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    collection_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_collection_type()) {
    collection_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collection_type(), 
      GetArenaForAllocation());
  }
  game_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    game_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_type()) {
    game_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_type(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Publish_Request)
}

inline void CPublishedFile_Publish_Request::SharedCtor() {
cloudfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cloudfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
preview_cloudfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  preview_cloudfilename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
consumer_shortcut_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  consumer_shortcut_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
youtube_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  youtube_username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
youtube_videoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  youtube_videoid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
redirect_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  redirect_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
collection_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  collection_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
game_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  game_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(visibility_));
}

CPublishedFile_Publish_Request::~CPublishedFile_Publish_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Publish_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_Publish_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cloudfilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preview_cloudfilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consumer_shortcut_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  youtube_username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  youtube_videoid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redirect_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_Publish_Request::ArenaDtor(void* object) {
  CPublishedFile_Publish_Request* _this = reinterpret_cast< CPublishedFile_Publish_Request* >(object);
  (void)_this;
}
void CPublishedFile_Publish_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_Publish_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_Publish_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_Publish_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      cloudfilename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      preview_cloudfilename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      file_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      consumer_shortcut_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      youtube_username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      youtube_videoid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      redirect_uri_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      collection_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      game_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00007800u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visibility_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(visibility_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_Publish_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App Id this file is being published FROM."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 consumer_appid = 2 [(.description) = "App Id this file is being published TO."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_consumer_appid(&has_bits);
          consumer_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cloudfilename = 3 [(.description) = "Name of the file to publish in the user\'s cloud."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_cloudfilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.cloudfilename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string preview_cloudfilename = 4 [(.description) = "Name of the file to use as the published file\'s preview."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_preview_cloudfilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.preview_cloudfilename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 5 [(.description) = "Text title for the published file."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string file_description = 6 [(.description) = "Text description for the published file."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_file_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.file_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 file_type = 7 [(.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_file_type(&has_bits);
          file_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string consumer_shortcut_name = 8 [(.description) = "Shortcut name for the published file."];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_consumer_shortcut_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.consumer_shortcut_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string youtube_username = 9 [(.description) = "(Optional) User\'s YouTube account username."];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_youtube_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.youtube_username");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string youtube_videoid = 10 [(.description) = "(Optional) Video Id of a YouTube video for this published file."];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_youtube_videoid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.youtube_videoid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 visibility = 11 [(.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_visibility(&has_bits);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string redirect_uri = 12 [(.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_redirect_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.redirect_uri");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 13 [(.description) = "Array of text tags to apply to the published file."];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string collection_type = 14 [(.description) = "(Optional) Type of collection the published file represents."];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_collection_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.collection_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string game_type = 15 [(.description) = "(Optional) Type of game the published file represents."];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_game_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.game_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 16 [(.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_Publish_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Publish_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App Id this file is being published FROM."];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 consumer_appid = 2 [(.description) = "App Id this file is being published TO."];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_consumer_appid(), target);
  }

  // optional string cloudfilename = 3 [(.description) = "Name of the file to publish in the user\'s cloud."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cloudfilename().data(), static_cast<int>(this->_internal_cloudfilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.cloudfilename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cloudfilename(), target);
  }

  // optional string preview_cloudfilename = 4 [(.description) = "Name of the file to use as the published file\'s preview."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preview_cloudfilename().data(), static_cast<int>(this->_internal_preview_cloudfilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.preview_cloudfilename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_preview_cloudfilename(), target);
  }

  // optional string title = 5 [(.description) = "Text title for the published file."];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.title");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_title(), target);
  }

  // optional string file_description = 6 [(.description) = "Text description for the published file."];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_description().data(), static_cast<int>(this->_internal_file_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.file_description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_file_description(), target);
  }

  // optional uint32 file_type = 7 [(.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_file_type(), target);
  }

  // optional string consumer_shortcut_name = 8 [(.description) = "Shortcut name for the published file."];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_consumer_shortcut_name().data(), static_cast<int>(this->_internal_consumer_shortcut_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.consumer_shortcut_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_consumer_shortcut_name(), target);
  }

  // optional string youtube_username = 9 [(.description) = "(Optional) User\'s YouTube account username."];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_youtube_username().data(), static_cast<int>(this->_internal_youtube_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.youtube_username");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_youtube_username(), target);
  }

  // optional string youtube_videoid = 10 [(.description) = "(Optional) Video Id of a YouTube video for this published file."];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_youtube_videoid().data(), static_cast<int>(this->_internal_youtube_videoid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.youtube_videoid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_youtube_videoid(), target);
  }

  // optional uint32 visibility = 11 [(.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_visibility(), target);
  }

  // optional string redirect_uri = 12 [(.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_redirect_uri().data(), static_cast<int>(this->_internal_redirect_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.redirect_uri");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_redirect_uri(), target);
  }

  // repeated string tags = 13 [(.description) = "Array of text tags to apply to the published file."];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.tags");
    target = stream->WriteString(13, s, target);
  }

  // optional string collection_type = 14 [(.description) = "(Optional) Type of collection the published file represents."];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_collection_type().data(), static_cast<int>(this->_internal_collection_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.collection_type");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_collection_type(), target);
  }

  // optional string game_type = 15 [(.description) = "(Optional) Type of game the published file represents."];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_type().data(), static_cast<int>(this->_internal_game_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.game_type");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_game_type(), target);
  }

  // optional string url = 16 [(.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.url");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Publish_Request)
  return target;
}

size_t CPublishedFile_Publish_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_Publish_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 13 [(.description) = "Array of text tags to apply to the published file."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string cloudfilename = 3 [(.description) = "Name of the file to publish in the user\'s cloud."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cloudfilename());
    }

    // optional string preview_cloudfilename = 4 [(.description) = "Name of the file to use as the published file\'s preview."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preview_cloudfilename());
    }

    // optional string title = 5 [(.description) = "Text title for the published file."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string file_description = 6 [(.description) = "Text description for the published file."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_description());
    }

    // optional string consumer_shortcut_name = 8 [(.description) = "Shortcut name for the published file."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_consumer_shortcut_name());
    }

    // optional string youtube_username = 9 [(.description) = "(Optional) User\'s YouTube account username."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_youtube_username());
    }

    // optional string youtube_videoid = 10 [(.description) = "(Optional) Video Id of a YouTube video for this published file."];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_youtube_videoid());
    }

    // optional string redirect_uri = 12 [(.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_redirect_uri());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional string collection_type = 14 [(.description) = "(Optional) Type of collection the published file represents."];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_collection_type());
    }

    // optional string game_type = 15 [(.description) = "(Optional) Type of game the published file represents."];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_type());
    }

    // optional string url = 16 [(.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint32 appid = 1 [(.description) = "App Id this file is being published FROM."];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 consumer_appid = 2 [(.description) = "App Id this file is being published TO."];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_consumer_appid());
    }

    // optional uint32 file_type = 7 [(.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_file_type());
    }

    // optional uint32 visibility = 11 [(.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_visibility());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_Publish_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_Publish_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_Publish_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_Publish_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_Publish_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_Publish_Request &>(from));
}


void CPublishedFile_Publish_Request::MergeFrom(const CPublishedFile_Publish_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_Publish_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cloudfilename(from._internal_cloudfilename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_preview_cloudfilename(from._internal_preview_cloudfilename());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_file_description(from._internal_file_description());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_consumer_shortcut_name(from._internal_consumer_shortcut_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_youtube_username(from._internal_youtube_username());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_youtube_videoid(from._internal_youtube_videoid());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_redirect_uri(from._internal_redirect_uri());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_collection_type(from._internal_collection_type());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_game_type(from._internal_game_type());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000800u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00001000u) {
      consumer_appid_ = from.consumer_appid_;
    }
    if (cached_has_bits & 0x00002000u) {
      file_type_ = from.file_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_Publish_Request::CopyFrom(const CPublishedFile_Publish_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_Publish_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Publish_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Publish_Request::InternalSwap(CPublishedFile_Publish_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cloudfilename_, lhs_arena,
      &other->cloudfilename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &preview_cloudfilename_, lhs_arena,
      &other->preview_cloudfilename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_description_, lhs_arena,
      &other->file_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &consumer_shortcut_name_, lhs_arena,
      &other->consumer_shortcut_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &youtube_username_, lhs_arena,
      &other->youtube_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &youtube_videoid_, lhs_arena,
      &other->youtube_videoid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &redirect_uri_, lhs_arena,
      &other->redirect_uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &collection_type_, lhs_arena,
      &other->collection_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_type_, lhs_arena,
      &other->game_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_Publish_Request, visibility_)
      + sizeof(CPublishedFile_Publish_Request::visibility_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_Publish_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Publish_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[11]);
}

// ===================================================================

class CPublishedFile_Publish_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_Publish_Response>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_redirect_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_Publish_Response::CPublishedFile_Publish_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Publish_Response)
}
CPublishedFile_Publish_Response::CPublishedFile_Publish_Response(const CPublishedFile_Publish_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  redirect_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    redirect_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_redirect_uri()) {
    redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redirect_uri(), 
      GetArenaForAllocation());
  }
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Publish_Response)
}

inline void CPublishedFile_Publish_Response::SharedCtor() {
redirect_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  redirect_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
publishedfileid_ = uint64_t{0u};
}

CPublishedFile_Publish_Response::~CPublishedFile_Publish_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Publish_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_Publish_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  redirect_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_Publish_Response::ArenaDtor(void* object) {
  CPublishedFile_Publish_Response* _this = reinterpret_cast< CPublishedFile_Publish_Response* >(object);
  (void)_this;
}
void CPublishedFile_Publish_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_Publish_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_Publish_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_Publish_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    redirect_uri_.ClearNonDefaultToEmpty();
  }
  publishedfileid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_Publish_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string redirect_uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_redirect_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Response.redirect_uri");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_Publish_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Publish_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional string redirect_uri = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_redirect_uri().data(), static_cast<int>(this->_internal_redirect_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Response.redirect_uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_redirect_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Publish_Response)
  return target;
}

size_t CPublishedFile_Publish_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_Publish_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string redirect_uri = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_redirect_uri());
    }

    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_Publish_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_Publish_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_Publish_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_Publish_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_Publish_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_Publish_Response &>(from));
}


void CPublishedFile_Publish_Response::MergeFrom(const CPublishedFile_Publish_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_Publish_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_redirect_uri(from._internal_redirect_uri());
    }
    if (cached_has_bits & 0x00000002u) {
      publishedfileid_ = from.publishedfileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_Publish_Response::CopyFrom(const CPublishedFile_Publish_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_Publish_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Publish_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_Publish_Response::InternalSwap(CPublishedFile_Publish_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &redirect_uri_, lhs_arena,
      &other->redirect_uri_, rhs_arena
  );
  swap(publishedfileid_, other->publishedfileid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Publish_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[12]);
}

// ===================================================================

class CPublishedFile_GetDetails_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetDetails_Request>()._has_bits_);
  static void set_has_includetags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_includeadditionalpreviews(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_includechildren(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_includekvtags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_includevotes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_short_description(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_includeforsaledata(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_includemetadata(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_return_playtime_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_strip_description_bbcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_desired_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_includereactions(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

CPublishedFile_GetDetails_Request::CPublishedFile_GetDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  publishedfileids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetDetails_Request)
}
CPublishedFile_GetDetails_Request::CPublishedFile_GetDetails_Request(const CPublishedFile_GetDetails_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      publishedfileids_(from.publishedfileids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&includetags_, &from.includetags_,
    static_cast<size_t>(reinterpret_cast<char*>(&includereactions_) -
    reinterpret_cast<char*>(&includetags_)) + sizeof(includereactions_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetDetails_Request)
}

inline void CPublishedFile_GetDetails_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&includetags_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&includereactions_) -
    reinterpret_cast<char*>(&includetags_)) + sizeof(includereactions_));
}

CPublishedFile_GetDetails_Request::~CPublishedFile_GetDetails_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetDetails_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetDetails_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetDetails_Request::ArenaDtor(void* object) {
  CPublishedFile_GetDetails_Request* _this = reinterpret_cast< CPublishedFile_GetDetails_Request* >(object);
  (void)_this;
}
void CPublishedFile_GetDetails_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetDetails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetDetails_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfileids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&includetags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&includemetadata_) -
        reinterpret_cast<char*>(&includetags_)) + sizeof(includemetadata_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&language_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&includereactions_) -
        reinterpret_cast<char*>(&language_)) + sizeof(includereactions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetDetails_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 publishedfileids = 1 [(.description) = "Set of published file Ids to retrieve details for."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_publishedfileids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_publishedfileids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool includetags = 2 [(.description) = "If true, return tag information in the returned details."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_includetags(&has_bits);
          includetags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool includeadditionalpreviews = 3 [(.description) = "If true, return preview information in the returned details."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_includeadditionalpreviews(&has_bits);
          includeadditionalpreviews_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool includechildren = 4 [(.description) = "If true, return children in the returned details."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_includechildren(&has_bits);
          includechildren_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool includekvtags = 5 [(.description) = "If true, return key value tags in the returned details."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_includekvtags(&has_bits);
          includekvtags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool includevotes = 6 [(.description) = "If true, return vote data in the returned details."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_includevotes(&has_bits);
          includevotes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool short_description = 8 [(.description) = "If true, return a short description instead of the full description."];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_short_description(&has_bits);
          short_description_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool includeforsaledata = 10 [(.description) = "If true, return pricing data, if applicable."];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_includeforsaledata(&has_bits);
          includeforsaledata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool includemetadata = 11 [(.description) = "If true, populate the metadata field."];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_includemetadata(&has_bits);
          includemetadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 language = 12 [default = 0, (.description) = "Specifies the localized text to return. Defaults to English."];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 return_playtime_stats = 13 [(.description) = "Return playtime stats for the specified number of days before today."];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_return_playtime_stats(&has_bits);
          return_playtime_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool strip_description_bbcode = 15 [(.description) = "Strips BBCode from descriptions."];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_strip_description_bbcode(&has_bits);
          strip_description_bbcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EPublishedFileRevision desired_revision = 16 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPublishedFileRevision_IsValid(val))) {
            _internal_set_desired_revision(static_cast<::EPublishedFileRevision>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool includereactions = 17 [default = false, (.description) = "If true, then reactions to items will be returned."];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_includereactions(&has_bits);
          includereactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetDetails_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetDetails_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 publishedfileids = 1 [(.description) = "Set of published file Ids to retrieve details for."];
  for (int i = 0, n = this->_internal_publishedfileids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_publishedfileids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool includetags = 2 [(.description) = "If true, return tag information in the returned details."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_includetags(), target);
  }

  // optional bool includeadditionalpreviews = 3 [(.description) = "If true, return preview information in the returned details."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_includeadditionalpreviews(), target);
  }

  // optional bool includechildren = 4 [(.description) = "If true, return children in the returned details."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_includechildren(), target);
  }

  // optional bool includekvtags = 5 [(.description) = "If true, return key value tags in the returned details."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_includekvtags(), target);
  }

  // optional bool includevotes = 6 [(.description) = "If true, return vote data in the returned details."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_includevotes(), target);
  }

  // optional bool short_description = 8 [(.description) = "If true, return a short description instead of the full description."];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_short_description(), target);
  }

  // optional bool includeforsaledata = 10 [(.description) = "If true, return pricing data, if applicable."];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_includeforsaledata(), target);
  }

  // optional bool includemetadata = 11 [(.description) = "If true, populate the metadata field."];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_includemetadata(), target);
  }

  // optional int32 language = 12 [default = 0, (.description) = "Specifies the localized text to return. Defaults to English."];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_language(), target);
  }

  // optional uint32 return_playtime_stats = 13 [(.description) = "Return playtime stats for the specified number of days before today."];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_return_playtime_stats(), target);
  }

  // optional uint32 appid = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_appid(), target);
  }

  // optional bool strip_description_bbcode = 15 [(.description) = "Strips BBCode from descriptions."];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_strip_description_bbcode(), target);
  }

  // optional .EPublishedFileRevision desired_revision = 16 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_desired_revision(), target);
  }

  // optional bool includereactions = 17 [default = false, (.description) = "If true, then reactions to items will be returned."];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_includereactions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetDetails_Request)
  return target;
}

size_t CPublishedFile_GetDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetDetails_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 publishedfileids = 1 [(.description) = "Set of published file Ids to retrieve details for."];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_publishedfileids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_publishedfileids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool includetags = 2 [(.description) = "If true, return tag information in the returned details."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool includeadditionalpreviews = 3 [(.description) = "If true, return preview information in the returned details."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool includechildren = 4 [(.description) = "If true, return children in the returned details."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool includekvtags = 5 [(.description) = "If true, return key value tags in the returned details."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool includevotes = 6 [(.description) = "If true, return vote data in the returned details."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool short_description = 8 [(.description) = "If true, return a short description instead of the full description."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool includeforsaledata = 10 [(.description) = "If true, return pricing data, if applicable."];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool includemetadata = 11 [(.description) = "If true, populate the metadata field."];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional int32 language = 12 [default = 0, (.description) = "Specifies the localized text to return. Defaults to English."];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_language());
    }

    // optional uint32 return_playtime_stats = 13 [(.description) = "Return playtime stats for the specified number of days before today."];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_return_playtime_stats());
    }

    // optional uint32 appid = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional .EPublishedFileRevision desired_revision = 16 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_desired_revision());
    }

    // optional bool strip_description_bbcode = 15 [(.description) = "Strips BBCode from descriptions."];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool includereactions = 17 [default = false, (.description) = "If true, then reactions to items will be returned."];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetDetails_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetDetails_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetDetails_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetDetails_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetDetails_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetDetails_Request &>(from));
}


void CPublishedFile_GetDetails_Request::MergeFrom(const CPublishedFile_GetDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfileids_.MergeFrom(from.publishedfileids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      includetags_ = from.includetags_;
    }
    if (cached_has_bits & 0x00000002u) {
      includeadditionalpreviews_ = from.includeadditionalpreviews_;
    }
    if (cached_has_bits & 0x00000004u) {
      includechildren_ = from.includechildren_;
    }
    if (cached_has_bits & 0x00000008u) {
      includekvtags_ = from.includekvtags_;
    }
    if (cached_has_bits & 0x00000010u) {
      includevotes_ = from.includevotes_;
    }
    if (cached_has_bits & 0x00000020u) {
      short_description_ = from.short_description_;
    }
    if (cached_has_bits & 0x00000040u) {
      includeforsaledata_ = from.includeforsaledata_;
    }
    if (cached_has_bits & 0x00000080u) {
      includemetadata_ = from.includemetadata_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000200u) {
      return_playtime_stats_ = from.return_playtime_stats_;
    }
    if (cached_has_bits & 0x00000400u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000800u) {
      desired_revision_ = from.desired_revision_;
    }
    if (cached_has_bits & 0x00001000u) {
      strip_description_bbcode_ = from.strip_description_bbcode_;
    }
    if (cached_has_bits & 0x00002000u) {
      includereactions_ = from.includereactions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetDetails_Request::CopyFrom(const CPublishedFile_GetDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetDetails_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetDetails_Request::InternalSwap(CPublishedFile_GetDetails_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  publishedfileids_.InternalSwap(&other->publishedfileids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetDetails_Request, includereactions_)
      + sizeof(CPublishedFile_GetDetails_Request::includereactions_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetDetails_Request, includetags_)>(
          reinterpret_cast<char*>(&includetags_),
          reinterpret_cast<char*>(&other->includetags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetDetails_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[13]);
}

// ===================================================================

class PublishedFileDetails_Tag::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileDetails_Tag>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_adminonly(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PublishedFileDetails_Tag::PublishedFileDetails_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PublishedFileDetails.Tag)
}
PublishedFileDetails_Tag::PublishedFileDetails_Tag(const PublishedFileDetails_Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArenaForAllocation());
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_display_name()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArenaForAllocation());
  }
  adminonly_ = from.adminonly_;
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.Tag)
}

inline void PublishedFileDetails_Tag::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
adminonly_ = false;
}

PublishedFileDetails_Tag::~PublishedFileDetails_Tag() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.Tag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishedFileDetails_Tag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublishedFileDetails_Tag::ArenaDtor(void* object) {
  PublishedFileDetails_Tag* _this = reinterpret_cast< PublishedFileDetails_Tag* >(object);
  (void)_this;
}
void PublishedFileDetails_Tag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileDetails_Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileDetails_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileDetails.Tag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      display_name_.ClearNonDefaultToEmpty();
    }
  }
  adminonly_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileDetails_Tag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.Tag.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool adminonly = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_adminonly(&has_bits);
          adminonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string display_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.Tag.display_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishedFileDetails_Tag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.Tag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.Tag.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // optional bool adminonly = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_adminonly(), target);
  }

  // optional string display_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.Tag.display_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.Tag)
  return target;
}

size_t PublishedFileDetails_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileDetails.Tag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string display_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_name());
    }

    // optional bool adminonly = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishedFileDetails_Tag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishedFileDetails_Tag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishedFileDetails_Tag::GetClassData() const { return &_class_data_; }

void PublishedFileDetails_Tag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublishedFileDetails_Tag *>(to)->MergeFrom(
      static_cast<const PublishedFileDetails_Tag &>(from));
}


void PublishedFileDetails_Tag::MergeFrom(const PublishedFileDetails_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileDetails.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_display_name(from._internal_display_name());
    }
    if (cached_has_bits & 0x00000004u) {
      adminonly_ = from.adminonly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishedFileDetails_Tag::CopyFrom(const PublishedFileDetails_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileDetails.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Tag::IsInitialized() const {
  return true;
}

void PublishedFileDetails_Tag::InternalSwap(PublishedFileDetails_Tag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tag_, lhs_arena,
      &other->tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &display_name_, lhs_arena,
      &other->display_name_, rhs_arena
  );
  swap(adminonly_, other->adminonly_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileDetails_Tag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[14]);
}

// ===================================================================

class PublishedFileDetails_Preview::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileDetails_Preview>()._has_bits_);
  static void set_has_previewid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sortorder(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_youtubevideoid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preview_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_external_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PublishedFileDetails_Preview::PublishedFileDetails_Preview(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PublishedFileDetails.Preview)
}
PublishedFileDetails_Preview::PublishedFileDetails_Preview(const PublishedFileDetails_Preview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  youtubevideoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    youtubevideoid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_youtubevideoid()) {
    youtubevideoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_youtubevideoid(), 
      GetArenaForAllocation());
  }
  external_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    external_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_external_reference()) {
    external_reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_external_reference(), 
      GetArenaForAllocation());
  }
  ::memcpy(&previewid_, &from.previewid_,
    static_cast<size_t>(reinterpret_cast<char*>(&preview_type_) -
    reinterpret_cast<char*>(&previewid_)) + sizeof(preview_type_));
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.Preview)
}

inline void PublishedFileDetails_Preview::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
youtubevideoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  youtubevideoid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
external_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  external_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&previewid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preview_type_) -
    reinterpret_cast<char*>(&previewid_)) + sizeof(preview_type_));
}

PublishedFileDetails_Preview::~PublishedFileDetails_Preview() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.Preview)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishedFileDetails_Preview::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  youtubevideoid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublishedFileDetails_Preview::ArenaDtor(void* object) {
  PublishedFileDetails_Preview* _this = reinterpret_cast< PublishedFileDetails_Preview* >(object);
  (void)_this;
}
void PublishedFileDetails_Preview::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileDetails_Preview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileDetails_Preview::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileDetails.Preview)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      youtubevideoid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      external_reference_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&previewid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preview_type_) -
        reinterpret_cast<char*>(&previewid_)) + sizeof(preview_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileDetails_Preview::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 previewid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_previewid(&has_bits);
          previewid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sortorder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sortorder(&has_bits);
          sortorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.Preview.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.Preview.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string youtubevideoid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_youtubevideoid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.Preview.youtubevideoid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 preview_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_preview_type(&has_bits);
          preview_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string external_reference = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_external_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.Preview.external_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishedFileDetails_Preview::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.Preview)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 previewid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_previewid(), target);
  }

  // optional uint32 sortorder = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sortorder(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.Preview.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // optional uint32 size = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_size(), target);
  }

  // optional string filename = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.Preview.filename");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_filename(), target);
  }

  // optional string youtubevideoid = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_youtubevideoid().data(), static_cast<int>(this->_internal_youtubevideoid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.Preview.youtubevideoid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_youtubevideoid(), target);
  }

  // optional uint32 preview_type = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_preview_type(), target);
  }

  // optional string external_reference = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_external_reference().data(), static_cast<int>(this->_internal_external_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.Preview.external_reference");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_external_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.Preview)
  return target;
}

size_t PublishedFileDetails_Preview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileDetails.Preview)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string filename = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string youtubevideoid = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_youtubevideoid());
    }

    // optional string external_reference = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_external_reference());
    }

    // optional uint64 previewid = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_previewid());
    }

    // optional uint32 sortorder = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sortorder());
    }

    // optional uint32 size = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
    }

    // optional uint32 preview_type = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_preview_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishedFileDetails_Preview::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishedFileDetails_Preview::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishedFileDetails_Preview::GetClassData() const { return &_class_data_; }

void PublishedFileDetails_Preview::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublishedFileDetails_Preview *>(to)->MergeFrom(
      static_cast<const PublishedFileDetails_Preview &>(from));
}


void PublishedFileDetails_Preview::MergeFrom(const PublishedFileDetails_Preview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileDetails.Preview)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_youtubevideoid(from._internal_youtubevideoid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_external_reference(from._internal_external_reference());
    }
    if (cached_has_bits & 0x00000010u) {
      previewid_ = from.previewid_;
    }
    if (cached_has_bits & 0x00000020u) {
      sortorder_ = from.sortorder_;
    }
    if (cached_has_bits & 0x00000040u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000080u) {
      preview_type_ = from.preview_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishedFileDetails_Preview::CopyFrom(const PublishedFileDetails_Preview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileDetails.Preview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Preview::IsInitialized() const {
  return true;
}

void PublishedFileDetails_Preview::InternalSwap(PublishedFileDetails_Preview* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &youtubevideoid_, lhs_arena,
      &other->youtubevideoid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &external_reference_, lhs_arena,
      &other->external_reference_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishedFileDetails_Preview, preview_type_)
      + sizeof(PublishedFileDetails_Preview::preview_type_)
      - PROTOBUF_FIELD_OFFSET(PublishedFileDetails_Preview, previewid_)>(
          reinterpret_cast<char*>(&previewid_),
          reinterpret_cast<char*>(&other->previewid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileDetails_Preview::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[15]);
}

// ===================================================================

class PublishedFileDetails_Child::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileDetails_Child>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sortorder(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PublishedFileDetails_Child::PublishedFileDetails_Child(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PublishedFileDetails.Child)
}
PublishedFileDetails_Child::PublishedFileDetails_Child(const PublishedFileDetails_Child& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_type_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(file_type_));
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.Child)
}

inline void PublishedFileDetails_Child::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&file_type_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(file_type_));
}

PublishedFileDetails_Child::~PublishedFileDetails_Child() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.Child)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishedFileDetails_Child::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PublishedFileDetails_Child::ArenaDtor(void* object) {
  PublishedFileDetails_Child* _this = reinterpret_cast< PublishedFileDetails_Child* >(object);
  (void)_this;
}
void PublishedFileDetails_Child::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileDetails_Child::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileDetails_Child::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileDetails.Child)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_type_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(file_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileDetails_Child::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sortorder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sortorder(&has_bits);
          sortorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 file_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_file_type(&has_bits);
          file_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishedFileDetails_Child::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.Child)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional uint32 sortorder = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sortorder(), target);
  }

  // optional uint32 file_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_file_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.Child)
  return target;
}

size_t PublishedFileDetails_Child::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileDetails.Child)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
    }

    // optional uint32 sortorder = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sortorder());
    }

    // optional uint32 file_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_file_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishedFileDetails_Child::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishedFileDetails_Child::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishedFileDetails_Child::GetClassData() const { return &_class_data_; }

void PublishedFileDetails_Child::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublishedFileDetails_Child *>(to)->MergeFrom(
      static_cast<const PublishedFileDetails_Child &>(from));
}


void PublishedFileDetails_Child::MergeFrom(const PublishedFileDetails_Child& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileDetails.Child)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      sortorder_ = from.sortorder_;
    }
    if (cached_has_bits & 0x00000004u) {
      file_type_ = from.file_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishedFileDetails_Child::CopyFrom(const PublishedFileDetails_Child& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileDetails.Child)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Child::IsInitialized() const {
  return true;
}

void PublishedFileDetails_Child::InternalSwap(PublishedFileDetails_Child* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishedFileDetails_Child, file_type_)
      + sizeof(PublishedFileDetails_Child::file_type_)
      - PROTOBUF_FIELD_OFFSET(PublishedFileDetails_Child, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileDetails_Child::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[16]);
}

// ===================================================================

class PublishedFileDetails_KVTag::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileDetails_KVTag>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PublishedFileDetails_KVTag::PublishedFileDetails_KVTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PublishedFileDetails.KVTag)
}
PublishedFileDetails_KVTag::PublishedFileDetails_KVTag(const PublishedFileDetails_KVTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.KVTag)
}

inline void PublishedFileDetails_KVTag::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublishedFileDetails_KVTag::~PublishedFileDetails_KVTag() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.KVTag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishedFileDetails_KVTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublishedFileDetails_KVTag::ArenaDtor(void* object) {
  PublishedFileDetails_KVTag* _this = reinterpret_cast< PublishedFileDetails_KVTag* >(object);
  (void)_this;
}
void PublishedFileDetails_KVTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileDetails_KVTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileDetails_KVTag::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileDetails.KVTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileDetails_KVTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.KVTag.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.KVTag.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishedFileDetails_KVTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.KVTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.KVTag.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.KVTag.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.KVTag)
  return target;
}

size_t PublishedFileDetails_KVTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileDetails.KVTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishedFileDetails_KVTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishedFileDetails_KVTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishedFileDetails_KVTag::GetClassData() const { return &_class_data_; }

void PublishedFileDetails_KVTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublishedFileDetails_KVTag *>(to)->MergeFrom(
      static_cast<const PublishedFileDetails_KVTag &>(from));
}


void PublishedFileDetails_KVTag::MergeFrom(const PublishedFileDetails_KVTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileDetails.KVTag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishedFileDetails_KVTag::CopyFrom(const PublishedFileDetails_KVTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileDetails.KVTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_KVTag::IsInitialized() const {
  return true;
}

void PublishedFileDetails_KVTag::InternalSwap(PublishedFileDetails_KVTag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileDetails_KVTag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[17]);
}

// ===================================================================

class PublishedFileDetails_VoteData::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileDetails_VoteData>()._has_bits_);
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_votes_up(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_votes_down(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PublishedFileDetails_VoteData::PublishedFileDetails_VoteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PublishedFileDetails.VoteData)
}
PublishedFileDetails_VoteData::PublishedFileDetails_VoteData(const PublishedFileDetails_VoteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&votes_down_) -
    reinterpret_cast<char*>(&score_)) + sizeof(votes_down_));
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.VoteData)
}

inline void PublishedFileDetails_VoteData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&votes_down_) -
    reinterpret_cast<char*>(&score_)) + sizeof(votes_down_));
}

PublishedFileDetails_VoteData::~PublishedFileDetails_VoteData() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.VoteData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishedFileDetails_VoteData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PublishedFileDetails_VoteData::ArenaDtor(void* object) {
  PublishedFileDetails_VoteData* _this = reinterpret_cast< PublishedFileDetails_VoteData* >(object);
  (void)_this;
}
void PublishedFileDetails_VoteData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileDetails_VoteData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileDetails_VoteData::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileDetails.VoteData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&votes_down_) -
        reinterpret_cast<char*>(&score_)) + sizeof(votes_down_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileDetails_VoteData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 votes_up = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_votes_up(&has_bits);
          votes_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 votes_down = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_votes_down(&has_bits);
          votes_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishedFileDetails_VoteData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.VoteData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_score(), target);
  }

  // optional uint32 votes_up = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_votes_up(), target);
  }

  // optional uint32 votes_down = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_votes_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.VoteData)
  return target;
}

size_t PublishedFileDetails_VoteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileDetails.VoteData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float score = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 votes_up = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_votes_up());
    }

    // optional uint32 votes_down = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_votes_down());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishedFileDetails_VoteData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishedFileDetails_VoteData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishedFileDetails_VoteData::GetClassData() const { return &_class_data_; }

void PublishedFileDetails_VoteData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublishedFileDetails_VoteData *>(to)->MergeFrom(
      static_cast<const PublishedFileDetails_VoteData &>(from));
}


void PublishedFileDetails_VoteData::MergeFrom(const PublishedFileDetails_VoteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileDetails.VoteData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      votes_up_ = from.votes_up_;
    }
    if (cached_has_bits & 0x00000004u) {
      votes_down_ = from.votes_down_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishedFileDetails_VoteData::CopyFrom(const PublishedFileDetails_VoteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileDetails.VoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_VoteData::IsInitialized() const {
  return true;
}

void PublishedFileDetails_VoteData::InternalSwap(PublishedFileDetails_VoteData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishedFileDetails_VoteData, votes_down_)
      + sizeof(PublishedFileDetails_VoteData::votes_down_)
      - PROTOBUF_FIELD_OFFSET(PublishedFileDetails_VoteData, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileDetails_VoteData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[18]);
}

// ===================================================================

class PublishedFileDetails_ForSaleData::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileDetails_ForSaleData>()._has_bits_);
  static void set_has_is_for_sale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_price_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_estatus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_price_category_floor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_price_is_pay_what_you_want(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_discount_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

PublishedFileDetails_ForSaleData::PublishedFileDetails_ForSaleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PublishedFileDetails.ForSaleData)
}
PublishedFileDetails_ForSaleData::PublishedFileDetails_ForSaleData(const PublishedFileDetails_ForSaleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_category_, &from.price_category_,
    static_cast<size_t>(reinterpret_cast<char*>(&discount_percentage_) -
    reinterpret_cast<char*>(&price_category_)) + sizeof(discount_percentage_));
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.ForSaleData)
}

inline void PublishedFileDetails_ForSaleData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_category_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&discount_percentage_) -
    reinterpret_cast<char*>(&price_category_)) + sizeof(discount_percentage_));
}

PublishedFileDetails_ForSaleData::~PublishedFileDetails_ForSaleData() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.ForSaleData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishedFileDetails_ForSaleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PublishedFileDetails_ForSaleData::ArenaDtor(void* object) {
  PublishedFileDetails_ForSaleData* _this = reinterpret_cast< PublishedFileDetails_ForSaleData* >(object);
  (void)_this;
}
void PublishedFileDetails_ForSaleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileDetails_ForSaleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileDetails_ForSaleData::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileDetails.ForSaleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&price_category_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&discount_percentage_) -
        reinterpret_cast<char*>(&price_category_)) + sizeof(discount_percentage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileDetails_ForSaleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_for_sale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_for_sale(&has_bits);
          is_for_sale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 price_category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_price_category(&has_bits);
          price_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EPublishedFileForSaleStatus estatus = 3 [default = k_PFFSS_NotForSale];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPublishedFileForSaleStatus_IsValid(val))) {
            _internal_set_estatus(static_cast<::EPublishedFileForSaleStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 price_category_floor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_price_category_floor(&has_bits);
          price_category_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool price_is_pay_what_you_want = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_price_is_pay_what_you_want(&has_bits);
          price_is_pay_what_you_want_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 discount_percentage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_discount_percentage(&has_bits);
          discount_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishedFileDetails_ForSaleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.ForSaleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_for_sale = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_for_sale(), target);
  }

  // optional uint32 price_category = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_price_category(), target);
  }

  // optional .EPublishedFileForSaleStatus estatus = 3 [default = k_PFFSS_NotForSale];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_estatus(), target);
  }

  // optional uint32 price_category_floor = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_price_category_floor(), target);
  }

  // optional bool price_is_pay_what_you_want = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_price_is_pay_what_you_want(), target);
  }

  // optional uint32 discount_percentage = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_discount_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.ForSaleData)
  return target;
}

size_t PublishedFileDetails_ForSaleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileDetails.ForSaleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 price_category = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_price_category());
    }

    // optional .EPublishedFileForSaleStatus estatus = 3 [default = k_PFFSS_NotForSale];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_estatus());
    }

    // optional bool is_for_sale = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool price_is_pay_what_you_want = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 price_category_floor = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_price_category_floor());
    }

    // optional uint32 discount_percentage = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_discount_percentage());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishedFileDetails_ForSaleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishedFileDetails_ForSaleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishedFileDetails_ForSaleData::GetClassData() const { return &_class_data_; }

void PublishedFileDetails_ForSaleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublishedFileDetails_ForSaleData *>(to)->MergeFrom(
      static_cast<const PublishedFileDetails_ForSaleData &>(from));
}


void PublishedFileDetails_ForSaleData::MergeFrom(const PublishedFileDetails_ForSaleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileDetails.ForSaleData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      price_category_ = from.price_category_;
    }
    if (cached_has_bits & 0x00000002u) {
      estatus_ = from.estatus_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_for_sale_ = from.is_for_sale_;
    }
    if (cached_has_bits & 0x00000008u) {
      price_is_pay_what_you_want_ = from.price_is_pay_what_you_want_;
    }
    if (cached_has_bits & 0x00000010u) {
      price_category_floor_ = from.price_category_floor_;
    }
    if (cached_has_bits & 0x00000020u) {
      discount_percentage_ = from.discount_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishedFileDetails_ForSaleData::CopyFrom(const PublishedFileDetails_ForSaleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileDetails.ForSaleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_ForSaleData::IsInitialized() const {
  return true;
}

void PublishedFileDetails_ForSaleData::InternalSwap(PublishedFileDetails_ForSaleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishedFileDetails_ForSaleData, discount_percentage_)
      + sizeof(PublishedFileDetails_ForSaleData::discount_percentage_)
      - PROTOBUF_FIELD_OFFSET(PublishedFileDetails_ForSaleData, price_category_)>(
          reinterpret_cast<char*>(&price_category_),
          reinterpret_cast<char*>(&other->price_category_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileDetails_ForSaleData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[19]);
}

// ===================================================================

class PublishedFileDetails_PlaytimeStats::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileDetails_PlaytimeStats>()._has_bits_);
  static void set_has_playtime_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_sessions(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PublishedFileDetails_PlaytimeStats::PublishedFileDetails_PlaytimeStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PublishedFileDetails.PlaytimeStats)
}
PublishedFileDetails_PlaytimeStats::PublishedFileDetails_PlaytimeStats(const PublishedFileDetails_PlaytimeStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playtime_seconds_, &from.playtime_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_sessions_) -
    reinterpret_cast<char*>(&playtime_seconds_)) + sizeof(num_sessions_));
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.PlaytimeStats)
}

inline void PublishedFileDetails_PlaytimeStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playtime_seconds_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_sessions_) -
    reinterpret_cast<char*>(&playtime_seconds_)) + sizeof(num_sessions_));
}

PublishedFileDetails_PlaytimeStats::~PublishedFileDetails_PlaytimeStats() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.PlaytimeStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishedFileDetails_PlaytimeStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PublishedFileDetails_PlaytimeStats::ArenaDtor(void* object) {
  PublishedFileDetails_PlaytimeStats* _this = reinterpret_cast< PublishedFileDetails_PlaytimeStats* >(object);
  (void)_this;
}
void PublishedFileDetails_PlaytimeStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileDetails_PlaytimeStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileDetails_PlaytimeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileDetails.PlaytimeStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&playtime_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_sessions_) -
        reinterpret_cast<char*>(&playtime_seconds_)) + sizeof(num_sessions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileDetails_PlaytimeStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 playtime_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playtime_seconds(&has_bits);
          playtime_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 num_sessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_sessions(&has_bits);
          num_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishedFileDetails_PlaytimeStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.PlaytimeStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 playtime_seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playtime_seconds(), target);
  }

  // optional uint64 num_sessions = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_num_sessions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.PlaytimeStats)
  return target;
}

size_t PublishedFileDetails_PlaytimeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileDetails.PlaytimeStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 playtime_seconds = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_playtime_seconds());
    }

    // optional uint64 num_sessions = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_num_sessions());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishedFileDetails_PlaytimeStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishedFileDetails_PlaytimeStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishedFileDetails_PlaytimeStats::GetClassData() const { return &_class_data_; }

void PublishedFileDetails_PlaytimeStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublishedFileDetails_PlaytimeStats *>(to)->MergeFrom(
      static_cast<const PublishedFileDetails_PlaytimeStats &>(from));
}


void PublishedFileDetails_PlaytimeStats::MergeFrom(const PublishedFileDetails_PlaytimeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileDetails.PlaytimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playtime_seconds_ = from.playtime_seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_sessions_ = from.num_sessions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishedFileDetails_PlaytimeStats::CopyFrom(const PublishedFileDetails_PlaytimeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileDetails.PlaytimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_PlaytimeStats::IsInitialized() const {
  return true;
}

void PublishedFileDetails_PlaytimeStats::InternalSwap(PublishedFileDetails_PlaytimeStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishedFileDetails_PlaytimeStats, num_sessions_)
      + sizeof(PublishedFileDetails_PlaytimeStats::num_sessions_)
      - PROTOBUF_FIELD_OFFSET(PublishedFileDetails_PlaytimeStats, playtime_seconds_)>(
          reinterpret_cast<char*>(&playtime_seconds_),
          reinterpret_cast<char*>(&other->playtime_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileDetails_PlaytimeStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[20]);
}

// ===================================================================

class PublishedFileDetails_Reaction::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileDetails_Reaction>()._has_bits_);
  static void set_has_reactionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PublishedFileDetails_Reaction::PublishedFileDetails_Reaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PublishedFileDetails.Reaction)
}
PublishedFileDetails_Reaction::PublishedFileDetails_Reaction(const PublishedFileDetails_Reaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reactionid_, &from.reactionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&reactionid_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.Reaction)
}

inline void PublishedFileDetails_Reaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reactionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&reactionid_)) + sizeof(count_));
}

PublishedFileDetails_Reaction::~PublishedFileDetails_Reaction() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.Reaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishedFileDetails_Reaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PublishedFileDetails_Reaction::ArenaDtor(void* object) {
  PublishedFileDetails_Reaction* _this = reinterpret_cast< PublishedFileDetails_Reaction* >(object);
  (void)_this;
}
void PublishedFileDetails_Reaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileDetails_Reaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileDetails_Reaction::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileDetails.Reaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&reactionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&reactionid_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileDetails_Reaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 reactionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_reactionid(&has_bits);
          reactionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishedFileDetails_Reaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.Reaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 reactionid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reactionid(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.Reaction)
  return target;
}

size_t PublishedFileDetails_Reaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileDetails.Reaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 reactionid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_reactionid());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishedFileDetails_Reaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishedFileDetails_Reaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishedFileDetails_Reaction::GetClassData() const { return &_class_data_; }

void PublishedFileDetails_Reaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublishedFileDetails_Reaction *>(to)->MergeFrom(
      static_cast<const PublishedFileDetails_Reaction &>(from));
}


void PublishedFileDetails_Reaction::MergeFrom(const PublishedFileDetails_Reaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileDetails.Reaction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reactionid_ = from.reactionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishedFileDetails_Reaction::CopyFrom(const PublishedFileDetails_Reaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileDetails.Reaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Reaction::IsInitialized() const {
  return true;
}

void PublishedFileDetails_Reaction::InternalSwap(PublishedFileDetails_Reaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishedFileDetails_Reaction, count_)
      + sizeof(PublishedFileDetails_Reaction::count_)
      - PROTOBUF_FIELD_OFFSET(PublishedFileDetails_Reaction, reactionid_)>(
          reinterpret_cast<char*>(&reactionid_),
          reinterpret_cast<char*>(&other->reactionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileDetails_Reaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[21]);
}

// ===================================================================

class PublishedFileDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileDetails>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_creator(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_creator_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_consumer_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_consumer_shortcutid(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_preview_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_file_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preview_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_youtubevideoid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hcontent_file(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_hcontent_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_file_description(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_short_description(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_time_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_workshop_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_workshop_accepted(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_show_subscribe_all(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_num_comments_developer(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_num_comments_public(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_banned(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_ban_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_banner(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_can_be_deleted(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_incompatible(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_file_type(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_can_subscribe(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_subscriptions(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_favorited(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_followers(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_lifetime_subscriptions(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_lifetime_favorited(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_lifetime_followers(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_lifetime_playtime(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_lifetime_playtime_sessions(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_views(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_image_width(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_image_height(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_image_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_spoiler_tag(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_shortcutid(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_shortcutname(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_num_children(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_num_reports(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::PublishedFileDetails_VoteData& vote_data(const PublishedFileDetails* msg);
  static void set_has_vote_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::PublishedFileDetails_PlaytimeStats& playtime_stats(const PublishedFileDetails* msg);
  static void set_has_playtime_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_time_subscribed(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static const ::PublishedFileDetails_ForSaleData& for_sale_data(const PublishedFileDetails* msg);
  static void set_has_for_sale_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_maybe_inappropriate_sex(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_maybe_inappropriate_violence(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_revision_change_number(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_revision(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_ban_text_check_result(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_search_score(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
};

const ::PublishedFileDetails_VoteData&
PublishedFileDetails::_Internal::vote_data(const PublishedFileDetails* msg) {
  return *msg->vote_data_;
}
const ::PublishedFileDetails_PlaytimeStats&
PublishedFileDetails::_Internal::playtime_stats(const PublishedFileDetails* msg) {
  return *msg->playtime_stats_;
}
const ::PublishedFileDetails_ForSaleData&
PublishedFileDetails::_Internal::for_sale_data(const PublishedFileDetails* msg) {
  return *msg->for_sale_data_;
}
PublishedFileDetails::PublishedFileDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  previews_(arena),
  tags_(arena),
  children_(arena),
  kvtags_(arena),
  available_revisions_(arena),
  reactions_(arena),
  content_descriptorids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PublishedFileDetails)
}
PublishedFileDetails::PublishedFileDetails(const PublishedFileDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      previews_(from.previews_),
      tags_(from.tags_),
      children_(from.children_),
      kvtags_(from.kvtags_),
      available_revisions_(from.available_revisions_),
      reactions_(from.reactions_),
      content_descriptorids_(from.content_descriptorids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  file_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_url()) {
    file_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_url(), 
      GetArenaForAllocation());
  }
  preview_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    preview_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preview_url()) {
    preview_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preview_url(), 
      GetArenaForAllocation());
  }
  youtubevideoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    youtubevideoid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_youtubevideoid()) {
    youtubevideoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_youtubevideoid(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  file_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_description()) {
    file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_description(), 
      GetArenaForAllocation());
  }
  short_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    short_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_short_description()) {
    short_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_short_description(), 
      GetArenaForAllocation());
  }
  ban_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ban_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ban_reason()) {
    ban_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ban_reason(), 
      GetArenaForAllocation());
  }
  app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_name()) {
    app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_name(), 
      GetArenaForAllocation());
  }
  image_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image_url()) {
    image_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_url(), 
      GetArenaForAllocation());
  }
  shortcutname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    shortcutname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_shortcutname()) {
    shortcutname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shortcutname(), 
      GetArenaForAllocation());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_metadata()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_vote_data()) {
    vote_data_ = new ::PublishedFileDetails_VoteData(*from.vote_data_);
  } else {
    vote_data_ = nullptr;
  }
  if (from._internal_has_for_sale_data()) {
    for_sale_data_ = new ::PublishedFileDetails_ForSaleData(*from.for_sale_data_);
  } else {
    for_sale_data_ = nullptr;
  }
  if (from._internal_has_playtime_stats()) {
    playtime_stats_ = new ::PublishedFileDetails_PlaytimeStats(*from.playtime_stats_);
  } else {
    playtime_stats_ = nullptr;
  }
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&search_score_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(search_score_));
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails)
}

inline void PublishedFileDetails::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
preview_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  preview_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
youtubevideoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  youtubevideoid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
short_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  short_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ban_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ban_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
shortcutname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  shortcutname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vote_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&search_score_) -
    reinterpret_cast<char*>(&vote_data_)) + sizeof(search_score_));
}

PublishedFileDetails::~PublishedFileDetails() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PublishedFileDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preview_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  youtubevideoid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ban_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shortcutname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vote_data_;
  if (this != internal_default_instance()) delete for_sale_data_;
  if (this != internal_default_instance()) delete playtime_stats_;
}

void PublishedFileDetails::ArenaDtor(void* object) {
  PublishedFileDetails* _this = reinterpret_cast< PublishedFileDetails* >(object);
  (void)_this;
}
void PublishedFileDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  previews_.Clear();
  tags_.Clear();
  children_.Clear();
  kvtags_.Clear();
  available_revisions_.Clear();
  reactions_.Clear();
  content_descriptorids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      preview_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      youtubevideoid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      file_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      short_description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ban_reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      app_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      image_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      shortcutname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      metadata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(vote_data_ != nullptr);
      vote_data_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(for_sale_data_ != nullptr);
      for_sale_data_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(playtime_stats_ != nullptr);
      playtime_stats_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preview_file_size_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(preview_file_size_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&hcontent_file_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&workshop_accepted_) -
        reinterpret_cast<char*>(&hcontent_file_)) + sizeof(workshop_accepted_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&show_subscribe_all_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_be_deleted_) -
        reinterpret_cast<char*>(&show_subscribe_all_)) + sizeof(can_be_deleted_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&incompatible_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lifetime_followers_) -
        reinterpret_cast<char*>(&incompatible_)) + sizeof(lifetime_followers_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&views_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lifetime_playtime_) -
        reinterpret_cast<char*>(&views_)) + sizeof(lifetime_playtime_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&lifetime_playtime_sessions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&search_score_) -
        reinterpret_cast<char*>(&lifetime_playtime_sessions_)) + sizeof(search_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&_has_bits_);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 publishedfileid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_publishedfileid(&_has_bits_);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 creator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_creator(&_has_bits_);
          creator_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creator_appid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_creator_appid(&_has_bits_);
          creator_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 consumer_appid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_consumer_appid(&_has_bits_);
          consumer_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 consumer_shortcutid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_consumer_shortcutid(&_has_bits_);
          consumer_shortcutid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 file_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_file_size(&_has_bits_);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 preview_file_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_preview_file_size(&_has_bits_);
          preview_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string file_url = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_file_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.file_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string preview_url = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_preview_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.preview_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string youtubevideoid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_youtubevideoid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.youtubevideoid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 hcontent_file = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_hcontent_file(&_has_bits_);
          hcontent_file_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 hcontent_preview = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_hcontent_preview(&_has_bits_);
          hcontent_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string file_description = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_file_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.file_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string short_description = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_short_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.short_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_created = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_time_created(&_has_bits_);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_updated = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_time_updated(&_has_bits_);
          time_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 visibility = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_visibility(&_has_bits_);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_flags(&_has_bits_);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool workshop_file = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_workshop_file(&_has_bits_);
          workshop_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool workshop_accepted = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_workshop_accepted(&_has_bits_);
          workshop_accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_subscribe_all = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_show_subscribe_all(&_has_bits_);
          show_subscribe_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_comments_developer = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_num_comments_developer(&_has_bits_);
          num_comments_developer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_comments_public = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_num_comments_public(&_has_bits_);
          num_comments_public_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool banned = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_banned(&_has_bits_);
          banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ban_reason = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_ban_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.ban_reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 banner = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _Internal::set_has_banner(&_has_bits_);
          banner_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_be_deleted = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_can_be_deleted(&_has_bits_);
          can_be_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool incompatible = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_incompatible(&_has_bits_);
          incompatible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string app_name = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.app_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 file_type = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_file_type(&_has_bits_);
          file_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_subscribe = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_can_subscribe(&_has_bits_);
          can_subscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 subscriptions = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_subscriptions(&_has_bits_);
          subscriptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 favorited = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_favorited(&_has_bits_);
          favorited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 followers = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_followers(&_has_bits_);
          followers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lifetime_subscriptions = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_lifetime_subscriptions(&_has_bits_);
          lifetime_subscriptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lifetime_favorited = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_lifetime_favorited(&_has_bits_);
          lifetime_favorited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lifetime_followers = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_lifetime_followers(&_has_bits_);
          lifetime_followers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 views = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_views(&_has_bits_);
          views_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 image_width = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_image_width(&_has_bits_);
          image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 image_height = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_image_height(&_has_bits_);
          image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string image_url = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_image_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.image_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool spoiler_tag = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_spoiler_tag(&_has_bits_);
          spoiler_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shortcutid = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_shortcutid(&_has_bits_);
          shortcutid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string shortcutname = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_shortcutname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.shortcutname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_children = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_num_children(&_has_bits_);
          num_children_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_reports = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_num_reports(&_has_bits_);
          num_reports_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PublishedFileDetails.Preview previews = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_previews(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<410>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .PublishedFileDetails.Tag tags = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<418>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .PublishedFileDetails.Child children = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<426>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .PublishedFileDetails.KVTag kvtags = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_kvtags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<434>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .PublishedFileDetails.VoteData vote_data = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_subscribed = 56 [(.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_time_subscribed(&_has_bits_);
          time_subscribed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PublishedFileDetails.ForSaleData for_sale_data = 57 [(.description) = "Pricing information, if applicable."];
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_for_sale_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string metadata = 58 [(.description) = "Metadata associated with the item"];
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.metadata");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 language = 61 [default = 0, (.description) = "The language of the title and description."];
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_language(&_has_bits_);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lifetime_playtime = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_lifetime_playtime(&_has_bits_);
          lifetime_playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lifetime_playtime_sessions = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_lifetime_playtime_sessions(&_has_bits_);
          lifetime_playtime_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PublishedFileDetails.PlaytimeStats playtime_stats = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_playtime_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool maybe_inappropriate_sex = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_maybe_inappropriate_sex(&_has_bits_);
          maybe_inappropriate_sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool maybe_inappropriate_violence = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_maybe_inappropriate_violence(&_has_bits_);
          maybe_inappropriate_violence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 revision_change_number = 67 [(.description) = "The change number for the specified revision."];
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_revision_change_number(&_has_bits_);
          revision_change_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EPublishedFileRevision revision = 68 [default = k_EPublishedFileRevision_Default, (.description) = "The revision of the data returned, usually k_EPublishedFileRevision_Latest, but can be another revision/snapshot depending on the caller."];
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPublishedFileRevision_IsValid(val))) {
            _internal_set_revision(static_cast<::EPublishedFileRevision>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(68, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .EPublishedFileRevision available_revisions = 69 [(.description) = "Available revisions"];
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::EPublishedFileRevision_IsValid(val))) {
              _internal_add_available_revisions(static_cast<::EPublishedFileRevision>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(69, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<552>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_available_revisions(), ptr, ctx, ::EPublishedFileRevision_IsValid, &_internal_metadata_, 69);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PublishedFileDetails.Reaction reactions = 70 [(.description) = "Reactions to this item"];
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_reactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<562>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .EBanContentCheckResult ban_text_check_result = 71 [default = k_EBanContentCheckResult_NotScanned];
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EBanContentCheckResult_IsValid(val))) {
            _internal_set_ban_text_check_result(static_cast<::EBanContentCheckResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(71, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .EContentDescriptorID content_descriptorids = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::EContentDescriptorID_IsValid(val))) {
              _internal_add_content_descriptorids(static_cast<::EContentDescriptorID>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(72, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<576>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_content_descriptorids(), ptr, ctx, ::EContentDescriptorID_IsValid, &_internal_metadata_, 72);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float search_score = 73 [(.description) = "Search score, admin only"];
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_search_score(&_has_bits_);
          search_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishedFileDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_publishedfileid(), target);
  }

  // optional fixed64 creator = 3;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_creator(), target);
  }

  // optional uint32 creator_appid = 4;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_creator_appid(), target);
  }

  // optional uint32 consumer_appid = 5;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_consumer_appid(), target);
  }

  // optional uint32 consumer_shortcutid = 6;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_consumer_shortcutid(), target);
  }

  // optional string filename = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.filename");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_filename(), target);
  }

  // optional uint64 file_size = 8;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_file_size(), target);
  }

  // optional uint64 preview_file_size = 9;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_preview_file_size(), target);
  }

  // optional string file_url = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_url().data(), static_cast<int>(this->_internal_file_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.file_url");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_file_url(), target);
  }

  // optional string preview_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preview_url().data(), static_cast<int>(this->_internal_preview_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.preview_url");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_preview_url(), target);
  }

  // optional string youtubevideoid = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_youtubevideoid().data(), static_cast<int>(this->_internal_youtubevideoid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.youtubevideoid");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_youtubevideoid(), target);
  }

  // optional string url = 13;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.url");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_url(), target);
  }

  // optional fixed64 hcontent_file = 14;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(14, this->_internal_hcontent_file(), target);
  }

  // optional fixed64 hcontent_preview = 15;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(15, this->_internal_hcontent_preview(), target);
  }

  // optional string title = 16;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.title");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_title(), target);
  }

  // optional string file_description = 17;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_description().data(), static_cast<int>(this->_internal_file_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.file_description");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_file_description(), target);
  }

  // optional string short_description = 18;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_short_description().data(), static_cast<int>(this->_internal_short_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.short_description");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_short_description(), target);
  }

  // optional uint32 time_created = 19;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_time_created(), target);
  }

  // optional uint32 time_updated = 20;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_time_updated(), target);
  }

  // optional uint32 visibility = 21;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_visibility(), target);
  }

  // optional uint32 flags = 22;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_flags(), target);
  }

  // optional bool workshop_file = 23;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_workshop_file(), target);
  }

  // optional bool workshop_accepted = 24;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_workshop_accepted(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool show_subscribe_all = 25;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_show_subscribe_all(), target);
  }

  // optional int32 num_comments_developer = 26;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_num_comments_developer(), target);
  }

  // optional int32 num_comments_public = 27;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_num_comments_public(), target);
  }

  // optional bool banned = 28;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_banned(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ban_reason = 29;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ban_reason().data(), static_cast<int>(this->_internal_ban_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.ban_reason");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_ban_reason(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed64 banner = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(30, this->_internal_banner(), target);
  }

  // optional bool can_be_deleted = 31;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_can_be_deleted(), target);
  }

  // optional bool incompatible = 32;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_incompatible(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string app_name = 33;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.app_name");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_app_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 file_type = 34;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_file_type(), target);
  }

  // optional bool can_subscribe = 35;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_can_subscribe(), target);
  }

  // optional uint32 subscriptions = 36;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_subscriptions(), target);
  }

  // optional uint32 favorited = 37;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_favorited(), target);
  }

  // optional uint32 followers = 38;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_followers(), target);
  }

  // optional uint32 lifetime_subscriptions = 39;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_lifetime_subscriptions(), target);
  }

  // optional uint32 lifetime_favorited = 40;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_lifetime_favorited(), target);
  }

  // optional uint32 lifetime_followers = 41;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_lifetime_followers(), target);
  }

  // optional uint32 views = 42;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_views(), target);
  }

  // optional uint32 image_width = 43;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_image_width(), target);
  }

  // optional uint32 image_height = 44;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_image_height(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string image_url = 45;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image_url().data(), static_cast<int>(this->_internal_image_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.image_url");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_image_url(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool spoiler_tag = 46;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(46, this->_internal_spoiler_tag(), target);
  }

  // optional uint32 shortcutid = 47;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_shortcutid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string shortcutname = 48;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shortcutname().data(), static_cast<int>(this->_internal_shortcutname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.shortcutname");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_shortcutname(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 num_children = 49;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_num_children(), target);
  }

  // optional uint32 num_reports = 50;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_num_reports(), target);
  }

  // repeated .PublishedFileDetails.Preview previews = 51;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_previews_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, this->_internal_previews(i), target, stream);
  }

  // repeated .PublishedFileDetails.Tag tags = 52;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, this->_internal_tags(i), target, stream);
  }

  // repeated .PublishedFileDetails.Child children = 53;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, this->_internal_children(i), target, stream);
  }

  // repeated .PublishedFileDetails.KVTag kvtags = 54;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kvtags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, this->_internal_kvtags(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .PublishedFileDetails.VoteData vote_data = 55;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        55, _Internal::vote_data(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 time_subscribed = 56 [(.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_time_subscribed(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .PublishedFileDetails.ForSaleData for_sale_data = 57 [(.description) = "Pricing information, if applicable."];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        57, _Internal::for_sale_data(this), target, stream);
  }

  // optional string metadata = 58 [(.description) = "Metadata associated with the item"];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.metadata");
    target = stream->WriteStringMaybeAliased(
        58, this->_internal_metadata(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 language = 61 [default = 0, (.description) = "The language of the title and description."];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(61, this->_internal_language(), target);
  }

  // optional uint64 lifetime_playtime = 62;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(62, this->_internal_lifetime_playtime(), target);
  }

  // optional uint64 lifetime_playtime_sessions = 63;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(63, this->_internal_lifetime_playtime_sessions(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .PublishedFileDetails.PlaytimeStats playtime_stats = 64;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        64, _Internal::playtime_stats(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool maybe_inappropriate_sex = 65;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(65, this->_internal_maybe_inappropriate_sex(), target);
  }

  // optional bool maybe_inappropriate_violence = 66;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(66, this->_internal_maybe_inappropriate_violence(), target);
  }

  // optional uint64 revision_change_number = 67 [(.description) = "The change number for the specified revision."];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(67, this->_internal_revision_change_number(), target);
  }

  // optional .EPublishedFileRevision revision = 68 [default = k_EPublishedFileRevision_Default, (.description) = "The revision of the data returned, usually k_EPublishedFileRevision_Latest, but can be another revision/snapshot depending on the caller."];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      68, this->_internal_revision(), target);
  }

  // repeated .EPublishedFileRevision available_revisions = 69 [(.description) = "Available revisions"];
  for (int i = 0, n = this->_internal_available_revisions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        69, this->_internal_available_revisions(i), target);
  }

  // repeated .PublishedFileDetails.Reaction reactions = 70 [(.description) = "Reactions to this item"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, this->_internal_reactions(i), target, stream);
  }

  // optional .EBanContentCheckResult ban_text_check_result = 71 [default = k_EBanContentCheckResult_NotScanned];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      71, this->_internal_ban_text_check_result(), target);
  }

  // repeated .EContentDescriptorID content_descriptorids = 72;
  for (int i = 0, n = this->_internal_content_descriptorids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        72, this->_internal_content_descriptorids(i), target);
  }

  // optional float search_score = 73 [(.description) = "Search score, admin only"];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(73, this->_internal_search_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails)
  return target;
}

size_t PublishedFileDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PublishedFileDetails.Preview previews = 51;
  total_size += 2UL * this->_internal_previews_size();
  for (const auto& msg : this->previews_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PublishedFileDetails.Tag tags = 52;
  total_size += 2UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PublishedFileDetails.Child children = 53;
  total_size += 2UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PublishedFileDetails.KVTag kvtags = 54;
  total_size += 2UL * this->_internal_kvtags_size();
  for (const auto& msg : this->kvtags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .EPublishedFileRevision available_revisions = 69 [(.description) = "Available revisions"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_available_revisions_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_available_revisions(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .PublishedFileDetails.Reaction reactions = 70 [(.description) = "Reactions to this item"];
  total_size += 2UL * this->_internal_reactions_size();
  for (const auto& msg : this->reactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .EContentDescriptorID content_descriptorids = 72;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_content_descriptorids_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_content_descriptorids(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string filename = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string file_url = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_url());
    }

    // optional string preview_url = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preview_url());
    }

    // optional string youtubevideoid = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_youtubevideoid());
    }

    // optional string url = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string title = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string file_description = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_description());
    }

    // optional string short_description = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_description());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string ban_reason = 29;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ban_reason());
    }

    // optional string app_name = 33;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_name());
    }

    // optional string image_url = 45;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_url());
    }

    // optional string shortcutname = 48;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shortcutname());
    }

    // optional string metadata = 58 [(.description) = "Metadata associated with the item"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_metadata());
    }

    // optional .PublishedFileDetails.VoteData vote_data = 55;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vote_data_);
    }

    // optional .PublishedFileDetails.ForSaleData for_sale_data = 57 [(.description) = "Pricing information, if applicable."];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *for_sale_data_);
    }

    // optional .PublishedFileDetails.PlaytimeStats playtime_stats = 64;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *playtime_stats_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint64 publishedfileid = 2;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
    }

    // optional uint32 result = 1;
    if (cached_has_bits & 0x00020000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
    }

    // optional uint32 creator_appid = 4;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_creator_appid());
    }

    // optional fixed64 creator = 3;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 8;
    }

    // optional uint32 consumer_appid = 5;
    if (cached_has_bits & 0x00100000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_consumer_appid());
    }

    // optional uint32 consumer_shortcutid = 6;
    if (cached_has_bits & 0x00200000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_consumer_shortcutid());
    }

    // optional uint64 file_size = 8;
    if (cached_has_bits & 0x00400000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_file_size());
    }

    // optional uint64 preview_file_size = 9;
    if (cached_has_bits & 0x00800000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_preview_file_size());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional fixed64 hcontent_file = 14;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 8;
    }

    // optional fixed64 hcontent_preview = 15;
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 8;
    }

    // optional uint32 time_created = 19;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_created());
    }

    // optional uint32 time_updated = 20;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_updated());
    }

    // optional uint32 visibility = 21;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_visibility());
    }

    // optional uint32 flags = 22;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional bool workshop_file = 23;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool workshop_accepted = 24;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool show_subscribe_all = 25;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool banned = 28;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional int32 num_comments_developer = 26;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_comments_developer());
    }

    // optional fixed64 banner = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional int32 num_comments_public = 27;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_comments_public());
    }

    // optional uint32 file_type = 34;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_file_type());
    }

    // optional uint32 subscriptions = 36;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_subscriptions());
    }

    // optional bool can_be_deleted = 31;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool incompatible = 32;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool can_subscribe = 35;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool spoiler_tag = 46;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional uint32 favorited = 37;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_favorited());
    }

    // optional uint32 followers = 38;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_followers());
    }

    // optional uint32 lifetime_subscriptions = 39;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lifetime_subscriptions());
    }

    // optional uint32 lifetime_favorited = 40;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lifetime_favorited());
    }

    // optional uint32 lifetime_followers = 41;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lifetime_followers());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 views = 42;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_views());
    }

    // optional uint32 image_width = 43;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_image_width());
    }

    // optional uint32 image_height = 44;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_image_height());
    }

    // optional uint32 shortcutid = 47;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_shortcutid());
    }

    // optional uint32 num_children = 49;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_children());
    }

    // optional uint32 num_reports = 50;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_reports());
    }

    // optional uint32 time_subscribed = 56 [(.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_subscribed());
    }

    // optional uint64 lifetime_playtime = 62;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lifetime_playtime());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint64 lifetime_playtime_sessions = 63;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lifetime_playtime_sessions());
    }

    // optional int32 language = 61 [default = 0, (.description) = "The language of the title and description."];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_language());
    }

    // optional bool maybe_inappropriate_sex = 65;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool maybe_inappropriate_violence = 66;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional uint64 revision_change_number = 67 [(.description) = "The change number for the specified revision."];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_revision_change_number());
    }

    // optional .EPublishedFileRevision revision = 68 [default = k_EPublishedFileRevision_Default, (.description) = "The revision of the data returned, usually k_EPublishedFileRevision_Latest, but can be another revision/snapshot depending on the caller."];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_revision());
    }

    // optional .EBanContentCheckResult ban_text_check_result = 71 [default = k_EBanContentCheckResult_NotScanned];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ban_text_check_result());
    }

    // optional float search_score = 73 [(.description) = "Search score, admin only"];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishedFileDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PublishedFileDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishedFileDetails::GetClassData() const { return &_class_data_; }

void PublishedFileDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PublishedFileDetails *>(to)->MergeFrom(
      static_cast<const PublishedFileDetails &>(from));
}


void PublishedFileDetails::MergeFrom(const PublishedFileDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileDetails)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  previews_.MergeFrom(from.previews_);
  tags_.MergeFrom(from.tags_);
  children_.MergeFrom(from.children_);
  kvtags_.MergeFrom(from.kvtags_);
  available_revisions_.MergeFrom(from.available_revisions_);
  reactions_.MergeFrom(from.reactions_);
  content_descriptorids_.MergeFrom(from.content_descriptorids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_url(from._internal_file_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_preview_url(from._internal_preview_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_youtubevideoid(from._internal_youtubevideoid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_file_description(from._internal_file_description());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_short_description(from._internal_short_description());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_ban_reason(from._internal_ban_reason());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_image_url(from._internal_image_url());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_shortcutname(from._internal_shortcutname());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_metadata(from._internal_metadata());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_vote_data()->::PublishedFileDetails_VoteData::MergeFrom(from._internal_vote_data());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_for_sale_data()->::PublishedFileDetails_ForSaleData::MergeFrom(from._internal_for_sale_data());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_playtime_stats()->::PublishedFileDetails_PlaytimeStats::MergeFrom(from._internal_playtime_stats());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00020000u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00040000u) {
      creator_appid_ = from.creator_appid_;
    }
    if (cached_has_bits & 0x00080000u) {
      creator_ = from.creator_;
    }
    if (cached_has_bits & 0x00100000u) {
      consumer_appid_ = from.consumer_appid_;
    }
    if (cached_has_bits & 0x00200000u) {
      consumer_shortcutid_ = from.consumer_shortcutid_;
    }
    if (cached_has_bits & 0x00400000u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00800000u) {
      preview_file_size_ = from.preview_file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      hcontent_file_ = from.hcontent_file_;
    }
    if (cached_has_bits & 0x02000000u) {
      hcontent_preview_ = from.hcontent_preview_;
    }
    if (cached_has_bits & 0x04000000u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x08000000u) {
      time_updated_ = from.time_updated_;
    }
    if (cached_has_bits & 0x10000000u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x20000000u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x40000000u) {
      workshop_file_ = from.workshop_file_;
    }
    if (cached_has_bits & 0x80000000u) {
      workshop_accepted_ = from.workshop_accepted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      show_subscribe_all_ = from.show_subscribe_all_;
    }
    if (cached_has_bits & 0x00000002u) {
      banned_ = from.banned_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_comments_developer_ = from.num_comments_developer_;
    }
    if (cached_has_bits & 0x00000008u) {
      banner_ = from.banner_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_comments_public_ = from.num_comments_public_;
    }
    if (cached_has_bits & 0x00000020u) {
      file_type_ = from.file_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      subscriptions_ = from.subscriptions_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_be_deleted_ = from.can_be_deleted_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      incompatible_ = from.incompatible_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_subscribe_ = from.can_subscribe_;
    }
    if (cached_has_bits & 0x00000400u) {
      spoiler_tag_ = from.spoiler_tag_;
    }
    if (cached_has_bits & 0x00000800u) {
      favorited_ = from.favorited_;
    }
    if (cached_has_bits & 0x00001000u) {
      followers_ = from.followers_;
    }
    if (cached_has_bits & 0x00002000u) {
      lifetime_subscriptions_ = from.lifetime_subscriptions_;
    }
    if (cached_has_bits & 0x00004000u) {
      lifetime_favorited_ = from.lifetime_favorited_;
    }
    if (cached_has_bits & 0x00008000u) {
      lifetime_followers_ = from.lifetime_followers_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00020000u) {
      image_width_ = from.image_width_;
    }
    if (cached_has_bits & 0x00040000u) {
      image_height_ = from.image_height_;
    }
    if (cached_has_bits & 0x00080000u) {
      shortcutid_ = from.shortcutid_;
    }
    if (cached_has_bits & 0x00100000u) {
      num_children_ = from.num_children_;
    }
    if (cached_has_bits & 0x00200000u) {
      num_reports_ = from.num_reports_;
    }
    if (cached_has_bits & 0x00400000u) {
      time_subscribed_ = from.time_subscribed_;
    }
    if (cached_has_bits & 0x00800000u) {
      lifetime_playtime_ = from.lifetime_playtime_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      lifetime_playtime_sessions_ = from.lifetime_playtime_sessions_;
    }
    if (cached_has_bits & 0x02000000u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x04000000u) {
      maybe_inappropriate_sex_ = from.maybe_inappropriate_sex_;
    }
    if (cached_has_bits & 0x08000000u) {
      maybe_inappropriate_violence_ = from.maybe_inappropriate_violence_;
    }
    if (cached_has_bits & 0x10000000u) {
      revision_change_number_ = from.revision_change_number_;
    }
    if (cached_has_bits & 0x20000000u) {
      revision_ = from.revision_;
    }
    if (cached_has_bits & 0x40000000u) {
      ban_text_check_result_ = from.ban_text_check_result_;
    }
    if (cached_has_bits & 0x80000000u) {
      search_score_ = from.search_score_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishedFileDetails::CopyFrom(const PublishedFileDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails::IsInitialized() const {
  return true;
}

void PublishedFileDetails::InternalSwap(PublishedFileDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  previews_.InternalSwap(&other->previews_);
  tags_.InternalSwap(&other->tags_);
  children_.InternalSwap(&other->children_);
  kvtags_.InternalSwap(&other->kvtags_);
  available_revisions_.InternalSwap(&other->available_revisions_);
  reactions_.InternalSwap(&other->reactions_);
  content_descriptorids_.InternalSwap(&other->content_descriptorids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_url_, lhs_arena,
      &other->file_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &preview_url_, lhs_arena,
      &other->preview_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &youtubevideoid_, lhs_arena,
      &other->youtubevideoid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_description_, lhs_arena,
      &other->file_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &short_description_, lhs_arena,
      &other->short_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ban_reason_, lhs_arena,
      &other->ban_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_name_, lhs_arena,
      &other->app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_url_, lhs_arena,
      &other->image_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shortcutname_, lhs_arena,
      &other->shortcutname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &metadata_, lhs_arena,
      &other->metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishedFileDetails, search_score_)
      + sizeof(PublishedFileDetails::search_score_)
      - PROTOBUF_FIELD_OFFSET(PublishedFileDetails, vote_data_)>(
          reinterpret_cast<char*>(&vote_data_),
          reinterpret_cast<char*>(&other->vote_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileDetails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[22]);
}

// ===================================================================

class CPublishedFile_GetDetails_Response::_Internal {
 public:
};

CPublishedFile_GetDetails_Response::CPublishedFile_GetDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  publishedfiledetails_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetDetails_Response)
}
CPublishedFile_GetDetails_Response::CPublishedFile_GetDetails_Response(const CPublishedFile_GetDetails_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      publishedfiledetails_(from.publishedfiledetails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetDetails_Response)
}

inline void CPublishedFile_GetDetails_Response::SharedCtor() {
}

CPublishedFile_GetDetails_Response::~CPublishedFile_GetDetails_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetDetails_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetDetails_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetDetails_Response::ArenaDtor(void* object) {
  CPublishedFile_GetDetails_Response* _this = reinterpret_cast< CPublishedFile_GetDetails_Response* >(object);
  (void)_this;
}
void CPublishedFile_GetDetails_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetDetails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetDetails_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfiledetails_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetDetails_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PublishedFileDetails publishedfiledetails = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publishedfiledetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetDetails_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetDetails_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PublishedFileDetails publishedfiledetails = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_publishedfiledetails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_publishedfiledetails(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetDetails_Response)
  return target;
}

size_t CPublishedFile_GetDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetDetails_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PublishedFileDetails publishedfiledetails = 1;
  total_size += 1UL * this->_internal_publishedfiledetails_size();
  for (const auto& msg : this->publishedfiledetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetDetails_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetDetails_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetDetails_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetDetails_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetDetails_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetDetails_Response &>(from));
}


void CPublishedFile_GetDetails_Response::MergeFrom(const CPublishedFile_GetDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfiledetails_.MergeFrom(from.publishedfiledetails_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetDetails_Response::CopyFrom(const CPublishedFile_GetDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetDetails_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetDetails_Response::InternalSwap(CPublishedFile_GetDetails_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  publishedfiledetails_.InternalSwap(&other->publishedfiledetails_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetDetails_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[23]);
}

// ===================================================================

class CPublishedFile_GetItemInfo_Request_WorkshopItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetItemInfo_Request_WorkshopItem>()._has_bits_);
  static void set_has_published_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desired_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPublishedFile_GetItemInfo_Request_WorkshopItem::CPublishedFile_GetItemInfo_Request_WorkshopItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetItemInfo_Request.WorkshopItem)
}
CPublishedFile_GetItemInfo_Request_WorkshopItem::CPublishedFile_GetItemInfo_Request_WorkshopItem(const CPublishedFile_GetItemInfo_Request_WorkshopItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&published_file_id_, &from.published_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&desired_revision_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(desired_revision_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetItemInfo_Request.WorkshopItem)
}

inline void CPublishedFile_GetItemInfo_Request_WorkshopItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&published_file_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&desired_revision_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(desired_revision_));
}

CPublishedFile_GetItemInfo_Request_WorkshopItem::~CPublishedFile_GetItemInfo_Request_WorkshopItem() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetItemInfo_Request.WorkshopItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetItemInfo_Request_WorkshopItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetItemInfo_Request_WorkshopItem::ArenaDtor(void* object) {
  CPublishedFile_GetItemInfo_Request_WorkshopItem* _this = reinterpret_cast< CPublishedFile_GetItemInfo_Request_WorkshopItem* >(object);
  (void)_this;
}
void CPublishedFile_GetItemInfo_Request_WorkshopItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetItemInfo_Request_WorkshopItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetItemInfo_Request_WorkshopItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetItemInfo_Request.WorkshopItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&published_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&desired_revision_) -
        reinterpret_cast<char*>(&published_file_id_)) + sizeof(desired_revision_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetItemInfo_Request_WorkshopItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 published_file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_published_file_id(&has_bits);
          published_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_updated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_updated(&has_bits);
          time_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EPublishedFileRevision desired_revision = 3 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPublishedFileRevision_IsValid(val))) {
            _internal_set_desired_revision(static_cast<::EPublishedFileRevision>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetItemInfo_Request_WorkshopItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetItemInfo_Request.WorkshopItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 published_file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_published_file_id(), target);
  }

  // optional uint32 time_updated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_updated(), target);
  }

  // optional .EPublishedFileRevision desired_revision = 3 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_desired_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetItemInfo_Request.WorkshopItem)
  return target;
}

size_t CPublishedFile_GetItemInfo_Request_WorkshopItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetItemInfo_Request.WorkshopItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 published_file_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 time_updated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_updated());
    }

    // optional .EPublishedFileRevision desired_revision = 3 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_desired_revision());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetItemInfo_Request_WorkshopItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetItemInfo_Request_WorkshopItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetItemInfo_Request_WorkshopItem::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetItemInfo_Request_WorkshopItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetItemInfo_Request_WorkshopItem *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetItemInfo_Request_WorkshopItem &>(from));
}


void CPublishedFile_GetItemInfo_Request_WorkshopItem::MergeFrom(const CPublishedFile_GetItemInfo_Request_WorkshopItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetItemInfo_Request.WorkshopItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      published_file_id_ = from.published_file_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_updated_ = from.time_updated_;
    }
    if (cached_has_bits & 0x00000004u) {
      desired_revision_ = from.desired_revision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetItemInfo_Request_WorkshopItem::CopyFrom(const CPublishedFile_GetItemInfo_Request_WorkshopItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetItemInfo_Request.WorkshopItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetItemInfo_Request_WorkshopItem::IsInitialized() const {
  return true;
}

void CPublishedFile_GetItemInfo_Request_WorkshopItem::InternalSwap(CPublishedFile_GetItemInfo_Request_WorkshopItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetItemInfo_Request_WorkshopItem, desired_revision_)
      + sizeof(CPublishedFile_GetItemInfo_Request_WorkshopItem::desired_revision_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetItemInfo_Request_WorkshopItem, published_file_id_)>(
          reinterpret_cast<char*>(&published_file_id_),
          reinterpret_cast<char*>(&other->published_file_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetItemInfo_Request_WorkshopItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[24]);
}

// ===================================================================

class CPublishedFile_GetItemInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetItemInfo_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_time_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_GetItemInfo_Request::CPublishedFile_GetItemInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  workshop_items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetItemInfo_Request)
}
CPublishedFile_GetItemInfo_Request::CPublishedFile_GetItemInfo_Request(const CPublishedFile_GetItemInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      workshop_items_(from.workshop_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_time_updated_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(last_time_updated_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetItemInfo_Request)
}

inline void CPublishedFile_GetItemInfo_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_time_updated_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(last_time_updated_));
}

CPublishedFile_GetItemInfo_Request::~CPublishedFile_GetItemInfo_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetItemInfo_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetItemInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetItemInfo_Request::ArenaDtor(void* object) {
  CPublishedFile_GetItemInfo_Request* _this = reinterpret_cast< CPublishedFile_GetItemInfo_Request* >(object);
  (void)_this;
}
void CPublishedFile_GetItemInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetItemInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetItemInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetItemInfo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workshop_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_time_updated_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(last_time_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetItemInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_time_updated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last_time_updated(&has_bits);
          last_time_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPublishedFile_GetItemInfo_Request.WorkshopItem workshop_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workshop_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetItemInfo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetItemInfo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 last_time_updated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_time_updated(), target);
  }

  // repeated .CPublishedFile_GetItemInfo_Request.WorkshopItem workshop_items = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workshop_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_workshop_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetItemInfo_Request)
  return target;
}

size_t CPublishedFile_GetItemInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetItemInfo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPublishedFile_GetItemInfo_Request.WorkshopItem workshop_items = 3;
  total_size += 1UL * this->_internal_workshop_items_size();
  for (const auto& msg : this->workshop_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 last_time_updated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_time_updated());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetItemInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetItemInfo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetItemInfo_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetItemInfo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetItemInfo_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetItemInfo_Request &>(from));
}


void CPublishedFile_GetItemInfo_Request::MergeFrom(const CPublishedFile_GetItemInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetItemInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  workshop_items_.MergeFrom(from.workshop_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_time_updated_ = from.last_time_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetItemInfo_Request::CopyFrom(const CPublishedFile_GetItemInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetItemInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetItemInfo_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetItemInfo_Request::InternalSwap(CPublishedFile_GetItemInfo_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  workshop_items_.InternalSwap(&other->workshop_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetItemInfo_Request, last_time_updated_)
      + sizeof(CPublishedFile_GetItemInfo_Request::last_time_updated_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetItemInfo_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetItemInfo_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[25]);
}

// ===================================================================

class CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetItemInfo_Response_WorkshopItemInfo>()._has_bits_);
  static void set_has_published_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_manifest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
}
CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo(const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&published_file_id_, &from.published_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
}

inline void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&published_file_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(flags_));
}

CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::~CPublishedFile_GetItemInfo_Response_WorkshopItemInfo() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::ArenaDtor(void* object) {
  CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* _this = reinterpret_cast< CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* >(object);
  (void)_this;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&published_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&published_file_id_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 published_file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_published_file_id(&has_bits);
          published_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_updated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_updated(&has_bits);
          time_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 manifest_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_manifest_id(&has_bits);
          manifest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 published_file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_published_file_id(), target);
  }

  // optional uint32 time_updated = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_updated(), target);
  }

  // optional fixed64 manifest_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_manifest_id(), target);
  }

  // optional uint32 flags = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  return target;
}

size_t CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 published_file_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 manifest_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 time_updated = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_updated());
    }

    // optional uint32 flags = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetItemInfo_Response_WorkshopItemInfo *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo &>(from));
}


void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::MergeFrom(const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      published_file_id_ = from.published_file_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      manifest_id_ = from.manifest_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_updated_ = from.time_updated_;
    }
    if (cached_has_bits & 0x00000008u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::CopyFrom(const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::IsInitialized() const {
  return true;
}

void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::InternalSwap(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo, flags_)
      + sizeof(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::flags_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo, published_file_id_)>(
          reinterpret_cast<char*>(&published_file_id_),
          reinterpret_cast<char*>(&other->published_file_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[26]);
}

// ===================================================================

class CPublishedFile_GetItemInfo_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetItemInfo_Response>()._has_bits_);
  static void set_has_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_GetItemInfo_Response::CPublishedFile_GetItemInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  workshop_items_(arena),
  private_items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetItemInfo_Response)
}
CPublishedFile_GetItemInfo_Response::CPublishedFile_GetItemInfo_Response(const CPublishedFile_GetItemInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      workshop_items_(from.workshop_items_),
      private_items_(from.private_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  update_time_ = from.update_time_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetItemInfo_Response)
}

inline void CPublishedFile_GetItemInfo_Response::SharedCtor() {
update_time_ = 0u;
}

CPublishedFile_GetItemInfo_Response::~CPublishedFile_GetItemInfo_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetItemInfo_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetItemInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetItemInfo_Response::ArenaDtor(void* object) {
  CPublishedFile_GetItemInfo_Response* _this = reinterpret_cast< CPublishedFile_GetItemInfo_Response* >(object);
  (void)_this;
}
void CPublishedFile_GetItemInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetItemInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetItemInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetItemInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workshop_items_.Clear();
  private_items_.Clear();
  update_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetItemInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 update_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_update_time(&has_bits);
          update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPublishedFile_GetItemInfo_Response.WorkshopItemInfo workshop_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workshop_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 private_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_private_items(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_private_items(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetItemInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetItemInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 update_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_update_time(), target);
  }

  // repeated .CPublishedFile_GetItemInfo_Response.WorkshopItemInfo workshop_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workshop_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_workshop_items(i), target, stream);
  }

  // repeated fixed64 private_items = 3;
  for (int i = 0, n = this->_internal_private_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_private_items(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetItemInfo_Response)
  return target;
}

size_t CPublishedFile_GetItemInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetItemInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPublishedFile_GetItemInfo_Response.WorkshopItemInfo workshop_items = 2;
  total_size += 1UL * this->_internal_workshop_items_size();
  for (const auto& msg : this->workshop_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed64 private_items = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_private_items_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_private_items_size());
    total_size += data_size;
  }

  // optional uint32 update_time = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_update_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetItemInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetItemInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetItemInfo_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetItemInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetItemInfo_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetItemInfo_Response &>(from));
}


void CPublishedFile_GetItemInfo_Response::MergeFrom(const CPublishedFile_GetItemInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetItemInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  workshop_items_.MergeFrom(from.workshop_items_);
  private_items_.MergeFrom(from.private_items_);
  if (from._internal_has_update_time()) {
    _internal_set_update_time(from._internal_update_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetItemInfo_Response::CopyFrom(const CPublishedFile_GetItemInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetItemInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetItemInfo_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetItemInfo_Response::InternalSwap(CPublishedFile_GetItemInfo_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  workshop_items_.InternalSwap(&other->workshop_items_);
  private_items_.InternalSwap(&other->private_items_);
  swap(update_time_, other->update_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetItemInfo_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[27]);
}

// ===================================================================

class CPublishedFile_GetUserFiles_Request_KVTag::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetUserFiles_Request_KVTag>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_GetUserFiles_Request_KVTag::CPublishedFile_GetUserFiles_Request_KVTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetUserFiles_Request.KVTag)
}
CPublishedFile_GetUserFiles_Request_KVTag::CPublishedFile_GetUserFiles_Request_KVTag(const CPublishedFile_GetUserFiles_Request_KVTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetUserFiles_Request.KVTag)
}

inline void CPublishedFile_GetUserFiles_Request_KVTag::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CPublishedFile_GetUserFiles_Request_KVTag::~CPublishedFile_GetUserFiles_Request_KVTag() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetUserFiles_Request.KVTag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetUserFiles_Request_KVTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_GetUserFiles_Request_KVTag::ArenaDtor(void* object) {
  CPublishedFile_GetUserFiles_Request_KVTag* _this = reinterpret_cast< CPublishedFile_GetUserFiles_Request_KVTag* >(object);
  (void)_this;
}
void CPublishedFile_GetUserFiles_Request_KVTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetUserFiles_Request_KVTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetUserFiles_Request_KVTag::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetUserFiles_Request.KVTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetUserFiles_Request_KVTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_GetUserFiles_Request.KVTag.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_GetUserFiles_Request.KVTag.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetUserFiles_Request_KVTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetUserFiles_Request.KVTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_GetUserFiles_Request.KVTag.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_GetUserFiles_Request.KVTag.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetUserFiles_Request.KVTag)
  return target;
}

size_t CPublishedFile_GetUserFiles_Request_KVTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetUserFiles_Request.KVTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetUserFiles_Request_KVTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetUserFiles_Request_KVTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetUserFiles_Request_KVTag::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetUserFiles_Request_KVTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetUserFiles_Request_KVTag *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetUserFiles_Request_KVTag &>(from));
}


void CPublishedFile_GetUserFiles_Request_KVTag::MergeFrom(const CPublishedFile_GetUserFiles_Request_KVTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetUserFiles_Request.KVTag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetUserFiles_Request_KVTag::CopyFrom(const CPublishedFile_GetUserFiles_Request_KVTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetUserFiles_Request.KVTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Request_KVTag::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserFiles_Request_KVTag::InternalSwap(CPublishedFile_GetUserFiles_Request_KVTag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetUserFiles_Request_KVTag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[28]);
}

// ===================================================================

class CPublishedFile_GetUserFiles_Request_TagGroup::_Internal {
 public:
};

CPublishedFile_GetUserFiles_Request_TagGroup::CPublishedFile_GetUserFiles_Request_TagGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetUserFiles_Request.TagGroup)
}
CPublishedFile_GetUserFiles_Request_TagGroup::CPublishedFile_GetUserFiles_Request_TagGroup(const CPublishedFile_GetUserFiles_Request_TagGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetUserFiles_Request.TagGroup)
}

inline void CPublishedFile_GetUserFiles_Request_TagGroup::SharedCtor() {
}

CPublishedFile_GetUserFiles_Request_TagGroup::~CPublishedFile_GetUserFiles_Request_TagGroup() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetUserFiles_Request.TagGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetUserFiles_Request_TagGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetUserFiles_Request_TagGroup::ArenaDtor(void* object) {
  CPublishedFile_GetUserFiles_Request_TagGroup* _this = reinterpret_cast< CPublishedFile_GetUserFiles_Request_TagGroup* >(object);
  (void)_this;
}
void CPublishedFile_GetUserFiles_Request_TagGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetUserFiles_Request_TagGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetUserFiles_Request_TagGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetUserFiles_Request.TagGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetUserFiles_Request_TagGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_GetUserFiles_Request.TagGroup.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetUserFiles_Request_TagGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetUserFiles_Request.TagGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tags = 1;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_GetUserFiles_Request.TagGroup.tags");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetUserFiles_Request.TagGroup)
  return target;
}

size_t CPublishedFile_GetUserFiles_Request_TagGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetUserFiles_Request.TagGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetUserFiles_Request_TagGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetUserFiles_Request_TagGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetUserFiles_Request_TagGroup::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetUserFiles_Request_TagGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetUserFiles_Request_TagGroup *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetUserFiles_Request_TagGroup &>(from));
}


void CPublishedFile_GetUserFiles_Request_TagGroup::MergeFrom(const CPublishedFile_GetUserFiles_Request_TagGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetUserFiles_Request.TagGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetUserFiles_Request_TagGroup::CopyFrom(const CPublishedFile_GetUserFiles_Request_TagGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetUserFiles_Request.TagGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Request_TagGroup::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserFiles_Request_TagGroup::InternalSwap(CPublishedFile_GetUserFiles_Request_TagGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetUserFiles_Request_TagGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[29]);
}

// ===================================================================

class CPublishedFile_GetUserFiles_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetUserFiles_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shortcutid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_numperpage(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sortmethod(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_privacy(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_filetype(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_creator_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_match_cloud_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cache_max_age_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_totalonly(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ids_only(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_return_vote_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_return_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_return_kv_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_return_previews(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_return_children(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_return_short_description(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_return_for_sale_data(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_return_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_return_playtime_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_strip_description_bbcode(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_return_reactions(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_startindex_override(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_desired_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_return_apps(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_type_{{{"myfiles", 7}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_{{{"lastupdated", 11}}, {nullptr}};
CPublishedFile_GetUserFiles_Request::CPublishedFile_GetUserFiles_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  requiredtags_(arena),
  excludedtags_(arena),
  required_kv_tags_(arena),
  taggroups_(arena),
  excluded_content_descriptors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetUserFiles_Request)
}
CPublishedFile_GetUserFiles_Request::CPublishedFile_GetUserFiles_Request(const CPublishedFile_GetUserFiles_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      requiredtags_(from.requiredtags_),
      excludedtags_(from.excludedtags_),
      required_kv_tags_(from.required_kv_tags_),
      taggroups_(from.taggroups_),
      excluded_content_descriptors_(from.excluded_content_descriptors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(nullptr);
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  sortmethod_.UnsafeSetDefault(nullptr);
  if (from._internal_has_sortmethod()) {
    sortmethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_sortmethod(), 
      GetArenaForAllocation());
  }
  match_cloud_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    match_cloud_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_match_cloud_filename()) {
    match_cloud_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_match_cloud_filename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numperpage_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(numperpage_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetUserFiles_Request)
}

inline void CPublishedFile_GetUserFiles_Request::SharedCtor() {
type_.UnsafeSetDefault(nullptr);
sortmethod_.UnsafeSetDefault(nullptr);
match_cloud_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  match_cloud_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&return_apps_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(return_apps_));
return_vote_data_ = true;
return_kv_tags_ = true;
return_short_description_ = true;
page_ = 1u;
numperpage_ = 1u;
}

CPublishedFile_GetUserFiles_Request::~CPublishedFile_GetUserFiles_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetUserFiles_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetUserFiles_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(nullptr);
  sortmethod_.DestroyNoArena(nullptr);
  match_cloud_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_GetUserFiles_Request::ArenaDtor(void* object) {
  CPublishedFile_GetUserFiles_Request* _this = reinterpret_cast< CPublishedFile_GetUserFiles_Request* >(object);
  (void)_this;
}
void CPublishedFile_GetUserFiles_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetUserFiles_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetUserFiles_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetUserFiles_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requiredtags_.Clear();
  excludedtags_.Clear();
  required_kv_tags_.Clear();
  taggroups_.Clear();
  excluded_content_descriptors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearToDefault(::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_type_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      sortmethod_.ClearToDefault(::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      match_cloud_filename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filetype_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(filetype_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&creator_appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&return_children_) -
        reinterpret_cast<char*>(&creator_appid_)) + sizeof(return_children_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&return_for_sale_data_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&return_apps_) -
        reinterpret_cast<char*>(&return_for_sale_data_)) + sizeof(return_apps_));
  }
  if (cached_has_bits & 0x1f000000u) {
    return_vote_data_ = true;
    return_kv_tags_ = true;
    return_short_description_ = true;
    page_ = 1u;
    numperpage_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetUserFiles_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "Steam ID of the user whose files are being requested."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2 [(.description) = "App Id of the app that the files were published to."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shortcutid = 3 [(.description) = "(Optional) Shortcut Id to retrieve published files from."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_shortcutid(&has_bits);
          shortcutid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 page = 4 [default = 1, (.description) = "(Optional) Starting page for results."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_page(&has_bits);
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 numperpage = 5 [default = 1, (.description) = "(Optional) The number of results, per page to return."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_numperpage(&has_bits);
          numperpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string type = 6 [default = "myfiles", (.description) = "(Optional) Type of files to be returned."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_GetUserFiles_Request.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sortmethod = 7 [default = "lastupdated", (.description) = "(Optional) Sorting method to use on returned values."];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_sortmethod();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_GetUserFiles_Request.sortmethod");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 privacy = 9 [(.description) = "(optional) Filter by privacy settings."];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_privacy(&has_bits);
          privacy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string requiredtags = 10 [(.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_requiredtags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_GetUserFiles_Request.requiredtags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string excludedtags = 11 [(.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_excludedtags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_GetUserFiles_Request.excludedtags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 filetype = 14 [(.description) = "(Optional) File type to match files to."];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_filetype(&has_bits);
          filetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creator_appid = 15 [(.description) = "App Id of the app that published the files, only matched if specified."];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_creator_appid(&has_bits);
          creator_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string match_cloud_filename = 16 [(.description) = "Match this cloud filename if specified."];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_match_cloud_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_GetUserFiles_Request.match_cloud_filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool totalonly = 17 [(.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_totalonly(&has_bits);
          totalonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ids_only = 18 [(.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_ids_only(&has_bits);
          ids_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_vote_data = 19 [default = true, (.description) = "Return vote data"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_return_vote_data(&has_bits);
          return_vote_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_tags = 20 [(.description) = "Return tags in the file details"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_return_tags(&has_bits);
          return_tags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_kv_tags = 21 [default = true, (.description) = "Return key-value tags in the file details"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_return_kv_tags(&has_bits);
          return_kv_tags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_previews = 22 [(.description) = "Return preview image and video details in the file details"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_return_previews(&has_bits);
          return_previews_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_children = 23 [(.description) = "Return child item ids in the file details"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_return_children(&has_bits);
          return_children_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_short_description = 24 [default = true, (.description) = "Populate the short_description field instead of file_description"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_return_short_description(&has_bits);
          return_short_description_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 startindex_override = 25 [(.description) = "Backwards compatible for the client."];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_startindex_override(&has_bits);
          startindex_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_for_sale_data = 26 [(.description) = "Return pricing information, if applicable"];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_return_for_sale_data(&has_bits);
          return_for_sale_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cache_max_age_seconds = 27 [default = 0, (.description) = "Allow stale data to be returned for the specified number of seconds."];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_cache_max_age_seconds(&has_bits);
          cache_max_age_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_metadata = 28 [default = false, (.description) = "Populate the metadata field"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_return_metadata(&has_bits);
          return_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 language = 29 [default = 0, (.description) = "Specifies the localized text to return. Defaults to English."];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPublishedFile_GetUserFiles_Request.KVTag required_kv_tags = 30 [(.description) = "Required key-value tags to match on."];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_required_kv_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 return_playtime_stats = 31 [(.description) = "Return playtime stats for the specified number of days before today."];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_return_playtime_stats(&has_bits);
          return_playtime_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool strip_description_bbcode = 32 [(.description) = "Strips BBCode from descriptions."];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_strip_description_bbcode(&has_bits);
          strip_description_bbcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EPublishedFileRevision desired_revision = 33 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPublishedFileRevision_IsValid(val))) {
            _internal_set_desired_revision(static_cast<::EPublishedFileRevision>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(33, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CPublishedFile_GetUserFiles_Request.TagGroup taggroups = 34 [(.description) = "(Optional) At least one of the tags must be present on a published file to satisfy the query."];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_taggroups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool return_reactions = 35 [default = false, (.description) = "If true, then reactions to items will be returned."];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_return_reactions(&has_bits);
          return_reactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_apps = 36 [(.description) = "Return list of apps the items belong to"];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_return_apps(&has_bits);
          return_apps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .EContentDescriptorID excluded_content_descriptors = 37 [(.description) = "(Optional) Filter out items that have these content descriptors."];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::EContentDescriptorID_IsValid(val))) {
              _internal_add_excluded_content_descriptors(static_cast<::EContentDescriptorID>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(37, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<296>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_excluded_content_descriptors(), ptr, ctx, ::EContentDescriptorID_IsValid, &_internal_metadata_, 37);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetUserFiles_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetUserFiles_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "Steam ID of the user whose files are being requested."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2 [(.description) = "App Id of the app that the files were published to."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional uint32 shortcutid = 3 [(.description) = "(Optional) Shortcut Id to retrieve published files from."];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_shortcutid(), target);
  }

  // optional uint32 page = 4 [default = 1, (.description) = "(Optional) Starting page for results."];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page(), target);
  }

  // optional uint32 numperpage = 5 [default = 1, (.description) = "(Optional) The number of results, per page to return."];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_numperpage(), target);
  }

  // optional string type = 6 [default = "myfiles", (.description) = "(Optional) Type of files to be returned."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_GetUserFiles_Request.type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_type(), target);
  }

  // optional string sortmethod = 7 [default = "lastupdated", (.description) = "(Optional) Sorting method to use on returned values."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sortmethod().data(), static_cast<int>(this->_internal_sortmethod().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_GetUserFiles_Request.sortmethod");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_sortmethod(), target);
  }

  // optional uint32 privacy = 9 [(.description) = "(optional) Filter by privacy settings."];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_privacy(), target);
  }

  // repeated string requiredtags = 10 [(.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
  for (int i = 0, n = this->_internal_requiredtags_size(); i < n; i++) {
    const auto& s = this->_internal_requiredtags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_GetUserFiles_Request.requiredtags");
    target = stream->WriteString(10, s, target);
  }

  // repeated string excludedtags = 11 [(.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  for (int i = 0, n = this->_internal_excludedtags_size(); i < n; i++) {
    const auto& s = this->_internal_excludedtags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_GetUserFiles_Request.excludedtags");
    target = stream->WriteString(11, s, target);
  }

  // optional uint32 filetype = 14 [(.description) = "(Optional) File type to match files to."];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_filetype(), target);
  }

  // optional uint32 creator_appid = 15 [(.description) = "App Id of the app that published the files, only matched if specified."];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_creator_appid(), target);
  }

  // optional string match_cloud_filename = 16 [(.description) = "Match this cloud filename if specified."];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_match_cloud_filename().data(), static_cast<int>(this->_internal_match_cloud_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_GetUserFiles_Request.match_cloud_filename");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_match_cloud_filename(), target);
  }

  // optional bool totalonly = 17 [(.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_totalonly(), target);
  }

  // optional bool ids_only = 18 [(.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_ids_only(), target);
  }

  // optional bool return_vote_data = 19 [default = true, (.description) = "Return vote data"];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_return_vote_data(), target);
  }

  // optional bool return_tags = 20 [(.description) = "Return tags in the file details"];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_return_tags(), target);
  }

  // optional bool return_kv_tags = 21 [default = true, (.description) = "Return key-value tags in the file details"];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_return_kv_tags(), target);
  }

  // optional bool return_previews = 22 [(.description) = "Return preview image and video details in the file details"];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_return_previews(), target);
  }

  // optional bool return_children = 23 [(.description) = "Return child item ids in the file details"];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_return_children(), target);
  }

  // optional bool return_short_description = 24 [default = true, (.description) = "Populate the short_description field instead of file_description"];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_return_short_description(), target);
  }

  // optional uint32 startindex_override = 25 [(.description) = "Backwards compatible for the client."];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_startindex_override(), target);
  }

  // optional bool return_for_sale_data = 26 [(.description) = "Return pricing information, if applicable"];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_return_for_sale_data(), target);
  }

  // optional uint32 cache_max_age_seconds = 27 [default = 0, (.description) = "Allow stale data to be returned for the specified number of seconds."];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_cache_max_age_seconds(), target);
  }

  // optional bool return_metadata = 28 [default = false, (.description) = "Populate the metadata field"];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_return_metadata(), target);
  }

  // optional int32 language = 29 [default = 0, (.description) = "Specifies the localized text to return. Defaults to English."];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_language(), target);
  }

  // repeated .CPublishedFile_GetUserFiles_Request.KVTag required_kv_tags = 30 [(.description) = "Required key-value tags to match on."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_required_kv_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_required_kv_tags(i), target, stream);
  }

  // optional uint32 return_playtime_stats = 31 [(.description) = "Return playtime stats for the specified number of days before today."];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_return_playtime_stats(), target);
  }

  // optional bool strip_description_bbcode = 32 [(.description) = "Strips BBCode from descriptions."];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_strip_description_bbcode(), target);
  }

  // optional .EPublishedFileRevision desired_revision = 33 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      33, this->_internal_desired_revision(), target);
  }

  // repeated .CPublishedFile_GetUserFiles_Request.TagGroup taggroups = 34 [(.description) = "(Optional) At least one of the tags must be present on a published file to satisfy the query."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_taggroups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, this->_internal_taggroups(i), target, stream);
  }

  // optional bool return_reactions = 35 [default = false, (.description) = "If true, then reactions to items will be returned."];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_return_reactions(), target);
  }

  // optional bool return_apps = 36 [(.description) = "Return list of apps the items belong to"];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_return_apps(), target);
  }

  // repeated .EContentDescriptorID excluded_content_descriptors = 37 [(.description) = "(Optional) Filter out items that have these content descriptors."];
  for (int i = 0, n = this->_internal_excluded_content_descriptors_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        37, this->_internal_excluded_content_descriptors(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetUserFiles_Request)
  return target;
}

size_t CPublishedFile_GetUserFiles_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetUserFiles_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string requiredtags = 10 [(.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(requiredtags_.size());
  for (int i = 0, n = requiredtags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      requiredtags_.Get(i));
  }

  // repeated string excludedtags = 11 [(.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(excludedtags_.size());
  for (int i = 0, n = excludedtags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      excludedtags_.Get(i));
  }

  // repeated .CPublishedFile_GetUserFiles_Request.KVTag required_kv_tags = 30 [(.description) = "Required key-value tags to match on."];
  total_size += 2UL * this->_internal_required_kv_tags_size();
  for (const auto& msg : this->required_kv_tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPublishedFile_GetUserFiles_Request.TagGroup taggroups = 34 [(.description) = "(Optional) At least one of the tags must be present on a published file to satisfy the query."];
  total_size += 2UL * this->_internal_taggroups_size();
  for (const auto& msg : this->taggroups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .EContentDescriptorID excluded_content_descriptors = 37 [(.description) = "(Optional) Filter out items that have these content descriptors."];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_excluded_content_descriptors_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_excluded_content_descriptors(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string type = 6 [default = "myfiles", (.description) = "(Optional) Type of files to be returned."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string sortmethod = 7 [default = "lastupdated", (.description) = "(Optional) Sorting method to use on returned values."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sortmethod());
    }

    // optional string match_cloud_filename = 16 [(.description) = "Match this cloud filename if specified."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_match_cloud_filename());
    }

    // optional fixed64 steamid = 1 [(.description) = "Steam ID of the user whose files are being requested."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2 [(.description) = "App Id of the app that the files were published to."];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 shortcutid = 3 [(.description) = "(Optional) Shortcut Id to retrieve published files from."];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_shortcutid());
    }

    // optional uint32 privacy = 9 [(.description) = "(optional) Filter by privacy settings."];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_privacy());
    }

    // optional uint32 filetype = 14 [(.description) = "(Optional) File type to match files to."];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_filetype());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 creator_appid = 15 [(.description) = "App Id of the app that published the files, only matched if specified."];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_creator_appid());
    }

    // optional bool totalonly = 17 [(.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool ids_only = 18 [(.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool return_tags = 20 [(.description) = "Return tags in the file details"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool return_previews = 22 [(.description) = "Return preview image and video details in the file details"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional uint32 startindex_override = 25 [(.description) = "Backwards compatible for the client."];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_startindex_override());
    }

    // optional uint32 cache_max_age_seconds = 27 [default = 0, (.description) = "Allow stale data to be returned for the specified number of seconds."];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cache_max_age_seconds());
    }

    // optional bool return_children = 23 [(.description) = "Return child item ids in the file details"];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool return_for_sale_data = 26 [(.description) = "Return pricing information, if applicable"];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool return_metadata = 28 [default = false, (.description) = "Populate the metadata field"];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool strip_description_bbcode = 32 [(.description) = "Strips BBCode from descriptions."];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional int32 language = 29 [default = 0, (.description) = "Specifies the localized text to return. Defaults to English."];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_language());
    }

    // optional uint32 return_playtime_stats = 31 [(.description) = "Return playtime stats for the specified number of days before today."];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_return_playtime_stats());
    }

    // optional .EPublishedFileRevision desired_revision = 33 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_desired_revision());
    }

    // optional bool return_reactions = 35 [default = false, (.description) = "If true, then reactions to items will be returned."];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool return_apps = 36 [(.description) = "Return list of apps the items belong to"];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional bool return_vote_data = 19 [default = true, (.description) = "Return vote data"];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool return_kv_tags = 21 [default = true, (.description) = "Return key-value tags in the file details"];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool return_short_description = 24 [default = true, (.description) = "Populate the short_description field instead of file_description"];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 page = 4 [default = 1, (.description) = "(Optional) Starting page for results."];
    if (cached_has_bits & 0x08000000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
    }

    // optional uint32 numperpage = 5 [default = 1, (.description) = "(Optional) The number of results, per page to return."];
    if (cached_has_bits & 0x10000000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_numperpage());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetUserFiles_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetUserFiles_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetUserFiles_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetUserFiles_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetUserFiles_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetUserFiles_Request &>(from));
}


void CPublishedFile_GetUserFiles_Request::MergeFrom(const CPublishedFile_GetUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  requiredtags_.MergeFrom(from.requiredtags_);
  excludedtags_.MergeFrom(from.excludedtags_);
  required_kv_tags_.MergeFrom(from.required_kv_tags_);
  taggroups_.MergeFrom(from.taggroups_);
  excluded_content_descriptors_.MergeFrom(from.excluded_content_descriptors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sortmethod(from._internal_sortmethod());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_match_cloud_filename(from._internal_match_cloud_filename());
    }
    if (cached_has_bits & 0x00000008u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000010u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000020u) {
      shortcutid_ = from.shortcutid_;
    }
    if (cached_has_bits & 0x00000040u) {
      privacy_ = from.privacy_;
    }
    if (cached_has_bits & 0x00000080u) {
      filetype_ = from.filetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      creator_appid_ = from.creator_appid_;
    }
    if (cached_has_bits & 0x00000200u) {
      totalonly_ = from.totalonly_;
    }
    if (cached_has_bits & 0x00000400u) {
      ids_only_ = from.ids_only_;
    }
    if (cached_has_bits & 0x00000800u) {
      return_tags_ = from.return_tags_;
    }
    if (cached_has_bits & 0x00001000u) {
      return_previews_ = from.return_previews_;
    }
    if (cached_has_bits & 0x00002000u) {
      startindex_override_ = from.startindex_override_;
    }
    if (cached_has_bits & 0x00004000u) {
      cache_max_age_seconds_ = from.cache_max_age_seconds_;
    }
    if (cached_has_bits & 0x00008000u) {
      return_children_ = from.return_children_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      return_for_sale_data_ = from.return_for_sale_data_;
    }
    if (cached_has_bits & 0x00020000u) {
      return_metadata_ = from.return_metadata_;
    }
    if (cached_has_bits & 0x00040000u) {
      strip_description_bbcode_ = from.strip_description_bbcode_;
    }
    if (cached_has_bits & 0x00080000u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00100000u) {
      return_playtime_stats_ = from.return_playtime_stats_;
    }
    if (cached_has_bits & 0x00200000u) {
      desired_revision_ = from.desired_revision_;
    }
    if (cached_has_bits & 0x00400000u) {
      return_reactions_ = from.return_reactions_;
    }
    if (cached_has_bits & 0x00800000u) {
      return_apps_ = from.return_apps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      return_vote_data_ = from.return_vote_data_;
    }
    if (cached_has_bits & 0x02000000u) {
      return_kv_tags_ = from.return_kv_tags_;
    }
    if (cached_has_bits & 0x04000000u) {
      return_short_description_ = from.return_short_description_;
    }
    if (cached_has_bits & 0x08000000u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x10000000u) {
      numperpage_ = from.numperpage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetUserFiles_Request::CopyFrom(const CPublishedFile_GetUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserFiles_Request::InternalSwap(CPublishedFile_GetUserFiles_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  requiredtags_.InternalSwap(&other->requiredtags_);
  excludedtags_.InternalSwap(&other->excludedtags_);
  required_kv_tags_.InternalSwap(&other->required_kv_tags_);
  taggroups_.InternalSwap(&other->taggroups_);
  excluded_content_descriptors_.InternalSwap(&other->excluded_content_descriptors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      nullptr,
      &sortmethod_, lhs_arena,
      &other->sortmethod_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &match_cloud_filename_, lhs_arena,
      &other->match_cloud_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, return_apps_)
      + sizeof(CPublishedFile_GetUserFiles_Request::return_apps_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
  swap(return_vote_data_, other->return_vote_data_);
  swap(return_kv_tags_, other->return_kv_tags_);
  swap(return_short_description_, other->return_short_description_);
  swap(page_, other->page_);
  swap(numperpage_, other->numperpage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetUserFiles_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[30]);
}

// ===================================================================

class CPublishedFile_GetUserFiles_Response_App::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetUserFiles_Response_App>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shortcutid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_private_(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CPublishedFile_GetUserFiles_Response_App::CPublishedFile_GetUserFiles_Response_App(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetUserFiles_Response.App)
}
CPublishedFile_GetUserFiles_Response_App::CPublishedFile_GetUserFiles_Response_App(const CPublishedFile_GetUserFiles_Response_App& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&private__) -
    reinterpret_cast<char*>(&appid_)) + sizeof(private__));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetUserFiles_Response.App)
}

inline void CPublishedFile_GetUserFiles_Response_App::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&private__) -
    reinterpret_cast<char*>(&appid_)) + sizeof(private__));
}

CPublishedFile_GetUserFiles_Response_App::~CPublishedFile_GetUserFiles_Response_App() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetUserFiles_Response.App)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetUserFiles_Response_App::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_GetUserFiles_Response_App::ArenaDtor(void* object) {
  CPublishedFile_GetUserFiles_Response_App* _this = reinterpret_cast< CPublishedFile_GetUserFiles_Response_App* >(object);
  (void)_this;
}
void CPublishedFile_GetUserFiles_Response_App::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetUserFiles_Response_App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetUserFiles_Response_App::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetUserFiles_Response.App)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&private__) -
        reinterpret_cast<char*>(&appid_)) + sizeof(private__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetUserFiles_Response_App::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_GetUserFiles_Response.App.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shortcutid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_shortcutid(&has_bits);
          shortcutid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool private = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_private_(&has_bits);
          private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetUserFiles_Response_App::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetUserFiles_Response.App)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_GetUserFiles_Response.App.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 shortcutid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_shortcutid(), target);
  }

  // optional bool private = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_private_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetUserFiles_Response.App)
  return target;
}

size_t CPublishedFile_GetUserFiles_Response_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetUserFiles_Response.App)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 shortcutid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_shortcutid());
    }

    // optional bool private = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetUserFiles_Response_App::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetUserFiles_Response_App::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetUserFiles_Response_App::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetUserFiles_Response_App::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetUserFiles_Response_App *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetUserFiles_Response_App &>(from));
}


void CPublishedFile_GetUserFiles_Response_App::MergeFrom(const CPublishedFile_GetUserFiles_Response_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetUserFiles_Response.App)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      shortcutid_ = from.shortcutid_;
    }
    if (cached_has_bits & 0x00000008u) {
      private__ = from.private__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetUserFiles_Response_App::CopyFrom(const CPublishedFile_GetUserFiles_Response_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetUserFiles_Response.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Response_App::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserFiles_Response_App::InternalSwap(CPublishedFile_GetUserFiles_Response_App* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, private__)
      + sizeof(CPublishedFile_GetUserFiles_Response_App::private__)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetUserFiles_Response_App::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[31]);
}

// ===================================================================

class CPublishedFile_GetUserFiles_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetUserFiles_Response>()._has_bits_);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_startindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_GetUserFiles_Response::CPublishedFile_GetUserFiles_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  publishedfiledetails_(arena),
  apps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetUserFiles_Response)
}
CPublishedFile_GetUserFiles_Response::CPublishedFile_GetUserFiles_Response(const CPublishedFile_GetUserFiles_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      publishedfiledetails_(from.publishedfiledetails_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&startindex_) -
    reinterpret_cast<char*>(&total_)) + sizeof(startindex_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetUserFiles_Response)
}

inline void CPublishedFile_GetUserFiles_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&startindex_) -
    reinterpret_cast<char*>(&total_)) + sizeof(startindex_));
}

CPublishedFile_GetUserFiles_Response::~CPublishedFile_GetUserFiles_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetUserFiles_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetUserFiles_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetUserFiles_Response::ArenaDtor(void* object) {
  CPublishedFile_GetUserFiles_Response* _this = reinterpret_cast< CPublishedFile_GetUserFiles_Response* >(object);
  (void)_this;
}
void CPublishedFile_GetUserFiles_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetUserFiles_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetUserFiles_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetUserFiles_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfiledetails_.Clear();
  apps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&startindex_) -
        reinterpret_cast<char*>(&total_)) + sizeof(startindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetUserFiles_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_total(&has_bits);
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 startindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_startindex(&has_bits);
          startindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PublishedFileDetails publishedfiledetails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publishedfiledetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetUserFiles_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetUserFiles_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 total = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total(), target);
  }

  // optional uint32 startindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_startindex(), target);
  }

  // repeated .PublishedFileDetails publishedfiledetails = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_publishedfiledetails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_publishedfiledetails(i), target, stream);
  }

  // repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetUserFiles_Response)
  return target;
}

size_t CPublishedFile_GetUserFiles_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetUserFiles_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PublishedFileDetails publishedfiledetails = 3;
  total_size += 1UL * this->_internal_publishedfiledetails_size();
  for (const auto& msg : this->publishedfiledetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 total = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total());
    }

    // optional uint32 startindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_startindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetUserFiles_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetUserFiles_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetUserFiles_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetUserFiles_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetUserFiles_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetUserFiles_Response &>(from));
}


void CPublishedFile_GetUserFiles_Response::MergeFrom(const CPublishedFile_GetUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfiledetails_.MergeFrom(from.publishedfiledetails_);
  apps_.MergeFrom(from.apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000002u) {
      startindex_ = from.startindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetUserFiles_Response::CopyFrom(const CPublishedFile_GetUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserFiles_Response::InternalSwap(CPublishedFile_GetUserFiles_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  publishedfiledetails_.InternalSwap(&other->publishedfiledetails_);
  apps_.InternalSwap(&other->apps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, startindex_)
      + sizeof(CPublishedFile_GetUserFiles_Response::startindex_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetUserFiles_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[32]);
}

// ===================================================================

class CPublishedFile_AreFilesInSubscriptionList_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_AreFilesInSubscriptionList_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_listtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_filetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_workshopfiletype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CPublishedFile_AreFilesInSubscriptionList_Request::CPublishedFile_AreFilesInSubscriptionList_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  publishedfileids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_AreFilesInSubscriptionList_Request)
}
CPublishedFile_AreFilesInSubscriptionList_Request::CPublishedFile_AreFilesInSubscriptionList_Request(const CPublishedFile_AreFilesInSubscriptionList_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      publishedfileids_(from.publishedfileids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&workshopfiletype_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(workshopfiletype_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_AreFilesInSubscriptionList_Request)
}

inline void CPublishedFile_AreFilesInSubscriptionList_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&workshopfiletype_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(workshopfiletype_));
}

CPublishedFile_AreFilesInSubscriptionList_Request::~CPublishedFile_AreFilesInSubscriptionList_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_AreFilesInSubscriptionList_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_AreFilesInSubscriptionList_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_AreFilesInSubscriptionList_Request::ArenaDtor(void* object) {
  CPublishedFile_AreFilesInSubscriptionList_Request* _this = reinterpret_cast< CPublishedFile_AreFilesInSubscriptionList_Request* >(object);
  (void)_this;
}
void CPublishedFile_AreFilesInSubscriptionList_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_AreFilesInSubscriptionList_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_AreFilesInSubscriptionList_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_AreFilesInSubscriptionList_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfileids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&workshopfiletype_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(workshopfiletype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_AreFilesInSubscriptionList_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 publishedfileids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_publishedfileids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_publishedfileids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 listtype = 3 [(.description) = "See EUCMListType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_listtype(&has_bits);
          listtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 filetype = 4 [(.description) = "See EPublishedFileInfoMatchingFileType"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_filetype(&has_bits);
          filetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 workshopfiletype = 5 [(.description) = "See EWorkshopFileType.  If specified, overrides filetype"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_workshopfiletype(&has_bits);
          workshopfiletype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_AreFilesInSubscriptionList_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_AreFilesInSubscriptionList_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // repeated fixed64 publishedfileids = 2;
  for (int i = 0, n = this->_internal_publishedfileids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_publishedfileids(i), target);
  }

  // optional uint32 listtype = 3 [(.description) = "See EUCMListType"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_listtype(), target);
  }

  // optional uint32 filetype = 4 [(.description) = "See EPublishedFileInfoMatchingFileType"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_filetype(), target);
  }

  // optional uint32 workshopfiletype = 5 [(.description) = "See EWorkshopFileType.  If specified, overrides filetype"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_workshopfiletype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_AreFilesInSubscriptionList_Request)
  return target;
}

size_t CPublishedFile_AreFilesInSubscriptionList_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_AreFilesInSubscriptionList_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 publishedfileids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_publishedfileids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_publishedfileids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 listtype = 3 [(.description) = "See EUCMListType"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_listtype());
    }

    // optional uint32 filetype = 4 [(.description) = "See EPublishedFileInfoMatchingFileType"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_filetype());
    }

    // optional uint32 workshopfiletype = 5 [(.description) = "See EWorkshopFileType.  If specified, overrides filetype"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_workshopfiletype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_AreFilesInSubscriptionList_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_AreFilesInSubscriptionList_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_AreFilesInSubscriptionList_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_AreFilesInSubscriptionList_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_AreFilesInSubscriptionList_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_AreFilesInSubscriptionList_Request &>(from));
}


void CPublishedFile_AreFilesInSubscriptionList_Request::MergeFrom(const CPublishedFile_AreFilesInSubscriptionList_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_AreFilesInSubscriptionList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfileids_.MergeFrom(from.publishedfileids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      listtype_ = from.listtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      filetype_ = from.filetype_;
    }
    if (cached_has_bits & 0x00000008u) {
      workshopfiletype_ = from.workshopfiletype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_AreFilesInSubscriptionList_Request::CopyFrom(const CPublishedFile_AreFilesInSubscriptionList_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_AreFilesInSubscriptionList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_AreFilesInSubscriptionList_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_AreFilesInSubscriptionList_Request::InternalSwap(CPublishedFile_AreFilesInSubscriptionList_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  publishedfileids_.InternalSwap(&other->publishedfileids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_AreFilesInSubscriptionList_Request, workshopfiletype_)
      + sizeof(CPublishedFile_AreFilesInSubscriptionList_Request::workshopfiletype_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_AreFilesInSubscriptionList_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_AreFilesInSubscriptionList_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[33]);
}

// ===================================================================

class CPublishedFile_AreFilesInSubscriptionList_Response_InList::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_AreFilesInSubscriptionList_Response_InList>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inlist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_AreFilesInSubscriptionList_Response_InList::CPublishedFile_AreFilesInSubscriptionList_Response_InList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_AreFilesInSubscriptionList_Response.InList)
}
CPublishedFile_AreFilesInSubscriptionList_Response_InList::CPublishedFile_AreFilesInSubscriptionList_Response_InList(const CPublishedFile_AreFilesInSubscriptionList_Response_InList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&inlist_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(inlist_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_AreFilesInSubscriptionList_Response.InList)
}

inline void CPublishedFile_AreFilesInSubscriptionList_Response_InList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inlist_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(inlist_));
}

CPublishedFile_AreFilesInSubscriptionList_Response_InList::~CPublishedFile_AreFilesInSubscriptionList_Response_InList() {
  // @@protoc_insertion_point(destructor:CPublishedFile_AreFilesInSubscriptionList_Response.InList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_AreFilesInSubscriptionList_Response_InList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_AreFilesInSubscriptionList_Response_InList::ArenaDtor(void* object) {
  CPublishedFile_AreFilesInSubscriptionList_Response_InList* _this = reinterpret_cast< CPublishedFile_AreFilesInSubscriptionList_Response_InList* >(object);
  (void)_this;
}
void CPublishedFile_AreFilesInSubscriptionList_Response_InList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_AreFilesInSubscriptionList_Response_InList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_AreFilesInSubscriptionList_Response_InList::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_AreFilesInSubscriptionList_Response.InList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inlist_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(inlist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_AreFilesInSubscriptionList_Response_InList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool inlist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_inlist(&has_bits);
          inlist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_AreFilesInSubscriptionList_Response_InList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_AreFilesInSubscriptionList_Response.InList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional bool inlist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_inlist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_AreFilesInSubscriptionList_Response.InList)
  return target;
}

size_t CPublishedFile_AreFilesInSubscriptionList_Response_InList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_AreFilesInSubscriptionList_Response.InList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool inlist = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_AreFilesInSubscriptionList_Response_InList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_AreFilesInSubscriptionList_Response_InList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_AreFilesInSubscriptionList_Response_InList::GetClassData() const { return &_class_data_; }

void CPublishedFile_AreFilesInSubscriptionList_Response_InList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_AreFilesInSubscriptionList_Response_InList *>(to)->MergeFrom(
      static_cast<const CPublishedFile_AreFilesInSubscriptionList_Response_InList &>(from));
}


void CPublishedFile_AreFilesInSubscriptionList_Response_InList::MergeFrom(const CPublishedFile_AreFilesInSubscriptionList_Response_InList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_AreFilesInSubscriptionList_Response.InList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      inlist_ = from.inlist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_AreFilesInSubscriptionList_Response_InList::CopyFrom(const CPublishedFile_AreFilesInSubscriptionList_Response_InList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_AreFilesInSubscriptionList_Response.InList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_AreFilesInSubscriptionList_Response_InList::IsInitialized() const {
  return true;
}

void CPublishedFile_AreFilesInSubscriptionList_Response_InList::InternalSwap(CPublishedFile_AreFilesInSubscriptionList_Response_InList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_AreFilesInSubscriptionList_Response_InList, inlist_)
      + sizeof(CPublishedFile_AreFilesInSubscriptionList_Response_InList::inlist_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_AreFilesInSubscriptionList_Response_InList, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_AreFilesInSubscriptionList_Response_InList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[34]);
}

// ===================================================================

class CPublishedFile_AreFilesInSubscriptionList_Response::_Internal {
 public:
};

CPublishedFile_AreFilesInSubscriptionList_Response::CPublishedFile_AreFilesInSubscriptionList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  files_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_AreFilesInSubscriptionList_Response)
}
CPublishedFile_AreFilesInSubscriptionList_Response::CPublishedFile_AreFilesInSubscriptionList_Response(const CPublishedFile_AreFilesInSubscriptionList_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_AreFilesInSubscriptionList_Response)
}

inline void CPublishedFile_AreFilesInSubscriptionList_Response::SharedCtor() {
}

CPublishedFile_AreFilesInSubscriptionList_Response::~CPublishedFile_AreFilesInSubscriptionList_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_AreFilesInSubscriptionList_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_AreFilesInSubscriptionList_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_AreFilesInSubscriptionList_Response::ArenaDtor(void* object) {
  CPublishedFile_AreFilesInSubscriptionList_Response* _this = reinterpret_cast< CPublishedFile_AreFilesInSubscriptionList_Response* >(object);
  (void)_this;
}
void CPublishedFile_AreFilesInSubscriptionList_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_AreFilesInSubscriptionList_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_AreFilesInSubscriptionList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_AreFilesInSubscriptionList_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_AreFilesInSubscriptionList_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPublishedFile_AreFilesInSubscriptionList_Response.InList files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_AreFilesInSubscriptionList_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_AreFilesInSubscriptionList_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPublishedFile_AreFilesInSubscriptionList_Response.InList files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_files(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_AreFilesInSubscriptionList_Response)
  return target;
}

size_t CPublishedFile_AreFilesInSubscriptionList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_AreFilesInSubscriptionList_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPublishedFile_AreFilesInSubscriptionList_Response.InList files = 1;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_AreFilesInSubscriptionList_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_AreFilesInSubscriptionList_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_AreFilesInSubscriptionList_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_AreFilesInSubscriptionList_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_AreFilesInSubscriptionList_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_AreFilesInSubscriptionList_Response &>(from));
}


void CPublishedFile_AreFilesInSubscriptionList_Response::MergeFrom(const CPublishedFile_AreFilesInSubscriptionList_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_AreFilesInSubscriptionList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_AreFilesInSubscriptionList_Response::CopyFrom(const CPublishedFile_AreFilesInSubscriptionList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_AreFilesInSubscriptionList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_AreFilesInSubscriptionList_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_AreFilesInSubscriptionList_Response::InternalSwap(CPublishedFile_AreFilesInSubscriptionList_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  files_.InternalSwap(&other->files_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_AreFilesInSubscriptionList_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[35]);
}

// ===================================================================

class CPublishedFile_Update_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_Update_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preview_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_spoiler_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_image_width(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_image_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CPublishedFile_Update_Request::CPublishedFile_Update_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Update_Request)
}
CPublishedFile_Update_Request::CPublishedFile_Update_Request(const CPublishedFile_Update_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  file_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_description()) {
    file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_description(), 
      GetArenaForAllocation());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  preview_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    preview_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preview_filename()) {
    preview_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preview_filename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&image_width_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(image_width_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Update_Request)
}

inline void CPublishedFile_Update_Request::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
preview_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  preview_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&image_width_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(image_width_));
}

CPublishedFile_Update_Request::~CPublishedFile_Update_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Update_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_Update_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preview_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_Update_Request::ArenaDtor(void* object) {
  CPublishedFile_Update_Request* _this = reinterpret_cast< CPublishedFile_Update_Request* >(object);
  (void)_this;
}
void CPublishedFile_Update_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_Update_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_Update_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_Update_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      preview_filename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&image_height_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(image_height_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&spoiler_tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&image_width_) -
        reinterpret_cast<char*>(&spoiler_tag_)) + sizeof(image_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_Update_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App Id this published file belongs to."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 publishedfileid = 2 [(.description) = "Published file id of the file we\'d like to update."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 3 [(.description) = "(Optional) Title of the published file."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Update_Request.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string file_description = 4 [(.description) = "(Optional) Description of the published file."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Update_Request.file_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 visibility = 5 [(.description) = "(Optional) Visibility of the published file."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_visibility(&has_bits);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 6 [(.description) = "(Optional) Set of tags for the published file."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Update_Request.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 7 [(.description) = "(Optional) Filename for the published file."];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Update_Request.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string preview_filename = 8 [(.description) = "(Optional) Preview filename for the published file."];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_preview_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Update_Request.preview_filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool spoiler_tag = 10 [(.description) = "(Optional) Whether this published file should have a spoiler tag attached to it."];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_spoiler_tag(&has_bits);
          spoiler_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 image_width = 15 [(.description) = "(Optional) If this is an image file, you can specify the image width."];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_image_width(&has_bits);
          image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 image_height = 16 [(.description) = "(Optional) If this is an image file, you can specify the image height."];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_image_height(&has_bits);
          image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_Update_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Update_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App Id this published file belongs to."];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional fixed64 publishedfileid = 2 [(.description) = "Published file id of the file we\'d like to update."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_publishedfileid(), target);
  }

  // optional string title = 3 [(.description) = "(Optional) Title of the published file."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Update_Request.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // optional string file_description = 4 [(.description) = "(Optional) Description of the published file."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_description().data(), static_cast<int>(this->_internal_file_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Update_Request.file_description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_description(), target);
  }

  // optional uint32 visibility = 5 [(.description) = "(Optional) Visibility of the published file."];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_visibility(), target);
  }

  // repeated string tags = 6 [(.description) = "(Optional) Set of tags for the published file."];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Update_Request.tags");
    target = stream->WriteString(6, s, target);
  }

  // optional string filename = 7 [(.description) = "(Optional) Filename for the published file."];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Update_Request.filename");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_filename(), target);
  }

  // optional string preview_filename = 8 [(.description) = "(Optional) Preview filename for the published file."];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preview_filename().data(), static_cast<int>(this->_internal_preview_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Update_Request.preview_filename");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_preview_filename(), target);
  }

  // optional bool spoiler_tag = 10 [(.description) = "(Optional) Whether this published file should have a spoiler tag attached to it."];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_spoiler_tag(), target);
  }

  // optional uint32 image_width = 15 [(.description) = "(Optional) If this is an image file, you can specify the image width."];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_image_width(), target);
  }

  // optional uint32 image_height = 16 [(.description) = "(Optional) If this is an image file, you can specify the image height."];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_image_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Update_Request)
  return target;
}

size_t CPublishedFile_Update_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_Update_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 6 [(.description) = "(Optional) Set of tags for the published file."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string title = 3 [(.description) = "(Optional) Title of the published file."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string file_description = 4 [(.description) = "(Optional) Description of the published file."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_description());
    }

    // optional string filename = 7 [(.description) = "(Optional) Filename for the published file."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string preview_filename = 8 [(.description) = "(Optional) Preview filename for the published file."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preview_filename());
    }

    // optional fixed64 publishedfileid = 2 [(.description) = "Published file id of the file we\'d like to update."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 1 [(.description) = "App Id this published file belongs to."];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 visibility = 5 [(.description) = "(Optional) Visibility of the published file."];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_visibility());
    }

    // optional uint32 image_height = 16 [(.description) = "(Optional) If this is an image file, you can specify the image height."];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_image_height());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool spoiler_tag = 10 [(.description) = "(Optional) Whether this published file should have a spoiler tag attached to it."];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint32 image_width = 15 [(.description) = "(Optional) If this is an image file, you can specify the image width."];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_image_width());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_Update_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_Update_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_Update_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_Update_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_Update_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_Update_Request &>(from));
}


void CPublishedFile_Update_Request::MergeFrom(const CPublishedFile_Update_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_Update_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_description(from._internal_file_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_preview_filename(from._internal_preview_filename());
    }
    if (cached_has_bits & 0x00000010u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000020u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000040u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x00000080u) {
      image_height_ = from.image_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      spoiler_tag_ = from.spoiler_tag_;
    }
    if (cached_has_bits & 0x00000200u) {
      image_width_ = from.image_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_Update_Request::CopyFrom(const CPublishedFile_Update_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_Update_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Update_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Update_Request::InternalSwap(CPublishedFile_Update_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_description_, lhs_arena,
      &other->file_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &preview_filename_, lhs_arena,
      &other->preview_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_Update_Request, image_width_)
      + sizeof(CPublishedFile_Update_Request::image_width_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_Update_Request, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Update_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[36]);
}

// ===================================================================

class CPublishedFile_Update_Response::_Internal {
 public:
};

CPublishedFile_Update_Response::CPublishedFile_Update_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Update_Response)
}
CPublishedFile_Update_Response::CPublishedFile_Update_Response(const CPublishedFile_Update_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Update_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_Update_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_Update_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Update_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[37]);
}

// ===================================================================

class CPublishedFile_Delete_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_Delete_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_Delete_Request::CPublishedFile_Delete_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Delete_Request)
}
CPublishedFile_Delete_Request::CPublishedFile_Delete_Request(const CPublishedFile_Delete_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Delete_Request)
}

inline void CPublishedFile_Delete_Request::SharedCtor() {
publishedfileid_ = uint64_t{0u};
}

CPublishedFile_Delete_Request::~CPublishedFile_Delete_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Delete_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_Delete_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_Delete_Request::ArenaDtor(void* object) {
  CPublishedFile_Delete_Request* _this = reinterpret_cast< CPublishedFile_Delete_Request* >(object);
  (void)_this;
}
void CPublishedFile_Delete_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_Delete_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_Delete_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_Delete_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfileid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_Delete_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 publishedfileid = 1 [(.description) = "Published file id of the file we\'d like to delete."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_Delete_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Delete_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 publishedfileid = 1 [(.description) = "Published file id of the file we\'d like to delete."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_publishedfileid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Delete_Request)
  return target;
}

size_t CPublishedFile_Delete_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_Delete_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 publishedfileid = 1 [(.description) = "Published file id of the file we\'d like to delete."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_Delete_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_Delete_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_Delete_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_Delete_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_Delete_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_Delete_Request &>(from));
}


void CPublishedFile_Delete_Request::MergeFrom(const CPublishedFile_Delete_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_Delete_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_publishedfileid()) {
    _internal_set_publishedfileid(from._internal_publishedfileid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_Delete_Request::CopyFrom(const CPublishedFile_Delete_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_Delete_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Delete_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Delete_Request::InternalSwap(CPublishedFile_Delete_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(publishedfileid_, other->publishedfileid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Delete_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[38]);
}

// ===================================================================

class CPublishedFile_Delete_Response::_Internal {
 public:
};

CPublishedFile_Delete_Response::CPublishedFile_Delete_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Delete_Response)
}
CPublishedFile_Delete_Response::CPublishedFile_Delete_Response(const CPublishedFile_Delete_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Delete_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_Delete_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_Delete_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Delete_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[39]);
}

// ===================================================================

class CPublishedFile_GetChangeHistoryEntry_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetChangeHistoryEntry_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPublishedFile_GetChangeHistoryEntry_Request::CPublishedFile_GetChangeHistoryEntry_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetChangeHistoryEntry_Request)
}
CPublishedFile_GetChangeHistoryEntry_Request::CPublishedFile_GetChangeHistoryEntry_Request(const CPublishedFile_GetChangeHistoryEntry_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetChangeHistoryEntry_Request)
}

inline void CPublishedFile_GetChangeHistoryEntry_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(language_));
}

CPublishedFile_GetChangeHistoryEntry_Request::~CPublishedFile_GetChangeHistoryEntry_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetChangeHistoryEntry_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetChangeHistoryEntry_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetChangeHistoryEntry_Request::ArenaDtor(void* object) {
  CPublishedFile_GetChangeHistoryEntry_Request* _this = reinterpret_cast< CPublishedFile_GetChangeHistoryEntry_Request* >(object);
  (void)_this;
}
void CPublishedFile_GetChangeHistoryEntry_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetChangeHistoryEntry_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetChangeHistoryEntry_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetChangeHistoryEntry_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetChangeHistoryEntry_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 publishedfileid = 1 [(.description) = "Published file id of the file we\'d like to get the change history for."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetChangeHistoryEntry_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetChangeHistoryEntry_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 publishedfileid = 1 [(.description) = "Published file id of the file we\'d like to get the change history for."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional int32 language = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetChangeHistoryEntry_Request)
  return target;
}

size_t CPublishedFile_GetChangeHistoryEntry_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetChangeHistoryEntry_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 publishedfileid = 1 [(.description) = "Published file id of the file we\'d like to get the change history for."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional int32 language = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_language());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetChangeHistoryEntry_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetChangeHistoryEntry_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetChangeHistoryEntry_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetChangeHistoryEntry_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetChangeHistoryEntry_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetChangeHistoryEntry_Request &>(from));
}


void CPublishedFile_GetChangeHistoryEntry_Request::MergeFrom(const CPublishedFile_GetChangeHistoryEntry_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetChangeHistoryEntry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetChangeHistoryEntry_Request::CopyFrom(const CPublishedFile_GetChangeHistoryEntry_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetChangeHistoryEntry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetChangeHistoryEntry_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetChangeHistoryEntry_Request::InternalSwap(CPublishedFile_GetChangeHistoryEntry_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetChangeHistoryEntry_Request, language_)
      + sizeof(CPublishedFile_GetChangeHistoryEntry_Request::language_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetChangeHistoryEntry_Request, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetChangeHistoryEntry_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[40]);
}

// ===================================================================

class CPublishedFile_GetChangeHistoryEntry_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetChangeHistoryEntry_Response>()._has_bits_);
  static void set_has_change_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_GetChangeHistoryEntry_Response::CPublishedFile_GetChangeHistoryEntry_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetChangeHistoryEntry_Response)
}
CPublishedFile_GetChangeHistoryEntry_Response::CPublishedFile_GetChangeHistoryEntry_Response(const CPublishedFile_GetChangeHistoryEntry_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  change_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    change_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_change_description()) {
    change_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_change_description(), 
      GetArenaForAllocation());
  }
  language_ = from.language_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetChangeHistoryEntry_Response)
}

inline void CPublishedFile_GetChangeHistoryEntry_Response::SharedCtor() {
change_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  change_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
language_ = 0;
}

CPublishedFile_GetChangeHistoryEntry_Response::~CPublishedFile_GetChangeHistoryEntry_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetChangeHistoryEntry_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetChangeHistoryEntry_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  change_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_GetChangeHistoryEntry_Response::ArenaDtor(void* object) {
  CPublishedFile_GetChangeHistoryEntry_Response* _this = reinterpret_cast< CPublishedFile_GetChangeHistoryEntry_Response* >(object);
  (void)_this;
}
void CPublishedFile_GetChangeHistoryEntry_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetChangeHistoryEntry_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetChangeHistoryEntry_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetChangeHistoryEntry_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    change_description_.ClearNonDefaultToEmpty();
  }
  language_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetChangeHistoryEntry_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string change_description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_change_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_GetChangeHistoryEntry_Response.change_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetChangeHistoryEntry_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetChangeHistoryEntry_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string change_description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_change_description().data(), static_cast<int>(this->_internal_change_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_GetChangeHistoryEntry_Response.change_description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_change_description(), target);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetChangeHistoryEntry_Response)
  return target;
}

size_t CPublishedFile_GetChangeHistoryEntry_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetChangeHistoryEntry_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string change_description = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_change_description());
    }

    // optional int32 language = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_language());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetChangeHistoryEntry_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetChangeHistoryEntry_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetChangeHistoryEntry_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetChangeHistoryEntry_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetChangeHistoryEntry_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetChangeHistoryEntry_Response &>(from));
}


void CPublishedFile_GetChangeHistoryEntry_Response::MergeFrom(const CPublishedFile_GetChangeHistoryEntry_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetChangeHistoryEntry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_change_description(from._internal_change_description());
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetChangeHistoryEntry_Response::CopyFrom(const CPublishedFile_GetChangeHistoryEntry_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetChangeHistoryEntry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetChangeHistoryEntry_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetChangeHistoryEntry_Response::InternalSwap(CPublishedFile_GetChangeHistoryEntry_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &change_description_, lhs_arena,
      &other->change_description_, rhs_arena
  );
  swap(language_, other->language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetChangeHistoryEntry_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[41]);
}

// ===================================================================

class CPublishedFile_GetChangeHistory_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetChangeHistory_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_only(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_startindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CPublishedFile_GetChangeHistory_Request::CPublishedFile_GetChangeHistory_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetChangeHistory_Request)
}
CPublishedFile_GetChangeHistory_Request::CPublishedFile_GetChangeHistory_Request(const CPublishedFile_GetChangeHistory_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetChangeHistory_Request)
}

inline void CPublishedFile_GetChangeHistory_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(language_));
}

CPublishedFile_GetChangeHistory_Request::~CPublishedFile_GetChangeHistory_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetChangeHistory_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetChangeHistory_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetChangeHistory_Request::ArenaDtor(void* object) {
  CPublishedFile_GetChangeHistory_Request* _this = reinterpret_cast< CPublishedFile_GetChangeHistory_Request* >(object);
  (void)_this;
}
void CPublishedFile_GetChangeHistory_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetChangeHistory_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetChangeHistory_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetChangeHistory_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetChangeHistory_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 publishedfileid = 1 [(.description) = "Published file id of the file we\'d like to get the change history for."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool total_only = 2 [(.description) = "Return the total number of changes only."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total_only(&has_bits);
          total_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 startindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_startindex(&has_bits);
          startindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 language = 5 [default = 0, (.description) = "Desired language"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetChangeHistory_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetChangeHistory_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 publishedfileid = 1 [(.description) = "Published file id of the file we\'d like to get the change history for."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional bool total_only = 2 [(.description) = "Return the total number of changes only."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_total_only(), target);
  }

  // optional uint32 startindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_startindex(), target);
  }

  // optional uint32 count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_count(), target);
  }

  // optional int32 language = 5 [default = 0, (.description) = "Desired language"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetChangeHistory_Request)
  return target;
}

size_t CPublishedFile_GetChangeHistory_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetChangeHistory_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 publishedfileid = 1 [(.description) = "Published file id of the file we\'d like to get the change history for."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool total_only = 2 [(.description) = "Return the total number of changes only."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 startindex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_startindex());
    }

    // optional uint32 count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

    // optional int32 language = 5 [default = 0, (.description) = "Desired language"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_language());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetChangeHistory_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetChangeHistory_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetChangeHistory_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetChangeHistory_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetChangeHistory_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetChangeHistory_Request &>(from));
}


void CPublishedFile_GetChangeHistory_Request::MergeFrom(const CPublishedFile_GetChangeHistory_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetChangeHistory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_only_ = from.total_only_;
    }
    if (cached_has_bits & 0x00000004u) {
      startindex_ = from.startindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetChangeHistory_Request::CopyFrom(const CPublishedFile_GetChangeHistory_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetChangeHistory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetChangeHistory_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetChangeHistory_Request::InternalSwap(CPublishedFile_GetChangeHistory_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Request, language_)
      + sizeof(CPublishedFile_GetChangeHistory_Request::language_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Request, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetChangeHistory_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[42]);
}

// ===================================================================

class CPublishedFile_GetChangeHistory_Response_ChangeLog::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetChangeHistory_Response_ChangeLog>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_change_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPublishedFile_GetChangeHistory_Response_ChangeLog::CPublishedFile_GetChangeHistory_Response_ChangeLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetChangeHistory_Response.ChangeLog)
}
CPublishedFile_GetChangeHistory_Response_ChangeLog::CPublishedFile_GetChangeHistory_Response_ChangeLog(const CPublishedFile_GetChangeHistory_Response_ChangeLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  change_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    change_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_change_description()) {
    change_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_change_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetChangeHistory_Response.ChangeLog)
}

inline void CPublishedFile_GetChangeHistory_Response_ChangeLog::SharedCtor() {
change_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  change_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(language_));
}

CPublishedFile_GetChangeHistory_Response_ChangeLog::~CPublishedFile_GetChangeHistory_Response_ChangeLog() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetChangeHistory_Response.ChangeLog)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetChangeHistory_Response_ChangeLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  change_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_GetChangeHistory_Response_ChangeLog::ArenaDtor(void* object) {
  CPublishedFile_GetChangeHistory_Response_ChangeLog* _this = reinterpret_cast< CPublishedFile_GetChangeHistory_Response_ChangeLog* >(object);
  (void)_this;
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetChangeHistory_Response_ChangeLog::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetChangeHistory_Response.ChangeLog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    change_description_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&language_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetChangeHistory_Response_ChangeLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string change_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_change_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetChangeHistory_Response_ChangeLog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetChangeHistory_Response.ChangeLog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // optional string change_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_change_description().data(), static_cast<int>(this->_internal_change_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_change_description(), target);
  }

  // optional int32 language = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetChangeHistory_Response.ChangeLog)
  return target;
}

size_t CPublishedFile_GetChangeHistory_Response_ChangeLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetChangeHistory_Response.ChangeLog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string change_description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_change_description());
    }

    // optional uint32 timestamp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional int32 language = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_language());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetChangeHistory_Response_ChangeLog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetChangeHistory_Response_ChangeLog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetChangeHistory_Response_ChangeLog::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetChangeHistory_Response_ChangeLog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetChangeHistory_Response_ChangeLog *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetChangeHistory_Response_ChangeLog &>(from));
}


void CPublishedFile_GetChangeHistory_Response_ChangeLog::MergeFrom(const CPublishedFile_GetChangeHistory_Response_ChangeLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetChangeHistory_Response.ChangeLog)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_change_description(from._internal_change_description());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetChangeHistory_Response_ChangeLog::CopyFrom(const CPublishedFile_GetChangeHistory_Response_ChangeLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetChangeHistory_Response.ChangeLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetChangeHistory_Response_ChangeLog::IsInitialized() const {
  return true;
}

void CPublishedFile_GetChangeHistory_Response_ChangeLog::InternalSwap(CPublishedFile_GetChangeHistory_Response_ChangeLog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &change_description_, lhs_arena,
      &other->change_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Response_ChangeLog, language_)
      + sizeof(CPublishedFile_GetChangeHistory_Response_ChangeLog::language_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Response_ChangeLog, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetChangeHistory_Response_ChangeLog::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[43]);
}

// ===================================================================

class CPublishedFile_GetChangeHistory_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetChangeHistory_Response>()._has_bits_);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_GetChangeHistory_Response::CPublishedFile_GetChangeHistory_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  changes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetChangeHistory_Response)
}
CPublishedFile_GetChangeHistory_Response::CPublishedFile_GetChangeHistory_Response(const CPublishedFile_GetChangeHistory_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      changes_(from.changes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetChangeHistory_Response)
}

inline void CPublishedFile_GetChangeHistory_Response::SharedCtor() {
total_ = 0u;
}

CPublishedFile_GetChangeHistory_Response::~CPublishedFile_GetChangeHistory_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetChangeHistory_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetChangeHistory_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetChangeHistory_Response::ArenaDtor(void* object) {
  CPublishedFile_GetChangeHistory_Response* _this = reinterpret_cast< CPublishedFile_GetChangeHistory_Response* >(object);
  (void)_this;
}
void CPublishedFile_GetChangeHistory_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetChangeHistory_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetChangeHistory_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetChangeHistory_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changes_.Clear();
  total_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetChangeHistory_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPublishedFile_GetChangeHistory_Response.ChangeLog changes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total(&has_bits);
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetChangeHistory_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetChangeHistory_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPublishedFile_GetChangeHistory_Response.ChangeLog changes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_changes(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetChangeHistory_Response)
  return target;
}

size_t CPublishedFile_GetChangeHistory_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetChangeHistory_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPublishedFile_GetChangeHistory_Response.ChangeLog changes = 1;
  total_size += 1UL * this->_internal_changes_size();
  for (const auto& msg : this->changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 total = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetChangeHistory_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetChangeHistory_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetChangeHistory_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetChangeHistory_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetChangeHistory_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetChangeHistory_Response &>(from));
}


void CPublishedFile_GetChangeHistory_Response::MergeFrom(const CPublishedFile_GetChangeHistory_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetChangeHistory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  changes_.MergeFrom(from.changes_);
  if (from._internal_has_total()) {
    _internal_set_total(from._internal_total());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetChangeHistory_Response::CopyFrom(const CPublishedFile_GetChangeHistory_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetChangeHistory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetChangeHistory_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetChangeHistory_Response::InternalSwap(CPublishedFile_GetChangeHistory_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  changes_.InternalSwap(&other->changes_);
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetChangeHistory_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[44]);
}

// ===================================================================

class CPublishedFile_RefreshVotingQueue_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_RefreshVotingQueue_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matching_file_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_all_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_desired_queue_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_desired_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CPublishedFile_RefreshVotingQueue_Request::CPublishedFile_RefreshVotingQueue_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena),
  excluded_tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_RefreshVotingQueue_Request)
}
CPublishedFile_RefreshVotingQueue_Request::CPublishedFile_RefreshVotingQueue_Request(const CPublishedFile_RefreshVotingQueue_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tags_(from.tags_),
      excluded_tags_(from.excluded_tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_all_tags_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(match_all_tags_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_RefreshVotingQueue_Request)
}

inline void CPublishedFile_RefreshVotingQueue_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&desired_revision_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(desired_revision_));
match_all_tags_ = true;
}

CPublishedFile_RefreshVotingQueue_Request::~CPublishedFile_RefreshVotingQueue_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_RefreshVotingQueue_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_RefreshVotingQueue_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_RefreshVotingQueue_Request::ArenaDtor(void* object) {
  CPublishedFile_RefreshVotingQueue_Request* _this = reinterpret_cast< CPublishedFile_RefreshVotingQueue_Request* >(object);
  (void)_this;
}
void CPublishedFile_RefreshVotingQueue_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_RefreshVotingQueue_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_RefreshVotingQueue_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_RefreshVotingQueue_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  excluded_tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&desired_revision_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(desired_revision_));
    match_all_tags_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_RefreshVotingQueue_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 matching_file_type = 2 [(.description) = "EPublishedFileInfoMatchingFileType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_matching_file_type(&has_bits);
          matching_file_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 3 [(.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_RefreshVotingQueue_Request.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool match_all_tags = 4 [default = true, (.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_match_all_tags(&has_bits);
          match_all_tags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string excluded_tags = 5 [(.description) = "Exclude any files that have any of these tags."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_excluded_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_RefreshVotingQueue_Request.excluded_tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 desired_queue_size = 6 [(.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_desired_queue_size(&has_bits);
          desired_queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EPublishedFileRevision desired_revision = 8 [default = k_EPublishedFileRevision_Default, (.description) = "Filter to items that have data for the specified revision."];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPublishedFileRevision_IsValid(val))) {
            _internal_set_desired_revision(static_cast<::EPublishedFileRevision>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_RefreshVotingQueue_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_RefreshVotingQueue_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 matching_file_type = 2 [(.description) = "EPublishedFileInfoMatchingFileType"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_matching_file_type(), target);
  }

  // repeated string tags = 3 [(.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_RefreshVotingQueue_Request.tags");
    target = stream->WriteString(3, s, target);
  }

  // optional bool match_all_tags = 4 [default = true, (.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_match_all_tags(), target);
  }

  // repeated string excluded_tags = 5 [(.description) = "Exclude any files that have any of these tags."];
  for (int i = 0, n = this->_internal_excluded_tags_size(); i < n; i++) {
    const auto& s = this->_internal_excluded_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_RefreshVotingQueue_Request.excluded_tags");
    target = stream->WriteString(5, s, target);
  }

  // optional uint32 desired_queue_size = 6 [(.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_desired_queue_size(), target);
  }

  // optional .EPublishedFileRevision desired_revision = 8 [default = k_EPublishedFileRevision_Default, (.description) = "Filter to items that have data for the specified revision."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_desired_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_RefreshVotingQueue_Request)
  return target;
}

size_t CPublishedFile_RefreshVotingQueue_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_RefreshVotingQueue_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 3 [(.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // repeated string excluded_tags = 5 [(.description) = "Exclude any files that have any of these tags."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(excluded_tags_.size());
  for (int i = 0, n = excluded_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      excluded_tags_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 matching_file_type = 2 [(.description) = "EPublishedFileInfoMatchingFileType"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_matching_file_type());
    }

    // optional uint32 desired_queue_size = 6 [(.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_desired_queue_size());
    }

    // optional .EPublishedFileRevision desired_revision = 8 [default = k_EPublishedFileRevision_Default, (.description) = "Filter to items that have data for the specified revision."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_desired_revision());
    }

    // optional bool match_all_tags = 4 [default = true, (.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_RefreshVotingQueue_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_RefreshVotingQueue_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_RefreshVotingQueue_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_RefreshVotingQueue_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_RefreshVotingQueue_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_RefreshVotingQueue_Request &>(from));
}


void CPublishedFile_RefreshVotingQueue_Request::MergeFrom(const CPublishedFile_RefreshVotingQueue_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_RefreshVotingQueue_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  excluded_tags_.MergeFrom(from.excluded_tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      matching_file_type_ = from.matching_file_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      desired_queue_size_ = from.desired_queue_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      desired_revision_ = from.desired_revision_;
    }
    if (cached_has_bits & 0x00000010u) {
      match_all_tags_ = from.match_all_tags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_RefreshVotingQueue_Request::CopyFrom(const CPublishedFile_RefreshVotingQueue_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_RefreshVotingQueue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_RefreshVotingQueue_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_RefreshVotingQueue_Request::InternalSwap(CPublishedFile_RefreshVotingQueue_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(&other->tags_);
  excluded_tags_.InternalSwap(&other->excluded_tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, desired_revision_)
      + sizeof(CPublishedFile_RefreshVotingQueue_Request::desired_revision_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
  swap(match_all_tags_, other->match_all_tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_RefreshVotingQueue_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[45]);
}

// ===================================================================

class CPublishedFile_RefreshVotingQueue_Response::_Internal {
 public:
};

CPublishedFile_RefreshVotingQueue_Response::CPublishedFile_RefreshVotingQueue_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_RefreshVotingQueue_Response)
}
CPublishedFile_RefreshVotingQueue_Response::CPublishedFile_RefreshVotingQueue_Response(const CPublishedFile_RefreshVotingQueue_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_RefreshVotingQueue_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_RefreshVotingQueue_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_RefreshVotingQueue_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_RefreshVotingQueue_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[46]);
}

// ===================================================================

class CPublishedFile_QueryFiles_Request_KVTag::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_QueryFiles_Request_KVTag>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_QueryFiles_Request_KVTag::CPublishedFile_QueryFiles_Request_KVTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_QueryFiles_Request.KVTag)
}
CPublishedFile_QueryFiles_Request_KVTag::CPublishedFile_QueryFiles_Request_KVTag(const CPublishedFile_QueryFiles_Request_KVTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_QueryFiles_Request.KVTag)
}

inline void CPublishedFile_QueryFiles_Request_KVTag::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CPublishedFile_QueryFiles_Request_KVTag::~CPublishedFile_QueryFiles_Request_KVTag() {
  // @@protoc_insertion_point(destructor:CPublishedFile_QueryFiles_Request.KVTag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_QueryFiles_Request_KVTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_QueryFiles_Request_KVTag::ArenaDtor(void* object) {
  CPublishedFile_QueryFiles_Request_KVTag* _this = reinterpret_cast< CPublishedFile_QueryFiles_Request_KVTag* >(object);
  (void)_this;
}
void CPublishedFile_QueryFiles_Request_KVTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_QueryFiles_Request_KVTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_QueryFiles_Request_KVTag::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_QueryFiles_Request.KVTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_QueryFiles_Request_KVTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_QueryFiles_Request.KVTag.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_QueryFiles_Request.KVTag.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_QueryFiles_Request_KVTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_QueryFiles_Request.KVTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_QueryFiles_Request.KVTag.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_QueryFiles_Request.KVTag.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_QueryFiles_Request.KVTag)
  return target;
}

size_t CPublishedFile_QueryFiles_Request_KVTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_QueryFiles_Request.KVTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_QueryFiles_Request_KVTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_QueryFiles_Request_KVTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_QueryFiles_Request_KVTag::GetClassData() const { return &_class_data_; }

void CPublishedFile_QueryFiles_Request_KVTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_QueryFiles_Request_KVTag *>(to)->MergeFrom(
      static_cast<const CPublishedFile_QueryFiles_Request_KVTag &>(from));
}


void CPublishedFile_QueryFiles_Request_KVTag::MergeFrom(const CPublishedFile_QueryFiles_Request_KVTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_QueryFiles_Request.KVTag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_QueryFiles_Request_KVTag::CopyFrom(const CPublishedFile_QueryFiles_Request_KVTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_QueryFiles_Request.KVTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_QueryFiles_Request_KVTag::IsInitialized() const {
  return true;
}

void CPublishedFile_QueryFiles_Request_KVTag::InternalSwap(CPublishedFile_QueryFiles_Request_KVTag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_QueryFiles_Request_KVTag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[47]);
}

// ===================================================================

class CPublishedFile_QueryFiles_Request_TagGroup::_Internal {
 public:
};

CPublishedFile_QueryFiles_Request_TagGroup::CPublishedFile_QueryFiles_Request_TagGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_QueryFiles_Request.TagGroup)
}
CPublishedFile_QueryFiles_Request_TagGroup::CPublishedFile_QueryFiles_Request_TagGroup(const CPublishedFile_QueryFiles_Request_TagGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_QueryFiles_Request.TagGroup)
}

inline void CPublishedFile_QueryFiles_Request_TagGroup::SharedCtor() {
}

CPublishedFile_QueryFiles_Request_TagGroup::~CPublishedFile_QueryFiles_Request_TagGroup() {
  // @@protoc_insertion_point(destructor:CPublishedFile_QueryFiles_Request.TagGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_QueryFiles_Request_TagGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_QueryFiles_Request_TagGroup::ArenaDtor(void* object) {
  CPublishedFile_QueryFiles_Request_TagGroup* _this = reinterpret_cast< CPublishedFile_QueryFiles_Request_TagGroup* >(object);
  (void)_this;
}
void CPublishedFile_QueryFiles_Request_TagGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_QueryFiles_Request_TagGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_QueryFiles_Request_TagGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_QueryFiles_Request.TagGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_QueryFiles_Request_TagGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_QueryFiles_Request.TagGroup.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_QueryFiles_Request_TagGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_QueryFiles_Request.TagGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tags = 1;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_QueryFiles_Request.TagGroup.tags");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_QueryFiles_Request.TagGroup)
  return target;
}

size_t CPublishedFile_QueryFiles_Request_TagGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_QueryFiles_Request.TagGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_QueryFiles_Request_TagGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_QueryFiles_Request_TagGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_QueryFiles_Request_TagGroup::GetClassData() const { return &_class_data_; }

void CPublishedFile_QueryFiles_Request_TagGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_QueryFiles_Request_TagGroup *>(to)->MergeFrom(
      static_cast<const CPublishedFile_QueryFiles_Request_TagGroup &>(from));
}


void CPublishedFile_QueryFiles_Request_TagGroup::MergeFrom(const CPublishedFile_QueryFiles_Request_TagGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_QueryFiles_Request.TagGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_QueryFiles_Request_TagGroup::CopyFrom(const CPublishedFile_QueryFiles_Request_TagGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_QueryFiles_Request.TagGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_QueryFiles_Request_TagGroup::IsInitialized() const {
  return true;
}

void CPublishedFile_QueryFiles_Request_TagGroup::InternalSwap(CPublishedFile_QueryFiles_Request_TagGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_QueryFiles_Request_TagGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[48]);
}

// ===================================================================

class CPublishedFile_QueryFiles_Request_DateRange::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_QueryFiles_Request_DateRange>()._has_bits_);
  static void set_has_timestamp_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_QueryFiles_Request_DateRange::CPublishedFile_QueryFiles_Request_DateRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_QueryFiles_Request.DateRange)
}
CPublishedFile_QueryFiles_Request_DateRange::CPublishedFile_QueryFiles_Request_DateRange(const CPublishedFile_QueryFiles_Request_DateRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_start_, &from.timestamp_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_end_) -
    reinterpret_cast<char*>(&timestamp_start_)) + sizeof(timestamp_end_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_QueryFiles_Request.DateRange)
}

inline void CPublishedFile_QueryFiles_Request_DateRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_end_) -
    reinterpret_cast<char*>(&timestamp_start_)) + sizeof(timestamp_end_));
}

CPublishedFile_QueryFiles_Request_DateRange::~CPublishedFile_QueryFiles_Request_DateRange() {
  // @@protoc_insertion_point(destructor:CPublishedFile_QueryFiles_Request.DateRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_QueryFiles_Request_DateRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_QueryFiles_Request_DateRange::ArenaDtor(void* object) {
  CPublishedFile_QueryFiles_Request_DateRange* _this = reinterpret_cast< CPublishedFile_QueryFiles_Request_DateRange* >(object);
  (void)_this;
}
void CPublishedFile_QueryFiles_Request_DateRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_QueryFiles_Request_DateRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_QueryFiles_Request_DateRange::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_QueryFiles_Request.DateRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timestamp_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_end_) -
        reinterpret_cast<char*>(&timestamp_start_)) + sizeof(timestamp_end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_QueryFiles_Request_DateRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 timestamp_start = 1 [(.description) = "(Optional) Include items with the relevant date field after this value."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_start(&has_bits);
          timestamp_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp_end = 2 [(.description) = "(Optional) Include items with the relevant date field before this value."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp_end(&has_bits);
          timestamp_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_QueryFiles_Request_DateRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_QueryFiles_Request.DateRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp_start = 1 [(.description) = "(Optional) Include items with the relevant date field after this value."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp_start(), target);
  }

  // optional uint32 timestamp_end = 2 [(.description) = "(Optional) Include items with the relevant date field before this value."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_QueryFiles_Request.DateRange)
  return target;
}

size_t CPublishedFile_QueryFiles_Request_DateRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_QueryFiles_Request.DateRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 timestamp_start = 1 [(.description) = "(Optional) Include items with the relevant date field after this value."];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp_start());
    }

    // optional uint32 timestamp_end = 2 [(.description) = "(Optional) Include items with the relevant date field before this value."];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp_end());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_QueryFiles_Request_DateRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_QueryFiles_Request_DateRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_QueryFiles_Request_DateRange::GetClassData() const { return &_class_data_; }

void CPublishedFile_QueryFiles_Request_DateRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_QueryFiles_Request_DateRange *>(to)->MergeFrom(
      static_cast<const CPublishedFile_QueryFiles_Request_DateRange &>(from));
}


void CPublishedFile_QueryFiles_Request_DateRange::MergeFrom(const CPublishedFile_QueryFiles_Request_DateRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_QueryFiles_Request.DateRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_start_ = from.timestamp_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_end_ = from.timestamp_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_QueryFiles_Request_DateRange::CopyFrom(const CPublishedFile_QueryFiles_Request_DateRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_QueryFiles_Request.DateRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_QueryFiles_Request_DateRange::IsInitialized() const {
  return true;
}

void CPublishedFile_QueryFiles_Request_DateRange::InternalSwap(CPublishedFile_QueryFiles_Request_DateRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_QueryFiles_Request_DateRange, timestamp_end_)
      + sizeof(CPublishedFile_QueryFiles_Request_DateRange::timestamp_end_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_QueryFiles_Request_DateRange, timestamp_start_)>(
          reinterpret_cast<char*>(&timestamp_start_),
          reinterpret_cast<char*>(&other->timestamp_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_QueryFiles_Request_DateRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[49]);
}

// ===================================================================

class CPublishedFile_QueryFiles_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_QueryFiles_Request>()._has_bits_);
  static void set_has_query_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_numperpage(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_creator_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_match_all_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_search_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filetype(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_child_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_days(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_include_recent_votes_only(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_cache_max_age_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::CPublishedFile_QueryFiles_Request_DateRange& date_range_created(const CPublishedFile_QueryFiles_Request* msg);
  static void set_has_date_range_created(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CPublishedFile_QueryFiles_Request_DateRange& date_range_updated(const CPublishedFile_QueryFiles_Request* msg);
  static void set_has_date_range_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_totalonly(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ids_only(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_return_vote_data(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_return_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_return_kv_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_return_previews(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_return_children(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_return_short_description(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_return_for_sale_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_return_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_return_playtime_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_return_details(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_strip_description_bbcode(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_desired_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_return_reactions(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
};

const ::CPublishedFile_QueryFiles_Request_DateRange&
CPublishedFile_QueryFiles_Request::_Internal::date_range_created(const CPublishedFile_QueryFiles_Request* msg) {
  return *msg->date_range_created_;
}
const ::CPublishedFile_QueryFiles_Request_DateRange&
CPublishedFile_QueryFiles_Request::_Internal::date_range_updated(const CPublishedFile_QueryFiles_Request* msg) {
  return *msg->date_range_updated_;
}
CPublishedFile_QueryFiles_Request::CPublishedFile_QueryFiles_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  requiredtags_(arena),
  excludedtags_(arena),
  required_flags_(arena),
  omitted_flags_(arena),
  required_kv_tags_(arena),
  taggroups_(arena),
  excluded_content_descriptors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_QueryFiles_Request)
}
CPublishedFile_QueryFiles_Request::CPublishedFile_QueryFiles_Request(const CPublishedFile_QueryFiles_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      requiredtags_(from.requiredtags_),
      excludedtags_(from.excludedtags_),
      required_flags_(from.required_flags_),
      omitted_flags_(from.omitted_flags_),
      required_kv_tags_(from.required_kv_tags_),
      taggroups_(from.taggroups_),
      excluded_content_descriptors_(from.excluded_content_descriptors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    search_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_search_text()) {
    search_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search_text(), 
      GetArenaForAllocation());
  }
  cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cursor()) {
    cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cursor(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_date_range_created()) {
    date_range_created_ = new ::CPublishedFile_QueryFiles_Request_DateRange(*from.date_range_created_);
  } else {
    date_range_created_ = nullptr;
  }
  if (from._internal_has_date_range_updated()) {
    date_range_updated_ = new ::CPublishedFile_QueryFiles_Request_DateRange(*from.date_range_updated_);
  } else {
    date_range_updated_ = nullptr;
  }
  ::memcpy(&query_type_, &from.query_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_all_tags_) -
    reinterpret_cast<char*>(&query_type_)) + sizeof(match_all_tags_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_QueryFiles_Request)
}

inline void CPublishedFile_QueryFiles_Request::SharedCtor() {
search_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  search_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&date_range_created_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&return_reactions_) -
    reinterpret_cast<char*>(&date_range_created_)) + sizeof(return_reactions_));
numperpage_ = 1u;
match_all_tags_ = true;
}

CPublishedFile_QueryFiles_Request::~CPublishedFile_QueryFiles_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_QueryFiles_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_QueryFiles_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  search_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete date_range_created_;
  if (this != internal_default_instance()) delete date_range_updated_;
}

void CPublishedFile_QueryFiles_Request::ArenaDtor(void* object) {
  CPublishedFile_QueryFiles_Request* _this = reinterpret_cast< CPublishedFile_QueryFiles_Request* >(object);
  (void)_this;
}
void CPublishedFile_QueryFiles_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_QueryFiles_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_QueryFiles_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_QueryFiles_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requiredtags_.Clear();
  excludedtags_.Clear();
  required_flags_.Clear();
  omitted_flags_.Clear();
  required_kv_tags_.Clear();
  taggroups_.Clear();
  excluded_content_descriptors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      search_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cursor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(date_range_created_ != nullptr);
      date_range_created_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(date_range_updated_ != nullptr);
      date_range_updated_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&query_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&query_type_)) + sizeof(appid_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&child_publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_recent_votes_only_) -
        reinterpret_cast<char*>(&child_publishedfileid_)) + sizeof(include_recent_votes_only_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&totalonly_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cache_max_age_seconds_) -
        reinterpret_cast<char*>(&totalonly_)) + sizeof(cache_max_age_seconds_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&language_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&return_reactions_) -
        reinterpret_cast<char*>(&language_)) + sizeof(return_reactions_));
    numperpage_ = 1u;
    match_all_tags_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_QueryFiles_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 query_type = 1 [(.description) = "enumeration EPublishedFileQueryType in clientenums.h"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_query_type(&has_bits);
          query_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 page = 2 [(.description) = "Current page"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_page(&has_bits);
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 numperpage = 3 [default = 1, (.description) = "(Optional) The number of results, per page to return."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_numperpage(&has_bits);
          numperpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creator_appid = 4 [(.description) = "App that created the files"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_creator_appid(&has_bits);
          creator_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 5 [(.description) = "App that consumes the files"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string requiredtags = 6 [(.description) = "Tags to match on. See match_all_tags parameter below"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_requiredtags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_QueryFiles_Request.requiredtags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string excludedtags = 7 [(.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_excludedtags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_QueryFiles_Request.excludedtags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool match_all_tags = 8 [default = true, (.description) = "If true, then items must have all the tags specified, otherwise they must have at least one of the tags."];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_match_all_tags(&has_bits);
          match_all_tags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string required_flags = 9 [(.description) = "Required flags that must be set on any returned items"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_required_flags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_QueryFiles_Request.required_flags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string omitted_flags = 10 [(.description) = "Flags that must not be set on any returned items"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_omitted_flags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_QueryFiles_Request.omitted_flags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string search_text = 11 [(.description) = "Text to match in the item\'s title or description"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_search_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_QueryFiles_Request.search_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 filetype = 12 [(.description) = "EPublishedFileInfoMatchingFileType"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_filetype(&has_bits);
          filetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 child_publishedfileid = 13 [(.description) = "Find all items that reference the given item."];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_child_publishedfileid(&has_bits);
          child_publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 days = 14 [(.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then this is the number of days to get votes for [1,7]."];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_days(&has_bits);
          days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool include_recent_votes_only = 15 [(.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then limit result set just to items that have votes within the day range given"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_include_recent_votes_only(&has_bits);
          include_recent_votes_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool totalonly = 16 [(.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_totalonly(&has_bits);
          totalonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_vote_data = 17 [(.description) = "Return vote data"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_return_vote_data(&has_bits);
          return_vote_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_tags = 18 [(.description) = "Return tags in the file details"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_return_tags(&has_bits);
          return_tags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_kv_tags = 19 [(.description) = "Return key-value tags in the file details"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_return_kv_tags(&has_bits);
          return_kv_tags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_previews = 20 [(.description) = "Return preview image and video details in the file details"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_return_previews(&has_bits);
          return_previews_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_children = 21 [(.description) = "Return child item ids in the file details"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_return_children(&has_bits);
          return_children_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_short_description = 22 [(.description) = "Populate the short_description field instead of file_description"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_return_short_description(&has_bits);
          return_short_description_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_for_sale_data = 30 [(.description) = "Return pricing information, if applicable"];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_return_for_sale_data(&has_bits);
          return_for_sale_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cache_max_age_seconds = 31 [default = 0, (.description) = "Allow stale data to be returned for the specified number of seconds."];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_cache_max_age_seconds(&has_bits);
          cache_max_age_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_metadata = 32 [default = false, (.description) = "Populate the metadata"];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_return_metadata(&has_bits);
          return_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 language = 33 [default = 0, (.description) = "Language to search in and also what gets returned. Defaults to English."];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPublishedFile_QueryFiles_Request.KVTag required_kv_tags = 34 [(.description) = "Required key-value tags to match on."];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_required_kv_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool ids_only = 35 [(.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ids_only(&has_bits);
          ids_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 return_playtime_stats = 36 [(.description) = "Return playtime stats for the specified number of days before today."];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_return_playtime_stats(&has_bits);
          return_playtime_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool return_details = 37 [(.description) = "By default, if none of the other \'return_*\' fields are set, only some voting details are returned. Set this to true to return the default set of details."];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_return_details(&has_bits);
          return_details_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool strip_description_bbcode = 38 [(.description) = "Strips BBCode from descriptions."];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_strip_description_bbcode(&has_bits);
          strip_description_bbcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cursor = 39 [(.description) = "Cursor to paginate through the results (set to \'*\' for the first request).  Prefer this over using the page parameter, as it will allow you to do deep pagination.  When used, the page parameter will be ignored."];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_QueryFiles_Request.cursor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EPublishedFileRevision desired_revision = 40 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPublishedFileRevision_IsValid(val))) {
            _internal_set_desired_revision(static_cast<::EPublishedFileRevision>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(40, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CPublishedFile_QueryFiles_Request.TagGroup taggroups = 42 [(.description) = "(Optional) At least one of the tags must be present on a published file to satisfy the query."];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_taggroups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<338>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool return_reactions = 43 [default = false, (.description) = "If true, then reactions to items will be returned."];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_return_reactions(&has_bits);
          return_reactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CPublishedFile_QueryFiles_Request.DateRange date_range_created = 44 [(.description) = "(Optional) Filter to items created within this range."];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_range_created(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CPublishedFile_QueryFiles_Request.DateRange date_range_updated = 45 [(.description) = "(Optional) Filter to items updated within this range."];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_range_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .EContentDescriptorID excluded_content_descriptors = 46 [(.description) = "(Optional) Filter out items that have these content descriptors."];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::EContentDescriptorID_IsValid(val))) {
              _internal_add_excluded_content_descriptors(static_cast<::EContentDescriptorID>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(46, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<368>(ptr));
        } else if (static_cast<uint8_t>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_excluded_content_descriptors(), ptr, ctx, ::EContentDescriptorID_IsValid, &_internal_metadata_, 46);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_QueryFiles_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_QueryFiles_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 query_type = 1 [(.description) = "enumeration EPublishedFileQueryType in clientenums.h"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_query_type(), target);
  }

  // optional uint32 page = 2 [(.description) = "Current page"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // optional uint32 numperpage = 3 [default = 1, (.description) = "(Optional) The number of results, per page to return."];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_numperpage(), target);
  }

  // optional uint32 creator_appid = 4 [(.description) = "App that created the files"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_creator_appid(), target);
  }

  // optional uint32 appid = 5 [(.description) = "App that consumes the files"];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_appid(), target);
  }

  // repeated string requiredtags = 6 [(.description) = "Tags to match on. See match_all_tags parameter below"];
  for (int i = 0, n = this->_internal_requiredtags_size(); i < n; i++) {
    const auto& s = this->_internal_requiredtags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_QueryFiles_Request.requiredtags");
    target = stream->WriteString(6, s, target);
  }

  // repeated string excludedtags = 7 [(.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  for (int i = 0, n = this->_internal_excludedtags_size(); i < n; i++) {
    const auto& s = this->_internal_excludedtags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_QueryFiles_Request.excludedtags");
    target = stream->WriteString(7, s, target);
  }

  // optional bool match_all_tags = 8 [default = true, (.description) = "If true, then items must have all the tags specified, otherwise they must have at least one of the tags."];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_match_all_tags(), target);
  }

  // repeated string required_flags = 9 [(.description) = "Required flags that must be set on any returned items"];
  for (int i = 0, n = this->_internal_required_flags_size(); i < n; i++) {
    const auto& s = this->_internal_required_flags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_QueryFiles_Request.required_flags");
    target = stream->WriteString(9, s, target);
  }

  // repeated string omitted_flags = 10 [(.description) = "Flags that must not be set on any returned items"];
  for (int i = 0, n = this->_internal_omitted_flags_size(); i < n; i++) {
    const auto& s = this->_internal_omitted_flags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_QueryFiles_Request.omitted_flags");
    target = stream->WriteString(10, s, target);
  }

  // optional string search_text = 11 [(.description) = "Text to match in the item\'s title or description"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search_text().data(), static_cast<int>(this->_internal_search_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_QueryFiles_Request.search_text");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_search_text(), target);
  }

  // optional uint32 filetype = 12 [(.description) = "EPublishedFileInfoMatchingFileType"];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_filetype(), target);
  }

  // optional fixed64 child_publishedfileid = 13 [(.description) = "Find all items that reference the given item."];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(13, this->_internal_child_publishedfileid(), target);
  }

  // optional uint32 days = 14 [(.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then this is the number of days to get votes for [1,7]."];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_days(), target);
  }

  // optional bool include_recent_votes_only = 15 [(.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then limit result set just to items that have votes within the day range given"];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_include_recent_votes_only(), target);
  }

  // optional bool totalonly = 16 [(.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_totalonly(), target);
  }

  // optional bool return_vote_data = 17 [(.description) = "Return vote data"];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_return_vote_data(), target);
  }

  // optional bool return_tags = 18 [(.description) = "Return tags in the file details"];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_return_tags(), target);
  }

  // optional bool return_kv_tags = 19 [(.description) = "Return key-value tags in the file details"];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_return_kv_tags(), target);
  }

  // optional bool return_previews = 20 [(.description) = "Return preview image and video details in the file details"];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_return_previews(), target);
  }

  // optional bool return_children = 21 [(.description) = "Return child item ids in the file details"];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_return_children(), target);
  }

  // optional bool return_short_description = 22 [(.description) = "Populate the short_description field instead of file_description"];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_return_short_description(), target);
  }

  // optional bool return_for_sale_data = 30 [(.description) = "Return pricing information, if applicable"];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_return_for_sale_data(), target);
  }

  // optional uint32 cache_max_age_seconds = 31 [default = 0, (.description) = "Allow stale data to be returned for the specified number of seconds."];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_cache_max_age_seconds(), target);
  }

  // optional bool return_metadata = 32 [default = false, (.description) = "Populate the metadata"];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_return_metadata(), target);
  }

  // optional int32 language = 33 [default = 0, (.description) = "Language to search in and also what gets returned. Defaults to English."];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_language(), target);
  }

  // repeated .CPublishedFile_QueryFiles_Request.KVTag required_kv_tags = 34 [(.description) = "Required key-value tags to match on."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_required_kv_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, this->_internal_required_kv_tags(i), target, stream);
  }

  // optional bool ids_only = 35 [(.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_ids_only(), target);
  }

  // optional uint32 return_playtime_stats = 36 [(.description) = "Return playtime stats for the specified number of days before today."];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_return_playtime_stats(), target);
  }

  // optional bool return_details = 37 [(.description) = "By default, if none of the other \'return_*\' fields are set, only some voting details are returned. Set this to true to return the default set of details."];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_return_details(), target);
  }

  // optional bool strip_description_bbcode = 38 [(.description) = "Strips BBCode from descriptions."];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(38, this->_internal_strip_description_bbcode(), target);
  }

  // optional string cursor = 39 [(.description) = "Cursor to paginate through the results (set to \'*\' for the first request).  Prefer this over using the page parameter, as it will allow you to do deep pagination.  When used, the page parameter will be ignored."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_QueryFiles_Request.cursor");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_cursor(), target);
  }

  // optional .EPublishedFileRevision desired_revision = 40 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      40, this->_internal_desired_revision(), target);
  }

  // repeated .CPublishedFile_QueryFiles_Request.TagGroup taggroups = 42 [(.description) = "(Optional) At least one of the tags must be present on a published file to satisfy the query."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_taggroups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, this->_internal_taggroups(i), target, stream);
  }

  // optional bool return_reactions = 43 [default = false, (.description) = "If true, then reactions to items will be returned."];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_return_reactions(), target);
  }

  // optional .CPublishedFile_QueryFiles_Request.DateRange date_range_created = 44 [(.description) = "(Optional) Filter to items created within this range."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::date_range_created(this), target, stream);
  }

  // optional .CPublishedFile_QueryFiles_Request.DateRange date_range_updated = 45 [(.description) = "(Optional) Filter to items updated within this range."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::date_range_updated(this), target, stream);
  }

  // repeated .EContentDescriptorID excluded_content_descriptors = 46 [(.description) = "(Optional) Filter out items that have these content descriptors."];
  for (int i = 0, n = this->_internal_excluded_content_descriptors_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        46, this->_internal_excluded_content_descriptors(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_QueryFiles_Request)
  return target;
}

size_t CPublishedFile_QueryFiles_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_QueryFiles_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string requiredtags = 6 [(.description) = "Tags to match on. See match_all_tags parameter below"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(requiredtags_.size());
  for (int i = 0, n = requiredtags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      requiredtags_.Get(i));
  }

  // repeated string excludedtags = 7 [(.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(excludedtags_.size());
  for (int i = 0, n = excludedtags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      excludedtags_.Get(i));
  }

  // repeated string required_flags = 9 [(.description) = "Required flags that must be set on any returned items"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(required_flags_.size());
  for (int i = 0, n = required_flags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      required_flags_.Get(i));
  }

  // repeated string omitted_flags = 10 [(.description) = "Flags that must not be set on any returned items"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(omitted_flags_.size());
  for (int i = 0, n = omitted_flags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      omitted_flags_.Get(i));
  }

  // repeated .CPublishedFile_QueryFiles_Request.KVTag required_kv_tags = 34 [(.description) = "Required key-value tags to match on."];
  total_size += 2UL * this->_internal_required_kv_tags_size();
  for (const auto& msg : this->required_kv_tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPublishedFile_QueryFiles_Request.TagGroup taggroups = 42 [(.description) = "(Optional) At least one of the tags must be present on a published file to satisfy the query."];
  total_size += 2UL * this->_internal_taggroups_size();
  for (const auto& msg : this->taggroups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .EContentDescriptorID excluded_content_descriptors = 46 [(.description) = "(Optional) Filter out items that have these content descriptors."];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_excluded_content_descriptors_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_excluded_content_descriptors(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string search_text = 11 [(.description) = "Text to match in the item\'s title or description"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_text());
    }

    // optional string cursor = 39 [(.description) = "Cursor to paginate through the results (set to \'*\' for the first request).  Prefer this over using the page parameter, as it will allow you to do deep pagination.  When used, the page parameter will be ignored."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cursor());
    }

    // optional .CPublishedFile_QueryFiles_Request.DateRange date_range_created = 44 [(.description) = "(Optional) Filter to items created within this range."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_range_created_);
    }

    // optional .CPublishedFile_QueryFiles_Request.DateRange date_range_updated = 45 [(.description) = "(Optional) Filter to items updated within this range."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_range_updated_);
    }

    // optional uint32 query_type = 1 [(.description) = "enumeration EPublishedFileQueryType in clientenums.h"];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_query_type());
    }

    // optional uint32 page = 2 [(.description) = "Current page"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_page());
    }

    // optional uint32 creator_appid = 4 [(.description) = "App that created the files"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_creator_appid());
    }

    // optional uint32 appid = 5 [(.description) = "App that consumes the files"];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional fixed64 child_publishedfileid = 13 [(.description) = "Find all items that reference the given item."];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional uint32 filetype = 12 [(.description) = "EPublishedFileInfoMatchingFileType"];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_filetype());
    }

    // optional uint32 days = 14 [(.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then this is the number of days to get votes for [1,7]."];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_days());
    }

    // optional bool return_tags = 18 [(.description) = "Return tags in the file details"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool return_kv_tags = 19 [(.description) = "Return key-value tags in the file details"];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool return_previews = 20 [(.description) = "Return preview image and video details in the file details"];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool return_children = 21 [(.description) = "Return child item ids in the file details"];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool include_recent_votes_only = 15 [(.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then limit result set just to items that have votes within the day range given"];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool totalonly = 16 [(.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool ids_only = 35 [(.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool return_vote_data = 17 [(.description) = "Return vote data"];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool return_short_description = 22 [(.description) = "Populate the short_description field instead of file_description"];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool return_for_sale_data = 30 [(.description) = "Return pricing information, if applicable"];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool return_metadata = 32 [default = false, (.description) = "Populate the metadata"];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool return_details = 37 [(.description) = "By default, if none of the other \'return_*\' fields are set, only some voting details are returned. Set this to true to return the default set of details."];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional uint32 cache_max_age_seconds = 31 [default = 0, (.description) = "Allow stale data to be returned for the specified number of seconds."];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cache_max_age_seconds());
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional int32 language = 33 [default = 0, (.description) = "Language to search in and also what gets returned. Defaults to English."];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_language());
    }

    // optional uint32 return_playtime_stats = 36 [(.description) = "Return playtime stats for the specified number of days before today."];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_return_playtime_stats());
    }

    // optional .EPublishedFileRevision desired_revision = 40 [default = k_EPublishedFileRevision_Default, (.description) = "Return the data for the specified revision."];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_desired_revision());
    }

    // optional bool strip_description_bbcode = 38 [(.description) = "Strips BBCode from descriptions."];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool return_reactions = 43 [default = false, (.description) = "If true, then reactions to items will be returned."];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 numperpage = 3 [default = 1, (.description) = "(Optional) The number of results, per page to return."];
    if (cached_has_bits & 0x20000000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_numperpage());
    }

    // optional bool match_all_tags = 8 [default = true, (.description) = "If true, then items must have all the tags specified, otherwise they must have at least one of the tags."];
    if (cached_has_bits & 0x40000000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_QueryFiles_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_QueryFiles_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_QueryFiles_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_QueryFiles_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_QueryFiles_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_QueryFiles_Request &>(from));
}


void CPublishedFile_QueryFiles_Request::MergeFrom(const CPublishedFile_QueryFiles_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_QueryFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  requiredtags_.MergeFrom(from.requiredtags_);
  excludedtags_.MergeFrom(from.excludedtags_);
  required_flags_.MergeFrom(from.required_flags_);
  omitted_flags_.MergeFrom(from.omitted_flags_);
  required_kv_tags_.MergeFrom(from.required_kv_tags_);
  taggroups_.MergeFrom(from.taggroups_);
  excluded_content_descriptors_.MergeFrom(from.excluded_content_descriptors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_search_text(from._internal_search_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cursor(from._internal_cursor());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_date_range_created()->::CPublishedFile_QueryFiles_Request_DateRange::MergeFrom(from._internal_date_range_created());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_date_range_updated()->::CPublishedFile_QueryFiles_Request_DateRange::MergeFrom(from._internal_date_range_updated());
    }
    if (cached_has_bits & 0x00000010u) {
      query_type_ = from.query_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000040u) {
      creator_appid_ = from.creator_appid_;
    }
    if (cached_has_bits & 0x00000080u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      child_publishedfileid_ = from.child_publishedfileid_;
    }
    if (cached_has_bits & 0x00000200u) {
      filetype_ = from.filetype_;
    }
    if (cached_has_bits & 0x00000400u) {
      days_ = from.days_;
    }
    if (cached_has_bits & 0x00000800u) {
      return_tags_ = from.return_tags_;
    }
    if (cached_has_bits & 0x00001000u) {
      return_kv_tags_ = from.return_kv_tags_;
    }
    if (cached_has_bits & 0x00002000u) {
      return_previews_ = from.return_previews_;
    }
    if (cached_has_bits & 0x00004000u) {
      return_children_ = from.return_children_;
    }
    if (cached_has_bits & 0x00008000u) {
      include_recent_votes_only_ = from.include_recent_votes_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      totalonly_ = from.totalonly_;
    }
    if (cached_has_bits & 0x00020000u) {
      ids_only_ = from.ids_only_;
    }
    if (cached_has_bits & 0x00040000u) {
      return_vote_data_ = from.return_vote_data_;
    }
    if (cached_has_bits & 0x00080000u) {
      return_short_description_ = from.return_short_description_;
    }
    if (cached_has_bits & 0x00100000u) {
      return_for_sale_data_ = from.return_for_sale_data_;
    }
    if (cached_has_bits & 0x00200000u) {
      return_metadata_ = from.return_metadata_;
    }
    if (cached_has_bits & 0x00400000u) {
      return_details_ = from.return_details_;
    }
    if (cached_has_bits & 0x00800000u) {
      cache_max_age_seconds_ = from.cache_max_age_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x02000000u) {
      return_playtime_stats_ = from.return_playtime_stats_;
    }
    if (cached_has_bits & 0x04000000u) {
      desired_revision_ = from.desired_revision_;
    }
    if (cached_has_bits & 0x08000000u) {
      strip_description_bbcode_ = from.strip_description_bbcode_;
    }
    if (cached_has_bits & 0x10000000u) {
      return_reactions_ = from.return_reactions_;
    }
    if (cached_has_bits & 0x20000000u) {
      numperpage_ = from.numperpage_;
    }
    if (cached_has_bits & 0x40000000u) {
      match_all_tags_ = from.match_all_tags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_QueryFiles_Request::CopyFrom(const CPublishedFile_QueryFiles_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_QueryFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_QueryFiles_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_QueryFiles_Request::InternalSwap(CPublishedFile_QueryFiles_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  requiredtags_.InternalSwap(&other->requiredtags_);
  excludedtags_.InternalSwap(&other->excludedtags_);
  required_flags_.InternalSwap(&other->required_flags_);
  omitted_flags_.InternalSwap(&other->omitted_flags_);
  required_kv_tags_.InternalSwap(&other->required_kv_tags_);
  taggroups_.InternalSwap(&other->taggroups_);
  excluded_content_descriptors_.InternalSwap(&other->excluded_content_descriptors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &search_text_, lhs_arena,
      &other->search_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cursor_, lhs_arena,
      &other->cursor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, return_reactions_)
      + sizeof(CPublishedFile_QueryFiles_Request::return_reactions_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, date_range_created_)>(
          reinterpret_cast<char*>(&date_range_created_),
          reinterpret_cast<char*>(&other->date_range_created_));
  swap(numperpage_, other->numperpage_);
  swap(match_all_tags_, other->match_all_tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_QueryFiles_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[50]);
}

// ===================================================================

class CPublishedFile_QueryFiles_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_QueryFiles_Response>()._has_bits_);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_next_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_QueryFiles_Response::CPublishedFile_QueryFiles_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  publishedfiledetails_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_QueryFiles_Response)
}
CPublishedFile_QueryFiles_Response::CPublishedFile_QueryFiles_Response(const CPublishedFile_QueryFiles_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      publishedfiledetails_(from.publishedfiledetails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_next_cursor()) {
    next_cursor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_cursor(), 
      GetArenaForAllocation());
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_QueryFiles_Response)
}

inline void CPublishedFile_QueryFiles_Response::SharedCtor() {
next_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
total_ = 0u;
}

CPublishedFile_QueryFiles_Response::~CPublishedFile_QueryFiles_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_QueryFiles_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_QueryFiles_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_QueryFiles_Response::ArenaDtor(void* object) {
  CPublishedFile_QueryFiles_Response* _this = reinterpret_cast< CPublishedFile_QueryFiles_Response* >(object);
  (void)_this;
}
void CPublishedFile_QueryFiles_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_QueryFiles_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_QueryFiles_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_QueryFiles_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfiledetails_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    next_cursor_.ClearNonDefaultToEmpty();
  }
  total_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_QueryFiles_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 total = 1 [(.description) = "Number of matches found, not necessarily number of items returned"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_total(&has_bits);
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PublishedFileDetails publishedfiledetails = 2 [(.description) = "Each file details will be populated, depending on what return values were requested."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publishedfiledetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string next_cursor = 3 [(.description) = "If a paging cursor was used, then this will be the next cursor to use for paging through results"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_next_cursor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_QueryFiles_Response.next_cursor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_QueryFiles_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_QueryFiles_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 total = 1 [(.description) = "Number of matches found, not necessarily number of items returned"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total(), target);
  }

  // repeated .PublishedFileDetails publishedfiledetails = 2 [(.description) = "Each file details will be populated, depending on what return values were requested."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_publishedfiledetails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_publishedfiledetails(i), target, stream);
  }

  // optional string next_cursor = 3 [(.description) = "If a paging cursor was used, then this will be the next cursor to use for paging through results"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_next_cursor().data(), static_cast<int>(this->_internal_next_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_QueryFiles_Response.next_cursor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_next_cursor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_QueryFiles_Response)
  return target;
}

size_t CPublishedFile_QueryFiles_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_QueryFiles_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PublishedFileDetails publishedfiledetails = 2 [(.description) = "Each file details will be populated, depending on what return values were requested."];
  total_size += 1UL * this->_internal_publishedfiledetails_size();
  for (const auto& msg : this->publishedfiledetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string next_cursor = 3 [(.description) = "If a paging cursor was used, then this will be the next cursor to use for paging through results"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_next_cursor());
    }

    // optional uint32 total = 1 [(.description) = "Number of matches found, not necessarily number of items returned"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_QueryFiles_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_QueryFiles_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_QueryFiles_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_QueryFiles_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_QueryFiles_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_QueryFiles_Response &>(from));
}


void CPublishedFile_QueryFiles_Response::MergeFrom(const CPublishedFile_QueryFiles_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_QueryFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfiledetails_.MergeFrom(from.publishedfiledetails_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_next_cursor(from._internal_next_cursor());
    }
    if (cached_has_bits & 0x00000002u) {
      total_ = from.total_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_QueryFiles_Response::CopyFrom(const CPublishedFile_QueryFiles_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_QueryFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_QueryFiles_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_QueryFiles_Response::InternalSwap(CPublishedFile_QueryFiles_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  publishedfiledetails_.InternalSwap(&other->publishedfiledetails_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_cursor_, lhs_arena,
      &other->next_cursor_, rhs_arena
  );
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_QueryFiles_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[51]);
}

// ===================================================================

class CPublishedFile_AddAppRelationship_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_AddAppRelationship_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPublishedFile_AddAppRelationship_Request::CPublishedFile_AddAppRelationship_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_AddAppRelationship_Request)
}
CPublishedFile_AddAppRelationship_Request::CPublishedFile_AddAppRelationship_Request(const CPublishedFile_AddAppRelationship_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&relationship_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(relationship_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_AddAppRelationship_Request)
}

inline void CPublishedFile_AddAppRelationship_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&relationship_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(relationship_));
}

CPublishedFile_AddAppRelationship_Request::~CPublishedFile_AddAppRelationship_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_AddAppRelationship_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_AddAppRelationship_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_AddAppRelationship_Request::ArenaDtor(void* object) {
  CPublishedFile_AddAppRelationship_Request* _this = reinterpret_cast< CPublishedFile_AddAppRelationship_Request* >(object);
  (void)_this;
}
void CPublishedFile_AddAppRelationship_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_AddAppRelationship_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_AddAppRelationship_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_AddAppRelationship_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relationship_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(relationship_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_AddAppRelationship_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 relationship = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_relationship(&has_bits);
          relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_AddAppRelationship_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_AddAppRelationship_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional uint32 relationship = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_relationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_AddAppRelationship_Request)
  return target;
}

size_t CPublishedFile_AddAppRelationship_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_AddAppRelationship_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 relationship = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_relationship());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_AddAppRelationship_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_AddAppRelationship_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_AddAppRelationship_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_AddAppRelationship_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_AddAppRelationship_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_AddAppRelationship_Request &>(from));
}


void CPublishedFile_AddAppRelationship_Request::MergeFrom(const CPublishedFile_AddAppRelationship_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_AddAppRelationship_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      relationship_ = from.relationship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_AddAppRelationship_Request::CopyFrom(const CPublishedFile_AddAppRelationship_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_AddAppRelationship_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_AddAppRelationship_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_AddAppRelationship_Request::InternalSwap(CPublishedFile_AddAppRelationship_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_AddAppRelationship_Request, relationship_)
      + sizeof(CPublishedFile_AddAppRelationship_Request::relationship_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_AddAppRelationship_Request, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_AddAppRelationship_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[52]);
}

// ===================================================================

class CPublishedFile_AddAppRelationship_Response::_Internal {
 public:
};

CPublishedFile_AddAppRelationship_Response::CPublishedFile_AddAppRelationship_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_AddAppRelationship_Response)
}
CPublishedFile_AddAppRelationship_Response::CPublishedFile_AddAppRelationship_Response(const CPublishedFile_AddAppRelationship_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_AddAppRelationship_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_AddAppRelationship_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_AddAppRelationship_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_AddAppRelationship_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[53]);
}

// ===================================================================

class CPublishedFile_RemoveAppRelationship_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_RemoveAppRelationship_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPublishedFile_RemoveAppRelationship_Request::CPublishedFile_RemoveAppRelationship_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_RemoveAppRelationship_Request)
}
CPublishedFile_RemoveAppRelationship_Request::CPublishedFile_RemoveAppRelationship_Request(const CPublishedFile_RemoveAppRelationship_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&relationship_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(relationship_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_RemoveAppRelationship_Request)
}

inline void CPublishedFile_RemoveAppRelationship_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&relationship_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(relationship_));
}

CPublishedFile_RemoveAppRelationship_Request::~CPublishedFile_RemoveAppRelationship_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_RemoveAppRelationship_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_RemoveAppRelationship_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_RemoveAppRelationship_Request::ArenaDtor(void* object) {
  CPublishedFile_RemoveAppRelationship_Request* _this = reinterpret_cast< CPublishedFile_RemoveAppRelationship_Request* >(object);
  (void)_this;
}
void CPublishedFile_RemoveAppRelationship_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_RemoveAppRelationship_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_RemoveAppRelationship_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_RemoveAppRelationship_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relationship_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(relationship_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_RemoveAppRelationship_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 relationship = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_relationship(&has_bits);
          relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_RemoveAppRelationship_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_RemoveAppRelationship_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional uint32 relationship = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_relationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_RemoveAppRelationship_Request)
  return target;
}

size_t CPublishedFile_RemoveAppRelationship_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_RemoveAppRelationship_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 relationship = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_relationship());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_RemoveAppRelationship_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_RemoveAppRelationship_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_RemoveAppRelationship_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_RemoveAppRelationship_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_RemoveAppRelationship_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_RemoveAppRelationship_Request &>(from));
}


void CPublishedFile_RemoveAppRelationship_Request::MergeFrom(const CPublishedFile_RemoveAppRelationship_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_RemoveAppRelationship_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      relationship_ = from.relationship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_RemoveAppRelationship_Request::CopyFrom(const CPublishedFile_RemoveAppRelationship_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_RemoveAppRelationship_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_RemoveAppRelationship_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_RemoveAppRelationship_Request::InternalSwap(CPublishedFile_RemoveAppRelationship_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_RemoveAppRelationship_Request, relationship_)
      + sizeof(CPublishedFile_RemoveAppRelationship_Request::relationship_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_RemoveAppRelationship_Request, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_RemoveAppRelationship_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[54]);
}

// ===================================================================

class CPublishedFile_RemoveAppRelationship_Response::_Internal {
 public:
};

CPublishedFile_RemoveAppRelationship_Response::CPublishedFile_RemoveAppRelationship_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_RemoveAppRelationship_Response)
}
CPublishedFile_RemoveAppRelationship_Response::CPublishedFile_RemoveAppRelationship_Response(const CPublishedFile_RemoveAppRelationship_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_RemoveAppRelationship_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_RemoveAppRelationship_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_RemoveAppRelationship_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_RemoveAppRelationship_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[55]);
}

// ===================================================================

class CPublishedFile_GetAppRelationships_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetAppRelationships_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_GetAppRelationships_Request::CPublishedFile_GetAppRelationships_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetAppRelationships_Request)
}
CPublishedFile_GetAppRelationships_Request::CPublishedFile_GetAppRelationships_Request(const CPublishedFile_GetAppRelationships_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetAppRelationships_Request)
}

inline void CPublishedFile_GetAppRelationships_Request::SharedCtor() {
publishedfileid_ = uint64_t{0u};
}

CPublishedFile_GetAppRelationships_Request::~CPublishedFile_GetAppRelationships_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetAppRelationships_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetAppRelationships_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetAppRelationships_Request::ArenaDtor(void* object) {
  CPublishedFile_GetAppRelationships_Request* _this = reinterpret_cast< CPublishedFile_GetAppRelationships_Request* >(object);
  (void)_this;
}
void CPublishedFile_GetAppRelationships_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetAppRelationships_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetAppRelationships_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetAppRelationships_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfileid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetAppRelationships_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetAppRelationships_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetAppRelationships_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetAppRelationships_Request)
  return target;
}

size_t CPublishedFile_GetAppRelationships_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetAppRelationships_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 publishedfileid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetAppRelationships_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetAppRelationships_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetAppRelationships_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetAppRelationships_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetAppRelationships_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetAppRelationships_Request &>(from));
}


void CPublishedFile_GetAppRelationships_Request::MergeFrom(const CPublishedFile_GetAppRelationships_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetAppRelationships_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_publishedfileid()) {
    _internal_set_publishedfileid(from._internal_publishedfileid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetAppRelationships_Request::CopyFrom(const CPublishedFile_GetAppRelationships_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetAppRelationships_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetAppRelationships_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetAppRelationships_Request::InternalSwap(CPublishedFile_GetAppRelationships_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(publishedfileid_, other->publishedfileid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetAppRelationships_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[56]);
}

// ===================================================================

class CPublishedFile_GetAppRelationships_Response_AppRelationship::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetAppRelationships_Response_AppRelationship>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_GetAppRelationships_Response_AppRelationship::CPublishedFile_GetAppRelationships_Response_AppRelationship(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetAppRelationships_Response.AppRelationship)
}
CPublishedFile_GetAppRelationships_Response_AppRelationship::CPublishedFile_GetAppRelationships_Response_AppRelationship(const CPublishedFile_GetAppRelationships_Response_AppRelationship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&relationship_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(relationship_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetAppRelationships_Response.AppRelationship)
}

inline void CPublishedFile_GetAppRelationships_Response_AppRelationship::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&relationship_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(relationship_));
}

CPublishedFile_GetAppRelationships_Response_AppRelationship::~CPublishedFile_GetAppRelationships_Response_AppRelationship() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetAppRelationships_Response.AppRelationship)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetAppRelationships_Response_AppRelationship::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetAppRelationships_Response_AppRelationship::ArenaDtor(void* object) {
  CPublishedFile_GetAppRelationships_Response_AppRelationship* _this = reinterpret_cast< CPublishedFile_GetAppRelationships_Response_AppRelationship* >(object);
  (void)_this;
}
void CPublishedFile_GetAppRelationships_Response_AppRelationship::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetAppRelationships_Response_AppRelationship::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetAppRelationships_Response_AppRelationship::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetAppRelationships_Response.AppRelationship)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relationship_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(relationship_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetAppRelationships_Response_AppRelationship::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 relationship = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_relationship(&has_bits);
          relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetAppRelationships_Response_AppRelationship::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetAppRelationships_Response.AppRelationship)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 relationship = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_relationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetAppRelationships_Response.AppRelationship)
  return target;
}

size_t CPublishedFile_GetAppRelationships_Response_AppRelationship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetAppRelationships_Response.AppRelationship)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 relationship = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_relationship());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetAppRelationships_Response_AppRelationship::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetAppRelationships_Response_AppRelationship::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetAppRelationships_Response_AppRelationship::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetAppRelationships_Response_AppRelationship::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetAppRelationships_Response_AppRelationship *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetAppRelationships_Response_AppRelationship &>(from));
}


void CPublishedFile_GetAppRelationships_Response_AppRelationship::MergeFrom(const CPublishedFile_GetAppRelationships_Response_AppRelationship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetAppRelationships_Response.AppRelationship)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      relationship_ = from.relationship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetAppRelationships_Response_AppRelationship::CopyFrom(const CPublishedFile_GetAppRelationships_Response_AppRelationship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetAppRelationships_Response.AppRelationship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetAppRelationships_Response_AppRelationship::IsInitialized() const {
  return true;
}

void CPublishedFile_GetAppRelationships_Response_AppRelationship::InternalSwap(CPublishedFile_GetAppRelationships_Response_AppRelationship* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetAppRelationships_Response_AppRelationship, relationship_)
      + sizeof(CPublishedFile_GetAppRelationships_Response_AppRelationship::relationship_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetAppRelationships_Response_AppRelationship, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetAppRelationships_Response_AppRelationship::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[57]);
}

// ===================================================================

class CPublishedFile_GetAppRelationships_Response::_Internal {
 public:
};

CPublishedFile_GetAppRelationships_Response::CPublishedFile_GetAppRelationships_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  app_relationships_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetAppRelationships_Response)
}
CPublishedFile_GetAppRelationships_Response::CPublishedFile_GetAppRelationships_Response(const CPublishedFile_GetAppRelationships_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      app_relationships_(from.app_relationships_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetAppRelationships_Response)
}

inline void CPublishedFile_GetAppRelationships_Response::SharedCtor() {
}

CPublishedFile_GetAppRelationships_Response::~CPublishedFile_GetAppRelationships_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetAppRelationships_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetAppRelationships_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetAppRelationships_Response::ArenaDtor(void* object) {
  CPublishedFile_GetAppRelationships_Response* _this = reinterpret_cast< CPublishedFile_GetAppRelationships_Response* >(object);
  (void)_this;
}
void CPublishedFile_GetAppRelationships_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetAppRelationships_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetAppRelationships_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetAppRelationships_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_relationships_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetAppRelationships_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPublishedFile_GetAppRelationships_Response.AppRelationship app_relationships = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_relationships(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetAppRelationships_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetAppRelationships_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPublishedFile_GetAppRelationships_Response.AppRelationship app_relationships = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_relationships_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_app_relationships(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetAppRelationships_Response)
  return target;
}

size_t CPublishedFile_GetAppRelationships_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetAppRelationships_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPublishedFile_GetAppRelationships_Response.AppRelationship app_relationships = 3;
  total_size += 1UL * this->_internal_app_relationships_size();
  for (const auto& msg : this->app_relationships_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetAppRelationships_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetAppRelationships_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetAppRelationships_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetAppRelationships_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetAppRelationships_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetAppRelationships_Response &>(from));
}


void CPublishedFile_GetAppRelationships_Response::MergeFrom(const CPublishedFile_GetAppRelationships_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetAppRelationships_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  app_relationships_.MergeFrom(from.app_relationships_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetAppRelationships_Response::CopyFrom(const CPublishedFile_GetAppRelationships_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetAppRelationships_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetAppRelationships_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetAppRelationships_Response::InternalSwap(CPublishedFile_GetAppRelationships_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  app_relationships_.InternalSwap(&other->app_relationships_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetAppRelationships_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[58]);
}

// ===================================================================

class CPublishedFile_GetAppRelationshipsBatched_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetAppRelationshipsBatched_Request>()._has_bits_);
  static void set_has_filter_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_GetAppRelationshipsBatched_Request::CPublishedFile_GetAppRelationshipsBatched_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  publishedfileids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetAppRelationshipsBatched_Request)
}
CPublishedFile_GetAppRelationshipsBatched_Request::CPublishedFile_GetAppRelationshipsBatched_Request(const CPublishedFile_GetAppRelationshipsBatched_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      publishedfileids_(from.publishedfileids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filter_relationship_ = from.filter_relationship_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetAppRelationshipsBatched_Request)
}

inline void CPublishedFile_GetAppRelationshipsBatched_Request::SharedCtor() {
filter_relationship_ = 0u;
}

CPublishedFile_GetAppRelationshipsBatched_Request::~CPublishedFile_GetAppRelationshipsBatched_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetAppRelationshipsBatched_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetAppRelationshipsBatched_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetAppRelationshipsBatched_Request::ArenaDtor(void* object) {
  CPublishedFile_GetAppRelationshipsBatched_Request* _this = reinterpret_cast< CPublishedFile_GetAppRelationshipsBatched_Request* >(object);
  (void)_this;
}
void CPublishedFile_GetAppRelationshipsBatched_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetAppRelationshipsBatched_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetAppRelationshipsBatched_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetAppRelationshipsBatched_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfileids_.Clear();
  filter_relationship_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetAppRelationshipsBatched_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 publishedfileids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_publishedfileids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_publishedfileids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 filter_relationship = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_filter_relationship(&has_bits);
          filter_relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetAppRelationshipsBatched_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetAppRelationshipsBatched_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 publishedfileids = 1;
  for (int i = 0, n = this->_internal_publishedfileids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 filter_relationship = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_filter_relationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetAppRelationshipsBatched_Request)
  return target;
}

size_t CPublishedFile_GetAppRelationshipsBatched_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetAppRelationshipsBatched_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 publishedfileids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->publishedfileids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_publishedfileids_size());
    total_size += data_size;
  }

  // optional uint32 filter_relationship = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_filter_relationship());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetAppRelationshipsBatched_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetAppRelationshipsBatched_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetAppRelationshipsBatched_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetAppRelationshipsBatched_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetAppRelationshipsBatched_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetAppRelationshipsBatched_Request &>(from));
}


void CPublishedFile_GetAppRelationshipsBatched_Request::MergeFrom(const CPublishedFile_GetAppRelationshipsBatched_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetAppRelationshipsBatched_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfileids_.MergeFrom(from.publishedfileids_);
  if (from._internal_has_filter_relationship()) {
    _internal_set_filter_relationship(from._internal_filter_relationship());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetAppRelationshipsBatched_Request::CopyFrom(const CPublishedFile_GetAppRelationshipsBatched_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetAppRelationshipsBatched_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetAppRelationshipsBatched_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetAppRelationshipsBatched_Request::InternalSwap(CPublishedFile_GetAppRelationshipsBatched_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  publishedfileids_.InternalSwap(&other->publishedfileids_);
  swap(filter_relationship_, other->filter_relationship_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetAppRelationshipsBatched_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[59]);
}

// ===================================================================

class CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship)
}
CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship(const CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&relationship_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(relationship_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship)
}

inline void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&relationship_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(relationship_));
}

CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::~CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::ArenaDtor(void* object) {
  CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* _this = reinterpret_cast< CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* >(object);
  (void)_this;
}
void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relationship_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(relationship_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 relationship = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_relationship(&has_bits);
          relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 relationship = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_relationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship)
  return target;
}

size_t CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 relationship = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_relationship());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship &>(from));
}


void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::MergeFrom(const CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      relationship_ = from.relationship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::CopyFrom(const CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::IsInitialized() const {
  return true;
}

void CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::InternalSwap(CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship, relationship_)
      + sizeof(CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::relationship_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[60]);
}

// ===================================================================

class CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  app_relationships_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship)
}
CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship(const CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      app_relationships_(from.app_relationships_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship)
}

inline void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(result_));
}

CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::~CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::ArenaDtor(void* object) {
  CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* _this = reinterpret_cast< CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* >(object);
  (void)_this;
}
void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_relationships_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship app_relationships = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_app_relationships(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional uint32 result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result(), target);
  }

  // repeated .CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship app_relationships = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_app_relationships_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_app_relationships(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship)
  return target;
}

size_t CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship app_relationships = 3;
  total_size += 1UL * this->_internal_app_relationships_size();
  for (const auto& msg : this->app_relationships_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
    }

    // optional uint32 result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship &>(from));
}


void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::MergeFrom(const CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  app_relationships_.MergeFrom(from.app_relationships_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::CopyFrom(const CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::IsInitialized() const {
  return true;
}

void CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::InternalSwap(CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  app_relationships_.InternalSwap(&other->app_relationships_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship, result_)
      + sizeof(CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::result_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[61]);
}

// ===================================================================

class CPublishedFile_GetAppRelationshipsBatched_Response::_Internal {
 public:
};

CPublishedFile_GetAppRelationshipsBatched_Response::CPublishedFile_GetAppRelationshipsBatched_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  relationships_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetAppRelationshipsBatched_Response)
}
CPublishedFile_GetAppRelationshipsBatched_Response::CPublishedFile_GetAppRelationshipsBatched_Response(const CPublishedFile_GetAppRelationshipsBatched_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      relationships_(from.relationships_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetAppRelationshipsBatched_Response)
}

inline void CPublishedFile_GetAppRelationshipsBatched_Response::SharedCtor() {
}

CPublishedFile_GetAppRelationshipsBatched_Response::~CPublishedFile_GetAppRelationshipsBatched_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetAppRelationshipsBatched_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetAppRelationshipsBatched_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetAppRelationshipsBatched_Response::ArenaDtor(void* object) {
  CPublishedFile_GetAppRelationshipsBatched_Response* _this = reinterpret_cast< CPublishedFile_GetAppRelationshipsBatched_Response* >(object);
  (void)_this;
}
void CPublishedFile_GetAppRelationshipsBatched_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetAppRelationshipsBatched_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetAppRelationshipsBatched_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetAppRelationshipsBatched_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relationships_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetAppRelationshipsBatched_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship relationships = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relationships(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetAppRelationshipsBatched_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetAppRelationshipsBatched_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship relationships = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_relationships_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_relationships(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetAppRelationshipsBatched_Response)
  return target;
}

size_t CPublishedFile_GetAppRelationshipsBatched_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetAppRelationshipsBatched_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship relationships = 1;
  total_size += 1UL * this->_internal_relationships_size();
  for (const auto& msg : this->relationships_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetAppRelationshipsBatched_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetAppRelationshipsBatched_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetAppRelationshipsBatched_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetAppRelationshipsBatched_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetAppRelationshipsBatched_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetAppRelationshipsBatched_Response &>(from));
}


void CPublishedFile_GetAppRelationshipsBatched_Response::MergeFrom(const CPublishedFile_GetAppRelationshipsBatched_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetAppRelationshipsBatched_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  relationships_.MergeFrom(from.relationships_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetAppRelationshipsBatched_Response::CopyFrom(const CPublishedFile_GetAppRelationshipsBatched_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetAppRelationshipsBatched_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetAppRelationshipsBatched_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetAppRelationshipsBatched_Response::InternalSwap(CPublishedFile_GetAppRelationshipsBatched_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  relationships_.InternalSwap(&other->relationships_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetAppRelationshipsBatched_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[62]);
}

// ===================================================================

class CPublishedFile_StartPlaytimeTracking_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_StartPlaytimeTracking_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_StartPlaytimeTracking_Request::CPublishedFile_StartPlaytimeTracking_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  publishedfileids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_StartPlaytimeTracking_Request)
}
CPublishedFile_StartPlaytimeTracking_Request::CPublishedFile_StartPlaytimeTracking_Request(const CPublishedFile_StartPlaytimeTracking_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      publishedfileids_(from.publishedfileids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_StartPlaytimeTracking_Request)
}

inline void CPublishedFile_StartPlaytimeTracking_Request::SharedCtor() {
appid_ = 0u;
}

CPublishedFile_StartPlaytimeTracking_Request::~CPublishedFile_StartPlaytimeTracking_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_StartPlaytimeTracking_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_StartPlaytimeTracking_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_StartPlaytimeTracking_Request::ArenaDtor(void* object) {
  CPublishedFile_StartPlaytimeTracking_Request* _this = reinterpret_cast< CPublishedFile_StartPlaytimeTracking_Request* >(object);
  (void)_this;
}
void CPublishedFile_StartPlaytimeTracking_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_StartPlaytimeTracking_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_StartPlaytimeTracking_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_StartPlaytimeTracking_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfileids_.Clear();
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_StartPlaytimeTracking_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 publishedfileids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_publishedfileids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_publishedfileids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_StartPlaytimeTracking_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_StartPlaytimeTracking_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // repeated uint64 publishedfileids = 2;
  for (int i = 0, n = this->_internal_publishedfileids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_publishedfileids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_StartPlaytimeTracking_Request)
  return target;
}

size_t CPublishedFile_StartPlaytimeTracking_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_StartPlaytimeTracking_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 publishedfileids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->publishedfileids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_publishedfileids_size());
    total_size += data_size;
  }

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_StartPlaytimeTracking_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_StartPlaytimeTracking_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_StartPlaytimeTracking_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_StartPlaytimeTracking_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_StartPlaytimeTracking_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_StartPlaytimeTracking_Request &>(from));
}


void CPublishedFile_StartPlaytimeTracking_Request::MergeFrom(const CPublishedFile_StartPlaytimeTracking_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_StartPlaytimeTracking_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfileids_.MergeFrom(from.publishedfileids_);
  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_StartPlaytimeTracking_Request::CopyFrom(const CPublishedFile_StartPlaytimeTracking_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_StartPlaytimeTracking_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_StartPlaytimeTracking_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_StartPlaytimeTracking_Request::InternalSwap(CPublishedFile_StartPlaytimeTracking_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  publishedfileids_.InternalSwap(&other->publishedfileids_);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_StartPlaytimeTracking_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[63]);
}

// ===================================================================

class CPublishedFile_StartPlaytimeTracking_Response::_Internal {
 public:
};

CPublishedFile_StartPlaytimeTracking_Response::CPublishedFile_StartPlaytimeTracking_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_StartPlaytimeTracking_Response)
}
CPublishedFile_StartPlaytimeTracking_Response::CPublishedFile_StartPlaytimeTracking_Response(const CPublishedFile_StartPlaytimeTracking_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_StartPlaytimeTracking_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_StartPlaytimeTracking_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_StartPlaytimeTracking_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_StartPlaytimeTracking_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[64]);
}

// ===================================================================

class CPublishedFile_StopPlaytimeTracking_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_StopPlaytimeTracking_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_StopPlaytimeTracking_Request::CPublishedFile_StopPlaytimeTracking_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  publishedfileids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_StopPlaytimeTracking_Request)
}
CPublishedFile_StopPlaytimeTracking_Request::CPublishedFile_StopPlaytimeTracking_Request(const CPublishedFile_StopPlaytimeTracking_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      publishedfileids_(from.publishedfileids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_StopPlaytimeTracking_Request)
}

inline void CPublishedFile_StopPlaytimeTracking_Request::SharedCtor() {
appid_ = 0u;
}

CPublishedFile_StopPlaytimeTracking_Request::~CPublishedFile_StopPlaytimeTracking_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_StopPlaytimeTracking_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_StopPlaytimeTracking_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_StopPlaytimeTracking_Request::ArenaDtor(void* object) {
  CPublishedFile_StopPlaytimeTracking_Request* _this = reinterpret_cast< CPublishedFile_StopPlaytimeTracking_Request* >(object);
  (void)_this;
}
void CPublishedFile_StopPlaytimeTracking_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_StopPlaytimeTracking_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_StopPlaytimeTracking_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_StopPlaytimeTracking_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfileids_.Clear();
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_StopPlaytimeTracking_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 publishedfileids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_publishedfileids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_publishedfileids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_StopPlaytimeTracking_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_StopPlaytimeTracking_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // repeated uint64 publishedfileids = 2;
  for (int i = 0, n = this->_internal_publishedfileids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_publishedfileids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_StopPlaytimeTracking_Request)
  return target;
}

size_t CPublishedFile_StopPlaytimeTracking_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_StopPlaytimeTracking_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 publishedfileids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->publishedfileids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_publishedfileids_size());
    total_size += data_size;
  }

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_StopPlaytimeTracking_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_StopPlaytimeTracking_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_StopPlaytimeTracking_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_StopPlaytimeTracking_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_StopPlaytimeTracking_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_StopPlaytimeTracking_Request &>(from));
}


void CPublishedFile_StopPlaytimeTracking_Request::MergeFrom(const CPublishedFile_StopPlaytimeTracking_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_StopPlaytimeTracking_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfileids_.MergeFrom(from.publishedfileids_);
  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_StopPlaytimeTracking_Request::CopyFrom(const CPublishedFile_StopPlaytimeTracking_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_StopPlaytimeTracking_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_StopPlaytimeTracking_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_StopPlaytimeTracking_Request::InternalSwap(CPublishedFile_StopPlaytimeTracking_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  publishedfileids_.InternalSwap(&other->publishedfileids_);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_StopPlaytimeTracking_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[65]);
}

// ===================================================================

class CPublishedFile_StopPlaytimeTracking_Response::_Internal {
 public:
};

CPublishedFile_StopPlaytimeTracking_Response::CPublishedFile_StopPlaytimeTracking_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_StopPlaytimeTracking_Response)
}
CPublishedFile_StopPlaytimeTracking_Response::CPublishedFile_StopPlaytimeTracking_Response(const CPublishedFile_StopPlaytimeTracking_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_StopPlaytimeTracking_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_StopPlaytimeTracking_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_StopPlaytimeTracking_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_StopPlaytimeTracking_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[66]);
}

// ===================================================================

class CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
}
CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
}

inline void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::SharedCtor() {
appid_ = 0u;
}

CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::~CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::ArenaDtor(void* object) {
  CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* _this = reinterpret_cast< CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* >(object);
  (void)_this;
}
void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  return target;
}

size_t CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request &>(from));
}


void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::MergeFrom(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::CopyFrom(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::InternalSwap(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[67]);
}

// ===================================================================

class CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::_Internal {
 public:
};

CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
}
CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[68]);
}

// ===================================================================

class CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seconds_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
}
CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage(const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_active_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(seconds_active_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
}

inline void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_active_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(seconds_active_));
}

CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::~CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage() {
  // @@protoc_insertion_point(destructor:CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::ArenaDtor(void* object) {
  CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* _this = reinterpret_cast< CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* >(object);
  (void)_this;
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_active_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(seconds_active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float seconds_active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_seconds_active(&has_bits);
          seconds_active_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional float seconds_active = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_seconds_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  return target;
}

size_t CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
    }

    // optional float seconds_active = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::GetClassData() const { return &_class_data_; }

void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage *>(to)->MergeFrom(
      static_cast<const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage &>(from));
}


void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::MergeFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_active_ = from.seconds_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::CopyFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::IsInitialized() const {
  return true;
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::InternalSwap(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage, seconds_active_)
      + sizeof(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::seconds_active_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[69]);
}

// ===================================================================

class CPublishedFile_SetPlaytimeForControllerConfigs_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_SetPlaytimeForControllerConfigs_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_SetPlaytimeForControllerConfigs_Request::CPublishedFile_SetPlaytimeForControllerConfigs_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  controller_config_usage_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_SetPlaytimeForControllerConfigs_Request)
}
CPublishedFile_SetPlaytimeForControllerConfigs_Request::CPublishedFile_SetPlaytimeForControllerConfigs_Request(const CPublishedFile_SetPlaytimeForControllerConfigs_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      controller_config_usage_(from.controller_config_usage_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_SetPlaytimeForControllerConfigs_Request)
}

inline void CPublishedFile_SetPlaytimeForControllerConfigs_Request::SharedCtor() {
appid_ = 0u;
}

CPublishedFile_SetPlaytimeForControllerConfigs_Request::~CPublishedFile_SetPlaytimeForControllerConfigs_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_SetPlaytimeForControllerConfigs_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request::ArenaDtor(void* object) {
  CPublishedFile_SetPlaytimeForControllerConfigs_Request* _this = reinterpret_cast< CPublishedFile_SetPlaytimeForControllerConfigs_Request* >(object);
  (void)_this;
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_config_usage_.Clear();
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_SetPlaytimeForControllerConfigs_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage controller_config_usage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_controller_config_usage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_SetPlaytimeForControllerConfigs_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // repeated .CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage controller_config_usage = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_controller_config_usage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_controller_config_usage(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  return target;
}

size_t CPublishedFile_SetPlaytimeForControllerConfigs_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage controller_config_usage = 2;
  total_size += 1UL * this->_internal_controller_config_usage_size();
  for (const auto& msg : this->controller_config_usage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_SetPlaytimeForControllerConfigs_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_SetPlaytimeForControllerConfigs_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_SetPlaytimeForControllerConfigs_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_SetPlaytimeForControllerConfigs_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_SetPlaytimeForControllerConfigs_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_SetPlaytimeForControllerConfigs_Request &>(from));
}


void CPublishedFile_SetPlaytimeForControllerConfigs_Request::MergeFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  controller_config_usage_.MergeFrom(from.controller_config_usage_);
  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request::CopyFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_SetPlaytimeForControllerConfigs_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request::InternalSwap(CPublishedFile_SetPlaytimeForControllerConfigs_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  controller_config_usage_.InternalSwap(&other->controller_config_usage_);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_SetPlaytimeForControllerConfigs_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[70]);
}

// ===================================================================

class CPublishedFile_SetPlaytimeForControllerConfigs_Response::_Internal {
 public:
};

CPublishedFile_SetPlaytimeForControllerConfigs_Response::CPublishedFile_SetPlaytimeForControllerConfigs_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_SetPlaytimeForControllerConfigs_Response)
}
CPublishedFile_SetPlaytimeForControllerConfigs_Response::CPublishedFile_SetPlaytimeForControllerConfigs_Response(const CPublishedFile_SetPlaytimeForControllerConfigs_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_SetPlaytimeForControllerConfigs_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_SetPlaytimeForControllerConfigs_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_SetPlaytimeForControllerConfigs_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_SetPlaytimeForControllerConfigs_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[71]);
}

// ===================================================================

class CPublishedFile_AddChild_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_AddChild_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_child_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_AddChild_Request::CPublishedFile_AddChild_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_AddChild_Request)
}
CPublishedFile_AddChild_Request::CPublishedFile_AddChild_Request(const CPublishedFile_AddChild_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&child_publishedfileid_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(child_publishedfileid_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_AddChild_Request)
}

inline void CPublishedFile_AddChild_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&child_publishedfileid_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(child_publishedfileid_));
}

CPublishedFile_AddChild_Request::~CPublishedFile_AddChild_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_AddChild_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_AddChild_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_AddChild_Request::ArenaDtor(void* object) {
  CPublishedFile_AddChild_Request* _this = reinterpret_cast< CPublishedFile_AddChild_Request* >(object);
  (void)_this;
}
void CPublishedFile_AddChild_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_AddChild_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_AddChild_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_AddChild_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&child_publishedfileid_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(child_publishedfileid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_AddChild_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 child_publishedfileid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_child_publishedfileid(&has_bits);
          child_publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_AddChild_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_AddChild_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional uint64 child_publishedfileid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_child_publishedfileid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_AddChild_Request)
  return target;
}

size_t CPublishedFile_AddChild_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_AddChild_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
    }

    // optional uint64 child_publishedfileid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_child_publishedfileid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_AddChild_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_AddChild_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_AddChild_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_AddChild_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_AddChild_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_AddChild_Request &>(from));
}


void CPublishedFile_AddChild_Request::MergeFrom(const CPublishedFile_AddChild_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_AddChild_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      child_publishedfileid_ = from.child_publishedfileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_AddChild_Request::CopyFrom(const CPublishedFile_AddChild_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_AddChild_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_AddChild_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_AddChild_Request::InternalSwap(CPublishedFile_AddChild_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_AddChild_Request, child_publishedfileid_)
      + sizeof(CPublishedFile_AddChild_Request::child_publishedfileid_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_AddChild_Request, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_AddChild_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[72]);
}

// ===================================================================

class CPublishedFile_AddChild_Response::_Internal {
 public:
};

CPublishedFile_AddChild_Response::CPublishedFile_AddChild_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_AddChild_Response)
}
CPublishedFile_AddChild_Response::CPublishedFile_AddChild_Response(const CPublishedFile_AddChild_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_AddChild_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_AddChild_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_AddChild_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_AddChild_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[73]);
}

// ===================================================================

class CPublishedFile_RemoveChild_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_RemoveChild_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_child_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_RemoveChild_Request::CPublishedFile_RemoveChild_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_RemoveChild_Request)
}
CPublishedFile_RemoveChild_Request::CPublishedFile_RemoveChild_Request(const CPublishedFile_RemoveChild_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&child_publishedfileid_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(child_publishedfileid_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_RemoveChild_Request)
}

inline void CPublishedFile_RemoveChild_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&child_publishedfileid_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(child_publishedfileid_));
}

CPublishedFile_RemoveChild_Request::~CPublishedFile_RemoveChild_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_RemoveChild_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_RemoveChild_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_RemoveChild_Request::ArenaDtor(void* object) {
  CPublishedFile_RemoveChild_Request* _this = reinterpret_cast< CPublishedFile_RemoveChild_Request* >(object);
  (void)_this;
}
void CPublishedFile_RemoveChild_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_RemoveChild_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_RemoveChild_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_RemoveChild_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&child_publishedfileid_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(child_publishedfileid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_RemoveChild_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 child_publishedfileid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_child_publishedfileid(&has_bits);
          child_publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_RemoveChild_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_RemoveChild_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional uint64 child_publishedfileid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_child_publishedfileid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_RemoveChild_Request)
  return target;
}

size_t CPublishedFile_RemoveChild_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_RemoveChild_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_publishedfileid());
    }

    // optional uint64 child_publishedfileid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_child_publishedfileid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_RemoveChild_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_RemoveChild_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_RemoveChild_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_RemoveChild_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_RemoveChild_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_RemoveChild_Request &>(from));
}


void CPublishedFile_RemoveChild_Request::MergeFrom(const CPublishedFile_RemoveChild_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_RemoveChild_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      child_publishedfileid_ = from.child_publishedfileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_RemoveChild_Request::CopyFrom(const CPublishedFile_RemoveChild_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_RemoveChild_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_RemoveChild_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_RemoveChild_Request::InternalSwap(CPublishedFile_RemoveChild_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_RemoveChild_Request, child_publishedfileid_)
      + sizeof(CPublishedFile_RemoveChild_Request::child_publishedfileid_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_RemoveChild_Request, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_RemoveChild_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[74]);
}

// ===================================================================

class CPublishedFile_RemoveChild_Response::_Internal {
 public:
};

CPublishedFile_RemoveChild_Response::CPublishedFile_RemoveChild_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_RemoveChild_Response)
}
CPublishedFile_RemoveChild_Response::CPublishedFile_RemoveChild_Response(const CPublishedFile_RemoveChild_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_RemoveChild_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_RemoveChild_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_RemoveChild_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_RemoveChild_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[75]);
}

// ===================================================================

class CPublishedFile_GetUserVoteSummary_Request::_Internal {
 public:
};

CPublishedFile_GetUserVoteSummary_Request::CPublishedFile_GetUserVoteSummary_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  publishedfileids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetUserVoteSummary_Request)
}
CPublishedFile_GetUserVoteSummary_Request::CPublishedFile_GetUserVoteSummary_Request(const CPublishedFile_GetUserVoteSummary_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      publishedfileids_(from.publishedfileids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetUserVoteSummary_Request)
}

inline void CPublishedFile_GetUserVoteSummary_Request::SharedCtor() {
}

CPublishedFile_GetUserVoteSummary_Request::~CPublishedFile_GetUserVoteSummary_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetUserVoteSummary_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetUserVoteSummary_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetUserVoteSummary_Request::ArenaDtor(void* object) {
  CPublishedFile_GetUserVoteSummary_Request* _this = reinterpret_cast< CPublishedFile_GetUserVoteSummary_Request* >(object);
  (void)_this;
}
void CPublishedFile_GetUserVoteSummary_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetUserVoteSummary_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetUserVoteSummary_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetUserVoteSummary_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfileids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetUserVoteSummary_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 publishedfileids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_publishedfileids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_publishedfileids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetUserVoteSummary_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetUserVoteSummary_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 publishedfileids = 1;
  for (int i = 0, n = this->_internal_publishedfileids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_publishedfileids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetUserVoteSummary_Request)
  return target;
}

size_t CPublishedFile_GetUserVoteSummary_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetUserVoteSummary_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 publishedfileids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_publishedfileids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_publishedfileids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetUserVoteSummary_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetUserVoteSummary_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetUserVoteSummary_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetUserVoteSummary_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetUserVoteSummary_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetUserVoteSummary_Request &>(from));
}


void CPublishedFile_GetUserVoteSummary_Request::MergeFrom(const CPublishedFile_GetUserVoteSummary_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetUserVoteSummary_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfileids_.MergeFrom(from.publishedfileids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetUserVoteSummary_Request::CopyFrom(const CPublishedFile_GetUserVoteSummary_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetUserVoteSummary_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserVoteSummary_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserVoteSummary_Request::InternalSwap(CPublishedFile_GetUserVoteSummary_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  publishedfileids_.InternalSwap(&other->publishedfileids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetUserVoteSummary_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[76]);
}

// ===================================================================

class CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetUserVoteSummary_Response_VoteSummary>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vote_for(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vote_against(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reported(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CPublishedFile_GetUserVoteSummary_Response_VoteSummary::CPublishedFile_GetUserVoteSummary_Response_VoteSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetUserVoteSummary_Response.VoteSummary)
}
CPublishedFile_GetUserVoteSummary_Response_VoteSummary::CPublishedFile_GetUserVoteSummary_Response_VoteSummary(const CPublishedFile_GetUserVoteSummary_Response_VoteSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reported_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(reported_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetUserVoteSummary_Response.VoteSummary)
}

inline void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reported_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(reported_));
}

CPublishedFile_GetUserVoteSummary_Response_VoteSummary::~CPublishedFile_GetUserVoteSummary_Response_VoteSummary() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetUserVoteSummary_Response.VoteSummary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::ArenaDtor(void* object) {
  CPublishedFile_GetUserVoteSummary_Response_VoteSummary* _this = reinterpret_cast< CPublishedFile_GetUserVoteSummary_Response_VoteSummary* >(object);
  (void)_this;
}
void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetUserVoteSummary_Response.VoteSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reported_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(reported_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool vote_for = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_vote_for(&has_bits);
          vote_for_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vote_against = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_vote_against(&has_bits);
          vote_against_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool reported = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_reported(&has_bits);
          reported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetUserVoteSummary_Response.VoteSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional bool vote_for = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_vote_for(), target);
  }

  // optional bool vote_against = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_vote_against(), target);
  }

  // optional bool reported = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_reported(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetUserVoteSummary_Response.VoteSummary)
  return target;
}

size_t CPublishedFile_GetUserVoteSummary_Response_VoteSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetUserVoteSummary_Response.VoteSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool vote_for = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool vote_against = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool reported = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetUserVoteSummary_Response_VoteSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetUserVoteSummary_Response_VoteSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetUserVoteSummary_Response_VoteSummary::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetUserVoteSummary_Response_VoteSummary *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetUserVoteSummary_Response_VoteSummary &>(from));
}


void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::MergeFrom(const CPublishedFile_GetUserVoteSummary_Response_VoteSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetUserVoteSummary_Response.VoteSummary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      vote_for_ = from.vote_for_;
    }
    if (cached_has_bits & 0x00000004u) {
      vote_against_ = from.vote_against_;
    }
    if (cached_has_bits & 0x00000008u) {
      reported_ = from.reported_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::CopyFrom(const CPublishedFile_GetUserVoteSummary_Response_VoteSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetUserVoteSummary_Response.VoteSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserVoteSummary_Response_VoteSummary::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserVoteSummary_Response_VoteSummary::InternalSwap(CPublishedFile_GetUserVoteSummary_Response_VoteSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetUserVoteSummary_Response_VoteSummary, reported_)
      + sizeof(CPublishedFile_GetUserVoteSummary_Response_VoteSummary::reported_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetUserVoteSummary_Response_VoteSummary, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetUserVoteSummary_Response_VoteSummary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[77]);
}

// ===================================================================

class CPublishedFile_GetUserVoteSummary_Response::_Internal {
 public:
};

CPublishedFile_GetUserVoteSummary_Response::CPublishedFile_GetUserVoteSummary_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  summaries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetUserVoteSummary_Response)
}
CPublishedFile_GetUserVoteSummary_Response::CPublishedFile_GetUserVoteSummary_Response(const CPublishedFile_GetUserVoteSummary_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      summaries_(from.summaries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetUserVoteSummary_Response)
}

inline void CPublishedFile_GetUserVoteSummary_Response::SharedCtor() {
}

CPublishedFile_GetUserVoteSummary_Response::~CPublishedFile_GetUserVoteSummary_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetUserVoteSummary_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetUserVoteSummary_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetUserVoteSummary_Response::ArenaDtor(void* object) {
  CPublishedFile_GetUserVoteSummary_Response* _this = reinterpret_cast< CPublishedFile_GetUserVoteSummary_Response* >(object);
  (void)_this;
}
void CPublishedFile_GetUserVoteSummary_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetUserVoteSummary_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetUserVoteSummary_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetUserVoteSummary_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  summaries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetUserVoteSummary_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPublishedFile_GetUserVoteSummary_Response.VoteSummary summaries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_summaries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetUserVoteSummary_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetUserVoteSummary_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPublishedFile_GetUserVoteSummary_Response.VoteSummary summaries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_summaries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_summaries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetUserVoteSummary_Response)
  return target;
}

size_t CPublishedFile_GetUserVoteSummary_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetUserVoteSummary_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPublishedFile_GetUserVoteSummary_Response.VoteSummary summaries = 1;
  total_size += 1UL * this->_internal_summaries_size();
  for (const auto& msg : this->summaries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetUserVoteSummary_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetUserVoteSummary_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetUserVoteSummary_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetUserVoteSummary_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetUserVoteSummary_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetUserVoteSummary_Response &>(from));
}


void CPublishedFile_GetUserVoteSummary_Response::MergeFrom(const CPublishedFile_GetUserVoteSummary_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetUserVoteSummary_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  summaries_.MergeFrom(from.summaries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetUserVoteSummary_Response::CopyFrom(const CPublishedFile_GetUserVoteSummary_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetUserVoteSummary_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserVoteSummary_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserVoteSummary_Response::InternalSwap(CPublishedFile_GetUserVoteSummary_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  summaries_.InternalSwap(&other->summaries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetUserVoteSummary_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[78]);
}

// ===================================================================

class CPublishedFile_GetItemChanges_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetItemChanges_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_time_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_items_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPublishedFile_GetItemChanges_Request::CPublishedFile_GetItemChanges_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetItemChanges_Request)
}
CPublishedFile_GetItemChanges_Request::CPublishedFile_GetItemChanges_Request(const CPublishedFile_GetItemChanges_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_items_max_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(num_items_max_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetItemChanges_Request)
}

inline void CPublishedFile_GetItemChanges_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_items_max_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(num_items_max_));
}

CPublishedFile_GetItemChanges_Request::~CPublishedFile_GetItemChanges_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetItemChanges_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetItemChanges_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetItemChanges_Request::ArenaDtor(void* object) {
  CPublishedFile_GetItemChanges_Request* _this = reinterpret_cast< CPublishedFile_GetItemChanges_Request* >(object);
  (void)_this;
}
void CPublishedFile_GetItemChanges_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetItemChanges_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetItemChanges_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetItemChanges_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_items_max_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(num_items_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetItemChanges_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_time_updated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last_time_updated(&has_bits);
          last_time_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_items_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_items_max(&has_bits);
          num_items_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetItemChanges_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetItemChanges_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 last_time_updated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_time_updated(), target);
  }

  // optional uint32 num_items_max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_items_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetItemChanges_Request)
  return target;
}

size_t CPublishedFile_GetItemChanges_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetItemChanges_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 last_time_updated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_time_updated());
    }

    // optional uint32 num_items_max = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_items_max());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetItemChanges_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetItemChanges_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetItemChanges_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetItemChanges_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetItemChanges_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetItemChanges_Request &>(from));
}


void CPublishedFile_GetItemChanges_Request::MergeFrom(const CPublishedFile_GetItemChanges_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetItemChanges_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_time_updated_ = from.last_time_updated_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_items_max_ = from.num_items_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetItemChanges_Request::CopyFrom(const CPublishedFile_GetItemChanges_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetItemChanges_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetItemChanges_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetItemChanges_Request::InternalSwap(CPublishedFile_GetItemChanges_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetItemChanges_Request, num_items_max_)
      + sizeof(CPublishedFile_GetItemChanges_Request::num_items_max_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetItemChanges_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetItemChanges_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[79]);
}

// ===================================================================

class CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetItemChanges_Response_WorkshopItemInfo>()._has_bits_);
  static void set_has_published_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_manifest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo)
}
CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo(const CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&published_file_id_, &from.published_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_updated_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(time_updated_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo)
}

inline void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&published_file_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_updated_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(time_updated_));
}

CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::~CPublishedFile_GetItemChanges_Response_WorkshopItemInfo() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::ArenaDtor(void* object) {
  CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* _this = reinterpret_cast< CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* >(object);
  (void)_this;
}
void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&published_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_updated_) -
        reinterpret_cast<char*>(&published_file_id_)) + sizeof(time_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 published_file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_published_file_id(&has_bits);
          published_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_updated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_updated(&has_bits);
          time_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 manifest_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_manifest_id(&has_bits);
          manifest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 published_file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_published_file_id(), target);
  }

  // optional uint32 time_updated = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_updated(), target);
  }

  // optional fixed64 manifest_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_manifest_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo)
  return target;
}

size_t CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 published_file_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 manifest_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 time_updated = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_updated());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetItemChanges_Response_WorkshopItemInfo *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetItemChanges_Response_WorkshopItemInfo &>(from));
}


void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::MergeFrom(const CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      published_file_id_ = from.published_file_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      manifest_id_ = from.manifest_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_updated_ = from.time_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::CopyFrom(const CPublishedFile_GetItemChanges_Response_WorkshopItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetItemChanges_Response.WorkshopItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::IsInitialized() const {
  return true;
}

void CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::InternalSwap(CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetItemChanges_Response_WorkshopItemInfo, time_updated_)
      + sizeof(CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::time_updated_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetItemChanges_Response_WorkshopItemInfo, published_file_id_)>(
          reinterpret_cast<char*>(&published_file_id_),
          reinterpret_cast<char*>(&other->published_file_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetItemChanges_Response_WorkshopItemInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[80]);
}

// ===================================================================

class CPublishedFile_GetItemChanges_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetItemChanges_Response>()._has_bits_);
  static void set_has_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_GetItemChanges_Response::CPublishedFile_GetItemChanges_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  workshop_items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetItemChanges_Response)
}
CPublishedFile_GetItemChanges_Response::CPublishedFile_GetItemChanges_Response(const CPublishedFile_GetItemChanges_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      workshop_items_(from.workshop_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  update_time_ = from.update_time_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetItemChanges_Response)
}

inline void CPublishedFile_GetItemChanges_Response::SharedCtor() {
update_time_ = 0u;
}

CPublishedFile_GetItemChanges_Response::~CPublishedFile_GetItemChanges_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetItemChanges_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetItemChanges_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetItemChanges_Response::ArenaDtor(void* object) {
  CPublishedFile_GetItemChanges_Response* _this = reinterpret_cast< CPublishedFile_GetItemChanges_Response* >(object);
  (void)_this;
}
void CPublishedFile_GetItemChanges_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetItemChanges_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetItemChanges_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetItemChanges_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workshop_items_.Clear();
  update_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetItemChanges_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 update_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_update_time(&has_bits);
          update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPublishedFile_GetItemChanges_Response.WorkshopItemInfo workshop_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workshop_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetItemChanges_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetItemChanges_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 update_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_update_time(), target);
  }

  // repeated .CPublishedFile_GetItemChanges_Response.WorkshopItemInfo workshop_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workshop_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_workshop_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetItemChanges_Response)
  return target;
}

size_t CPublishedFile_GetItemChanges_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetItemChanges_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPublishedFile_GetItemChanges_Response.WorkshopItemInfo workshop_items = 2;
  total_size += 1UL * this->_internal_workshop_items_size();
  for (const auto& msg : this->workshop_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 update_time = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_update_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetItemChanges_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetItemChanges_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetItemChanges_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetItemChanges_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetItemChanges_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetItemChanges_Response &>(from));
}


void CPublishedFile_GetItemChanges_Response::MergeFrom(const CPublishedFile_GetItemChanges_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetItemChanges_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  workshop_items_.MergeFrom(from.workshop_items_);
  if (from._internal_has_update_time()) {
    _internal_set_update_time(from._internal_update_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetItemChanges_Response::CopyFrom(const CPublishedFile_GetItemChanges_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetItemChanges_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetItemChanges_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetItemChanges_Response::InternalSwap(CPublishedFile_GetItemChanges_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  workshop_items_.InternalSwap(&other->workshop_items_);
  swap(update_time_, other->update_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetItemChanges_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[81]);
}

// ===================================================================

class CPublishedFile_GetContentDescriptors_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetContentDescriptors_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_GetContentDescriptors_Request::CPublishedFile_GetContentDescriptors_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetContentDescriptors_Request)
}
CPublishedFile_GetContentDescriptors_Request::CPublishedFile_GetContentDescriptors_Request(const CPublishedFile_GetContentDescriptors_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetContentDescriptors_Request)
}

inline void CPublishedFile_GetContentDescriptors_Request::SharedCtor() {
publishedfileid_ = uint64_t{0u};
}

CPublishedFile_GetContentDescriptors_Request::~CPublishedFile_GetContentDescriptors_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetContentDescriptors_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetContentDescriptors_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetContentDescriptors_Request::ArenaDtor(void* object) {
  CPublishedFile_GetContentDescriptors_Request* _this = reinterpret_cast< CPublishedFile_GetContentDescriptors_Request* >(object);
  (void)_this;
}
void CPublishedFile_GetContentDescriptors_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetContentDescriptors_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetContentDescriptors_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetContentDescriptors_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfileid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetContentDescriptors_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetContentDescriptors_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetContentDescriptors_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_publishedfileid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetContentDescriptors_Request)
  return target;
}

size_t CPublishedFile_GetContentDescriptors_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetContentDescriptors_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 publishedfileid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetContentDescriptors_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetContentDescriptors_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetContentDescriptors_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetContentDescriptors_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetContentDescriptors_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetContentDescriptors_Request &>(from));
}


void CPublishedFile_GetContentDescriptors_Request::MergeFrom(const CPublishedFile_GetContentDescriptors_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetContentDescriptors_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_publishedfileid()) {
    _internal_set_publishedfileid(from._internal_publishedfileid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetContentDescriptors_Request::CopyFrom(const CPublishedFile_GetContentDescriptors_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetContentDescriptors_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetContentDescriptors_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetContentDescriptors_Request::InternalSwap(CPublishedFile_GetContentDescriptors_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(publishedfileid_, other->publishedfileid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetContentDescriptors_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[82]);
}

// ===================================================================

class CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetContentDescriptors_Response_ContentDescriptor>()._has_bits_);
  static void set_has_descriptorid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_moderator_set(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor)
}
CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor(const CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&descriptorid_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(descriptorid_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor)
}

inline void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&moderator_set_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(moderator_set_));
descriptorid_ = 1;
}

CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::~CPublishedFile_GetContentDescriptors_Response_ContentDescriptor() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::ArenaDtor(void* object) {
  CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* _this = reinterpret_cast< CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* >(object);
  (void)_this;
}
void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&moderator_set_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(moderator_set_));
    descriptorid_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EContentDescriptorID descriptorid = 1 [default = k_EContentDescriptor_NudityOrSexualContent];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EContentDescriptorID_IsValid(val))) {
            _internal_set_descriptorid(static_cast<::EContentDescriptorID>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool moderator_set = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_moderator_set(&has_bits);
          moderator_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EContentDescriptorID descriptorid = 1 [default = k_EContentDescriptor_NudityOrSexualContent];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_descriptorid(), target);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accountid(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  // optional bool moderator_set = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_moderator_set(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor)
  return target;
}

size_t CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 accountid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 timestamp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional bool moderator_set = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .EContentDescriptorID descriptorid = 1 [default = k_EContentDescriptor_NudityOrSexualContent];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_descriptorid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetContentDescriptors_Response_ContentDescriptor *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetContentDescriptors_Response_ContentDescriptor &>(from));
}


void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::MergeFrom(const CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      moderator_set_ = from.moderator_set_;
    }
    if (cached_has_bits & 0x00000008u) {
      descriptorid_ = from.descriptorid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::CopyFrom(const CPublishedFile_GetContentDescriptors_Response_ContentDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetContentDescriptors_Response.ContentDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::IsInitialized() const {
  return true;
}

void CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::InternalSwap(CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetContentDescriptors_Response_ContentDescriptor, moderator_set_)
      + sizeof(CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::moderator_set_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetContentDescriptors_Response_ContentDescriptor, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
  swap(descriptorid_, other->descriptorid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetContentDescriptors_Response_ContentDescriptor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[83]);
}

// ===================================================================

class CPublishedFile_GetContentDescriptors_Response::_Internal {
 public:
};

CPublishedFile_GetContentDescriptors_Response::CPublishedFile_GetContentDescriptors_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  content_descriptors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetContentDescriptors_Response)
}
CPublishedFile_GetContentDescriptors_Response::CPublishedFile_GetContentDescriptors_Response(const CPublishedFile_GetContentDescriptors_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      content_descriptors_(from.content_descriptors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetContentDescriptors_Response)
}

inline void CPublishedFile_GetContentDescriptors_Response::SharedCtor() {
}

CPublishedFile_GetContentDescriptors_Response::~CPublishedFile_GetContentDescriptors_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetContentDescriptors_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_GetContentDescriptors_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_GetContentDescriptors_Response::ArenaDtor(void* object) {
  CPublishedFile_GetContentDescriptors_Response* _this = reinterpret_cast< CPublishedFile_GetContentDescriptors_Response* >(object);
  (void)_this;
}
void CPublishedFile_GetContentDescriptors_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetContentDescriptors_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetContentDescriptors_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetContentDescriptors_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_descriptors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetContentDescriptors_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CPublishedFile_GetContentDescriptors_Response.ContentDescriptor content_descriptors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content_descriptors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_GetContentDescriptors_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetContentDescriptors_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPublishedFile_GetContentDescriptors_Response.ContentDescriptor content_descriptors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_content_descriptors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_content_descriptors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetContentDescriptors_Response)
  return target;
}

size_t CPublishedFile_GetContentDescriptors_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetContentDescriptors_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPublishedFile_GetContentDescriptors_Response.ContentDescriptor content_descriptors = 1;
  total_size += 1UL * this->_internal_content_descriptors_size();
  for (const auto& msg : this->content_descriptors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_GetContentDescriptors_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_GetContentDescriptors_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_GetContentDescriptors_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_GetContentDescriptors_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_GetContentDescriptors_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_GetContentDescriptors_Response &>(from));
}


void CPublishedFile_GetContentDescriptors_Response::MergeFrom(const CPublishedFile_GetContentDescriptors_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetContentDescriptors_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  content_descriptors_.MergeFrom(from.content_descriptors_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_GetContentDescriptors_Response::CopyFrom(const CPublishedFile_GetContentDescriptors_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetContentDescriptors_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetContentDescriptors_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetContentDescriptors_Response::InternalSwap(CPublishedFile_GetContentDescriptors_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  content_descriptors_.InternalSwap(&other->content_descriptors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetContentDescriptors_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[84]);
}

// ===================================================================

class CPublishedFile_UpdateContentDescriptors_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_UpdateContentDescriptors_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_UpdateContentDescriptors_Request::CPublishedFile_UpdateContentDescriptors_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  descriptors_to_add_(arena),
  descriptors_to_remove_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_UpdateContentDescriptors_Request)
}
CPublishedFile_UpdateContentDescriptors_Request::CPublishedFile_UpdateContentDescriptors_Request(const CPublishedFile_UpdateContentDescriptors_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      descriptors_to_add_(from.descriptors_to_add_),
      descriptors_to_remove_(from.descriptors_to_remove_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_UpdateContentDescriptors_Request)
}

inline void CPublishedFile_UpdateContentDescriptors_Request::SharedCtor() {
publishedfileid_ = uint64_t{0u};
}

CPublishedFile_UpdateContentDescriptors_Request::~CPublishedFile_UpdateContentDescriptors_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_UpdateContentDescriptors_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_UpdateContentDescriptors_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_UpdateContentDescriptors_Request::ArenaDtor(void* object) {
  CPublishedFile_UpdateContentDescriptors_Request* _this = reinterpret_cast< CPublishedFile_UpdateContentDescriptors_Request* >(object);
  (void)_this;
}
void CPublishedFile_UpdateContentDescriptors_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_UpdateContentDescriptors_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_UpdateContentDescriptors_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_UpdateContentDescriptors_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descriptors_to_add_.Clear();
  descriptors_to_remove_.Clear();
  publishedfileid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_UpdateContentDescriptors_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .EContentDescriptorID descriptors_to_add = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::EContentDescriptorID_IsValid(val))) {
              _internal_add_descriptors_to_add(static_cast<::EContentDescriptorID>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_descriptors_to_add(), ptr, ctx, ::EContentDescriptorID_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .EContentDescriptorID descriptors_to_remove = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::EContentDescriptorID_IsValid(val))) {
              _internal_add_descriptors_to_remove(static_cast<::EContentDescriptorID>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_descriptors_to_remove(), ptr, ctx, ::EContentDescriptorID_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_UpdateContentDescriptors_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_UpdateContentDescriptors_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // repeated .EContentDescriptorID descriptors_to_add = 2;
  for (int i = 0, n = this->_internal_descriptors_to_add_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        2, this->_internal_descriptors_to_add(i), target);
  }

  // repeated .EContentDescriptorID descriptors_to_remove = 3;
  for (int i = 0, n = this->_internal_descriptors_to_remove_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        3, this->_internal_descriptors_to_remove(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_UpdateContentDescriptors_Request)
  return target;
}

size_t CPublishedFile_UpdateContentDescriptors_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_UpdateContentDescriptors_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EContentDescriptorID descriptors_to_add = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_descriptors_to_add_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_descriptors_to_add(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .EContentDescriptorID descriptors_to_remove = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_descriptors_to_remove_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_descriptors_to_remove(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional fixed64 publishedfileid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_UpdateContentDescriptors_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_UpdateContentDescriptors_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_UpdateContentDescriptors_Request::GetClassData() const { return &_class_data_; }

void CPublishedFile_UpdateContentDescriptors_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_UpdateContentDescriptors_Request *>(to)->MergeFrom(
      static_cast<const CPublishedFile_UpdateContentDescriptors_Request &>(from));
}


void CPublishedFile_UpdateContentDescriptors_Request::MergeFrom(const CPublishedFile_UpdateContentDescriptors_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_UpdateContentDescriptors_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  descriptors_to_add_.MergeFrom(from.descriptors_to_add_);
  descriptors_to_remove_.MergeFrom(from.descriptors_to_remove_);
  if (from._internal_has_publishedfileid()) {
    _internal_set_publishedfileid(from._internal_publishedfileid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_UpdateContentDescriptors_Request::CopyFrom(const CPublishedFile_UpdateContentDescriptors_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_UpdateContentDescriptors_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_UpdateContentDescriptors_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_UpdateContentDescriptors_Request::InternalSwap(CPublishedFile_UpdateContentDescriptors_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  descriptors_to_add_.InternalSwap(&other->descriptors_to_add_);
  descriptors_to_remove_.InternalSwap(&other->descriptors_to_remove_);
  swap(publishedfileid_, other->publishedfileid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_UpdateContentDescriptors_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[85]);
}

// ===================================================================

class CPublishedFile_UpdateContentDescriptors_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_UpdateContentDescriptors_Response>()._has_bits_);
  static void set_has_timestamp_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_UpdateContentDescriptors_Response::CPublishedFile_UpdateContentDescriptors_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_UpdateContentDescriptors_Response)
}
CPublishedFile_UpdateContentDescriptors_Response::CPublishedFile_UpdateContentDescriptors_Response(const CPublishedFile_UpdateContentDescriptors_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_updated_ = from.timestamp_updated_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_UpdateContentDescriptors_Response)
}

inline void CPublishedFile_UpdateContentDescriptors_Response::SharedCtor() {
timestamp_updated_ = 0u;
}

CPublishedFile_UpdateContentDescriptors_Response::~CPublishedFile_UpdateContentDescriptors_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_UpdateContentDescriptors_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_UpdateContentDescriptors_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_UpdateContentDescriptors_Response::ArenaDtor(void* object) {
  CPublishedFile_UpdateContentDescriptors_Response* _this = reinterpret_cast< CPublishedFile_UpdateContentDescriptors_Response* >(object);
  (void)_this;
}
void CPublishedFile_UpdateContentDescriptors_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_UpdateContentDescriptors_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_UpdateContentDescriptors_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_UpdateContentDescriptors_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_updated_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_UpdateContentDescriptors_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 timestamp_updated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_updated(&has_bits);
          timestamp_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_UpdateContentDescriptors_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_UpdateContentDescriptors_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp_updated = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp_updated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_UpdateContentDescriptors_Response)
  return target;
}

size_t CPublishedFile_UpdateContentDescriptors_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_UpdateContentDescriptors_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 timestamp_updated = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp_updated());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_UpdateContentDescriptors_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_UpdateContentDescriptors_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_UpdateContentDescriptors_Response::GetClassData() const { return &_class_data_; }

void CPublishedFile_UpdateContentDescriptors_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_UpdateContentDescriptors_Response *>(to)->MergeFrom(
      static_cast<const CPublishedFile_UpdateContentDescriptors_Response &>(from));
}


void CPublishedFile_UpdateContentDescriptors_Response::MergeFrom(const CPublishedFile_UpdateContentDescriptors_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_UpdateContentDescriptors_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp_updated()) {
    _internal_set_timestamp_updated(from._internal_timestamp_updated());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_UpdateContentDescriptors_Response::CopyFrom(const CPublishedFile_UpdateContentDescriptors_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_UpdateContentDescriptors_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_UpdateContentDescriptors_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_UpdateContentDescriptors_Response::InternalSwap(CPublishedFile_UpdateContentDescriptors_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_updated_, other->timestamp_updated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_UpdateContentDescriptors_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[86]);
}

// ===================================================================

class CPublishedFile_FileSubscribed_Notification_RevisionData::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_FileSubscribed_Notification_RevisionData>()._has_bits_);
  static void set_has_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_hcontent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rtime_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPublishedFile_FileSubscribed_Notification_RevisionData::CPublishedFile_FileSubscribed_Notification_RevisionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_FileSubscribed_Notification.RevisionData)
}
CPublishedFile_FileSubscribed_Notification_RevisionData::CPublishedFile_FileSubscribed_Notification_RevisionData(const CPublishedFile_FileSubscribed_Notification_RevisionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&file_hcontent_, &from.file_hcontent_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtime_updated_) -
    reinterpret_cast<char*>(&file_hcontent_)) + sizeof(rtime_updated_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_FileSubscribed_Notification.RevisionData)
}

inline void CPublishedFile_FileSubscribed_Notification_RevisionData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&file_hcontent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtime_updated_) -
    reinterpret_cast<char*>(&file_hcontent_)) + sizeof(rtime_updated_));
}

CPublishedFile_FileSubscribed_Notification_RevisionData::~CPublishedFile_FileSubscribed_Notification_RevisionData() {
  // @@protoc_insertion_point(destructor:CPublishedFile_FileSubscribed_Notification.RevisionData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_FileSubscribed_Notification_RevisionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_FileSubscribed_Notification_RevisionData::ArenaDtor(void* object) {
  CPublishedFile_FileSubscribed_Notification_RevisionData* _this = reinterpret_cast< CPublishedFile_FileSubscribed_Notification_RevisionData* >(object);
  (void)_this;
}
void CPublishedFile_FileSubscribed_Notification_RevisionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_FileSubscribed_Notification_RevisionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_FileSubscribed_Notification_RevisionData::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_FileSubscribed_Notification.RevisionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&file_hcontent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtime_updated_) -
        reinterpret_cast<char*>(&file_hcontent_)) + sizeof(rtime_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_FileSubscribed_Notification_RevisionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EPublishedFileRevision revision = 1 [default = k_EPublishedFileRevision_Default];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPublishedFileRevision_IsValid(val))) {
            _internal_set_revision(static_cast<::EPublishedFileRevision>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 file_hcontent = 2 [(.description) = "Manifest GID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_file_hcontent(&has_bits);
          file_hcontent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rtime_updated = 3 [(.description) = "Last time content updated"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rtime_updated(&has_bits);
          rtime_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_FileSubscribed_Notification_RevisionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_FileSubscribed_Notification.RevisionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EPublishedFileRevision revision = 1 [default = k_EPublishedFileRevision_Default];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_revision(), target);
  }

  // optional fixed64 file_hcontent = 2 [(.description) = "Manifest GID"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_file_hcontent(), target);
  }

  // optional uint32 rtime_updated = 3 [(.description) = "Last time content updated"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rtime_updated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_FileSubscribed_Notification.RevisionData)
  return target;
}

size_t CPublishedFile_FileSubscribed_Notification_RevisionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_FileSubscribed_Notification.RevisionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 file_hcontent = 2 [(.description) = "Manifest GID"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .EPublishedFileRevision revision = 1 [default = k_EPublishedFileRevision_Default];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_revision());
    }

    // optional uint32 rtime_updated = 3 [(.description) = "Last time content updated"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rtime_updated());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_FileSubscribed_Notification_RevisionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_FileSubscribed_Notification_RevisionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_FileSubscribed_Notification_RevisionData::GetClassData() const { return &_class_data_; }

void CPublishedFile_FileSubscribed_Notification_RevisionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_FileSubscribed_Notification_RevisionData *>(to)->MergeFrom(
      static_cast<const CPublishedFile_FileSubscribed_Notification_RevisionData &>(from));
}


void CPublishedFile_FileSubscribed_Notification_RevisionData::MergeFrom(const CPublishedFile_FileSubscribed_Notification_RevisionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_FileSubscribed_Notification.RevisionData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      file_hcontent_ = from.file_hcontent_;
    }
    if (cached_has_bits & 0x00000002u) {
      revision_ = from.revision_;
    }
    if (cached_has_bits & 0x00000004u) {
      rtime_updated_ = from.rtime_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_FileSubscribed_Notification_RevisionData::CopyFrom(const CPublishedFile_FileSubscribed_Notification_RevisionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_FileSubscribed_Notification.RevisionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_FileSubscribed_Notification_RevisionData::IsInitialized() const {
  return true;
}

void CPublishedFile_FileSubscribed_Notification_RevisionData::InternalSwap(CPublishedFile_FileSubscribed_Notification_RevisionData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_FileSubscribed_Notification_RevisionData, rtime_updated_)
      + sizeof(CPublishedFile_FileSubscribed_Notification_RevisionData::rtime_updated_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_FileSubscribed_Notification_RevisionData, file_hcontent_)>(
          reinterpret_cast<char*>(&file_hcontent_),
          reinterpret_cast<char*>(&other->file_hcontent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_FileSubscribed_Notification_RevisionData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[87]);
}

// ===================================================================

class CPublishedFile_FileSubscribed_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_FileSubscribed_Notification>()._has_bits_);
  static void set_has_published_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_file_hcontent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rtime_subscribed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_depot_content(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rtime_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CPublishedFile_FileSubscribed_Notification::CPublishedFile_FileSubscribed_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  revisions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_FileSubscribed_Notification)
}
CPublishedFile_FileSubscribed_Notification::CPublishedFile_FileSubscribed_Notification(const CPublishedFile_FileSubscribed_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      revisions_(from.revisions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&published_file_id_, &from.published_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtime_updated_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(rtime_updated_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_FileSubscribed_Notification)
}

inline void CPublishedFile_FileSubscribed_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&published_file_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtime_updated_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(rtime_updated_));
}

CPublishedFile_FileSubscribed_Notification::~CPublishedFile_FileSubscribed_Notification() {
  // @@protoc_insertion_point(destructor:CPublishedFile_FileSubscribed_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_FileSubscribed_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_FileSubscribed_Notification::ArenaDtor(void* object) {
  CPublishedFile_FileSubscribed_Notification* _this = reinterpret_cast< CPublishedFile_FileSubscribed_Notification* >(object);
  (void)_this;
}
void CPublishedFile_FileSubscribed_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_FileSubscribed_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_FileSubscribed_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_FileSubscribed_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  revisions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&published_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtime_updated_) -
        reinterpret_cast<char*>(&published_file_id_)) + sizeof(rtime_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_FileSubscribed_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 published_file_id = 1 [(.description) = "PublishedFileID_t for the content"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_published_file_id(&has_bits);
          published_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 file_hcontent = 3 [(.description) = "UGC file handle or manifest GID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_file_hcontent(&has_bits);
          file_hcontent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rtime_subscribed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rtime_subscribed(&has_bits);
          rtime_subscribed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_depot_content = 6 [(.description) = "True if workshop item is delivered via Steampipe"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_depot_content(&has_bits);
          is_depot_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rtime_updated = 7 [(.description) = "Last time content updated"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_rtime_updated(&has_bits);
          rtime_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPublishedFile_FileSubscribed_Notification.RevisionData revisions = 8 [(.description) = "Data for each of the revisions that this item has"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_revisions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_FileSubscribed_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_FileSubscribed_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 published_file_id = 1 [(.description) = "PublishedFileID_t for the content"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_published_file_id(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional fixed64 file_hcontent = 3 [(.description) = "UGC file handle or manifest GID"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_file_hcontent(), target);
  }

  // optional uint32 file_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_size(), target);
  }

  // optional uint32 rtime_subscribed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rtime_subscribed(), target);
  }

  // optional bool is_depot_content = 6 [(.description) = "True if workshop item is delivered via Steampipe"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_depot_content(), target);
  }

  // optional uint32 rtime_updated = 7 [(.description) = "Last time content updated"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rtime_updated(), target);
  }

  // repeated .CPublishedFile_FileSubscribed_Notification.RevisionData revisions = 8 [(.description) = "Data for each of the revisions that this item has"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_revisions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_revisions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_FileSubscribed_Notification)
  return target;
}

size_t CPublishedFile_FileSubscribed_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_FileSubscribed_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPublishedFile_FileSubscribed_Notification.RevisionData revisions = 8 [(.description) = "Data for each of the revisions that this item has"];
  total_size += 1UL * this->_internal_revisions_size();
  for (const auto& msg : this->revisions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional fixed64 published_file_id = 1 [(.description) = "PublishedFileID_t for the content"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 file_hcontent = 3 [(.description) = "UGC file handle or manifest GID"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 file_size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_file_size());
    }

    // optional uint32 rtime_subscribed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rtime_subscribed());
    }

    // optional bool is_depot_content = 6 [(.description) = "True if workshop item is delivered via Steampipe"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 rtime_updated = 7 [(.description) = "Last time content updated"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rtime_updated());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_FileSubscribed_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_FileSubscribed_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_FileSubscribed_Notification::GetClassData() const { return &_class_data_; }

void CPublishedFile_FileSubscribed_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_FileSubscribed_Notification *>(to)->MergeFrom(
      static_cast<const CPublishedFile_FileSubscribed_Notification &>(from));
}


void CPublishedFile_FileSubscribed_Notification::MergeFrom(const CPublishedFile_FileSubscribed_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_FileSubscribed_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  revisions_.MergeFrom(from.revisions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      published_file_id_ = from.published_file_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      file_hcontent_ = from.file_hcontent_;
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      rtime_subscribed_ = from.rtime_subscribed_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_depot_content_ = from.is_depot_content_;
    }
    if (cached_has_bits & 0x00000040u) {
      rtime_updated_ = from.rtime_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_FileSubscribed_Notification::CopyFrom(const CPublishedFile_FileSubscribed_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_FileSubscribed_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_FileSubscribed_Notification::IsInitialized() const {
  return true;
}

void CPublishedFile_FileSubscribed_Notification::InternalSwap(CPublishedFile_FileSubscribed_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  revisions_.InternalSwap(&other->revisions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_FileSubscribed_Notification, rtime_updated_)
      + sizeof(CPublishedFile_FileSubscribed_Notification::rtime_updated_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_FileSubscribed_Notification, published_file_id_)>(
          reinterpret_cast<char*>(&published_file_id_),
          reinterpret_cast<char*>(&other->published_file_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_FileSubscribed_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[88]);
}

// ===================================================================

class CPublishedFile_FileUnsubscribed_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_FileUnsubscribed_Notification>()._has_bits_);
  static void set_has_published_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_FileUnsubscribed_Notification::CPublishedFile_FileUnsubscribed_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_FileUnsubscribed_Notification)
}
CPublishedFile_FileUnsubscribed_Notification::CPublishedFile_FileUnsubscribed_Notification(const CPublishedFile_FileUnsubscribed_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&published_file_id_, &from.published_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_FileUnsubscribed_Notification)
}

inline void CPublishedFile_FileUnsubscribed_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&published_file_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(app_id_));
}

CPublishedFile_FileUnsubscribed_Notification::~CPublishedFile_FileUnsubscribed_Notification() {
  // @@protoc_insertion_point(destructor:CPublishedFile_FileUnsubscribed_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_FileUnsubscribed_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_FileUnsubscribed_Notification::ArenaDtor(void* object) {
  CPublishedFile_FileUnsubscribed_Notification* _this = reinterpret_cast< CPublishedFile_FileUnsubscribed_Notification* >(object);
  (void)_this;
}
void CPublishedFile_FileUnsubscribed_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_FileUnsubscribed_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_FileUnsubscribed_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_FileUnsubscribed_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&published_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&published_file_id_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_FileUnsubscribed_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 published_file_id = 1 [(.description) = "PublishedFileID_t for the content"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_published_file_id(&has_bits);
          published_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_FileUnsubscribed_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_FileUnsubscribed_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 published_file_id = 1 [(.description) = "PublishedFileID_t for the content"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_published_file_id(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_FileUnsubscribed_Notification)
  return target;
}

size_t CPublishedFile_FileUnsubscribed_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_FileUnsubscribed_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 published_file_id = 1 [(.description) = "PublishedFileID_t for the content"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_FileUnsubscribed_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_FileUnsubscribed_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_FileUnsubscribed_Notification::GetClassData() const { return &_class_data_; }

void CPublishedFile_FileUnsubscribed_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_FileUnsubscribed_Notification *>(to)->MergeFrom(
      static_cast<const CPublishedFile_FileUnsubscribed_Notification &>(from));
}


void CPublishedFile_FileUnsubscribed_Notification::MergeFrom(const CPublishedFile_FileUnsubscribed_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_FileUnsubscribed_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      published_file_id_ = from.published_file_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_FileUnsubscribed_Notification::CopyFrom(const CPublishedFile_FileUnsubscribed_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_FileUnsubscribed_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_FileUnsubscribed_Notification::IsInitialized() const {
  return true;
}

void CPublishedFile_FileUnsubscribed_Notification::InternalSwap(CPublishedFile_FileUnsubscribed_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_FileUnsubscribed_Notification, app_id_)
      + sizeof(CPublishedFile_FileUnsubscribed_Notification::app_id_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_FileUnsubscribed_Notification, published_file_id_)>(
          reinterpret_cast<char*>(&published_file_id_),
          reinterpret_cast<char*>(&other->published_file_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_FileUnsubscribed_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[89]);
}

// ===================================================================

class CPublishedFile_FileDeleted_Client_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_FileDeleted_Client_Notification>()._has_bits_);
  static void set_has_published_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_FileDeleted_Client_Notification::CPublishedFile_FileDeleted_Client_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_FileDeleted_Client_Notification)
}
CPublishedFile_FileDeleted_Client_Notification::CPublishedFile_FileDeleted_Client_Notification(const CPublishedFile_FileDeleted_Client_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&published_file_id_, &from.published_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_FileDeleted_Client_Notification)
}

inline void CPublishedFile_FileDeleted_Client_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&published_file_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&published_file_id_)) + sizeof(app_id_));
}

CPublishedFile_FileDeleted_Client_Notification::~CPublishedFile_FileDeleted_Client_Notification() {
  // @@protoc_insertion_point(destructor:CPublishedFile_FileDeleted_Client_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CPublishedFile_FileDeleted_Client_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CPublishedFile_FileDeleted_Client_Notification::ArenaDtor(void* object) {
  CPublishedFile_FileDeleted_Client_Notification* _this = reinterpret_cast< CPublishedFile_FileDeleted_Client_Notification* >(object);
  (void)_this;
}
void CPublishedFile_FileDeleted_Client_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_FileDeleted_Client_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_FileDeleted_Client_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_FileDeleted_Client_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&published_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&published_file_id_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_FileDeleted_Client_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 published_file_id = 1 [(.description) = "PublishedFileID_t for the content"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_published_file_id(&has_bits);
          published_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPublishedFile_FileDeleted_Client_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_FileDeleted_Client_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 published_file_id = 1 [(.description) = "PublishedFileID_t for the content"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_published_file_id(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_FileDeleted_Client_Notification)
  return target;
}

size_t CPublishedFile_FileDeleted_Client_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_FileDeleted_Client_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 published_file_id = 1 [(.description) = "PublishedFileID_t for the content"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPublishedFile_FileDeleted_Client_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CPublishedFile_FileDeleted_Client_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPublishedFile_FileDeleted_Client_Notification::GetClassData() const { return &_class_data_; }

void CPublishedFile_FileDeleted_Client_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CPublishedFile_FileDeleted_Client_Notification *>(to)->MergeFrom(
      static_cast<const CPublishedFile_FileDeleted_Client_Notification &>(from));
}


void CPublishedFile_FileDeleted_Client_Notification::MergeFrom(const CPublishedFile_FileDeleted_Client_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_FileDeleted_Client_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      published_file_id_ = from.published_file_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPublishedFile_FileDeleted_Client_Notification::CopyFrom(const CPublishedFile_FileDeleted_Client_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_FileDeleted_Client_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_FileDeleted_Client_Notification::IsInitialized() const {
  return true;
}

void CPublishedFile_FileDeleted_Client_Notification::InternalSwap(CPublishedFile_FileDeleted_Client_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_FileDeleted_Client_Notification, app_id_)
      + sizeof(CPublishedFile_FileDeleted_Client_Notification::app_id_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_FileDeleted_Client_Notification, published_file_id_)>(
          reinterpret_cast<char*>(&published_file_id_),
          reinterpret_cast<char*>(&other->published_file_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_FileDeleted_Client_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fpublishedfile_2esteamclient_2eproto[90]);
}

// ===================================================================

PublishedFile::~PublishedFile() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* PublishedFile::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fpublishedfile_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* PublishedFile::GetDescriptor() {
  return descriptor();
}

void PublishedFile::Vote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_Vote_Request*,
                         ::CPublishedFile_Vote_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Vote() not implemented.");
  done->Run();
}

void PublishedFile::Subscribe(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_Subscribe_Request*,
                         ::CPublishedFile_Subscribe_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Subscribe() not implemented.");
  done->Run();
}

void PublishedFile::Unsubscribe(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_Unsubscribe_Request*,
                         ::CPublishedFile_Unsubscribe_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Unsubscribe() not implemented.");
  done->Run();
}

void PublishedFile::CanSubscribe(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_CanSubscribe_Request*,
                         ::CPublishedFile_CanSubscribe_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CanSubscribe() not implemented.");
  done->Run();
}

void PublishedFile::GetSubSectionData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_GetSubSectionData_Request*,
                         ::CPublishedFile_GetSubSectionData_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSubSectionData() not implemented.");
  done->Run();
}

void PublishedFile::Publish(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_Publish_Request*,
                         ::CPublishedFile_Publish_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Publish() not implemented.");
  done->Run();
}

void PublishedFile::GetDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_GetDetails_Request*,
                         ::CPublishedFile_GetDetails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetDetails() not implemented.");
  done->Run();
}

void PublishedFile::GetItemInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_GetItemInfo_Request*,
                         ::CPublishedFile_GetItemInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetItemInfo() not implemented.");
  done->Run();
}

void PublishedFile::GetUserFiles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_GetUserFiles_Request*,
                         ::CPublishedFile_GetUserFiles_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserFiles() not implemented.");
  done->Run();
}

void PublishedFile::GetUserFileCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_GetUserFiles_Request*,
                         ::CPublishedFile_GetUserFiles_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserFileCount() not implemented.");
  done->Run();
}

void PublishedFile::AreFilesInSubscriptionList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_AreFilesInSubscriptionList_Request*,
                         ::CPublishedFile_AreFilesInSubscriptionList_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AreFilesInSubscriptionList() not implemented.");
  done->Run();
}

void PublishedFile::Update(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_Update_Request*,
                         ::CPublishedFile_Update_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Update() not implemented.");
  done->Run();
}

void PublishedFile::Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_Delete_Request*,
                         ::CPublishedFile_Delete_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Delete() not implemented.");
  done->Run();
}

void PublishedFile::GetChangeHistoryEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_GetChangeHistoryEntry_Request*,
                         ::CPublishedFile_GetChangeHistoryEntry_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChangeHistoryEntry() not implemented.");
  done->Run();
}

void PublishedFile::GetChangeHistory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_GetChangeHistory_Request*,
                         ::CPublishedFile_GetChangeHistory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChangeHistory() not implemented.");
  done->Run();
}

void PublishedFile::RefreshVotingQueue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_RefreshVotingQueue_Request*,
                         ::CPublishedFile_RefreshVotingQueue_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RefreshVotingQueue() not implemented.");
  done->Run();
}

void PublishedFile::QueryFiles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_QueryFiles_Request*,
                         ::CPublishedFile_QueryFiles_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryFiles() not implemented.");
  done->Run();
}

void PublishedFile::AddAppRelationship(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_AddAppRelationship_Request*,
                         ::CPublishedFile_AddAppRelationship_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddAppRelationship() not implemented.");
  done->Run();
}

void PublishedFile::RemoveAppRelationship(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_RemoveAppRelationship_Request*,
                         ::CPublishedFile_RemoveAppRelationship_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveAppRelationship() not implemented.");
  done->Run();
}

void PublishedFile::GetAppRelationships(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_GetAppRelationships_Request*,
                         ::CPublishedFile_GetAppRelationships_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAppRelationships() not implemented.");
  done->Run();
}

void PublishedFile::GetAppRelationshipsBatched(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_GetAppRelationshipsBatched_Request*,
                         ::CPublishedFile_GetAppRelationshipsBatched_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAppRelationshipsBatched() not implemented.");
  done->Run();
}

void PublishedFile::StartPlaytimeTracking(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_StartPlaytimeTracking_Request*,
                         ::CPublishedFile_StartPlaytimeTracking_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StartPlaytimeTracking() not implemented.");
  done->Run();
}

void PublishedFile::StopPlaytimeTracking(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_StopPlaytimeTracking_Request*,
                         ::CPublishedFile_StopPlaytimeTracking_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StopPlaytimeTracking() not implemented.");
  done->Run();
}

void PublishedFile::StopPlaytimeTrackingForAllAppItems(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request*,
                         ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StopPlaytimeTrackingForAllAppItems() not implemented.");
  done->Run();
}

void PublishedFile::SetPlaytimeForControllerConfigs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_SetPlaytimeForControllerConfigs_Request*,
                         ::CPublishedFile_SetPlaytimeForControllerConfigs_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetPlaytimeForControllerConfigs() not implemented.");
  done->Run();
}

void PublishedFile::AddChild(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_AddChild_Request*,
                         ::CPublishedFile_AddChild_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddChild() not implemented.");
  done->Run();
}

void PublishedFile::RemoveChild(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_RemoveChild_Request*,
                         ::CPublishedFile_RemoveChild_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveChild() not implemented.");
  done->Run();
}

void PublishedFile::GetUserVoteSummary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_GetUserVoteSummary_Request*,
                         ::CPublishedFile_GetUserVoteSummary_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserVoteSummary() not implemented.");
  done->Run();
}

void PublishedFile::GetItemChanges(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_GetItemChanges_Request*,
                         ::CPublishedFile_GetItemChanges_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetItemChanges() not implemented.");
  done->Run();
}

void PublishedFile::GetContentDescriptors(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_GetContentDescriptors_Request*,
                         ::CPublishedFile_GetContentDescriptors_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetContentDescriptors() not implemented.");
  done->Run();
}

void PublishedFile::UpdateContentDescriptors(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_UpdateContentDescriptors_Request*,
                         ::CPublishedFile_UpdateContentDescriptors_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateContentDescriptors() not implemented.");
  done->Run();
}

void PublishedFile::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fpublishedfile_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      Vote(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_Vote_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_Vote_Response*>(
                 response),
             done);
      break;
    case 1:
      Subscribe(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_Subscribe_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_Subscribe_Response*>(
                 response),
             done);
      break;
    case 2:
      Unsubscribe(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_Unsubscribe_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_Unsubscribe_Response*>(
                 response),
             done);
      break;
    case 3:
      CanSubscribe(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_CanSubscribe_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_CanSubscribe_Response*>(
                 response),
             done);
      break;
    case 4:
      GetSubSectionData(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_GetSubSectionData_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_GetSubSectionData_Response*>(
                 response),
             done);
      break;
    case 5:
      Publish(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_Publish_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_Publish_Response*>(
                 response),
             done);
      break;
    case 6:
      GetDetails(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_GetDetails_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_GetDetails_Response*>(
                 response),
             done);
      break;
    case 7:
      GetItemInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_GetItemInfo_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_GetItemInfo_Response*>(
                 response),
             done);
      break;
    case 8:
      GetUserFiles(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_GetUserFiles_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_GetUserFiles_Response*>(
                 response),
             done);
      break;
    case 9:
      GetUserFileCount(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_GetUserFiles_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_GetUserFiles_Response*>(
                 response),
             done);
      break;
    case 10:
      AreFilesInSubscriptionList(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_AreFilesInSubscriptionList_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_AreFilesInSubscriptionList_Response*>(
                 response),
             done);
      break;
    case 11:
      Update(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_Update_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_Update_Response*>(
                 response),
             done);
      break;
    case 12:
      Delete(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_Delete_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_Delete_Response*>(
                 response),
             done);
      break;
    case 13:
      GetChangeHistoryEntry(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_GetChangeHistoryEntry_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_GetChangeHistoryEntry_Response*>(
                 response),
             done);
      break;
    case 14:
      GetChangeHistory(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_GetChangeHistory_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_GetChangeHistory_Response*>(
                 response),
             done);
      break;
    case 15:
      RefreshVotingQueue(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_RefreshVotingQueue_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_RefreshVotingQueue_Response*>(
                 response),
             done);
      break;
    case 16:
      QueryFiles(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_QueryFiles_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_QueryFiles_Response*>(
                 response),
             done);
      break;
    case 17:
      AddAppRelationship(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_AddAppRelationship_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_AddAppRelationship_Response*>(
                 response),
             done);
      break;
    case 18:
      RemoveAppRelationship(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_RemoveAppRelationship_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_RemoveAppRelationship_Response*>(
                 response),
             done);
      break;
    case 19:
      GetAppRelationships(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_GetAppRelationships_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_GetAppRelationships_Response*>(
                 response),
             done);
      break;
    case 20:
      GetAppRelationshipsBatched(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_GetAppRelationshipsBatched_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_GetAppRelationshipsBatched_Response*>(
                 response),
             done);
      break;
    case 21:
      StartPlaytimeTracking(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_StartPlaytimeTracking_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_StartPlaytimeTracking_Response*>(
                 response),
             done);
      break;
    case 22:
      StopPlaytimeTracking(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_StopPlaytimeTracking_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_StopPlaytimeTracking_Response*>(
                 response),
             done);
      break;
    case 23:
      StopPlaytimeTrackingForAllAppItems(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response*>(
                 response),
             done);
      break;
    case 24:
      SetPlaytimeForControllerConfigs(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_SetPlaytimeForControllerConfigs_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_SetPlaytimeForControllerConfigs_Response*>(
                 response),
             done);
      break;
    case 25:
      AddChild(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_AddChild_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_AddChild_Response*>(
                 response),
             done);
      break;
    case 26:
      RemoveChild(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_RemoveChild_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_RemoveChild_Response*>(
                 response),
             done);
      break;
    case 27:
      GetUserVoteSummary(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_GetUserVoteSummary_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_GetUserVoteSummary_Response*>(
                 response),
             done);
      break;
    case 28:
      GetItemChanges(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_GetItemChanges_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_GetItemChanges_Response*>(
                 response),
             done);
      break;
    case 29:
      GetContentDescriptors(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_GetContentDescriptors_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_GetContentDescriptors_Response*>(
                 response),
             done);
      break;
    case 30:
      UpdateContentDescriptors(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_UpdateContentDescriptors_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPublishedFile_UpdateContentDescriptors_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& PublishedFile::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CPublishedFile_Vote_Request::default_instance();
    case 1:
      return ::CPublishedFile_Subscribe_Request::default_instance();
    case 2:
      return ::CPublishedFile_Unsubscribe_Request::default_instance();
    case 3:
      return ::CPublishedFile_CanSubscribe_Request::default_instance();
    case 4:
      return ::CPublishedFile_GetSubSectionData_Request::default_instance();
    case 5:
      return ::CPublishedFile_Publish_Request::default_instance();
    case 6:
      return ::CPublishedFile_GetDetails_Request::default_instance();
    case 7:
      return ::CPublishedFile_GetItemInfo_Request::default_instance();
    case 8:
      return ::CPublishedFile_GetUserFiles_Request::default_instance();
    case 9:
      return ::CPublishedFile_GetUserFiles_Request::default_instance();
    case 10:
      return ::CPublishedFile_AreFilesInSubscriptionList_Request::default_instance();
    case 11:
      return ::CPublishedFile_Update_Request::default_instance();
    case 12:
      return ::CPublishedFile_Delete_Request::default_instance();
    case 13:
      return ::CPublishedFile_GetChangeHistoryEntry_Request::default_instance();
    case 14:
      return ::CPublishedFile_GetChangeHistory_Request::default_instance();
    case 15:
      return ::CPublishedFile_RefreshVotingQueue_Request::default_instance();
    case 16:
      return ::CPublishedFile_QueryFiles_Request::default_instance();
    case 17:
      return ::CPublishedFile_AddAppRelationship_Request::default_instance();
    case 18:
      return ::CPublishedFile_RemoveAppRelationship_Request::default_instance();
    case 19:
      return ::CPublishedFile_GetAppRelationships_Request::default_instance();
    case 20:
      return ::CPublishedFile_GetAppRelationshipsBatched_Request::default_instance();
    case 21:
      return ::CPublishedFile_StartPlaytimeTracking_Request::default_instance();
    case 22:
      return ::CPublishedFile_StopPlaytimeTracking_Request::default_instance();
    case 23:
      return ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::default_instance();
    case 24:
      return ::CPublishedFile_SetPlaytimeForControllerConfigs_Request::default_instance();
    case 25:
      return ::CPublishedFile_AddChild_Request::default_instance();
    case 26:
      return ::CPublishedFile_RemoveChild_Request::default_instance();
    case 27:
      return ::CPublishedFile_GetUserVoteSummary_Request::default_instance();
    case 28:
      return ::CPublishedFile_GetItemChanges_Request::default_instance();
    case 29:
      return ::CPublishedFile_GetContentDescriptors_Request::default_instance();
    case 30:
      return ::CPublishedFile_UpdateContentDescriptors_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& PublishedFile::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CPublishedFile_Vote_Response::default_instance();
    case 1:
      return ::CPublishedFile_Subscribe_Response::default_instance();
    case 2:
      return ::CPublishedFile_Unsubscribe_Response::default_instance();
    case 3:
      return ::CPublishedFile_CanSubscribe_Response::default_instance();
    case 4:
      return ::CPublishedFile_GetSubSectionData_Response::default_instance();
    case 5:
      return ::CPublishedFile_Publish_Response::default_instance();
    case 6:
      return ::CPublishedFile_GetDetails_Response::default_instance();
    case 7:
      return ::CPublishedFile_GetItemInfo_Response::default_instance();
    case 8:
      return ::CPublishedFile_GetUserFiles_Response::default_instance();
    case 9:
      return ::CPublishedFile_GetUserFiles_Response::default_instance();
    case 10:
      return ::CPublishedFile_AreFilesInSubscriptionList_Response::default_instance();
    case 11:
      return ::CPublishedFile_Update_Response::default_instance();
    case 12:
      return ::CPublishedFile_Delete_Response::default_instance();
    case 13:
      return ::CPublishedFile_GetChangeHistoryEntry_Response::default_instance();
    case 14:
      return ::CPublishedFile_GetChangeHistory_Response::default_instance();
    case 15:
      return ::CPublishedFile_RefreshVotingQueue_Response::default_instance();
    case 16:
      return ::CPublishedFile_QueryFiles_Response::default_instance();
    case 17:
      return ::CPublishedFile_AddAppRelationship_Response::default_instance();
    case 18:
      return ::CPublishedFile_RemoveAppRelationship_Response::default_instance();
    case 19:
      return ::CPublishedFile_GetAppRelationships_Response::default_instance();
    case 20:
      return ::CPublishedFile_GetAppRelationshipsBatched_Response::default_instance();
    case 21:
      return ::CPublishedFile_StartPlaytimeTracking_Response::default_instance();
    case 22:
      return ::CPublishedFile_StopPlaytimeTracking_Response::default_instance();
    case 23:
      return ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::default_instance();
    case 24:
      return ::CPublishedFile_SetPlaytimeForControllerConfigs_Response::default_instance();
    case 25:
      return ::CPublishedFile_AddChild_Response::default_instance();
    case 26:
      return ::CPublishedFile_RemoveChild_Response::default_instance();
    case 27:
      return ::CPublishedFile_GetUserVoteSummary_Response::default_instance();
    case 28:
      return ::CPublishedFile_GetItemChanges_Response::default_instance();
    case 29:
      return ::CPublishedFile_GetContentDescriptors_Response::default_instance();
    case 30:
      return ::CPublishedFile_UpdateContentDescriptors_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

PublishedFile_Stub::PublishedFile_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PublishedFile_Stub::PublishedFile_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
PublishedFile_Stub::~PublishedFile_Stub() {
  if (owns_channel_) delete channel_;
}

void PublishedFile_Stub::Vote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_Vote_Request* request,
                              ::CPublishedFile_Vote_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void PublishedFile_Stub::Subscribe(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_Subscribe_Request* request,
                              ::CPublishedFile_Subscribe_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void PublishedFile_Stub::Unsubscribe(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_Unsubscribe_Request* request,
                              ::CPublishedFile_Unsubscribe_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void PublishedFile_Stub::CanSubscribe(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_CanSubscribe_Request* request,
                              ::CPublishedFile_CanSubscribe_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetSubSectionData(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_GetSubSectionData_Request* request,
                              ::CPublishedFile_GetSubSectionData_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void PublishedFile_Stub::Publish(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_Publish_Request* request,
                              ::CPublishedFile_Publish_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_GetDetails_Request* request,
                              ::CPublishedFile_GetDetails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetItemInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_GetItemInfo_Request* request,
                              ::CPublishedFile_GetItemInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetUserFiles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_GetUserFiles_Request* request,
                              ::CPublishedFile_GetUserFiles_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetUserFileCount(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_GetUserFiles_Request* request,
                              ::CPublishedFile_GetUserFiles_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void PublishedFile_Stub::AreFilesInSubscriptionList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_AreFilesInSubscriptionList_Request* request,
                              ::CPublishedFile_AreFilesInSubscriptionList_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void PublishedFile_Stub::Update(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_Update_Request* request,
                              ::CPublishedFile_Update_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void PublishedFile_Stub::Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_Delete_Request* request,
                              ::CPublishedFile_Delete_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetChangeHistoryEntry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_GetChangeHistoryEntry_Request* request,
                              ::CPublishedFile_GetChangeHistoryEntry_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetChangeHistory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_GetChangeHistory_Request* request,
                              ::CPublishedFile_GetChangeHistory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void PublishedFile_Stub::RefreshVotingQueue(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_RefreshVotingQueue_Request* request,
                              ::CPublishedFile_RefreshVotingQueue_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void PublishedFile_Stub::QueryFiles(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_QueryFiles_Request* request,
                              ::CPublishedFile_QueryFiles_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void PublishedFile_Stub::AddAppRelationship(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_AddAppRelationship_Request* request,
                              ::CPublishedFile_AddAppRelationship_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
void PublishedFile_Stub::RemoveAppRelationship(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_RemoveAppRelationship_Request* request,
                              ::CPublishedFile_RemoveAppRelationship_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(18),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetAppRelationships(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_GetAppRelationships_Request* request,
                              ::CPublishedFile_GetAppRelationships_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(19),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetAppRelationshipsBatched(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_GetAppRelationshipsBatched_Request* request,
                              ::CPublishedFile_GetAppRelationshipsBatched_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(20),
                       controller, request, response, done);
}
void PublishedFile_Stub::StartPlaytimeTracking(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_StartPlaytimeTracking_Request* request,
                              ::CPublishedFile_StartPlaytimeTracking_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(21),
                       controller, request, response, done);
}
void PublishedFile_Stub::StopPlaytimeTracking(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_StopPlaytimeTracking_Request* request,
                              ::CPublishedFile_StopPlaytimeTracking_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(22),
                       controller, request, response, done);
}
void PublishedFile_Stub::StopPlaytimeTrackingForAllAppItems(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* request,
                              ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(23),
                       controller, request, response, done);
}
void PublishedFile_Stub::SetPlaytimeForControllerConfigs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_SetPlaytimeForControllerConfigs_Request* request,
                              ::CPublishedFile_SetPlaytimeForControllerConfigs_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(24),
                       controller, request, response, done);
}
void PublishedFile_Stub::AddChild(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_AddChild_Request* request,
                              ::CPublishedFile_AddChild_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(25),
                       controller, request, response, done);
}
void PublishedFile_Stub::RemoveChild(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_RemoveChild_Request* request,
                              ::CPublishedFile_RemoveChild_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(26),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetUserVoteSummary(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_GetUserVoteSummary_Request* request,
                              ::CPublishedFile_GetUserVoteSummary_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(27),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetItemChanges(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_GetItemChanges_Request* request,
                              ::CPublishedFile_GetItemChanges_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(28),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetContentDescriptors(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_GetContentDescriptors_Request* request,
                              ::CPublishedFile_GetContentDescriptors_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(29),
                       controller, request, response, done);
}
void PublishedFile_Stub::UpdateContentDescriptors(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_UpdateContentDescriptors_Request* request,
                              ::CPublishedFile_UpdateContentDescriptors_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(30),
                       controller, request, response, done);
}
// ===================================================================

PublishedFileClient::~PublishedFileClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* PublishedFileClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fpublishedfile_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fpublishedfile_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* PublishedFileClient::GetDescriptor() {
  return descriptor();
}

void PublishedFileClient::NotifyFileSubscribed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_FileSubscribed_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyFileSubscribed() not implemented.");
  done->Run();
}

void PublishedFileClient::NotifyFileUnsubscribed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_FileUnsubscribed_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyFileUnsubscribed() not implemented.");
  done->Run();
}

void PublishedFileClient::NotifyFileDeleted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPublishedFile_FileDeleted_Client_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyFileDeleted() not implemented.");
  done->Run();
}

void PublishedFileClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fpublishedfile_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      NotifyFileSubscribed(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_FileSubscribed_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 1:
      NotifyFileUnsubscribed(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_FileUnsubscribed_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 2:
      NotifyFileDeleted(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPublishedFile_FileDeleted_Client_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& PublishedFileClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CPublishedFile_FileSubscribed_Notification::default_instance();
    case 1:
      return ::CPublishedFile_FileUnsubscribed_Notification::default_instance();
    case 2:
      return ::CPublishedFile_FileDeleted_Client_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& PublishedFileClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    case 2:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

PublishedFileClient_Stub::PublishedFileClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PublishedFileClient_Stub::PublishedFileClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
PublishedFileClient_Stub::~PublishedFileClient_Stub() {
  if (owns_channel_) delete channel_;
}

void PublishedFileClient_Stub::NotifyFileSubscribed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_FileSubscribed_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void PublishedFileClient_Stub::NotifyFileUnsubscribed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_FileUnsubscribed_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void PublishedFileClient_Stub::NotifyFileDeleted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPublishedFile_FileDeleted_Client_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CPublishedFile_Vote_Request* Arena::CreateMaybeMessage< ::CPublishedFile_Vote_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Vote_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Vote_Response* Arena::CreateMaybeMessage< ::CPublishedFile_Vote_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Vote_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Subscribe_Request* Arena::CreateMaybeMessage< ::CPublishedFile_Subscribe_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Subscribe_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Subscribe_Response* Arena::CreateMaybeMessage< ::CPublishedFile_Subscribe_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Subscribe_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Unsubscribe_Request* Arena::CreateMaybeMessage< ::CPublishedFile_Unsubscribe_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Unsubscribe_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Unsubscribe_Response* Arena::CreateMaybeMessage< ::CPublishedFile_Unsubscribe_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Unsubscribe_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_CanSubscribe_Request* Arena::CreateMaybeMessage< ::CPublishedFile_CanSubscribe_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_CanSubscribe_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_CanSubscribe_Response* Arena::CreateMaybeMessage< ::CPublishedFile_CanSubscribe_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_CanSubscribe_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetSubSectionData_Request* Arena::CreateMaybeMessage< ::CPublishedFile_GetSubSectionData_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetSubSectionData_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileSubSection* Arena::CreateMaybeMessage< ::PublishedFileSubSection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileSubSection >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetSubSectionData_Response* Arena::CreateMaybeMessage< ::CPublishedFile_GetSubSectionData_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetSubSectionData_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Publish_Request* Arena::CreateMaybeMessage< ::CPublishedFile_Publish_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Publish_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Publish_Response* Arena::CreateMaybeMessage< ::CPublishedFile_Publish_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Publish_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetDetails_Request* Arena::CreateMaybeMessage< ::CPublishedFile_GetDetails_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetDetails_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileDetails_Tag* Arena::CreateMaybeMessage< ::PublishedFileDetails_Tag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileDetails_Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileDetails_Preview* Arena::CreateMaybeMessage< ::PublishedFileDetails_Preview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileDetails_Preview >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileDetails_Child* Arena::CreateMaybeMessage< ::PublishedFileDetails_Child >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileDetails_Child >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileDetails_KVTag* Arena::CreateMaybeMessage< ::PublishedFileDetails_KVTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileDetails_KVTag >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileDetails_VoteData* Arena::CreateMaybeMessage< ::PublishedFileDetails_VoteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileDetails_VoteData >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileDetails_ForSaleData* Arena::CreateMaybeMessage< ::PublishedFileDetails_ForSaleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileDetails_ForSaleData >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileDetails_PlaytimeStats* Arena::CreateMaybeMessage< ::PublishedFileDetails_PlaytimeStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileDetails_PlaytimeStats >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileDetails_Reaction* Arena::CreateMaybeMessage< ::PublishedFileDetails_Reaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileDetails_Reaction >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileDetails* Arena::CreateMaybeMessage< ::PublishedFileDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetDetails_Response* Arena::CreateMaybeMessage< ::CPublishedFile_GetDetails_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetItemInfo_Request_WorkshopItem* Arena::CreateMaybeMessage< ::CPublishedFile_GetItemInfo_Request_WorkshopItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetItemInfo_Request_WorkshopItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetItemInfo_Request* Arena::CreateMaybeMessage< ::CPublishedFile_GetItemInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetItemInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* Arena::CreateMaybeMessage< ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetItemInfo_Response* Arena::CreateMaybeMessage< ::CPublishedFile_GetItemInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetItemInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetUserFiles_Request_KVTag* Arena::CreateMaybeMessage< ::CPublishedFile_GetUserFiles_Request_KVTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetUserFiles_Request_KVTag >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetUserFiles_Request_TagGroup* Arena::CreateMaybeMessage< ::CPublishedFile_GetUserFiles_Request_TagGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetUserFiles_Request_TagGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetUserFiles_Request* Arena::CreateMaybeMessage< ::CPublishedFile_GetUserFiles_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetUserFiles_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetUserFiles_Response_App* Arena::CreateMaybeMessage< ::CPublishedFile_GetUserFiles_Response_App >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetUserFiles_Response_App >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetUserFiles_Response* Arena::CreateMaybeMessage< ::CPublishedFile_GetUserFiles_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetUserFiles_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_AreFilesInSubscriptionList_Request* Arena::CreateMaybeMessage< ::CPublishedFile_AreFilesInSubscriptionList_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_AreFilesInSubscriptionList_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_AreFilesInSubscriptionList_Response_InList* Arena::CreateMaybeMessage< ::CPublishedFile_AreFilesInSubscriptionList_Response_InList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_AreFilesInSubscriptionList_Response_InList >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_AreFilesInSubscriptionList_Response* Arena::CreateMaybeMessage< ::CPublishedFile_AreFilesInSubscriptionList_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_AreFilesInSubscriptionList_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Update_Request* Arena::CreateMaybeMessage< ::CPublishedFile_Update_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Update_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Update_Response* Arena::CreateMaybeMessage< ::CPublishedFile_Update_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Update_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Delete_Request* Arena::CreateMaybeMessage< ::CPublishedFile_Delete_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Delete_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Delete_Response* Arena::CreateMaybeMessage< ::CPublishedFile_Delete_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Delete_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetChangeHistoryEntry_Request* Arena::CreateMaybeMessage< ::CPublishedFile_GetChangeHistoryEntry_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetChangeHistoryEntry_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetChangeHistoryEntry_Response* Arena::CreateMaybeMessage< ::CPublishedFile_GetChangeHistoryEntry_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetChangeHistoryEntry_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetChangeHistory_Request* Arena::CreateMaybeMessage< ::CPublishedFile_GetChangeHistory_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetChangeHistory_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetChangeHistory_Response_ChangeLog* Arena::CreateMaybeMessage< ::CPublishedFile_GetChangeHistory_Response_ChangeLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetChangeHistory_Response_ChangeLog >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetChangeHistory_Response* Arena::CreateMaybeMessage< ::CPublishedFile_GetChangeHistory_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetChangeHistory_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_RefreshVotingQueue_Request* Arena::CreateMaybeMessage< ::CPublishedFile_RefreshVotingQueue_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_RefreshVotingQueue_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_RefreshVotingQueue_Response* Arena::CreateMaybeMessage< ::CPublishedFile_RefreshVotingQueue_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_RefreshVotingQueue_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_QueryFiles_Request_KVTag* Arena::CreateMaybeMessage< ::CPublishedFile_QueryFiles_Request_KVTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_QueryFiles_Request_KVTag >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_QueryFiles_Request_TagGroup* Arena::CreateMaybeMessage< ::CPublishedFile_QueryFiles_Request_TagGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_QueryFiles_Request_TagGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_QueryFiles_Request_DateRange* Arena::CreateMaybeMessage< ::CPublishedFile_QueryFiles_Request_DateRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_QueryFiles_Request_DateRange >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_QueryFiles_Request* Arena::CreateMaybeMessage< ::CPublishedFile_QueryFiles_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_QueryFiles_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_QueryFiles_Response* Arena::CreateMaybeMessage< ::CPublishedFile_QueryFiles_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_QueryFiles_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_AddAppRelationship_Request* Arena::CreateMaybeMessage< ::CPublishedFile_AddAppRelationship_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_AddAppRelationship_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_AddAppRelationship_Response* Arena::CreateMaybeMessage< ::CPublishedFile_AddAppRelationship_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_AddAppRelationship_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_RemoveAppRelationship_Request* Arena::CreateMaybeMessage< ::CPublishedFile_RemoveAppRelationship_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_RemoveAppRelationship_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_RemoveAppRelationship_Response* Arena::CreateMaybeMessage< ::CPublishedFile_RemoveAppRelationship_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_RemoveAppRelationship_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetAppRelationships_Request* Arena::CreateMaybeMessage< ::CPublishedFile_GetAppRelationships_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetAppRelationships_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetAppRelationships_Response_AppRelationship* Arena::CreateMaybeMessage< ::CPublishedFile_GetAppRelationships_Response_AppRelationship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetAppRelationships_Response_AppRelationship >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetAppRelationships_Response* Arena::CreateMaybeMessage< ::CPublishedFile_GetAppRelationships_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetAppRelationships_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetAppRelationshipsBatched_Request* Arena::CreateMaybeMessage< ::CPublishedFile_GetAppRelationshipsBatched_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetAppRelationshipsBatched_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship* Arena::CreateMaybeMessage< ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship* Arena::CreateMaybeMessage< ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetAppRelationshipsBatched_Response* Arena::CreateMaybeMessage< ::CPublishedFile_GetAppRelationshipsBatched_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetAppRelationshipsBatched_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_StartPlaytimeTracking_Request* Arena::CreateMaybeMessage< ::CPublishedFile_StartPlaytimeTracking_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_StartPlaytimeTracking_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_StartPlaytimeTracking_Response* Arena::CreateMaybeMessage< ::CPublishedFile_StartPlaytimeTracking_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_StartPlaytimeTracking_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_StopPlaytimeTracking_Request* Arena::CreateMaybeMessage< ::CPublishedFile_StopPlaytimeTracking_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_StopPlaytimeTracking_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_StopPlaytimeTracking_Response* Arena::CreateMaybeMessage< ::CPublishedFile_StopPlaytimeTracking_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_StopPlaytimeTracking_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* Arena::CreateMaybeMessage< ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response* Arena::CreateMaybeMessage< ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* Arena::CreateMaybeMessage< ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_SetPlaytimeForControllerConfigs_Request* Arena::CreateMaybeMessage< ::CPublishedFile_SetPlaytimeForControllerConfigs_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_SetPlaytimeForControllerConfigs_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_SetPlaytimeForControllerConfigs_Response* Arena::CreateMaybeMessage< ::CPublishedFile_SetPlaytimeForControllerConfigs_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_SetPlaytimeForControllerConfigs_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_AddChild_Request* Arena::CreateMaybeMessage< ::CPublishedFile_AddChild_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_AddChild_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_AddChild_Response* Arena::CreateMaybeMessage< ::CPublishedFile_AddChild_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_AddChild_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_RemoveChild_Request* Arena::CreateMaybeMessage< ::CPublishedFile_RemoveChild_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_RemoveChild_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_RemoveChild_Response* Arena::CreateMaybeMessage< ::CPublishedFile_RemoveChild_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_RemoveChild_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetUserVoteSummary_Request* Arena::CreateMaybeMessage< ::CPublishedFile_GetUserVoteSummary_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetUserVoteSummary_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary* Arena::CreateMaybeMessage< ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetUserVoteSummary_Response_VoteSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetUserVoteSummary_Response* Arena::CreateMaybeMessage< ::CPublishedFile_GetUserVoteSummary_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetUserVoteSummary_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetItemChanges_Request* Arena::CreateMaybeMessage< ::CPublishedFile_GetItemChanges_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetItemChanges_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo* Arena::CreateMaybeMessage< ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetItemChanges_Response_WorkshopItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetItemChanges_Response* Arena::CreateMaybeMessage< ::CPublishedFile_GetItemChanges_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetItemChanges_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetContentDescriptors_Request* Arena::CreateMaybeMessage< ::CPublishedFile_GetContentDescriptors_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetContentDescriptors_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor* Arena::CreateMaybeMessage< ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetContentDescriptors_Response_ContentDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetContentDescriptors_Response* Arena::CreateMaybeMessage< ::CPublishedFile_GetContentDescriptors_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetContentDescriptors_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_UpdateContentDescriptors_Request* Arena::CreateMaybeMessage< ::CPublishedFile_UpdateContentDescriptors_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_UpdateContentDescriptors_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_UpdateContentDescriptors_Response* Arena::CreateMaybeMessage< ::CPublishedFile_UpdateContentDescriptors_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_UpdateContentDescriptors_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_FileSubscribed_Notification_RevisionData* Arena::CreateMaybeMessage< ::CPublishedFile_FileSubscribed_Notification_RevisionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_FileSubscribed_Notification_RevisionData >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_FileSubscribed_Notification* Arena::CreateMaybeMessage< ::CPublishedFile_FileSubscribed_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_FileSubscribed_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_FileUnsubscribed_Notification* Arena::CreateMaybeMessage< ::CPublishedFile_FileUnsubscribed_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_FileUnsubscribed_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_FileDeleted_Client_Notification* Arena::CreateMaybeMessage< ::CPublishedFile_FileDeleted_Client_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_FileDeleted_Client_Notification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
