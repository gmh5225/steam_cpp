// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_friendmessages.steamclient.proto

#include "steammessages_friendmessages.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CFriendMessages_GetRecentMessages_Request::CFriendMessages_GetRecentMessages_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid1_(uint64_t{0u})
  , steamid2_(uint64_t{0u})
  , count_(0u)
  , rtime32_start_time_(0u)
  , most_recent_conversation_(false)
  , bbcode_format_(false)
  , start_ordinal_(0u)
  , time_last_(0u)
  , ordinal_last_(0u){}
struct CFriendMessages_GetRecentMessages_RequestDefaultTypeInternal {
  constexpr CFriendMessages_GetRecentMessages_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendMessages_GetRecentMessages_RequestDefaultTypeInternal() {}
  union {
    CFriendMessages_GetRecentMessages_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendMessages_GetRecentMessages_RequestDefaultTypeInternal _CFriendMessages_GetRecentMessages_Request_default_instance_;
constexpr CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reactors_()
  , reaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reaction_type_(0)
{}
struct CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReactionDefaultTypeInternal {
  constexpr CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReactionDefaultTypeInternal() {}
  union {
    CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReactionDefaultTypeInternal _CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction_default_instance_;
constexpr CFriendMessages_GetRecentMessages_Response_FriendMessage::CFriendMessages_GetRecentMessages_Response_FriendMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reactions_()
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountid_(0u)
  , timestamp_(0u)
  , ordinal_(0u){}
struct CFriendMessages_GetRecentMessages_Response_FriendMessageDefaultTypeInternal {
  constexpr CFriendMessages_GetRecentMessages_Response_FriendMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendMessages_GetRecentMessages_Response_FriendMessageDefaultTypeInternal() {}
  union {
    CFriendMessages_GetRecentMessages_Response_FriendMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendMessages_GetRecentMessages_Response_FriendMessageDefaultTypeInternal _CFriendMessages_GetRecentMessages_Response_FriendMessage_default_instance_;
constexpr CFriendMessages_GetRecentMessages_Response::CFriendMessages_GetRecentMessages_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_()
  , more_available_(false){}
struct CFriendMessages_GetRecentMessages_ResponseDefaultTypeInternal {
  constexpr CFriendMessages_GetRecentMessages_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendMessages_GetRecentMessages_ResponseDefaultTypeInternal() {}
  union {
    CFriendMessages_GetRecentMessages_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendMessages_GetRecentMessages_ResponseDefaultTypeInternal _CFriendMessages_GetRecentMessages_Response_default_instance_;
constexpr CFriendsMessages_GetActiveMessageSessions_Request::CFriendsMessages_GetActiveMessageSessions_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lastmessage_since_(0u)
  , only_sessions_with_messages_(false){}
struct CFriendsMessages_GetActiveMessageSessions_RequestDefaultTypeInternal {
  constexpr CFriendsMessages_GetActiveMessageSessions_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendsMessages_GetActiveMessageSessions_RequestDefaultTypeInternal() {}
  union {
    CFriendsMessages_GetActiveMessageSessions_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendsMessages_GetActiveMessageSessions_RequestDefaultTypeInternal _CFriendsMessages_GetActiveMessageSessions_Request_default_instance_;
constexpr CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accountid_friend_(0u)
  , last_message_(0u)
  , last_view_(0u)
  , unread_message_count_(0u){}
struct CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSessionDefaultTypeInternal {
  constexpr CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSessionDefaultTypeInternal() {}
  union {
    CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSessionDefaultTypeInternal _CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession_default_instance_;
constexpr CFriendsMessages_GetActiveMessageSessions_Response::CFriendsMessages_GetActiveMessageSessions_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_sessions_()
  , timestamp_(0u){}
struct CFriendsMessages_GetActiveMessageSessions_ResponseDefaultTypeInternal {
  constexpr CFriendsMessages_GetActiveMessageSessions_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendsMessages_GetActiveMessageSessions_ResponseDefaultTypeInternal() {}
  union {
    CFriendsMessages_GetActiveMessageSessions_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendsMessages_GetActiveMessageSessions_ResponseDefaultTypeInternal _CFriendsMessages_GetActiveMessageSessions_Response_default_instance_;
constexpr CFriendMessages_SendMessage_Request::CFriendMessages_SendMessage_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_message_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , chat_entry_type_(0)
  , contains_bbcode_(false)
  , echo_to_sender_(false)
  , low_priority_(false){}
struct CFriendMessages_SendMessage_RequestDefaultTypeInternal {
  constexpr CFriendMessages_SendMessage_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendMessages_SendMessage_RequestDefaultTypeInternal() {}
  union {
    CFriendMessages_SendMessage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendMessages_SendMessage_RequestDefaultTypeInternal _CFriendMessages_SendMessage_Request_default_instance_;
constexpr CFriendMessages_SendMessage_Response::CFriendMessages_SendMessage_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modified_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_without_bb_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_timestamp_(0u)
  , ordinal_(0u){}
struct CFriendMessages_SendMessage_ResponseDefaultTypeInternal {
  constexpr CFriendMessages_SendMessage_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendMessages_SendMessage_ResponseDefaultTypeInternal() {}
  union {
    CFriendMessages_SendMessage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendMessages_SendMessage_ResponseDefaultTypeInternal _CFriendMessages_SendMessage_Response_default_instance_;
constexpr CFriendMessages_AckMessage_Notification::CFriendMessages_AckMessage_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_partner_(uint64_t{0u})
  , timestamp_(0u){}
struct CFriendMessages_AckMessage_NotificationDefaultTypeInternal {
  constexpr CFriendMessages_AckMessage_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendMessages_AckMessage_NotificationDefaultTypeInternal() {}
  union {
    CFriendMessages_AckMessage_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendMessages_AckMessage_NotificationDefaultTypeInternal _CFriendMessages_AckMessage_Notification_default_instance_;
constexpr CFriendMessages_IsInFriendsUIBeta_Request::CFriendMessages_IsInFriendsUIBeta_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct CFriendMessages_IsInFriendsUIBeta_RequestDefaultTypeInternal {
  constexpr CFriendMessages_IsInFriendsUIBeta_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendMessages_IsInFriendsUIBeta_RequestDefaultTypeInternal() {}
  union {
    CFriendMessages_IsInFriendsUIBeta_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendMessages_IsInFriendsUIBeta_RequestDefaultTypeInternal _CFriendMessages_IsInFriendsUIBeta_Request_default_instance_;
constexpr CFriendMessages_IsInFriendsUIBeta_Response::CFriendMessages_IsInFriendsUIBeta_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : online_in_friendsui_(false)
  , has_used_friendsui_(false){}
struct CFriendMessages_IsInFriendsUIBeta_ResponseDefaultTypeInternal {
  constexpr CFriendMessages_IsInFriendsUIBeta_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendMessages_IsInFriendsUIBeta_ResponseDefaultTypeInternal() {}
  union {
    CFriendMessages_IsInFriendsUIBeta_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendMessages_IsInFriendsUIBeta_ResponseDefaultTypeInternal _CFriendMessages_IsInFriendsUIBeta_Response_default_instance_;
constexpr CFriendMessages_UpdateMessageReaction_Request::CFriendMessages_UpdateMessageReaction_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , server_timestamp_(0u)
  , ordinal_(0u)
  , reaction_type_(0)

  , is_add_(false){}
struct CFriendMessages_UpdateMessageReaction_RequestDefaultTypeInternal {
  constexpr CFriendMessages_UpdateMessageReaction_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendMessages_UpdateMessageReaction_RequestDefaultTypeInternal() {}
  union {
    CFriendMessages_UpdateMessageReaction_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendMessages_UpdateMessageReaction_RequestDefaultTypeInternal _CFriendMessages_UpdateMessageReaction_Request_default_instance_;
constexpr CFriendMessages_UpdateMessageReaction_Response::CFriendMessages_UpdateMessageReaction_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reactors_(){}
struct CFriendMessages_UpdateMessageReaction_ResponseDefaultTypeInternal {
  constexpr CFriendMessages_UpdateMessageReaction_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendMessages_UpdateMessageReaction_ResponseDefaultTypeInternal() {}
  union {
    CFriendMessages_UpdateMessageReaction_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendMessages_UpdateMessageReaction_ResponseDefaultTypeInternal _CFriendMessages_UpdateMessageReaction_Response_default_instance_;
constexpr CFriendMessages_IncomingMessage_Notification::CFriendMessages_IncomingMessage_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_no_bbcode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_friend_(uint64_t{0u})
  , chat_entry_type_(0)
  , rtime32_server_timestamp_(0u)
  , ordinal_(0u)
  , from_limited_account_(false)
  , local_echo_(false)
  , low_priority_(false){}
struct CFriendMessages_IncomingMessage_NotificationDefaultTypeInternal {
  constexpr CFriendMessages_IncomingMessage_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendMessages_IncomingMessage_NotificationDefaultTypeInternal() {}
  union {
    CFriendMessages_IncomingMessage_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendMessages_IncomingMessage_NotificationDefaultTypeInternal _CFriendMessages_IncomingMessage_Notification_default_instance_;
constexpr CFriendMessages_MessageReaction_Notification::CFriendMessages_MessageReaction_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_friend_(uint64_t{0u})
  , server_timestamp_(0u)
  , ordinal_(0u)
  , reactor_(uint64_t{0u})
  , reaction_type_(0)

  , is_add_(false){}
struct CFriendMessages_MessageReaction_NotificationDefaultTypeInternal {
  constexpr CFriendMessages_MessageReaction_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CFriendMessages_MessageReaction_NotificationDefaultTypeInternal() {}
  union {
    CFriendMessages_MessageReaction_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CFriendMessages_MessageReaction_NotificationDefaultTypeInternal _CFriendMessages_MessageReaction_Notification_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5ffriendmessages_2esteamclient_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5ffriendmessages_2esteamclient_2eproto[2];

const uint32_t TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, steamid1_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, steamid2_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, count_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, most_recent_conversation_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, rtime32_start_time_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, bbcode_format_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, start_ordinal_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, time_last_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Request, ordinal_last_),
  0,
  1,
  2,
  4,
  3,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction, reaction_type_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction, reaction_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction, reactors_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage, accountid_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage, message_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage, ordinal_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response_FriendMessage, reactions_),
  1,
  2,
  0,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response, messages_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_GetRecentMessages_Response, more_available_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Request, lastmessage_since_),
  PROTOBUF_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Request, only_sessions_with_messages_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession, accountid_friend_),
  PROTOBUF_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession, last_message_),
  PROTOBUF_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession, last_view_),
  PROTOBUF_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession, unread_message_count_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response, message_sessions_),
  PROTOBUF_FIELD_OFFSET(::CFriendsMessages_GetActiveMessageSessions_Response, timestamp_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, chat_entry_type_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, message_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, contains_bbcode_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, echo_to_sender_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, low_priority_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_SendMessage_Request, client_message_id_),
  2,
  3,
  0,
  4,
  5,
  6,
  1,
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_SendMessage_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_SendMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_SendMessage_Response, modified_message_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_SendMessage_Response, server_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_SendMessage_Response, ordinal_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_SendMessage_Response, message_without_bb_code_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_AckMessage_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_AckMessage_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_AckMessage_Notification, steamid_partner_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_AckMessage_Notification, timestamp_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IsInFriendsUIBeta_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IsInFriendsUIBeta_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IsInFriendsUIBeta_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IsInFriendsUIBeta_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IsInFriendsUIBeta_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IsInFriendsUIBeta_Response, online_in_friendsui_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IsInFriendsUIBeta_Response, has_used_friendsui_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_UpdateMessageReaction_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_UpdateMessageReaction_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_UpdateMessageReaction_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_UpdateMessageReaction_Request, server_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_UpdateMessageReaction_Request, ordinal_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_UpdateMessageReaction_Request, reaction_type_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_UpdateMessageReaction_Request, reaction_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_UpdateMessageReaction_Request, is_add_),
  1,
  2,
  3,
  4,
  0,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_UpdateMessageReaction_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_UpdateMessageReaction_Response, reactors_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, steamid_friend_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, chat_entry_type_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, from_limited_account_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, message_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, rtime32_server_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, ordinal_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, local_echo_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, message_no_bbcode_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_IncomingMessage_Notification, low_priority_),
  2,
  3,
  6,
  0,
  4,
  5,
  7,
  1,
  8,
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_MessageReaction_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_MessageReaction_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_MessageReaction_Notification, steamid_friend_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_MessageReaction_Notification, server_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_MessageReaction_Notification, ordinal_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_MessageReaction_Notification, reactor_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_MessageReaction_Notification, reaction_type_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_MessageReaction_Notification, reaction_),
  PROTOBUF_FIELD_OFFSET(::CFriendMessages_MessageReaction_Notification, is_add_),
  1,
  2,
  3,
  4,
  5,
  0,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::CFriendMessages_GetRecentMessages_Request)},
  { 24, 33, -1, sizeof(::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction)},
  { 36, 47, -1, sizeof(::CFriendMessages_GetRecentMessages_Response_FriendMessage)},
  { 52, 60, -1, sizeof(::CFriendMessages_GetRecentMessages_Response)},
  { 62, 70, -1, sizeof(::CFriendsMessages_GetActiveMessageSessions_Request)},
  { 72, 82, -1, sizeof(::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession)},
  { 86, 94, -1, sizeof(::CFriendsMessages_GetActiveMessageSessions_Response)},
  { 96, 109, -1, sizeof(::CFriendMessages_SendMessage_Request)},
  { 116, 126, -1, sizeof(::CFriendMessages_SendMessage_Response)},
  { 130, 138, -1, sizeof(::CFriendMessages_AckMessage_Notification)},
  { 140, 147, -1, sizeof(::CFriendMessages_IsInFriendsUIBeta_Request)},
  { 148, 156, -1, sizeof(::CFriendMessages_IsInFriendsUIBeta_Response)},
  { 158, 170, -1, sizeof(::CFriendMessages_UpdateMessageReaction_Request)},
  { 176, -1, -1, sizeof(::CFriendMessages_UpdateMessageReaction_Response)},
  { 183, 198, -1, sizeof(::CFriendMessages_IncomingMessage_Notification)},
  { 207, 220, -1, sizeof(::CFriendMessages_MessageReaction_Notification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendMessages_GetRecentMessages_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendMessages_GetRecentMessages_Response_FriendMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendMessages_GetRecentMessages_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendsMessages_GetActiveMessageSessions_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendsMessages_GetActiveMessageSessions_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendMessages_SendMessage_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendMessages_SendMessage_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendMessages_AckMessage_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendMessages_IsInFriendsUIBeta_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendMessages_IsInFriendsUIBeta_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendMessages_UpdateMessageReaction_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendMessages_UpdateMessageReaction_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendMessages_IncomingMessage_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CFriendMessages_MessageReaction_Notification_default_instance_),
};

const char descriptor_table_protodef_steammessages_5ffriendmessages_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.steammessages_friendmessages.steamclie"
  "nt.proto\032\030steammessages_base.proto\032,stea"
  "mmessages_unified_base.steamclient.proto"
  "\"\361\005\n)CFriendMessages_GetRecentMessages_R"
  "equest\022\020\n\010steamid1\030\001 \001(\006\022\020\n\010steamid2\030\002 \001"
  "(\006\022L\n\005count\030\003 \001(\rB=\202\265\0309If non-zero, cap "
  "the number of recent messages to return."
  "\022s\n\030most_recent_conversation\030\004 \001(\010BQ\202\265\030M"
  "Grab the block of chat from the most rec"
  "ent conversation (a ~5 minute period)\022\251\001"
  "\n\022rtime32_start_time\030\005 \001(\007B\214\001\202\265\030\207\001If non"
  "-zero, return only messages with timesta"
  "mps greater or equal to this. If zero, w"
  "e only return messages from a recent tim"
  "e cutoff.\022E\n\rbbcode_format\030\006 \001(\010B.\202\265\030*Re"
  "turn the results with bbcode formatting."
  "\022\204\001\n\rstart_ordinal\030\007 \001(\rBm\202\265\030iCombined w"
  "ith start time, only messages after this"
  " ordinal are returned (dedupes messages "
  "in same second)\022M\n\ttime_last\030\010 \001(\rB:\202\265\0306"
  "if present/non-zero, return only message"
  "s before this.\022\024\n\014ordinal_last\030\t \001(\r\"\202\004\n"
  "*CFriendMessages_GetRecentMessages_Respo"
  "nse\022~\n\010messages\030\001 \003(\01329.CFriendMessages_"
  "GetRecentMessages_Response.FriendMessage"
  "B1\202\265\030-Array of messages, returned newest"
  " to oldest.\022\026\n\016more_available\030\004 \001(\010\032\273\002\n\r"
  "FriendMessage\022\021\n\taccountid\030\001 \001(\r\022\021\n\ttime"
  "stamp\030\002 \001(\r\022\017\n\007message\030\003 \001(\t\022\017\n\007ordinal\030"
  "\004 \001(\r\022\\\n\treactions\030\005 \003(\0132I.CFriendMessag"
  "es_GetRecentMessages_Response.FriendMess"
  "age.MessageReaction\032\203\001\n\017MessageReaction\022"
  "L\n\rreaction_type\030\001 \001(\0162\025.EMessageReactio"
  "nType:\036k_EMessageReactionType_Invalid\022\020\n"
  "\010reaction\030\002 \001(\t\022\020\n\010reactors\030\003 \003(\r\"\337\002\n1CF"
  "riendsMessages_GetActiveMessageSessions_"
  "Request\022\177\n\021lastmessage_since\030\001 \001(\rBd\202\265\030`"
  "return only session information where a "
  "chat message has been sent since this ti"
  "me (for polling)\022\250\001\n\033only_sessions_with_"
  "messages\030\002 \001(\010B\202\001\202\265\030~If non-zero, return"
  " only message sessions that have message"
  "s since our message cutoff. If zero, we "
  "return all active sessions.\"\374\002\n2CFriends"
  "Messages_GetActiveMessageSessions_Respon"
  "se\022b\n\020message_sessions\030\001 \003(\0132H.CFriendsM"
  "essages_GetActiveMessageSessions_Respons"
  "e.FriendMessageSession\022i\n\ttimestamp\030\002 \001("
  "\rBV\202\265\030RThis should be passed in the next"
  " request as lastmessage_since to poll fo"
  "r updates\032w\n\024FriendMessageSession\022\030\n\020acc"
  "ountid_friend\030\001 \001(\r\022\024\n\014last_message\030\002 \001("
  "\r\022\021\n\tlast_view\030\003 \001(\r\022\034\n\024unread_message_c"
  "ount\030\004 \001(\r\"\302\001\n#CFriendMessages_SendMessa"
  "ge_Request\022\017\n\007steamid\030\001 \001(\006\022\027\n\017chat_entr"
  "y_type\030\002 \001(\005\022\017\n\007message\030\003 \001(\t\022\027\n\017contain"
  "s_bbcode\030\004 \001(\010\022\026\n\016echo_to_sender\030\005 \001(\010\022\024"
  "\n\014low_priority\030\006 \001(\010\022\031\n\021client_message_i"
  "d\030\010 \001(\t\"\214\001\n$CFriendMessages_SendMessage_"
  "Response\022\030\n\020modified_message\030\001 \001(\t\022\030\n\020se"
  "rver_timestamp\030\002 \001(\r\022\017\n\007ordinal\030\003 \001(\r\022\037\n"
  "\027message_without_bb_code\030\004 \001(\t\"U\n\'CFrien"
  "dMessages_AckMessage_Notification\022\027\n\017ste"
  "amid_partner\030\001 \001(\006\022\021\n\ttimestamp\030\002 \001(\r\"<\n"
  ")CFriendMessages_IsInFriendsUIBeta_Reque"
  "st\022\017\n\007steamid\030\001 \001(\006\"e\n*CFriendMessages_I"
  "sInFriendsUIBeta_Response\022\033\n\023online_in_f"
  "riendsui\030\001 \001(\010\022\032\n\022has_used_friendsui\030\002 \001"
  "(\010\"\333\001\n-CFriendMessages_UpdateMessageReac"
  "tion_Request\022\017\n\007steamid\030\001 \001(\006\022\030\n\020server_"
  "timestamp\030\002 \001(\r\022\017\n\007ordinal\030\003 \001(\r\022L\n\rreac"
  "tion_type\030\004 \001(\0162\025.EMessageReactionType:\036"
  "k_EMessageReactionType_Invalid\022\020\n\010reacti"
  "on\030\005 \001(\t\022\016\n\006is_add\030\006 \001(\010\"B\n.CFriendMessa"
  "ges_UpdateMessageReaction_Response\022\020\n\010re"
  "actors\030\001 \003(\r\"\206\002\n,CFriendMessages_Incomin"
  "gMessage_Notification\022\026\n\016steamid_friend\030"
  "\001 \001(\006\022\027\n\017chat_entry_type\030\002 \001(\005\022\034\n\024from_l"
  "imited_account\030\003 \001(\010\022\017\n\007message\030\004 \001(\t\022 \n"
  "\030rtime32_server_timestamp\030\005 \001(\007\022\017\n\007ordin"
  "al\030\006 \001(\r\022\022\n\nlocal_echo\030\007 \001(\010\022\031\n\021message_"
  "no_bbcode\030\010 \001(\t\022\024\n\014low_priority\030\t \001(\010\"\362\001"
  "\n,CFriendMessages_MessageReaction_Notifi"
  "cation\022\026\n\016steamid_friend\030\001 \001(\006\022\030\n\020server"
  "_timestamp\030\002 \001(\r\022\017\n\007ordinal\030\003 \001(\r\022\017\n\007rea"
  "ctor\030\004 \001(\006\022L\n\rreaction_type\030\005 \001(\0162\025.EMes"
  "sageReactionType:\036k_EMessageReactionType"
  "_Invalid\022\020\n\010reaction\030\006 \001(\t\022\016\n\006is_add\030\007 \001"
  "(\010*\203\001\n\024EMessageReactionType\022\"\n\036k_EMessag"
  "eReactionType_Invalid\020\000\022#\n\037k_EMessageRea"
  "ctionType_Emoticon\020\001\022\"\n\036k_EMessageReacti"
  "onType_Sticker\020\0022\275\010\n\016FriendMessages\022\245\001\n\021"
  "GetRecentMessages\022*.CFriendMessages_GetR"
  "ecentMessages_Request\032+.CFriendMessages_"
  "GetRecentMessages_Response\"7\202\265\0303Get a lo"
  "g of recent chat messages between two us"
  "ers\022\300\001\n\030GetActiveMessageSessions\0222.CFrie"
  "ndsMessages_GetActiveMessageSessions_Req"
  "uest\0323.CFriendsMessages_GetActiveMessage"
  "Sessions_Response\";\202\265\0307Get information a"
  "bout recent offline messages and chats\022\177"
  "\n\013SendMessage\022$.CFriendMessages_SendMess"
  "age_Request\032%.CFriendMessages_SendMessag"
  "e_Response\"#\202\265\030\037Send a chat message to a"
  " friend\022\214\001\n\nAckMessage\022(.CFriendMessages"
  "_AckMessage_Notification\032\013.NoResponse\"G\202"
  "\265\030CAcknowledge that we have seen the mos"
  "t recent message from a friend\022\233\001\n\021IsInF"
  "riendsUIBeta\022*.CFriendMessages_IsInFrien"
  "dsUIBeta_Request\032+.CFriendMessages_IsInF"
  "riendsUIBeta_Response\"-\202\265\030)See if a frie"
  "nd is in the friendsui beta.\022\256\001\n\025UpdateM"
  "essageReaction\022..CFriendMessages_UpdateM"
  "essageReaction_Request\032/.CFriendMessages"
  "_UpdateMessageReaction_Response\"4\202\265\0300Add"
  "s/removes a reaction to/from a friend me"
  "ssage\032a\202\265\030]A service for relaying and lo"
  "gging friend messages (user-to-user chat"
  "s and offline messaging)2\230\003\n\024FriendMessa"
  "gesClient\022r\n\017IncomingMessage\022-.CFriendMe"
  "ssages_IncomingMessage_Notification\032\013.No"
  "Response\"#\202\265\030\037New chat message from a fr"
  "iend.\022\215\001\n\024NotifyAckMessageEcho\022(.CFriend"
  "Messages_AckMessage_Notification\032\013.NoRes"
  "ponse\">\202\265\030:A session acked an unread mes"
  "sage, echo to other sessions.\022v\n\017Message"
  "Reaction\022-.CFriendMessages_MessageReacti"
  "on_Notification\032\013.NoResponse\"\'\202\265\030#New me"
  "ssage reaction from a friend.\032\004\300\265\030\002B\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_deps[2] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto = {
  false, false, 5160, descriptor_table_protodef_steammessages_5ffriendmessages_2esteamclient_2eproto, "steammessages_friendmessages.steamclient.proto", 
  &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once, descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_deps, 2, 16,
  schemas, file_default_instances, TableStruct_steammessages_5ffriendmessages_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5ffriendmessages_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5ffriendmessages_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5ffriendmessages_2esteamclient_2eproto(&descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMessageReactionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5ffriendmessages_2esteamclient_2eproto[0];
}
bool EMessageReactionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CFriendMessages_GetRecentMessages_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CFriendMessages_GetRecentMessages_Request>()._has_bits_);
  static void set_has_steamid1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_most_recent_conversation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rtime32_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bbcode_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_time_last(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ordinal_last(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CFriendMessages_GetRecentMessages_Request::CFriendMessages_GetRecentMessages_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendMessages_GetRecentMessages_Request)
}
CFriendMessages_GetRecentMessages_Request::CFriendMessages_GetRecentMessages_Request(const CFriendMessages_GetRecentMessages_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid1_, &from.steamid1_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_last_) -
    reinterpret_cast<char*>(&steamid1_)) + sizeof(ordinal_last_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_GetRecentMessages_Request)
}

inline void CFriendMessages_GetRecentMessages_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ordinal_last_) -
    reinterpret_cast<char*>(&steamid1_)) + sizeof(ordinal_last_));
}

CFriendMessages_GetRecentMessages_Request::~CFriendMessages_GetRecentMessages_Request() {
  // @@protoc_insertion_point(destructor:CFriendMessages_GetRecentMessages_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendMessages_GetRecentMessages_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CFriendMessages_GetRecentMessages_Request::ArenaDtor(void* object) {
  CFriendMessages_GetRecentMessages_Request* _this = reinterpret_cast< CFriendMessages_GetRecentMessages_Request* >(object);
  (void)_this;
}
void CFriendMessages_GetRecentMessages_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendMessages_GetRecentMessages_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendMessages_GetRecentMessages_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_GetRecentMessages_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&steamid1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_last_) -
        reinterpret_cast<char*>(&steamid1_)) + sizeof(time_last_));
  }
  ordinal_last_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendMessages_GetRecentMessages_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid1(&has_bits);
          steamid1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid2(&has_bits);
          steamid2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 3 [(.description) = "If non-zero, cap the number of recent messages to return."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool most_recent_conversation = 4 [(.description) = "Grab the block of chat from the most recent conversation (a ~5 minute period)"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_most_recent_conversation(&has_bits);
          most_recent_conversation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 rtime32_start_time = 5 [(.description) = "If non-zero, return only messages with timestamps greater or equal to this. If zero, we only return messages from a recent time cutoff."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_rtime32_start_time(&has_bits);
          rtime32_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool bbcode_format = 6 [(.description) = "Return the results with bbcode formatting."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bbcode_format(&has_bits);
          bbcode_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_ordinal = 7 [(.description) = "Combined with start time, only messages after this ordinal are returned (dedupes messages in same second)"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_start_ordinal(&has_bits);
          start_ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_last = 8 [(.description) = "if present/non-zero, return only messages before this."];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_time_last(&has_bits);
          time_last_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal_last = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_ordinal_last(&has_bits);
          ordinal_last_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendMessages_GetRecentMessages_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_GetRecentMessages_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid1(), target);
  }

  // optional fixed64 steamid2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid2(), target);
  }

  // optional uint32 count = 3 [(.description) = "If non-zero, cap the number of recent messages to return."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  // optional bool most_recent_conversation = 4 [(.description) = "Grab the block of chat from the most recent conversation (a ~5 minute period)"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_most_recent_conversation(), target);
  }

  // optional fixed32 rtime32_start_time = 5 [(.description) = "If non-zero, return only messages with timestamps greater or equal to this. If zero, we only return messages from a recent time cutoff."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_rtime32_start_time(), target);
  }

  // optional bool bbcode_format = 6 [(.description) = "Return the results with bbcode formatting."];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_bbcode_format(), target);
  }

  // optional uint32 start_ordinal = 7 [(.description) = "Combined with start time, only messages after this ordinal are returned (dedupes messages in same second)"];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_start_ordinal(), target);
  }

  // optional uint32 time_last = 8 [(.description) = "if present/non-zero, return only messages before this."];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_time_last(), target);
  }

  // optional uint32 ordinal_last = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ordinal_last(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_GetRecentMessages_Request)
  return target;
}

size_t CFriendMessages_GetRecentMessages_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_GetRecentMessages_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 steamid1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 count = 3 [(.description) = "If non-zero, cap the number of recent messages to return."];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

    // optional fixed32 rtime32_start_time = 5 [(.description) = "If non-zero, return only messages with timestamps greater or equal to this. If zero, we only return messages from a recent time cutoff."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool most_recent_conversation = 4 [(.description) = "Grab the block of chat from the most recent conversation (a ~5 minute period)"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool bbcode_format = 6 [(.description) = "Return the results with bbcode formatting."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 start_ordinal = 7 [(.description) = "Combined with start time, only messages after this ordinal are returned (dedupes messages in same second)"];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_start_ordinal());
    }

    // optional uint32 time_last = 8 [(.description) = "if present/non-zero, return only messages before this."];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_last());
    }

  }
  // optional uint32 ordinal_last = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal_last());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendMessages_GetRecentMessages_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendMessages_GetRecentMessages_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendMessages_GetRecentMessages_Request::GetClassData() const { return &_class_data_; }

void CFriendMessages_GetRecentMessages_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendMessages_GetRecentMessages_Request *>(to)->MergeFrom(
      static_cast<const CFriendMessages_GetRecentMessages_Request &>(from));
}


void CFriendMessages_GetRecentMessages_Request::MergeFrom(const CFriendMessages_GetRecentMessages_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_GetRecentMessages_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      steamid1_ = from.steamid1_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid2_ = from.steamid2_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtime32_start_time_ = from.rtime32_start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      most_recent_conversation_ = from.most_recent_conversation_;
    }
    if (cached_has_bits & 0x00000020u) {
      bbcode_format_ = from.bbcode_format_;
    }
    if (cached_has_bits & 0x00000040u) {
      start_ordinal_ = from.start_ordinal_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_last_ = from.time_last_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_ordinal_last(from._internal_ordinal_last());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendMessages_GetRecentMessages_Request::CopyFrom(const CFriendMessages_GetRecentMessages_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_GetRecentMessages_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_GetRecentMessages_Request::IsInitialized() const {
  return true;
}

void CFriendMessages_GetRecentMessages_Request::InternalSwap(CFriendMessages_GetRecentMessages_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFriendMessages_GetRecentMessages_Request, ordinal_last_)
      + sizeof(CFriendMessages_GetRecentMessages_Request::ordinal_last_)
      - PROTOBUF_FIELD_OFFSET(CFriendMessages_GetRecentMessages_Request, steamid1_)>(
          reinterpret_cast<char*>(&steamid1_),
          reinterpret_cast<char*>(&other->steamid1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendMessages_GetRecentMessages_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[0]);
}

// ===================================================================

class CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_Internal {
 public:
  using HasBits = decltype(std::declval<CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction>()._has_bits_);
  static void set_has_reaction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reaction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  reactors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction)
}
CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction(const CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      reactors_(from.reactors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reaction()) {
    reaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reaction(), 
      GetArenaForAllocation());
  }
  reaction_type_ = from.reaction_type_;
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction)
}

inline void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::SharedCtor() {
reaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reaction_type_ = 0;
}

CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::~CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction() {
  // @@protoc_insertion_point(destructor:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::ArenaDtor(void* object) {
  CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* _this = reinterpret_cast< CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* >(object);
  (void)_this;
}
void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reactors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reaction_.ClearNonDefaultToEmpty();
  }
  reaction_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EMessageReactionType reaction_type = 1 [default = k_EMessageReactionType_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMessageReactionType_IsValid(val))) {
            _internal_set_reaction_type(static_cast<::EMessageReactionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string reaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction.reaction");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 reactors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_reactors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_reactors(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EMessageReactionType reaction_type = 1 [default = k_EMessageReactionType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reaction_type(), target);
  }

  // optional string reaction = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reaction().data(), static_cast<int>(this->_internal_reaction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction.reaction");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reaction(), target);
  }

  // repeated uint32 reactors = 3;
  for (int i = 0, n = this->_internal_reactors_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_reactors(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction)
  return target;
}

size_t CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 reactors = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->reactors_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reactors_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string reaction = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reaction());
    }

    // optional .EMessageReactionType reaction_type = 1 [default = k_EMessageReactionType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reaction_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::GetClassData() const { return &_class_data_; }

void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction *>(to)->MergeFrom(
      static_cast<const CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction &>(from));
}


void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::MergeFrom(const CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  reactors_.MergeFrom(from.reactors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reaction(from._internal_reaction());
    }
    if (cached_has_bits & 0x00000002u) {
      reaction_type_ = from.reaction_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::CopyFrom(const CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::IsInitialized() const {
  return true;
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::InternalSwap(CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reactors_.InternalSwap(&other->reactors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reaction_, lhs_arena,
      &other->reaction_, rhs_arena
  );
  swap(reaction_type_, other->reaction_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[1]);
}

// ===================================================================

class CFriendMessages_GetRecentMessages_Response_FriendMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CFriendMessages_GetRecentMessages_Response_FriendMessage>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CFriendMessages_GetRecentMessages_Response_FriendMessage::CFriendMessages_GetRecentMessages_Response_FriendMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  reactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendMessages_GetRecentMessages_Response.FriendMessage)
}
CFriendMessages_GetRecentMessages_Response_FriendMessage::CFriendMessages_GetRecentMessages_Response_FriendMessage(const CFriendMessages_GetRecentMessages_Response_FriendMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      reactions_(from.reactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(ordinal_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_GetRecentMessages_Response.FriendMessage)
}

inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(ordinal_));
}

CFriendMessages_GetRecentMessages_Response_FriendMessage::~CFriendMessages_GetRecentMessages_Response_FriendMessage() {
  // @@protoc_insertion_point(destructor:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendMessages_GetRecentMessages_Response_FriendMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage::ArenaDtor(void* object) {
  CFriendMessages_GetRecentMessages_Response_FriendMessage* _this = reinterpret_cast< CFriendMessages_GetRecentMessages_Response_FriendMessage* >(object);
  (void)_this;
}
void CFriendMessages_GetRecentMessages_Response_FriendMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendMessages_GetRecentMessages_Response_FriendMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reactions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ordinal_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(ordinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendMessages_GetRecentMessages_Response_FriendMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CFriendMessages_GetRecentMessages_Response.FriendMessage.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction reactions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendMessages_GetRecentMessages_Response_FriendMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CFriendMessages_GetRecentMessages_Response.FriendMessage.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional uint32 ordinal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ordinal(), target);
  }

  // repeated .CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction reactions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_reactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  return target;
}

size_t CFriendMessages_GetRecentMessages_Response_FriendMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CFriendMessages_GetRecentMessages_Response.FriendMessage.MessageReaction reactions = 5;
  total_size += 1UL * this->_internal_reactions_size();
  for (const auto& msg : this->reactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 ordinal = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendMessages_GetRecentMessages_Response_FriendMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendMessages_GetRecentMessages_Response_FriendMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendMessages_GetRecentMessages_Response_FriendMessage::GetClassData() const { return &_class_data_; }

void CFriendMessages_GetRecentMessages_Response_FriendMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendMessages_GetRecentMessages_Response_FriendMessage *>(to)->MergeFrom(
      static_cast<const CFriendMessages_GetRecentMessages_Response_FriendMessage &>(from));
}


void CFriendMessages_GetRecentMessages_Response_FriendMessage::MergeFrom(const CFriendMessages_GetRecentMessages_Response_FriendMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  reactions_.MergeFrom(from.reactions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage::CopyFrom(const CFriendMessages_GetRecentMessages_Response_FriendMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_GetRecentMessages_Response.FriendMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_GetRecentMessages_Response_FriendMessage::IsInitialized() const {
  return true;
}

void CFriendMessages_GetRecentMessages_Response_FriendMessage::InternalSwap(CFriendMessages_GetRecentMessages_Response_FriendMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reactions_.InternalSwap(&other->reactions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFriendMessages_GetRecentMessages_Response_FriendMessage, ordinal_)
      + sizeof(CFriendMessages_GetRecentMessages_Response_FriendMessage::ordinal_)
      - PROTOBUF_FIELD_OFFSET(CFriendMessages_GetRecentMessages_Response_FriendMessage, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendMessages_GetRecentMessages_Response_FriendMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[2]);
}

// ===================================================================

class CFriendMessages_GetRecentMessages_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CFriendMessages_GetRecentMessages_Response>()._has_bits_);
  static void set_has_more_available(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CFriendMessages_GetRecentMessages_Response::CFriendMessages_GetRecentMessages_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  messages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendMessages_GetRecentMessages_Response)
}
CFriendMessages_GetRecentMessages_Response::CFriendMessages_GetRecentMessages_Response(const CFriendMessages_GetRecentMessages_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  more_available_ = from.more_available_;
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_GetRecentMessages_Response)
}

inline void CFriendMessages_GetRecentMessages_Response::SharedCtor() {
more_available_ = false;
}

CFriendMessages_GetRecentMessages_Response::~CFriendMessages_GetRecentMessages_Response() {
  // @@protoc_insertion_point(destructor:CFriendMessages_GetRecentMessages_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendMessages_GetRecentMessages_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CFriendMessages_GetRecentMessages_Response::ArenaDtor(void* object) {
  CFriendMessages_GetRecentMessages_Response* _this = reinterpret_cast< CFriendMessages_GetRecentMessages_Response* >(object);
  (void)_this;
}
void CFriendMessages_GetRecentMessages_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendMessages_GetRecentMessages_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendMessages_GetRecentMessages_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_GetRecentMessages_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  more_available_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendMessages_GetRecentMessages_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CFriendMessages_GetRecentMessages_Response.FriendMessage messages = 1 [(.description) = "Array of messages, returned newest to oldest."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool more_available = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_more_available(&has_bits);
          more_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendMessages_GetRecentMessages_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_GetRecentMessages_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CFriendMessages_GetRecentMessages_Response.FriendMessage messages = 1 [(.description) = "Array of messages, returned newest to oldest."];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool more_available = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_more_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_GetRecentMessages_Response)
  return target;
}

size_t CFriendMessages_GetRecentMessages_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_GetRecentMessages_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CFriendMessages_GetRecentMessages_Response.FriendMessage messages = 1 [(.description) = "Array of messages, returned newest to oldest."];
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool more_available = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendMessages_GetRecentMessages_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendMessages_GetRecentMessages_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendMessages_GetRecentMessages_Response::GetClassData() const { return &_class_data_; }

void CFriendMessages_GetRecentMessages_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendMessages_GetRecentMessages_Response *>(to)->MergeFrom(
      static_cast<const CFriendMessages_GetRecentMessages_Response &>(from));
}


void CFriendMessages_GetRecentMessages_Response::MergeFrom(const CFriendMessages_GetRecentMessages_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_GetRecentMessages_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from._internal_has_more_available()) {
    _internal_set_more_available(from._internal_more_available());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendMessages_GetRecentMessages_Response::CopyFrom(const CFriendMessages_GetRecentMessages_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_GetRecentMessages_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_GetRecentMessages_Response::IsInitialized() const {
  return true;
}

void CFriendMessages_GetRecentMessages_Response::InternalSwap(CFriendMessages_GetRecentMessages_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  messages_.InternalSwap(&other->messages_);
  swap(more_available_, other->more_available_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendMessages_GetRecentMessages_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[3]);
}

// ===================================================================

class CFriendsMessages_GetActiveMessageSessions_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CFriendsMessages_GetActiveMessageSessions_Request>()._has_bits_);
  static void set_has_lastmessage_since(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_only_sessions_with_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CFriendsMessages_GetActiveMessageSessions_Request::CFriendsMessages_GetActiveMessageSessions_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendsMessages_GetActiveMessageSessions_Request)
}
CFriendsMessages_GetActiveMessageSessions_Request::CFriendsMessages_GetActiveMessageSessions_Request(const CFriendsMessages_GetActiveMessageSessions_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lastmessage_since_, &from.lastmessage_since_,
    static_cast<size_t>(reinterpret_cast<char*>(&only_sessions_with_messages_) -
    reinterpret_cast<char*>(&lastmessage_since_)) + sizeof(only_sessions_with_messages_));
  // @@protoc_insertion_point(copy_constructor:CFriendsMessages_GetActiveMessageSessions_Request)
}

inline void CFriendsMessages_GetActiveMessageSessions_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lastmessage_since_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&only_sessions_with_messages_) -
    reinterpret_cast<char*>(&lastmessage_since_)) + sizeof(only_sessions_with_messages_));
}

CFriendsMessages_GetActiveMessageSessions_Request::~CFriendsMessages_GetActiveMessageSessions_Request() {
  // @@protoc_insertion_point(destructor:CFriendsMessages_GetActiveMessageSessions_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendsMessages_GetActiveMessageSessions_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CFriendsMessages_GetActiveMessageSessions_Request::ArenaDtor(void* object) {
  CFriendsMessages_GetActiveMessageSessions_Request* _this = reinterpret_cast< CFriendsMessages_GetActiveMessageSessions_Request* >(object);
  (void)_this;
}
void CFriendsMessages_GetActiveMessageSessions_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendsMessages_GetActiveMessageSessions_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendsMessages_GetActiveMessageSessions_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendsMessages_GetActiveMessageSessions_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&lastmessage_since_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&only_sessions_with_messages_) -
        reinterpret_cast<char*>(&lastmessage_since_)) + sizeof(only_sessions_with_messages_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendsMessages_GetActiveMessageSessions_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 lastmessage_since = 1 [(.description) = "return only session information where a chat message has been sent since this time (for polling)"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lastmessage_since(&has_bits);
          lastmessage_since_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool only_sessions_with_messages = 2 [(.description) = "If non-zero, return only message sessions that have messages since our message cutoff. If zero, we return all active sessions."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_only_sessions_with_messages(&has_bits);
          only_sessions_with_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendsMessages_GetActiveMessageSessions_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendsMessages_GetActiveMessageSessions_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lastmessage_since = 1 [(.description) = "return only session information where a chat message has been sent since this time (for polling)"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lastmessage_since(), target);
  }

  // optional bool only_sessions_with_messages = 2 [(.description) = "If non-zero, return only message sessions that have messages since our message cutoff. If zero, we return all active sessions."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_only_sessions_with_messages(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendsMessages_GetActiveMessageSessions_Request)
  return target;
}

size_t CFriendsMessages_GetActiveMessageSessions_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendsMessages_GetActiveMessageSessions_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 lastmessage_since = 1 [(.description) = "return only session information where a chat message has been sent since this time (for polling)"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_lastmessage_since());
    }

    // optional bool only_sessions_with_messages = 2 [(.description) = "If non-zero, return only message sessions that have messages since our message cutoff. If zero, we return all active sessions."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendsMessages_GetActiveMessageSessions_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendsMessages_GetActiveMessageSessions_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendsMessages_GetActiveMessageSessions_Request::GetClassData() const { return &_class_data_; }

void CFriendsMessages_GetActiveMessageSessions_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendsMessages_GetActiveMessageSessions_Request *>(to)->MergeFrom(
      static_cast<const CFriendsMessages_GetActiveMessageSessions_Request &>(from));
}


void CFriendsMessages_GetActiveMessageSessions_Request::MergeFrom(const CFriendsMessages_GetActiveMessageSessions_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendsMessages_GetActiveMessageSessions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      lastmessage_since_ = from.lastmessage_since_;
    }
    if (cached_has_bits & 0x00000002u) {
      only_sessions_with_messages_ = from.only_sessions_with_messages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendsMessages_GetActiveMessageSessions_Request::CopyFrom(const CFriendsMessages_GetActiveMessageSessions_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendsMessages_GetActiveMessageSessions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendsMessages_GetActiveMessageSessions_Request::IsInitialized() const {
  return true;
}

void CFriendsMessages_GetActiveMessageSessions_Request::InternalSwap(CFriendsMessages_GetActiveMessageSessions_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFriendsMessages_GetActiveMessageSessions_Request, only_sessions_with_messages_)
      + sizeof(CFriendsMessages_GetActiveMessageSessions_Request::only_sessions_with_messages_)
      - PROTOBUF_FIELD_OFFSET(CFriendsMessages_GetActiveMessageSessions_Request, lastmessage_since_)>(
          reinterpret_cast<char*>(&lastmessage_since_),
          reinterpret_cast<char*>(&other->lastmessage_since_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendsMessages_GetActiveMessageSessions_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[4]);
}

// ===================================================================

class CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_Internal {
 public:
  using HasBits = decltype(std::declval<CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession>()._has_bits_);
  static void set_has_accountid_friend(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_view(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unread_message_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
}
CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession(const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_friend_, &from.accountid_friend_,
    static_cast<size_t>(reinterpret_cast<char*>(&unread_message_count_) -
    reinterpret_cast<char*>(&accountid_friend_)) + sizeof(unread_message_count_));
  // @@protoc_insertion_point(copy_constructor:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
}

inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_friend_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unread_message_count_) -
    reinterpret_cast<char*>(&accountid_friend_)) + sizeof(unread_message_count_));
}

CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::~CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession() {
  // @@protoc_insertion_point(destructor:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::ArenaDtor(void* object) {
  CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* _this = reinterpret_cast< CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* >(object);
  (void)_this;
}
void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&accountid_friend_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unread_message_count_) -
        reinterpret_cast<char*>(&accountid_friend_)) + sizeof(unread_message_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid_friend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid_friend(&has_bits);
          accountid_friend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last_message(&has_bits);
          last_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_view = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_last_view(&has_bits);
          last_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 unread_message_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_unread_message_count(&has_bits);
          unread_message_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid_friend = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid_friend(), target);
  }

  // optional uint32 last_message = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_message(), target);
  }

  // optional uint32 last_view = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_view(), target);
  }

  // optional uint32 unread_message_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_unread_message_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  return target;
}

size_t CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 accountid_friend = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid_friend());
    }

    // optional uint32 last_message = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_message());
    }

    // optional uint32 last_view = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_view());
    }

    // optional uint32 unread_message_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_unread_message_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::GetClassData() const { return &_class_data_; }

void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession *>(to)->MergeFrom(
      static_cast<const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession &>(from));
}


void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::MergeFrom(const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      accountid_friend_ = from.accountid_friend_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_message_ = from.last_message_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_view_ = from.last_view_;
    }
    if (cached_has_bits & 0x00000008u) {
      unread_message_count_ = from.unread_message_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::CopyFrom(const CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::IsInitialized() const {
  return true;
}

void CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::InternalSwap(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession, unread_message_count_)
      + sizeof(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::unread_message_count_)
      - PROTOBUF_FIELD_OFFSET(CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession, accountid_friend_)>(
          reinterpret_cast<char*>(&accountid_friend_),
          reinterpret_cast<char*>(&other->accountid_friend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[5]);
}

// ===================================================================

class CFriendsMessages_GetActiveMessageSessions_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CFriendsMessages_GetActiveMessageSessions_Response>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CFriendsMessages_GetActiveMessageSessions_Response::CFriendsMessages_GetActiveMessageSessions_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  message_sessions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendsMessages_GetActiveMessageSessions_Response)
}
CFriendsMessages_GetActiveMessageSessions_Response::CFriendsMessages_GetActiveMessageSessions_Response(const CFriendsMessages_GetActiveMessageSessions_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      message_sessions_(from.message_sessions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:CFriendsMessages_GetActiveMessageSessions_Response)
}

inline void CFriendsMessages_GetActiveMessageSessions_Response::SharedCtor() {
timestamp_ = 0u;
}

CFriendsMessages_GetActiveMessageSessions_Response::~CFriendsMessages_GetActiveMessageSessions_Response() {
  // @@protoc_insertion_point(destructor:CFriendsMessages_GetActiveMessageSessions_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendsMessages_GetActiveMessageSessions_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CFriendsMessages_GetActiveMessageSessions_Response::ArenaDtor(void* object) {
  CFriendsMessages_GetActiveMessageSessions_Response* _this = reinterpret_cast< CFriendsMessages_GetActiveMessageSessions_Response* >(object);
  (void)_this;
}
void CFriendsMessages_GetActiveMessageSessions_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendsMessages_GetActiveMessageSessions_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendsMessages_GetActiveMessageSessions_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendsMessages_GetActiveMessageSessions_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_sessions_.Clear();
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendsMessages_GetActiveMessageSessions_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession message_sessions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2 [(.description) = "This should be passed in the next request as lastmessage_since to poll for updates"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendsMessages_GetActiveMessageSessions_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendsMessages_GetActiveMessageSessions_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession message_sessions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_message_sessions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_message_sessions(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 2 [(.description) = "This should be passed in the next request as lastmessage_since to poll for updates"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendsMessages_GetActiveMessageSessions_Response)
  return target;
}

size_t CFriendsMessages_GetActiveMessageSessions_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendsMessages_GetActiveMessageSessions_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CFriendsMessages_GetActiveMessageSessions_Response.FriendMessageSession message_sessions = 1;
  total_size += 1UL * this->_internal_message_sessions_size();
  for (const auto& msg : this->message_sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 timestamp = 2 [(.description) = "This should be passed in the next request as lastmessage_since to poll for updates"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendsMessages_GetActiveMessageSessions_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendsMessages_GetActiveMessageSessions_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendsMessages_GetActiveMessageSessions_Response::GetClassData() const { return &_class_data_; }

void CFriendsMessages_GetActiveMessageSessions_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendsMessages_GetActiveMessageSessions_Response *>(to)->MergeFrom(
      static_cast<const CFriendsMessages_GetActiveMessageSessions_Response &>(from));
}


void CFriendsMessages_GetActiveMessageSessions_Response::MergeFrom(const CFriendsMessages_GetActiveMessageSessions_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendsMessages_GetActiveMessageSessions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  message_sessions_.MergeFrom(from.message_sessions_);
  if (from._internal_has_timestamp()) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendsMessages_GetActiveMessageSessions_Response::CopyFrom(const CFriendsMessages_GetActiveMessageSessions_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendsMessages_GetActiveMessageSessions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendsMessages_GetActiveMessageSessions_Response::IsInitialized() const {
  return true;
}

void CFriendsMessages_GetActiveMessageSessions_Response::InternalSwap(CFriendsMessages_GetActiveMessageSessions_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_sessions_.InternalSwap(&other->message_sessions_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendsMessages_GetActiveMessageSessions_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[6]);
}

// ===================================================================

class CFriendMessages_SendMessage_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CFriendMessages_SendMessage_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chat_entry_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contains_bbcode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_echo_to_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_low_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_client_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CFriendMessages_SendMessage_Request::CFriendMessages_SendMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendMessages_SendMessage_Request)
}
CFriendMessages_SendMessage_Request::CFriendMessages_SendMessage_Request(const CFriendMessages_SendMessage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  client_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_message_id()) {
    client_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_message_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_priority_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(low_priority_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_SendMessage_Request)
}

inline void CFriendMessages_SendMessage_Request::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&low_priority_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(low_priority_));
}

CFriendMessages_SendMessage_Request::~CFriendMessages_SendMessage_Request() {
  // @@protoc_insertion_point(destructor:CFriendMessages_SendMessage_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendMessages_SendMessage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CFriendMessages_SendMessage_Request::ArenaDtor(void* object) {
  CFriendMessages_SendMessage_Request* _this = reinterpret_cast< CFriendMessages_SendMessage_Request* >(object);
  (void)_this;
}
void CFriendMessages_SendMessage_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendMessages_SendMessage_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendMessages_SendMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_SendMessage_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      client_message_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&low_priority_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(low_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendMessages_SendMessage_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 chat_entry_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_entry_type(&has_bits);
          chat_entry_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CFriendMessages_SendMessage_Request.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool contains_bbcode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_contains_bbcode(&has_bits);
          contains_bbcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool echo_to_sender = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_echo_to_sender(&has_bits);
          echo_to_sender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool low_priority = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_low_priority(&has_bits);
          low_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string client_message_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_client_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CFriendMessages_SendMessage_Request.client_message_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendMessages_SendMessage_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_SendMessage_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chat_entry_type(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CFriendMessages_SendMessage_Request.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional bool contains_bbcode = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_contains_bbcode(), target);
  }

  // optional bool echo_to_sender = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_echo_to_sender(), target);
  }

  // optional bool low_priority = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_low_priority(), target);
  }

  // optional string client_message_id = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_message_id().data(), static_cast<int>(this->_internal_client_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CFriendMessages_SendMessage_Request.client_message_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_client_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_SendMessage_Request)
  return target;
}

size_t CFriendMessages_SendMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_SendMessage_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string client_message_id = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_message_id());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 chat_entry_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_chat_entry_type());
    }

    // optional bool contains_bbcode = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool echo_to_sender = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool low_priority = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendMessages_SendMessage_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendMessages_SendMessage_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendMessages_SendMessage_Request::GetClassData() const { return &_class_data_; }

void CFriendMessages_SendMessage_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendMessages_SendMessage_Request *>(to)->MergeFrom(
      static_cast<const CFriendMessages_SendMessage_Request &>(from));
}


void CFriendMessages_SendMessage_Request::MergeFrom(const CFriendMessages_SendMessage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_SendMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_client_message_id(from._internal_client_message_id());
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      chat_entry_type_ = from.chat_entry_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      contains_bbcode_ = from.contains_bbcode_;
    }
    if (cached_has_bits & 0x00000020u) {
      echo_to_sender_ = from.echo_to_sender_;
    }
    if (cached_has_bits & 0x00000040u) {
      low_priority_ = from.low_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendMessages_SendMessage_Request::CopyFrom(const CFriendMessages_SendMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_SendMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_SendMessage_Request::IsInitialized() const {
  return true;
}

void CFriendMessages_SendMessage_Request::InternalSwap(CFriendMessages_SendMessage_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &client_message_id_, lhs_arena,
      &other->client_message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFriendMessages_SendMessage_Request, low_priority_)
      + sizeof(CFriendMessages_SendMessage_Request::low_priority_)
      - PROTOBUF_FIELD_OFFSET(CFriendMessages_SendMessage_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendMessages_SendMessage_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[7]);
}

// ===================================================================

class CFriendMessages_SendMessage_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CFriendMessages_SendMessage_Response>()._has_bits_);
  static void set_has_modified_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message_without_bb_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CFriendMessages_SendMessage_Response::CFriendMessages_SendMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendMessages_SendMessage_Response)
}
CFriendMessages_SendMessage_Response::CFriendMessages_SendMessage_Response(const CFriendMessages_SendMessage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modified_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    modified_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_modified_message()) {
    modified_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modified_message(), 
      GetArenaForAllocation());
  }
  message_without_bb_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_without_bb_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message_without_bb_code()) {
    message_without_bb_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_without_bb_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&server_timestamp_, &from.server_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_SendMessage_Response)
}

inline void CFriendMessages_SendMessage_Response::SharedCtor() {
modified_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  modified_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_without_bb_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_without_bb_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ordinal_) -
    reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
}

CFriendMessages_SendMessage_Response::~CFriendMessages_SendMessage_Response() {
  // @@protoc_insertion_point(destructor:CFriendMessages_SendMessage_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendMessages_SendMessage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  modified_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_without_bb_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CFriendMessages_SendMessage_Response::ArenaDtor(void* object) {
  CFriendMessages_SendMessage_Response* _this = reinterpret_cast< CFriendMessages_SendMessage_Response* >(object);
  (void)_this;
}
void CFriendMessages_SendMessage_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendMessages_SendMessage_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendMessages_SendMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_SendMessage_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      modified_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_without_bb_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&server_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ordinal_) -
        reinterpret_cast<char*>(&server_timestamp_)) + sizeof(ordinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendMessages_SendMessage_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string modified_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_modified_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CFriendMessages_SendMessage_Response.modified_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_server_timestamp(&has_bits);
          server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message_without_bb_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message_without_bb_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CFriendMessages_SendMessage_Response.message_without_bb_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendMessages_SendMessage_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_SendMessage_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string modified_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_modified_message().data(), static_cast<int>(this->_internal_modified_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CFriendMessages_SendMessage_Response.modified_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_modified_message(), target);
  }

  // optional uint32 server_timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_timestamp(), target);
  }

  // optional uint32 ordinal = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ordinal(), target);
  }

  // optional string message_without_bb_code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_without_bb_code().data(), static_cast<int>(this->_internal_message_without_bb_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CFriendMessages_SendMessage_Response.message_without_bb_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message_without_bb_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_SendMessage_Response)
  return target;
}

size_t CFriendMessages_SendMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_SendMessage_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string modified_message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_modified_message());
    }

    // optional string message_without_bb_code = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_without_bb_code());
    }

    // optional uint32 server_timestamp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_timestamp());
    }

    // optional uint32 ordinal = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendMessages_SendMessage_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendMessages_SendMessage_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendMessages_SendMessage_Response::GetClassData() const { return &_class_data_; }

void CFriendMessages_SendMessage_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendMessages_SendMessage_Response *>(to)->MergeFrom(
      static_cast<const CFriendMessages_SendMessage_Response &>(from));
}


void CFriendMessages_SendMessage_Response::MergeFrom(const CFriendMessages_SendMessage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_SendMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_modified_message(from._internal_modified_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message_without_bb_code(from._internal_message_without_bb_code());
    }
    if (cached_has_bits & 0x00000004u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      ordinal_ = from.ordinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendMessages_SendMessage_Response::CopyFrom(const CFriendMessages_SendMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_SendMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_SendMessage_Response::IsInitialized() const {
  return true;
}

void CFriendMessages_SendMessage_Response::InternalSwap(CFriendMessages_SendMessage_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modified_message_, lhs_arena,
      &other->modified_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_without_bb_code_, lhs_arena,
      &other->message_without_bb_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFriendMessages_SendMessage_Response, ordinal_)
      + sizeof(CFriendMessages_SendMessage_Response::ordinal_)
      - PROTOBUF_FIELD_OFFSET(CFriendMessages_SendMessage_Response, server_timestamp_)>(
          reinterpret_cast<char*>(&server_timestamp_),
          reinterpret_cast<char*>(&other->server_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendMessages_SendMessage_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[8]);
}

// ===================================================================

class CFriendMessages_AckMessage_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CFriendMessages_AckMessage_Notification>()._has_bits_);
  static void set_has_steamid_partner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CFriendMessages_AckMessage_Notification::CFriendMessages_AckMessage_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendMessages_AckMessage_Notification)
}
CFriendMessages_AckMessage_Notification::CFriendMessages_AckMessage_Notification(const CFriendMessages_AckMessage_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_partner_, &from.steamid_partner_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&steamid_partner_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_AckMessage_Notification)
}

inline void CFriendMessages_AckMessage_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_partner_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&steamid_partner_)) + sizeof(timestamp_));
}

CFriendMessages_AckMessage_Notification::~CFriendMessages_AckMessage_Notification() {
  // @@protoc_insertion_point(destructor:CFriendMessages_AckMessage_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendMessages_AckMessage_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CFriendMessages_AckMessage_Notification::ArenaDtor(void* object) {
  CFriendMessages_AckMessage_Notification* _this = reinterpret_cast< CFriendMessages_AckMessage_Notification* >(object);
  (void)_this;
}
void CFriendMessages_AckMessage_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendMessages_AckMessage_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendMessages_AckMessage_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_AckMessage_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_partner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&steamid_partner_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendMessages_AckMessage_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid_partner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid_partner(&has_bits);
          steamid_partner_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendMessages_AckMessage_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_AckMessage_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_partner = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_partner(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_AckMessage_Notification)
  return target;
}

size_t CFriendMessages_AckMessage_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_AckMessage_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid_partner = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendMessages_AckMessage_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendMessages_AckMessage_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendMessages_AckMessage_Notification::GetClassData() const { return &_class_data_; }

void CFriendMessages_AckMessage_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendMessages_AckMessage_Notification *>(to)->MergeFrom(
      static_cast<const CFriendMessages_AckMessage_Notification &>(from));
}


void CFriendMessages_AckMessage_Notification::MergeFrom(const CFriendMessages_AckMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_AckMessage_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_partner_ = from.steamid_partner_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendMessages_AckMessage_Notification::CopyFrom(const CFriendMessages_AckMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_AckMessage_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_AckMessage_Notification::IsInitialized() const {
  return true;
}

void CFriendMessages_AckMessage_Notification::InternalSwap(CFriendMessages_AckMessage_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFriendMessages_AckMessage_Notification, timestamp_)
      + sizeof(CFriendMessages_AckMessage_Notification::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CFriendMessages_AckMessage_Notification, steamid_partner_)>(
          reinterpret_cast<char*>(&steamid_partner_),
          reinterpret_cast<char*>(&other->steamid_partner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendMessages_AckMessage_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[9]);
}

// ===================================================================

class CFriendMessages_IsInFriendsUIBeta_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CFriendMessages_IsInFriendsUIBeta_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CFriendMessages_IsInFriendsUIBeta_Request::CFriendMessages_IsInFriendsUIBeta_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendMessages_IsInFriendsUIBeta_Request)
}
CFriendMessages_IsInFriendsUIBeta_Request::CFriendMessages_IsInFriendsUIBeta_Request(const CFriendMessages_IsInFriendsUIBeta_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_IsInFriendsUIBeta_Request)
}

inline void CFriendMessages_IsInFriendsUIBeta_Request::SharedCtor() {
steamid_ = uint64_t{0u};
}

CFriendMessages_IsInFriendsUIBeta_Request::~CFriendMessages_IsInFriendsUIBeta_Request() {
  // @@protoc_insertion_point(destructor:CFriendMessages_IsInFriendsUIBeta_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendMessages_IsInFriendsUIBeta_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CFriendMessages_IsInFriendsUIBeta_Request::ArenaDtor(void* object) {
  CFriendMessages_IsInFriendsUIBeta_Request* _this = reinterpret_cast< CFriendMessages_IsInFriendsUIBeta_Request* >(object);
  (void)_this;
}
void CFriendMessages_IsInFriendsUIBeta_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendMessages_IsInFriendsUIBeta_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendMessages_IsInFriendsUIBeta_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_IsInFriendsUIBeta_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendMessages_IsInFriendsUIBeta_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendMessages_IsInFriendsUIBeta_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_IsInFriendsUIBeta_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_IsInFriendsUIBeta_Request)
  return target;
}

size_t CFriendMessages_IsInFriendsUIBeta_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_IsInFriendsUIBeta_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendMessages_IsInFriendsUIBeta_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendMessages_IsInFriendsUIBeta_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendMessages_IsInFriendsUIBeta_Request::GetClassData() const { return &_class_data_; }

void CFriendMessages_IsInFriendsUIBeta_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendMessages_IsInFriendsUIBeta_Request *>(to)->MergeFrom(
      static_cast<const CFriendMessages_IsInFriendsUIBeta_Request &>(from));
}


void CFriendMessages_IsInFriendsUIBeta_Request::MergeFrom(const CFriendMessages_IsInFriendsUIBeta_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_IsInFriendsUIBeta_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendMessages_IsInFriendsUIBeta_Request::CopyFrom(const CFriendMessages_IsInFriendsUIBeta_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_IsInFriendsUIBeta_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_IsInFriendsUIBeta_Request::IsInitialized() const {
  return true;
}

void CFriendMessages_IsInFriendsUIBeta_Request::InternalSwap(CFriendMessages_IsInFriendsUIBeta_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendMessages_IsInFriendsUIBeta_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[10]);
}

// ===================================================================

class CFriendMessages_IsInFriendsUIBeta_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CFriendMessages_IsInFriendsUIBeta_Response>()._has_bits_);
  static void set_has_online_in_friendsui(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_used_friendsui(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CFriendMessages_IsInFriendsUIBeta_Response::CFriendMessages_IsInFriendsUIBeta_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendMessages_IsInFriendsUIBeta_Response)
}
CFriendMessages_IsInFriendsUIBeta_Response::CFriendMessages_IsInFriendsUIBeta_Response(const CFriendMessages_IsInFriendsUIBeta_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&online_in_friendsui_, &from.online_in_friendsui_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_used_friendsui_) -
    reinterpret_cast<char*>(&online_in_friendsui_)) + sizeof(has_used_friendsui_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_IsInFriendsUIBeta_Response)
}

inline void CFriendMessages_IsInFriendsUIBeta_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&online_in_friendsui_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_used_friendsui_) -
    reinterpret_cast<char*>(&online_in_friendsui_)) + sizeof(has_used_friendsui_));
}

CFriendMessages_IsInFriendsUIBeta_Response::~CFriendMessages_IsInFriendsUIBeta_Response() {
  // @@protoc_insertion_point(destructor:CFriendMessages_IsInFriendsUIBeta_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendMessages_IsInFriendsUIBeta_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CFriendMessages_IsInFriendsUIBeta_Response::ArenaDtor(void* object) {
  CFriendMessages_IsInFriendsUIBeta_Response* _this = reinterpret_cast< CFriendMessages_IsInFriendsUIBeta_Response* >(object);
  (void)_this;
}
void CFriendMessages_IsInFriendsUIBeta_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendMessages_IsInFriendsUIBeta_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendMessages_IsInFriendsUIBeta_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_IsInFriendsUIBeta_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&online_in_friendsui_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_used_friendsui_) -
      reinterpret_cast<char*>(&online_in_friendsui_)) + sizeof(has_used_friendsui_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendMessages_IsInFriendsUIBeta_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool online_in_friendsui = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_online_in_friendsui(&has_bits);
          online_in_friendsui_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_used_friendsui = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_has_used_friendsui(&has_bits);
          has_used_friendsui_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendMessages_IsInFriendsUIBeta_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_IsInFriendsUIBeta_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool online_in_friendsui = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_online_in_friendsui(), target);
  }

  // optional bool has_used_friendsui = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_has_used_friendsui(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_IsInFriendsUIBeta_Response)
  return target;
}

size_t CFriendMessages_IsInFriendsUIBeta_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_IsInFriendsUIBeta_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool online_in_friendsui = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool has_used_friendsui = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendMessages_IsInFriendsUIBeta_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendMessages_IsInFriendsUIBeta_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendMessages_IsInFriendsUIBeta_Response::GetClassData() const { return &_class_data_; }

void CFriendMessages_IsInFriendsUIBeta_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendMessages_IsInFriendsUIBeta_Response *>(to)->MergeFrom(
      static_cast<const CFriendMessages_IsInFriendsUIBeta_Response &>(from));
}


void CFriendMessages_IsInFriendsUIBeta_Response::MergeFrom(const CFriendMessages_IsInFriendsUIBeta_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_IsInFriendsUIBeta_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      online_in_friendsui_ = from.online_in_friendsui_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_used_friendsui_ = from.has_used_friendsui_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendMessages_IsInFriendsUIBeta_Response::CopyFrom(const CFriendMessages_IsInFriendsUIBeta_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_IsInFriendsUIBeta_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_IsInFriendsUIBeta_Response::IsInitialized() const {
  return true;
}

void CFriendMessages_IsInFriendsUIBeta_Response::InternalSwap(CFriendMessages_IsInFriendsUIBeta_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFriendMessages_IsInFriendsUIBeta_Response, has_used_friendsui_)
      + sizeof(CFriendMessages_IsInFriendsUIBeta_Response::has_used_friendsui_)
      - PROTOBUF_FIELD_OFFSET(CFriendMessages_IsInFriendsUIBeta_Response, online_in_friendsui_)>(
          reinterpret_cast<char*>(&online_in_friendsui_),
          reinterpret_cast<char*>(&other->online_in_friendsui_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendMessages_IsInFriendsUIBeta_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[11]);
}

// ===================================================================

class CFriendMessages_UpdateMessageReaction_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CFriendMessages_UpdateMessageReaction_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reaction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reaction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_add(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CFriendMessages_UpdateMessageReaction_Request::CFriendMessages_UpdateMessageReaction_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendMessages_UpdateMessageReaction_Request)
}
CFriendMessages_UpdateMessageReaction_Request::CFriendMessages_UpdateMessageReaction_Request(const CFriendMessages_UpdateMessageReaction_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reaction()) {
    reaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reaction(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_add_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(is_add_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_UpdateMessageReaction_Request)
}

inline void CFriendMessages_UpdateMessageReaction_Request::SharedCtor() {
reaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_add_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(is_add_));
}

CFriendMessages_UpdateMessageReaction_Request::~CFriendMessages_UpdateMessageReaction_Request() {
  // @@protoc_insertion_point(destructor:CFriendMessages_UpdateMessageReaction_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendMessages_UpdateMessageReaction_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CFriendMessages_UpdateMessageReaction_Request::ArenaDtor(void* object) {
  CFriendMessages_UpdateMessageReaction_Request* _this = reinterpret_cast< CFriendMessages_UpdateMessageReaction_Request* >(object);
  (void)_this;
}
void CFriendMessages_UpdateMessageReaction_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendMessages_UpdateMessageReaction_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendMessages_UpdateMessageReaction_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_UpdateMessageReaction_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reaction_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_add_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(is_add_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendMessages_UpdateMessageReaction_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_server_timestamp(&has_bits);
          server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EMessageReactionType reaction_type = 4 [default = k_EMessageReactionType_Invalid];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMessageReactionType_IsValid(val))) {
            _internal_set_reaction_type(static_cast<::EMessageReactionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string reaction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_reaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CFriendMessages_UpdateMessageReaction_Request.reaction");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_add = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_add(&has_bits);
          is_add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendMessages_UpdateMessageReaction_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_UpdateMessageReaction_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 server_timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_timestamp(), target);
  }

  // optional uint32 ordinal = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ordinal(), target);
  }

  // optional .EMessageReactionType reaction_type = 4 [default = k_EMessageReactionType_Invalid];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_reaction_type(), target);
  }

  // optional string reaction = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reaction().data(), static_cast<int>(this->_internal_reaction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CFriendMessages_UpdateMessageReaction_Request.reaction");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reaction(), target);
  }

  // optional bool is_add = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_add(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_UpdateMessageReaction_Request)
  return target;
}

size_t CFriendMessages_UpdateMessageReaction_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_UpdateMessageReaction_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string reaction = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reaction());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 server_timestamp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_timestamp());
    }

    // optional uint32 ordinal = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

    // optional .EMessageReactionType reaction_type = 4 [default = k_EMessageReactionType_Invalid];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reaction_type());
    }

    // optional bool is_add = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendMessages_UpdateMessageReaction_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendMessages_UpdateMessageReaction_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendMessages_UpdateMessageReaction_Request::GetClassData() const { return &_class_data_; }

void CFriendMessages_UpdateMessageReaction_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendMessages_UpdateMessageReaction_Request *>(to)->MergeFrom(
      static_cast<const CFriendMessages_UpdateMessageReaction_Request &>(from));
}


void CFriendMessages_UpdateMessageReaction_Request::MergeFrom(const CFriendMessages_UpdateMessageReaction_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_UpdateMessageReaction_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reaction(from._internal_reaction());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      ordinal_ = from.ordinal_;
    }
    if (cached_has_bits & 0x00000010u) {
      reaction_type_ = from.reaction_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_add_ = from.is_add_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendMessages_UpdateMessageReaction_Request::CopyFrom(const CFriendMessages_UpdateMessageReaction_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_UpdateMessageReaction_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_UpdateMessageReaction_Request::IsInitialized() const {
  return true;
}

void CFriendMessages_UpdateMessageReaction_Request::InternalSwap(CFriendMessages_UpdateMessageReaction_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reaction_, lhs_arena,
      &other->reaction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFriendMessages_UpdateMessageReaction_Request, is_add_)
      + sizeof(CFriendMessages_UpdateMessageReaction_Request::is_add_)
      - PROTOBUF_FIELD_OFFSET(CFriendMessages_UpdateMessageReaction_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendMessages_UpdateMessageReaction_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[12]);
}

// ===================================================================

class CFriendMessages_UpdateMessageReaction_Response::_Internal {
 public:
};

CFriendMessages_UpdateMessageReaction_Response::CFriendMessages_UpdateMessageReaction_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  reactors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendMessages_UpdateMessageReaction_Response)
}
CFriendMessages_UpdateMessageReaction_Response::CFriendMessages_UpdateMessageReaction_Response(const CFriendMessages_UpdateMessageReaction_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reactors_(from.reactors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_UpdateMessageReaction_Response)
}

inline void CFriendMessages_UpdateMessageReaction_Response::SharedCtor() {
}

CFriendMessages_UpdateMessageReaction_Response::~CFriendMessages_UpdateMessageReaction_Response() {
  // @@protoc_insertion_point(destructor:CFriendMessages_UpdateMessageReaction_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendMessages_UpdateMessageReaction_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CFriendMessages_UpdateMessageReaction_Response::ArenaDtor(void* object) {
  CFriendMessages_UpdateMessageReaction_Response* _this = reinterpret_cast< CFriendMessages_UpdateMessageReaction_Response* >(object);
  (void)_this;
}
void CFriendMessages_UpdateMessageReaction_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendMessages_UpdateMessageReaction_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendMessages_UpdateMessageReaction_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_UpdateMessageReaction_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reactors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendMessages_UpdateMessageReaction_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 reactors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_reactors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_reactors(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendMessages_UpdateMessageReaction_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_UpdateMessageReaction_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 reactors = 1;
  for (int i = 0, n = this->_internal_reactors_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reactors(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_UpdateMessageReaction_Response)
  return target;
}

size_t CFriendMessages_UpdateMessageReaction_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_UpdateMessageReaction_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 reactors = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->reactors_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reactors_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendMessages_UpdateMessageReaction_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendMessages_UpdateMessageReaction_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendMessages_UpdateMessageReaction_Response::GetClassData() const { return &_class_data_; }

void CFriendMessages_UpdateMessageReaction_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendMessages_UpdateMessageReaction_Response *>(to)->MergeFrom(
      static_cast<const CFriendMessages_UpdateMessageReaction_Response &>(from));
}


void CFriendMessages_UpdateMessageReaction_Response::MergeFrom(const CFriendMessages_UpdateMessageReaction_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_UpdateMessageReaction_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  reactors_.MergeFrom(from.reactors_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendMessages_UpdateMessageReaction_Response::CopyFrom(const CFriendMessages_UpdateMessageReaction_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_UpdateMessageReaction_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_UpdateMessageReaction_Response::IsInitialized() const {
  return true;
}

void CFriendMessages_UpdateMessageReaction_Response::InternalSwap(CFriendMessages_UpdateMessageReaction_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  reactors_.InternalSwap(&other->reactors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendMessages_UpdateMessageReaction_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[13]);
}

// ===================================================================

class CFriendMessages_IncomingMessage_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CFriendMessages_IncomingMessage_Notification>()._has_bits_);
  static void set_has_steamid_friend(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chat_entry_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_from_limited_account(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rtime32_server_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_local_echo(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_message_no_bbcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_low_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CFriendMessages_IncomingMessage_Notification::CFriendMessages_IncomingMessage_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendMessages_IncomingMessage_Notification)
}
CFriendMessages_IncomingMessage_Notification::CFriendMessages_IncomingMessage_Notification(const CFriendMessages_IncomingMessage_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  message_no_bbcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_no_bbcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message_no_bbcode()) {
    message_no_bbcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_no_bbcode(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_friend_, &from.steamid_friend_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_priority_) -
    reinterpret_cast<char*>(&steamid_friend_)) + sizeof(low_priority_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_IncomingMessage_Notification)
}

inline void CFriendMessages_IncomingMessage_Notification::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_no_bbcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_no_bbcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_friend_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&low_priority_) -
    reinterpret_cast<char*>(&steamid_friend_)) + sizeof(low_priority_));
}

CFriendMessages_IncomingMessage_Notification::~CFriendMessages_IncomingMessage_Notification() {
  // @@protoc_insertion_point(destructor:CFriendMessages_IncomingMessage_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendMessages_IncomingMessage_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_no_bbcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CFriendMessages_IncomingMessage_Notification::ArenaDtor(void* object) {
  CFriendMessages_IncomingMessage_Notification* _this = reinterpret_cast< CFriendMessages_IncomingMessage_Notification* >(object);
  (void)_this;
}
void CFriendMessages_IncomingMessage_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendMessages_IncomingMessage_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendMessages_IncomingMessage_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_IncomingMessage_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_no_bbcode_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&steamid_friend_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&local_echo_) -
        reinterpret_cast<char*>(&steamid_friend_)) + sizeof(local_echo_));
  }
  low_priority_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendMessages_IncomingMessage_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid_friend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid_friend(&has_bits);
          steamid_friend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 chat_entry_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_chat_entry_type(&has_bits);
          chat_entry_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool from_limited_account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_from_limited_account(&has_bits);
          from_limited_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CFriendMessages_IncomingMessage_Notification.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 rtime32_server_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_rtime32_server_timestamp(&has_bits);
          rtime32_server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool local_echo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_local_echo(&has_bits);
          local_echo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message_no_bbcode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_message_no_bbcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CFriendMessages_IncomingMessage_Notification.message_no_bbcode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool low_priority = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_low_priority(&has_bits);
          low_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendMessages_IncomingMessage_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_IncomingMessage_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_friend = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_friend(), target);
  }

  // optional int32 chat_entry_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chat_entry_type(), target);
  }

  // optional bool from_limited_account = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_from_limited_account(), target);
  }

  // optional string message = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CFriendMessages_IncomingMessage_Notification.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // optional fixed32 rtime32_server_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_rtime32_server_timestamp(), target);
  }

  // optional uint32 ordinal = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ordinal(), target);
  }

  // optional bool local_echo = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_local_echo(), target);
  }

  // optional string message_no_bbcode = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_no_bbcode().data(), static_cast<int>(this->_internal_message_no_bbcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CFriendMessages_IncomingMessage_Notification.message_no_bbcode");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_message_no_bbcode(), target);
  }

  // optional bool low_priority = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_low_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_IncomingMessage_Notification)
  return target;
}

size_t CFriendMessages_IncomingMessage_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_IncomingMessage_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string message = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string message_no_bbcode = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_no_bbcode());
    }

    // optional fixed64 steamid_friend = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 chat_entry_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_chat_entry_type());
    }

    // optional fixed32 rtime32_server_timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 ordinal = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

    // optional bool from_limited_account = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool local_echo = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool low_priority = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendMessages_IncomingMessage_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendMessages_IncomingMessage_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendMessages_IncomingMessage_Notification::GetClassData() const { return &_class_data_; }

void CFriendMessages_IncomingMessage_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendMessages_IncomingMessage_Notification *>(to)->MergeFrom(
      static_cast<const CFriendMessages_IncomingMessage_Notification &>(from));
}


void CFriendMessages_IncomingMessage_Notification::MergeFrom(const CFriendMessages_IncomingMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_IncomingMessage_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message_no_bbcode(from._internal_message_no_bbcode());
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_friend_ = from.steamid_friend_;
    }
    if (cached_has_bits & 0x00000008u) {
      chat_entry_type_ = from.chat_entry_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      rtime32_server_timestamp_ = from.rtime32_server_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      ordinal_ = from.ordinal_;
    }
    if (cached_has_bits & 0x00000040u) {
      from_limited_account_ = from.from_limited_account_;
    }
    if (cached_has_bits & 0x00000080u) {
      local_echo_ = from.local_echo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_low_priority(from._internal_low_priority());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendMessages_IncomingMessage_Notification::CopyFrom(const CFriendMessages_IncomingMessage_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_IncomingMessage_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_IncomingMessage_Notification::IsInitialized() const {
  return true;
}

void CFriendMessages_IncomingMessage_Notification::InternalSwap(CFriendMessages_IncomingMessage_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_no_bbcode_, lhs_arena,
      &other->message_no_bbcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFriendMessages_IncomingMessage_Notification, low_priority_)
      + sizeof(CFriendMessages_IncomingMessage_Notification::low_priority_)
      - PROTOBUF_FIELD_OFFSET(CFriendMessages_IncomingMessage_Notification, steamid_friend_)>(
          reinterpret_cast<char*>(&steamid_friend_),
          reinterpret_cast<char*>(&other->steamid_friend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendMessages_IncomingMessage_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[14]);
}

// ===================================================================

class CFriendMessages_MessageReaction_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CFriendMessages_MessageReaction_Notification>()._has_bits_);
  static void set_has_steamid_friend(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ordinal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reactor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reaction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_reaction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_add(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CFriendMessages_MessageReaction_Notification::CFriendMessages_MessageReaction_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CFriendMessages_MessageReaction_Notification)
}
CFriendMessages_MessageReaction_Notification::CFriendMessages_MessageReaction_Notification(const CFriendMessages_MessageReaction_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reaction()) {
    reaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reaction(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_friend_, &from.steamid_friend_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_add_) -
    reinterpret_cast<char*>(&steamid_friend_)) + sizeof(is_add_));
  // @@protoc_insertion_point(copy_constructor:CFriendMessages_MessageReaction_Notification)
}

inline void CFriendMessages_MessageReaction_Notification::SharedCtor() {
reaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_friend_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_add_) -
    reinterpret_cast<char*>(&steamid_friend_)) + sizeof(is_add_));
}

CFriendMessages_MessageReaction_Notification::~CFriendMessages_MessageReaction_Notification() {
  // @@protoc_insertion_point(destructor:CFriendMessages_MessageReaction_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CFriendMessages_MessageReaction_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CFriendMessages_MessageReaction_Notification::ArenaDtor(void* object) {
  CFriendMessages_MessageReaction_Notification* _this = reinterpret_cast< CFriendMessages_MessageReaction_Notification* >(object);
  (void)_this;
}
void CFriendMessages_MessageReaction_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CFriendMessages_MessageReaction_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CFriendMessages_MessageReaction_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CFriendMessages_MessageReaction_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reaction_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&steamid_friend_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_add_) -
        reinterpret_cast<char*>(&steamid_friend_)) + sizeof(is_add_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CFriendMessages_MessageReaction_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid_friend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid_friend(&has_bits);
          steamid_friend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_server_timestamp(&has_bits);
          server_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ordinal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ordinal(&has_bits);
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 reactor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_reactor(&has_bits);
          reactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .EMessageReactionType reaction_type = 5 [default = k_EMessageReactionType_Invalid];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMessageReactionType_IsValid(val))) {
            _internal_set_reaction_type(static_cast<::EMessageReactionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string reaction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_reaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CFriendMessages_MessageReaction_Notification.reaction");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_add = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_add(&has_bits);
          is_add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CFriendMessages_MessageReaction_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CFriendMessages_MessageReaction_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_friend = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_friend(), target);
  }

  // optional uint32 server_timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_timestamp(), target);
  }

  // optional uint32 ordinal = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ordinal(), target);
  }

  // optional fixed64 reactor = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_reactor(), target);
  }

  // optional .EMessageReactionType reaction_type = 5 [default = k_EMessageReactionType_Invalid];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_reaction_type(), target);
  }

  // optional string reaction = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reaction().data(), static_cast<int>(this->_internal_reaction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CFriendMessages_MessageReaction_Notification.reaction");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_reaction(), target);
  }

  // optional bool is_add = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_add(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CFriendMessages_MessageReaction_Notification)
  return target;
}

size_t CFriendMessages_MessageReaction_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CFriendMessages_MessageReaction_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string reaction = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reaction());
    }

    // optional fixed64 steamid_friend = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 server_timestamp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_timestamp());
    }

    // optional uint32 ordinal = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ordinal());
    }

    // optional fixed64 reactor = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .EMessageReactionType reaction_type = 5 [default = k_EMessageReactionType_Invalid];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reaction_type());
    }

    // optional bool is_add = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CFriendMessages_MessageReaction_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CFriendMessages_MessageReaction_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CFriendMessages_MessageReaction_Notification::GetClassData() const { return &_class_data_; }

void CFriendMessages_MessageReaction_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CFriendMessages_MessageReaction_Notification *>(to)->MergeFrom(
      static_cast<const CFriendMessages_MessageReaction_Notification &>(from));
}


void CFriendMessages_MessageReaction_Notification::MergeFrom(const CFriendMessages_MessageReaction_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CFriendMessages_MessageReaction_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reaction(from._internal_reaction());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_friend_ = from.steamid_friend_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_timestamp_ = from.server_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      ordinal_ = from.ordinal_;
    }
    if (cached_has_bits & 0x00000010u) {
      reactor_ = from.reactor_;
    }
    if (cached_has_bits & 0x00000020u) {
      reaction_type_ = from.reaction_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_add_ = from.is_add_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CFriendMessages_MessageReaction_Notification::CopyFrom(const CFriendMessages_MessageReaction_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CFriendMessages_MessageReaction_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFriendMessages_MessageReaction_Notification::IsInitialized() const {
  return true;
}

void CFriendMessages_MessageReaction_Notification::InternalSwap(CFriendMessages_MessageReaction_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reaction_, lhs_arena,
      &other->reaction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CFriendMessages_MessageReaction_Notification, is_add_)
      + sizeof(CFriendMessages_MessageReaction_Notification::is_add_)
      - PROTOBUF_FIELD_OFFSET(CFriendMessages_MessageReaction_Notification, steamid_friend_)>(
          reinterpret_cast<char*>(&steamid_friend_),
          reinterpret_cast<char*>(&other->steamid_friend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CFriendMessages_MessageReaction_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5ffriendmessages_2esteamclient_2eproto[15]);
}

// ===================================================================

FriendMessages::~FriendMessages() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FriendMessages::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5ffriendmessages_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FriendMessages::GetDescriptor() {
  return descriptor();
}

void FriendMessages::GetRecentMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CFriendMessages_GetRecentMessages_Request*,
                         ::CFriendMessages_GetRecentMessages_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetRecentMessages() not implemented.");
  done->Run();
}

void FriendMessages::GetActiveMessageSessions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CFriendsMessages_GetActiveMessageSessions_Request*,
                         ::CFriendsMessages_GetActiveMessageSessions_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetActiveMessageSessions() not implemented.");
  done->Run();
}

void FriendMessages::SendMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CFriendMessages_SendMessage_Request*,
                         ::CFriendMessages_SendMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendMessage() not implemented.");
  done->Run();
}

void FriendMessages::AckMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CFriendMessages_AckMessage_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AckMessage() not implemented.");
  done->Run();
}

void FriendMessages::IsInFriendsUIBeta(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CFriendMessages_IsInFriendsUIBeta_Request*,
                         ::CFriendMessages_IsInFriendsUIBeta_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IsInFriendsUIBeta() not implemented.");
  done->Run();
}

void FriendMessages::UpdateMessageReaction(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CFriendMessages_UpdateMessageReaction_Request*,
                         ::CFriendMessages_UpdateMessageReaction_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateMessageReaction() not implemented.");
  done->Run();
}

void FriendMessages::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5ffriendmessages_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetRecentMessages(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CFriendMessages_GetRecentMessages_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CFriendMessages_GetRecentMessages_Response*>(
                 response),
             done);
      break;
    case 1:
      GetActiveMessageSessions(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CFriendsMessages_GetActiveMessageSessions_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CFriendsMessages_GetActiveMessageSessions_Response*>(
                 response),
             done);
      break;
    case 2:
      SendMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CFriendMessages_SendMessage_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CFriendMessages_SendMessage_Response*>(
                 response),
             done);
      break;
    case 3:
      AckMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CFriendMessages_AckMessage_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 4:
      IsInFriendsUIBeta(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CFriendMessages_IsInFriendsUIBeta_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CFriendMessages_IsInFriendsUIBeta_Response*>(
                 response),
             done);
      break;
    case 5:
      UpdateMessageReaction(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CFriendMessages_UpdateMessageReaction_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CFriendMessages_UpdateMessageReaction_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FriendMessages::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CFriendMessages_GetRecentMessages_Request::default_instance();
    case 1:
      return ::CFriendsMessages_GetActiveMessageSessions_Request::default_instance();
    case 2:
      return ::CFriendMessages_SendMessage_Request::default_instance();
    case 3:
      return ::CFriendMessages_AckMessage_Notification::default_instance();
    case 4:
      return ::CFriendMessages_IsInFriendsUIBeta_Request::default_instance();
    case 5:
      return ::CFriendMessages_UpdateMessageReaction_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FriendMessages::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CFriendMessages_GetRecentMessages_Response::default_instance();
    case 1:
      return ::CFriendsMessages_GetActiveMessageSessions_Response::default_instance();
    case 2:
      return ::CFriendMessages_SendMessage_Response::default_instance();
    case 3:
      return ::NoResponse::default_instance();
    case 4:
      return ::CFriendMessages_IsInFriendsUIBeta_Response::default_instance();
    case 5:
      return ::CFriendMessages_UpdateMessageReaction_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FriendMessages_Stub::FriendMessages_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FriendMessages_Stub::FriendMessages_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
FriendMessages_Stub::~FriendMessages_Stub() {
  if (owns_channel_) delete channel_;
}

void FriendMessages_Stub::GetRecentMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CFriendMessages_GetRecentMessages_Request* request,
                              ::CFriendMessages_GetRecentMessages_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FriendMessages_Stub::GetActiveMessageSessions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CFriendsMessages_GetActiveMessageSessions_Request* request,
                              ::CFriendsMessages_GetActiveMessageSessions_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FriendMessages_Stub::SendMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CFriendMessages_SendMessage_Request* request,
                              ::CFriendMessages_SendMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void FriendMessages_Stub::AckMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CFriendMessages_AckMessage_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void FriendMessages_Stub::IsInFriendsUIBeta(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CFriendMessages_IsInFriendsUIBeta_Request* request,
                              ::CFriendMessages_IsInFriendsUIBeta_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void FriendMessages_Stub::UpdateMessageReaction(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CFriendMessages_UpdateMessageReaction_Request* request,
                              ::CFriendMessages_UpdateMessageReaction_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
// ===================================================================

FriendMessagesClient::~FriendMessagesClient() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FriendMessagesClient::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5ffriendmessages_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5ffriendmessages_2esteamclient_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FriendMessagesClient::GetDescriptor() {
  return descriptor();
}

void FriendMessagesClient::IncomingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CFriendMessages_IncomingMessage_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IncomingMessage() not implemented.");
  done->Run();
}

void FriendMessagesClient::NotifyAckMessageEcho(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CFriendMessages_AckMessage_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyAckMessageEcho() not implemented.");
  done->Run();
}

void FriendMessagesClient::MessageReaction(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CFriendMessages_MessageReaction_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MessageReaction() not implemented.");
  done->Run();
}

void FriendMessagesClient::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5ffriendmessages_2esteamclient_2eproto[1]);
  switch(method->index()) {
    case 0:
      IncomingMessage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CFriendMessages_IncomingMessage_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 1:
      NotifyAckMessageEcho(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CFriendMessages_AckMessage_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 2:
      MessageReaction(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CFriendMessages_MessageReaction_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FriendMessagesClient::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CFriendMessages_IncomingMessage_Notification::default_instance();
    case 1:
      return ::CFriendMessages_AckMessage_Notification::default_instance();
    case 2:
      return ::CFriendMessages_MessageReaction_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FriendMessagesClient::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    case 2:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FriendMessagesClient_Stub::FriendMessagesClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FriendMessagesClient_Stub::FriendMessagesClient_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
FriendMessagesClient_Stub::~FriendMessagesClient_Stub() {
  if (owns_channel_) delete channel_;
}

void FriendMessagesClient_Stub::IncomingMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CFriendMessages_IncomingMessage_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FriendMessagesClient_Stub::NotifyAckMessageEcho(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CFriendMessages_AckMessage_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FriendMessagesClient_Stub::MessageReaction(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CFriendMessages_MessageReaction_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CFriendMessages_GetRecentMessages_Request* Arena::CreateMaybeMessage< ::CFriendMessages_GetRecentMessages_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendMessages_GetRecentMessages_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction* Arena::CreateMaybeMessage< ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction >(arena);
}
template<> PROTOBUF_NOINLINE ::CFriendMessages_GetRecentMessages_Response_FriendMessage* Arena::CreateMaybeMessage< ::CFriendMessages_GetRecentMessages_Response_FriendMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendMessages_GetRecentMessages_Response_FriendMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CFriendMessages_GetRecentMessages_Response* Arena::CreateMaybeMessage< ::CFriendMessages_GetRecentMessages_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendMessages_GetRecentMessages_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CFriendsMessages_GetActiveMessageSessions_Request* Arena::CreateMaybeMessage< ::CFriendsMessages_GetActiveMessageSessions_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendsMessages_GetActiveMessageSessions_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession* Arena::CreateMaybeMessage< ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession >(arena);
}
template<> PROTOBUF_NOINLINE ::CFriendsMessages_GetActiveMessageSessions_Response* Arena::CreateMaybeMessage< ::CFriendsMessages_GetActiveMessageSessions_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendsMessages_GetActiveMessageSessions_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CFriendMessages_SendMessage_Request* Arena::CreateMaybeMessage< ::CFriendMessages_SendMessage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendMessages_SendMessage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CFriendMessages_SendMessage_Response* Arena::CreateMaybeMessage< ::CFriendMessages_SendMessage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendMessages_SendMessage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CFriendMessages_AckMessage_Notification* Arena::CreateMaybeMessage< ::CFriendMessages_AckMessage_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendMessages_AckMessage_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CFriendMessages_IsInFriendsUIBeta_Request* Arena::CreateMaybeMessage< ::CFriendMessages_IsInFriendsUIBeta_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendMessages_IsInFriendsUIBeta_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CFriendMessages_IsInFriendsUIBeta_Response* Arena::CreateMaybeMessage< ::CFriendMessages_IsInFriendsUIBeta_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendMessages_IsInFriendsUIBeta_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CFriendMessages_UpdateMessageReaction_Request* Arena::CreateMaybeMessage< ::CFriendMessages_UpdateMessageReaction_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendMessages_UpdateMessageReaction_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CFriendMessages_UpdateMessageReaction_Response* Arena::CreateMaybeMessage< ::CFriendMessages_UpdateMessageReaction_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendMessages_UpdateMessageReaction_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CFriendMessages_IncomingMessage_Notification* Arena::CreateMaybeMessage< ::CFriendMessages_IncomingMessage_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendMessages_IncomingMessage_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CFriendMessages_MessageReaction_Notification* Arena::CreateMaybeMessage< ::CFriendMessages_MessageReaction_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CFriendMessages_MessageReaction_Notification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
