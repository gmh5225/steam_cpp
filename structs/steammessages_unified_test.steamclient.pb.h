// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_unified_test.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5funified_5ftest_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5funified_5ftest_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5funified_5ftest_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5funified_5ftest_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5funified_5ftest_2esteamclient_2eproto;
class CMsgTest_CallClient_Response;
struct CMsgTest_CallClient_ResponseDefaultTypeInternal;
extern CMsgTest_CallClient_ResponseDefaultTypeInternal _CMsgTest_CallClient_Response_default_instance_;
class CMsgTest_MessageToClient_Request;
struct CMsgTest_MessageToClient_RequestDefaultTypeInternal;
extern CMsgTest_MessageToClient_RequestDefaultTypeInternal _CMsgTest_MessageToClient_Request_default_instance_;
class CMsgTest_MessageToClient_Response;
struct CMsgTest_MessageToClient_ResponseDefaultTypeInternal;
extern CMsgTest_MessageToClient_ResponseDefaultTypeInternal _CMsgTest_MessageToClient_Response_default_instance_;
class CMsgTest_MessageToServer_Request;
struct CMsgTest_MessageToServer_RequestDefaultTypeInternal;
extern CMsgTest_MessageToServer_RequestDefaultTypeInternal _CMsgTest_MessageToServer_Request_default_instance_;
class CMsgTest_MessageToServer_Response;
struct CMsgTest_MessageToServer_ResponseDefaultTypeInternal;
extern CMsgTest_MessageToServer_ResponseDefaultTypeInternal _CMsgTest_MessageToServer_Response_default_instance_;
class CMsgTest_NoBody_Request;
struct CMsgTest_NoBody_RequestDefaultTypeInternal;
extern CMsgTest_NoBody_RequestDefaultTypeInternal _CMsgTest_NoBody_Request_default_instance_;
class CMsgTest_NotifyClient_Notification;
struct CMsgTest_NotifyClient_NotificationDefaultTypeInternal;
extern CMsgTest_NotifyClient_NotificationDefaultTypeInternal _CMsgTest_NotifyClient_Notification_default_instance_;
class CMsgTest_NotifyServer_Notification;
struct CMsgTest_NotifyServer_NotificationDefaultTypeInternal;
extern CMsgTest_NotifyServer_NotificationDefaultTypeInternal _CMsgTest_NotifyServer_Notification_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgTest_CallClient_Response* Arena::CreateMaybeMessage<::CMsgTest_CallClient_Response>(Arena*);
template<> ::CMsgTest_MessageToClient_Request* Arena::CreateMaybeMessage<::CMsgTest_MessageToClient_Request>(Arena*);
template<> ::CMsgTest_MessageToClient_Response* Arena::CreateMaybeMessage<::CMsgTest_MessageToClient_Response>(Arena*);
template<> ::CMsgTest_MessageToServer_Request* Arena::CreateMaybeMessage<::CMsgTest_MessageToServer_Request>(Arena*);
template<> ::CMsgTest_MessageToServer_Response* Arena::CreateMaybeMessage<::CMsgTest_MessageToServer_Response>(Arena*);
template<> ::CMsgTest_NoBody_Request* Arena::CreateMaybeMessage<::CMsgTest_NoBody_Request>(Arena*);
template<> ::CMsgTest_NotifyClient_Notification* Arena::CreateMaybeMessage<::CMsgTest_NotifyClient_Notification>(Arena*);
template<> ::CMsgTest_NotifyServer_Notification* Arena::CreateMaybeMessage<::CMsgTest_NotifyServer_Notification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CMsgTest_MessageToClient_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTest_MessageToClient_Request) */ {
 public:
  inline CMsgTest_MessageToClient_Request() : CMsgTest_MessageToClient_Request(nullptr) {}
  ~CMsgTest_MessageToClient_Request() override;
  explicit constexpr CMsgTest_MessageToClient_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTest_MessageToClient_Request(const CMsgTest_MessageToClient_Request& from);
  CMsgTest_MessageToClient_Request(CMsgTest_MessageToClient_Request&& from) noexcept
    : CMsgTest_MessageToClient_Request() {
    *this = ::std::move(from);
  }

  inline CMsgTest_MessageToClient_Request& operator=(const CMsgTest_MessageToClient_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTest_MessageToClient_Request& operator=(CMsgTest_MessageToClient_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTest_MessageToClient_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTest_MessageToClient_Request* internal_default_instance() {
    return reinterpret_cast<const CMsgTest_MessageToClient_Request*>(
               &_CMsgTest_MessageToClient_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgTest_MessageToClient_Request& a, CMsgTest_MessageToClient_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTest_MessageToClient_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTest_MessageToClient_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTest_MessageToClient_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTest_MessageToClient_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTest_MessageToClient_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgTest_MessageToClient_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTest_MessageToClient_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTest_MessageToClient_Request";
  }
  protected:
  explicit CMsgTest_MessageToClient_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSomeTextFieldNumber = 1,
  };
  // optional string some_text = 1 [(.description) = "Some string."];
  bool has_some_text() const;
  private:
  bool _internal_has_some_text() const;
  public:
  void clear_some_text();
  const std::string& some_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_some_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_some_text();
  PROTOBUF_NODISCARD std::string* release_some_text();
  void set_allocated_some_text(std::string* some_text);
  private:
  const std::string& _internal_some_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_some_text(const std::string& value);
  std::string* _internal_mutable_some_text();
  public:

  // @@protoc_insertion_point(class_scope:CMsgTest_MessageToClient_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr some_text_;
  friend struct ::TableStruct_steammessages_5funified_5ftest_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgTest_MessageToClient_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTest_MessageToClient_Response) */ {
 public:
  inline CMsgTest_MessageToClient_Response() : CMsgTest_MessageToClient_Response(nullptr) {}
  ~CMsgTest_MessageToClient_Response() override;
  explicit constexpr CMsgTest_MessageToClient_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTest_MessageToClient_Response(const CMsgTest_MessageToClient_Response& from);
  CMsgTest_MessageToClient_Response(CMsgTest_MessageToClient_Response&& from) noexcept
    : CMsgTest_MessageToClient_Response() {
    *this = ::std::move(from);
  }

  inline CMsgTest_MessageToClient_Response& operator=(const CMsgTest_MessageToClient_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTest_MessageToClient_Response& operator=(CMsgTest_MessageToClient_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTest_MessageToClient_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTest_MessageToClient_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgTest_MessageToClient_Response*>(
               &_CMsgTest_MessageToClient_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgTest_MessageToClient_Response& a, CMsgTest_MessageToClient_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTest_MessageToClient_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTest_MessageToClient_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTest_MessageToClient_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTest_MessageToClient_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTest_MessageToClient_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgTest_MessageToClient_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTest_MessageToClient_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTest_MessageToClient_Response";
  }
  protected:
  explicit CMsgTest_MessageToClient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSomeTextFieldNumber = 1,
  };
  // optional string some_text = 1 [(.description) = "Some string."];
  bool has_some_text() const;
  private:
  bool _internal_has_some_text() const;
  public:
  void clear_some_text();
  const std::string& some_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_some_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_some_text();
  PROTOBUF_NODISCARD std::string* release_some_text();
  void set_allocated_some_text(std::string* some_text);
  private:
  const std::string& _internal_some_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_some_text(const std::string& value);
  std::string* _internal_mutable_some_text();
  public:

  // @@protoc_insertion_point(class_scope:CMsgTest_MessageToClient_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr some_text_;
  friend struct ::TableStruct_steammessages_5funified_5ftest_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgTest_NotifyClient_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTest_NotifyClient_Notification) */ {
 public:
  inline CMsgTest_NotifyClient_Notification() : CMsgTest_NotifyClient_Notification(nullptr) {}
  ~CMsgTest_NotifyClient_Notification() override;
  explicit constexpr CMsgTest_NotifyClient_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTest_NotifyClient_Notification(const CMsgTest_NotifyClient_Notification& from);
  CMsgTest_NotifyClient_Notification(CMsgTest_NotifyClient_Notification&& from) noexcept
    : CMsgTest_NotifyClient_Notification() {
    *this = ::std::move(from);
  }

  inline CMsgTest_NotifyClient_Notification& operator=(const CMsgTest_NotifyClient_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTest_NotifyClient_Notification& operator=(CMsgTest_NotifyClient_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTest_NotifyClient_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTest_NotifyClient_Notification* internal_default_instance() {
    return reinterpret_cast<const CMsgTest_NotifyClient_Notification*>(
               &_CMsgTest_NotifyClient_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgTest_NotifyClient_Notification& a, CMsgTest_NotifyClient_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTest_NotifyClient_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTest_NotifyClient_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTest_NotifyClient_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTest_NotifyClient_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTest_NotifyClient_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgTest_NotifyClient_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTest_NotifyClient_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTest_NotifyClient_Notification";
  }
  protected:
  explicit CMsgTest_NotifyClient_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSomeTextFieldNumber = 1,
  };
  // optional string some_text = 1 [(.description) = "Some string."];
  bool has_some_text() const;
  private:
  bool _internal_has_some_text() const;
  public:
  void clear_some_text();
  const std::string& some_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_some_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_some_text();
  PROTOBUF_NODISCARD std::string* release_some_text();
  void set_allocated_some_text(std::string* some_text);
  private:
  const std::string& _internal_some_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_some_text(const std::string& value);
  std::string* _internal_mutable_some_text();
  public:

  // @@protoc_insertion_point(class_scope:CMsgTest_NotifyClient_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr some_text_;
  friend struct ::TableStruct_steammessages_5funified_5ftest_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgTest_MessageToServer_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTest_MessageToServer_Request) */ {
 public:
  inline CMsgTest_MessageToServer_Request() : CMsgTest_MessageToServer_Request(nullptr) {}
  ~CMsgTest_MessageToServer_Request() override;
  explicit constexpr CMsgTest_MessageToServer_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTest_MessageToServer_Request(const CMsgTest_MessageToServer_Request& from);
  CMsgTest_MessageToServer_Request(CMsgTest_MessageToServer_Request&& from) noexcept
    : CMsgTest_MessageToServer_Request() {
    *this = ::std::move(from);
  }

  inline CMsgTest_MessageToServer_Request& operator=(const CMsgTest_MessageToServer_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTest_MessageToServer_Request& operator=(CMsgTest_MessageToServer_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTest_MessageToServer_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTest_MessageToServer_Request* internal_default_instance() {
    return reinterpret_cast<const CMsgTest_MessageToServer_Request*>(
               &_CMsgTest_MessageToServer_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgTest_MessageToServer_Request& a, CMsgTest_MessageToServer_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTest_MessageToServer_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTest_MessageToServer_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTest_MessageToServer_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTest_MessageToServer_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTest_MessageToServer_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgTest_MessageToServer_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTest_MessageToServer_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTest_MessageToServer_Request";
  }
  protected:
  explicit CMsgTest_MessageToServer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSomeTextFieldNumber = 1,
  };
  // optional string some_text = 1 [(.description) = "Some string."];
  bool has_some_text() const;
  private:
  bool _internal_has_some_text() const;
  public:
  void clear_some_text();
  const std::string& some_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_some_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_some_text();
  PROTOBUF_NODISCARD std::string* release_some_text();
  void set_allocated_some_text(std::string* some_text);
  private:
  const std::string& _internal_some_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_some_text(const std::string& value);
  std::string* _internal_mutable_some_text();
  public:

  // @@protoc_insertion_point(class_scope:CMsgTest_MessageToServer_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr some_text_;
  friend struct ::TableStruct_steammessages_5funified_5ftest_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgTest_MessageToServer_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTest_MessageToServer_Response) */ {
 public:
  inline CMsgTest_MessageToServer_Response() : CMsgTest_MessageToServer_Response(nullptr) {}
  ~CMsgTest_MessageToServer_Response() override;
  explicit constexpr CMsgTest_MessageToServer_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTest_MessageToServer_Response(const CMsgTest_MessageToServer_Response& from);
  CMsgTest_MessageToServer_Response(CMsgTest_MessageToServer_Response&& from) noexcept
    : CMsgTest_MessageToServer_Response() {
    *this = ::std::move(from);
  }

  inline CMsgTest_MessageToServer_Response& operator=(const CMsgTest_MessageToServer_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTest_MessageToServer_Response& operator=(CMsgTest_MessageToServer_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTest_MessageToServer_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTest_MessageToServer_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgTest_MessageToServer_Response*>(
               &_CMsgTest_MessageToServer_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgTest_MessageToServer_Response& a, CMsgTest_MessageToServer_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTest_MessageToServer_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTest_MessageToServer_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTest_MessageToServer_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTest_MessageToServer_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTest_MessageToServer_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgTest_MessageToServer_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTest_MessageToServer_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTest_MessageToServer_Response";
  }
  protected:
  explicit CMsgTest_MessageToServer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSomeTextFieldNumber = 1,
  };
  // optional string some_text = 1 [(.description) = "Some string."];
  bool has_some_text() const;
  private:
  bool _internal_has_some_text() const;
  public:
  void clear_some_text();
  const std::string& some_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_some_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_some_text();
  PROTOBUF_NODISCARD std::string* release_some_text();
  void set_allocated_some_text(std::string* some_text);
  private:
  const std::string& _internal_some_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_some_text(const std::string& value);
  std::string* _internal_mutable_some_text();
  public:

  // @@protoc_insertion_point(class_scope:CMsgTest_MessageToServer_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr some_text_;
  friend struct ::TableStruct_steammessages_5funified_5ftest_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgTest_NotifyServer_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTest_NotifyServer_Notification) */ {
 public:
  inline CMsgTest_NotifyServer_Notification() : CMsgTest_NotifyServer_Notification(nullptr) {}
  ~CMsgTest_NotifyServer_Notification() override;
  explicit constexpr CMsgTest_NotifyServer_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTest_NotifyServer_Notification(const CMsgTest_NotifyServer_Notification& from);
  CMsgTest_NotifyServer_Notification(CMsgTest_NotifyServer_Notification&& from) noexcept
    : CMsgTest_NotifyServer_Notification() {
    *this = ::std::move(from);
  }

  inline CMsgTest_NotifyServer_Notification& operator=(const CMsgTest_NotifyServer_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTest_NotifyServer_Notification& operator=(CMsgTest_NotifyServer_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTest_NotifyServer_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTest_NotifyServer_Notification* internal_default_instance() {
    return reinterpret_cast<const CMsgTest_NotifyServer_Notification*>(
               &_CMsgTest_NotifyServer_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgTest_NotifyServer_Notification& a, CMsgTest_NotifyServer_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTest_NotifyServer_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTest_NotifyServer_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTest_NotifyServer_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTest_NotifyServer_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTest_NotifyServer_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgTest_NotifyServer_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTest_NotifyServer_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTest_NotifyServer_Notification";
  }
  protected:
  explicit CMsgTest_NotifyServer_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSomeTextFieldNumber = 1,
  };
  // optional string some_text = 1 [(.description) = "Some string."];
  bool has_some_text() const;
  private:
  bool _internal_has_some_text() const;
  public:
  void clear_some_text();
  const std::string& some_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_some_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_some_text();
  PROTOBUF_NODISCARD std::string* release_some_text();
  void set_allocated_some_text(std::string* some_text);
  private:
  const std::string& _internal_some_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_some_text(const std::string& value);
  std::string* _internal_mutable_some_text();
  public:

  // @@protoc_insertion_point(class_scope:CMsgTest_NotifyServer_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr some_text_;
  friend struct ::TableStruct_steammessages_5funified_5ftest_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgTest_NoBody_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgTest_NoBody_Request) */ {
 public:
  inline CMsgTest_NoBody_Request() : CMsgTest_NoBody_Request(nullptr) {}
  explicit constexpr CMsgTest_NoBody_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTest_NoBody_Request(const CMsgTest_NoBody_Request& from);
  CMsgTest_NoBody_Request(CMsgTest_NoBody_Request&& from) noexcept
    : CMsgTest_NoBody_Request() {
    *this = ::std::move(from);
  }

  inline CMsgTest_NoBody_Request& operator=(const CMsgTest_NoBody_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTest_NoBody_Request& operator=(CMsgTest_NoBody_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTest_NoBody_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTest_NoBody_Request* internal_default_instance() {
    return reinterpret_cast<const CMsgTest_NoBody_Request*>(
               &_CMsgTest_NoBody_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgTest_NoBody_Request& a, CMsgTest_NoBody_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTest_NoBody_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTest_NoBody_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTest_NoBody_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTest_NoBody_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgTest_NoBody_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgTest_NoBody_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTest_NoBody_Request";
  }
  protected:
  explicit CMsgTest_NoBody_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgTest_NoBody_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5funified_5ftest_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CMsgTest_CallClient_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTest_CallClient_Response) */ {
 public:
  inline CMsgTest_CallClient_Response() : CMsgTest_CallClient_Response(nullptr) {}
  ~CMsgTest_CallClient_Response() override;
  explicit constexpr CMsgTest_CallClient_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTest_CallClient_Response(const CMsgTest_CallClient_Response& from);
  CMsgTest_CallClient_Response(CMsgTest_CallClient_Response&& from) noexcept
    : CMsgTest_CallClient_Response() {
    *this = ::std::move(from);
  }

  inline CMsgTest_CallClient_Response& operator=(const CMsgTest_CallClient_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTest_CallClient_Response& operator=(CMsgTest_CallClient_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTest_CallClient_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTest_CallClient_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgTest_CallClient_Response*>(
               &_CMsgTest_CallClient_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgTest_CallClient_Response& a, CMsgTest_CallClient_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTest_CallClient_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTest_CallClient_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTest_CallClient_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTest_CallClient_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTest_CallClient_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgTest_CallClient_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTest_CallClient_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTest_CallClient_Response";
  }
  protected:
  explicit CMsgTest_CallClient_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestvalueFieldNumber = 1,
  };
  // optional int32 testvalue = 1;
  bool has_testvalue() const;
  private:
  bool _internal_has_testvalue() const;
  public:
  void clear_testvalue();
  int32_t testvalue() const;
  void set_testvalue(int32_t value);
  private:
  int32_t _internal_testvalue() const;
  void _internal_set_testvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTest_CallClient_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t testvalue_;
  friend struct ::TableStruct_steammessages_5funified_5ftest_2esteamclient_2eproto;
};
// ===================================================================

class TestSteamClient_Stub;

class TestSteamClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TestSteamClient() {};
 public:
  virtual ~TestSteamClient();

  typedef TestSteamClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void MessageToClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMsgTest_MessageToClient_Request* request,
                       ::CMsgTest_MessageToClient_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMsgTest_NotifyClient_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TestSteamClient);
};

class TestSteamClient_Stub : public TestSteamClient {
 public:
  TestSteamClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  TestSteamClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~TestSteamClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements TestSteamClient ------------------------------------------

  void MessageToClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMsgTest_MessageToClient_Request* request,
                       ::CMsgTest_MessageToClient_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMsgTest_NotifyClient_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TestSteamClient_Stub);
};


// -------------------------------------------------------------------

class TestServerFromClient_Stub;

class TestServerFromClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TestServerFromClient() {};
 public:
  virtual ~TestServerFromClient();

  typedef TestServerFromClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void MessageToServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMsgTest_MessageToServer_Request* request,
                       ::CMsgTest_MessageToServer_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMsgTest_NotifyServer_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TestServerFromClient);
};

class TestServerFromClient_Stub : public TestServerFromClient {
 public:
  TestServerFromClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  TestServerFromClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~TestServerFromClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements TestServerFromClient ------------------------------------------

  void MessageToServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMsgTest_MessageToServer_Request* request,
                       ::CMsgTest_MessageToServer_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMsgTest_NotifyServer_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TestServerFromClient_Stub);
};


// -------------------------------------------------------------------

class TestExternalPrivilege_Stub;

class TestExternalPrivilege : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TestExternalPrivilege() {};
 public:
  virtual ~TestExternalPrivilege();

  typedef TestExternalPrivilege_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void CallClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMsgTest_NoBody_Request* request,
                       ::CMsgTest_CallClient_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TestExternalPrivilege);
};

class TestExternalPrivilege_Stub : public TestExternalPrivilege {
 public:
  TestExternalPrivilege_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  TestExternalPrivilege_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~TestExternalPrivilege_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements TestExternalPrivilege ------------------------------------------

  void CallClient(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CMsgTest_NoBody_Request* request,
                       ::CMsgTest_CallClient_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TestExternalPrivilege_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgTest_MessageToClient_Request

// optional string some_text = 1 [(.description) = "Some string."];
inline bool CMsgTest_MessageToClient_Request::_internal_has_some_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTest_MessageToClient_Request::has_some_text() const {
  return _internal_has_some_text();
}
inline void CMsgTest_MessageToClient_Request::clear_some_text() {
  some_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgTest_MessageToClient_Request::some_text() const {
  // @@protoc_insertion_point(field_get:CMsgTest_MessageToClient_Request.some_text)
  return _internal_some_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTest_MessageToClient_Request::set_some_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTest_MessageToClient_Request.some_text)
}
inline std::string* CMsgTest_MessageToClient_Request::mutable_some_text() {
  std::string* _s = _internal_mutable_some_text();
  // @@protoc_insertion_point(field_mutable:CMsgTest_MessageToClient_Request.some_text)
  return _s;
}
inline const std::string& CMsgTest_MessageToClient_Request::_internal_some_text() const {
  return some_text_.Get();
}
inline void CMsgTest_MessageToClient_Request::_internal_set_some_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgTest_MessageToClient_Request::_internal_mutable_some_text() {
  _has_bits_[0] |= 0x00000001u;
  return some_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgTest_MessageToClient_Request::release_some_text() {
  // @@protoc_insertion_point(field_release:CMsgTest_MessageToClient_Request.some_text)
  if (!_internal_has_some_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = some_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (some_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    some_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgTest_MessageToClient_Request::set_allocated_some_text(std::string* some_text) {
  if (some_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  some_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), some_text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (some_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    some_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgTest_MessageToClient_Request.some_text)
}

// -------------------------------------------------------------------

// CMsgTest_MessageToClient_Response

// optional string some_text = 1 [(.description) = "Some string."];
inline bool CMsgTest_MessageToClient_Response::_internal_has_some_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTest_MessageToClient_Response::has_some_text() const {
  return _internal_has_some_text();
}
inline void CMsgTest_MessageToClient_Response::clear_some_text() {
  some_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgTest_MessageToClient_Response::some_text() const {
  // @@protoc_insertion_point(field_get:CMsgTest_MessageToClient_Response.some_text)
  return _internal_some_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTest_MessageToClient_Response::set_some_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTest_MessageToClient_Response.some_text)
}
inline std::string* CMsgTest_MessageToClient_Response::mutable_some_text() {
  std::string* _s = _internal_mutable_some_text();
  // @@protoc_insertion_point(field_mutable:CMsgTest_MessageToClient_Response.some_text)
  return _s;
}
inline const std::string& CMsgTest_MessageToClient_Response::_internal_some_text() const {
  return some_text_.Get();
}
inline void CMsgTest_MessageToClient_Response::_internal_set_some_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgTest_MessageToClient_Response::_internal_mutable_some_text() {
  _has_bits_[0] |= 0x00000001u;
  return some_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgTest_MessageToClient_Response::release_some_text() {
  // @@protoc_insertion_point(field_release:CMsgTest_MessageToClient_Response.some_text)
  if (!_internal_has_some_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = some_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (some_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    some_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgTest_MessageToClient_Response::set_allocated_some_text(std::string* some_text) {
  if (some_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  some_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), some_text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (some_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    some_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgTest_MessageToClient_Response.some_text)
}

// -------------------------------------------------------------------

// CMsgTest_NotifyClient_Notification

// optional string some_text = 1 [(.description) = "Some string."];
inline bool CMsgTest_NotifyClient_Notification::_internal_has_some_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTest_NotifyClient_Notification::has_some_text() const {
  return _internal_has_some_text();
}
inline void CMsgTest_NotifyClient_Notification::clear_some_text() {
  some_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgTest_NotifyClient_Notification::some_text() const {
  // @@protoc_insertion_point(field_get:CMsgTest_NotifyClient_Notification.some_text)
  return _internal_some_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTest_NotifyClient_Notification::set_some_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTest_NotifyClient_Notification.some_text)
}
inline std::string* CMsgTest_NotifyClient_Notification::mutable_some_text() {
  std::string* _s = _internal_mutable_some_text();
  // @@protoc_insertion_point(field_mutable:CMsgTest_NotifyClient_Notification.some_text)
  return _s;
}
inline const std::string& CMsgTest_NotifyClient_Notification::_internal_some_text() const {
  return some_text_.Get();
}
inline void CMsgTest_NotifyClient_Notification::_internal_set_some_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgTest_NotifyClient_Notification::_internal_mutable_some_text() {
  _has_bits_[0] |= 0x00000001u;
  return some_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgTest_NotifyClient_Notification::release_some_text() {
  // @@protoc_insertion_point(field_release:CMsgTest_NotifyClient_Notification.some_text)
  if (!_internal_has_some_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = some_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (some_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    some_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgTest_NotifyClient_Notification::set_allocated_some_text(std::string* some_text) {
  if (some_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  some_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), some_text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (some_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    some_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgTest_NotifyClient_Notification.some_text)
}

// -------------------------------------------------------------------

// CMsgTest_MessageToServer_Request

// optional string some_text = 1 [(.description) = "Some string."];
inline bool CMsgTest_MessageToServer_Request::_internal_has_some_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTest_MessageToServer_Request::has_some_text() const {
  return _internal_has_some_text();
}
inline void CMsgTest_MessageToServer_Request::clear_some_text() {
  some_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgTest_MessageToServer_Request::some_text() const {
  // @@protoc_insertion_point(field_get:CMsgTest_MessageToServer_Request.some_text)
  return _internal_some_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTest_MessageToServer_Request::set_some_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTest_MessageToServer_Request.some_text)
}
inline std::string* CMsgTest_MessageToServer_Request::mutable_some_text() {
  std::string* _s = _internal_mutable_some_text();
  // @@protoc_insertion_point(field_mutable:CMsgTest_MessageToServer_Request.some_text)
  return _s;
}
inline const std::string& CMsgTest_MessageToServer_Request::_internal_some_text() const {
  return some_text_.Get();
}
inline void CMsgTest_MessageToServer_Request::_internal_set_some_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgTest_MessageToServer_Request::_internal_mutable_some_text() {
  _has_bits_[0] |= 0x00000001u;
  return some_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgTest_MessageToServer_Request::release_some_text() {
  // @@protoc_insertion_point(field_release:CMsgTest_MessageToServer_Request.some_text)
  if (!_internal_has_some_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = some_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (some_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    some_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgTest_MessageToServer_Request::set_allocated_some_text(std::string* some_text) {
  if (some_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  some_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), some_text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (some_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    some_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgTest_MessageToServer_Request.some_text)
}

// -------------------------------------------------------------------

// CMsgTest_MessageToServer_Response

// optional string some_text = 1 [(.description) = "Some string."];
inline bool CMsgTest_MessageToServer_Response::_internal_has_some_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTest_MessageToServer_Response::has_some_text() const {
  return _internal_has_some_text();
}
inline void CMsgTest_MessageToServer_Response::clear_some_text() {
  some_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgTest_MessageToServer_Response::some_text() const {
  // @@protoc_insertion_point(field_get:CMsgTest_MessageToServer_Response.some_text)
  return _internal_some_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTest_MessageToServer_Response::set_some_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTest_MessageToServer_Response.some_text)
}
inline std::string* CMsgTest_MessageToServer_Response::mutable_some_text() {
  std::string* _s = _internal_mutable_some_text();
  // @@protoc_insertion_point(field_mutable:CMsgTest_MessageToServer_Response.some_text)
  return _s;
}
inline const std::string& CMsgTest_MessageToServer_Response::_internal_some_text() const {
  return some_text_.Get();
}
inline void CMsgTest_MessageToServer_Response::_internal_set_some_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgTest_MessageToServer_Response::_internal_mutable_some_text() {
  _has_bits_[0] |= 0x00000001u;
  return some_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgTest_MessageToServer_Response::release_some_text() {
  // @@protoc_insertion_point(field_release:CMsgTest_MessageToServer_Response.some_text)
  if (!_internal_has_some_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = some_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (some_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    some_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgTest_MessageToServer_Response::set_allocated_some_text(std::string* some_text) {
  if (some_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  some_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), some_text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (some_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    some_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgTest_MessageToServer_Response.some_text)
}

// -------------------------------------------------------------------

// CMsgTest_NotifyServer_Notification

// optional string some_text = 1 [(.description) = "Some string."];
inline bool CMsgTest_NotifyServer_Notification::_internal_has_some_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTest_NotifyServer_Notification::has_some_text() const {
  return _internal_has_some_text();
}
inline void CMsgTest_NotifyServer_Notification::clear_some_text() {
  some_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgTest_NotifyServer_Notification::some_text() const {
  // @@protoc_insertion_point(field_get:CMsgTest_NotifyServer_Notification.some_text)
  return _internal_some_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTest_NotifyServer_Notification::set_some_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTest_NotifyServer_Notification.some_text)
}
inline std::string* CMsgTest_NotifyServer_Notification::mutable_some_text() {
  std::string* _s = _internal_mutable_some_text();
  // @@protoc_insertion_point(field_mutable:CMsgTest_NotifyServer_Notification.some_text)
  return _s;
}
inline const std::string& CMsgTest_NotifyServer_Notification::_internal_some_text() const {
  return some_text_.Get();
}
inline void CMsgTest_NotifyServer_Notification::_internal_set_some_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  some_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgTest_NotifyServer_Notification::_internal_mutable_some_text() {
  _has_bits_[0] |= 0x00000001u;
  return some_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgTest_NotifyServer_Notification::release_some_text() {
  // @@protoc_insertion_point(field_release:CMsgTest_NotifyServer_Notification.some_text)
  if (!_internal_has_some_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = some_text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (some_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    some_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgTest_NotifyServer_Notification::set_allocated_some_text(std::string* some_text) {
  if (some_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  some_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), some_text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (some_text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    some_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgTest_NotifyServer_Notification.some_text)
}

// -------------------------------------------------------------------

// CMsgTest_NoBody_Request

// -------------------------------------------------------------------

// CMsgTest_CallClient_Response

// optional int32 testvalue = 1;
inline bool CMsgTest_CallClient_Response::_internal_has_testvalue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTest_CallClient_Response::has_testvalue() const {
  return _internal_has_testvalue();
}
inline void CMsgTest_CallClient_Response::clear_testvalue() {
  testvalue_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgTest_CallClient_Response::_internal_testvalue() const {
  return testvalue_;
}
inline int32_t CMsgTest_CallClient_Response::testvalue() const {
  // @@protoc_insertion_point(field_get:CMsgTest_CallClient_Response.testvalue)
  return _internal_testvalue();
}
inline void CMsgTest_CallClient_Response::_internal_set_testvalue(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  testvalue_ = value;
}
inline void CMsgTest_CallClient_Response::set_testvalue(int32_t value) {
  _internal_set_testvalue(value);
  // @@protoc_insertion_point(field_set:CMsgTest_CallClient_Response.testvalue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5funified_5ftest_2esteamclient_2eproto
