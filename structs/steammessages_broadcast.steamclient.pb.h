// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_broadcast.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fbroadcast_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fbroadcast_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fbroadcast_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[81]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fbroadcast_2esteamclient_2eproto;
class CBroadcast_BeginBroadcastSession_Request;
struct CBroadcast_BeginBroadcastSession_RequestDefaultTypeInternal;
extern CBroadcast_BeginBroadcastSession_RequestDefaultTypeInternal _CBroadcast_BeginBroadcastSession_Request_default_instance_;
class CBroadcast_BeginBroadcastSession_Response;
struct CBroadcast_BeginBroadcastSession_ResponseDefaultTypeInternal;
extern CBroadcast_BeginBroadcastSession_ResponseDefaultTypeInternal _CBroadcast_BeginBroadcastSession_Response_default_instance_;
class CBroadcast_BroadcastChannelLive_Notification;
struct CBroadcast_BroadcastChannelLive_NotificationDefaultTypeInternal;
extern CBroadcast_BroadcastChannelLive_NotificationDefaultTypeInternal _CBroadcast_BroadcastChannelLive_Notification_default_instance_;
class CBroadcast_BroadcastStatus_Notification;
struct CBroadcast_BroadcastStatus_NotificationDefaultTypeInternal;
extern CBroadcast_BroadcastStatus_NotificationDefaultTypeInternal _CBroadcast_BroadcastStatus_Notification_default_instance_;
class CBroadcast_BroadcastUploadStarted_Notification;
struct CBroadcast_BroadcastUploadStarted_NotificationDefaultTypeInternal;
extern CBroadcast_BroadcastUploadStarted_NotificationDefaultTypeInternal _CBroadcast_BroadcastUploadStarted_Notification_default_instance_;
class CBroadcast_BroadcastViewerState_Notification;
struct CBroadcast_BroadcastViewerState_NotificationDefaultTypeInternal;
extern CBroadcast_BroadcastViewerState_NotificationDefaultTypeInternal _CBroadcast_BroadcastViewerState_Notification_default_instance_;
class CBroadcast_EndBroadcastSession_Request;
struct CBroadcast_EndBroadcastSession_RequestDefaultTypeInternal;
extern CBroadcast_EndBroadcastSession_RequestDefaultTypeInternal _CBroadcast_EndBroadcastSession_Request_default_instance_;
class CBroadcast_EndBroadcastSession_Response;
struct CBroadcast_EndBroadcastSession_ResponseDefaultTypeInternal;
extern CBroadcast_EndBroadcastSession_ResponseDefaultTypeInternal _CBroadcast_EndBroadcastSession_Response_default_instance_;
class CBroadcast_GetBroadcastChatInfo_Request;
struct CBroadcast_GetBroadcastChatInfo_RequestDefaultTypeInternal;
extern CBroadcast_GetBroadcastChatInfo_RequestDefaultTypeInternal _CBroadcast_GetBroadcastChatInfo_Request_default_instance_;
class CBroadcast_GetBroadcastChatInfo_Response;
struct CBroadcast_GetBroadcastChatInfo_ResponseDefaultTypeInternal;
extern CBroadcast_GetBroadcastChatInfo_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastChatInfo_Response_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_Request;
struct CBroadcast_GetBroadcastChatUserNames_RequestDefaultTypeInternal;
extern CBroadcast_GetBroadcastChatUserNames_RequestDefaultTypeInternal _CBroadcast_GetBroadcastChatUserNames_Request_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_Response;
struct CBroadcast_GetBroadcastChatUserNames_ResponseDefaultTypeInternal;
extern CBroadcast_GetBroadcastChatUserNames_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastChatUserNames_Response_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_Response_PersonaName;
struct CBroadcast_GetBroadcastChatUserNames_Response_PersonaNameDefaultTypeInternal;
extern CBroadcast_GetBroadcastChatUserNames_Response_PersonaNameDefaultTypeInternal _CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_;
class CBroadcast_GetBroadcastStatus_Request;
struct CBroadcast_GetBroadcastStatus_RequestDefaultTypeInternal;
extern CBroadcast_GetBroadcastStatus_RequestDefaultTypeInternal _CBroadcast_GetBroadcastStatus_Request_default_instance_;
class CBroadcast_GetBroadcastStatus_Response;
struct CBroadcast_GetBroadcastStatus_ResponseDefaultTypeInternal;
extern CBroadcast_GetBroadcastStatus_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastStatus_Response_default_instance_;
class CBroadcast_GetBroadcastThumbnail_Request;
struct CBroadcast_GetBroadcastThumbnail_RequestDefaultTypeInternal;
extern CBroadcast_GetBroadcastThumbnail_RequestDefaultTypeInternal _CBroadcast_GetBroadcastThumbnail_Request_default_instance_;
class CBroadcast_GetBroadcastThumbnail_Response;
struct CBroadcast_GetBroadcastThumbnail_ResponseDefaultTypeInternal;
extern CBroadcast_GetBroadcastThumbnail_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastThumbnail_Response_default_instance_;
class CBroadcast_GetBroadcastUploadStats_Request;
struct CBroadcast_GetBroadcastUploadStats_RequestDefaultTypeInternal;
extern CBroadcast_GetBroadcastUploadStats_RequestDefaultTypeInternal _CBroadcast_GetBroadcastUploadStats_Request_default_instance_;
class CBroadcast_GetBroadcastUploadStats_Response;
struct CBroadcast_GetBroadcastUploadStats_ResponseDefaultTypeInternal;
extern CBroadcast_GetBroadcastUploadStats_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastUploadStats_Response_default_instance_;
class CBroadcast_GetBroadcastUploadStats_Response_UploadStats;
struct CBroadcast_GetBroadcastUploadStats_Response_UploadStatsDefaultTypeInternal;
extern CBroadcast_GetBroadcastUploadStats_Response_UploadStatsDefaultTypeInternal _CBroadcast_GetBroadcastUploadStats_Response_UploadStats_default_instance_;
class CBroadcast_GetBroadcastViewerStats_Request;
struct CBroadcast_GetBroadcastViewerStats_RequestDefaultTypeInternal;
extern CBroadcast_GetBroadcastViewerStats_RequestDefaultTypeInternal _CBroadcast_GetBroadcastViewerStats_Request_default_instance_;
class CBroadcast_GetBroadcastViewerStats_Response;
struct CBroadcast_GetBroadcastViewerStats_ResponseDefaultTypeInternal;
extern CBroadcast_GetBroadcastViewerStats_ResponseDefaultTypeInternal _CBroadcast_GetBroadcastViewerStats_Response_default_instance_;
class CBroadcast_GetBroadcastViewerStats_Response_CountryStats;
struct CBroadcast_GetBroadcastViewerStats_Response_CountryStatsDefaultTypeInternal;
extern CBroadcast_GetBroadcastViewerStats_Response_CountryStatsDefaultTypeInternal _CBroadcast_GetBroadcastViewerStats_Response_CountryStats_default_instance_;
class CBroadcast_GetBroadcastViewerStats_Response_ViewerStats;
struct CBroadcast_GetBroadcastViewerStats_Response_ViewerStatsDefaultTypeInternal;
extern CBroadcast_GetBroadcastViewerStats_Response_ViewerStatsDefaultTypeInternal _CBroadcast_GetBroadcastViewerStats_Response_ViewerStats_default_instance_;
class CBroadcast_GetBuildClipStatus_Request;
struct CBroadcast_GetBuildClipStatus_RequestDefaultTypeInternal;
extern CBroadcast_GetBuildClipStatus_RequestDefaultTypeInternal _CBroadcast_GetBuildClipStatus_Request_default_instance_;
class CBroadcast_GetBuildClipStatus_Response;
struct CBroadcast_GetBuildClipStatus_ResponseDefaultTypeInternal;
extern CBroadcast_GetBuildClipStatus_ResponseDefaultTypeInternal _CBroadcast_GetBuildClipStatus_Response_default_instance_;
class CBroadcast_GetClipDetails_Request;
struct CBroadcast_GetClipDetails_RequestDefaultTypeInternal;
extern CBroadcast_GetClipDetails_RequestDefaultTypeInternal _CBroadcast_GetClipDetails_Request_default_instance_;
class CBroadcast_GetClipDetails_Response;
struct CBroadcast_GetClipDetails_ResponseDefaultTypeInternal;
extern CBroadcast_GetClipDetails_ResponseDefaultTypeInternal _CBroadcast_GetClipDetails_Response_default_instance_;
class CBroadcast_GetRTMPInfo_Request;
struct CBroadcast_GetRTMPInfo_RequestDefaultTypeInternal;
extern CBroadcast_GetRTMPInfo_RequestDefaultTypeInternal _CBroadcast_GetRTMPInfo_Request_default_instance_;
class CBroadcast_GetRTMPInfo_Response;
struct CBroadcast_GetRTMPInfo_ResponseDefaultTypeInternal;
extern CBroadcast_GetRTMPInfo_ResponseDefaultTypeInternal _CBroadcast_GetRTMPInfo_Response_default_instance_;
class CBroadcast_HeartbeatBroadcast_Notification;
struct CBroadcast_HeartbeatBroadcast_NotificationDefaultTypeInternal;
extern CBroadcast_HeartbeatBroadcast_NotificationDefaultTypeInternal _CBroadcast_HeartbeatBroadcast_Notification_default_instance_;
class CBroadcast_InviteToBroadcast_Request;
struct CBroadcast_InviteToBroadcast_RequestDefaultTypeInternal;
extern CBroadcast_InviteToBroadcast_RequestDefaultTypeInternal _CBroadcast_InviteToBroadcast_Request_default_instance_;
class CBroadcast_InviteToBroadcast_Response;
struct CBroadcast_InviteToBroadcast_ResponseDefaultTypeInternal;
extern CBroadcast_InviteToBroadcast_ResponseDefaultTypeInternal _CBroadcast_InviteToBroadcast_Response_default_instance_;
class CBroadcast_MuteBroadcastChatUser_Request;
struct CBroadcast_MuteBroadcastChatUser_RequestDefaultTypeInternal;
extern CBroadcast_MuteBroadcastChatUser_RequestDefaultTypeInternal _CBroadcast_MuteBroadcastChatUser_Request_default_instance_;
class CBroadcast_MuteBroadcastChatUser_Response;
struct CBroadcast_MuteBroadcastChatUser_ResponseDefaultTypeInternal;
extern CBroadcast_MuteBroadcastChatUser_ResponseDefaultTypeInternal _CBroadcast_MuteBroadcastChatUser_Response_default_instance_;
class CBroadcast_NotifyBroadcastSessionHeartbeat_Notification;
struct CBroadcast_NotifyBroadcastSessionHeartbeat_NotificationDefaultTypeInternal;
extern CBroadcast_NotifyBroadcastSessionHeartbeat_NotificationDefaultTypeInternal _CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_;
class CBroadcast_NotifyBroadcastUploadStop_Notification;
struct CBroadcast_NotifyBroadcastUploadStop_NotificationDefaultTypeInternal;
extern CBroadcast_NotifyBroadcastUploadStop_NotificationDefaultTypeInternal _CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_;
class CBroadcast_PostChatMessage_Request;
struct CBroadcast_PostChatMessage_RequestDefaultTypeInternal;
extern CBroadcast_PostChatMessage_RequestDefaultTypeInternal _CBroadcast_PostChatMessage_Request_default_instance_;
class CBroadcast_PostChatMessage_Response;
struct CBroadcast_PostChatMessage_ResponseDefaultTypeInternal;
extern CBroadcast_PostChatMessage_ResponseDefaultTypeInternal _CBroadcast_PostChatMessage_Response_default_instance_;
class CBroadcast_RemoveUserChatText_Request;
struct CBroadcast_RemoveUserChatText_RequestDefaultTypeInternal;
extern CBroadcast_RemoveUserChatText_RequestDefaultTypeInternal _CBroadcast_RemoveUserChatText_Request_default_instance_;
class CBroadcast_RemoveUserChatText_Response;
struct CBroadcast_RemoveUserChatText_ResponseDefaultTypeInternal;
extern CBroadcast_RemoveUserChatText_ResponseDefaultTypeInternal _CBroadcast_RemoveUserChatText_Response_default_instance_;
class CBroadcast_SendBroadcastStateToServer_Request;
struct CBroadcast_SendBroadcastStateToServer_RequestDefaultTypeInternal;
extern CBroadcast_SendBroadcastStateToServer_RequestDefaultTypeInternal _CBroadcast_SendBroadcastStateToServer_Request_default_instance_;
class CBroadcast_SendBroadcastStateToServer_Response;
struct CBroadcast_SendBroadcastStateToServer_ResponseDefaultTypeInternal;
extern CBroadcast_SendBroadcastStateToServer_ResponseDefaultTypeInternal _CBroadcast_SendBroadcastStateToServer_Response_default_instance_;
class CBroadcast_SendThumbnailToRelay_Notification;
struct CBroadcast_SendThumbnailToRelay_NotificationDefaultTypeInternal;
extern CBroadcast_SendThumbnailToRelay_NotificationDefaultTypeInternal _CBroadcast_SendThumbnailToRelay_Notification_default_instance_;
class CBroadcast_SessionClosed_Notification;
struct CBroadcast_SessionClosed_NotificationDefaultTypeInternal;
extern CBroadcast_SessionClosed_NotificationDefaultTypeInternal _CBroadcast_SessionClosed_Notification_default_instance_;
class CBroadcast_SetClipDetails_Request;
struct CBroadcast_SetClipDetails_RequestDefaultTypeInternal;
extern CBroadcast_SetClipDetails_RequestDefaultTypeInternal _CBroadcast_SetClipDetails_Request_default_instance_;
class CBroadcast_SetClipDetails_Response;
struct CBroadcast_SetClipDetails_ResponseDefaultTypeInternal;
extern CBroadcast_SetClipDetails_ResponseDefaultTypeInternal _CBroadcast_SetClipDetails_Response_default_instance_;
class CBroadcast_SetRTMPInfo_Request;
struct CBroadcast_SetRTMPInfo_RequestDefaultTypeInternal;
extern CBroadcast_SetRTMPInfo_RequestDefaultTypeInternal _CBroadcast_SetRTMPInfo_Request_default_instance_;
class CBroadcast_SetRTMPInfo_Response;
struct CBroadcast_SetRTMPInfo_ResponseDefaultTypeInternal;
extern CBroadcast_SetRTMPInfo_ResponseDefaultTypeInternal _CBroadcast_SetRTMPInfo_Response_default_instance_;
class CBroadcast_StartBroadcastUpload_Request;
struct CBroadcast_StartBroadcastUpload_RequestDefaultTypeInternal;
extern CBroadcast_StartBroadcastUpload_RequestDefaultTypeInternal _CBroadcast_StartBroadcastUpload_Request_default_instance_;
class CBroadcast_StartBroadcastUpload_Response;
struct CBroadcast_StartBroadcastUpload_ResponseDefaultTypeInternal;
extern CBroadcast_StartBroadcastUpload_ResponseDefaultTypeInternal _CBroadcast_StartBroadcastUpload_Response_default_instance_;
class CBroadcast_StartBuildClip_Request;
struct CBroadcast_StartBuildClip_RequestDefaultTypeInternal;
extern CBroadcast_StartBuildClip_RequestDefaultTypeInternal _CBroadcast_StartBuildClip_Request_default_instance_;
class CBroadcast_StartBuildClip_Response;
struct CBroadcast_StartBuildClip_ResponseDefaultTypeInternal;
extern CBroadcast_StartBuildClip_ResponseDefaultTypeInternal _CBroadcast_StartBuildClip_Response_default_instance_;
class CBroadcast_StopBroadcastUpload_Notification;
struct CBroadcast_StopBroadcastUpload_NotificationDefaultTypeInternal;
extern CBroadcast_StopBroadcastUpload_NotificationDefaultTypeInternal _CBroadcast_StopBroadcastUpload_Notification_default_instance_;
class CBroadcast_StopWatchingBroadcast_Notification;
struct CBroadcast_StopWatchingBroadcast_NotificationDefaultTypeInternal;
extern CBroadcast_StopWatchingBroadcast_NotificationDefaultTypeInternal _CBroadcast_StopWatchingBroadcast_Notification_default_instance_;
class CBroadcast_UpdateChatMessageFlair_Request;
struct CBroadcast_UpdateChatMessageFlair_RequestDefaultTypeInternal;
extern CBroadcast_UpdateChatMessageFlair_RequestDefaultTypeInternal _CBroadcast_UpdateChatMessageFlair_Request_default_instance_;
class CBroadcast_UpdateChatMessageFlair_Response;
struct CBroadcast_UpdateChatMessageFlair_ResponseDefaultTypeInternal;
extern CBroadcast_UpdateChatMessageFlair_ResponseDefaultTypeInternal _CBroadcast_UpdateChatMessageFlair_Response_default_instance_;
class CBroadcast_ViewerBroadcastInvite_Notification;
struct CBroadcast_ViewerBroadcastInvite_NotificationDefaultTypeInternal;
extern CBroadcast_ViewerBroadcastInvite_NotificationDefaultTypeInternal _CBroadcast_ViewerBroadcastInvite_Notification_default_instance_;
class CBroadcast_WaitingBroadcastViewer_Notification;
struct CBroadcast_WaitingBroadcastViewer_NotificationDefaultTypeInternal;
extern CBroadcast_WaitingBroadcastViewer_NotificationDefaultTypeInternal _CBroadcast_WaitingBroadcastViewer_Notification_default_instance_;
class CBroadcast_WatchBroadcast_Request;
struct CBroadcast_WatchBroadcast_RequestDefaultTypeInternal;
extern CBroadcast_WatchBroadcast_RequestDefaultTypeInternal _CBroadcast_WatchBroadcast_Request_default_instance_;
class CBroadcast_WatchBroadcast_Response;
struct CBroadcast_WatchBroadcast_ResponseDefaultTypeInternal;
extern CBroadcast_WatchBroadcast_ResponseDefaultTypeInternal _CBroadcast_WatchBroadcast_Response_default_instance_;
class CBroadcast_WebRTCAddHostCandidate_Request;
struct CBroadcast_WebRTCAddHostCandidate_RequestDefaultTypeInternal;
extern CBroadcast_WebRTCAddHostCandidate_RequestDefaultTypeInternal _CBroadcast_WebRTCAddHostCandidate_Request_default_instance_;
class CBroadcast_WebRTCAddHostCandidate_Response;
struct CBroadcast_WebRTCAddHostCandidate_ResponseDefaultTypeInternal;
extern CBroadcast_WebRTCAddHostCandidate_ResponseDefaultTypeInternal _CBroadcast_WebRTCAddHostCandidate_Response_default_instance_;
class CBroadcast_WebRTCAddViewerCandidate_Notification;
struct CBroadcast_WebRTCAddViewerCandidate_NotificationDefaultTypeInternal;
extern CBroadcast_WebRTCAddViewerCandidate_NotificationDefaultTypeInternal _CBroadcast_WebRTCAddViewerCandidate_Notification_default_instance_;
class CBroadcast_WebRTCAddViewerCandidate_Request;
struct CBroadcast_WebRTCAddViewerCandidate_RequestDefaultTypeInternal;
extern CBroadcast_WebRTCAddViewerCandidate_RequestDefaultTypeInternal _CBroadcast_WebRTCAddViewerCandidate_Request_default_instance_;
class CBroadcast_WebRTCAddViewerCandidate_Response;
struct CBroadcast_WebRTCAddViewerCandidate_ResponseDefaultTypeInternal;
extern CBroadcast_WebRTCAddViewerCandidate_ResponseDefaultTypeInternal _CBroadcast_WebRTCAddViewerCandidate_Response_default_instance_;
class CBroadcast_WebRTCGetHostCandidates_Request;
struct CBroadcast_WebRTCGetHostCandidates_RequestDefaultTypeInternal;
extern CBroadcast_WebRTCGetHostCandidates_RequestDefaultTypeInternal _CBroadcast_WebRTCGetHostCandidates_Request_default_instance_;
class CBroadcast_WebRTCGetHostCandidates_Response;
struct CBroadcast_WebRTCGetHostCandidates_ResponseDefaultTypeInternal;
extern CBroadcast_WebRTCGetHostCandidates_ResponseDefaultTypeInternal _CBroadcast_WebRTCGetHostCandidates_Response_default_instance_;
class CBroadcast_WebRTCHaveTURNServer_Notification;
struct CBroadcast_WebRTCHaveTURNServer_NotificationDefaultTypeInternal;
extern CBroadcast_WebRTCHaveTURNServer_NotificationDefaultTypeInternal _CBroadcast_WebRTCHaveTURNServer_Notification_default_instance_;
class CBroadcast_WebRTCLookupTURNServer_Request;
struct CBroadcast_WebRTCLookupTURNServer_RequestDefaultTypeInternal;
extern CBroadcast_WebRTCLookupTURNServer_RequestDefaultTypeInternal _CBroadcast_WebRTCLookupTURNServer_Request_default_instance_;
class CBroadcast_WebRTCLookupTURNServer_Response;
struct CBroadcast_WebRTCLookupTURNServer_ResponseDefaultTypeInternal;
extern CBroadcast_WebRTCLookupTURNServer_ResponseDefaultTypeInternal _CBroadcast_WebRTCLookupTURNServer_Response_default_instance_;
class CBroadcast_WebRTCNeedTURNServer_Notification;
struct CBroadcast_WebRTCNeedTURNServer_NotificationDefaultTypeInternal;
extern CBroadcast_WebRTCNeedTURNServer_NotificationDefaultTypeInternal _CBroadcast_WebRTCNeedTURNServer_Notification_default_instance_;
class CBroadcast_WebRTCSetAnswer_Notification;
struct CBroadcast_WebRTCSetAnswer_NotificationDefaultTypeInternal;
extern CBroadcast_WebRTCSetAnswer_NotificationDefaultTypeInternal _CBroadcast_WebRTCSetAnswer_Notification_default_instance_;
class CBroadcast_WebRTCSetAnswer_Request;
struct CBroadcast_WebRTCSetAnswer_RequestDefaultTypeInternal;
extern CBroadcast_WebRTCSetAnswer_RequestDefaultTypeInternal _CBroadcast_WebRTCSetAnswer_Request_default_instance_;
class CBroadcast_WebRTCSetAnswer_Response;
struct CBroadcast_WebRTCSetAnswer_ResponseDefaultTypeInternal;
extern CBroadcast_WebRTCSetAnswer_ResponseDefaultTypeInternal _CBroadcast_WebRTCSetAnswer_Response_default_instance_;
class CBroadcast_WebRTCStartResult_Request;
struct CBroadcast_WebRTCStartResult_RequestDefaultTypeInternal;
extern CBroadcast_WebRTCStartResult_RequestDefaultTypeInternal _CBroadcast_WebRTCStartResult_Request_default_instance_;
class CBroadcast_WebRTCStartResult_Response;
struct CBroadcast_WebRTCStartResult_ResponseDefaultTypeInternal;
extern CBroadcast_WebRTCStartResult_ResponseDefaultTypeInternal _CBroadcast_WebRTCStartResult_Response_default_instance_;
class CBroadcast_WebRTCStart_Notification;
struct CBroadcast_WebRTCStart_NotificationDefaultTypeInternal;
extern CBroadcast_WebRTCStart_NotificationDefaultTypeInternal _CBroadcast_WebRTCStart_Notification_default_instance_;
class CBroadcast_WebRTCStopped_Request;
struct CBroadcast_WebRTCStopped_RequestDefaultTypeInternal;
extern CBroadcast_WebRTCStopped_RequestDefaultTypeInternal _CBroadcast_WebRTCStopped_Request_default_instance_;
class CBroadcast_WebRTCStopped_Response;
struct CBroadcast_WebRTCStopped_ResponseDefaultTypeInternal;
extern CBroadcast_WebRTCStopped_ResponseDefaultTypeInternal _CBroadcast_WebRTCStopped_Response_default_instance_;
class CBroadcast_WebRTC_Candidate;
struct CBroadcast_WebRTC_CandidateDefaultTypeInternal;
extern CBroadcast_WebRTC_CandidateDefaultTypeInternal _CBroadcast_WebRTC_Candidate_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CBroadcast_BeginBroadcastSession_Request* Arena::CreateMaybeMessage<::CBroadcast_BeginBroadcastSession_Request>(Arena*);
template<> ::CBroadcast_BeginBroadcastSession_Response* Arena::CreateMaybeMessage<::CBroadcast_BeginBroadcastSession_Response>(Arena*);
template<> ::CBroadcast_BroadcastChannelLive_Notification* Arena::CreateMaybeMessage<::CBroadcast_BroadcastChannelLive_Notification>(Arena*);
template<> ::CBroadcast_BroadcastStatus_Notification* Arena::CreateMaybeMessage<::CBroadcast_BroadcastStatus_Notification>(Arena*);
template<> ::CBroadcast_BroadcastUploadStarted_Notification* Arena::CreateMaybeMessage<::CBroadcast_BroadcastUploadStarted_Notification>(Arena*);
template<> ::CBroadcast_BroadcastViewerState_Notification* Arena::CreateMaybeMessage<::CBroadcast_BroadcastViewerState_Notification>(Arena*);
template<> ::CBroadcast_EndBroadcastSession_Request* Arena::CreateMaybeMessage<::CBroadcast_EndBroadcastSession_Request>(Arena*);
template<> ::CBroadcast_EndBroadcastSession_Response* Arena::CreateMaybeMessage<::CBroadcast_EndBroadcastSession_Response>(Arena*);
template<> ::CBroadcast_GetBroadcastChatInfo_Request* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastChatInfo_Request>(Arena*);
template<> ::CBroadcast_GetBroadcastChatInfo_Response* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastChatInfo_Response>(Arena*);
template<> ::CBroadcast_GetBroadcastChatUserNames_Request* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastChatUserNames_Request>(Arena*);
template<> ::CBroadcast_GetBroadcastChatUserNames_Response* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastChatUserNames_Response>(Arena*);
template<> ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName>(Arena*);
template<> ::CBroadcast_GetBroadcastStatus_Request* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastStatus_Request>(Arena*);
template<> ::CBroadcast_GetBroadcastStatus_Response* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastStatus_Response>(Arena*);
template<> ::CBroadcast_GetBroadcastThumbnail_Request* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastThumbnail_Request>(Arena*);
template<> ::CBroadcast_GetBroadcastThumbnail_Response* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastThumbnail_Response>(Arena*);
template<> ::CBroadcast_GetBroadcastUploadStats_Request* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastUploadStats_Request>(Arena*);
template<> ::CBroadcast_GetBroadcastUploadStats_Response* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastUploadStats_Response>(Arena*);
template<> ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastUploadStats_Response_UploadStats>(Arena*);
template<> ::CBroadcast_GetBroadcastViewerStats_Request* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastViewerStats_Request>(Arena*);
template<> ::CBroadcast_GetBroadcastViewerStats_Response* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastViewerStats_Response>(Arena*);
template<> ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastViewerStats_Response_CountryStats>(Arena*);
template<> ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* Arena::CreateMaybeMessage<::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats>(Arena*);
template<> ::CBroadcast_GetBuildClipStatus_Request* Arena::CreateMaybeMessage<::CBroadcast_GetBuildClipStatus_Request>(Arena*);
template<> ::CBroadcast_GetBuildClipStatus_Response* Arena::CreateMaybeMessage<::CBroadcast_GetBuildClipStatus_Response>(Arena*);
template<> ::CBroadcast_GetClipDetails_Request* Arena::CreateMaybeMessage<::CBroadcast_GetClipDetails_Request>(Arena*);
template<> ::CBroadcast_GetClipDetails_Response* Arena::CreateMaybeMessage<::CBroadcast_GetClipDetails_Response>(Arena*);
template<> ::CBroadcast_GetRTMPInfo_Request* Arena::CreateMaybeMessage<::CBroadcast_GetRTMPInfo_Request>(Arena*);
template<> ::CBroadcast_GetRTMPInfo_Response* Arena::CreateMaybeMessage<::CBroadcast_GetRTMPInfo_Response>(Arena*);
template<> ::CBroadcast_HeartbeatBroadcast_Notification* Arena::CreateMaybeMessage<::CBroadcast_HeartbeatBroadcast_Notification>(Arena*);
template<> ::CBroadcast_InviteToBroadcast_Request* Arena::CreateMaybeMessage<::CBroadcast_InviteToBroadcast_Request>(Arena*);
template<> ::CBroadcast_InviteToBroadcast_Response* Arena::CreateMaybeMessage<::CBroadcast_InviteToBroadcast_Response>(Arena*);
template<> ::CBroadcast_MuteBroadcastChatUser_Request* Arena::CreateMaybeMessage<::CBroadcast_MuteBroadcastChatUser_Request>(Arena*);
template<> ::CBroadcast_MuteBroadcastChatUser_Response* Arena::CreateMaybeMessage<::CBroadcast_MuteBroadcastChatUser_Response>(Arena*);
template<> ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* Arena::CreateMaybeMessage<::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification>(Arena*);
template<> ::CBroadcast_NotifyBroadcastUploadStop_Notification* Arena::CreateMaybeMessage<::CBroadcast_NotifyBroadcastUploadStop_Notification>(Arena*);
template<> ::CBroadcast_PostChatMessage_Request* Arena::CreateMaybeMessage<::CBroadcast_PostChatMessage_Request>(Arena*);
template<> ::CBroadcast_PostChatMessage_Response* Arena::CreateMaybeMessage<::CBroadcast_PostChatMessage_Response>(Arena*);
template<> ::CBroadcast_RemoveUserChatText_Request* Arena::CreateMaybeMessage<::CBroadcast_RemoveUserChatText_Request>(Arena*);
template<> ::CBroadcast_RemoveUserChatText_Response* Arena::CreateMaybeMessage<::CBroadcast_RemoveUserChatText_Response>(Arena*);
template<> ::CBroadcast_SendBroadcastStateToServer_Request* Arena::CreateMaybeMessage<::CBroadcast_SendBroadcastStateToServer_Request>(Arena*);
template<> ::CBroadcast_SendBroadcastStateToServer_Response* Arena::CreateMaybeMessage<::CBroadcast_SendBroadcastStateToServer_Response>(Arena*);
template<> ::CBroadcast_SendThumbnailToRelay_Notification* Arena::CreateMaybeMessage<::CBroadcast_SendThumbnailToRelay_Notification>(Arena*);
template<> ::CBroadcast_SessionClosed_Notification* Arena::CreateMaybeMessage<::CBroadcast_SessionClosed_Notification>(Arena*);
template<> ::CBroadcast_SetClipDetails_Request* Arena::CreateMaybeMessage<::CBroadcast_SetClipDetails_Request>(Arena*);
template<> ::CBroadcast_SetClipDetails_Response* Arena::CreateMaybeMessage<::CBroadcast_SetClipDetails_Response>(Arena*);
template<> ::CBroadcast_SetRTMPInfo_Request* Arena::CreateMaybeMessage<::CBroadcast_SetRTMPInfo_Request>(Arena*);
template<> ::CBroadcast_SetRTMPInfo_Response* Arena::CreateMaybeMessage<::CBroadcast_SetRTMPInfo_Response>(Arena*);
template<> ::CBroadcast_StartBroadcastUpload_Request* Arena::CreateMaybeMessage<::CBroadcast_StartBroadcastUpload_Request>(Arena*);
template<> ::CBroadcast_StartBroadcastUpload_Response* Arena::CreateMaybeMessage<::CBroadcast_StartBroadcastUpload_Response>(Arena*);
template<> ::CBroadcast_StartBuildClip_Request* Arena::CreateMaybeMessage<::CBroadcast_StartBuildClip_Request>(Arena*);
template<> ::CBroadcast_StartBuildClip_Response* Arena::CreateMaybeMessage<::CBroadcast_StartBuildClip_Response>(Arena*);
template<> ::CBroadcast_StopBroadcastUpload_Notification* Arena::CreateMaybeMessage<::CBroadcast_StopBroadcastUpload_Notification>(Arena*);
template<> ::CBroadcast_StopWatchingBroadcast_Notification* Arena::CreateMaybeMessage<::CBroadcast_StopWatchingBroadcast_Notification>(Arena*);
template<> ::CBroadcast_UpdateChatMessageFlair_Request* Arena::CreateMaybeMessage<::CBroadcast_UpdateChatMessageFlair_Request>(Arena*);
template<> ::CBroadcast_UpdateChatMessageFlair_Response* Arena::CreateMaybeMessage<::CBroadcast_UpdateChatMessageFlair_Response>(Arena*);
template<> ::CBroadcast_ViewerBroadcastInvite_Notification* Arena::CreateMaybeMessage<::CBroadcast_ViewerBroadcastInvite_Notification>(Arena*);
template<> ::CBroadcast_WaitingBroadcastViewer_Notification* Arena::CreateMaybeMessage<::CBroadcast_WaitingBroadcastViewer_Notification>(Arena*);
template<> ::CBroadcast_WatchBroadcast_Request* Arena::CreateMaybeMessage<::CBroadcast_WatchBroadcast_Request>(Arena*);
template<> ::CBroadcast_WatchBroadcast_Response* Arena::CreateMaybeMessage<::CBroadcast_WatchBroadcast_Response>(Arena*);
template<> ::CBroadcast_WebRTCAddHostCandidate_Request* Arena::CreateMaybeMessage<::CBroadcast_WebRTCAddHostCandidate_Request>(Arena*);
template<> ::CBroadcast_WebRTCAddHostCandidate_Response* Arena::CreateMaybeMessage<::CBroadcast_WebRTCAddHostCandidate_Response>(Arena*);
template<> ::CBroadcast_WebRTCAddViewerCandidate_Notification* Arena::CreateMaybeMessage<::CBroadcast_WebRTCAddViewerCandidate_Notification>(Arena*);
template<> ::CBroadcast_WebRTCAddViewerCandidate_Request* Arena::CreateMaybeMessage<::CBroadcast_WebRTCAddViewerCandidate_Request>(Arena*);
template<> ::CBroadcast_WebRTCAddViewerCandidate_Response* Arena::CreateMaybeMessage<::CBroadcast_WebRTCAddViewerCandidate_Response>(Arena*);
template<> ::CBroadcast_WebRTCGetHostCandidates_Request* Arena::CreateMaybeMessage<::CBroadcast_WebRTCGetHostCandidates_Request>(Arena*);
template<> ::CBroadcast_WebRTCGetHostCandidates_Response* Arena::CreateMaybeMessage<::CBroadcast_WebRTCGetHostCandidates_Response>(Arena*);
template<> ::CBroadcast_WebRTCHaveTURNServer_Notification* Arena::CreateMaybeMessage<::CBroadcast_WebRTCHaveTURNServer_Notification>(Arena*);
template<> ::CBroadcast_WebRTCLookupTURNServer_Request* Arena::CreateMaybeMessage<::CBroadcast_WebRTCLookupTURNServer_Request>(Arena*);
template<> ::CBroadcast_WebRTCLookupTURNServer_Response* Arena::CreateMaybeMessage<::CBroadcast_WebRTCLookupTURNServer_Response>(Arena*);
template<> ::CBroadcast_WebRTCNeedTURNServer_Notification* Arena::CreateMaybeMessage<::CBroadcast_WebRTCNeedTURNServer_Notification>(Arena*);
template<> ::CBroadcast_WebRTCSetAnswer_Notification* Arena::CreateMaybeMessage<::CBroadcast_WebRTCSetAnswer_Notification>(Arena*);
template<> ::CBroadcast_WebRTCSetAnswer_Request* Arena::CreateMaybeMessage<::CBroadcast_WebRTCSetAnswer_Request>(Arena*);
template<> ::CBroadcast_WebRTCSetAnswer_Response* Arena::CreateMaybeMessage<::CBroadcast_WebRTCSetAnswer_Response>(Arena*);
template<> ::CBroadcast_WebRTCStartResult_Request* Arena::CreateMaybeMessage<::CBroadcast_WebRTCStartResult_Request>(Arena*);
template<> ::CBroadcast_WebRTCStartResult_Response* Arena::CreateMaybeMessage<::CBroadcast_WebRTCStartResult_Response>(Arena*);
template<> ::CBroadcast_WebRTCStart_Notification* Arena::CreateMaybeMessage<::CBroadcast_WebRTCStart_Notification>(Arena*);
template<> ::CBroadcast_WebRTCStopped_Request* Arena::CreateMaybeMessage<::CBroadcast_WebRTCStopped_Request>(Arena*);
template<> ::CBroadcast_WebRTCStopped_Response* Arena::CreateMaybeMessage<::CBroadcast_WebRTCStopped_Response>(Arena*);
template<> ::CBroadcast_WebRTC_Candidate* Arena::CreateMaybeMessage<::CBroadcast_WebRTC_Candidate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CBroadcast_WatchBroadcast_Response_EWatchResponse : int {
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseReady = 1,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseNotAvailable = 2,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForApproval = 3,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForStart = 4,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseInvalidSession = 5,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseTooManyBroadcasts = 6,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForReconnect = 7,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseSystemNotSupported = 8,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseUserRestricted = 9,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseClientOutOfDate = 10,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponsePoorUploadQuality = 11,
  CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseMissingSubscription = 12
};
bool CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(int value);
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_MIN = CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseReady;
constexpr CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_MAX = CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseMissingSubscription;
constexpr int CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_ARRAYSIZE = CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor();
template<typename T>
inline const std::string& CBroadcast_WatchBroadcast_Response_EWatchResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CBroadcast_WatchBroadcast_Response_EWatchResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CBroadcast_WatchBroadcast_Response_EWatchResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor(), enum_t_value);
}
inline bool CBroadcast_WatchBroadcast_Response_EWatchResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CBroadcast_WatchBroadcast_Response_EWatchResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CBroadcast_WatchBroadcast_Response_EWatchResponse>(
    CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor(), name, value);
}
enum CBroadcast_BroadcastViewerState_Notification_EViewerState : int {
  CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerNeedsApproval = 1,
  CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerWatching = 2,
  CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerLeft = 3
};
bool CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(int value);
constexpr CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_MIN = CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerNeedsApproval;
constexpr CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_MAX = CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerLeft;
constexpr int CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_ARRAYSIZE = CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor();
template<typename T>
inline const std::string& CBroadcast_BroadcastViewerState_Notification_EViewerState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CBroadcast_BroadcastViewerState_Notification_EViewerState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CBroadcast_BroadcastViewerState_Notification_EViewerState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor(), enum_t_value);
}
inline bool CBroadcast_BroadcastViewerState_Notification_EViewerState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CBroadcast_BroadcastViewerState_Notification_EViewerState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CBroadcast_BroadcastViewerState_Notification_EViewerState>(
    CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor(), name, value);
}
enum EBroadcastWatchLocation : int {
  k_EBroadcastWatchLocation_Invalid = 0,
  k_EBroadcastWatchLocation_SteamTV_Tab = 1,
  k_EBroadcastWatchLocation_SteamTV_WatchParty = 2,
  k_EBroadcastWatchLocation_Chat_Tab = 3,
  k_EBroadcastWatchLocation_Chat_WatchParty = 4,
  k_EBroadcastWatchLocation_CommunityPage = 5,
  k_EBroadcastWatchLocation_StoreAppPage = 6,
  k_EBroadcastWatchLocation_InGame = 7,
  k_EBroadcastWatchLocation_BigPicture = 8,
  k_EBroadcastWatchLocation_SalesPage = 9,
  k_EBroadcastWatchLocation_CuratorPage = 10,
  k_EBroadcastWatchLocation_DeveloperPage = 11,
  k_EBroadcastWatchLocation_Chat_Friends = 12,
  k_EBroadcastWatchLocation_SteamTV_Web = 13,
  k_EBroadcastWatchLocation_DesktopUI_Overlay = 14
};
bool EBroadcastWatchLocation_IsValid(int value);
constexpr EBroadcastWatchLocation EBroadcastWatchLocation_MIN = k_EBroadcastWatchLocation_Invalid;
constexpr EBroadcastWatchLocation EBroadcastWatchLocation_MAX = k_EBroadcastWatchLocation_DesktopUI_Overlay;
constexpr int EBroadcastWatchLocation_ARRAYSIZE = EBroadcastWatchLocation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastWatchLocation_descriptor();
template<typename T>
inline const std::string& EBroadcastWatchLocation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EBroadcastWatchLocation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EBroadcastWatchLocation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EBroadcastWatchLocation_descriptor(), enum_t_value);
}
inline bool EBroadcastWatchLocation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EBroadcastWatchLocation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EBroadcastWatchLocation>(
    EBroadcastWatchLocation_descriptor(), name, value);
}
enum EBroadcastChatPermission : int {
  k_EBroadcastChatPermissionPublic = 0,
  k_EBroadcastChatPermissionOwnsApp = 1
};
bool EBroadcastChatPermission_IsValid(int value);
constexpr EBroadcastChatPermission EBroadcastChatPermission_MIN = k_EBroadcastChatPermissionPublic;
constexpr EBroadcastChatPermission EBroadcastChatPermission_MAX = k_EBroadcastChatPermissionOwnsApp;
constexpr int EBroadcastChatPermission_ARRAYSIZE = EBroadcastChatPermission_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastChatPermission_descriptor();
template<typename T>
inline const std::string& EBroadcastChatPermission_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EBroadcastChatPermission>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EBroadcastChatPermission_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EBroadcastChatPermission_descriptor(), enum_t_value);
}
inline bool EBroadcastChatPermission_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EBroadcastChatPermission* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EBroadcastChatPermission>(
    EBroadcastChatPermission_descriptor(), name, value);
}
// ===================================================================

class CBroadcast_BeginBroadcastSession_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_BeginBroadcastSession_Request) */ {
 public:
  inline CBroadcast_BeginBroadcastSession_Request() : CBroadcast_BeginBroadcastSession_Request(nullptr) {}
  ~CBroadcast_BeginBroadcastSession_Request() override;
  explicit constexpr CBroadcast_BeginBroadcastSession_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_BeginBroadcastSession_Request(const CBroadcast_BeginBroadcastSession_Request& from);
  CBroadcast_BeginBroadcastSession_Request(CBroadcast_BeginBroadcastSession_Request&& from) noexcept
    : CBroadcast_BeginBroadcastSession_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_BeginBroadcastSession_Request& operator=(const CBroadcast_BeginBroadcastSession_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_BeginBroadcastSession_Request& operator=(CBroadcast_BeginBroadcastSession_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_BeginBroadcastSession_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_BeginBroadcastSession_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_BeginBroadcastSession_Request*>(
               &_CBroadcast_BeginBroadcastSession_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CBroadcast_BeginBroadcastSession_Request& a, CBroadcast_BeginBroadcastSession_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_BeginBroadcastSession_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_BeginBroadcastSession_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_BeginBroadcastSession_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_BeginBroadcastSession_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_BeginBroadcastSession_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_BeginBroadcastSession_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_BeginBroadcastSession_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_BeginBroadcastSession_Request";
  }
  protected:
  explicit CBroadcast_BeginBroadcastSession_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 4,
    kClientBetaFieldNumber = 8,
    kGameidFieldNumber = 2,
    kClientInstanceIdFieldNumber = 3,
    kPermissionFieldNumber = 1,
    kCellidFieldNumber = 5,
    kRtmpTokenFieldNumber = 6,
    kThumbnailUploadFieldNumber = 7,
    kAllowWebrtcFieldNumber = 10,
    kSysidFieldNumber = 9,
  };
  // optional string title = 4;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string client_beta = 8;
  bool has_client_beta() const;
  private:
  bool _internal_has_client_beta() const;
  public:
  void clear_client_beta();
  const std::string& client_beta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_beta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_beta();
  PROTOBUF_NODISCARD std::string* release_client_beta();
  void set_allocated_client_beta(std::string* client_beta);
  private:
  const std::string& _internal_client_beta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_beta(const std::string& value);
  std::string* _internal_mutable_client_beta();
  public:

  // optional uint64 gameid = 2;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  uint64_t gameid() const;
  void set_gameid(uint64_t value);
  private:
  uint64_t _internal_gameid() const;
  void _internal_set_gameid(uint64_t value);
  public:

  // optional uint64 client_instance_id = 3;
  bool has_client_instance_id() const;
  private:
  bool _internal_has_client_instance_id() const;
  public:
  void clear_client_instance_id();
  uint64_t client_instance_id() const;
  void set_client_instance_id(uint64_t value);
  private:
  uint64_t _internal_client_instance_id() const;
  void _internal_set_client_instance_id(uint64_t value);
  public:

  // optional int32 permission = 1;
  bool has_permission() const;
  private:
  bool _internal_has_permission() const;
  public:
  void clear_permission();
  int32_t permission() const;
  void set_permission(int32_t value);
  private:
  int32_t _internal_permission() const;
  void _internal_set_permission(int32_t value);
  public:

  // optional uint32 cellid = 5;
  bool has_cellid() const;
  private:
  bool _internal_has_cellid() const;
  public:
  void clear_cellid();
  uint32_t cellid() const;
  void set_cellid(uint32_t value);
  private:
  uint32_t _internal_cellid() const;
  void _internal_set_cellid(uint32_t value);
  public:

  // optional uint64 rtmp_token = 6;
  bool has_rtmp_token() const;
  private:
  bool _internal_has_rtmp_token() const;
  public:
  void clear_rtmp_token();
  uint64_t rtmp_token() const;
  void set_rtmp_token(uint64_t value);
  private:
  uint64_t _internal_rtmp_token() const;
  void _internal_set_rtmp_token(uint64_t value);
  public:

  // optional bool thumbnail_upload = 7;
  bool has_thumbnail_upload() const;
  private:
  bool _internal_has_thumbnail_upload() const;
  public:
  void clear_thumbnail_upload();
  bool thumbnail_upload() const;
  void set_thumbnail_upload(bool value);
  private:
  bool _internal_thumbnail_upload() const;
  void _internal_set_thumbnail_upload(bool value);
  public:

  // optional bool allow_webrtc = 10;
  bool has_allow_webrtc() const;
  private:
  bool _internal_has_allow_webrtc() const;
  public:
  void clear_allow_webrtc();
  bool allow_webrtc() const;
  void set_allow_webrtc(bool value);
  private:
  bool _internal_allow_webrtc() const;
  void _internal_set_allow_webrtc(bool value);
  public:

  // optional uint32 sysid = 9;
  bool has_sysid() const;
  private:
  bool _internal_has_sysid() const;
  public:
  void clear_sysid();
  uint32_t sysid() const;
  void set_sysid(uint32_t value);
  private:
  uint32_t _internal_sysid() const;
  void _internal_set_sysid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_BeginBroadcastSession_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_beta_;
  uint64_t gameid_;
  uint64_t client_instance_id_;
  int32_t permission_;
  uint32_t cellid_;
  uint64_t rtmp_token_;
  bool thumbnail_upload_;
  bool allow_webrtc_;
  uint32_t sysid_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_BeginBroadcastSession_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_BeginBroadcastSession_Response) */ {
 public:
  inline CBroadcast_BeginBroadcastSession_Response() : CBroadcast_BeginBroadcastSession_Response(nullptr) {}
  ~CBroadcast_BeginBroadcastSession_Response() override;
  explicit constexpr CBroadcast_BeginBroadcastSession_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_BeginBroadcastSession_Response(const CBroadcast_BeginBroadcastSession_Response& from);
  CBroadcast_BeginBroadcastSession_Response(CBroadcast_BeginBroadcastSession_Response&& from) noexcept
    : CBroadcast_BeginBroadcastSession_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_BeginBroadcastSession_Response& operator=(const CBroadcast_BeginBroadcastSession_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_BeginBroadcastSession_Response& operator=(CBroadcast_BeginBroadcastSession_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_BeginBroadcastSession_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_BeginBroadcastSession_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_BeginBroadcastSession_Response*>(
               &_CBroadcast_BeginBroadcastSession_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CBroadcast_BeginBroadcastSession_Response& a, CBroadcast_BeginBroadcastSession_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_BeginBroadcastSession_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_BeginBroadcastSession_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_BeginBroadcastSession_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_BeginBroadcastSession_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_BeginBroadcastSession_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_BeginBroadcastSession_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_BeginBroadcastSession_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_BeginBroadcastSession_Response";
  }
  protected:
  explicit CBroadcast_BeginBroadcastSession_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThumbnailUploadAddressFieldNumber = 2,
    kThumbnailUploadTokenFieldNumber = 3,
    kBroadcastIdFieldNumber = 1,
    kThumbnailIntervalSecondsFieldNumber = 4,
    kHeartbeatIntervalSecondsFieldNumber = 5,
  };
  // optional string thumbnail_upload_address = 2 [(.description) = "Http address to upload the thumbnail data."];
  bool has_thumbnail_upload_address() const;
  private:
  bool _internal_has_thumbnail_upload_address() const;
  public:
  void clear_thumbnail_upload_address();
  const std::string& thumbnail_upload_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail_upload_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail_upload_address();
  PROTOBUF_NODISCARD std::string* release_thumbnail_upload_address();
  void set_allocated_thumbnail_upload_address(std::string* thumbnail_upload_address);
  private:
  const std::string& _internal_thumbnail_upload_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail_upload_address(const std::string& value);
  std::string* _internal_mutable_thumbnail_upload_address();
  public:

  // optional string thumbnail_upload_token = 3 [(.description) = "token to authorize as broadcaster to upload content to the relay."];
  bool has_thumbnail_upload_token() const;
  private:
  bool _internal_has_thumbnail_upload_token() const;
  public:
  void clear_thumbnail_upload_token();
  const std::string& thumbnail_upload_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail_upload_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail_upload_token();
  PROTOBUF_NODISCARD std::string* release_thumbnail_upload_token();
  void set_allocated_thumbnail_upload_token(std::string* thumbnail_upload_token);
  private:
  const std::string& _internal_thumbnail_upload_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail_upload_token(const std::string& value);
  std::string* _internal_mutable_thumbnail_upload_token();
  public:

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // optional uint32 thumbnail_interval_seconds = 4 [(.description) = "how many seconds between thumbnails"];
  bool has_thumbnail_interval_seconds() const;
  private:
  bool _internal_has_thumbnail_interval_seconds() const;
  public:
  void clear_thumbnail_interval_seconds();
  uint32_t thumbnail_interval_seconds() const;
  void set_thumbnail_interval_seconds(uint32_t value);
  private:
  uint32_t _internal_thumbnail_interval_seconds() const;
  void _internal_set_thumbnail_interval_seconds(uint32_t value);
  public:

  // optional uint32 heartbeat_interval_seconds = 5 [(.description) = "how many seconds between session heartbeats"];
  bool has_heartbeat_interval_seconds() const;
  private:
  bool _internal_has_heartbeat_interval_seconds() const;
  public:
  void clear_heartbeat_interval_seconds();
  uint32_t heartbeat_interval_seconds() const;
  void set_heartbeat_interval_seconds(uint32_t value);
  private:
  uint32_t _internal_heartbeat_interval_seconds() const;
  void _internal_set_heartbeat_interval_seconds(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_BeginBroadcastSession_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_upload_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_upload_token_;
  uint64_t broadcast_id_;
  uint32_t thumbnail_interval_seconds_;
  uint32_t heartbeat_interval_seconds_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_EndBroadcastSession_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_EndBroadcastSession_Request) */ {
 public:
  inline CBroadcast_EndBroadcastSession_Request() : CBroadcast_EndBroadcastSession_Request(nullptr) {}
  ~CBroadcast_EndBroadcastSession_Request() override;
  explicit constexpr CBroadcast_EndBroadcastSession_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_EndBroadcastSession_Request(const CBroadcast_EndBroadcastSession_Request& from);
  CBroadcast_EndBroadcastSession_Request(CBroadcast_EndBroadcastSession_Request&& from) noexcept
    : CBroadcast_EndBroadcastSession_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_EndBroadcastSession_Request& operator=(const CBroadcast_EndBroadcastSession_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_EndBroadcastSession_Request& operator=(CBroadcast_EndBroadcastSession_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_EndBroadcastSession_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_EndBroadcastSession_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_EndBroadcastSession_Request*>(
               &_CBroadcast_EndBroadcastSession_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CBroadcast_EndBroadcastSession_Request& a, CBroadcast_EndBroadcastSession_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_EndBroadcastSession_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_EndBroadcastSession_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_EndBroadcastSession_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_EndBroadcastSession_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_EndBroadcastSession_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_EndBroadcastSession_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_EndBroadcastSession_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_EndBroadcastSession_Request";
  }
  protected:
  explicit CBroadcast_EndBroadcastSession_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastIdFieldNumber = 1,
  };
  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_EndBroadcastSession_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t broadcast_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_EndBroadcastSession_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CBroadcast_EndBroadcastSession_Response) */ {
 public:
  inline CBroadcast_EndBroadcastSession_Response() : CBroadcast_EndBroadcastSession_Response(nullptr) {}
  explicit constexpr CBroadcast_EndBroadcastSession_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_EndBroadcastSession_Response(const CBroadcast_EndBroadcastSession_Response& from);
  CBroadcast_EndBroadcastSession_Response(CBroadcast_EndBroadcastSession_Response&& from) noexcept
    : CBroadcast_EndBroadcastSession_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_EndBroadcastSession_Response& operator=(const CBroadcast_EndBroadcastSession_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_EndBroadcastSession_Response& operator=(CBroadcast_EndBroadcastSession_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_EndBroadcastSession_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_EndBroadcastSession_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_EndBroadcastSession_Response*>(
               &_CBroadcast_EndBroadcastSession_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CBroadcast_EndBroadcastSession_Response& a, CBroadcast_EndBroadcastSession_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_EndBroadcastSession_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_EndBroadcastSession_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_EndBroadcastSession_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_EndBroadcastSession_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CBroadcast_EndBroadcastSession_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CBroadcast_EndBroadcastSession_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_EndBroadcastSession_Response";
  }
  protected:
  explicit CBroadcast_EndBroadcastSession_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBroadcast_EndBroadcastSession_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_StartBroadcastUpload_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_StartBroadcastUpload_Request) */ {
 public:
  inline CBroadcast_StartBroadcastUpload_Request() : CBroadcast_StartBroadcastUpload_Request(nullptr) {}
  ~CBroadcast_StartBroadcastUpload_Request() override;
  explicit constexpr CBroadcast_StartBroadcastUpload_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_StartBroadcastUpload_Request(const CBroadcast_StartBroadcastUpload_Request& from);
  CBroadcast_StartBroadcastUpload_Request(CBroadcast_StartBroadcastUpload_Request&& from) noexcept
    : CBroadcast_StartBroadcastUpload_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_StartBroadcastUpload_Request& operator=(const CBroadcast_StartBroadcastUpload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_StartBroadcastUpload_Request& operator=(CBroadcast_StartBroadcastUpload_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_StartBroadcastUpload_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_StartBroadcastUpload_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_StartBroadcastUpload_Request*>(
               &_CBroadcast_StartBroadcastUpload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CBroadcast_StartBroadcastUpload_Request& a, CBroadcast_StartBroadcastUpload_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_StartBroadcastUpload_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_StartBroadcastUpload_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_StartBroadcastUpload_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_StartBroadcastUpload_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_StartBroadcastUpload_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_StartBroadcastUpload_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_StartBroadcastUpload_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_StartBroadcastUpload_Request";
  }
  protected:
  explicit CBroadcast_StartBroadcastUpload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastIdFieldNumber = 1,
    kCellidFieldNumber = 2,
    kDelaySecondsFieldNumber = 4,
    kRtmpTokenFieldNumber = 5,
    kAsRtmpFieldNumber = 3,
    kIsReplayFieldNumber = 7,
    kUploadIpAddressFieldNumber = 6,
    kSysidFieldNumber = 8,
  };
  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // optional uint32 cellid = 2;
  bool has_cellid() const;
  private:
  bool _internal_has_cellid() const;
  public:
  void clear_cellid();
  uint32_t cellid() const;
  void set_cellid(uint32_t value);
  private:
  uint32_t _internal_cellid() const;
  void _internal_set_cellid(uint32_t value);
  public:

  // optional uint32 delay_seconds = 4;
  bool has_delay_seconds() const;
  private:
  bool _internal_has_delay_seconds() const;
  public:
  void clear_delay_seconds();
  uint32_t delay_seconds() const;
  void set_delay_seconds(uint32_t value);
  private:
  uint32_t _internal_delay_seconds() const;
  void _internal_set_delay_seconds(uint32_t value);
  public:

  // optional uint64 rtmp_token = 5 [default = 0, (.description) = "Only set during RTMP uploads; secret key from the user."];
  bool has_rtmp_token() const;
  private:
  bool _internal_has_rtmp_token() const;
  public:
  void clear_rtmp_token();
  uint64_t rtmp_token() const;
  void set_rtmp_token(uint64_t value);
  private:
  uint64_t _internal_rtmp_token() const;
  void _internal_set_rtmp_token(uint64_t value);
  public:

  // optional bool as_rtmp = 3;
  bool has_as_rtmp() const;
  private:
  bool _internal_has_as_rtmp() const;
  public:
  void clear_as_rtmp();
  bool as_rtmp() const;
  void set_as_rtmp(bool value);
  private:
  bool _internal_as_rtmp() const;
  void _internal_set_as_rtmp(bool value);
  public:

  // optional bool is_replay = 7;
  bool has_is_replay() const;
  private:
  bool _internal_has_is_replay() const;
  public:
  void clear_is_replay();
  bool is_replay() const;
  void set_is_replay(bool value);
  private:
  bool _internal_is_replay() const;
  void _internal_set_is_replay(bool value);
  public:

  // optional uint32 upload_ip_address = 6;
  bool has_upload_ip_address() const;
  private:
  bool _internal_has_upload_ip_address() const;
  public:
  void clear_upload_ip_address();
  uint32_t upload_ip_address() const;
  void set_upload_ip_address(uint32_t value);
  private:
  uint32_t _internal_upload_ip_address() const;
  void _internal_set_upload_ip_address(uint32_t value);
  public:

  // optional uint32 sysid = 8;
  bool has_sysid() const;
  private:
  bool _internal_has_sysid() const;
  public:
  void clear_sysid();
  uint32_t sysid() const;
  void set_sysid(uint32_t value);
  private:
  uint32_t _internal_sysid() const;
  void _internal_set_sysid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_StartBroadcastUpload_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t broadcast_id_;
  uint32_t cellid_;
  uint32_t delay_seconds_;
  uint64_t rtmp_token_;
  bool as_rtmp_;
  bool is_replay_;
  uint32_t upload_ip_address_;
  uint32_t sysid_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_StartBroadcastUpload_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_StartBroadcastUpload_Response) */ {
 public:
  inline CBroadcast_StartBroadcastUpload_Response() : CBroadcast_StartBroadcastUpload_Response(nullptr) {}
  ~CBroadcast_StartBroadcastUpload_Response() override;
  explicit constexpr CBroadcast_StartBroadcastUpload_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_StartBroadcastUpload_Response(const CBroadcast_StartBroadcastUpload_Response& from);
  CBroadcast_StartBroadcastUpload_Response(CBroadcast_StartBroadcastUpload_Response&& from) noexcept
    : CBroadcast_StartBroadcastUpload_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_StartBroadcastUpload_Response& operator=(const CBroadcast_StartBroadcastUpload_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_StartBroadcastUpload_Response& operator=(CBroadcast_StartBroadcastUpload_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_StartBroadcastUpload_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_StartBroadcastUpload_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_StartBroadcastUpload_Response*>(
               &_CBroadcast_StartBroadcastUpload_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CBroadcast_StartBroadcastUpload_Response& a, CBroadcast_StartBroadcastUpload_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_StartBroadcastUpload_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_StartBroadcastUpload_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_StartBroadcastUpload_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_StartBroadcastUpload_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_StartBroadcastUpload_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_StartBroadcastUpload_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_StartBroadcastUpload_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_StartBroadcastUpload_Response";
  }
  protected:
  explicit CBroadcast_StartBroadcastUpload_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUploadTokenFieldNumber = 1,
    kUploadAddressFieldNumber = 2,
    kHttpAddressFieldNumber = 7,
    kBroadcastUploadIdFieldNumber = 3,
    kEnableReplayFieldNumber = 6,
  };
  // optional string upload_token = 1;
  bool has_upload_token() const;
  private:
  bool _internal_has_upload_token() const;
  public:
  void clear_upload_token();
  const std::string& upload_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_upload_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_upload_token();
  PROTOBUF_NODISCARD std::string* release_upload_token();
  void set_allocated_upload_token(std::string* upload_token);
  private:
  const std::string& _internal_upload_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upload_token(const std::string& value);
  std::string* _internal_mutable_upload_token();
  public:

  // optional string upload_address = 2;
  bool has_upload_address() const;
  private:
  bool _internal_has_upload_address() const;
  public:
  void clear_upload_address();
  const std::string& upload_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_upload_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_upload_address();
  PROTOBUF_NODISCARD std::string* release_upload_address();
  void set_allocated_upload_address(std::string* upload_address);
  private:
  const std::string& _internal_upload_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upload_address(const std::string& value);
  std::string* _internal_mutable_upload_address();
  public:

  // optional string http_address = 7;
  bool has_http_address() const;
  private:
  bool _internal_has_http_address() const;
  public:
  void clear_http_address();
  const std::string& http_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_http_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_http_address();
  PROTOBUF_NODISCARD std::string* release_http_address();
  void set_allocated_http_address(std::string* http_address);
  private:
  const std::string& _internal_http_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_http_address(const std::string& value);
  std::string* _internal_mutable_http_address();
  public:

  // optional fixed64 broadcast_upload_id = 3;
  bool has_broadcast_upload_id() const;
  private:
  bool _internal_has_broadcast_upload_id() const;
  public:
  void clear_broadcast_upload_id();
  uint64_t broadcast_upload_id() const;
  void set_broadcast_upload_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_upload_id() const;
  void _internal_set_broadcast_upload_id(uint64_t value);
  public:

  // optional bool enable_replay = 6;
  bool has_enable_replay() const;
  private:
  bool _internal_has_enable_replay() const;
  public:
  void clear_enable_replay();
  bool enable_replay() const;
  void set_enable_replay(bool value);
  private:
  bool _internal_enable_replay() const;
  void _internal_set_enable_replay(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_StartBroadcastUpload_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upload_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upload_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr http_address_;
  uint64_t broadcast_upload_id_;
  bool enable_replay_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_NotifyBroadcastUploadStop_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_NotifyBroadcastUploadStop_Notification) */ {
 public:
  inline CBroadcast_NotifyBroadcastUploadStop_Notification() : CBroadcast_NotifyBroadcastUploadStop_Notification(nullptr) {}
  ~CBroadcast_NotifyBroadcastUploadStop_Notification() override;
  explicit constexpr CBroadcast_NotifyBroadcastUploadStop_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_NotifyBroadcastUploadStop_Notification(const CBroadcast_NotifyBroadcastUploadStop_Notification& from);
  CBroadcast_NotifyBroadcastUploadStop_Notification(CBroadcast_NotifyBroadcastUploadStop_Notification&& from) noexcept
    : CBroadcast_NotifyBroadcastUploadStop_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_NotifyBroadcastUploadStop_Notification& operator=(const CBroadcast_NotifyBroadcastUploadStop_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_NotifyBroadcastUploadStop_Notification& operator=(CBroadcast_NotifyBroadcastUploadStop_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_NotifyBroadcastUploadStop_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_NotifyBroadcastUploadStop_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_NotifyBroadcastUploadStop_Notification*>(
               &_CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CBroadcast_NotifyBroadcastUploadStop_Notification& a, CBroadcast_NotifyBroadcastUploadStop_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_NotifyBroadcastUploadStop_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_NotifyBroadcastUploadStop_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_NotifyBroadcastUploadStop_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_NotifyBroadcastUploadStop_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_NotifyBroadcastUploadStop_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_NotifyBroadcastUploadStop_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_NotifyBroadcastUploadStop_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_NotifyBroadcastUploadStop_Notification";
  }
  protected:
  explicit CBroadcast_NotifyBroadcastUploadStop_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastUploadIdFieldNumber = 1,
    kUploadResultFieldNumber = 2,
  };
  // optional fixed64 broadcast_upload_id = 1;
  bool has_broadcast_upload_id() const;
  private:
  bool _internal_has_broadcast_upload_id() const;
  public:
  void clear_broadcast_upload_id();
  uint64_t broadcast_upload_id() const;
  void set_broadcast_upload_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_upload_id() const;
  void _internal_set_broadcast_upload_id(uint64_t value);
  public:

  // optional uint32 upload_result = 2;
  bool has_upload_result() const;
  private:
  bool _internal_has_upload_result() const;
  public:
  void clear_upload_result();
  uint32_t upload_result() const;
  void set_upload_result(uint32_t value);
  private:
  uint32_t _internal_upload_result() const;
  void _internal_set_upload_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_NotifyBroadcastUploadStop_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t broadcast_upload_id_;
  uint32_t upload_result_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WatchBroadcast_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WatchBroadcast_Request) */ {
 public:
  inline CBroadcast_WatchBroadcast_Request() : CBroadcast_WatchBroadcast_Request(nullptr) {}
  ~CBroadcast_WatchBroadcast_Request() override;
  explicit constexpr CBroadcast_WatchBroadcast_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WatchBroadcast_Request(const CBroadcast_WatchBroadcast_Request& from);
  CBroadcast_WatchBroadcast_Request(CBroadcast_WatchBroadcast_Request&& from) noexcept
    : CBroadcast_WatchBroadcast_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WatchBroadcast_Request& operator=(const CBroadcast_WatchBroadcast_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WatchBroadcast_Request& operator=(CBroadcast_WatchBroadcast_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WatchBroadcast_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WatchBroadcast_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WatchBroadcast_Request*>(
               &_CBroadcast_WatchBroadcast_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CBroadcast_WatchBroadcast_Request& a, CBroadcast_WatchBroadcast_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WatchBroadcast_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WatchBroadcast_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WatchBroadcast_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WatchBroadcast_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WatchBroadcast_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WatchBroadcast_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WatchBroadcast_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WatchBroadcast_Request";
  }
  protected:
  explicit CBroadcast_WatchBroadcast_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kExistingBroadcastIdFieldNumber = 2,
    kViewerTokenFieldNumber = 3,
    kClientCellFieldNumber = 5,
    kWatchLocationFieldNumber = 6,
    kIsWebrtcFieldNumber = 7,
  };
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 existing_broadcast_id = 2 [(.description) = "broadcast session ID (optional, rejoin if specified)."];
  bool has_existing_broadcast_id() const;
  private:
  bool _internal_has_existing_broadcast_id() const;
  public:
  void clear_existing_broadcast_id();
  uint64_t existing_broadcast_id() const;
  void set_existing_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_existing_broadcast_id() const;
  void _internal_set_existing_broadcast_id(uint64_t value);
  public:

  // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
  bool has_viewer_token() const;
  private:
  bool _internal_has_viewer_token() const;
  public:
  void clear_viewer_token();
  uint64_t viewer_token() const;
  void set_viewer_token(uint64_t value);
  private:
  uint64_t _internal_viewer_token() const;
  void _internal_set_viewer_token(uint64_t value);
  public:

  // optional uint32 client_cell = 5;
  bool has_client_cell() const;
  private:
  bool _internal_has_client_cell() const;
  public:
  void clear_client_cell();
  uint32_t client_cell() const;
  void set_client_cell(uint32_t value);
  private:
  uint32_t _internal_client_cell() const;
  void _internal_set_client_cell(uint32_t value);
  public:

  // optional .EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
  bool has_watch_location() const;
  private:
  bool _internal_has_watch_location() const;
  public:
  void clear_watch_location();
  ::EBroadcastWatchLocation watch_location() const;
  void set_watch_location(::EBroadcastWatchLocation value);
  private:
  ::EBroadcastWatchLocation _internal_watch_location() const;
  void _internal_set_watch_location(::EBroadcastWatchLocation value);
  public:

  // optional bool is_webrtc = 7;
  bool has_is_webrtc() const;
  private:
  bool _internal_has_is_webrtc() const;
  public:
  void clear_is_webrtc();
  bool is_webrtc() const;
  void set_is_webrtc(bool value);
  private:
  bool _internal_is_webrtc() const;
  void _internal_set_is_webrtc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WatchBroadcast_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint64_t existing_broadcast_id_;
  uint64_t viewer_token_;
  uint32_t client_cell_;
  int watch_location_;
  bool is_webrtc_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WatchBroadcast_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WatchBroadcast_Response) */ {
 public:
  inline CBroadcast_WatchBroadcast_Response() : CBroadcast_WatchBroadcast_Response(nullptr) {}
  ~CBroadcast_WatchBroadcast_Response() override;
  explicit constexpr CBroadcast_WatchBroadcast_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WatchBroadcast_Response(const CBroadcast_WatchBroadcast_Response& from);
  CBroadcast_WatchBroadcast_Response(CBroadcast_WatchBroadcast_Response&& from) noexcept
    : CBroadcast_WatchBroadcast_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WatchBroadcast_Response& operator=(const CBroadcast_WatchBroadcast_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WatchBroadcast_Response& operator=(CBroadcast_WatchBroadcast_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WatchBroadcast_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WatchBroadcast_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WatchBroadcast_Response*>(
               &_CBroadcast_WatchBroadcast_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CBroadcast_WatchBroadcast_Response& a, CBroadcast_WatchBroadcast_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WatchBroadcast_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WatchBroadcast_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WatchBroadcast_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WatchBroadcast_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WatchBroadcast_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WatchBroadcast_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WatchBroadcast_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WatchBroadcast_Response";
  }
  protected:
  explicit CBroadcast_WatchBroadcast_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CBroadcast_WatchBroadcast_Response_EWatchResponse EWatchResponse;
  static constexpr EWatchResponse k_EWatchResponseReady =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseReady;
  static constexpr EWatchResponse k_EWatchResponseNotAvailable =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseNotAvailable;
  static constexpr EWatchResponse k_EWatchResponseWaitingForApproval =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForApproval;
  static constexpr EWatchResponse k_EWatchResponseWaitingForStart =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForStart;
  static constexpr EWatchResponse k_EWatchResponseInvalidSession =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseInvalidSession;
  static constexpr EWatchResponse k_EWatchResponseTooManyBroadcasts =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseTooManyBroadcasts;
  static constexpr EWatchResponse k_EWatchResponseWaitingForReconnect =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseWaitingForReconnect;
  static constexpr EWatchResponse k_EWatchResponseSystemNotSupported =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseSystemNotSupported;
  static constexpr EWatchResponse k_EWatchResponseUserRestricted =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseUserRestricted;
  static constexpr EWatchResponse k_EWatchResponseClientOutOfDate =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseClientOutOfDate;
  static constexpr EWatchResponse k_EWatchResponsePoorUploadQuality =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponsePoorUploadQuality;
  static constexpr EWatchResponse k_EWatchResponseMissingSubscription =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_k_EWatchResponseMissingSubscription;
  static inline bool EWatchResponse_IsValid(int value) {
    return CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(value);
  }
  static constexpr EWatchResponse EWatchResponse_MIN =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_MIN;
  static constexpr EWatchResponse EWatchResponse_MAX =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_MAX;
  static constexpr int EWatchResponse_ARRAYSIZE =
    CBroadcast_WatchBroadcast_Response_EWatchResponse_EWatchResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EWatchResponse_descriptor() {
    return CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EWatchResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EWatchResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EWatchResponse_Name.");
    return CBroadcast_WatchBroadcast_Response_EWatchResponse_Name(enum_t_value);
  }
  static inline bool EWatchResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EWatchResponse* value) {
    return CBroadcast_WatchBroadcast_Response_EWatchResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMpdUrlFieldNumber = 2,
    kTitleFieldNumber = 5,
    kHlsM3U8MasterUrlFieldNumber = 11,
    kThumbnailUrlFieldNumber = 13,
    kWebrtcOfferSdpFieldNumber = 16,
    kWebrtcTurnServerFieldNumber = 17,
    kCdnAuthUrlParametersFieldNumber = 20,
    kBroadcastIdFieldNumber = 3,
    kGameidFieldNumber = 4,
    kNumViewersFieldNumber = 6,
    kPermissionFieldNumber = 7,
    kViewerTokenFieldNumber = 10,
    kSecondsDelayFieldNumber = 9,
    kHeartbeatIntervalFieldNumber = 12,
    kIsRtmpFieldNumber = 8,
    kIsWebrtcFieldNumber = 14,
    kIsReplayFieldNumber = 18,
    kDurationFieldNumber = 19,
    kWebrtcSessionIdFieldNumber = 15,
    kResponseFieldNumber = 1,
  };
  // optional string mpd_url = 2;
  bool has_mpd_url() const;
  private:
  bool _internal_has_mpd_url() const;
  public:
  void clear_mpd_url();
  const std::string& mpd_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mpd_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mpd_url();
  PROTOBUF_NODISCARD std::string* release_mpd_url();
  void set_allocated_mpd_url(std::string* mpd_url);
  private:
  const std::string& _internal_mpd_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mpd_url(const std::string& value);
  std::string* _internal_mutable_mpd_url();
  public:

  // optional string title = 5;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string hls_m3u8_master_url = 11;
  bool has_hls_m3u8_master_url() const;
  private:
  bool _internal_has_hls_m3u8_master_url() const;
  public:
  void clear_hls_m3u8_master_url();
  const std::string& hls_m3u8_master_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hls_m3u8_master_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hls_m3u8_master_url();
  PROTOBUF_NODISCARD std::string* release_hls_m3u8_master_url();
  void set_allocated_hls_m3u8_master_url(std::string* hls_m3u8_master_url);
  private:
  const std::string& _internal_hls_m3u8_master_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hls_m3u8_master_url(const std::string& value);
  std::string* _internal_mutable_hls_m3u8_master_url();
  public:

  // optional string thumbnail_url = 13;
  bool has_thumbnail_url() const;
  private:
  bool _internal_has_thumbnail_url() const;
  public:
  void clear_thumbnail_url();
  const std::string& thumbnail_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail_url();
  PROTOBUF_NODISCARD std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(std::string* thumbnail_url);
  private:
  const std::string& _internal_thumbnail_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail_url(const std::string& value);
  std::string* _internal_mutable_thumbnail_url();
  public:

  // optional string webrtc_offer_sdp = 16;
  bool has_webrtc_offer_sdp() const;
  private:
  bool _internal_has_webrtc_offer_sdp() const;
  public:
  void clear_webrtc_offer_sdp();
  const std::string& webrtc_offer_sdp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_webrtc_offer_sdp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_webrtc_offer_sdp();
  PROTOBUF_NODISCARD std::string* release_webrtc_offer_sdp();
  void set_allocated_webrtc_offer_sdp(std::string* webrtc_offer_sdp);
  private:
  const std::string& _internal_webrtc_offer_sdp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_webrtc_offer_sdp(const std::string& value);
  std::string* _internal_mutable_webrtc_offer_sdp();
  public:

  // optional string webrtc_turn_server = 17;
  bool has_webrtc_turn_server() const;
  private:
  bool _internal_has_webrtc_turn_server() const;
  public:
  void clear_webrtc_turn_server();
  const std::string& webrtc_turn_server() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_webrtc_turn_server(ArgT0&& arg0, ArgT... args);
  std::string* mutable_webrtc_turn_server();
  PROTOBUF_NODISCARD std::string* release_webrtc_turn_server();
  void set_allocated_webrtc_turn_server(std::string* webrtc_turn_server);
  private:
  const std::string& _internal_webrtc_turn_server() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_webrtc_turn_server(const std::string& value);
  std::string* _internal_mutable_webrtc_turn_server();
  public:

  // optional string cdn_auth_url_parameters = 20;
  bool has_cdn_auth_url_parameters() const;
  private:
  bool _internal_has_cdn_auth_url_parameters() const;
  public:
  void clear_cdn_auth_url_parameters();
  const std::string& cdn_auth_url_parameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cdn_auth_url_parameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cdn_auth_url_parameters();
  PROTOBUF_NODISCARD std::string* release_cdn_auth_url_parameters();
  void set_allocated_cdn_auth_url_parameters(std::string* cdn_auth_url_parameters);
  private:
  const std::string& _internal_cdn_auth_url_parameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cdn_auth_url_parameters(const std::string& value);
  std::string* _internal_mutable_cdn_auth_url_parameters();
  public:

  // optional fixed64 broadcast_id = 3;
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // optional uint64 gameid = 4;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  uint64_t gameid() const;
  void set_gameid(uint64_t value);
  private:
  uint64_t _internal_gameid() const;
  void _internal_set_gameid(uint64_t value);
  public:

  // optional uint32 num_viewers = 6;
  bool has_num_viewers() const;
  private:
  bool _internal_has_num_viewers() const;
  public:
  void clear_num_viewers();
  uint32_t num_viewers() const;
  void set_num_viewers(uint32_t value);
  private:
  uint32_t _internal_num_viewers() const;
  void _internal_set_num_viewers(uint32_t value);
  public:

  // optional int32 permission = 7;
  bool has_permission() const;
  private:
  bool _internal_has_permission() const;
  public:
  void clear_permission();
  int32_t permission() const;
  void set_permission(int32_t value);
  private:
  int32_t _internal_permission() const;
  void _internal_set_permission(int32_t value);
  public:

  // optional fixed64 viewer_token = 10;
  bool has_viewer_token() const;
  private:
  bool _internal_has_viewer_token() const;
  public:
  void clear_viewer_token();
  uint64_t viewer_token() const;
  void set_viewer_token(uint64_t value);
  private:
  uint64_t _internal_viewer_token() const;
  void _internal_set_viewer_token(uint64_t value);
  public:

  // optional int32 seconds_delay = 9;
  bool has_seconds_delay() const;
  private:
  bool _internal_has_seconds_delay() const;
  public:
  void clear_seconds_delay();
  int32_t seconds_delay() const;
  void set_seconds_delay(int32_t value);
  private:
  int32_t _internal_seconds_delay() const;
  void _internal_set_seconds_delay(int32_t value);
  public:

  // optional int32 heartbeat_interval = 12;
  bool has_heartbeat_interval() const;
  private:
  bool _internal_has_heartbeat_interval() const;
  public:
  void clear_heartbeat_interval();
  int32_t heartbeat_interval() const;
  void set_heartbeat_interval(int32_t value);
  private:
  int32_t _internal_heartbeat_interval() const;
  void _internal_set_heartbeat_interval(int32_t value);
  public:

  // optional bool is_rtmp = 8;
  bool has_is_rtmp() const;
  private:
  bool _internal_has_is_rtmp() const;
  public:
  void clear_is_rtmp();
  bool is_rtmp() const;
  void set_is_rtmp(bool value);
  private:
  bool _internal_is_rtmp() const;
  void _internal_set_is_rtmp(bool value);
  public:

  // optional bool is_webrtc = 14;
  bool has_is_webrtc() const;
  private:
  bool _internal_has_is_webrtc() const;
  public:
  void clear_is_webrtc();
  bool is_webrtc() const;
  void set_is_webrtc(bool value);
  private:
  bool _internal_is_webrtc() const;
  void _internal_set_is_webrtc(bool value);
  public:

  // optional bool is_replay = 18;
  bool has_is_replay() const;
  private:
  bool _internal_has_is_replay() const;
  public:
  void clear_is_replay();
  bool is_replay() const;
  void set_is_replay(bool value);
  private:
  bool _internal_is_replay() const;
  void _internal_set_is_replay(bool value);
  public:

  // optional int32 duration = 19;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  int32_t duration() const;
  void set_duration(int32_t value);
  private:
  int32_t _internal_duration() const;
  void _internal_set_duration(int32_t value);
  public:

  // optional fixed64 webrtc_session_id = 15;
  bool has_webrtc_session_id() const;
  private:
  bool _internal_has_webrtc_session_id() const;
  public:
  void clear_webrtc_session_id();
  uint64_t webrtc_session_id() const;
  void set_webrtc_session_id(uint64_t value);
  private:
  uint64_t _internal_webrtc_session_id() const;
  void _internal_set_webrtc_session_id(uint64_t value);
  public:

  // optional .CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CBroadcast_WatchBroadcast_Response_EWatchResponse response() const;
  void set_response(::CBroadcast_WatchBroadcast_Response_EWatchResponse value);
  private:
  ::CBroadcast_WatchBroadcast_Response_EWatchResponse _internal_response() const;
  void _internal_set_response(::CBroadcast_WatchBroadcast_Response_EWatchResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WatchBroadcast_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mpd_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hls_m3u8_master_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webrtc_offer_sdp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webrtc_turn_server_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cdn_auth_url_parameters_;
  uint64_t broadcast_id_;
  uint64_t gameid_;
  uint32_t num_viewers_;
  int32_t permission_;
  uint64_t viewer_token_;
  int32_t seconds_delay_;
  int32_t heartbeat_interval_;
  bool is_rtmp_;
  bool is_webrtc_;
  bool is_replay_;
  int32_t duration_;
  uint64_t webrtc_session_id_;
  int response_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_HeartbeatBroadcast_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_HeartbeatBroadcast_Notification) */ {
 public:
  inline CBroadcast_HeartbeatBroadcast_Notification() : CBroadcast_HeartbeatBroadcast_Notification(nullptr) {}
  ~CBroadcast_HeartbeatBroadcast_Notification() override;
  explicit constexpr CBroadcast_HeartbeatBroadcast_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_HeartbeatBroadcast_Notification(const CBroadcast_HeartbeatBroadcast_Notification& from);
  CBroadcast_HeartbeatBroadcast_Notification(CBroadcast_HeartbeatBroadcast_Notification&& from) noexcept
    : CBroadcast_HeartbeatBroadcast_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_HeartbeatBroadcast_Notification& operator=(const CBroadcast_HeartbeatBroadcast_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_HeartbeatBroadcast_Notification& operator=(CBroadcast_HeartbeatBroadcast_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_HeartbeatBroadcast_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_HeartbeatBroadcast_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_HeartbeatBroadcast_Notification*>(
               &_CBroadcast_HeartbeatBroadcast_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CBroadcast_HeartbeatBroadcast_Notification& a, CBroadcast_HeartbeatBroadcast_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_HeartbeatBroadcast_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_HeartbeatBroadcast_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_HeartbeatBroadcast_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_HeartbeatBroadcast_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_HeartbeatBroadcast_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_HeartbeatBroadcast_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_HeartbeatBroadcast_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_HeartbeatBroadcast_Notification";
  }
  protected:
  explicit CBroadcast_HeartbeatBroadcast_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kBroadcastIdFieldNumber = 2,
    kViewerTokenFieldNumber = 3,
    kRepresentationFieldNumber = 4,
  };
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
  bool has_viewer_token() const;
  private:
  bool _internal_has_viewer_token() const;
  public:
  void clear_viewer_token();
  uint64_t viewer_token() const;
  void set_viewer_token(uint64_t value);
  private:
  uint64_t _internal_viewer_token() const;
  void _internal_set_viewer_token(uint64_t value);
  public:

  // optional uint32 representation = 4 [(.description) = "video stream representation watching"];
  bool has_representation() const;
  private:
  bool _internal_has_representation() const;
  public:
  void clear_representation();
  uint32_t representation() const;
  void set_representation(uint32_t value);
  private:
  uint32_t _internal_representation() const;
  void _internal_set_representation(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_HeartbeatBroadcast_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint64_t broadcast_id_;
  uint64_t viewer_token_;
  uint32_t representation_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_StopWatchingBroadcast_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_StopWatchingBroadcast_Notification) */ {
 public:
  inline CBroadcast_StopWatchingBroadcast_Notification() : CBroadcast_StopWatchingBroadcast_Notification(nullptr) {}
  ~CBroadcast_StopWatchingBroadcast_Notification() override;
  explicit constexpr CBroadcast_StopWatchingBroadcast_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_StopWatchingBroadcast_Notification(const CBroadcast_StopWatchingBroadcast_Notification& from);
  CBroadcast_StopWatchingBroadcast_Notification(CBroadcast_StopWatchingBroadcast_Notification&& from) noexcept
    : CBroadcast_StopWatchingBroadcast_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_StopWatchingBroadcast_Notification& operator=(const CBroadcast_StopWatchingBroadcast_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_StopWatchingBroadcast_Notification& operator=(CBroadcast_StopWatchingBroadcast_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_StopWatchingBroadcast_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_StopWatchingBroadcast_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_StopWatchingBroadcast_Notification*>(
               &_CBroadcast_StopWatchingBroadcast_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CBroadcast_StopWatchingBroadcast_Notification& a, CBroadcast_StopWatchingBroadcast_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_StopWatchingBroadcast_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_StopWatchingBroadcast_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_StopWatchingBroadcast_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_StopWatchingBroadcast_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_StopWatchingBroadcast_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_StopWatchingBroadcast_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_StopWatchingBroadcast_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_StopWatchingBroadcast_Notification";
  }
  protected:
  explicit CBroadcast_StopWatchingBroadcast_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kBroadcastIdFieldNumber = 2,
    kViewerTokenFieldNumber = 3,
  };
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
  bool has_viewer_token() const;
  private:
  bool _internal_has_viewer_token() const;
  public:
  void clear_viewer_token();
  uint64_t viewer_token() const;
  void set_viewer_token(uint64_t value);
  private:
  uint64_t _internal_viewer_token() const;
  void _internal_set_viewer_token(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_StopWatchingBroadcast_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint64_t broadcast_id_;
  uint64_t viewer_token_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastStatus_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastStatus_Request) */ {
 public:
  inline CBroadcast_GetBroadcastStatus_Request() : CBroadcast_GetBroadcastStatus_Request(nullptr) {}
  ~CBroadcast_GetBroadcastStatus_Request() override;
  explicit constexpr CBroadcast_GetBroadcastStatus_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastStatus_Request(const CBroadcast_GetBroadcastStatus_Request& from);
  CBroadcast_GetBroadcastStatus_Request(CBroadcast_GetBroadcastStatus_Request&& from) noexcept
    : CBroadcast_GetBroadcastStatus_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastStatus_Request& operator=(const CBroadcast_GetBroadcastStatus_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastStatus_Request& operator=(CBroadcast_GetBroadcastStatus_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastStatus_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastStatus_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastStatus_Request*>(
               &_CBroadcast_GetBroadcastStatus_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CBroadcast_GetBroadcastStatus_Request& a, CBroadcast_GetBroadcastStatus_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastStatus_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastStatus_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastStatus_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastStatus_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastStatus_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastStatus_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastStatus_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastStatus_Request";
  }
  protected:
  explicit CBroadcast_GetBroadcastStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kBroadcastIdFieldNumber = 2,
  };
  // optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID to proof that user is allowed to see details."];
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastStatus_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint64_t broadcast_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastStatus_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastStatus_Response) */ {
 public:
  inline CBroadcast_GetBroadcastStatus_Response() : CBroadcast_GetBroadcastStatus_Response(nullptr) {}
  ~CBroadcast_GetBroadcastStatus_Response() override;
  explicit constexpr CBroadcast_GetBroadcastStatus_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastStatus_Response(const CBroadcast_GetBroadcastStatus_Response& from);
  CBroadcast_GetBroadcastStatus_Response(CBroadcast_GetBroadcastStatus_Response&& from) noexcept
    : CBroadcast_GetBroadcastStatus_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastStatus_Response& operator=(const CBroadcast_GetBroadcastStatus_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastStatus_Response& operator=(CBroadcast_GetBroadcastStatus_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastStatus_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastStatus_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastStatus_Response*>(
               &_CBroadcast_GetBroadcastStatus_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CBroadcast_GetBroadcastStatus_Response& a, CBroadcast_GetBroadcastStatus_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastStatus_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastStatus_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastStatus_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastStatus_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastStatus_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastStatus_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastStatus_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastStatus_Response";
  }
  protected:
  explicit CBroadcast_GetBroadcastStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kThumbnailUrlFieldNumber = 8,
    kGameidFieldNumber = 1,
    kNumViewersFieldNumber = 3,
    kPermissionFieldNumber = 4,
    kSecondsDelayFieldNumber = 6,
    kIsRtmpFieldNumber = 5,
    kIsPublisherFieldNumber = 7,
    kIsUploadingFieldNumber = 10,
    kIsReplayFieldNumber = 12,
    kUpdateIntervalFieldNumber = 9,
    kDurationFieldNumber = 11,
    kIsCapturingVodFieldNumber = 13,
    kIsStoreWhitelistedFieldNumber = 14,
  };
  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string thumbnail_url = 8;
  bool has_thumbnail_url() const;
  private:
  bool _internal_has_thumbnail_url() const;
  public:
  void clear_thumbnail_url();
  const std::string& thumbnail_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail_url();
  PROTOBUF_NODISCARD std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(std::string* thumbnail_url);
  private:
  const std::string& _internal_thumbnail_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail_url(const std::string& value);
  std::string* _internal_mutable_thumbnail_url();
  public:

  // optional uint64 gameid = 1;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  uint64_t gameid() const;
  void set_gameid(uint64_t value);
  private:
  uint64_t _internal_gameid() const;
  void _internal_set_gameid(uint64_t value);
  public:

  // optional uint32 num_viewers = 3;
  bool has_num_viewers() const;
  private:
  bool _internal_has_num_viewers() const;
  public:
  void clear_num_viewers();
  uint32_t num_viewers() const;
  void set_num_viewers(uint32_t value);
  private:
  uint32_t _internal_num_viewers() const;
  void _internal_set_num_viewers(uint32_t value);
  public:

  // optional int32 permission = 4;
  bool has_permission() const;
  private:
  bool _internal_has_permission() const;
  public:
  void clear_permission();
  int32_t permission() const;
  void set_permission(int32_t value);
  private:
  int32_t _internal_permission() const;
  void _internal_set_permission(int32_t value);
  public:

  // optional int32 seconds_delay = 6;
  bool has_seconds_delay() const;
  private:
  bool _internal_has_seconds_delay() const;
  public:
  void clear_seconds_delay();
  int32_t seconds_delay() const;
  void set_seconds_delay(int32_t value);
  private:
  int32_t _internal_seconds_delay() const;
  void _internal_set_seconds_delay(int32_t value);
  public:

  // optional bool is_rtmp = 5;
  bool has_is_rtmp() const;
  private:
  bool _internal_has_is_rtmp() const;
  public:
  void clear_is_rtmp();
  bool is_rtmp() const;
  void set_is_rtmp(bool value);
  private:
  bool _internal_is_rtmp() const;
  void _internal_set_is_rtmp(bool value);
  public:

  // optional bool is_publisher = 7;
  bool has_is_publisher() const;
  private:
  bool _internal_has_is_publisher() const;
  public:
  void clear_is_publisher();
  bool is_publisher() const;
  void set_is_publisher(bool value);
  private:
  bool _internal_is_publisher() const;
  void _internal_set_is_publisher(bool value);
  public:

  // optional bool is_uploading = 10;
  bool has_is_uploading() const;
  private:
  bool _internal_has_is_uploading() const;
  public:
  void clear_is_uploading();
  bool is_uploading() const;
  void set_is_uploading(bool value);
  private:
  bool _internal_is_uploading() const;
  void _internal_set_is_uploading(bool value);
  public:

  // optional bool is_replay = 12;
  bool has_is_replay() const;
  private:
  bool _internal_has_is_replay() const;
  public:
  void clear_is_replay();
  bool is_replay() const;
  void set_is_replay(bool value);
  private:
  bool _internal_is_replay() const;
  void _internal_set_is_replay(bool value);
  public:

  // optional int32 update_interval = 9;
  bool has_update_interval() const;
  private:
  bool _internal_has_update_interval() const;
  public:
  void clear_update_interval();
  int32_t update_interval() const;
  void set_update_interval(int32_t value);
  private:
  int32_t _internal_update_interval() const;
  void _internal_set_update_interval(int32_t value);
  public:

  // optional uint32 duration = 11;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional bool is_capturing_vod = 13;
  bool has_is_capturing_vod() const;
  private:
  bool _internal_has_is_capturing_vod() const;
  public:
  void clear_is_capturing_vod();
  bool is_capturing_vod() const;
  void set_is_capturing_vod(bool value);
  private:
  bool _internal_is_capturing_vod() const;
  void _internal_set_is_capturing_vod(bool value);
  public:

  // optional bool is_store_whitelisted = 14;
  bool has_is_store_whitelisted() const;
  private:
  bool _internal_has_is_store_whitelisted() const;
  public:
  void clear_is_store_whitelisted();
  bool is_store_whitelisted() const;
  void set_is_store_whitelisted(bool value);
  private:
  bool _internal_is_store_whitelisted() const;
  void _internal_set_is_store_whitelisted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastStatus_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_url_;
  uint64_t gameid_;
  uint32_t num_viewers_;
  int32_t permission_;
  int32_t seconds_delay_;
  bool is_rtmp_;
  bool is_publisher_;
  bool is_uploading_;
  bool is_replay_;
  int32_t update_interval_;
  uint32_t duration_;
  bool is_capturing_vod_;
  bool is_store_whitelisted_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastThumbnail_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastThumbnail_Request) */ {
 public:
  inline CBroadcast_GetBroadcastThumbnail_Request() : CBroadcast_GetBroadcastThumbnail_Request(nullptr) {}
  ~CBroadcast_GetBroadcastThumbnail_Request() override;
  explicit constexpr CBroadcast_GetBroadcastThumbnail_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastThumbnail_Request(const CBroadcast_GetBroadcastThumbnail_Request& from);
  CBroadcast_GetBroadcastThumbnail_Request(CBroadcast_GetBroadcastThumbnail_Request&& from) noexcept
    : CBroadcast_GetBroadcastThumbnail_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastThumbnail_Request& operator=(const CBroadcast_GetBroadcastThumbnail_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastThumbnail_Request& operator=(CBroadcast_GetBroadcastThumbnail_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastThumbnail_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastThumbnail_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastThumbnail_Request*>(
               &_CBroadcast_GetBroadcastThumbnail_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CBroadcast_GetBroadcastThumbnail_Request& a, CBroadcast_GetBroadcastThumbnail_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastThumbnail_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastThumbnail_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastThumbnail_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastThumbnail_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastThumbnail_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastThumbnail_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastThumbnail_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastThumbnail_Request";
  }
  protected:
  explicit CBroadcast_GetBroadcastThumbnail_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kBroadcastIdFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 broadcast_id = 2;
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastThumbnail_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint64_t broadcast_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastThumbnail_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastThumbnail_Response) */ {
 public:
  inline CBroadcast_GetBroadcastThumbnail_Response() : CBroadcast_GetBroadcastThumbnail_Response(nullptr) {}
  ~CBroadcast_GetBroadcastThumbnail_Response() override;
  explicit constexpr CBroadcast_GetBroadcastThumbnail_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastThumbnail_Response(const CBroadcast_GetBroadcastThumbnail_Response& from);
  CBroadcast_GetBroadcastThumbnail_Response(CBroadcast_GetBroadcastThumbnail_Response&& from) noexcept
    : CBroadcast_GetBroadcastThumbnail_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastThumbnail_Response& operator=(const CBroadcast_GetBroadcastThumbnail_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastThumbnail_Response& operator=(CBroadcast_GetBroadcastThumbnail_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastThumbnail_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastThumbnail_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastThumbnail_Response*>(
               &_CBroadcast_GetBroadcastThumbnail_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CBroadcast_GetBroadcastThumbnail_Response& a, CBroadcast_GetBroadcastThumbnail_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastThumbnail_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastThumbnail_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastThumbnail_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastThumbnail_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastThumbnail_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastThumbnail_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastThumbnail_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastThumbnail_Response";
  }
  protected:
  explicit CBroadcast_GetBroadcastThumbnail_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThumbnailUrlFieldNumber = 1,
    kUpdateIntervalFieldNumber = 2,
    kNumViewersFieldNumber = 3,
    kDurationFieldNumber = 4,
  };
  // optional string thumbnail_url = 1;
  bool has_thumbnail_url() const;
  private:
  bool _internal_has_thumbnail_url() const;
  public:
  void clear_thumbnail_url();
  const std::string& thumbnail_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail_url();
  PROTOBUF_NODISCARD std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(std::string* thumbnail_url);
  private:
  const std::string& _internal_thumbnail_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail_url(const std::string& value);
  std::string* _internal_mutable_thumbnail_url();
  public:

  // optional int32 update_interval = 2;
  bool has_update_interval() const;
  private:
  bool _internal_has_update_interval() const;
  public:
  void clear_update_interval();
  int32_t update_interval() const;
  void set_update_interval(int32_t value);
  private:
  int32_t _internal_update_interval() const;
  void _internal_set_update_interval(int32_t value);
  public:

  // optional int32 num_viewers = 3;
  bool has_num_viewers() const;
  private:
  bool _internal_has_num_viewers() const;
  public:
  void clear_num_viewers();
  int32_t num_viewers() const;
  void set_num_viewers(int32_t value);
  private:
  int32_t _internal_num_viewers() const;
  void _internal_set_num_viewers(int32_t value);
  public:

  // optional int32 duration = 4;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  int32_t duration() const;
  void set_duration(int32_t value);
  private:
  int32_t _internal_duration() const;
  void _internal_set_duration(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastThumbnail_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_url_;
  int32_t update_interval_;
  int32_t num_viewers_;
  int32_t duration_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_InviteToBroadcast_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_InviteToBroadcast_Request) */ {
 public:
  inline CBroadcast_InviteToBroadcast_Request() : CBroadcast_InviteToBroadcast_Request(nullptr) {}
  ~CBroadcast_InviteToBroadcast_Request() override;
  explicit constexpr CBroadcast_InviteToBroadcast_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_InviteToBroadcast_Request(const CBroadcast_InviteToBroadcast_Request& from);
  CBroadcast_InviteToBroadcast_Request(CBroadcast_InviteToBroadcast_Request&& from) noexcept
    : CBroadcast_InviteToBroadcast_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_InviteToBroadcast_Request& operator=(const CBroadcast_InviteToBroadcast_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_InviteToBroadcast_Request& operator=(CBroadcast_InviteToBroadcast_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_InviteToBroadcast_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_InviteToBroadcast_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_InviteToBroadcast_Request*>(
               &_CBroadcast_InviteToBroadcast_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CBroadcast_InviteToBroadcast_Request& a, CBroadcast_InviteToBroadcast_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_InviteToBroadcast_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_InviteToBroadcast_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_InviteToBroadcast_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_InviteToBroadcast_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_InviteToBroadcast_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_InviteToBroadcast_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_InviteToBroadcast_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_InviteToBroadcast_Request";
  }
  protected:
  explicit CBroadcast_InviteToBroadcast_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kApprovalResponseFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional bool approval_response = 2;
  bool has_approval_response() const;
  private:
  bool _internal_has_approval_response() const;
  public:
  void clear_approval_response();
  bool approval_response() const;
  void set_approval_response(bool value);
  private:
  bool _internal_approval_response() const;
  void _internal_set_approval_response(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_InviteToBroadcast_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  bool approval_response_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_InviteToBroadcast_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_InviteToBroadcast_Response) */ {
 public:
  inline CBroadcast_InviteToBroadcast_Response() : CBroadcast_InviteToBroadcast_Response(nullptr) {}
  ~CBroadcast_InviteToBroadcast_Response() override;
  explicit constexpr CBroadcast_InviteToBroadcast_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_InviteToBroadcast_Response(const CBroadcast_InviteToBroadcast_Response& from);
  CBroadcast_InviteToBroadcast_Response(CBroadcast_InviteToBroadcast_Response&& from) noexcept
    : CBroadcast_InviteToBroadcast_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_InviteToBroadcast_Response& operator=(const CBroadcast_InviteToBroadcast_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_InviteToBroadcast_Response& operator=(CBroadcast_InviteToBroadcast_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_InviteToBroadcast_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_InviteToBroadcast_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_InviteToBroadcast_Response*>(
               &_CBroadcast_InviteToBroadcast_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CBroadcast_InviteToBroadcast_Response& a, CBroadcast_InviteToBroadcast_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_InviteToBroadcast_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_InviteToBroadcast_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_InviteToBroadcast_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_InviteToBroadcast_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_InviteToBroadcast_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_InviteToBroadcast_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_InviteToBroadcast_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_InviteToBroadcast_Response";
  }
  protected:
  explicit CBroadcast_InviteToBroadcast_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // optional bool success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_InviteToBroadcast_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool success_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_SendBroadcastStateToServer_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_SendBroadcastStateToServer_Request) */ {
 public:
  inline CBroadcast_SendBroadcastStateToServer_Request() : CBroadcast_SendBroadcastStateToServer_Request(nullptr) {}
  ~CBroadcast_SendBroadcastStateToServer_Request() override;
  explicit constexpr CBroadcast_SendBroadcastStateToServer_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_SendBroadcastStateToServer_Request(const CBroadcast_SendBroadcastStateToServer_Request& from);
  CBroadcast_SendBroadcastStateToServer_Request(CBroadcast_SendBroadcastStateToServer_Request&& from) noexcept
    : CBroadcast_SendBroadcastStateToServer_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_SendBroadcastStateToServer_Request& operator=(const CBroadcast_SendBroadcastStateToServer_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_SendBroadcastStateToServer_Request& operator=(CBroadcast_SendBroadcastStateToServer_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_SendBroadcastStateToServer_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_SendBroadcastStateToServer_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SendBroadcastStateToServer_Request*>(
               &_CBroadcast_SendBroadcastStateToServer_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CBroadcast_SendBroadcastStateToServer_Request& a, CBroadcast_SendBroadcastStateToServer_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_SendBroadcastStateToServer_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_SendBroadcastStateToServer_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_SendBroadcastStateToServer_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_SendBroadcastStateToServer_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_SendBroadcastStateToServer_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_SendBroadcastStateToServer_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_SendBroadcastStateToServer_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_SendBroadcastStateToServer_Request";
  }
  protected:
  explicit CBroadcast_SendBroadcastStateToServer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 3,
    kGameDataConfigFieldNumber = 4,
    kGameidFieldNumber = 2,
    kPermissionFieldNumber = 1,
  };
  // optional string title = 3;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string game_data_config = 4;
  bool has_game_data_config() const;
  private:
  bool _internal_has_game_data_config() const;
  public:
  void clear_game_data_config();
  const std::string& game_data_config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_data_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_data_config();
  PROTOBUF_NODISCARD std::string* release_game_data_config();
  void set_allocated_game_data_config(std::string* game_data_config);
  private:
  const std::string& _internal_game_data_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_data_config(const std::string& value);
  std::string* _internal_mutable_game_data_config();
  public:

  // optional uint64 gameid = 2;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  uint64_t gameid() const;
  void set_gameid(uint64_t value);
  private:
  uint64_t _internal_gameid() const;
  void _internal_set_gameid(uint64_t value);
  public:

  // optional int32 permission = 1;
  bool has_permission() const;
  private:
  bool _internal_has_permission() const;
  public:
  void clear_permission();
  int32_t permission() const;
  void set_permission(int32_t value);
  private:
  int32_t _internal_permission() const;
  void _internal_set_permission(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_SendBroadcastStateToServer_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_data_config_;
  uint64_t gameid_;
  int32_t permission_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_SendBroadcastStateToServer_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CBroadcast_SendBroadcastStateToServer_Response) */ {
 public:
  inline CBroadcast_SendBroadcastStateToServer_Response() : CBroadcast_SendBroadcastStateToServer_Response(nullptr) {}
  explicit constexpr CBroadcast_SendBroadcastStateToServer_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_SendBroadcastStateToServer_Response(const CBroadcast_SendBroadcastStateToServer_Response& from);
  CBroadcast_SendBroadcastStateToServer_Response(CBroadcast_SendBroadcastStateToServer_Response&& from) noexcept
    : CBroadcast_SendBroadcastStateToServer_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_SendBroadcastStateToServer_Response& operator=(const CBroadcast_SendBroadcastStateToServer_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_SendBroadcastStateToServer_Response& operator=(CBroadcast_SendBroadcastStateToServer_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_SendBroadcastStateToServer_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_SendBroadcastStateToServer_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SendBroadcastStateToServer_Response*>(
               &_CBroadcast_SendBroadcastStateToServer_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CBroadcast_SendBroadcastStateToServer_Response& a, CBroadcast_SendBroadcastStateToServer_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_SendBroadcastStateToServer_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_SendBroadcastStateToServer_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_SendBroadcastStateToServer_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_SendBroadcastStateToServer_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CBroadcast_SendBroadcastStateToServer_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CBroadcast_SendBroadcastStateToServer_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_SendBroadcastStateToServer_Response";
  }
  protected:
  explicit CBroadcast_SendBroadcastStateToServer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBroadcast_SendBroadcastStateToServer_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_NotifyBroadcastSessionHeartbeat_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification) */ {
 public:
  inline CBroadcast_NotifyBroadcastSessionHeartbeat_Notification() : CBroadcast_NotifyBroadcastSessionHeartbeat_Notification(nullptr) {}
  ~CBroadcast_NotifyBroadcastSessionHeartbeat_Notification() override;
  explicit constexpr CBroadcast_NotifyBroadcastSessionHeartbeat_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_NotifyBroadcastSessionHeartbeat_Notification(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from);
  CBroadcast_NotifyBroadcastSessionHeartbeat_Notification(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification&& from) noexcept
    : CBroadcast_NotifyBroadcastSessionHeartbeat_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& operator=(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& operator=(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification*>(
               &_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& a, CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_NotifyBroadcastSessionHeartbeat_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_NotifyBroadcastSessionHeartbeat_Notification";
  }
  protected:
  explicit CBroadcast_NotifyBroadcastSessionHeartbeat_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastIdFieldNumber = 1,
  };
  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t broadcast_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastChatInfo_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastChatInfo_Request) */ {
 public:
  inline CBroadcast_GetBroadcastChatInfo_Request() : CBroadcast_GetBroadcastChatInfo_Request(nullptr) {}
  ~CBroadcast_GetBroadcastChatInfo_Request() override;
  explicit constexpr CBroadcast_GetBroadcastChatInfo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastChatInfo_Request(const CBroadcast_GetBroadcastChatInfo_Request& from);
  CBroadcast_GetBroadcastChatInfo_Request(CBroadcast_GetBroadcastChatInfo_Request&& from) noexcept
    : CBroadcast_GetBroadcastChatInfo_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastChatInfo_Request& operator=(const CBroadcast_GetBroadcastChatInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastChatInfo_Request& operator=(CBroadcast_GetBroadcastChatInfo_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastChatInfo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastChatInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastChatInfo_Request*>(
               &_CBroadcast_GetBroadcastChatInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CBroadcast_GetBroadcastChatInfo_Request& a, CBroadcast_GetBroadcastChatInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastChatInfo_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastChatInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastChatInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastChatInfo_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastChatInfo_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastChatInfo_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastChatInfo_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastChatInfo_Request";
  }
  protected:
  explicit CBroadcast_GetBroadcastChatInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kBroadcastIdFieldNumber = 2,
    kClientIpFieldNumber = 3,
    kClientCellFieldNumber = 4,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 broadcast_id = 2;
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // optional uint32 client_ip = 3;
  bool has_client_ip() const;
  private:
  bool _internal_has_client_ip() const;
  public:
  void clear_client_ip();
  uint32_t client_ip() const;
  void set_client_ip(uint32_t value);
  private:
  uint32_t _internal_client_ip() const;
  void _internal_set_client_ip(uint32_t value);
  public:

  // optional uint32 client_cell = 4;
  bool has_client_cell() const;
  private:
  bool _internal_has_client_cell() const;
  public:
  void clear_client_cell();
  uint32_t client_cell() const;
  void set_client_cell(uint32_t value);
  private:
  uint32_t _internal_client_cell() const;
  void _internal_set_client_cell(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastChatInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint64_t broadcast_id_;
  uint32_t client_ip_;
  uint32_t client_cell_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastChatInfo_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastChatInfo_Response) */ {
 public:
  inline CBroadcast_GetBroadcastChatInfo_Response() : CBroadcast_GetBroadcastChatInfo_Response(nullptr) {}
  ~CBroadcast_GetBroadcastChatInfo_Response() override;
  explicit constexpr CBroadcast_GetBroadcastChatInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastChatInfo_Response(const CBroadcast_GetBroadcastChatInfo_Response& from);
  CBroadcast_GetBroadcastChatInfo_Response(CBroadcast_GetBroadcastChatInfo_Response&& from) noexcept
    : CBroadcast_GetBroadcastChatInfo_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastChatInfo_Response& operator=(const CBroadcast_GetBroadcastChatInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastChatInfo_Response& operator=(CBroadcast_GetBroadcastChatInfo_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastChatInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastChatInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastChatInfo_Response*>(
               &_CBroadcast_GetBroadcastChatInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CBroadcast_GetBroadcastChatInfo_Response& a, CBroadcast_GetBroadcastChatInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastChatInfo_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastChatInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastChatInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastChatInfo_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastChatInfo_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastChatInfo_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastChatInfo_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastChatInfo_Response";
  }
  protected:
  explicit CBroadcast_GetBroadcastChatInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlairGroupIdsFieldNumber = 4,
    kViewUrlTemplateFieldNumber = 3,
    kChatIdFieldNumber = 1,
  };
  // repeated uint32 flair_group_ids = 4;
  int flair_group_ids_size() const;
  private:
  int _internal_flair_group_ids_size() const;
  public:
  void clear_flair_group_ids();
  private:
  uint32_t _internal_flair_group_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_flair_group_ids() const;
  void _internal_add_flair_group_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_flair_group_ids();
  public:
  uint32_t flair_group_ids(int index) const;
  void set_flair_group_ids(int index, uint32_t value);
  void add_flair_group_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      flair_group_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_flair_group_ids();

  // optional string view_url_template = 3;
  bool has_view_url_template() const;
  private:
  bool _internal_has_view_url_template() const;
  public:
  void clear_view_url_template();
  const std::string& view_url_template() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_view_url_template(ArgT0&& arg0, ArgT... args);
  std::string* mutable_view_url_template();
  PROTOBUF_NODISCARD std::string* release_view_url_template();
  void set_allocated_view_url_template(std::string* view_url_template);
  private:
  const std::string& _internal_view_url_template() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_view_url_template(const std::string& value);
  std::string* _internal_mutable_view_url_template();
  public:

  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  private:
  bool _internal_has_chat_id() const;
  public:
  void clear_chat_id();
  uint64_t chat_id() const;
  void set_chat_id(uint64_t value);
  private:
  uint64_t _internal_chat_id() const;
  void _internal_set_chat_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastChatInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > flair_group_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr view_url_template_;
  uint64_t chat_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_PostChatMessage_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_PostChatMessage_Request) */ {
 public:
  inline CBroadcast_PostChatMessage_Request() : CBroadcast_PostChatMessage_Request(nullptr) {}
  ~CBroadcast_PostChatMessage_Request() override;
  explicit constexpr CBroadcast_PostChatMessage_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_PostChatMessage_Request(const CBroadcast_PostChatMessage_Request& from);
  CBroadcast_PostChatMessage_Request(CBroadcast_PostChatMessage_Request&& from) noexcept
    : CBroadcast_PostChatMessage_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_PostChatMessage_Request& operator=(const CBroadcast_PostChatMessage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_PostChatMessage_Request& operator=(CBroadcast_PostChatMessage_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_PostChatMessage_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_PostChatMessage_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_PostChatMessage_Request*>(
               &_CBroadcast_PostChatMessage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CBroadcast_PostChatMessage_Request& a, CBroadcast_PostChatMessage_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_PostChatMessage_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_PostChatMessage_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_PostChatMessage_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_PostChatMessage_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_PostChatMessage_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_PostChatMessage_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_PostChatMessage_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_PostChatMessage_Request";
  }
  protected:
  explicit CBroadcast_PostChatMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCountryCodeFieldNumber = 5,
    kChatIdFieldNumber = 1,
    kInstanceIdFieldNumber = 3,
    kLanguageFieldNumber = 4,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional string country_code = 5 [(.description) = "The two letter country code"];
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  private:
  bool _internal_has_chat_id() const;
  public:
  void clear_chat_id();
  uint64_t chat_id() const;
  void set_chat_id(uint64_t value);
  private:
  uint64_t _internal_chat_id() const;
  void _internal_set_chat_id(uint64_t value);
  public:

  // optional uint32 instance_id = 3;
  bool has_instance_id() const;
  private:
  bool _internal_has_instance_id() const;
  public:
  void clear_instance_id();
  uint32_t instance_id() const;
  void set_instance_id(uint32_t value);
  private:
  uint32_t _internal_instance_id() const;
  void _internal_set_instance_id(uint32_t value);
  public:

  // optional uint32 language = 4 [default = 0, (.description) = "ELanguage of the user posting the message, default is english"];
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  uint32_t language() const;
  void set_language(uint32_t value);
  private:
  uint32_t _internal_language() const;
  void _internal_set_language(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_PostChatMessage_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  uint64_t chat_id_;
  uint32_t instance_id_;
  uint32_t language_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_PostChatMessage_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_PostChatMessage_Response) */ {
 public:
  inline CBroadcast_PostChatMessage_Response() : CBroadcast_PostChatMessage_Response(nullptr) {}
  ~CBroadcast_PostChatMessage_Response() override;
  explicit constexpr CBroadcast_PostChatMessage_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_PostChatMessage_Response(const CBroadcast_PostChatMessage_Response& from);
  CBroadcast_PostChatMessage_Response(CBroadcast_PostChatMessage_Response&& from) noexcept
    : CBroadcast_PostChatMessage_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_PostChatMessage_Response& operator=(const CBroadcast_PostChatMessage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_PostChatMessage_Response& operator=(CBroadcast_PostChatMessage_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_PostChatMessage_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_PostChatMessage_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_PostChatMessage_Response*>(
               &_CBroadcast_PostChatMessage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CBroadcast_PostChatMessage_Response& a, CBroadcast_PostChatMessage_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_PostChatMessage_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_PostChatMessage_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_PostChatMessage_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_PostChatMessage_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_PostChatMessage_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_PostChatMessage_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_PostChatMessage_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_PostChatMessage_Response";
  }
  protected:
  explicit CBroadcast_PostChatMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaNameFieldNumber = 1,
    kInGameFieldNumber = 2,
    kResultFieldNumber = 3,
    kCooldownTimeSecondsFieldNumber = 4,
  };
  // optional string persona_name = 1;
  bool has_persona_name() const;
  private:
  bool _internal_has_persona_name() const;
  public:
  void clear_persona_name();
  const std::string& persona_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name();
  PROTOBUF_NODISCARD std::string* release_persona_name();
  void set_allocated_persona_name(std::string* persona_name);
  private:
  const std::string& _internal_persona_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name(const std::string& value);
  std::string* _internal_mutable_persona_name();
  public:

  // optional bool in_game = 2;
  bool has_in_game() const;
  private:
  bool _internal_has_in_game() const;
  public:
  void clear_in_game();
  bool in_game() const;
  void set_in_game(bool value);
  private:
  bool _internal_in_game() const;
  void _internal_set_in_game(bool value);
  public:

  // optional int32 result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // optional int32 cooldown_time_seconds = 4;
  bool has_cooldown_time_seconds() const;
  private:
  bool _internal_has_cooldown_time_seconds() const;
  public:
  void clear_cooldown_time_seconds();
  int32_t cooldown_time_seconds() const;
  void set_cooldown_time_seconds(int32_t value);
  private:
  int32_t _internal_cooldown_time_seconds() const;
  void _internal_set_cooldown_time_seconds(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_PostChatMessage_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_;
  bool in_game_;
  int32_t result_;
  int32_t cooldown_time_seconds_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_UpdateChatMessageFlair_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_UpdateChatMessageFlair_Request) */ {
 public:
  inline CBroadcast_UpdateChatMessageFlair_Request() : CBroadcast_UpdateChatMessageFlair_Request(nullptr) {}
  ~CBroadcast_UpdateChatMessageFlair_Request() override;
  explicit constexpr CBroadcast_UpdateChatMessageFlair_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_UpdateChatMessageFlair_Request(const CBroadcast_UpdateChatMessageFlair_Request& from);
  CBroadcast_UpdateChatMessageFlair_Request(CBroadcast_UpdateChatMessageFlair_Request&& from) noexcept
    : CBroadcast_UpdateChatMessageFlair_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_UpdateChatMessageFlair_Request& operator=(const CBroadcast_UpdateChatMessageFlair_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_UpdateChatMessageFlair_Request& operator=(CBroadcast_UpdateChatMessageFlair_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_UpdateChatMessageFlair_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_UpdateChatMessageFlair_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_UpdateChatMessageFlair_Request*>(
               &_CBroadcast_UpdateChatMessageFlair_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CBroadcast_UpdateChatMessageFlair_Request& a, CBroadcast_UpdateChatMessageFlair_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_UpdateChatMessageFlair_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_UpdateChatMessageFlair_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_UpdateChatMessageFlair_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_UpdateChatMessageFlair_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_UpdateChatMessageFlair_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_UpdateChatMessageFlair_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_UpdateChatMessageFlair_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_UpdateChatMessageFlair_Request";
  }
  protected:
  explicit CBroadcast_UpdateChatMessageFlair_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlairFieldNumber = 2,
    kChatIdFieldNumber = 1,
  };
  // optional string flair = 2;
  bool has_flair() const;
  private:
  bool _internal_has_flair() const;
  public:
  void clear_flair();
  const std::string& flair() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flair(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flair();
  PROTOBUF_NODISCARD std::string* release_flair();
  void set_allocated_flair(std::string* flair);
  private:
  const std::string& _internal_flair() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flair(const std::string& value);
  std::string* _internal_mutable_flair();
  public:

  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  private:
  bool _internal_has_chat_id() const;
  public:
  void clear_chat_id();
  uint64_t chat_id() const;
  void set_chat_id(uint64_t value);
  private:
  uint64_t _internal_chat_id() const;
  void _internal_set_chat_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_UpdateChatMessageFlair_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flair_;
  uint64_t chat_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_UpdateChatMessageFlair_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_UpdateChatMessageFlair_Response) */ {
 public:
  inline CBroadcast_UpdateChatMessageFlair_Response() : CBroadcast_UpdateChatMessageFlair_Response(nullptr) {}
  ~CBroadcast_UpdateChatMessageFlair_Response() override;
  explicit constexpr CBroadcast_UpdateChatMessageFlair_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_UpdateChatMessageFlair_Response(const CBroadcast_UpdateChatMessageFlair_Response& from);
  CBroadcast_UpdateChatMessageFlair_Response(CBroadcast_UpdateChatMessageFlair_Response&& from) noexcept
    : CBroadcast_UpdateChatMessageFlair_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_UpdateChatMessageFlair_Response& operator=(const CBroadcast_UpdateChatMessageFlair_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_UpdateChatMessageFlair_Response& operator=(CBroadcast_UpdateChatMessageFlair_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_UpdateChatMessageFlair_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_UpdateChatMessageFlair_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_UpdateChatMessageFlair_Response*>(
               &_CBroadcast_UpdateChatMessageFlair_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CBroadcast_UpdateChatMessageFlair_Response& a, CBroadcast_UpdateChatMessageFlair_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_UpdateChatMessageFlair_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_UpdateChatMessageFlair_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_UpdateChatMessageFlair_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_UpdateChatMessageFlair_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_UpdateChatMessageFlair_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_UpdateChatMessageFlair_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_UpdateChatMessageFlair_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_UpdateChatMessageFlair_Response";
  }
  protected:
  explicit CBroadcast_UpdateChatMessageFlair_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlairFieldNumber = 3,
    kChatIdFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional string flair = 3;
  bool has_flair() const;
  private:
  bool _internal_has_flair() const;
  public:
  void clear_flair();
  const std::string& flair() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flair(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flair();
  PROTOBUF_NODISCARD std::string* release_flair();
  void set_allocated_flair(std::string* flair);
  private:
  const std::string& _internal_flair() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flair(const std::string& value);
  std::string* _internal_mutable_flair();
  public:

  // optional fixed64 chat_id = 2;
  bool has_chat_id() const;
  private:
  bool _internal_has_chat_id() const;
  public:
  void clear_chat_id();
  uint64_t chat_id() const;
  void set_chat_id(uint64_t value);
  private:
  uint64_t _internal_chat_id() const;
  void _internal_set_chat_id(uint64_t value);
  public:

  // optional int32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_UpdateChatMessageFlair_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flair_;
  uint64_t chat_id_;
  int32_t result_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_MuteBroadcastChatUser_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_MuteBroadcastChatUser_Request) */ {
 public:
  inline CBroadcast_MuteBroadcastChatUser_Request() : CBroadcast_MuteBroadcastChatUser_Request(nullptr) {}
  ~CBroadcast_MuteBroadcastChatUser_Request() override;
  explicit constexpr CBroadcast_MuteBroadcastChatUser_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_MuteBroadcastChatUser_Request(const CBroadcast_MuteBroadcastChatUser_Request& from);
  CBroadcast_MuteBroadcastChatUser_Request(CBroadcast_MuteBroadcastChatUser_Request&& from) noexcept
    : CBroadcast_MuteBroadcastChatUser_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_MuteBroadcastChatUser_Request& operator=(const CBroadcast_MuteBroadcastChatUser_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_MuteBroadcastChatUser_Request& operator=(CBroadcast_MuteBroadcastChatUser_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_MuteBroadcastChatUser_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_MuteBroadcastChatUser_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_MuteBroadcastChatUser_Request*>(
               &_CBroadcast_MuteBroadcastChatUser_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CBroadcast_MuteBroadcastChatUser_Request& a, CBroadcast_MuteBroadcastChatUser_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_MuteBroadcastChatUser_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_MuteBroadcastChatUser_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_MuteBroadcastChatUser_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_MuteBroadcastChatUser_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_MuteBroadcastChatUser_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_MuteBroadcastChatUser_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_MuteBroadcastChatUser_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_MuteBroadcastChatUser_Request";
  }
  protected:
  explicit CBroadcast_MuteBroadcastChatUser_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatIdFieldNumber = 1,
    kUserSteamidFieldNumber = 2,
    kMutedFieldNumber = 3,
  };
  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  private:
  bool _internal_has_chat_id() const;
  public:
  void clear_chat_id();
  uint64_t chat_id() const;
  void set_chat_id(uint64_t value);
  private:
  uint64_t _internal_chat_id() const;
  void _internal_set_chat_id(uint64_t value);
  public:

  // optional fixed64 user_steamid = 2;
  bool has_user_steamid() const;
  private:
  bool _internal_has_user_steamid() const;
  public:
  void clear_user_steamid();
  uint64_t user_steamid() const;
  void set_user_steamid(uint64_t value);
  private:
  uint64_t _internal_user_steamid() const;
  void _internal_set_user_steamid(uint64_t value);
  public:

  // optional bool muted = 3;
  bool has_muted() const;
  private:
  bool _internal_has_muted() const;
  public:
  void clear_muted();
  bool muted() const;
  void set_muted(bool value);
  private:
  bool _internal_muted() const;
  void _internal_set_muted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_MuteBroadcastChatUser_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t chat_id_;
  uint64_t user_steamid_;
  bool muted_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_MuteBroadcastChatUser_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CBroadcast_MuteBroadcastChatUser_Response) */ {
 public:
  inline CBroadcast_MuteBroadcastChatUser_Response() : CBroadcast_MuteBroadcastChatUser_Response(nullptr) {}
  explicit constexpr CBroadcast_MuteBroadcastChatUser_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_MuteBroadcastChatUser_Response(const CBroadcast_MuteBroadcastChatUser_Response& from);
  CBroadcast_MuteBroadcastChatUser_Response(CBroadcast_MuteBroadcastChatUser_Response&& from) noexcept
    : CBroadcast_MuteBroadcastChatUser_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_MuteBroadcastChatUser_Response& operator=(const CBroadcast_MuteBroadcastChatUser_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_MuteBroadcastChatUser_Response& operator=(CBroadcast_MuteBroadcastChatUser_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_MuteBroadcastChatUser_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_MuteBroadcastChatUser_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_MuteBroadcastChatUser_Response*>(
               &_CBroadcast_MuteBroadcastChatUser_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CBroadcast_MuteBroadcastChatUser_Response& a, CBroadcast_MuteBroadcastChatUser_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_MuteBroadcastChatUser_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_MuteBroadcastChatUser_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_MuteBroadcastChatUser_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_MuteBroadcastChatUser_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CBroadcast_MuteBroadcastChatUser_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CBroadcast_MuteBroadcastChatUser_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_MuteBroadcastChatUser_Response";
  }
  protected:
  explicit CBroadcast_MuteBroadcastChatUser_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBroadcast_MuteBroadcastChatUser_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_RemoveUserChatText_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_RemoveUserChatText_Request) */ {
 public:
  inline CBroadcast_RemoveUserChatText_Request() : CBroadcast_RemoveUserChatText_Request(nullptr) {}
  ~CBroadcast_RemoveUserChatText_Request() override;
  explicit constexpr CBroadcast_RemoveUserChatText_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_RemoveUserChatText_Request(const CBroadcast_RemoveUserChatText_Request& from);
  CBroadcast_RemoveUserChatText_Request(CBroadcast_RemoveUserChatText_Request&& from) noexcept
    : CBroadcast_RemoveUserChatText_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_RemoveUserChatText_Request& operator=(const CBroadcast_RemoveUserChatText_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_RemoveUserChatText_Request& operator=(CBroadcast_RemoveUserChatText_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_RemoveUserChatText_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_RemoveUserChatText_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_RemoveUserChatText_Request*>(
               &_CBroadcast_RemoveUserChatText_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CBroadcast_RemoveUserChatText_Request& a, CBroadcast_RemoveUserChatText_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_RemoveUserChatText_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_RemoveUserChatText_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_RemoveUserChatText_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_RemoveUserChatText_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_RemoveUserChatText_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_RemoveUserChatText_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_RemoveUserChatText_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_RemoveUserChatText_Request";
  }
  protected:
  explicit CBroadcast_RemoveUserChatText_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatIdFieldNumber = 1,
    kUserSteamidFieldNumber = 2,
  };
  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  private:
  bool _internal_has_chat_id() const;
  public:
  void clear_chat_id();
  uint64_t chat_id() const;
  void set_chat_id(uint64_t value);
  private:
  uint64_t _internal_chat_id() const;
  void _internal_set_chat_id(uint64_t value);
  public:

  // optional fixed64 user_steamid = 2;
  bool has_user_steamid() const;
  private:
  bool _internal_has_user_steamid() const;
  public:
  void clear_user_steamid();
  uint64_t user_steamid() const;
  void set_user_steamid(uint64_t value);
  private:
  uint64_t _internal_user_steamid() const;
  void _internal_set_user_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_RemoveUserChatText_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t chat_id_;
  uint64_t user_steamid_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_RemoveUserChatText_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CBroadcast_RemoveUserChatText_Response) */ {
 public:
  inline CBroadcast_RemoveUserChatText_Response() : CBroadcast_RemoveUserChatText_Response(nullptr) {}
  explicit constexpr CBroadcast_RemoveUserChatText_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_RemoveUserChatText_Response(const CBroadcast_RemoveUserChatText_Response& from);
  CBroadcast_RemoveUserChatText_Response(CBroadcast_RemoveUserChatText_Response&& from) noexcept
    : CBroadcast_RemoveUserChatText_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_RemoveUserChatText_Response& operator=(const CBroadcast_RemoveUserChatText_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_RemoveUserChatText_Response& operator=(CBroadcast_RemoveUserChatText_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_RemoveUserChatText_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_RemoveUserChatText_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_RemoveUserChatText_Response*>(
               &_CBroadcast_RemoveUserChatText_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CBroadcast_RemoveUserChatText_Response& a, CBroadcast_RemoveUserChatText_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_RemoveUserChatText_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_RemoveUserChatText_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_RemoveUserChatText_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_RemoveUserChatText_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CBroadcast_RemoveUserChatText_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CBroadcast_RemoveUserChatText_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_RemoveUserChatText_Response";
  }
  protected:
  explicit CBroadcast_RemoveUserChatText_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBroadcast_RemoveUserChatText_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastChatUserNames_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastChatUserNames_Request) */ {
 public:
  inline CBroadcast_GetBroadcastChatUserNames_Request() : CBroadcast_GetBroadcastChatUserNames_Request(nullptr) {}
  ~CBroadcast_GetBroadcastChatUserNames_Request() override;
  explicit constexpr CBroadcast_GetBroadcastChatUserNames_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastChatUserNames_Request(const CBroadcast_GetBroadcastChatUserNames_Request& from);
  CBroadcast_GetBroadcastChatUserNames_Request(CBroadcast_GetBroadcastChatUserNames_Request&& from) noexcept
    : CBroadcast_GetBroadcastChatUserNames_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastChatUserNames_Request& operator=(const CBroadcast_GetBroadcastChatUserNames_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastChatUserNames_Request& operator=(CBroadcast_GetBroadcastChatUserNames_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastChatUserNames_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastChatUserNames_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastChatUserNames_Request*>(
               &_CBroadcast_GetBroadcastChatUserNames_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CBroadcast_GetBroadcastChatUserNames_Request& a, CBroadcast_GetBroadcastChatUserNames_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastChatUserNames_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastChatUserNames_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastChatUserNames_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastChatUserNames_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastChatUserNames_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastChatUserNames_Request";
  }
  protected:
  explicit CBroadcast_GetBroadcastChatUserNames_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSteamidFieldNumber = 2,
    kChatIdFieldNumber = 1,
  };
  // repeated fixed64 user_steamid = 2;
  int user_steamid_size() const;
  private:
  int _internal_user_steamid_size() const;
  public:
  void clear_user_steamid();
  private:
  uint64_t _internal_user_steamid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_user_steamid() const;
  void _internal_add_user_steamid(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_user_steamid();
  public:
  uint64_t user_steamid(int index) const;
  void set_user_steamid(int index, uint64_t value);
  void add_user_steamid(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      user_steamid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_user_steamid();

  // optional fixed64 chat_id = 1;
  bool has_chat_id() const;
  private:
  bool _internal_has_chat_id() const;
  public:
  void clear_chat_id();
  uint64_t chat_id() const;
  void set_chat_id(uint64_t value);
  private:
  uint64_t _internal_chat_id() const;
  void _internal_set_chat_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastChatUserNames_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > user_steamid_;
  uint64_t chat_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastChatUserNames_Response_PersonaName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName) */ {
 public:
  inline CBroadcast_GetBroadcastChatUserNames_Response_PersonaName() : CBroadcast_GetBroadcastChatUserNames_Response_PersonaName(nullptr) {}
  ~CBroadcast_GetBroadcastChatUserNames_Response_PersonaName() override;
  explicit constexpr CBroadcast_GetBroadcastChatUserNames_Response_PersonaName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastChatUserNames_Response_PersonaName(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from);
  CBroadcast_GetBroadcastChatUserNames_Response_PersonaName(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName&& from) noexcept
    : CBroadcast_GetBroadcastChatUserNames_Response_PersonaName() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& operator=(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& operator=(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName*>(
               &_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& a, CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastChatUserNames_Response_PersonaName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastChatUserNames_Response.PersonaName";
  }
  protected:
  explicit CBroadcast_GetBroadcastChatUserNames_Response_PersonaName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaFieldNumber = 2,
    kSteamIdFieldNumber = 1,
  };
  // optional string persona = 2;
  bool has_persona() const;
  private:
  bool _internal_has_persona() const;
  public:
  void clear_persona();
  const std::string& persona() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona();
  PROTOBUF_NODISCARD std::string* release_persona();
  void set_allocated_persona(std::string* persona);
  private:
  const std::string& _internal_persona() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona(const std::string& value);
  std::string* _internal_mutable_persona();
  public:

  // optional fixed64 steam_id = 1 [(.allow_field_named_steam_id) = true];
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_;
  uint64_t steam_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastChatUserNames_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastChatUserNames_Response) */ {
 public:
  inline CBroadcast_GetBroadcastChatUserNames_Response() : CBroadcast_GetBroadcastChatUserNames_Response(nullptr) {}
  ~CBroadcast_GetBroadcastChatUserNames_Response() override;
  explicit constexpr CBroadcast_GetBroadcastChatUserNames_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastChatUserNames_Response(const CBroadcast_GetBroadcastChatUserNames_Response& from);
  CBroadcast_GetBroadcastChatUserNames_Response(CBroadcast_GetBroadcastChatUserNames_Response&& from) noexcept
    : CBroadcast_GetBroadcastChatUserNames_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastChatUserNames_Response& operator=(const CBroadcast_GetBroadcastChatUserNames_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastChatUserNames_Response& operator=(CBroadcast_GetBroadcastChatUserNames_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastChatUserNames_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastChatUserNames_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastChatUserNames_Response*>(
               &_CBroadcast_GetBroadcastChatUserNames_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CBroadcast_GetBroadcastChatUserNames_Response& a, CBroadcast_GetBroadcastChatUserNames_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastChatUserNames_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastChatUserNames_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastChatUserNames_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastChatUserNames_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastChatUserNames_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastChatUserNames_Response";
  }
  protected:
  explicit CBroadcast_GetBroadcastChatUserNames_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CBroadcast_GetBroadcastChatUserNames_Response_PersonaName PersonaName;

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaNamesFieldNumber = 1,
  };
  // repeated .CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
  int persona_names_size() const;
  private:
  int _internal_persona_names_size() const;
  public:
  void clear_persona_names();
  ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* mutable_persona_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >*
      mutable_persona_names();
  private:
  const ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& _internal_persona_names(int index) const;
  ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* _internal_add_persona_names();
  public:
  const ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& persona_names(int index) const;
  ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* add_persona_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >&
      persona_names() const;

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastChatUserNames_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName > persona_names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_StartBuildClip_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_StartBuildClip_Request) */ {
 public:
  inline CBroadcast_StartBuildClip_Request() : CBroadcast_StartBuildClip_Request(nullptr) {}
  ~CBroadcast_StartBuildClip_Request() override;
  explicit constexpr CBroadcast_StartBuildClip_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_StartBuildClip_Request(const CBroadcast_StartBuildClip_Request& from);
  CBroadcast_StartBuildClip_Request(CBroadcast_StartBuildClip_Request&& from) noexcept
    : CBroadcast_StartBuildClip_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_StartBuildClip_Request& operator=(const CBroadcast_StartBuildClip_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_StartBuildClip_Request& operator=(CBroadcast_StartBuildClip_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_StartBuildClip_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_StartBuildClip_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_StartBuildClip_Request*>(
               &_CBroadcast_StartBuildClip_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CBroadcast_StartBuildClip_Request& a, CBroadcast_StartBuildClip_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_StartBuildClip_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_StartBuildClip_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_StartBuildClip_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_StartBuildClip_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_StartBuildClip_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_StartBuildClip_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_StartBuildClip_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_StartBuildClip_Request";
  }
  protected:
  explicit CBroadcast_StartBuildClip_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipDescriptionFieldNumber = 5,
    kSteamidFieldNumber = 1,
    kBroadcastSessionIdFieldNumber = 2,
    kFirstSegmentFieldNumber = 3,
    kNumSegmentsFieldNumber = 4,
  };
  // optional string clip_description = 5;
  bool has_clip_description() const;
  private:
  bool _internal_has_clip_description() const;
  public:
  void clear_clip_description();
  const std::string& clip_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clip_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clip_description();
  PROTOBUF_NODISCARD std::string* release_clip_description();
  void set_allocated_clip_description(std::string* clip_description);
  private:
  const std::string& _internal_clip_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clip_description(const std::string& value);
  std::string* _internal_mutable_clip_description();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 broadcast_session_id = 2;
  bool has_broadcast_session_id() const;
  private:
  bool _internal_has_broadcast_session_id() const;
  public:
  void clear_broadcast_session_id();
  uint64_t broadcast_session_id() const;
  void set_broadcast_session_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_session_id() const;
  void _internal_set_broadcast_session_id(uint64_t value);
  public:

  // optional int32 first_segment = 3;
  bool has_first_segment() const;
  private:
  bool _internal_has_first_segment() const;
  public:
  void clear_first_segment();
  int32_t first_segment() const;
  void set_first_segment(int32_t value);
  private:
  int32_t _internal_first_segment() const;
  void _internal_set_first_segment(int32_t value);
  public:

  // optional int32 num_segments = 4;
  bool has_num_segments() const;
  private:
  bool _internal_has_num_segments() const;
  public:
  void clear_num_segments();
  int32_t num_segments() const;
  void set_num_segments(int32_t value);
  private:
  int32_t _internal_num_segments() const;
  void _internal_set_num_segments(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_StartBuildClip_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_description_;
  uint64_t steamid_;
  uint64_t broadcast_session_id_;
  int32_t first_segment_;
  int32_t num_segments_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_StartBuildClip_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_StartBuildClip_Response) */ {
 public:
  inline CBroadcast_StartBuildClip_Response() : CBroadcast_StartBuildClip_Response(nullptr) {}
  ~CBroadcast_StartBuildClip_Response() override;
  explicit constexpr CBroadcast_StartBuildClip_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_StartBuildClip_Response(const CBroadcast_StartBuildClip_Response& from);
  CBroadcast_StartBuildClip_Response(CBroadcast_StartBuildClip_Response&& from) noexcept
    : CBroadcast_StartBuildClip_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_StartBuildClip_Response& operator=(const CBroadcast_StartBuildClip_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_StartBuildClip_Response& operator=(CBroadcast_StartBuildClip_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_StartBuildClip_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_StartBuildClip_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_StartBuildClip_Response*>(
               &_CBroadcast_StartBuildClip_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CBroadcast_StartBuildClip_Response& a, CBroadcast_StartBuildClip_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_StartBuildClip_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_StartBuildClip_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_StartBuildClip_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_StartBuildClip_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_StartBuildClip_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_StartBuildClip_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_StartBuildClip_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_StartBuildClip_Response";
  }
  protected:
  explicit CBroadcast_StartBuildClip_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastClipIdFieldNumber = 1,
  };
  // optional fixed64 broadcast_clip_id = 1;
  bool has_broadcast_clip_id() const;
  private:
  bool _internal_has_broadcast_clip_id() const;
  public:
  void clear_broadcast_clip_id();
  uint64_t broadcast_clip_id() const;
  void set_broadcast_clip_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_clip_id() const;
  void _internal_set_broadcast_clip_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_StartBuildClip_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t broadcast_clip_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBuildClipStatus_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBuildClipStatus_Request) */ {
 public:
  inline CBroadcast_GetBuildClipStatus_Request() : CBroadcast_GetBuildClipStatus_Request(nullptr) {}
  ~CBroadcast_GetBuildClipStatus_Request() override;
  explicit constexpr CBroadcast_GetBuildClipStatus_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBuildClipStatus_Request(const CBroadcast_GetBuildClipStatus_Request& from);
  CBroadcast_GetBuildClipStatus_Request(CBroadcast_GetBuildClipStatus_Request&& from) noexcept
    : CBroadcast_GetBuildClipStatus_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBuildClipStatus_Request& operator=(const CBroadcast_GetBuildClipStatus_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBuildClipStatus_Request& operator=(CBroadcast_GetBuildClipStatus_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBuildClipStatus_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBuildClipStatus_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBuildClipStatus_Request*>(
               &_CBroadcast_GetBuildClipStatus_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CBroadcast_GetBuildClipStatus_Request& a, CBroadcast_GetBuildClipStatus_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBuildClipStatus_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBuildClipStatus_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBuildClipStatus_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBuildClipStatus_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBuildClipStatus_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBuildClipStatus_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBuildClipStatus_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBuildClipStatus_Request";
  }
  protected:
  explicit CBroadcast_GetBuildClipStatus_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastClipIdFieldNumber = 1,
  };
  // optional fixed64 broadcast_clip_id = 1;
  bool has_broadcast_clip_id() const;
  private:
  bool _internal_has_broadcast_clip_id() const;
  public:
  void clear_broadcast_clip_id();
  uint64_t broadcast_clip_id() const;
  void set_broadcast_clip_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_clip_id() const;
  void _internal_set_broadcast_clip_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBuildClipStatus_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t broadcast_clip_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBuildClipStatus_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CBroadcast_GetBuildClipStatus_Response) */ {
 public:
  inline CBroadcast_GetBuildClipStatus_Response() : CBroadcast_GetBuildClipStatus_Response(nullptr) {}
  explicit constexpr CBroadcast_GetBuildClipStatus_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBuildClipStatus_Response(const CBroadcast_GetBuildClipStatus_Response& from);
  CBroadcast_GetBuildClipStatus_Response(CBroadcast_GetBuildClipStatus_Response&& from) noexcept
    : CBroadcast_GetBuildClipStatus_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBuildClipStatus_Response& operator=(const CBroadcast_GetBuildClipStatus_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBuildClipStatus_Response& operator=(CBroadcast_GetBuildClipStatus_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBuildClipStatus_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBuildClipStatus_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBuildClipStatus_Response*>(
               &_CBroadcast_GetBuildClipStatus_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CBroadcast_GetBuildClipStatus_Response& a, CBroadcast_GetBuildClipStatus_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBuildClipStatus_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBuildClipStatus_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBuildClipStatus_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBuildClipStatus_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CBroadcast_GetBuildClipStatus_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CBroadcast_GetBuildClipStatus_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBuildClipStatus_Response";
  }
  protected:
  explicit CBroadcast_GetBuildClipStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBuildClipStatus_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_SetClipDetails_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_SetClipDetails_Request) */ {
 public:
  inline CBroadcast_SetClipDetails_Request() : CBroadcast_SetClipDetails_Request(nullptr) {}
  ~CBroadcast_SetClipDetails_Request() override;
  explicit constexpr CBroadcast_SetClipDetails_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_SetClipDetails_Request(const CBroadcast_SetClipDetails_Request& from);
  CBroadcast_SetClipDetails_Request(CBroadcast_SetClipDetails_Request&& from) noexcept
    : CBroadcast_SetClipDetails_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_SetClipDetails_Request& operator=(const CBroadcast_SetClipDetails_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_SetClipDetails_Request& operator=(CBroadcast_SetClipDetails_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_SetClipDetails_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_SetClipDetails_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SetClipDetails_Request*>(
               &_CBroadcast_SetClipDetails_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CBroadcast_SetClipDetails_Request& a, CBroadcast_SetClipDetails_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_SetClipDetails_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_SetClipDetails_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_SetClipDetails_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_SetClipDetails_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_SetClipDetails_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_SetClipDetails_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_SetClipDetails_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_SetClipDetails_Request";
  }
  protected:
  explicit CBroadcast_SetClipDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoDescriptionFieldNumber = 4,
    kBroadcastClipIdFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
  };
  // optional string video_description = 4;
  bool has_video_description() const;
  private:
  bool _internal_has_video_description() const;
  public:
  void clear_video_description();
  const std::string& video_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_video_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_video_description();
  PROTOBUF_NODISCARD std::string* release_video_description();
  void set_allocated_video_description(std::string* video_description);
  private:
  const std::string& _internal_video_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_video_description(const std::string& value);
  std::string* _internal_mutable_video_description();
  public:

  // optional uint64 broadcast_clip_id = 1 [(.description) = "Clip ID"];
  bool has_broadcast_clip_id() const;
  private:
  bool _internal_has_broadcast_clip_id() const;
  public:
  void clear_broadcast_clip_id();
  uint64_t broadcast_clip_id() const;
  void set_broadcast_clip_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_clip_id() const;
  void _internal_set_broadcast_clip_id(uint64_t value);
  public:

  // optional uint32 start_time = 2 [(.description) = "start time of the clip"];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  uint32_t start_time() const;
  void set_start_time(uint32_t value);
  private:
  uint32_t _internal_start_time() const;
  void _internal_set_start_time(uint32_t value);
  public:

  // optional uint32 end_time = 3 [(.description) = "end time of the clip"];
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  uint32_t end_time() const;
  void set_end_time(uint32_t value);
  private:
  uint32_t _internal_end_time() const;
  void _internal_set_end_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_SetClipDetails_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_description_;
  uint64_t broadcast_clip_id_;
  uint32_t start_time_;
  uint32_t end_time_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_SetClipDetails_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CBroadcast_SetClipDetails_Response) */ {
 public:
  inline CBroadcast_SetClipDetails_Response() : CBroadcast_SetClipDetails_Response(nullptr) {}
  explicit constexpr CBroadcast_SetClipDetails_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_SetClipDetails_Response(const CBroadcast_SetClipDetails_Response& from);
  CBroadcast_SetClipDetails_Response(CBroadcast_SetClipDetails_Response&& from) noexcept
    : CBroadcast_SetClipDetails_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_SetClipDetails_Response& operator=(const CBroadcast_SetClipDetails_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_SetClipDetails_Response& operator=(CBroadcast_SetClipDetails_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_SetClipDetails_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_SetClipDetails_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SetClipDetails_Response*>(
               &_CBroadcast_SetClipDetails_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CBroadcast_SetClipDetails_Response& a, CBroadcast_SetClipDetails_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_SetClipDetails_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_SetClipDetails_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_SetClipDetails_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_SetClipDetails_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CBroadcast_SetClipDetails_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CBroadcast_SetClipDetails_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_SetClipDetails_Response";
  }
  protected:
  explicit CBroadcast_SetClipDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBroadcast_SetClipDetails_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetClipDetails_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetClipDetails_Request) */ {
 public:
  inline CBroadcast_GetClipDetails_Request() : CBroadcast_GetClipDetails_Request(nullptr) {}
  ~CBroadcast_GetClipDetails_Request() override;
  explicit constexpr CBroadcast_GetClipDetails_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetClipDetails_Request(const CBroadcast_GetClipDetails_Request& from);
  CBroadcast_GetClipDetails_Request(CBroadcast_GetClipDetails_Request&& from) noexcept
    : CBroadcast_GetClipDetails_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetClipDetails_Request& operator=(const CBroadcast_GetClipDetails_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetClipDetails_Request& operator=(CBroadcast_GetClipDetails_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetClipDetails_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetClipDetails_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetClipDetails_Request*>(
               &_CBroadcast_GetClipDetails_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CBroadcast_GetClipDetails_Request& a, CBroadcast_GetClipDetails_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetClipDetails_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetClipDetails_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetClipDetails_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetClipDetails_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetClipDetails_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetClipDetails_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetClipDetails_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetClipDetails_Request";
  }
  protected:
  explicit CBroadcast_GetClipDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastClipIdFieldNumber = 1,
  };
  // optional uint64 broadcast_clip_id = 1 [(.description) = "List of clip IDs we want details for"];
  bool has_broadcast_clip_id() const;
  private:
  bool _internal_has_broadcast_clip_id() const;
  public:
  void clear_broadcast_clip_id();
  uint64_t broadcast_clip_id() const;
  void set_broadcast_clip_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_clip_id() const;
  void _internal_set_broadcast_clip_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetClipDetails_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t broadcast_clip_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetClipDetails_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetClipDetails_Response) */ {
 public:
  inline CBroadcast_GetClipDetails_Response() : CBroadcast_GetClipDetails_Response(nullptr) {}
  ~CBroadcast_GetClipDetails_Response() override;
  explicit constexpr CBroadcast_GetClipDetails_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetClipDetails_Response(const CBroadcast_GetClipDetails_Response& from);
  CBroadcast_GetClipDetails_Response(CBroadcast_GetClipDetails_Response&& from) noexcept
    : CBroadcast_GetClipDetails_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetClipDetails_Response& operator=(const CBroadcast_GetClipDetails_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetClipDetails_Response& operator=(CBroadcast_GetClipDetails_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetClipDetails_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetClipDetails_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetClipDetails_Response*>(
               &_CBroadcast_GetClipDetails_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CBroadcast_GetClipDetails_Response& a, CBroadcast_GetClipDetails_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetClipDetails_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetClipDetails_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetClipDetails_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetClipDetails_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetClipDetails_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetClipDetails_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetClipDetails_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetClipDetails_Response";
  }
  protected:
  explicit CBroadcast_GetClipDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoDescriptionFieldNumber = 7,
    kThumbnailPathFieldNumber = 10,
    kBroadcastClipIdFieldNumber = 1,
    kVideoIdFieldNumber = 2,
    kChannelIdFieldNumber = 3,
    kAppIdFieldNumber = 4,
    kAccountidBroadcasterFieldNumber = 5,
    kAccountidClipmakerFieldNumber = 6,
    kStartTimeFieldNumber = 8,
    kLengthMillisecondsFieldNumber = 9,
  };
  // optional string video_description = 7 [(.description) = "Short name or description of this clip"];
  bool has_video_description() const;
  private:
  bool _internal_has_video_description() const;
  public:
  void clear_video_description();
  const std::string& video_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_video_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_video_description();
  PROTOBUF_NODISCARD std::string* release_video_description();
  void set_allocated_video_description(std::string* video_description);
  private:
  const std::string& _internal_video_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_video_description(const std::string& value);
  std::string* _internal_mutable_video_description();
  public:

  // optional string thumbnail_path = 10 [(.description) = "Path for thumbnail URL"];
  bool has_thumbnail_path() const;
  private:
  bool _internal_has_thumbnail_path() const;
  public:
  void clear_thumbnail_path();
  const std::string& thumbnail_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail_path();
  PROTOBUF_NODISCARD std::string* release_thumbnail_path();
  void set_allocated_thumbnail_path(std::string* thumbnail_path);
  private:
  const std::string& _internal_thumbnail_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail_path(const std::string& value);
  std::string* _internal_mutable_thumbnail_path();
  public:

  // optional uint64 broadcast_clip_id = 1 [(.description) = "broadcast clip ID"];
  bool has_broadcast_clip_id() const;
  private:
  bool _internal_has_broadcast_clip_id() const;
  public:
  void clear_broadcast_clip_id();
  uint64_t broadcast_clip_id() const;
  void set_broadcast_clip_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_clip_id() const;
  void _internal_set_broadcast_clip_id(uint64_t value);
  public:

  // optional uint64 video_id = 2 [(.description) = "matching unique video ID"];
  bool has_video_id() const;
  private:
  bool _internal_has_video_id() const;
  public:
  void clear_video_id();
  uint64_t video_id() const;
  void set_video_id(uint64_t value);
  private:
  uint64_t _internal_video_id() const;
  void _internal_set_video_id(uint64_t value);
  public:

  // optional uint64 channel_id = 3 [(.description) = "Broadcast Channel ID"];
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  uint64_t channel_id() const;
  void set_channel_id(uint64_t value);
  private:
  uint64_t _internal_channel_id() const;
  void _internal_set_channel_id(uint64_t value);
  public:

  // optional uint32 app_id = 4 [(.description) = "App ID stream is tagged with"];
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 accountid_broadcaster = 5 [(.description) = "Account ID of broadcaster"];
  bool has_accountid_broadcaster() const;
  private:
  bool _internal_has_accountid_broadcaster() const;
  public:
  void clear_accountid_broadcaster();
  uint32_t accountid_broadcaster() const;
  void set_accountid_broadcaster(uint32_t value);
  private:
  uint32_t _internal_accountid_broadcaster() const;
  void _internal_set_accountid_broadcaster(uint32_t value);
  public:

  // optional uint32 accountid_clipmaker = 6 [(.description) = "Account ID of clip-maker"];
  bool has_accountid_clipmaker() const;
  private:
  bool _internal_has_accountid_clipmaker() const;
  public:
  void clear_accountid_clipmaker();
  uint32_t accountid_clipmaker() const;
  void set_accountid_clipmaker(uint32_t value);
  private:
  uint32_t _internal_accountid_clipmaker() const;
  void _internal_set_accountid_clipmaker(uint32_t value);
  public:

  // optional uint32 start_time = 8 [(.description) = "Wall time clip was broadcasted live"];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  uint32_t start_time() const;
  void set_start_time(uint32_t value);
  private:
  uint32_t _internal_start_time() const;
  void _internal_set_start_time(uint32_t value);
  public:

  // optional uint32 length_milliseconds = 9 [(.description) = "length of video in MS"];
  bool has_length_milliseconds() const;
  private:
  bool _internal_has_length_milliseconds() const;
  public:
  void clear_length_milliseconds();
  uint32_t length_milliseconds() const;
  void set_length_milliseconds(uint32_t value);
  private:
  uint32_t _internal_length_milliseconds() const;
  void _internal_set_length_milliseconds(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetClipDetails_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_path_;
  uint64_t broadcast_clip_id_;
  uint64_t video_id_;
  uint64_t channel_id_;
  uint32_t app_id_;
  uint32_t accountid_broadcaster_;
  uint32_t accountid_clipmaker_;
  uint32_t start_time_;
  uint32_t length_milliseconds_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_SetRTMPInfo_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_SetRTMPInfo_Request) */ {
 public:
  inline CBroadcast_SetRTMPInfo_Request() : CBroadcast_SetRTMPInfo_Request(nullptr) {}
  ~CBroadcast_SetRTMPInfo_Request() override;
  explicit constexpr CBroadcast_SetRTMPInfo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_SetRTMPInfo_Request(const CBroadcast_SetRTMPInfo_Request& from);
  CBroadcast_SetRTMPInfo_Request(CBroadcast_SetRTMPInfo_Request&& from) noexcept
    : CBroadcast_SetRTMPInfo_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_SetRTMPInfo_Request& operator=(const CBroadcast_SetRTMPInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_SetRTMPInfo_Request& operator=(CBroadcast_SetRTMPInfo_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_SetRTMPInfo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_SetRTMPInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SetRTMPInfo_Request*>(
               &_CBroadcast_SetRTMPInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CBroadcast_SetRTMPInfo_Request& a, CBroadcast_SetRTMPInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_SetRTMPInfo_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_SetRTMPInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_SetRTMPInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_SetRTMPInfo_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_SetRTMPInfo_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_SetRTMPInfo_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_SetRTMPInfo_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_SetRTMPInfo_Request";
  }
  protected:
  explicit CBroadcast_SetRTMPInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordbanListFieldNumber = 12,
    kBroadcastPermissionFieldNumber = 1,
    kBroadcastDelayFieldNumber = 3,
    kAppIdFieldNumber = 4,
    kRequiredAppIdFieldNumber = 5,
    kBroadcastChatPermissionFieldNumber = 6,
    kBroadcastBufferFieldNumber = 7,
    kSteamidFieldNumber = 8,
    kUpdateTokenFieldNumber = 2,
    kEnableReplayFieldNumber = 10,
    kIsPartnerChatOnlyFieldNumber = 11,
    kChatRateLimitFieldNumber = 9,
  };
  // optional string wordban_list = 12;
  bool has_wordban_list() const;
  private:
  bool _internal_has_wordban_list() const;
  public:
  void clear_wordban_list();
  const std::string& wordban_list() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wordban_list(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wordban_list();
  PROTOBUF_NODISCARD std::string* release_wordban_list();
  void set_allocated_wordban_list(std::string* wordban_list);
  private:
  const std::string& _internal_wordban_list() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wordban_list(const std::string& value);
  std::string* _internal_mutable_wordban_list();
  public:

  // optional int32 broadcast_permission = 1;
  bool has_broadcast_permission() const;
  private:
  bool _internal_has_broadcast_permission() const;
  public:
  void clear_broadcast_permission();
  int32_t broadcast_permission() const;
  void set_broadcast_permission(int32_t value);
  private:
  int32_t _internal_broadcast_permission() const;
  void _internal_set_broadcast_permission(int32_t value);
  public:

  // optional int32 broadcast_delay = 3;
  bool has_broadcast_delay() const;
  private:
  bool _internal_has_broadcast_delay() const;
  public:
  void clear_broadcast_delay();
  int32_t broadcast_delay() const;
  void set_broadcast_delay(int32_t value);
  private:
  int32_t _internal_broadcast_delay() const;
  void _internal_set_broadcast_delay(int32_t value);
  public:

  // optional uint32 app_id = 4;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 required_app_id = 5;
  bool has_required_app_id() const;
  private:
  bool _internal_has_required_app_id() const;
  public:
  void clear_required_app_id();
  uint32_t required_app_id() const;
  void set_required_app_id(uint32_t value);
  private:
  uint32_t _internal_required_app_id() const;
  void _internal_set_required_app_id(uint32_t value);
  public:

  // optional .EBroadcastChatPermission broadcast_chat_permission = 6 [default = k_EBroadcastChatPermissionPublic, (.description) = "Who is permitted to send a chat message during broadcast"];
  bool has_broadcast_chat_permission() const;
  private:
  bool _internal_has_broadcast_chat_permission() const;
  public:
  void clear_broadcast_chat_permission();
  ::EBroadcastChatPermission broadcast_chat_permission() const;
  void set_broadcast_chat_permission(::EBroadcastChatPermission value);
  private:
  ::EBroadcastChatPermission _internal_broadcast_chat_permission() const;
  void _internal_set_broadcast_chat_permission(::EBroadcastChatPermission value);
  public:

  // optional int32 broadcast_buffer = 7 [(.description) = "Previous seconds we keep of the stream available"];
  bool has_broadcast_buffer() const;
  private:
  bool _internal_has_broadcast_buffer() const;
  public:
  void clear_broadcast_buffer();
  int32_t broadcast_buffer() const;
  void set_broadcast_buffer(int32_t value);
  private:
  int32_t _internal_broadcast_buffer() const;
  void _internal_set_broadcast_buffer(int32_t value);
  public:

  // optional fixed64 steamid = 8 [(.description) = "broadcaster steamID if not logged-in user"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional bool update_token = 2;
  bool has_update_token() const;
  private:
  bool _internal_has_update_token() const;
  public:
  void clear_update_token();
  bool update_token() const;
  void set_update_token(bool value);
  private:
  bool _internal_update_token() const;
  void _internal_set_update_token(bool value);
  public:

  // optional bool enable_replay = 10 [(.description) = "Enable replay of last upload"];
  bool has_enable_replay() const;
  private:
  bool _internal_has_enable_replay() const;
  public:
  void clear_enable_replay();
  bool enable_replay() const;
  void set_enable_replay(bool value);
  private:
  bool _internal_enable_replay() const;
  void _internal_set_enable_replay(bool value);
  public:

  // optional bool is_partner_chat_only = 11 [(.description) = "When true, then only steamwork partner can create chat messages."];
  bool has_is_partner_chat_only() const;
  private:
  bool _internal_has_is_partner_chat_only() const;
  public:
  void clear_is_partner_chat_only();
  bool is_partner_chat_only() const;
  void set_is_partner_chat_only(bool value);
  private:
  bool _internal_is_partner_chat_only() const;
  void _internal_set_is_partner_chat_only(bool value);
  public:

  // optional uint32 chat_rate_limit = 9 [(.description) = "Seconds required between chat messages"];
  bool has_chat_rate_limit() const;
  private:
  bool _internal_has_chat_rate_limit() const;
  public:
  void clear_chat_rate_limit();
  uint32_t chat_rate_limit() const;
  void set_chat_rate_limit(uint32_t value);
  private:
  uint32_t _internal_chat_rate_limit() const;
  void _internal_set_chat_rate_limit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_SetRTMPInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wordban_list_;
  int32_t broadcast_permission_;
  int32_t broadcast_delay_;
  uint32_t app_id_;
  uint32_t required_app_id_;
  int broadcast_chat_permission_;
  int32_t broadcast_buffer_;
  uint64_t steamid_;
  bool update_token_;
  bool enable_replay_;
  bool is_partner_chat_only_;
  uint32_t chat_rate_limit_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_SetRTMPInfo_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CBroadcast_SetRTMPInfo_Response) */ {
 public:
  inline CBroadcast_SetRTMPInfo_Response() : CBroadcast_SetRTMPInfo_Response(nullptr) {}
  explicit constexpr CBroadcast_SetRTMPInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_SetRTMPInfo_Response(const CBroadcast_SetRTMPInfo_Response& from);
  CBroadcast_SetRTMPInfo_Response(CBroadcast_SetRTMPInfo_Response&& from) noexcept
    : CBroadcast_SetRTMPInfo_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_SetRTMPInfo_Response& operator=(const CBroadcast_SetRTMPInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_SetRTMPInfo_Response& operator=(CBroadcast_SetRTMPInfo_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_SetRTMPInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_SetRTMPInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SetRTMPInfo_Response*>(
               &_CBroadcast_SetRTMPInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CBroadcast_SetRTMPInfo_Response& a, CBroadcast_SetRTMPInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_SetRTMPInfo_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_SetRTMPInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_SetRTMPInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_SetRTMPInfo_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CBroadcast_SetRTMPInfo_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CBroadcast_SetRTMPInfo_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_SetRTMPInfo_Response";
  }
  protected:
  explicit CBroadcast_SetRTMPInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBroadcast_SetRTMPInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetRTMPInfo_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetRTMPInfo_Request) */ {
 public:
  inline CBroadcast_GetRTMPInfo_Request() : CBroadcast_GetRTMPInfo_Request(nullptr) {}
  ~CBroadcast_GetRTMPInfo_Request() override;
  explicit constexpr CBroadcast_GetRTMPInfo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetRTMPInfo_Request(const CBroadcast_GetRTMPInfo_Request& from);
  CBroadcast_GetRTMPInfo_Request(CBroadcast_GetRTMPInfo_Request&& from) noexcept
    : CBroadcast_GetRTMPInfo_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetRTMPInfo_Request& operator=(const CBroadcast_GetRTMPInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetRTMPInfo_Request& operator=(CBroadcast_GetRTMPInfo_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetRTMPInfo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetRTMPInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetRTMPInfo_Request*>(
               &_CBroadcast_GetRTMPInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CBroadcast_GetRTMPInfo_Request& a, CBroadcast_GetRTMPInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetRTMPInfo_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetRTMPInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetRTMPInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetRTMPInfo_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetRTMPInfo_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetRTMPInfo_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetRTMPInfo_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetRTMPInfo_Request";
  }
  protected:
  explicit CBroadcast_GetRTMPInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 2,
    kIpFieldNumber = 1,
  };
  // optional fixed64 steamid = 2 [(.description) = "broadcaster steamID if not logged-in user"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  uint32_t ip() const;
  void set_ip(uint32_t value);
  private:
  uint32_t _internal_ip() const;
  void _internal_set_ip(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetRTMPInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint32_t ip_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetRTMPInfo_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetRTMPInfo_Response) */ {
 public:
  inline CBroadcast_GetRTMPInfo_Response() : CBroadcast_GetRTMPInfo_Response(nullptr) {}
  ~CBroadcast_GetRTMPInfo_Response() override;
  explicit constexpr CBroadcast_GetRTMPInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetRTMPInfo_Response(const CBroadcast_GetRTMPInfo_Response& from);
  CBroadcast_GetRTMPInfo_Response(CBroadcast_GetRTMPInfo_Response&& from) noexcept
    : CBroadcast_GetRTMPInfo_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetRTMPInfo_Response& operator=(const CBroadcast_GetRTMPInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetRTMPInfo_Response& operator=(CBroadcast_GetRTMPInfo_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetRTMPInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetRTMPInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetRTMPInfo_Response*>(
               &_CBroadcast_GetRTMPInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CBroadcast_GetRTMPInfo_Response& a, CBroadcast_GetRTMPInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetRTMPInfo_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetRTMPInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetRTMPInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetRTMPInfo_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetRTMPInfo_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetRTMPInfo_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetRTMPInfo_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetRTMPInfo_Response";
  }
  protected:
  explicit CBroadcast_GetRTMPInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtmpHostFieldNumber = 2,
    kRtmpTokenFieldNumber = 3,
    kWordbanListFieldNumber = 13,
    kBroadcastPermissionFieldNumber = 1,
    kBroadcastDelayFieldNumber = 4,
    kAppIdFieldNumber = 5,
    kRequiredAppIdFieldNumber = 6,
    kBroadcastChatPermissionFieldNumber = 7,
    kBroadcastBufferFieldNumber = 8,
    kSteamidFieldNumber = 9,
    kChatRateLimitFieldNumber = 10,
    kEnableReplayFieldNumber = 11,
    kIsPartnerChatOnlyFieldNumber = 12,
  };
  // optional string rtmp_host = 2;
  bool has_rtmp_host() const;
  private:
  bool _internal_has_rtmp_host() const;
  public:
  void clear_rtmp_host();
  const std::string& rtmp_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rtmp_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rtmp_host();
  PROTOBUF_NODISCARD std::string* release_rtmp_host();
  void set_allocated_rtmp_host(std::string* rtmp_host);
  private:
  const std::string& _internal_rtmp_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rtmp_host(const std::string& value);
  std::string* _internal_mutable_rtmp_host();
  public:

  // optional string rtmp_token = 3;
  bool has_rtmp_token() const;
  private:
  bool _internal_has_rtmp_token() const;
  public:
  void clear_rtmp_token();
  const std::string& rtmp_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rtmp_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rtmp_token();
  PROTOBUF_NODISCARD std::string* release_rtmp_token();
  void set_allocated_rtmp_token(std::string* rtmp_token);
  private:
  const std::string& _internal_rtmp_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rtmp_token(const std::string& value);
  std::string* _internal_mutable_rtmp_token();
  public:

  // optional string wordban_list = 13;
  bool has_wordban_list() const;
  private:
  bool _internal_has_wordban_list() const;
  public:
  void clear_wordban_list();
  const std::string& wordban_list() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wordban_list(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wordban_list();
  PROTOBUF_NODISCARD std::string* release_wordban_list();
  void set_allocated_wordban_list(std::string* wordban_list);
  private:
  const std::string& _internal_wordban_list() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wordban_list(const std::string& value);
  std::string* _internal_mutable_wordban_list();
  public:

  // optional int32 broadcast_permission = 1;
  bool has_broadcast_permission() const;
  private:
  bool _internal_has_broadcast_permission() const;
  public:
  void clear_broadcast_permission();
  int32_t broadcast_permission() const;
  void set_broadcast_permission(int32_t value);
  private:
  int32_t _internal_broadcast_permission() const;
  void _internal_set_broadcast_permission(int32_t value);
  public:

  // optional int32 broadcast_delay = 4;
  bool has_broadcast_delay() const;
  private:
  bool _internal_has_broadcast_delay() const;
  public:
  void clear_broadcast_delay();
  int32_t broadcast_delay() const;
  void set_broadcast_delay(int32_t value);
  private:
  int32_t _internal_broadcast_delay() const;
  void _internal_set_broadcast_delay(int32_t value);
  public:

  // optional uint32 app_id = 5;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 required_app_id = 6;
  bool has_required_app_id() const;
  private:
  bool _internal_has_required_app_id() const;
  public:
  void clear_required_app_id();
  uint32_t required_app_id() const;
  void set_required_app_id(uint32_t value);
  private:
  uint32_t _internal_required_app_id() const;
  void _internal_set_required_app_id(uint32_t value);
  public:

  // optional .EBroadcastChatPermission broadcast_chat_permission = 7 [default = k_EBroadcastChatPermissionPublic, (.description) = "Who is permitted to send a chat message during broadcast"];
  bool has_broadcast_chat_permission() const;
  private:
  bool _internal_has_broadcast_chat_permission() const;
  public:
  void clear_broadcast_chat_permission();
  ::EBroadcastChatPermission broadcast_chat_permission() const;
  void set_broadcast_chat_permission(::EBroadcastChatPermission value);
  private:
  ::EBroadcastChatPermission _internal_broadcast_chat_permission() const;
  void _internal_set_broadcast_chat_permission(::EBroadcastChatPermission value);
  public:

  // optional int32 broadcast_buffer = 8 [(.description) = "Seconds we keep streams available"];
  bool has_broadcast_buffer() const;
  private:
  bool _internal_has_broadcast_buffer() const;
  public:
  void clear_broadcast_buffer();
  int32_t broadcast_buffer() const;
  void set_broadcast_buffer(int32_t value);
  private:
  int32_t _internal_broadcast_buffer() const;
  void _internal_set_broadcast_buffer(int32_t value);
  public:

  // optional fixed64 steamid = 9 [(.description) = "broadcaster steamID"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 chat_rate_limit = 10 [(.description) = "Seconds required between chat messages"];
  bool has_chat_rate_limit() const;
  private:
  bool _internal_has_chat_rate_limit() const;
  public:
  void clear_chat_rate_limit();
  uint32_t chat_rate_limit() const;
  void set_chat_rate_limit(uint32_t value);
  private:
  uint32_t _internal_chat_rate_limit() const;
  void _internal_set_chat_rate_limit(uint32_t value);
  public:

  // optional bool enable_replay = 11 [(.description) = "Enable replay of last upload"];
  bool has_enable_replay() const;
  private:
  bool _internal_has_enable_replay() const;
  public:
  void clear_enable_replay();
  bool enable_replay() const;
  void set_enable_replay(bool value);
  private:
  bool _internal_enable_replay() const;
  void _internal_set_enable_replay(bool value);
  public:

  // optional bool is_partner_chat_only = 12 [(.description) = "When true, then only steamwork partner can create chat messages."];
  bool has_is_partner_chat_only() const;
  private:
  bool _internal_has_is_partner_chat_only() const;
  public:
  void clear_is_partner_chat_only();
  bool is_partner_chat_only() const;
  void set_is_partner_chat_only(bool value);
  private:
  bool _internal_is_partner_chat_only() const;
  void _internal_set_is_partner_chat_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetRTMPInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rtmp_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rtmp_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wordban_list_;
  int32_t broadcast_permission_;
  int32_t broadcast_delay_;
  uint32_t app_id_;
  uint32_t required_app_id_;
  int broadcast_chat_permission_;
  int32_t broadcast_buffer_;
  uint64_t steamid_;
  uint32_t chat_rate_limit_;
  bool enable_replay_;
  bool is_partner_chat_only_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCHaveTURNServer_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCHaveTURNServer_Notification) */ {
 public:
  inline CBroadcast_WebRTCHaveTURNServer_Notification() : CBroadcast_WebRTCHaveTURNServer_Notification(nullptr) {}
  ~CBroadcast_WebRTCHaveTURNServer_Notification() override;
  explicit constexpr CBroadcast_WebRTCHaveTURNServer_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCHaveTURNServer_Notification(const CBroadcast_WebRTCHaveTURNServer_Notification& from);
  CBroadcast_WebRTCHaveTURNServer_Notification(CBroadcast_WebRTCHaveTURNServer_Notification&& from) noexcept
    : CBroadcast_WebRTCHaveTURNServer_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCHaveTURNServer_Notification& operator=(const CBroadcast_WebRTCHaveTURNServer_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCHaveTURNServer_Notification& operator=(CBroadcast_WebRTCHaveTURNServer_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCHaveTURNServer_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCHaveTURNServer_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCHaveTURNServer_Notification*>(
               &_CBroadcast_WebRTCHaveTURNServer_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CBroadcast_WebRTCHaveTURNServer_Notification& a, CBroadcast_WebRTCHaveTURNServer_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCHaveTURNServer_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCHaveTURNServer_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCHaveTURNServer_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCHaveTURNServer_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WebRTCHaveTURNServer_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCHaveTURNServer_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCHaveTURNServer_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCHaveTURNServer_Notification";
  }
  protected:
  explicit CBroadcast_WebRTCHaveTURNServer_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTurnServerFieldNumber = 2,
    kBroadcastSessionIdFieldNumber = 1,
  };
  // optional string turn_server = 2;
  bool has_turn_server() const;
  private:
  bool _internal_has_turn_server() const;
  public:
  void clear_turn_server();
  const std::string& turn_server() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_turn_server(ArgT0&& arg0, ArgT... args);
  std::string* mutable_turn_server();
  PROTOBUF_NODISCARD std::string* release_turn_server();
  void set_allocated_turn_server(std::string* turn_server);
  private:
  const std::string& _internal_turn_server() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_turn_server(const std::string& value);
  std::string* _internal_mutable_turn_server();
  public:

  // optional fixed64 broadcast_session_id = 1;
  bool has_broadcast_session_id() const;
  private:
  bool _internal_has_broadcast_session_id() const;
  public:
  void clear_broadcast_session_id();
  uint64_t broadcast_session_id() const;
  void set_broadcast_session_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_session_id() const;
  void _internal_set_broadcast_session_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCHaveTURNServer_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr turn_server_;
  uint64_t broadcast_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCStartResult_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCStartResult_Request) */ {
 public:
  inline CBroadcast_WebRTCStartResult_Request() : CBroadcast_WebRTCStartResult_Request(nullptr) {}
  ~CBroadcast_WebRTCStartResult_Request() override;
  explicit constexpr CBroadcast_WebRTCStartResult_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCStartResult_Request(const CBroadcast_WebRTCStartResult_Request& from);
  CBroadcast_WebRTCStartResult_Request(CBroadcast_WebRTCStartResult_Request&& from) noexcept
    : CBroadcast_WebRTCStartResult_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCStartResult_Request& operator=(const CBroadcast_WebRTCStartResult_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCStartResult_Request& operator=(CBroadcast_WebRTCStartResult_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCStartResult_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCStartResult_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCStartResult_Request*>(
               &_CBroadcast_WebRTCStartResult_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CBroadcast_WebRTCStartResult_Request& a, CBroadcast_WebRTCStartResult_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCStartResult_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCStartResult_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCStartResult_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCStartResult_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WebRTCStartResult_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCStartResult_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCStartResult_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCStartResult_Request";
  }
  protected:
  explicit CBroadcast_WebRTCStartResult_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfferFieldNumber = 3,
    kWebrtcSessionIdFieldNumber = 1,
    kStartedFieldNumber = 2,
    kResolutionXFieldNumber = 4,
    kResolutionYFieldNumber = 5,
    kFpsFieldNumber = 6,
  };
  // optional string offer = 3;
  bool has_offer() const;
  private:
  bool _internal_has_offer() const;
  public:
  void clear_offer();
  const std::string& offer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offer();
  PROTOBUF_NODISCARD std::string* release_offer();
  void set_allocated_offer(std::string* offer);
  private:
  const std::string& _internal_offer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offer(const std::string& value);
  std::string* _internal_mutable_offer();
  public:

  // optional fixed64 webrtc_session_id = 1;
  bool has_webrtc_session_id() const;
  private:
  bool _internal_has_webrtc_session_id() const;
  public:
  void clear_webrtc_session_id();
  uint64_t webrtc_session_id() const;
  void set_webrtc_session_id(uint64_t value);
  private:
  uint64_t _internal_webrtc_session_id() const;
  void _internal_set_webrtc_session_id(uint64_t value);
  public:

  // optional bool started = 2;
  bool has_started() const;
  private:
  bool _internal_has_started() const;
  public:
  void clear_started();
  bool started() const;
  void set_started(bool value);
  private:
  bool _internal_started() const;
  void _internal_set_started(bool value);
  public:

  // optional uint32 resolution_x = 4;
  bool has_resolution_x() const;
  private:
  bool _internal_has_resolution_x() const;
  public:
  void clear_resolution_x();
  uint32_t resolution_x() const;
  void set_resolution_x(uint32_t value);
  private:
  uint32_t _internal_resolution_x() const;
  void _internal_set_resolution_x(uint32_t value);
  public:

  // optional uint32 resolution_y = 5;
  bool has_resolution_y() const;
  private:
  bool _internal_has_resolution_y() const;
  public:
  void clear_resolution_y();
  uint32_t resolution_y() const;
  void set_resolution_y(uint32_t value);
  private:
  uint32_t _internal_resolution_y() const;
  void _internal_set_resolution_y(uint32_t value);
  public:

  // optional uint32 fps = 6;
  bool has_fps() const;
  private:
  bool _internal_has_fps() const;
  public:
  void clear_fps();
  uint32_t fps() const;
  void set_fps(uint32_t value);
  private:
  uint32_t _internal_fps() const;
  void _internal_set_fps(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCStartResult_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offer_;
  uint64_t webrtc_session_id_;
  bool started_;
  uint32_t resolution_x_;
  uint32_t resolution_y_;
  uint32_t fps_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCStartResult_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCStartResult_Response) */ {
 public:
  inline CBroadcast_WebRTCStartResult_Response() : CBroadcast_WebRTCStartResult_Response(nullptr) {}
  explicit constexpr CBroadcast_WebRTCStartResult_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCStartResult_Response(const CBroadcast_WebRTCStartResult_Response& from);
  CBroadcast_WebRTCStartResult_Response(CBroadcast_WebRTCStartResult_Response&& from) noexcept
    : CBroadcast_WebRTCStartResult_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCStartResult_Response& operator=(const CBroadcast_WebRTCStartResult_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCStartResult_Response& operator=(CBroadcast_WebRTCStartResult_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCStartResult_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCStartResult_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCStartResult_Response*>(
               &_CBroadcast_WebRTCStartResult_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CBroadcast_WebRTCStartResult_Response& a, CBroadcast_WebRTCStartResult_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCStartResult_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCStartResult_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCStartResult_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCStartResult_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CBroadcast_WebRTCStartResult_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCStartResult_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCStartResult_Response";
  }
  protected:
  explicit CBroadcast_WebRTCStartResult_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCStartResult_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCStopped_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCStopped_Request) */ {
 public:
  inline CBroadcast_WebRTCStopped_Request() : CBroadcast_WebRTCStopped_Request(nullptr) {}
  ~CBroadcast_WebRTCStopped_Request() override;
  explicit constexpr CBroadcast_WebRTCStopped_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCStopped_Request(const CBroadcast_WebRTCStopped_Request& from);
  CBroadcast_WebRTCStopped_Request(CBroadcast_WebRTCStopped_Request&& from) noexcept
    : CBroadcast_WebRTCStopped_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCStopped_Request& operator=(const CBroadcast_WebRTCStopped_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCStopped_Request& operator=(CBroadcast_WebRTCStopped_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCStopped_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCStopped_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCStopped_Request*>(
               &_CBroadcast_WebRTCStopped_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CBroadcast_WebRTCStopped_Request& a, CBroadcast_WebRTCStopped_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCStopped_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCStopped_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCStopped_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCStopped_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WebRTCStopped_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCStopped_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCStopped_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCStopped_Request";
  }
  protected:
  explicit CBroadcast_WebRTCStopped_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWebrtcSessionIdFieldNumber = 1,
  };
  // optional fixed64 webrtc_session_id = 1;
  bool has_webrtc_session_id() const;
  private:
  bool _internal_has_webrtc_session_id() const;
  public:
  void clear_webrtc_session_id();
  uint64_t webrtc_session_id() const;
  void set_webrtc_session_id(uint64_t value);
  private:
  uint64_t _internal_webrtc_session_id() const;
  void _internal_set_webrtc_session_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCStopped_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t webrtc_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCStopped_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCStopped_Response) */ {
 public:
  inline CBroadcast_WebRTCStopped_Response() : CBroadcast_WebRTCStopped_Response(nullptr) {}
  explicit constexpr CBroadcast_WebRTCStopped_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCStopped_Response(const CBroadcast_WebRTCStopped_Response& from);
  CBroadcast_WebRTCStopped_Response(CBroadcast_WebRTCStopped_Response&& from) noexcept
    : CBroadcast_WebRTCStopped_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCStopped_Response& operator=(const CBroadcast_WebRTCStopped_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCStopped_Response& operator=(CBroadcast_WebRTCStopped_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCStopped_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCStopped_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCStopped_Response*>(
               &_CBroadcast_WebRTCStopped_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CBroadcast_WebRTCStopped_Response& a, CBroadcast_WebRTCStopped_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCStopped_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCStopped_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCStopped_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCStopped_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CBroadcast_WebRTCStopped_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCStopped_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCStopped_Response";
  }
  protected:
  explicit CBroadcast_WebRTCStopped_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCStopped_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCSetAnswer_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCSetAnswer_Request) */ {
 public:
  inline CBroadcast_WebRTCSetAnswer_Request() : CBroadcast_WebRTCSetAnswer_Request(nullptr) {}
  ~CBroadcast_WebRTCSetAnswer_Request() override;
  explicit constexpr CBroadcast_WebRTCSetAnswer_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCSetAnswer_Request(const CBroadcast_WebRTCSetAnswer_Request& from);
  CBroadcast_WebRTCSetAnswer_Request(CBroadcast_WebRTCSetAnswer_Request&& from) noexcept
    : CBroadcast_WebRTCSetAnswer_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCSetAnswer_Request& operator=(const CBroadcast_WebRTCSetAnswer_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCSetAnswer_Request& operator=(CBroadcast_WebRTCSetAnswer_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCSetAnswer_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCSetAnswer_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCSetAnswer_Request*>(
               &_CBroadcast_WebRTCSetAnswer_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CBroadcast_WebRTCSetAnswer_Request& a, CBroadcast_WebRTCSetAnswer_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCSetAnswer_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCSetAnswer_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCSetAnswer_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCSetAnswer_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WebRTCSetAnswer_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCSetAnswer_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCSetAnswer_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCSetAnswer_Request";
  }
  protected:
  explicit CBroadcast_WebRTCSetAnswer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 3,
    kBroadcasterSteamidFieldNumber = 1,
    kWebrtcSessionIdFieldNumber = 2,
  };
  // optional string answer = 3;
  bool has_answer() const;
  private:
  bool _internal_has_answer() const;
  public:
  void clear_answer();
  const std::string& answer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_answer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_answer();
  PROTOBUF_NODISCARD std::string* release_answer();
  void set_allocated_answer(std::string* answer);
  private:
  const std::string& _internal_answer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_answer(const std::string& value);
  std::string* _internal_mutable_answer();
  public:

  // optional fixed64 broadcaster_steamid = 1;
  bool has_broadcaster_steamid() const;
  private:
  bool _internal_has_broadcaster_steamid() const;
  public:
  void clear_broadcaster_steamid();
  uint64_t broadcaster_steamid() const;
  void set_broadcaster_steamid(uint64_t value);
  private:
  uint64_t _internal_broadcaster_steamid() const;
  void _internal_set_broadcaster_steamid(uint64_t value);
  public:

  // optional fixed64 webrtc_session_id = 2;
  bool has_webrtc_session_id() const;
  private:
  bool _internal_has_webrtc_session_id() const;
  public:
  void clear_webrtc_session_id();
  uint64_t webrtc_session_id() const;
  void set_webrtc_session_id(uint64_t value);
  private:
  uint64_t _internal_webrtc_session_id() const;
  void _internal_set_webrtc_session_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCSetAnswer_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_;
  uint64_t broadcaster_steamid_;
  uint64_t webrtc_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCSetAnswer_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCSetAnswer_Response) */ {
 public:
  inline CBroadcast_WebRTCSetAnswer_Response() : CBroadcast_WebRTCSetAnswer_Response(nullptr) {}
  explicit constexpr CBroadcast_WebRTCSetAnswer_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCSetAnswer_Response(const CBroadcast_WebRTCSetAnswer_Response& from);
  CBroadcast_WebRTCSetAnswer_Response(CBroadcast_WebRTCSetAnswer_Response&& from) noexcept
    : CBroadcast_WebRTCSetAnswer_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCSetAnswer_Response& operator=(const CBroadcast_WebRTCSetAnswer_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCSetAnswer_Response& operator=(CBroadcast_WebRTCSetAnswer_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCSetAnswer_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCSetAnswer_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCSetAnswer_Response*>(
               &_CBroadcast_WebRTCSetAnswer_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CBroadcast_WebRTCSetAnswer_Response& a, CBroadcast_WebRTCSetAnswer_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCSetAnswer_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCSetAnswer_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCSetAnswer_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCSetAnswer_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CBroadcast_WebRTCSetAnswer_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCSetAnswer_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCSetAnswer_Response";
  }
  protected:
  explicit CBroadcast_WebRTCSetAnswer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCSetAnswer_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCLookupTURNServer_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCLookupTURNServer_Request) */ {
 public:
  inline CBroadcast_WebRTCLookupTURNServer_Request() : CBroadcast_WebRTCLookupTURNServer_Request(nullptr) {}
  ~CBroadcast_WebRTCLookupTURNServer_Request() override;
  explicit constexpr CBroadcast_WebRTCLookupTURNServer_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCLookupTURNServer_Request(const CBroadcast_WebRTCLookupTURNServer_Request& from);
  CBroadcast_WebRTCLookupTURNServer_Request(CBroadcast_WebRTCLookupTURNServer_Request&& from) noexcept
    : CBroadcast_WebRTCLookupTURNServer_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCLookupTURNServer_Request& operator=(const CBroadcast_WebRTCLookupTURNServer_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCLookupTURNServer_Request& operator=(CBroadcast_WebRTCLookupTURNServer_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCLookupTURNServer_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCLookupTURNServer_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCLookupTURNServer_Request*>(
               &_CBroadcast_WebRTCLookupTURNServer_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CBroadcast_WebRTCLookupTURNServer_Request& a, CBroadcast_WebRTCLookupTURNServer_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCLookupTURNServer_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCLookupTURNServer_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCLookupTURNServer_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCLookupTURNServer_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WebRTCLookupTURNServer_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCLookupTURNServer_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCLookupTURNServer_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCLookupTURNServer_Request";
  }
  protected:
  explicit CBroadcast_WebRTCLookupTURNServer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellidFieldNumber = 1,
  };
  // optional uint32 cellid = 1;
  bool has_cellid() const;
  private:
  bool _internal_has_cellid() const;
  public:
  void clear_cellid();
  uint32_t cellid() const;
  void set_cellid(uint32_t value);
  private:
  uint32_t _internal_cellid() const;
  void _internal_set_cellid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCLookupTURNServer_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t cellid_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCLookupTURNServer_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCLookupTURNServer_Response) */ {
 public:
  inline CBroadcast_WebRTCLookupTURNServer_Response() : CBroadcast_WebRTCLookupTURNServer_Response(nullptr) {}
  ~CBroadcast_WebRTCLookupTURNServer_Response() override;
  explicit constexpr CBroadcast_WebRTCLookupTURNServer_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCLookupTURNServer_Response(const CBroadcast_WebRTCLookupTURNServer_Response& from);
  CBroadcast_WebRTCLookupTURNServer_Response(CBroadcast_WebRTCLookupTURNServer_Response&& from) noexcept
    : CBroadcast_WebRTCLookupTURNServer_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCLookupTURNServer_Response& operator=(const CBroadcast_WebRTCLookupTURNServer_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCLookupTURNServer_Response& operator=(CBroadcast_WebRTCLookupTURNServer_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCLookupTURNServer_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCLookupTURNServer_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCLookupTURNServer_Response*>(
               &_CBroadcast_WebRTCLookupTURNServer_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CBroadcast_WebRTCLookupTURNServer_Response& a, CBroadcast_WebRTCLookupTURNServer_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCLookupTURNServer_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCLookupTURNServer_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCLookupTURNServer_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCLookupTURNServer_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WebRTCLookupTURNServer_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCLookupTURNServer_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCLookupTURNServer_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCLookupTURNServer_Response";
  }
  protected:
  explicit CBroadcast_WebRTCLookupTURNServer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTurnServerFieldNumber = 1,
  };
  // optional string turn_server = 1;
  bool has_turn_server() const;
  private:
  bool _internal_has_turn_server() const;
  public:
  void clear_turn_server();
  const std::string& turn_server() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_turn_server(ArgT0&& arg0, ArgT... args);
  std::string* mutable_turn_server();
  PROTOBUF_NODISCARD std::string* release_turn_server();
  void set_allocated_turn_server(std::string* turn_server);
  private:
  const std::string& _internal_turn_server() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_turn_server(const std::string& value);
  std::string* _internal_mutable_turn_server();
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCLookupTURNServer_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr turn_server_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTC_Candidate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTC_Candidate) */ {
 public:
  inline CBroadcast_WebRTC_Candidate() : CBroadcast_WebRTC_Candidate(nullptr) {}
  ~CBroadcast_WebRTC_Candidate() override;
  explicit constexpr CBroadcast_WebRTC_Candidate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTC_Candidate(const CBroadcast_WebRTC_Candidate& from);
  CBroadcast_WebRTC_Candidate(CBroadcast_WebRTC_Candidate&& from) noexcept
    : CBroadcast_WebRTC_Candidate() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTC_Candidate& operator=(const CBroadcast_WebRTC_Candidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTC_Candidate& operator=(CBroadcast_WebRTC_Candidate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTC_Candidate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTC_Candidate* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTC_Candidate*>(
               &_CBroadcast_WebRTC_Candidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CBroadcast_WebRTC_Candidate& a, CBroadcast_WebRTC_Candidate& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTC_Candidate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTC_Candidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTC_Candidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTC_Candidate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WebRTC_Candidate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTC_Candidate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTC_Candidate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTC_Candidate";
  }
  protected:
  explicit CBroadcast_WebRTC_Candidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSdpMidFieldNumber = 1,
    kCandidateFieldNumber = 3,
    kSdpMlineIndexFieldNumber = 2,
  };
  // optional string sdp_mid = 1;
  bool has_sdp_mid() const;
  private:
  bool _internal_has_sdp_mid() const;
  public:
  void clear_sdp_mid();
  const std::string& sdp_mid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdp_mid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdp_mid();
  PROTOBUF_NODISCARD std::string* release_sdp_mid();
  void set_allocated_sdp_mid(std::string* sdp_mid);
  private:
  const std::string& _internal_sdp_mid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdp_mid(const std::string& value);
  std::string* _internal_mutable_sdp_mid();
  public:

  // optional string candidate = 3;
  bool has_candidate() const;
  private:
  bool _internal_has_candidate() const;
  public:
  void clear_candidate();
  const std::string& candidate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_candidate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_candidate();
  PROTOBUF_NODISCARD std::string* release_candidate();
  void set_allocated_candidate(std::string* candidate);
  private:
  const std::string& _internal_candidate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_candidate(const std::string& value);
  std::string* _internal_mutable_candidate();
  public:

  // optional int32 sdp_mline_index = 2;
  bool has_sdp_mline_index() const;
  private:
  bool _internal_has_sdp_mline_index() const;
  public:
  void clear_sdp_mline_index();
  int32_t sdp_mline_index() const;
  void set_sdp_mline_index(int32_t value);
  private:
  int32_t _internal_sdp_mline_index() const;
  void _internal_set_sdp_mline_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTC_Candidate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdp_mid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidate_;
  int32_t sdp_mline_index_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCAddHostCandidate_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCAddHostCandidate_Request) */ {
 public:
  inline CBroadcast_WebRTCAddHostCandidate_Request() : CBroadcast_WebRTCAddHostCandidate_Request(nullptr) {}
  ~CBroadcast_WebRTCAddHostCandidate_Request() override;
  explicit constexpr CBroadcast_WebRTCAddHostCandidate_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCAddHostCandidate_Request(const CBroadcast_WebRTCAddHostCandidate_Request& from);
  CBroadcast_WebRTCAddHostCandidate_Request(CBroadcast_WebRTCAddHostCandidate_Request&& from) noexcept
    : CBroadcast_WebRTCAddHostCandidate_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCAddHostCandidate_Request& operator=(const CBroadcast_WebRTCAddHostCandidate_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCAddHostCandidate_Request& operator=(CBroadcast_WebRTCAddHostCandidate_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCAddHostCandidate_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCAddHostCandidate_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCAddHostCandidate_Request*>(
               &_CBroadcast_WebRTCAddHostCandidate_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CBroadcast_WebRTCAddHostCandidate_Request& a, CBroadcast_WebRTCAddHostCandidate_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCAddHostCandidate_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCAddHostCandidate_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCAddHostCandidate_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCAddHostCandidate_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WebRTCAddHostCandidate_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCAddHostCandidate_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCAddHostCandidate_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCAddHostCandidate_Request";
  }
  protected:
  explicit CBroadcast_WebRTCAddHostCandidate_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateFieldNumber = 2,
    kWebrtcSessionIdFieldNumber = 1,
  };
  // optional .CBroadcast_WebRTC_Candidate candidate = 2;
  bool has_candidate() const;
  private:
  bool _internal_has_candidate() const;
  public:
  void clear_candidate();
  const ::CBroadcast_WebRTC_Candidate& candidate() const;
  PROTOBUF_NODISCARD ::CBroadcast_WebRTC_Candidate* release_candidate();
  ::CBroadcast_WebRTC_Candidate* mutable_candidate();
  void set_allocated_candidate(::CBroadcast_WebRTC_Candidate* candidate);
  private:
  const ::CBroadcast_WebRTC_Candidate& _internal_candidate() const;
  ::CBroadcast_WebRTC_Candidate* _internal_mutable_candidate();
  public:
  void unsafe_arena_set_allocated_candidate(
      ::CBroadcast_WebRTC_Candidate* candidate);
  ::CBroadcast_WebRTC_Candidate* unsafe_arena_release_candidate();

  // optional fixed64 webrtc_session_id = 1;
  bool has_webrtc_session_id() const;
  private:
  bool _internal_has_webrtc_session_id() const;
  public:
  void clear_webrtc_session_id();
  uint64_t webrtc_session_id() const;
  void set_webrtc_session_id(uint64_t value);
  private:
  uint64_t _internal_webrtc_session_id() const;
  void _internal_set_webrtc_session_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCAddHostCandidate_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CBroadcast_WebRTC_Candidate* candidate_;
  uint64_t webrtc_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCAddHostCandidate_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCAddHostCandidate_Response) */ {
 public:
  inline CBroadcast_WebRTCAddHostCandidate_Response() : CBroadcast_WebRTCAddHostCandidate_Response(nullptr) {}
  explicit constexpr CBroadcast_WebRTCAddHostCandidate_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCAddHostCandidate_Response(const CBroadcast_WebRTCAddHostCandidate_Response& from);
  CBroadcast_WebRTCAddHostCandidate_Response(CBroadcast_WebRTCAddHostCandidate_Response&& from) noexcept
    : CBroadcast_WebRTCAddHostCandidate_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCAddHostCandidate_Response& operator=(const CBroadcast_WebRTCAddHostCandidate_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCAddHostCandidate_Response& operator=(CBroadcast_WebRTCAddHostCandidate_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCAddHostCandidate_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCAddHostCandidate_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCAddHostCandidate_Response*>(
               &_CBroadcast_WebRTCAddHostCandidate_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CBroadcast_WebRTCAddHostCandidate_Response& a, CBroadcast_WebRTCAddHostCandidate_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCAddHostCandidate_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCAddHostCandidate_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCAddHostCandidate_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCAddHostCandidate_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CBroadcast_WebRTCAddHostCandidate_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCAddHostCandidate_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCAddHostCandidate_Response";
  }
  protected:
  explicit CBroadcast_WebRTCAddHostCandidate_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCAddHostCandidate_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCAddViewerCandidate_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCAddViewerCandidate_Request) */ {
 public:
  inline CBroadcast_WebRTCAddViewerCandidate_Request() : CBroadcast_WebRTCAddViewerCandidate_Request(nullptr) {}
  ~CBroadcast_WebRTCAddViewerCandidate_Request() override;
  explicit constexpr CBroadcast_WebRTCAddViewerCandidate_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCAddViewerCandidate_Request(const CBroadcast_WebRTCAddViewerCandidate_Request& from);
  CBroadcast_WebRTCAddViewerCandidate_Request(CBroadcast_WebRTCAddViewerCandidate_Request&& from) noexcept
    : CBroadcast_WebRTCAddViewerCandidate_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCAddViewerCandidate_Request& operator=(const CBroadcast_WebRTCAddViewerCandidate_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCAddViewerCandidate_Request& operator=(CBroadcast_WebRTCAddViewerCandidate_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCAddViewerCandidate_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCAddViewerCandidate_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCAddViewerCandidate_Request*>(
               &_CBroadcast_WebRTCAddViewerCandidate_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CBroadcast_WebRTCAddViewerCandidate_Request& a, CBroadcast_WebRTCAddViewerCandidate_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCAddViewerCandidate_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCAddViewerCandidate_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCAddViewerCandidate_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCAddViewerCandidate_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WebRTCAddViewerCandidate_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCAddViewerCandidate_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCAddViewerCandidate_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCAddViewerCandidate_Request";
  }
  protected:
  explicit CBroadcast_WebRTCAddViewerCandidate_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateFieldNumber = 3,
    kBroadcasterSteamidFieldNumber = 1,
    kWebrtcSessionIdFieldNumber = 2,
  };
  // optional .CBroadcast_WebRTC_Candidate candidate = 3;
  bool has_candidate() const;
  private:
  bool _internal_has_candidate() const;
  public:
  void clear_candidate();
  const ::CBroadcast_WebRTC_Candidate& candidate() const;
  PROTOBUF_NODISCARD ::CBroadcast_WebRTC_Candidate* release_candidate();
  ::CBroadcast_WebRTC_Candidate* mutable_candidate();
  void set_allocated_candidate(::CBroadcast_WebRTC_Candidate* candidate);
  private:
  const ::CBroadcast_WebRTC_Candidate& _internal_candidate() const;
  ::CBroadcast_WebRTC_Candidate* _internal_mutable_candidate();
  public:
  void unsafe_arena_set_allocated_candidate(
      ::CBroadcast_WebRTC_Candidate* candidate);
  ::CBroadcast_WebRTC_Candidate* unsafe_arena_release_candidate();

  // optional fixed64 broadcaster_steamid = 1;
  bool has_broadcaster_steamid() const;
  private:
  bool _internal_has_broadcaster_steamid() const;
  public:
  void clear_broadcaster_steamid();
  uint64_t broadcaster_steamid() const;
  void set_broadcaster_steamid(uint64_t value);
  private:
  uint64_t _internal_broadcaster_steamid() const;
  void _internal_set_broadcaster_steamid(uint64_t value);
  public:

  // optional fixed64 webrtc_session_id = 2;
  bool has_webrtc_session_id() const;
  private:
  bool _internal_has_webrtc_session_id() const;
  public:
  void clear_webrtc_session_id();
  uint64_t webrtc_session_id() const;
  void set_webrtc_session_id(uint64_t value);
  private:
  uint64_t _internal_webrtc_session_id() const;
  void _internal_set_webrtc_session_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCAddViewerCandidate_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CBroadcast_WebRTC_Candidate* candidate_;
  uint64_t broadcaster_steamid_;
  uint64_t webrtc_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCAddViewerCandidate_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCAddViewerCandidate_Response) */ {
 public:
  inline CBroadcast_WebRTCAddViewerCandidate_Response() : CBroadcast_WebRTCAddViewerCandidate_Response(nullptr) {}
  explicit constexpr CBroadcast_WebRTCAddViewerCandidate_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCAddViewerCandidate_Response(const CBroadcast_WebRTCAddViewerCandidate_Response& from);
  CBroadcast_WebRTCAddViewerCandidate_Response(CBroadcast_WebRTCAddViewerCandidate_Response&& from) noexcept
    : CBroadcast_WebRTCAddViewerCandidate_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCAddViewerCandidate_Response& operator=(const CBroadcast_WebRTCAddViewerCandidate_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCAddViewerCandidate_Response& operator=(CBroadcast_WebRTCAddViewerCandidate_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCAddViewerCandidate_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCAddViewerCandidate_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCAddViewerCandidate_Response*>(
               &_CBroadcast_WebRTCAddViewerCandidate_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CBroadcast_WebRTCAddViewerCandidate_Response& a, CBroadcast_WebRTCAddViewerCandidate_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCAddViewerCandidate_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCAddViewerCandidate_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCAddViewerCandidate_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCAddViewerCandidate_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CBroadcast_WebRTCAddViewerCandidate_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCAddViewerCandidate_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCAddViewerCandidate_Response";
  }
  protected:
  explicit CBroadcast_WebRTCAddViewerCandidate_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCAddViewerCandidate_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCGetHostCandidates_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCGetHostCandidates_Request) */ {
 public:
  inline CBroadcast_WebRTCGetHostCandidates_Request() : CBroadcast_WebRTCGetHostCandidates_Request(nullptr) {}
  ~CBroadcast_WebRTCGetHostCandidates_Request() override;
  explicit constexpr CBroadcast_WebRTCGetHostCandidates_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCGetHostCandidates_Request(const CBroadcast_WebRTCGetHostCandidates_Request& from);
  CBroadcast_WebRTCGetHostCandidates_Request(CBroadcast_WebRTCGetHostCandidates_Request&& from) noexcept
    : CBroadcast_WebRTCGetHostCandidates_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCGetHostCandidates_Request& operator=(const CBroadcast_WebRTCGetHostCandidates_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCGetHostCandidates_Request& operator=(CBroadcast_WebRTCGetHostCandidates_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCGetHostCandidates_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCGetHostCandidates_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCGetHostCandidates_Request*>(
               &_CBroadcast_WebRTCGetHostCandidates_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CBroadcast_WebRTCGetHostCandidates_Request& a, CBroadcast_WebRTCGetHostCandidates_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCGetHostCandidates_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCGetHostCandidates_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCGetHostCandidates_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCGetHostCandidates_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WebRTCGetHostCandidates_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCGetHostCandidates_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCGetHostCandidates_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCGetHostCandidates_Request";
  }
  protected:
  explicit CBroadcast_WebRTCGetHostCandidates_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcasterSteamidFieldNumber = 1,
    kWebrtcSessionIdFieldNumber = 2,
    kCandidateGenerationFieldNumber = 3,
  };
  // optional fixed64 broadcaster_steamid = 1;
  bool has_broadcaster_steamid() const;
  private:
  bool _internal_has_broadcaster_steamid() const;
  public:
  void clear_broadcaster_steamid();
  uint64_t broadcaster_steamid() const;
  void set_broadcaster_steamid(uint64_t value);
  private:
  uint64_t _internal_broadcaster_steamid() const;
  void _internal_set_broadcaster_steamid(uint64_t value);
  public:

  // optional fixed64 webrtc_session_id = 2;
  bool has_webrtc_session_id() const;
  private:
  bool _internal_has_webrtc_session_id() const;
  public:
  void clear_webrtc_session_id();
  uint64_t webrtc_session_id() const;
  void set_webrtc_session_id(uint64_t value);
  private:
  uint64_t _internal_webrtc_session_id() const;
  void _internal_set_webrtc_session_id(uint64_t value);
  public:

  // optional uint32 candidate_generation = 3;
  bool has_candidate_generation() const;
  private:
  bool _internal_has_candidate_generation() const;
  public:
  void clear_candidate_generation();
  uint32_t candidate_generation() const;
  void set_candidate_generation(uint32_t value);
  private:
  uint32_t _internal_candidate_generation() const;
  void _internal_set_candidate_generation(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCGetHostCandidates_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t broadcaster_steamid_;
  uint64_t webrtc_session_id_;
  uint32_t candidate_generation_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCGetHostCandidates_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCGetHostCandidates_Response) */ {
 public:
  inline CBroadcast_WebRTCGetHostCandidates_Response() : CBroadcast_WebRTCGetHostCandidates_Response(nullptr) {}
  ~CBroadcast_WebRTCGetHostCandidates_Response() override;
  explicit constexpr CBroadcast_WebRTCGetHostCandidates_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCGetHostCandidates_Response(const CBroadcast_WebRTCGetHostCandidates_Response& from);
  CBroadcast_WebRTCGetHostCandidates_Response(CBroadcast_WebRTCGetHostCandidates_Response&& from) noexcept
    : CBroadcast_WebRTCGetHostCandidates_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCGetHostCandidates_Response& operator=(const CBroadcast_WebRTCGetHostCandidates_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCGetHostCandidates_Response& operator=(CBroadcast_WebRTCGetHostCandidates_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCGetHostCandidates_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCGetHostCandidates_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCGetHostCandidates_Response*>(
               &_CBroadcast_WebRTCGetHostCandidates_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CBroadcast_WebRTCGetHostCandidates_Response& a, CBroadcast_WebRTCGetHostCandidates_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCGetHostCandidates_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCGetHostCandidates_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCGetHostCandidates_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCGetHostCandidates_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WebRTCGetHostCandidates_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCGetHostCandidates_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCGetHostCandidates_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCGetHostCandidates_Response";
  }
  protected:
  explicit CBroadcast_WebRTCGetHostCandidates_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidatesFieldNumber = 2,
    kCandidateGenerationFieldNumber = 1,
  };
  // repeated .CBroadcast_WebRTC_Candidate candidates = 2;
  int candidates_size() const;
  private:
  int _internal_candidates_size() const;
  public:
  void clear_candidates();
  ::CBroadcast_WebRTC_Candidate* mutable_candidates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_WebRTC_Candidate >*
      mutable_candidates();
  private:
  const ::CBroadcast_WebRTC_Candidate& _internal_candidates(int index) const;
  ::CBroadcast_WebRTC_Candidate* _internal_add_candidates();
  public:
  const ::CBroadcast_WebRTC_Candidate& candidates(int index) const;
  ::CBroadcast_WebRTC_Candidate* add_candidates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_WebRTC_Candidate >&
      candidates() const;

  // optional uint32 candidate_generation = 1;
  bool has_candidate_generation() const;
  private:
  bool _internal_has_candidate_generation() const;
  public:
  void clear_candidate_generation();
  uint32_t candidate_generation() const;
  void set_candidate_generation(uint32_t value);
  private:
  uint32_t _internal_candidate_generation() const;
  void _internal_set_candidate_generation(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCGetHostCandidates_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_WebRTC_Candidate > candidates_;
  uint32_t candidate_generation_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastUploadStats_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastUploadStats_Request) */ {
 public:
  inline CBroadcast_GetBroadcastUploadStats_Request() : CBroadcast_GetBroadcastUploadStats_Request(nullptr) {}
  ~CBroadcast_GetBroadcastUploadStats_Request() override;
  explicit constexpr CBroadcast_GetBroadcastUploadStats_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastUploadStats_Request(const CBroadcast_GetBroadcastUploadStats_Request& from);
  CBroadcast_GetBroadcastUploadStats_Request(CBroadcast_GetBroadcastUploadStats_Request&& from) noexcept
    : CBroadcast_GetBroadcastUploadStats_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastUploadStats_Request& operator=(const CBroadcast_GetBroadcastUploadStats_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastUploadStats_Request& operator=(CBroadcast_GetBroadcastUploadStats_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastUploadStats_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastUploadStats_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastUploadStats_Request*>(
               &_CBroadcast_GetBroadcastUploadStats_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CBroadcast_GetBroadcastUploadStats_Request& a, CBroadcast_GetBroadcastUploadStats_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastUploadStats_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastUploadStats_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastUploadStats_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastUploadStats_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastUploadStats_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastUploadStats_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastUploadStats_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastUploadStats_Request";
  }
  protected:
  explicit CBroadcast_GetBroadcastUploadStats_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUploadIdFieldNumber = 3,
    kSteamidFieldNumber = 4,
    kSessionIdFieldNumber = 5,
    kStartTimeFieldNumber = 2,
    kRowLimitFieldNumber = 1,
  };
  // optional uint64 upload_id = 3 [(.description) = "Optional relay upload ID - not compatible with session_id"];
  bool has_upload_id() const;
  private:
  bool _internal_has_upload_id() const;
  public:
  void clear_upload_id();
  uint64_t upload_id() const;
  void set_upload_id(uint64_t value);
  private:
  uint64_t _internal_upload_id() const;
  void _internal_set_upload_id(uint64_t value);
  public:

  // optional fixed64 steamid = 4 [(.description) = "Optional the steamid whose stats you want, otherwise the user logged in - admin only"];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint64 session_id = 5 [(.description) = "Optional broadcast session ID - not compatiable with upload_id"];
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // optional uint32 start_time = 2 [default = 0, (.description) = "Start time"];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  uint32_t start_time() const;
  void set_start_time(uint32_t value);
  private:
  uint32_t _internal_start_time() const;
  void _internal_set_start_time(uint32_t value);
  public:

  // optional uint32 row_limit = 1 [default = 100, (.description) = "How many at maximum to return."];
  bool has_row_limit() const;
  private:
  bool _internal_has_row_limit() const;
  public:
  void clear_row_limit();
  uint32_t row_limit() const;
  void set_row_limit(uint32_t value);
  private:
  uint32_t _internal_row_limit() const;
  void _internal_set_row_limit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastUploadStats_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t upload_id_;
  uint64_t steamid_;
  uint64_t session_id_;
  uint32_t start_time_;
  uint32_t row_limit_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastUploadStats_Response_UploadStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastUploadStats_Response.UploadStats) */ {
 public:
  inline CBroadcast_GetBroadcastUploadStats_Response_UploadStats() : CBroadcast_GetBroadcastUploadStats_Response_UploadStats(nullptr) {}
  ~CBroadcast_GetBroadcastUploadStats_Response_UploadStats() override;
  explicit constexpr CBroadcast_GetBroadcastUploadStats_Response_UploadStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastUploadStats_Response_UploadStats(const CBroadcast_GetBroadcastUploadStats_Response_UploadStats& from);
  CBroadcast_GetBroadcastUploadStats_Response_UploadStats(CBroadcast_GetBroadcastUploadStats_Response_UploadStats&& from) noexcept
    : CBroadcast_GetBroadcastUploadStats_Response_UploadStats() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastUploadStats_Response_UploadStats& operator=(const CBroadcast_GetBroadcastUploadStats_Response_UploadStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastUploadStats_Response_UploadStats& operator=(CBroadcast_GetBroadcastUploadStats_Response_UploadStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastUploadStats_Response_UploadStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastUploadStats_Response_UploadStats* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastUploadStats_Response_UploadStats*>(
               &_CBroadcast_GetBroadcastUploadStats_Response_UploadStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CBroadcast_GetBroadcastUploadStats_Response_UploadStats& a, CBroadcast_GetBroadcastUploadStats_Response_UploadStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastUploadStats_Response_UploadStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastUploadStats_Response_UploadStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastUploadStats_Response_UploadStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastUploadStats_Response_UploadStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastUploadStats_Response_UploadStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastUploadStats_Response_UploadStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastUploadStats_Response_UploadStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastUploadStats_Response.UploadStats";
  }
  protected:
  explicit CBroadcast_GetBroadcastUploadStats_Response_UploadStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalAddressFieldNumber = 14,
    kRemoteAddressFieldNumber = 15,
    kAppNameFieldNumber = 18,
    kUploadResultFieldNumber = 1,
    kTimeStoppedFieldNumber = 2,
    kSecondsUploadedFieldNumber = 3,
    kMaxViewersFieldNumber = 4,
    kResolutionXFieldNumber = 5,
    kResolutionYFieldNumber = 6,
    kTotalBytesFieldNumber = 8,
    kAvgBandwidthFieldNumber = 7,
    kAppIdFieldNumber = 9,
    kTotalSecondsWatchedFieldNumber = 11,
    kTotalUniqueViewersFieldNumber = 10,
    kTimeStartedFieldNumber = 12,
    kUploadIdFieldNumber = 13,
    kFramesPerSecondFieldNumber = 16,
    kNumRepresentationsFieldNumber = 17,
    kSessionIdFieldNumber = 20,
    kIsReplayFieldNumber = 19,
  };
  // optional string local_address = 14 [(.description) = "upload to server address"];
  bool has_local_address() const;
  private:
  bool _internal_has_local_address() const;
  public:
  void clear_local_address();
  const std::string& local_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_address();
  PROTOBUF_NODISCARD std::string* release_local_address();
  void set_allocated_local_address(std::string* local_address);
  private:
  const std::string& _internal_local_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_address(const std::string& value);
  std::string* _internal_mutable_local_address();
  public:

  // optional string remote_address = 15 [(.description) = "upload from client address"];
  bool has_remote_address() const;
  private:
  bool _internal_has_remote_address() const;
  public:
  void clear_remote_address();
  const std::string& remote_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_address();
  PROTOBUF_NODISCARD std::string* release_remote_address();
  void set_allocated_remote_address(std::string* remote_address);
  private:
  const std::string& _internal_remote_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_address(const std::string& value);
  std::string* _internal_mutable_remote_address();
  public:

  // optional string app_name = 18 [(.description) = "game name"];
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional uint32 upload_result = 1 [(.description) = ""];
  bool has_upload_result() const;
  private:
  bool _internal_has_upload_result() const;
  public:
  void clear_upload_result();
  uint32_t upload_result() const;
  void set_upload_result(uint32_t value);
  private:
  uint32_t _internal_upload_result() const;
  void _internal_set_upload_result(uint32_t value);
  public:

  // optional uint32 time_stopped = 2 [(.description) = "time broadcast upload stopped"];
  bool has_time_stopped() const;
  private:
  bool _internal_has_time_stopped() const;
  public:
  void clear_time_stopped();
  uint32_t time_stopped() const;
  void set_time_stopped(uint32_t value);
  private:
  uint32_t _internal_time_stopped() const;
  void _internal_set_time_stopped(uint32_t value);
  public:

  // optional uint32 seconds_uploaded = 3 [(.description) = "seconds of vido uploaded"];
  bool has_seconds_uploaded() const;
  private:
  bool _internal_has_seconds_uploaded() const;
  public:
  void clear_seconds_uploaded();
  uint32_t seconds_uploaded() const;
  void set_seconds_uploaded(uint32_t value);
  private:
  uint32_t _internal_seconds_uploaded() const;
  void _internal_set_seconds_uploaded(uint32_t value);
  public:

  // optional uint32 max_viewers = 4 [(.description) = "max concurrent viewers"];
  bool has_max_viewers() const;
  private:
  bool _internal_has_max_viewers() const;
  public:
  void clear_max_viewers();
  uint32_t max_viewers() const;
  void set_max_viewers(uint32_t value);
  private:
  uint32_t _internal_max_viewers() const;
  void _internal_set_max_viewers(uint32_t value);
  public:

  // optional uint32 resolution_x = 5 [(.description) = "horizontal resultion"];
  bool has_resolution_x() const;
  private:
  bool _internal_has_resolution_x() const;
  public:
  void clear_resolution_x();
  uint32_t resolution_x() const;
  void set_resolution_x(uint32_t value);
  private:
  uint32_t _internal_resolution_x() const;
  void _internal_set_resolution_x(uint32_t value);
  public:

  // optional uint32 resolution_y = 6 [(.description) = "vertical resultion"];
  bool has_resolution_y() const;
  private:
  bool _internal_has_resolution_y() const;
  public:
  void clear_resolution_y();
  uint32_t resolution_y() const;
  void set_resolution_y(uint32_t value);
  private:
  uint32_t _internal_resolution_y() const;
  void _internal_set_resolution_y(uint32_t value);
  public:

  // optional uint64 total_bytes = 8 [(.description) = "total byte uploaded by broadcaster"];
  bool has_total_bytes() const;
  private:
  bool _internal_has_total_bytes() const;
  public:
  void clear_total_bytes();
  uint64_t total_bytes() const;
  void set_total_bytes(uint64_t value);
  private:
  uint64_t _internal_total_bytes() const;
  void _internal_set_total_bytes(uint64_t value);
  public:

  // optional uint32 avg_bandwidth = 7 [(.description) = ""];
  bool has_avg_bandwidth() const;
  private:
  bool _internal_has_avg_bandwidth() const;
  public:
  void clear_avg_bandwidth();
  uint32_t avg_bandwidth() const;
  void set_avg_bandwidth(uint32_t value);
  private:
  uint32_t _internal_avg_bandwidth() const;
  void _internal_set_avg_bandwidth(uint32_t value);
  public:

  // optional uint32 app_id = 9 [(.description) = "game broadcasted"];
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint64 total_seconds_watched = 11 [(.description) = "total number of seconds watched by all viewers"];
  bool has_total_seconds_watched() const;
  private:
  bool _internal_has_total_seconds_watched() const;
  public:
  void clear_total_seconds_watched();
  uint64_t total_seconds_watched() const;
  void set_total_seconds_watched(uint64_t value);
  private:
  uint64_t _internal_total_seconds_watched() const;
  void _internal_set_total_seconds_watched(uint64_t value);
  public:

  // optional uint32 total_unique_viewers = 10 [(.description) = "total unique viewers seen"];
  bool has_total_unique_viewers() const;
  private:
  bool _internal_has_total_unique_viewers() const;
  public:
  void clear_total_unique_viewers();
  uint32_t total_unique_viewers() const;
  void set_total_unique_viewers(uint32_t value);
  private:
  uint32_t _internal_total_unique_viewers() const;
  void _internal_set_total_unique_viewers(uint32_t value);
  public:

  // optional uint32 time_started = 12 [(.description) = "time broadcast upload started"];
  bool has_time_started() const;
  private:
  bool _internal_has_time_started() const;
  public:
  void clear_time_started();
  uint32_t time_started() const;
  void set_time_started(uint32_t value);
  private:
  uint32_t _internal_time_started() const;
  void _internal_set_time_started(uint32_t value);
  public:

  // optional uint64 upload_id = 13 [(.description) = "broadcast relay upload id"];
  bool has_upload_id() const;
  private:
  bool _internal_has_upload_id() const;
  public:
  void clear_upload_id();
  uint64_t upload_id() const;
  void set_upload_id(uint64_t value);
  private:
  uint64_t _internal_upload_id() const;
  void _internal_set_upload_id(uint64_t value);
  public:

  // optional uint32 frames_per_second = 16 [(.description) = "frames per second"];
  bool has_frames_per_second() const;
  private:
  bool _internal_has_frames_per_second() const;
  public:
  void clear_frames_per_second();
  uint32_t frames_per_second() const;
  void set_frames_per_second(uint32_t value);
  private:
  uint32_t _internal_frames_per_second() const;
  void _internal_set_frames_per_second(uint32_t value);
  public:

  // optional uint32 num_representations = 17 [(.description) = "number of video represetations"];
  bool has_num_representations() const;
  private:
  bool _internal_has_num_representations() const;
  public:
  void clear_num_representations();
  uint32_t num_representations() const;
  void set_num_representations(uint32_t value);
  private:
  uint32_t _internal_num_representations() const;
  void _internal_set_num_representations(uint32_t value);
  public:

  // optional uint64 session_id = 20 [(.description) = "broadcast session id"];
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // optional bool is_replay = 19 [(.description) = "replay of previous recording"];
  bool has_is_replay() const;
  private:
  bool _internal_has_is_replay() const;
  public:
  void clear_is_replay();
  bool is_replay() const;
  void set_is_replay(bool value);
  private:
  bool _internal_is_replay() const;
  void _internal_set_is_replay(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastUploadStats_Response.UploadStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
  uint32_t upload_result_;
  uint32_t time_stopped_;
  uint32_t seconds_uploaded_;
  uint32_t max_viewers_;
  uint32_t resolution_x_;
  uint32_t resolution_y_;
  uint64_t total_bytes_;
  uint32_t avg_bandwidth_;
  uint32_t app_id_;
  uint64_t total_seconds_watched_;
  uint32_t total_unique_viewers_;
  uint32_t time_started_;
  uint64_t upload_id_;
  uint32_t frames_per_second_;
  uint32_t num_representations_;
  uint64_t session_id_;
  bool is_replay_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastUploadStats_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastUploadStats_Response) */ {
 public:
  inline CBroadcast_GetBroadcastUploadStats_Response() : CBroadcast_GetBroadcastUploadStats_Response(nullptr) {}
  ~CBroadcast_GetBroadcastUploadStats_Response() override;
  explicit constexpr CBroadcast_GetBroadcastUploadStats_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastUploadStats_Response(const CBroadcast_GetBroadcastUploadStats_Response& from);
  CBroadcast_GetBroadcastUploadStats_Response(CBroadcast_GetBroadcastUploadStats_Response&& from) noexcept
    : CBroadcast_GetBroadcastUploadStats_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastUploadStats_Response& operator=(const CBroadcast_GetBroadcastUploadStats_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastUploadStats_Response& operator=(CBroadcast_GetBroadcastUploadStats_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastUploadStats_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastUploadStats_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastUploadStats_Response*>(
               &_CBroadcast_GetBroadcastUploadStats_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CBroadcast_GetBroadcastUploadStats_Response& a, CBroadcast_GetBroadcastUploadStats_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastUploadStats_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastUploadStats_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastUploadStats_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastUploadStats_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastUploadStats_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastUploadStats_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastUploadStats_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastUploadStats_Response";
  }
  protected:
  explicit CBroadcast_GetBroadcastUploadStats_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CBroadcast_GetBroadcastUploadStats_Response_UploadStats UploadStats;

  // accessors -------------------------------------------------------

  enum : int {
    kUploadStatsFieldNumber = 1,
  };
  // repeated .CBroadcast_GetBroadcastUploadStats_Response.UploadStats upload_stats = 1;
  int upload_stats_size() const;
  private:
  int _internal_upload_stats_size() const;
  public:
  void clear_upload_stats();
  ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats* mutable_upload_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats >*
      mutable_upload_stats();
  private:
  const ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats& _internal_upload_stats(int index) const;
  ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats* _internal_add_upload_stats();
  public:
  const ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats& upload_stats(int index) const;
  ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats* add_upload_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats >&
      upload_stats() const;

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastUploadStats_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats > upload_stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastViewerStats_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastViewerStats_Request) */ {
 public:
  inline CBroadcast_GetBroadcastViewerStats_Request() : CBroadcast_GetBroadcastViewerStats_Request(nullptr) {}
  ~CBroadcast_GetBroadcastViewerStats_Request() override;
  explicit constexpr CBroadcast_GetBroadcastViewerStats_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastViewerStats_Request(const CBroadcast_GetBroadcastViewerStats_Request& from);
  CBroadcast_GetBroadcastViewerStats_Request(CBroadcast_GetBroadcastViewerStats_Request&& from) noexcept
    : CBroadcast_GetBroadcastViewerStats_Request() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastViewerStats_Request& operator=(const CBroadcast_GetBroadcastViewerStats_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastViewerStats_Request& operator=(CBroadcast_GetBroadcastViewerStats_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastViewerStats_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastViewerStats_Request* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastViewerStats_Request*>(
               &_CBroadcast_GetBroadcastViewerStats_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CBroadcast_GetBroadcastViewerStats_Request& a, CBroadcast_GetBroadcastViewerStats_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastViewerStats_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastViewerStats_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastViewerStats_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastViewerStats_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastViewerStats_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastViewerStats_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastViewerStats_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastViewerStats_Request";
  }
  protected:
  explicit CBroadcast_GetBroadcastViewerStats_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUploadIdFieldNumber = 1,
    kSteamidFieldNumber = 2,
  };
  // optional uint64 upload_id = 1 [(.description) = "Get stats for this stream"];
  bool has_upload_id() const;
  private:
  bool _internal_has_upload_id() const;
  public:
  void clear_upload_id();
  uint64_t upload_id() const;
  void set_upload_id(uint64_t value);
  private:
  uint64_t _internal_upload_id() const;
  void _internal_set_upload_id(uint64_t value);
  public:

  // optional fixed64 steamid = 2 [(.description) = "Optional: The steamid of the broadcast whose details you are requesting."];
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastViewerStats_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t upload_id_;
  uint64_t steamid_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastViewerStats_Response_ViewerStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastViewerStats_Response.ViewerStats) */ {
 public:
  inline CBroadcast_GetBroadcastViewerStats_Response_ViewerStats() : CBroadcast_GetBroadcastViewerStats_Response_ViewerStats(nullptr) {}
  ~CBroadcast_GetBroadcastViewerStats_Response_ViewerStats() override;
  explicit constexpr CBroadcast_GetBroadcastViewerStats_Response_ViewerStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastViewerStats_Response_ViewerStats(const CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& from);
  CBroadcast_GetBroadcastViewerStats_Response_ViewerStats(CBroadcast_GetBroadcastViewerStats_Response_ViewerStats&& from) noexcept
    : CBroadcast_GetBroadcastViewerStats_Response_ViewerStats() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& operator=(const CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& operator=(CBroadcast_GetBroadcastViewerStats_Response_ViewerStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastViewerStats_Response_ViewerStats*>(
               &_CBroadcast_GetBroadcastViewerStats_Response_ViewerStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& a, CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastViewerStats_Response_ViewerStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastViewerStats_Response.ViewerStats";
  }
  protected:
  explicit CBroadcast_GetBroadcastViewerStats_Response_ViewerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kNumViewersFieldNumber = 2,
  };
  // optional uint32 time = 1 [(.description) = "time of record"];
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // optional uint32 num_viewers = 2 [(.description) = "current number of viewers"];
  bool has_num_viewers() const;
  private:
  bool _internal_has_num_viewers() const;
  public:
  void clear_num_viewers();
  uint32_t num_viewers() const;
  void set_num_viewers(uint32_t value);
  private:
  uint32_t _internal_num_viewers() const;
  void _internal_set_num_viewers(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastViewerStats_Response.ViewerStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t time_;
  uint32_t num_viewers_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastViewerStats_Response_CountryStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastViewerStats_Response.CountryStats) */ {
 public:
  inline CBroadcast_GetBroadcastViewerStats_Response_CountryStats() : CBroadcast_GetBroadcastViewerStats_Response_CountryStats(nullptr) {}
  ~CBroadcast_GetBroadcastViewerStats_Response_CountryStats() override;
  explicit constexpr CBroadcast_GetBroadcastViewerStats_Response_CountryStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastViewerStats_Response_CountryStats(const CBroadcast_GetBroadcastViewerStats_Response_CountryStats& from);
  CBroadcast_GetBroadcastViewerStats_Response_CountryStats(CBroadcast_GetBroadcastViewerStats_Response_CountryStats&& from) noexcept
    : CBroadcast_GetBroadcastViewerStats_Response_CountryStats() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastViewerStats_Response_CountryStats& operator=(const CBroadcast_GetBroadcastViewerStats_Response_CountryStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastViewerStats_Response_CountryStats& operator=(CBroadcast_GetBroadcastViewerStats_Response_CountryStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastViewerStats_Response_CountryStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastViewerStats_Response_CountryStats* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastViewerStats_Response_CountryStats*>(
               &_CBroadcast_GetBroadcastViewerStats_Response_CountryStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CBroadcast_GetBroadcastViewerStats_Response_CountryStats& a, CBroadcast_GetBroadcastViewerStats_Response_CountryStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastViewerStats_Response_CountryStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastViewerStats_Response_CountryStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastViewerStats_Response_CountryStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastViewerStats_Response_CountryStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastViewerStats_Response_CountryStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastViewerStats_Response_CountryStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastViewerStats_Response_CountryStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastViewerStats_Response.CountryStats";
  }
  protected:
  explicit CBroadcast_GetBroadcastViewerStats_Response_CountryStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 1,
    kNumViewersFieldNumber = 2,
  };
  // optional string country_code = 1 [(.description) = "country code"];
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional uint32 num_viewers = 2 [(.description) = "number of viewers"];
  bool has_num_viewers() const;
  private:
  bool _internal_has_num_viewers() const;
  public:
  void clear_num_viewers();
  uint32_t num_viewers() const;
  void set_num_viewers(uint32_t value);
  private:
  uint32_t _internal_num_viewers() const;
  void _internal_set_num_viewers(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastViewerStats_Response.CountryStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  uint32_t num_viewers_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_GetBroadcastViewerStats_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_GetBroadcastViewerStats_Response) */ {
 public:
  inline CBroadcast_GetBroadcastViewerStats_Response() : CBroadcast_GetBroadcastViewerStats_Response(nullptr) {}
  ~CBroadcast_GetBroadcastViewerStats_Response() override;
  explicit constexpr CBroadcast_GetBroadcastViewerStats_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_GetBroadcastViewerStats_Response(const CBroadcast_GetBroadcastViewerStats_Response& from);
  CBroadcast_GetBroadcastViewerStats_Response(CBroadcast_GetBroadcastViewerStats_Response&& from) noexcept
    : CBroadcast_GetBroadcastViewerStats_Response() {
    *this = ::std::move(from);
  }

  inline CBroadcast_GetBroadcastViewerStats_Response& operator=(const CBroadcast_GetBroadcastViewerStats_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_GetBroadcastViewerStats_Response& operator=(CBroadcast_GetBroadcastViewerStats_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_GetBroadcastViewerStats_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_GetBroadcastViewerStats_Response* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_GetBroadcastViewerStats_Response*>(
               &_CBroadcast_GetBroadcastViewerStats_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CBroadcast_GetBroadcastViewerStats_Response& a, CBroadcast_GetBroadcastViewerStats_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_GetBroadcastViewerStats_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_GetBroadcastViewerStats_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_GetBroadcastViewerStats_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_GetBroadcastViewerStats_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_GetBroadcastViewerStats_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_GetBroadcastViewerStats_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_GetBroadcastViewerStats_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_GetBroadcastViewerStats_Response";
  }
  protected:
  explicit CBroadcast_GetBroadcastViewerStats_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CBroadcast_GetBroadcastViewerStats_Response_ViewerStats ViewerStats;
  typedef CBroadcast_GetBroadcastViewerStats_Response_CountryStats CountryStats;

  // accessors -------------------------------------------------------

  enum : int {
    kViewerStatsFieldNumber = 1,
    kCountryStatsFieldNumber = 2,
  };
  // repeated .CBroadcast_GetBroadcastViewerStats_Response.ViewerStats viewer_stats = 1;
  int viewer_stats_size() const;
  private:
  int _internal_viewer_stats_size() const;
  public:
  void clear_viewer_stats();
  ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* mutable_viewer_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats >*
      mutable_viewer_stats();
  private:
  const ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& _internal_viewer_stats(int index) const;
  ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* _internal_add_viewer_stats();
  public:
  const ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& viewer_stats(int index) const;
  ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* add_viewer_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats >&
      viewer_stats() const;

  // repeated .CBroadcast_GetBroadcastViewerStats_Response.CountryStats country_stats = 2;
  int country_stats_size() const;
  private:
  int _internal_country_stats_size() const;
  public:
  void clear_country_stats();
  ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats* mutable_country_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats >*
      mutable_country_stats();
  private:
  const ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats& _internal_country_stats(int index) const;
  ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats* _internal_add_country_stats();
  public:
  const ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats& country_stats(int index) const;
  ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats* add_country_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats >&
      country_stats() const;

  // @@protoc_insertion_point(class_scope:CBroadcast_GetBroadcastViewerStats_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats > viewer_stats_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats > country_stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_BroadcastViewerState_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_BroadcastViewerState_Notification) */ {
 public:
  inline CBroadcast_BroadcastViewerState_Notification() : CBroadcast_BroadcastViewerState_Notification(nullptr) {}
  ~CBroadcast_BroadcastViewerState_Notification() override;
  explicit constexpr CBroadcast_BroadcastViewerState_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_BroadcastViewerState_Notification(const CBroadcast_BroadcastViewerState_Notification& from);
  CBroadcast_BroadcastViewerState_Notification(CBroadcast_BroadcastViewerState_Notification&& from) noexcept
    : CBroadcast_BroadcastViewerState_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_BroadcastViewerState_Notification& operator=(const CBroadcast_BroadcastViewerState_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_BroadcastViewerState_Notification& operator=(CBroadcast_BroadcastViewerState_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_BroadcastViewerState_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_BroadcastViewerState_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_BroadcastViewerState_Notification*>(
               &_CBroadcast_BroadcastViewerState_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CBroadcast_BroadcastViewerState_Notification& a, CBroadcast_BroadcastViewerState_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_BroadcastViewerState_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_BroadcastViewerState_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_BroadcastViewerState_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_BroadcastViewerState_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_BroadcastViewerState_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_BroadcastViewerState_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_BroadcastViewerState_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_BroadcastViewerState_Notification";
  }
  protected:
  explicit CBroadcast_BroadcastViewerState_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CBroadcast_BroadcastViewerState_Notification_EViewerState EViewerState;
  static constexpr EViewerState k_EViewerNeedsApproval =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerNeedsApproval;
  static constexpr EViewerState k_EViewerWatching =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerWatching;
  static constexpr EViewerState k_EViewerLeft =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_k_EViewerLeft;
  static inline bool EViewerState_IsValid(int value) {
    return CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(value);
  }
  static constexpr EViewerState EViewerState_MIN =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_MIN;
  static constexpr EViewerState EViewerState_MAX =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_MAX;
  static constexpr int EViewerState_ARRAYSIZE =
    CBroadcast_BroadcastViewerState_Notification_EViewerState_EViewerState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EViewerState_descriptor() {
    return CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor();
  }
  template<typename T>
  static inline const std::string& EViewerState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EViewerState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EViewerState_Name.");
    return CBroadcast_BroadcastViewerState_Notification_EViewerState_Name(enum_t_value);
  }
  static inline bool EViewerState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EViewerState* value) {
    return CBroadcast_BroadcastViewerState_Notification_EViewerState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional .CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::CBroadcast_BroadcastViewerState_Notification_EViewerState state() const;
  void set_state(::CBroadcast_BroadcastViewerState_Notification_EViewerState value);
  private:
  ::CBroadcast_BroadcastViewerState_Notification_EViewerState _internal_state() const;
  void _internal_set_state(::CBroadcast_BroadcastViewerState_Notification_EViewerState value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_BroadcastViewerState_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  int state_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WaitingBroadcastViewer_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WaitingBroadcastViewer_Notification) */ {
 public:
  inline CBroadcast_WaitingBroadcastViewer_Notification() : CBroadcast_WaitingBroadcastViewer_Notification(nullptr) {}
  ~CBroadcast_WaitingBroadcastViewer_Notification() override;
  explicit constexpr CBroadcast_WaitingBroadcastViewer_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WaitingBroadcastViewer_Notification(const CBroadcast_WaitingBroadcastViewer_Notification& from);
  CBroadcast_WaitingBroadcastViewer_Notification(CBroadcast_WaitingBroadcastViewer_Notification&& from) noexcept
    : CBroadcast_WaitingBroadcastViewer_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WaitingBroadcastViewer_Notification& operator=(const CBroadcast_WaitingBroadcastViewer_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WaitingBroadcastViewer_Notification& operator=(CBroadcast_WaitingBroadcastViewer_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WaitingBroadcastViewer_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WaitingBroadcastViewer_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WaitingBroadcastViewer_Notification*>(
               &_CBroadcast_WaitingBroadcastViewer_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CBroadcast_WaitingBroadcastViewer_Notification& a, CBroadcast_WaitingBroadcastViewer_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WaitingBroadcastViewer_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WaitingBroadcastViewer_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WaitingBroadcastViewer_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WaitingBroadcastViewer_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WaitingBroadcastViewer_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WaitingBroadcastViewer_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WaitingBroadcastViewer_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WaitingBroadcastViewer_Notification";
  }
  protected:
  explicit CBroadcast_WaitingBroadcastViewer_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastIdFieldNumber = 1,
  };
  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WaitingBroadcastViewer_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t broadcast_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_BroadcastUploadStarted_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_BroadcastUploadStarted_Notification) */ {
 public:
  inline CBroadcast_BroadcastUploadStarted_Notification() : CBroadcast_BroadcastUploadStarted_Notification(nullptr) {}
  ~CBroadcast_BroadcastUploadStarted_Notification() override;
  explicit constexpr CBroadcast_BroadcastUploadStarted_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_BroadcastUploadStarted_Notification(const CBroadcast_BroadcastUploadStarted_Notification& from);
  CBroadcast_BroadcastUploadStarted_Notification(CBroadcast_BroadcastUploadStarted_Notification&& from) noexcept
    : CBroadcast_BroadcastUploadStarted_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_BroadcastUploadStarted_Notification& operator=(const CBroadcast_BroadcastUploadStarted_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_BroadcastUploadStarted_Notification& operator=(CBroadcast_BroadcastUploadStarted_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_BroadcastUploadStarted_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_BroadcastUploadStarted_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_BroadcastUploadStarted_Notification*>(
               &_CBroadcast_BroadcastUploadStarted_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CBroadcast_BroadcastUploadStarted_Notification& a, CBroadcast_BroadcastUploadStarted_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_BroadcastUploadStarted_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_BroadcastUploadStarted_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_BroadcastUploadStarted_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_BroadcastUploadStarted_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_BroadcastUploadStarted_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_BroadcastUploadStarted_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_BroadcastUploadStarted_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_BroadcastUploadStarted_Notification";
  }
  protected:
  explicit CBroadcast_BroadcastUploadStarted_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUploadTokenFieldNumber = 2,
    kUploadAddressFieldNumber = 3,
    kHttpAddressFieldNumber = 4,
    kBroadcastIdFieldNumber = 1,
    kBroadcastUploadIdFieldNumber = 5,
    kHeartbeatIntervalSecondsFieldNumber = 6,
    kIsRtmpFieldNumber = 7,
  };
  // optional string upload_token = 2;
  bool has_upload_token() const;
  private:
  bool _internal_has_upload_token() const;
  public:
  void clear_upload_token();
  const std::string& upload_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_upload_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_upload_token();
  PROTOBUF_NODISCARD std::string* release_upload_token();
  void set_allocated_upload_token(std::string* upload_token);
  private:
  const std::string& _internal_upload_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upload_token(const std::string& value);
  std::string* _internal_mutable_upload_token();
  public:

  // optional string upload_address = 3;
  bool has_upload_address() const;
  private:
  bool _internal_has_upload_address() const;
  public:
  void clear_upload_address();
  const std::string& upload_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_upload_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_upload_address();
  PROTOBUF_NODISCARD std::string* release_upload_address();
  void set_allocated_upload_address(std::string* upload_address);
  private:
  const std::string& _internal_upload_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upload_address(const std::string& value);
  std::string* _internal_mutable_upload_address();
  public:

  // optional string http_address = 4;
  bool has_http_address() const;
  private:
  bool _internal_has_http_address() const;
  public:
  void clear_http_address();
  const std::string& http_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_http_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_http_address();
  PROTOBUF_NODISCARD std::string* release_http_address();
  void set_allocated_http_address(std::string* http_address);
  private:
  const std::string& _internal_http_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_http_address(const std::string& value);
  std::string* _internal_mutable_http_address();
  public:

  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // optional fixed64 broadcast_upload_id = 5;
  bool has_broadcast_upload_id() const;
  private:
  bool _internal_has_broadcast_upload_id() const;
  public:
  void clear_broadcast_upload_id();
  uint64_t broadcast_upload_id() const;
  void set_broadcast_upload_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_upload_id() const;
  void _internal_set_broadcast_upload_id(uint64_t value);
  public:

  // optional uint32 heartbeat_interval_seconds = 6 [(.description) = "how many seconds between session heartbeats"];
  bool has_heartbeat_interval_seconds() const;
  private:
  bool _internal_has_heartbeat_interval_seconds() const;
  public:
  void clear_heartbeat_interval_seconds();
  uint32_t heartbeat_interval_seconds() const;
  void set_heartbeat_interval_seconds(uint32_t value);
  private:
  uint32_t _internal_heartbeat_interval_seconds() const;
  void _internal_set_heartbeat_interval_seconds(uint32_t value);
  public:

  // optional bool is_rtmp = 7;
  bool has_is_rtmp() const;
  private:
  bool _internal_has_is_rtmp() const;
  public:
  void clear_is_rtmp();
  bool is_rtmp() const;
  void set_is_rtmp(bool value);
  private:
  bool _internal_is_rtmp() const;
  void _internal_set_is_rtmp(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_BroadcastUploadStarted_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upload_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upload_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr http_address_;
  uint64_t broadcast_id_;
  uint64_t broadcast_upload_id_;
  uint32_t heartbeat_interval_seconds_;
  bool is_rtmp_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_StopBroadcastUpload_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_StopBroadcastUpload_Notification) */ {
 public:
  inline CBroadcast_StopBroadcastUpload_Notification() : CBroadcast_StopBroadcastUpload_Notification(nullptr) {}
  ~CBroadcast_StopBroadcastUpload_Notification() override;
  explicit constexpr CBroadcast_StopBroadcastUpload_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_StopBroadcastUpload_Notification(const CBroadcast_StopBroadcastUpload_Notification& from);
  CBroadcast_StopBroadcastUpload_Notification(CBroadcast_StopBroadcastUpload_Notification&& from) noexcept
    : CBroadcast_StopBroadcastUpload_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_StopBroadcastUpload_Notification& operator=(const CBroadcast_StopBroadcastUpload_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_StopBroadcastUpload_Notification& operator=(CBroadcast_StopBroadcastUpload_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_StopBroadcastUpload_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_StopBroadcastUpload_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_StopBroadcastUpload_Notification*>(
               &_CBroadcast_StopBroadcastUpload_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CBroadcast_StopBroadcastUpload_Notification& a, CBroadcast_StopBroadcastUpload_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_StopBroadcastUpload_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_StopBroadcastUpload_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_StopBroadcastUpload_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_StopBroadcastUpload_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_StopBroadcastUpload_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_StopBroadcastUpload_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_StopBroadcastUpload_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_StopBroadcastUpload_Notification";
  }
  protected:
  explicit CBroadcast_StopBroadcastUpload_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastIdFieldNumber = 1,
    kBroadcastRelayIdFieldNumber = 2,
    kUploadResultFieldNumber = 3,
    kTooManyPoorUploadsFieldNumber = 4,
  };
  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // optional fixed64 broadcast_relay_id = 2;
  bool has_broadcast_relay_id() const;
  private:
  bool _internal_has_broadcast_relay_id() const;
  public:
  void clear_broadcast_relay_id();
  uint64_t broadcast_relay_id() const;
  void set_broadcast_relay_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_relay_id() const;
  void _internal_set_broadcast_relay_id(uint64_t value);
  public:

  // optional uint32 upload_result = 3;
  bool has_upload_result() const;
  private:
  bool _internal_has_upload_result() const;
  public:
  void clear_upload_result();
  uint32_t upload_result() const;
  void set_upload_result(uint32_t value);
  private:
  uint32_t _internal_upload_result() const;
  void _internal_set_upload_result(uint32_t value);
  public:

  // optional bool too_many_poor_uploads = 4;
  bool has_too_many_poor_uploads() const;
  private:
  bool _internal_has_too_many_poor_uploads() const;
  public:
  void clear_too_many_poor_uploads();
  bool too_many_poor_uploads() const;
  void set_too_many_poor_uploads(bool value);
  private:
  bool _internal_too_many_poor_uploads() const;
  void _internal_set_too_many_poor_uploads(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_StopBroadcastUpload_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t broadcast_id_;
  uint64_t broadcast_relay_id_;
  uint32_t upload_result_;
  bool too_many_poor_uploads_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_SessionClosed_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_SessionClosed_Notification) */ {
 public:
  inline CBroadcast_SessionClosed_Notification() : CBroadcast_SessionClosed_Notification(nullptr) {}
  ~CBroadcast_SessionClosed_Notification() override;
  explicit constexpr CBroadcast_SessionClosed_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_SessionClosed_Notification(const CBroadcast_SessionClosed_Notification& from);
  CBroadcast_SessionClosed_Notification(CBroadcast_SessionClosed_Notification&& from) noexcept
    : CBroadcast_SessionClosed_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_SessionClosed_Notification& operator=(const CBroadcast_SessionClosed_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_SessionClosed_Notification& operator=(CBroadcast_SessionClosed_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_SessionClosed_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_SessionClosed_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SessionClosed_Notification*>(
               &_CBroadcast_SessionClosed_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CBroadcast_SessionClosed_Notification& a, CBroadcast_SessionClosed_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_SessionClosed_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_SessionClosed_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_SessionClosed_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_SessionClosed_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_SessionClosed_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_SessionClosed_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_SessionClosed_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_SessionClosed_Notification";
  }
  protected:
  explicit CBroadcast_SessionClosed_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastIdFieldNumber = 1,
  };
  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_SessionClosed_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t broadcast_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_ViewerBroadcastInvite_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_ViewerBroadcastInvite_Notification) */ {
 public:
  inline CBroadcast_ViewerBroadcastInvite_Notification() : CBroadcast_ViewerBroadcastInvite_Notification(nullptr) {}
  ~CBroadcast_ViewerBroadcastInvite_Notification() override;
  explicit constexpr CBroadcast_ViewerBroadcastInvite_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_ViewerBroadcastInvite_Notification(const CBroadcast_ViewerBroadcastInvite_Notification& from);
  CBroadcast_ViewerBroadcastInvite_Notification(CBroadcast_ViewerBroadcastInvite_Notification&& from) noexcept
    : CBroadcast_ViewerBroadcastInvite_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_ViewerBroadcastInvite_Notification& operator=(const CBroadcast_ViewerBroadcastInvite_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_ViewerBroadcastInvite_Notification& operator=(CBroadcast_ViewerBroadcastInvite_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_ViewerBroadcastInvite_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_ViewerBroadcastInvite_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_ViewerBroadcastInvite_Notification*>(
               &_CBroadcast_ViewerBroadcastInvite_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CBroadcast_ViewerBroadcastInvite_Notification& a, CBroadcast_ViewerBroadcastInvite_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_ViewerBroadcastInvite_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_ViewerBroadcastInvite_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_ViewerBroadcastInvite_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_ViewerBroadcastInvite_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_ViewerBroadcastInvite_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_ViewerBroadcastInvite_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_ViewerBroadcastInvite_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_ViewerBroadcastInvite_Notification";
  }
  protected:
  explicit CBroadcast_ViewerBroadcastInvite_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcasterSteamidFieldNumber = 1,
  };
  // optional fixed64 broadcaster_steamid = 1;
  bool has_broadcaster_steamid() const;
  private:
  bool _internal_has_broadcaster_steamid() const;
  public:
  void clear_broadcaster_steamid();
  uint64_t broadcaster_steamid() const;
  void set_broadcaster_steamid(uint64_t value);
  private:
  uint64_t _internal_broadcaster_steamid() const;
  void _internal_set_broadcaster_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_ViewerBroadcastInvite_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t broadcaster_steamid_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_BroadcastStatus_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_BroadcastStatus_Notification) */ {
 public:
  inline CBroadcast_BroadcastStatus_Notification() : CBroadcast_BroadcastStatus_Notification(nullptr) {}
  ~CBroadcast_BroadcastStatus_Notification() override;
  explicit constexpr CBroadcast_BroadcastStatus_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_BroadcastStatus_Notification(const CBroadcast_BroadcastStatus_Notification& from);
  CBroadcast_BroadcastStatus_Notification(CBroadcast_BroadcastStatus_Notification&& from) noexcept
    : CBroadcast_BroadcastStatus_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_BroadcastStatus_Notification& operator=(const CBroadcast_BroadcastStatus_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_BroadcastStatus_Notification& operator=(CBroadcast_BroadcastStatus_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_BroadcastStatus_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_BroadcastStatus_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_BroadcastStatus_Notification*>(
               &_CBroadcast_BroadcastStatus_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CBroadcast_BroadcastStatus_Notification& a, CBroadcast_BroadcastStatus_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_BroadcastStatus_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_BroadcastStatus_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_BroadcastStatus_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_BroadcastStatus_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_BroadcastStatus_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_BroadcastStatus_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_BroadcastStatus_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_BroadcastStatus_Notification";
  }
  protected:
  explicit CBroadcast_BroadcastStatus_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastIdFieldNumber = 1,
    kNumViewersFieldNumber = 2,
  };
  // optional fixed64 broadcast_id = 1;
  bool has_broadcast_id() const;
  private:
  bool _internal_has_broadcast_id() const;
  public:
  void clear_broadcast_id();
  uint64_t broadcast_id() const;
  void set_broadcast_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_id() const;
  void _internal_set_broadcast_id(uint64_t value);
  public:

  // optional int32 num_viewers = 2;
  bool has_num_viewers() const;
  private:
  bool _internal_has_num_viewers() const;
  public:
  void clear_num_viewers();
  int32_t num_viewers() const;
  void set_num_viewers(int32_t value);
  private:
  int32_t _internal_num_viewers() const;
  void _internal_set_num_viewers(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_BroadcastStatus_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t broadcast_id_;
  int32_t num_viewers_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_BroadcastChannelLive_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_BroadcastChannelLive_Notification) */ {
 public:
  inline CBroadcast_BroadcastChannelLive_Notification() : CBroadcast_BroadcastChannelLive_Notification(nullptr) {}
  ~CBroadcast_BroadcastChannelLive_Notification() override;
  explicit constexpr CBroadcast_BroadcastChannelLive_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_BroadcastChannelLive_Notification(const CBroadcast_BroadcastChannelLive_Notification& from);
  CBroadcast_BroadcastChannelLive_Notification(CBroadcast_BroadcastChannelLive_Notification&& from) noexcept
    : CBroadcast_BroadcastChannelLive_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_BroadcastChannelLive_Notification& operator=(const CBroadcast_BroadcastChannelLive_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_BroadcastChannelLive_Notification& operator=(CBroadcast_BroadcastChannelLive_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_BroadcastChannelLive_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_BroadcastChannelLive_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_BroadcastChannelLive_Notification*>(
               &_CBroadcast_BroadcastChannelLive_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CBroadcast_BroadcastChannelLive_Notification& a, CBroadcast_BroadcastChannelLive_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_BroadcastChannelLive_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_BroadcastChannelLive_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_BroadcastChannelLive_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_BroadcastChannelLive_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_BroadcastChannelLive_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_BroadcastChannelLive_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_BroadcastChannelLive_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_BroadcastChannelLive_Notification";
  }
  protected:
  explicit CBroadcast_BroadcastChannelLive_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastChannelNameFieldNumber = 2,
    kBroadcastChannelAvatarFieldNumber = 3,
    kBroadcastChannelIdFieldNumber = 1,
  };
  // optional string broadcast_channel_name = 2;
  bool has_broadcast_channel_name() const;
  private:
  bool _internal_has_broadcast_channel_name() const;
  public:
  void clear_broadcast_channel_name();
  const std::string& broadcast_channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broadcast_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broadcast_channel_name();
  PROTOBUF_NODISCARD std::string* release_broadcast_channel_name();
  void set_allocated_broadcast_channel_name(std::string* broadcast_channel_name);
  private:
  const std::string& _internal_broadcast_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broadcast_channel_name(const std::string& value);
  std::string* _internal_mutable_broadcast_channel_name();
  public:

  // optional string broadcast_channel_avatar = 3;
  bool has_broadcast_channel_avatar() const;
  private:
  bool _internal_has_broadcast_channel_avatar() const;
  public:
  void clear_broadcast_channel_avatar();
  const std::string& broadcast_channel_avatar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_broadcast_channel_avatar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_broadcast_channel_avatar();
  PROTOBUF_NODISCARD std::string* release_broadcast_channel_avatar();
  void set_allocated_broadcast_channel_avatar(std::string* broadcast_channel_avatar);
  private:
  const std::string& _internal_broadcast_channel_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_broadcast_channel_avatar(const std::string& value);
  std::string* _internal_mutable_broadcast_channel_avatar();
  public:

  // optional fixed64 broadcast_channel_id = 1;
  bool has_broadcast_channel_id() const;
  private:
  bool _internal_has_broadcast_channel_id() const;
  public:
  void clear_broadcast_channel_id();
  uint64_t broadcast_channel_id() const;
  void set_broadcast_channel_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_channel_id() const;
  void _internal_set_broadcast_channel_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_BroadcastChannelLive_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broadcast_channel_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broadcast_channel_avatar_;
  uint64_t broadcast_channel_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_SendThumbnailToRelay_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_SendThumbnailToRelay_Notification) */ {
 public:
  inline CBroadcast_SendThumbnailToRelay_Notification() : CBroadcast_SendThumbnailToRelay_Notification(nullptr) {}
  ~CBroadcast_SendThumbnailToRelay_Notification() override;
  explicit constexpr CBroadcast_SendThumbnailToRelay_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_SendThumbnailToRelay_Notification(const CBroadcast_SendThumbnailToRelay_Notification& from);
  CBroadcast_SendThumbnailToRelay_Notification(CBroadcast_SendThumbnailToRelay_Notification&& from) noexcept
    : CBroadcast_SendThumbnailToRelay_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_SendThumbnailToRelay_Notification& operator=(const CBroadcast_SendThumbnailToRelay_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_SendThumbnailToRelay_Notification& operator=(CBroadcast_SendThumbnailToRelay_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_SendThumbnailToRelay_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_SendThumbnailToRelay_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_SendThumbnailToRelay_Notification*>(
               &_CBroadcast_SendThumbnailToRelay_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CBroadcast_SendThumbnailToRelay_Notification& a, CBroadcast_SendThumbnailToRelay_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_SendThumbnailToRelay_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_SendThumbnailToRelay_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_SendThumbnailToRelay_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_SendThumbnailToRelay_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_SendThumbnailToRelay_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_SendThumbnailToRelay_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_SendThumbnailToRelay_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_SendThumbnailToRelay_Notification";
  }
  protected:
  explicit CBroadcast_SendThumbnailToRelay_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThumbnailUploadTokenFieldNumber = 1,
    kThumbnailDataFieldNumber = 3,
    kThumbnailBroadcastSessionIdFieldNumber = 2,
    kThumbnailWidthFieldNumber = 4,
    kThumbnailHeightFieldNumber = 5,
  };
  // optional string thumbnail_upload_token = 1;
  bool has_thumbnail_upload_token() const;
  private:
  bool _internal_has_thumbnail_upload_token() const;
  public:
  void clear_thumbnail_upload_token();
  const std::string& thumbnail_upload_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail_upload_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail_upload_token();
  PROTOBUF_NODISCARD std::string* release_thumbnail_upload_token();
  void set_allocated_thumbnail_upload_token(std::string* thumbnail_upload_token);
  private:
  const std::string& _internal_thumbnail_upload_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail_upload_token(const std::string& value);
  std::string* _internal_mutable_thumbnail_upload_token();
  public:

  // optional bytes thumbnail_data = 3;
  bool has_thumbnail_data() const;
  private:
  bool _internal_has_thumbnail_data() const;
  public:
  void clear_thumbnail_data();
  const std::string& thumbnail_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_thumbnail_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_thumbnail_data();
  PROTOBUF_NODISCARD std::string* release_thumbnail_data();
  void set_allocated_thumbnail_data(std::string* thumbnail_data);
  private:
  const std::string& _internal_thumbnail_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_thumbnail_data(const std::string& value);
  std::string* _internal_mutable_thumbnail_data();
  public:

  // optional fixed64 thumbnail_broadcast_session_id = 2;
  bool has_thumbnail_broadcast_session_id() const;
  private:
  bool _internal_has_thumbnail_broadcast_session_id() const;
  public:
  void clear_thumbnail_broadcast_session_id();
  uint64_t thumbnail_broadcast_session_id() const;
  void set_thumbnail_broadcast_session_id(uint64_t value);
  private:
  uint64_t _internal_thumbnail_broadcast_session_id() const;
  void _internal_set_thumbnail_broadcast_session_id(uint64_t value);
  public:

  // optional uint32 thumbnail_width = 4;
  bool has_thumbnail_width() const;
  private:
  bool _internal_has_thumbnail_width() const;
  public:
  void clear_thumbnail_width();
  uint32_t thumbnail_width() const;
  void set_thumbnail_width(uint32_t value);
  private:
  uint32_t _internal_thumbnail_width() const;
  void _internal_set_thumbnail_width(uint32_t value);
  public:

  // optional uint32 thumbnail_height = 5;
  bool has_thumbnail_height() const;
  private:
  bool _internal_has_thumbnail_height() const;
  public:
  void clear_thumbnail_height();
  uint32_t thumbnail_height() const;
  void set_thumbnail_height(uint32_t value);
  private:
  uint32_t _internal_thumbnail_height() const;
  void _internal_set_thumbnail_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_SendThumbnailToRelay_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_upload_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thumbnail_data_;
  uint64_t thumbnail_broadcast_session_id_;
  uint32_t thumbnail_width_;
  uint32_t thumbnail_height_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCNeedTURNServer_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCNeedTURNServer_Notification) */ {
 public:
  inline CBroadcast_WebRTCNeedTURNServer_Notification() : CBroadcast_WebRTCNeedTURNServer_Notification(nullptr) {}
  ~CBroadcast_WebRTCNeedTURNServer_Notification() override;
  explicit constexpr CBroadcast_WebRTCNeedTURNServer_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCNeedTURNServer_Notification(const CBroadcast_WebRTCNeedTURNServer_Notification& from);
  CBroadcast_WebRTCNeedTURNServer_Notification(CBroadcast_WebRTCNeedTURNServer_Notification&& from) noexcept
    : CBroadcast_WebRTCNeedTURNServer_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCNeedTURNServer_Notification& operator=(const CBroadcast_WebRTCNeedTURNServer_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCNeedTURNServer_Notification& operator=(CBroadcast_WebRTCNeedTURNServer_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCNeedTURNServer_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCNeedTURNServer_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCNeedTURNServer_Notification*>(
               &_CBroadcast_WebRTCNeedTURNServer_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CBroadcast_WebRTCNeedTURNServer_Notification& a, CBroadcast_WebRTCNeedTURNServer_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCNeedTURNServer_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCNeedTURNServer_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCNeedTURNServer_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCNeedTURNServer_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WebRTCNeedTURNServer_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCNeedTURNServer_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCNeedTURNServer_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCNeedTURNServer_Notification";
  }
  protected:
  explicit CBroadcast_WebRTCNeedTURNServer_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastSessionIdFieldNumber = 1,
  };
  // optional fixed64 broadcast_session_id = 1;
  bool has_broadcast_session_id() const;
  private:
  bool _internal_has_broadcast_session_id() const;
  public:
  void clear_broadcast_session_id();
  uint64_t broadcast_session_id() const;
  void set_broadcast_session_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_session_id() const;
  void _internal_set_broadcast_session_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCNeedTURNServer_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t broadcast_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCStart_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCStart_Notification) */ {
 public:
  inline CBroadcast_WebRTCStart_Notification() : CBroadcast_WebRTCStart_Notification(nullptr) {}
  ~CBroadcast_WebRTCStart_Notification() override;
  explicit constexpr CBroadcast_WebRTCStart_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCStart_Notification(const CBroadcast_WebRTCStart_Notification& from);
  CBroadcast_WebRTCStart_Notification(CBroadcast_WebRTCStart_Notification&& from) noexcept
    : CBroadcast_WebRTCStart_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCStart_Notification& operator=(const CBroadcast_WebRTCStart_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCStart_Notification& operator=(CBroadcast_WebRTCStart_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCStart_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCStart_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCStart_Notification*>(
               &_CBroadcast_WebRTCStart_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CBroadcast_WebRTCStart_Notification& a, CBroadcast_WebRTCStart_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCStart_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCStart_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCStart_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCStart_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WebRTCStart_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCStart_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCStart_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCStart_Notification";
  }
  protected:
  explicit CBroadcast_WebRTCStart_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastSessionIdFieldNumber = 1,
    kWebrtcSessionIdFieldNumber = 2,
    kViewerSteamidFieldNumber = 3,
    kViewerTokenFieldNumber = 4,
  };
  // optional fixed64 broadcast_session_id = 1;
  bool has_broadcast_session_id() const;
  private:
  bool _internal_has_broadcast_session_id() const;
  public:
  void clear_broadcast_session_id();
  uint64_t broadcast_session_id() const;
  void set_broadcast_session_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_session_id() const;
  void _internal_set_broadcast_session_id(uint64_t value);
  public:

  // optional fixed64 webrtc_session_id = 2;
  bool has_webrtc_session_id() const;
  private:
  bool _internal_has_webrtc_session_id() const;
  public:
  void clear_webrtc_session_id();
  uint64_t webrtc_session_id() const;
  void set_webrtc_session_id(uint64_t value);
  private:
  uint64_t _internal_webrtc_session_id() const;
  void _internal_set_webrtc_session_id(uint64_t value);
  public:

  // optional fixed64 viewer_steamid = 3;
  bool has_viewer_steamid() const;
  private:
  bool _internal_has_viewer_steamid() const;
  public:
  void clear_viewer_steamid();
  uint64_t viewer_steamid() const;
  void set_viewer_steamid(uint64_t value);
  private:
  uint64_t _internal_viewer_steamid() const;
  void _internal_set_viewer_steamid(uint64_t value);
  public:

  // optional fixed64 viewer_token = 4;
  bool has_viewer_token() const;
  private:
  bool _internal_has_viewer_token() const;
  public:
  void clear_viewer_token();
  uint64_t viewer_token() const;
  void set_viewer_token(uint64_t value);
  private:
  uint64_t _internal_viewer_token() const;
  void _internal_set_viewer_token(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCStart_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t broadcast_session_id_;
  uint64_t webrtc_session_id_;
  uint64_t viewer_steamid_;
  uint64_t viewer_token_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCSetAnswer_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCSetAnswer_Notification) */ {
 public:
  inline CBroadcast_WebRTCSetAnswer_Notification() : CBroadcast_WebRTCSetAnswer_Notification(nullptr) {}
  ~CBroadcast_WebRTCSetAnswer_Notification() override;
  explicit constexpr CBroadcast_WebRTCSetAnswer_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCSetAnswer_Notification(const CBroadcast_WebRTCSetAnswer_Notification& from);
  CBroadcast_WebRTCSetAnswer_Notification(CBroadcast_WebRTCSetAnswer_Notification&& from) noexcept
    : CBroadcast_WebRTCSetAnswer_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCSetAnswer_Notification& operator=(const CBroadcast_WebRTCSetAnswer_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCSetAnswer_Notification& operator=(CBroadcast_WebRTCSetAnswer_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCSetAnswer_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCSetAnswer_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCSetAnswer_Notification*>(
               &_CBroadcast_WebRTCSetAnswer_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CBroadcast_WebRTCSetAnswer_Notification& a, CBroadcast_WebRTCSetAnswer_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCSetAnswer_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCSetAnswer_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCSetAnswer_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCSetAnswer_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WebRTCSetAnswer_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCSetAnswer_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCSetAnswer_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCSetAnswer_Notification";
  }
  protected:
  explicit CBroadcast_WebRTCSetAnswer_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 3,
    kBroadcastSessionIdFieldNumber = 1,
    kWebrtcSessionIdFieldNumber = 2,
  };
  // optional string answer = 3;
  bool has_answer() const;
  private:
  bool _internal_has_answer() const;
  public:
  void clear_answer();
  const std::string& answer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_answer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_answer();
  PROTOBUF_NODISCARD std::string* release_answer();
  void set_allocated_answer(std::string* answer);
  private:
  const std::string& _internal_answer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_answer(const std::string& value);
  std::string* _internal_mutable_answer();
  public:

  // optional fixed64 broadcast_session_id = 1;
  bool has_broadcast_session_id() const;
  private:
  bool _internal_has_broadcast_session_id() const;
  public:
  void clear_broadcast_session_id();
  uint64_t broadcast_session_id() const;
  void set_broadcast_session_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_session_id() const;
  void _internal_set_broadcast_session_id(uint64_t value);
  public:

  // optional fixed64 webrtc_session_id = 2;
  bool has_webrtc_session_id() const;
  private:
  bool _internal_has_webrtc_session_id() const;
  public:
  void clear_webrtc_session_id();
  uint64_t webrtc_session_id() const;
  void set_webrtc_session_id(uint64_t value);
  private:
  uint64_t _internal_webrtc_session_id() const;
  void _internal_set_webrtc_session_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCSetAnswer_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_;
  uint64_t broadcast_session_id_;
  uint64_t webrtc_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CBroadcast_WebRTCAddViewerCandidate_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBroadcast_WebRTCAddViewerCandidate_Notification) */ {
 public:
  inline CBroadcast_WebRTCAddViewerCandidate_Notification() : CBroadcast_WebRTCAddViewerCandidate_Notification(nullptr) {}
  ~CBroadcast_WebRTCAddViewerCandidate_Notification() override;
  explicit constexpr CBroadcast_WebRTCAddViewerCandidate_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBroadcast_WebRTCAddViewerCandidate_Notification(const CBroadcast_WebRTCAddViewerCandidate_Notification& from);
  CBroadcast_WebRTCAddViewerCandidate_Notification(CBroadcast_WebRTCAddViewerCandidate_Notification&& from) noexcept
    : CBroadcast_WebRTCAddViewerCandidate_Notification() {
    *this = ::std::move(from);
  }

  inline CBroadcast_WebRTCAddViewerCandidate_Notification& operator=(const CBroadcast_WebRTCAddViewerCandidate_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBroadcast_WebRTCAddViewerCandidate_Notification& operator=(CBroadcast_WebRTCAddViewerCandidate_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBroadcast_WebRTCAddViewerCandidate_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBroadcast_WebRTCAddViewerCandidate_Notification* internal_default_instance() {
    return reinterpret_cast<const CBroadcast_WebRTCAddViewerCandidate_Notification*>(
               &_CBroadcast_WebRTCAddViewerCandidate_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CBroadcast_WebRTCAddViewerCandidate_Notification& a, CBroadcast_WebRTCAddViewerCandidate_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CBroadcast_WebRTCAddViewerCandidate_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBroadcast_WebRTCAddViewerCandidate_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBroadcast_WebRTCAddViewerCandidate_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CBroadcast_WebRTCAddViewerCandidate_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CBroadcast_WebRTCAddViewerCandidate_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CBroadcast_WebRTCAddViewerCandidate_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBroadcast_WebRTCAddViewerCandidate_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBroadcast_WebRTCAddViewerCandidate_Notification";
  }
  protected:
  explicit CBroadcast_WebRTCAddViewerCandidate_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateFieldNumber = 3,
    kBroadcastSessionIdFieldNumber = 1,
    kWebrtcSessionIdFieldNumber = 2,
  };
  // optional .CBroadcast_WebRTC_Candidate candidate = 3;
  bool has_candidate() const;
  private:
  bool _internal_has_candidate() const;
  public:
  void clear_candidate();
  const ::CBroadcast_WebRTC_Candidate& candidate() const;
  PROTOBUF_NODISCARD ::CBroadcast_WebRTC_Candidate* release_candidate();
  ::CBroadcast_WebRTC_Candidate* mutable_candidate();
  void set_allocated_candidate(::CBroadcast_WebRTC_Candidate* candidate);
  private:
  const ::CBroadcast_WebRTC_Candidate& _internal_candidate() const;
  ::CBroadcast_WebRTC_Candidate* _internal_mutable_candidate();
  public:
  void unsafe_arena_set_allocated_candidate(
      ::CBroadcast_WebRTC_Candidate* candidate);
  ::CBroadcast_WebRTC_Candidate* unsafe_arena_release_candidate();

  // optional fixed64 broadcast_session_id = 1;
  bool has_broadcast_session_id() const;
  private:
  bool _internal_has_broadcast_session_id() const;
  public:
  void clear_broadcast_session_id();
  uint64_t broadcast_session_id() const;
  void set_broadcast_session_id(uint64_t value);
  private:
  uint64_t _internal_broadcast_session_id() const;
  void _internal_set_broadcast_session_id(uint64_t value);
  public:

  // optional fixed64 webrtc_session_id = 2;
  bool has_webrtc_session_id() const;
  private:
  bool _internal_has_webrtc_session_id() const;
  public:
  void clear_webrtc_session_id();
  uint64_t webrtc_session_id() const;
  void set_webrtc_session_id(uint64_t value);
  private:
  uint64_t _internal_webrtc_session_id() const;
  void _internal_set_webrtc_session_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CBroadcast_WebRTCAddViewerCandidate_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CBroadcast_WebRTC_Candidate* candidate_;
  uint64_t broadcast_session_id_;
  uint64_t webrtc_session_id_;
  friend struct ::TableStruct_steammessages_5fbroadcast_2esteamclient_2eproto;
};
// ===================================================================

class Broadcast_Stub;

class Broadcast : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Broadcast() {};
 public:
  virtual ~Broadcast();

  typedef Broadcast_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void BeginBroadcastSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_BeginBroadcastSession_Request* request,
                       ::CBroadcast_BeginBroadcastSession_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void EndBroadcastSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_EndBroadcastSession_Request* request,
                       ::CBroadcast_EndBroadcastSession_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void StartBroadcastUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_StartBroadcastUpload_Request* request,
                       ::CBroadcast_StartBroadcastUpload_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyBroadcastUploadStop(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_NotifyBroadcastUploadStop_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void WatchBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WatchBroadcast_Request* request,
                       ::CBroadcast_WatchBroadcast_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void HeartbeatBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_HeartbeatBroadcast_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void StopWatchingBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_StopWatchingBroadcast_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBroadcastStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetBroadcastStatus_Request* request,
                       ::CBroadcast_GetBroadcastStatus_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBroadcastThumbnail(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetBroadcastThumbnail_Request* request,
                       ::CBroadcast_GetBroadcastThumbnail_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void InviteToBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_InviteToBroadcast_Request* request,
                       ::CBroadcast_InviteToBroadcast_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SendBroadcastStateToServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_SendBroadcastStateToServer_Request* request,
                       ::CBroadcast_SendBroadcastStateToServer_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyBroadcastSessionHeartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBroadcastChatInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetBroadcastChatInfo_Request* request,
                       ::CBroadcast_GetBroadcastChatInfo_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void PostChatMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_PostChatMessage_Request* request,
                       ::CBroadcast_PostChatMessage_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateChatMessageFlair(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_UpdateChatMessageFlair_Request* request,
                       ::CBroadcast_UpdateChatMessageFlair_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void MuteBroadcastChatUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_MuteBroadcastChatUser_Request* request,
                       ::CBroadcast_MuteBroadcastChatUser_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveUserChatText(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_RemoveUserChatText_Request* request,
                       ::CBroadcast_RemoveUserChatText_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBroadcastChatUserNames(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetBroadcastChatUserNames_Request* request,
                       ::CBroadcast_GetBroadcastChatUserNames_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void StartBuildClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_StartBuildClip_Request* request,
                       ::CBroadcast_StartBuildClip_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBuildClipStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetBuildClipStatus_Request* request,
                       ::CBroadcast_GetBuildClipStatus_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetClipDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_SetClipDetails_Request* request,
                       ::CBroadcast_SetClipDetails_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetClipDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetClipDetails_Request* request,
                       ::CBroadcast_GetClipDetails_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetRTMPInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_SetRTMPInfo_Request* request,
                       ::CBroadcast_SetRTMPInfo_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetRTMPInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetRTMPInfo_Request* request,
                       ::CBroadcast_GetRTMPInfo_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyWebRTCHaveTURNServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCHaveTURNServer_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void WebRTCStartResult(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCStartResult_Request* request,
                       ::CBroadcast_WebRTCStartResult_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void WebRTCStopped(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCStopped_Request* request,
                       ::CBroadcast_WebRTCStopped_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void WebRTCSetAnswer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCSetAnswer_Request* request,
                       ::CBroadcast_WebRTCSetAnswer_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void WebRTCLookupTURNServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCLookupTURNServer_Request* request,
                       ::CBroadcast_WebRTCLookupTURNServer_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void WebRTCAddHostCandidate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCAddHostCandidate_Request* request,
                       ::CBroadcast_WebRTCAddHostCandidate_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void WebRTCAddViewerCandidate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCAddViewerCandidate_Request* request,
                       ::CBroadcast_WebRTCAddViewerCandidate_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void WebRTCGetHostCandidates(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCGetHostCandidates_Request* request,
                       ::CBroadcast_WebRTCGetHostCandidates_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBroadcastUploadStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetBroadcastUploadStats_Request* request,
                       ::CBroadcast_GetBroadcastUploadStats_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBroadcastViewerStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetBroadcastViewerStats_Request* request,
                       ::CBroadcast_GetBroadcastViewerStats_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Broadcast);
};

class Broadcast_Stub : public Broadcast {
 public:
  Broadcast_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Broadcast_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Broadcast_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Broadcast ------------------------------------------

  void BeginBroadcastSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_BeginBroadcastSession_Request* request,
                       ::CBroadcast_BeginBroadcastSession_Response* response,
                       ::google::protobuf::Closure* done);
  void EndBroadcastSession(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_EndBroadcastSession_Request* request,
                       ::CBroadcast_EndBroadcastSession_Response* response,
                       ::google::protobuf::Closure* done);
  void StartBroadcastUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_StartBroadcastUpload_Request* request,
                       ::CBroadcast_StartBroadcastUpload_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyBroadcastUploadStop(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_NotifyBroadcastUploadStop_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void WatchBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WatchBroadcast_Request* request,
                       ::CBroadcast_WatchBroadcast_Response* response,
                       ::google::protobuf::Closure* done);
  void HeartbeatBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_HeartbeatBroadcast_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void StopWatchingBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_StopWatchingBroadcast_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetBroadcastStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetBroadcastStatus_Request* request,
                       ::CBroadcast_GetBroadcastStatus_Response* response,
                       ::google::protobuf::Closure* done);
  void GetBroadcastThumbnail(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetBroadcastThumbnail_Request* request,
                       ::CBroadcast_GetBroadcastThumbnail_Response* response,
                       ::google::protobuf::Closure* done);
  void InviteToBroadcast(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_InviteToBroadcast_Request* request,
                       ::CBroadcast_InviteToBroadcast_Response* response,
                       ::google::protobuf::Closure* done);
  void SendBroadcastStateToServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_SendBroadcastStateToServer_Request* request,
                       ::CBroadcast_SendBroadcastStateToServer_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyBroadcastSessionHeartbeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetBroadcastChatInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetBroadcastChatInfo_Request* request,
                       ::CBroadcast_GetBroadcastChatInfo_Response* response,
                       ::google::protobuf::Closure* done);
  void PostChatMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_PostChatMessage_Request* request,
                       ::CBroadcast_PostChatMessage_Response* response,
                       ::google::protobuf::Closure* done);
  void UpdateChatMessageFlair(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_UpdateChatMessageFlair_Request* request,
                       ::CBroadcast_UpdateChatMessageFlair_Response* response,
                       ::google::protobuf::Closure* done);
  void MuteBroadcastChatUser(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_MuteBroadcastChatUser_Request* request,
                       ::CBroadcast_MuteBroadcastChatUser_Response* response,
                       ::google::protobuf::Closure* done);
  void RemoveUserChatText(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_RemoveUserChatText_Request* request,
                       ::CBroadcast_RemoveUserChatText_Response* response,
                       ::google::protobuf::Closure* done);
  void GetBroadcastChatUserNames(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetBroadcastChatUserNames_Request* request,
                       ::CBroadcast_GetBroadcastChatUserNames_Response* response,
                       ::google::protobuf::Closure* done);
  void StartBuildClip(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_StartBuildClip_Request* request,
                       ::CBroadcast_StartBuildClip_Response* response,
                       ::google::protobuf::Closure* done);
  void GetBuildClipStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetBuildClipStatus_Request* request,
                       ::CBroadcast_GetBuildClipStatus_Response* response,
                       ::google::protobuf::Closure* done);
  void SetClipDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_SetClipDetails_Request* request,
                       ::CBroadcast_SetClipDetails_Response* response,
                       ::google::protobuf::Closure* done);
  void GetClipDetails(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetClipDetails_Request* request,
                       ::CBroadcast_GetClipDetails_Response* response,
                       ::google::protobuf::Closure* done);
  void SetRTMPInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_SetRTMPInfo_Request* request,
                       ::CBroadcast_SetRTMPInfo_Response* response,
                       ::google::protobuf::Closure* done);
  void GetRTMPInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetRTMPInfo_Request* request,
                       ::CBroadcast_GetRTMPInfo_Response* response,
                       ::google::protobuf::Closure* done);
  void NotifyWebRTCHaveTURNServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCHaveTURNServer_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void WebRTCStartResult(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCStartResult_Request* request,
                       ::CBroadcast_WebRTCStartResult_Response* response,
                       ::google::protobuf::Closure* done);
  void WebRTCStopped(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCStopped_Request* request,
                       ::CBroadcast_WebRTCStopped_Response* response,
                       ::google::protobuf::Closure* done);
  void WebRTCSetAnswer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCSetAnswer_Request* request,
                       ::CBroadcast_WebRTCSetAnswer_Response* response,
                       ::google::protobuf::Closure* done);
  void WebRTCLookupTURNServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCLookupTURNServer_Request* request,
                       ::CBroadcast_WebRTCLookupTURNServer_Response* response,
                       ::google::protobuf::Closure* done);
  void WebRTCAddHostCandidate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCAddHostCandidate_Request* request,
                       ::CBroadcast_WebRTCAddHostCandidate_Response* response,
                       ::google::protobuf::Closure* done);
  void WebRTCAddViewerCandidate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCAddViewerCandidate_Request* request,
                       ::CBroadcast_WebRTCAddViewerCandidate_Response* response,
                       ::google::protobuf::Closure* done);
  void WebRTCGetHostCandidates(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCGetHostCandidates_Request* request,
                       ::CBroadcast_WebRTCGetHostCandidates_Response* response,
                       ::google::protobuf::Closure* done);
  void GetBroadcastUploadStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetBroadcastUploadStats_Request* request,
                       ::CBroadcast_GetBroadcastUploadStats_Response* response,
                       ::google::protobuf::Closure* done);
  void GetBroadcastViewerStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_GetBroadcastViewerStats_Request* request,
                       ::CBroadcast_GetBroadcastViewerStats_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Broadcast_Stub);
};


// -------------------------------------------------------------------

class BroadcastClient_Stub;

class BroadcastClient : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline BroadcastClient() {};
 public:
  virtual ~BroadcastClient();

  typedef BroadcastClient_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void NotifyBroadcastViewerState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_BroadcastViewerState_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyWaitingBroadcastViewer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WaitingBroadcastViewer_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyBroadcastUploadStarted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_BroadcastUploadStarted_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyStopBroadcastUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_StopBroadcastUpload_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifySessionClosed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_SessionClosed_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyViewerBroadcastInvite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_ViewerBroadcastInvite_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyBroadcastStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_BroadcastStatus_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyBroadcastChannelLive(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_BroadcastChannelLive_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SendThumbnailToRelay(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_SendThumbnailToRelay_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyWebRTCNeedTURNServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCNeedTURNServer_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyWebRTCStart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCStart_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyWebRTCSetAnswer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCSetAnswer_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyWebRTCAddViewerCandidate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCAddViewerCandidate_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BroadcastClient);
};

class BroadcastClient_Stub : public BroadcastClient {
 public:
  BroadcastClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  BroadcastClient_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~BroadcastClient_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements BroadcastClient ------------------------------------------

  void NotifyBroadcastViewerState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_BroadcastViewerState_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyWaitingBroadcastViewer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WaitingBroadcastViewer_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyBroadcastUploadStarted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_BroadcastUploadStarted_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyStopBroadcastUpload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_StopBroadcastUpload_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifySessionClosed(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_SessionClosed_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyViewerBroadcastInvite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_ViewerBroadcastInvite_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyBroadcastStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_BroadcastStatus_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyBroadcastChannelLive(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_BroadcastChannelLive_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void SendThumbnailToRelay(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_SendThumbnailToRelay_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyWebRTCNeedTURNServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCNeedTURNServer_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyWebRTCStart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCStart_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyWebRTCSetAnswer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCSetAnswer_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyWebRTCAddViewerCandidate(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CBroadcast_WebRTCAddViewerCandidate_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BroadcastClient_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CBroadcast_BeginBroadcastSession_Request

// optional int32 permission = 1;
inline bool CBroadcast_BeginBroadcastSession_Request::_internal_has_permission() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_BeginBroadcastSession_Request::has_permission() const {
  return _internal_has_permission();
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_permission() {
  permission_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CBroadcast_BeginBroadcastSession_Request::_internal_permission() const {
  return permission_;
}
inline int32_t CBroadcast_BeginBroadcastSession_Request::permission() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BeginBroadcastSession_Request.permission)
  return _internal_permission();
}
inline void CBroadcast_BeginBroadcastSession_Request::_internal_set_permission(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  permission_ = value;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_permission(int32_t value) {
  _internal_set_permission(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BeginBroadcastSession_Request.permission)
}

// optional uint64 gameid = 2;
inline bool CBroadcast_BeginBroadcastSession_Request::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_BeginBroadcastSession_Request::has_gameid() const {
  return _internal_has_gameid();
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_gameid() {
  gameid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_BeginBroadcastSession_Request::_internal_gameid() const {
  return gameid_;
}
inline uint64_t CBroadcast_BeginBroadcastSession_Request::gameid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BeginBroadcastSession_Request.gameid)
  return _internal_gameid();
}
inline void CBroadcast_BeginBroadcastSession_Request::_internal_set_gameid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  gameid_ = value;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_gameid(uint64_t value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BeginBroadcastSession_Request.gameid)
}

// optional uint64 client_instance_id = 3;
inline bool CBroadcast_BeginBroadcastSession_Request::_internal_has_client_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_BeginBroadcastSession_Request::has_client_instance_id() const {
  return _internal_has_client_instance_id();
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_client_instance_id() {
  client_instance_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CBroadcast_BeginBroadcastSession_Request::_internal_client_instance_id() const {
  return client_instance_id_;
}
inline uint64_t CBroadcast_BeginBroadcastSession_Request::client_instance_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BeginBroadcastSession_Request.client_instance_id)
  return _internal_client_instance_id();
}
inline void CBroadcast_BeginBroadcastSession_Request::_internal_set_client_instance_id(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  client_instance_id_ = value;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_client_instance_id(uint64_t value) {
  _internal_set_client_instance_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BeginBroadcastSession_Request.client_instance_id)
}

// optional string title = 4;
inline bool CBroadcast_BeginBroadcastSession_Request::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_BeginBroadcastSession_Request::has_title() const {
  return _internal_has_title();
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_BeginBroadcastSession_Request::title() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BeginBroadcastSession_Request.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_BeginBroadcastSession_Request::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_BeginBroadcastSession_Request.title)
}
inline std::string* CBroadcast_BeginBroadcastSession_Request::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:CBroadcast_BeginBroadcastSession_Request.title)
  return _s;
}
inline const std::string& CBroadcast_BeginBroadcastSession_Request::_internal_title() const {
  return title_.Get();
}
inline void CBroadcast_BeginBroadcastSession_Request::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_BeginBroadcastSession_Request::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_BeginBroadcastSession_Request::release_title() {
  // @@protoc_insertion_point(field_release:CBroadcast_BeginBroadcastSession_Request.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_BeginBroadcastSession_Request.title)
}

// optional uint32 cellid = 5;
inline bool CBroadcast_BeginBroadcastSession_Request::_internal_has_cellid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CBroadcast_BeginBroadcastSession_Request::has_cellid() const {
  return _internal_has_cellid();
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_cellid() {
  cellid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CBroadcast_BeginBroadcastSession_Request::_internal_cellid() const {
  return cellid_;
}
inline uint32_t CBroadcast_BeginBroadcastSession_Request::cellid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BeginBroadcastSession_Request.cellid)
  return _internal_cellid();
}
inline void CBroadcast_BeginBroadcastSession_Request::_internal_set_cellid(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  cellid_ = value;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_cellid(uint32_t value) {
  _internal_set_cellid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BeginBroadcastSession_Request.cellid)
}

// optional uint64 rtmp_token = 6;
inline bool CBroadcast_BeginBroadcastSession_Request::_internal_has_rtmp_token() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CBroadcast_BeginBroadcastSession_Request::has_rtmp_token() const {
  return _internal_has_rtmp_token();
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_rtmp_token() {
  rtmp_token_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CBroadcast_BeginBroadcastSession_Request::_internal_rtmp_token() const {
  return rtmp_token_;
}
inline uint64_t CBroadcast_BeginBroadcastSession_Request::rtmp_token() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BeginBroadcastSession_Request.rtmp_token)
  return _internal_rtmp_token();
}
inline void CBroadcast_BeginBroadcastSession_Request::_internal_set_rtmp_token(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  rtmp_token_ = value;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_rtmp_token(uint64_t value) {
  _internal_set_rtmp_token(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BeginBroadcastSession_Request.rtmp_token)
}

// optional bool thumbnail_upload = 7;
inline bool CBroadcast_BeginBroadcastSession_Request::_internal_has_thumbnail_upload() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CBroadcast_BeginBroadcastSession_Request::has_thumbnail_upload() const {
  return _internal_has_thumbnail_upload();
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_thumbnail_upload() {
  thumbnail_upload_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CBroadcast_BeginBroadcastSession_Request::_internal_thumbnail_upload() const {
  return thumbnail_upload_;
}
inline bool CBroadcast_BeginBroadcastSession_Request::thumbnail_upload() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BeginBroadcastSession_Request.thumbnail_upload)
  return _internal_thumbnail_upload();
}
inline void CBroadcast_BeginBroadcastSession_Request::_internal_set_thumbnail_upload(bool value) {
  _has_bits_[0] |= 0x00000080u;
  thumbnail_upload_ = value;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_thumbnail_upload(bool value) {
  _internal_set_thumbnail_upload(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BeginBroadcastSession_Request.thumbnail_upload)
}

// optional string client_beta = 8;
inline bool CBroadcast_BeginBroadcastSession_Request::_internal_has_client_beta() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_BeginBroadcastSession_Request::has_client_beta() const {
  return _internal_has_client_beta();
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_client_beta() {
  client_beta_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBroadcast_BeginBroadcastSession_Request::client_beta() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BeginBroadcastSession_Request.client_beta)
  return _internal_client_beta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_BeginBroadcastSession_Request::set_client_beta(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 client_beta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_BeginBroadcastSession_Request.client_beta)
}
inline std::string* CBroadcast_BeginBroadcastSession_Request::mutable_client_beta() {
  std::string* _s = _internal_mutable_client_beta();
  // @@protoc_insertion_point(field_mutable:CBroadcast_BeginBroadcastSession_Request.client_beta)
  return _s;
}
inline const std::string& CBroadcast_BeginBroadcastSession_Request::_internal_client_beta() const {
  return client_beta_.Get();
}
inline void CBroadcast_BeginBroadcastSession_Request::_internal_set_client_beta(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  client_beta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_BeginBroadcastSession_Request::_internal_mutable_client_beta() {
  _has_bits_[0] |= 0x00000002u;
  return client_beta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_BeginBroadcastSession_Request::release_client_beta() {
  // @@protoc_insertion_point(field_release:CBroadcast_BeginBroadcastSession_Request.client_beta)
  if (!_internal_has_client_beta()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = client_beta_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_beta_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_beta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_allocated_client_beta(std::string* client_beta) {
  if (client_beta != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_beta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_beta,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_beta_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    client_beta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_BeginBroadcastSession_Request.client_beta)
}

// optional uint32 sysid = 9;
inline bool CBroadcast_BeginBroadcastSession_Request::_internal_has_sysid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CBroadcast_BeginBroadcastSession_Request::has_sysid() const {
  return _internal_has_sysid();
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_sysid() {
  sysid_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CBroadcast_BeginBroadcastSession_Request::_internal_sysid() const {
  return sysid_;
}
inline uint32_t CBroadcast_BeginBroadcastSession_Request::sysid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BeginBroadcastSession_Request.sysid)
  return _internal_sysid();
}
inline void CBroadcast_BeginBroadcastSession_Request::_internal_set_sysid(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  sysid_ = value;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_sysid(uint32_t value) {
  _internal_set_sysid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BeginBroadcastSession_Request.sysid)
}

// optional bool allow_webrtc = 10;
inline bool CBroadcast_BeginBroadcastSession_Request::_internal_has_allow_webrtc() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CBroadcast_BeginBroadcastSession_Request::has_allow_webrtc() const {
  return _internal_has_allow_webrtc();
}
inline void CBroadcast_BeginBroadcastSession_Request::clear_allow_webrtc() {
  allow_webrtc_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CBroadcast_BeginBroadcastSession_Request::_internal_allow_webrtc() const {
  return allow_webrtc_;
}
inline bool CBroadcast_BeginBroadcastSession_Request::allow_webrtc() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BeginBroadcastSession_Request.allow_webrtc)
  return _internal_allow_webrtc();
}
inline void CBroadcast_BeginBroadcastSession_Request::_internal_set_allow_webrtc(bool value) {
  _has_bits_[0] |= 0x00000100u;
  allow_webrtc_ = value;
}
inline void CBroadcast_BeginBroadcastSession_Request::set_allow_webrtc(bool value) {
  _internal_set_allow_webrtc(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BeginBroadcastSession_Request.allow_webrtc)
}

// -------------------------------------------------------------------

// CBroadcast_BeginBroadcastSession_Response

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_BeginBroadcastSession_Response::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_BeginBroadcastSession_Response::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_BeginBroadcastSession_Response::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CBroadcast_BeginBroadcastSession_Response::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BeginBroadcastSession_Response.broadcast_id)
  return _internal_broadcast_id();
}
inline void CBroadcast_BeginBroadcastSession_Response::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  broadcast_id_ = value;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BeginBroadcastSession_Response.broadcast_id)
}

// optional string thumbnail_upload_address = 2 [(.description) = "Http address to upload the thumbnail data."];
inline bool CBroadcast_BeginBroadcastSession_Response::_internal_has_thumbnail_upload_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_BeginBroadcastSession_Response::has_thumbnail_upload_address() const {
  return _internal_has_thumbnail_upload_address();
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_thumbnail_upload_address() {
  thumbnail_upload_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_BeginBroadcastSession_Response::thumbnail_upload_address() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
  return _internal_thumbnail_upload_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 thumbnail_upload_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
}
inline std::string* CBroadcast_BeginBroadcastSession_Response::mutable_thumbnail_upload_address() {
  std::string* _s = _internal_mutable_thumbnail_upload_address();
  // @@protoc_insertion_point(field_mutable:CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
  return _s;
}
inline const std::string& CBroadcast_BeginBroadcastSession_Response::_internal_thumbnail_upload_address() const {
  return thumbnail_upload_address_.Get();
}
inline void CBroadcast_BeginBroadcastSession_Response::_internal_set_thumbnail_upload_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  thumbnail_upload_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_BeginBroadcastSession_Response::_internal_mutable_thumbnail_upload_address() {
  _has_bits_[0] |= 0x00000001u;
  return thumbnail_upload_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_BeginBroadcastSession_Response::release_thumbnail_upload_address() {
  // @@protoc_insertion_point(field_release:CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
  if (!_internal_has_thumbnail_upload_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = thumbnail_upload_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_upload_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_upload_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_allocated_thumbnail_upload_address(std::string* thumbnail_upload_address) {
  if (thumbnail_upload_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  thumbnail_upload_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnail_upload_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_upload_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_upload_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_address)
}

// optional string thumbnail_upload_token = 3 [(.description) = "token to authorize as broadcaster to upload content to the relay."];
inline bool CBroadcast_BeginBroadcastSession_Response::_internal_has_thumbnail_upload_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_BeginBroadcastSession_Response::has_thumbnail_upload_token() const {
  return _internal_has_thumbnail_upload_token();
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_thumbnail_upload_token() {
  thumbnail_upload_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBroadcast_BeginBroadcastSession_Response::thumbnail_upload_token() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
  return _internal_thumbnail_upload_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_upload_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 thumbnail_upload_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
}
inline std::string* CBroadcast_BeginBroadcastSession_Response::mutable_thumbnail_upload_token() {
  std::string* _s = _internal_mutable_thumbnail_upload_token();
  // @@protoc_insertion_point(field_mutable:CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
  return _s;
}
inline const std::string& CBroadcast_BeginBroadcastSession_Response::_internal_thumbnail_upload_token() const {
  return thumbnail_upload_token_.Get();
}
inline void CBroadcast_BeginBroadcastSession_Response::_internal_set_thumbnail_upload_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  thumbnail_upload_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_BeginBroadcastSession_Response::_internal_mutable_thumbnail_upload_token() {
  _has_bits_[0] |= 0x00000002u;
  return thumbnail_upload_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_BeginBroadcastSession_Response::release_thumbnail_upload_token() {
  // @@protoc_insertion_point(field_release:CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
  if (!_internal_has_thumbnail_upload_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = thumbnail_upload_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_upload_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_allocated_thumbnail_upload_token(std::string* thumbnail_upload_token) {
  if (thumbnail_upload_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  thumbnail_upload_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnail_upload_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_upload_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_BeginBroadcastSession_Response.thumbnail_upload_token)
}

// optional uint32 thumbnail_interval_seconds = 4 [(.description) = "how many seconds between thumbnails"];
inline bool CBroadcast_BeginBroadcastSession_Response::_internal_has_thumbnail_interval_seconds() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_BeginBroadcastSession_Response::has_thumbnail_interval_seconds() const {
  return _internal_has_thumbnail_interval_seconds();
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_thumbnail_interval_seconds() {
  thumbnail_interval_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CBroadcast_BeginBroadcastSession_Response::_internal_thumbnail_interval_seconds() const {
  return thumbnail_interval_seconds_;
}
inline uint32_t CBroadcast_BeginBroadcastSession_Response::thumbnail_interval_seconds() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BeginBroadcastSession_Response.thumbnail_interval_seconds)
  return _internal_thumbnail_interval_seconds();
}
inline void CBroadcast_BeginBroadcastSession_Response::_internal_set_thumbnail_interval_seconds(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  thumbnail_interval_seconds_ = value;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_thumbnail_interval_seconds(uint32_t value) {
  _internal_set_thumbnail_interval_seconds(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BeginBroadcastSession_Response.thumbnail_interval_seconds)
}

// optional uint32 heartbeat_interval_seconds = 5 [(.description) = "how many seconds between session heartbeats"];
inline bool CBroadcast_BeginBroadcastSession_Response::_internal_has_heartbeat_interval_seconds() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_BeginBroadcastSession_Response::has_heartbeat_interval_seconds() const {
  return _internal_has_heartbeat_interval_seconds();
}
inline void CBroadcast_BeginBroadcastSession_Response::clear_heartbeat_interval_seconds() {
  heartbeat_interval_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CBroadcast_BeginBroadcastSession_Response::_internal_heartbeat_interval_seconds() const {
  return heartbeat_interval_seconds_;
}
inline uint32_t CBroadcast_BeginBroadcastSession_Response::heartbeat_interval_seconds() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BeginBroadcastSession_Response.heartbeat_interval_seconds)
  return _internal_heartbeat_interval_seconds();
}
inline void CBroadcast_BeginBroadcastSession_Response::_internal_set_heartbeat_interval_seconds(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  heartbeat_interval_seconds_ = value;
}
inline void CBroadcast_BeginBroadcastSession_Response::set_heartbeat_interval_seconds(uint32_t value) {
  _internal_set_heartbeat_interval_seconds(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BeginBroadcastSession_Response.heartbeat_interval_seconds)
}

// -------------------------------------------------------------------

// CBroadcast_EndBroadcastSession_Request

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_EndBroadcastSession_Request::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_EndBroadcastSession_Request::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CBroadcast_EndBroadcastSession_Request::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_EndBroadcastSession_Request::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CBroadcast_EndBroadcastSession_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_EndBroadcastSession_Request.broadcast_id)
  return _internal_broadcast_id();
}
inline void CBroadcast_EndBroadcastSession_Request::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_id_ = value;
}
inline void CBroadcast_EndBroadcastSession_Request::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_EndBroadcastSession_Request.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_EndBroadcastSession_Response

// -------------------------------------------------------------------

// CBroadcast_StartBroadcastUpload_Request

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_StartBroadcastUpload_Request::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_StartBroadcastUpload_Request::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_StartBroadcastUpload_Request::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CBroadcast_StartBroadcastUpload_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBroadcastUpload_Request.broadcast_id)
  return _internal_broadcast_id();
}
inline void CBroadcast_StartBroadcastUpload_Request::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_id_ = value;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StartBroadcastUpload_Request.broadcast_id)
}

// optional uint32 cellid = 2;
inline bool CBroadcast_StartBroadcastUpload_Request::_internal_has_cellid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_StartBroadcastUpload_Request::has_cellid() const {
  return _internal_has_cellid();
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_cellid() {
  cellid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CBroadcast_StartBroadcastUpload_Request::_internal_cellid() const {
  return cellid_;
}
inline uint32_t CBroadcast_StartBroadcastUpload_Request::cellid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBroadcastUpload_Request.cellid)
  return _internal_cellid();
}
inline void CBroadcast_StartBroadcastUpload_Request::_internal_set_cellid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  cellid_ = value;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_cellid(uint32_t value) {
  _internal_set_cellid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StartBroadcastUpload_Request.cellid)
}

// optional bool as_rtmp = 3;
inline bool CBroadcast_StartBroadcastUpload_Request::_internal_has_as_rtmp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_StartBroadcastUpload_Request::has_as_rtmp() const {
  return _internal_has_as_rtmp();
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_as_rtmp() {
  as_rtmp_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CBroadcast_StartBroadcastUpload_Request::_internal_as_rtmp() const {
  return as_rtmp_;
}
inline bool CBroadcast_StartBroadcastUpload_Request::as_rtmp() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBroadcastUpload_Request.as_rtmp)
  return _internal_as_rtmp();
}
inline void CBroadcast_StartBroadcastUpload_Request::_internal_set_as_rtmp(bool value) {
  _has_bits_[0] |= 0x00000010u;
  as_rtmp_ = value;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_as_rtmp(bool value) {
  _internal_set_as_rtmp(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StartBroadcastUpload_Request.as_rtmp)
}

// optional uint32 delay_seconds = 4;
inline bool CBroadcast_StartBroadcastUpload_Request::_internal_has_delay_seconds() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_StartBroadcastUpload_Request::has_delay_seconds() const {
  return _internal_has_delay_seconds();
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_delay_seconds() {
  delay_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CBroadcast_StartBroadcastUpload_Request::_internal_delay_seconds() const {
  return delay_seconds_;
}
inline uint32_t CBroadcast_StartBroadcastUpload_Request::delay_seconds() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBroadcastUpload_Request.delay_seconds)
  return _internal_delay_seconds();
}
inline void CBroadcast_StartBroadcastUpload_Request::_internal_set_delay_seconds(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  delay_seconds_ = value;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_delay_seconds(uint32_t value) {
  _internal_set_delay_seconds(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StartBroadcastUpload_Request.delay_seconds)
}

// optional uint64 rtmp_token = 5 [default = 0, (.description) = "Only set during RTMP uploads; secret key from the user."];
inline bool CBroadcast_StartBroadcastUpload_Request::_internal_has_rtmp_token() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_StartBroadcastUpload_Request::has_rtmp_token() const {
  return _internal_has_rtmp_token();
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_rtmp_token() {
  rtmp_token_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CBroadcast_StartBroadcastUpload_Request::_internal_rtmp_token() const {
  return rtmp_token_;
}
inline uint64_t CBroadcast_StartBroadcastUpload_Request::rtmp_token() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBroadcastUpload_Request.rtmp_token)
  return _internal_rtmp_token();
}
inline void CBroadcast_StartBroadcastUpload_Request::_internal_set_rtmp_token(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  rtmp_token_ = value;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_rtmp_token(uint64_t value) {
  _internal_set_rtmp_token(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StartBroadcastUpload_Request.rtmp_token)
}

// optional uint32 upload_ip_address = 6;
inline bool CBroadcast_StartBroadcastUpload_Request::_internal_has_upload_ip_address() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CBroadcast_StartBroadcastUpload_Request::has_upload_ip_address() const {
  return _internal_has_upload_ip_address();
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_upload_ip_address() {
  upload_ip_address_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CBroadcast_StartBroadcastUpload_Request::_internal_upload_ip_address() const {
  return upload_ip_address_;
}
inline uint32_t CBroadcast_StartBroadcastUpload_Request::upload_ip_address() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBroadcastUpload_Request.upload_ip_address)
  return _internal_upload_ip_address();
}
inline void CBroadcast_StartBroadcastUpload_Request::_internal_set_upload_ip_address(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  upload_ip_address_ = value;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_upload_ip_address(uint32_t value) {
  _internal_set_upload_ip_address(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StartBroadcastUpload_Request.upload_ip_address)
}

// optional bool is_replay = 7;
inline bool CBroadcast_StartBroadcastUpload_Request::_internal_has_is_replay() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CBroadcast_StartBroadcastUpload_Request::has_is_replay() const {
  return _internal_has_is_replay();
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_is_replay() {
  is_replay_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CBroadcast_StartBroadcastUpload_Request::_internal_is_replay() const {
  return is_replay_;
}
inline bool CBroadcast_StartBroadcastUpload_Request::is_replay() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBroadcastUpload_Request.is_replay)
  return _internal_is_replay();
}
inline void CBroadcast_StartBroadcastUpload_Request::_internal_set_is_replay(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_replay_ = value;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_is_replay(bool value) {
  _internal_set_is_replay(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StartBroadcastUpload_Request.is_replay)
}

// optional uint32 sysid = 8;
inline bool CBroadcast_StartBroadcastUpload_Request::_internal_has_sysid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CBroadcast_StartBroadcastUpload_Request::has_sysid() const {
  return _internal_has_sysid();
}
inline void CBroadcast_StartBroadcastUpload_Request::clear_sysid() {
  sysid_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CBroadcast_StartBroadcastUpload_Request::_internal_sysid() const {
  return sysid_;
}
inline uint32_t CBroadcast_StartBroadcastUpload_Request::sysid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBroadcastUpload_Request.sysid)
  return _internal_sysid();
}
inline void CBroadcast_StartBroadcastUpload_Request::_internal_set_sysid(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  sysid_ = value;
}
inline void CBroadcast_StartBroadcastUpload_Request::set_sysid(uint32_t value) {
  _internal_set_sysid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StartBroadcastUpload_Request.sysid)
}

// -------------------------------------------------------------------

// CBroadcast_StartBroadcastUpload_Response

// optional string upload_token = 1;
inline bool CBroadcast_StartBroadcastUpload_Response::_internal_has_upload_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_StartBroadcastUpload_Response::has_upload_token() const {
  return _internal_has_upload_token();
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_upload_token() {
  upload_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_StartBroadcastUpload_Response::upload_token() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBroadcastUpload_Response.upload_token)
  return _internal_upload_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_StartBroadcastUpload_Response::set_upload_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 upload_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_StartBroadcastUpload_Response.upload_token)
}
inline std::string* CBroadcast_StartBroadcastUpload_Response::mutable_upload_token() {
  std::string* _s = _internal_mutable_upload_token();
  // @@protoc_insertion_point(field_mutable:CBroadcast_StartBroadcastUpload_Response.upload_token)
  return _s;
}
inline const std::string& CBroadcast_StartBroadcastUpload_Response::_internal_upload_token() const {
  return upload_token_.Get();
}
inline void CBroadcast_StartBroadcastUpload_Response::_internal_set_upload_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  upload_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_StartBroadcastUpload_Response::_internal_mutable_upload_token() {
  _has_bits_[0] |= 0x00000001u;
  return upload_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_StartBroadcastUpload_Response::release_upload_token() {
  // @@protoc_insertion_point(field_release:CBroadcast_StartBroadcastUpload_Response.upload_token)
  if (!_internal_has_upload_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = upload_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (upload_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_StartBroadcastUpload_Response::set_allocated_upload_token(std::string* upload_token) {
  if (upload_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  upload_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), upload_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (upload_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_StartBroadcastUpload_Response.upload_token)
}

// optional string upload_address = 2;
inline bool CBroadcast_StartBroadcastUpload_Response::_internal_has_upload_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_StartBroadcastUpload_Response::has_upload_address() const {
  return _internal_has_upload_address();
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_upload_address() {
  upload_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBroadcast_StartBroadcastUpload_Response::upload_address() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBroadcastUpload_Response.upload_address)
  return _internal_upload_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_StartBroadcastUpload_Response::set_upload_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 upload_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_StartBroadcastUpload_Response.upload_address)
}
inline std::string* CBroadcast_StartBroadcastUpload_Response::mutable_upload_address() {
  std::string* _s = _internal_mutable_upload_address();
  // @@protoc_insertion_point(field_mutable:CBroadcast_StartBroadcastUpload_Response.upload_address)
  return _s;
}
inline const std::string& CBroadcast_StartBroadcastUpload_Response::_internal_upload_address() const {
  return upload_address_.Get();
}
inline void CBroadcast_StartBroadcastUpload_Response::_internal_set_upload_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  upload_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_StartBroadcastUpload_Response::_internal_mutable_upload_address() {
  _has_bits_[0] |= 0x00000002u;
  return upload_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_StartBroadcastUpload_Response::release_upload_address() {
  // @@protoc_insertion_point(field_release:CBroadcast_StartBroadcastUpload_Response.upload_address)
  if (!_internal_has_upload_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = upload_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (upload_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    upload_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_StartBroadcastUpload_Response::set_allocated_upload_address(std::string* upload_address) {
  if (upload_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  upload_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), upload_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (upload_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    upload_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_StartBroadcastUpload_Response.upload_address)
}

// optional fixed64 broadcast_upload_id = 3;
inline bool CBroadcast_StartBroadcastUpload_Response::_internal_has_broadcast_upload_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_StartBroadcastUpload_Response::has_broadcast_upload_id() const {
  return _internal_has_broadcast_upload_id();
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_broadcast_upload_id() {
  broadcast_upload_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CBroadcast_StartBroadcastUpload_Response::_internal_broadcast_upload_id() const {
  return broadcast_upload_id_;
}
inline uint64_t CBroadcast_StartBroadcastUpload_Response::broadcast_upload_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBroadcastUpload_Response.broadcast_upload_id)
  return _internal_broadcast_upload_id();
}
inline void CBroadcast_StartBroadcastUpload_Response::_internal_set_broadcast_upload_id(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  broadcast_upload_id_ = value;
}
inline void CBroadcast_StartBroadcastUpload_Response::set_broadcast_upload_id(uint64_t value) {
  _internal_set_broadcast_upload_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StartBroadcastUpload_Response.broadcast_upload_id)
}

// optional bool enable_replay = 6;
inline bool CBroadcast_StartBroadcastUpload_Response::_internal_has_enable_replay() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_StartBroadcastUpload_Response::has_enable_replay() const {
  return _internal_has_enable_replay();
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_enable_replay() {
  enable_replay_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CBroadcast_StartBroadcastUpload_Response::_internal_enable_replay() const {
  return enable_replay_;
}
inline bool CBroadcast_StartBroadcastUpload_Response::enable_replay() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBroadcastUpload_Response.enable_replay)
  return _internal_enable_replay();
}
inline void CBroadcast_StartBroadcastUpload_Response::_internal_set_enable_replay(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_replay_ = value;
}
inline void CBroadcast_StartBroadcastUpload_Response::set_enable_replay(bool value) {
  _internal_set_enable_replay(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StartBroadcastUpload_Response.enable_replay)
}

// optional string http_address = 7;
inline bool CBroadcast_StartBroadcastUpload_Response::_internal_has_http_address() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_StartBroadcastUpload_Response::has_http_address() const {
  return _internal_has_http_address();
}
inline void CBroadcast_StartBroadcastUpload_Response::clear_http_address() {
  http_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CBroadcast_StartBroadcastUpload_Response::http_address() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBroadcastUpload_Response.http_address)
  return _internal_http_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_StartBroadcastUpload_Response::set_http_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 http_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_StartBroadcastUpload_Response.http_address)
}
inline std::string* CBroadcast_StartBroadcastUpload_Response::mutable_http_address() {
  std::string* _s = _internal_mutable_http_address();
  // @@protoc_insertion_point(field_mutable:CBroadcast_StartBroadcastUpload_Response.http_address)
  return _s;
}
inline const std::string& CBroadcast_StartBroadcastUpload_Response::_internal_http_address() const {
  return http_address_.Get();
}
inline void CBroadcast_StartBroadcastUpload_Response::_internal_set_http_address(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  http_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_StartBroadcastUpload_Response::_internal_mutable_http_address() {
  _has_bits_[0] |= 0x00000004u;
  return http_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_StartBroadcastUpload_Response::release_http_address() {
  // @@protoc_insertion_point(field_release:CBroadcast_StartBroadcastUpload_Response.http_address)
  if (!_internal_has_http_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = http_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (http_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    http_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_StartBroadcastUpload_Response::set_allocated_http_address(std::string* http_address) {
  if (http_address != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  http_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), http_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (http_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    http_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_StartBroadcastUpload_Response.http_address)
}

// -------------------------------------------------------------------

// CBroadcast_NotifyBroadcastUploadStop_Notification

// optional fixed64 broadcast_upload_id = 1;
inline bool CBroadcast_NotifyBroadcastUploadStop_Notification::_internal_has_broadcast_upload_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_NotifyBroadcastUploadStop_Notification::has_broadcast_upload_id() const {
  return _internal_has_broadcast_upload_id();
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::clear_broadcast_upload_id() {
  broadcast_upload_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_NotifyBroadcastUploadStop_Notification::_internal_broadcast_upload_id() const {
  return broadcast_upload_id_;
}
inline uint64_t CBroadcast_NotifyBroadcastUploadStop_Notification::broadcast_upload_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_NotifyBroadcastUploadStop_Notification.broadcast_upload_id)
  return _internal_broadcast_upload_id();
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::_internal_set_broadcast_upload_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_upload_id_ = value;
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::set_broadcast_upload_id(uint64_t value) {
  _internal_set_broadcast_upload_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_NotifyBroadcastUploadStop_Notification.broadcast_upload_id)
}

// optional uint32 upload_result = 2;
inline bool CBroadcast_NotifyBroadcastUploadStop_Notification::_internal_has_upload_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_NotifyBroadcastUploadStop_Notification::has_upload_result() const {
  return _internal_has_upload_result();
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::clear_upload_result() {
  upload_result_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CBroadcast_NotifyBroadcastUploadStop_Notification::_internal_upload_result() const {
  return upload_result_;
}
inline uint32_t CBroadcast_NotifyBroadcastUploadStop_Notification::upload_result() const {
  // @@protoc_insertion_point(field_get:CBroadcast_NotifyBroadcastUploadStop_Notification.upload_result)
  return _internal_upload_result();
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::_internal_set_upload_result(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  upload_result_ = value;
}
inline void CBroadcast_NotifyBroadcastUploadStop_Notification::set_upload_result(uint32_t value) {
  _internal_set_upload_result(value);
  // @@protoc_insertion_point(field_set:CBroadcast_NotifyBroadcastUploadStop_Notification.upload_result)
}

// -------------------------------------------------------------------

// CBroadcast_WatchBroadcast_Request

// optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
inline bool CBroadcast_WatchBroadcast_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CBroadcast_WatchBroadcast_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_WatchBroadcast_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CBroadcast_WatchBroadcast_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Request.steamid)
  return _internal_steamid();
}
inline void CBroadcast_WatchBroadcast_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CBroadcast_WatchBroadcast_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Request.steamid)
}

// optional fixed64 existing_broadcast_id = 2 [(.description) = "broadcast session ID (optional, rejoin if specified)."];
inline bool CBroadcast_WatchBroadcast_Request::_internal_has_existing_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Request::has_existing_broadcast_id() const {
  return _internal_has_existing_broadcast_id();
}
inline void CBroadcast_WatchBroadcast_Request::clear_existing_broadcast_id() {
  existing_broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_WatchBroadcast_Request::_internal_existing_broadcast_id() const {
  return existing_broadcast_id_;
}
inline uint64_t CBroadcast_WatchBroadcast_Request::existing_broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Request.existing_broadcast_id)
  return _internal_existing_broadcast_id();
}
inline void CBroadcast_WatchBroadcast_Request::_internal_set_existing_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  existing_broadcast_id_ = value;
}
inline void CBroadcast_WatchBroadcast_Request::set_existing_broadcast_id(uint64_t value) {
  _internal_set_existing_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Request.existing_broadcast_id)
}

// optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
inline bool CBroadcast_WatchBroadcast_Request::_internal_has_viewer_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Request::has_viewer_token() const {
  return _internal_has_viewer_token();
}
inline void CBroadcast_WatchBroadcast_Request::clear_viewer_token() {
  viewer_token_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_WatchBroadcast_Request::_internal_viewer_token() const {
  return viewer_token_;
}
inline uint64_t CBroadcast_WatchBroadcast_Request::viewer_token() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Request.viewer_token)
  return _internal_viewer_token();
}
inline void CBroadcast_WatchBroadcast_Request::_internal_set_viewer_token(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  viewer_token_ = value;
}
inline void CBroadcast_WatchBroadcast_Request::set_viewer_token(uint64_t value) {
  _internal_set_viewer_token(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Request.viewer_token)
}

// optional uint32 client_cell = 5;
inline bool CBroadcast_WatchBroadcast_Request::_internal_has_client_cell() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Request::has_client_cell() const {
  return _internal_has_client_cell();
}
inline void CBroadcast_WatchBroadcast_Request::clear_client_cell() {
  client_cell_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CBroadcast_WatchBroadcast_Request::_internal_client_cell() const {
  return client_cell_;
}
inline uint32_t CBroadcast_WatchBroadcast_Request::client_cell() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Request.client_cell)
  return _internal_client_cell();
}
inline void CBroadcast_WatchBroadcast_Request::_internal_set_client_cell(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  client_cell_ = value;
}
inline void CBroadcast_WatchBroadcast_Request::set_client_cell(uint32_t value) {
  _internal_set_client_cell(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Request.client_cell)
}

// optional .EBroadcastWatchLocation watch_location = 6 [default = k_EBroadcastWatchLocation_Invalid];
inline bool CBroadcast_WatchBroadcast_Request::_internal_has_watch_location() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Request::has_watch_location() const {
  return _internal_has_watch_location();
}
inline void CBroadcast_WatchBroadcast_Request::clear_watch_location() {
  watch_location_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::EBroadcastWatchLocation CBroadcast_WatchBroadcast_Request::_internal_watch_location() const {
  return static_cast< ::EBroadcastWatchLocation >(watch_location_);
}
inline ::EBroadcastWatchLocation CBroadcast_WatchBroadcast_Request::watch_location() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Request.watch_location)
  return _internal_watch_location();
}
inline void CBroadcast_WatchBroadcast_Request::_internal_set_watch_location(::EBroadcastWatchLocation value) {
  assert(::EBroadcastWatchLocation_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  watch_location_ = value;
}
inline void CBroadcast_WatchBroadcast_Request::set_watch_location(::EBroadcastWatchLocation value) {
  _internal_set_watch_location(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Request.watch_location)
}

// optional bool is_webrtc = 7;
inline bool CBroadcast_WatchBroadcast_Request::_internal_has_is_webrtc() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Request::has_is_webrtc() const {
  return _internal_has_is_webrtc();
}
inline void CBroadcast_WatchBroadcast_Request::clear_is_webrtc() {
  is_webrtc_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CBroadcast_WatchBroadcast_Request::_internal_is_webrtc() const {
  return is_webrtc_;
}
inline bool CBroadcast_WatchBroadcast_Request::is_webrtc() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Request.is_webrtc)
  return _internal_is_webrtc();
}
inline void CBroadcast_WatchBroadcast_Request::_internal_set_is_webrtc(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_webrtc_ = value;
}
inline void CBroadcast_WatchBroadcast_Request::set_is_webrtc(bool value) {
  _internal_set_is_webrtc(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Request.is_webrtc)
}

// -------------------------------------------------------------------

// CBroadcast_WatchBroadcast_Response

// optional .CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_response() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_response() const {
  return _internal_has_response();
}
inline void CBroadcast_WatchBroadcast_Response::clear_response() {
  response_ = 1;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::_internal_response() const {
  return static_cast< ::CBroadcast_WatchBroadcast_Response_EWatchResponse >(response_);
}
inline ::CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::response() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.response)
  return _internal_response();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_response(::CBroadcast_WatchBroadcast_Response_EWatchResponse value) {
  assert(::CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  response_ = value;
}
inline void CBroadcast_WatchBroadcast_Response::set_response(::CBroadcast_WatchBroadcast_Response_EWatchResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.response)
}

// optional string mpd_url = 2;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_mpd_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_mpd_url() const {
  return _internal_has_mpd_url();
}
inline void CBroadcast_WatchBroadcast_Response::clear_mpd_url() {
  mpd_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_WatchBroadcast_Response::mpd_url() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.mpd_url)
  return _internal_mpd_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_WatchBroadcast_Response::set_mpd_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 mpd_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.mpd_url)
}
inline std::string* CBroadcast_WatchBroadcast_Response::mutable_mpd_url() {
  std::string* _s = _internal_mutable_mpd_url();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WatchBroadcast_Response.mpd_url)
  return _s;
}
inline const std::string& CBroadcast_WatchBroadcast_Response::_internal_mpd_url() const {
  return mpd_url_.Get();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_mpd_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mpd_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_WatchBroadcast_Response::_internal_mutable_mpd_url() {
  _has_bits_[0] |= 0x00000001u;
  return mpd_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_WatchBroadcast_Response::release_mpd_url() {
  // @@protoc_insertion_point(field_release:CBroadcast_WatchBroadcast_Response.mpd_url)
  if (!_internal_has_mpd_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = mpd_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mpd_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mpd_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_mpd_url(std::string* mpd_url) {
  if (mpd_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mpd_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mpd_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mpd_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mpd_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WatchBroadcast_Response.mpd_url)
}

// optional fixed64 broadcast_id = 3;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CBroadcast_WatchBroadcast_Response::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CBroadcast_WatchBroadcast_Response::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CBroadcast_WatchBroadcast_Response::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.broadcast_id)
  return _internal_broadcast_id();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  broadcast_id_ = value;
}
inline void CBroadcast_WatchBroadcast_Response::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.broadcast_id)
}

// optional uint64 gameid = 4;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_gameid() const {
  return _internal_has_gameid();
}
inline void CBroadcast_WatchBroadcast_Response::clear_gameid() {
  gameid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CBroadcast_WatchBroadcast_Response::_internal_gameid() const {
  return gameid_;
}
inline uint64_t CBroadcast_WatchBroadcast_Response::gameid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.gameid)
  return _internal_gameid();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_gameid(uint64_t value) {
  _has_bits_[0] |= 0x00000100u;
  gameid_ = value;
}
inline void CBroadcast_WatchBroadcast_Response::set_gameid(uint64_t value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.gameid)
}

// optional string title = 5;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_title() const {
  return _internal_has_title();
}
inline void CBroadcast_WatchBroadcast_Response::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBroadcast_WatchBroadcast_Response::title() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_WatchBroadcast_Response::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.title)
}
inline std::string* CBroadcast_WatchBroadcast_Response::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WatchBroadcast_Response.title)
  return _s;
}
inline const std::string& CBroadcast_WatchBroadcast_Response::_internal_title() const {
  return title_.Get();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_WatchBroadcast_Response::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_WatchBroadcast_Response::release_title() {
  // @@protoc_insertion_point(field_release:CBroadcast_WatchBroadcast_Response.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WatchBroadcast_Response.title)
}

// optional uint32 num_viewers = 6;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_num_viewers() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_num_viewers() const {
  return _internal_has_num_viewers();
}
inline void CBroadcast_WatchBroadcast_Response::clear_num_viewers() {
  num_viewers_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CBroadcast_WatchBroadcast_Response::_internal_num_viewers() const {
  return num_viewers_;
}
inline uint32_t CBroadcast_WatchBroadcast_Response::num_viewers() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.num_viewers)
  return _internal_num_viewers();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_num_viewers(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  num_viewers_ = value;
}
inline void CBroadcast_WatchBroadcast_Response::set_num_viewers(uint32_t value) {
  _internal_set_num_viewers(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.num_viewers)
}

// optional int32 permission = 7;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_permission() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_permission() const {
  return _internal_has_permission();
}
inline void CBroadcast_WatchBroadcast_Response::clear_permission() {
  permission_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t CBroadcast_WatchBroadcast_Response::_internal_permission() const {
  return permission_;
}
inline int32_t CBroadcast_WatchBroadcast_Response::permission() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.permission)
  return _internal_permission();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_permission(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  permission_ = value;
}
inline void CBroadcast_WatchBroadcast_Response::set_permission(int32_t value) {
  _internal_set_permission(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.permission)
}

// optional bool is_rtmp = 8;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_is_rtmp() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_is_rtmp() const {
  return _internal_has_is_rtmp();
}
inline void CBroadcast_WatchBroadcast_Response::clear_is_rtmp() {
  is_rtmp_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CBroadcast_WatchBroadcast_Response::_internal_is_rtmp() const {
  return is_rtmp_;
}
inline bool CBroadcast_WatchBroadcast_Response::is_rtmp() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.is_rtmp)
  return _internal_is_rtmp();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_is_rtmp(bool value) {
  _has_bits_[0] |= 0x00004000u;
  is_rtmp_ = value;
}
inline void CBroadcast_WatchBroadcast_Response::set_is_rtmp(bool value) {
  _internal_set_is_rtmp(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.is_rtmp)
}

// optional int32 seconds_delay = 9;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_seconds_delay() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_seconds_delay() const {
  return _internal_has_seconds_delay();
}
inline void CBroadcast_WatchBroadcast_Response::clear_seconds_delay() {
  seconds_delay_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t CBroadcast_WatchBroadcast_Response::_internal_seconds_delay() const {
  return seconds_delay_;
}
inline int32_t CBroadcast_WatchBroadcast_Response::seconds_delay() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.seconds_delay)
  return _internal_seconds_delay();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_seconds_delay(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  seconds_delay_ = value;
}
inline void CBroadcast_WatchBroadcast_Response::set_seconds_delay(int32_t value) {
  _internal_set_seconds_delay(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.seconds_delay)
}

// optional fixed64 viewer_token = 10;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_viewer_token() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_viewer_token() const {
  return _internal_has_viewer_token();
}
inline void CBroadcast_WatchBroadcast_Response::clear_viewer_token() {
  viewer_token_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000800u;
}
inline uint64_t CBroadcast_WatchBroadcast_Response::_internal_viewer_token() const {
  return viewer_token_;
}
inline uint64_t CBroadcast_WatchBroadcast_Response::viewer_token() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.viewer_token)
  return _internal_viewer_token();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_viewer_token(uint64_t value) {
  _has_bits_[0] |= 0x00000800u;
  viewer_token_ = value;
}
inline void CBroadcast_WatchBroadcast_Response::set_viewer_token(uint64_t value) {
  _internal_set_viewer_token(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.viewer_token)
}

// optional string hls_m3u8_master_url = 11;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_hls_m3u8_master_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_hls_m3u8_master_url() const {
  return _internal_has_hls_m3u8_master_url();
}
inline void CBroadcast_WatchBroadcast_Response::clear_hls_m3u8_master_url() {
  hls_m3u8_master_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CBroadcast_WatchBroadcast_Response::hls_m3u8_master_url() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
  return _internal_hls_m3u8_master_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_WatchBroadcast_Response::set_hls_m3u8_master_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 hls_m3u8_master_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}
inline std::string* CBroadcast_WatchBroadcast_Response::mutable_hls_m3u8_master_url() {
  std::string* _s = _internal_mutable_hls_m3u8_master_url();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
  return _s;
}
inline const std::string& CBroadcast_WatchBroadcast_Response::_internal_hls_m3u8_master_url() const {
  return hls_m3u8_master_url_.Get();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_hls_m3u8_master_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  hls_m3u8_master_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_WatchBroadcast_Response::_internal_mutable_hls_m3u8_master_url() {
  _has_bits_[0] |= 0x00000004u;
  return hls_m3u8_master_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_WatchBroadcast_Response::release_hls_m3u8_master_url() {
  // @@protoc_insertion_point(field_release:CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
  if (!_internal_has_hls_m3u8_master_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = hls_m3u8_master_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hls_m3u8_master_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hls_m3u8_master_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_hls_m3u8_master_url(std::string* hls_m3u8_master_url) {
  if (hls_m3u8_master_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  hls_m3u8_master_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hls_m3u8_master_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hls_m3u8_master_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hls_m3u8_master_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}

// optional int32 heartbeat_interval = 12;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_heartbeat_interval() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_heartbeat_interval() const {
  return _internal_has_heartbeat_interval();
}
inline void CBroadcast_WatchBroadcast_Response::clear_heartbeat_interval() {
  heartbeat_interval_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline int32_t CBroadcast_WatchBroadcast_Response::_internal_heartbeat_interval() const {
  return heartbeat_interval_;
}
inline int32_t CBroadcast_WatchBroadcast_Response::heartbeat_interval() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.heartbeat_interval)
  return _internal_heartbeat_interval();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_heartbeat_interval(int32_t value) {
  _has_bits_[0] |= 0x00002000u;
  heartbeat_interval_ = value;
}
inline void CBroadcast_WatchBroadcast_Response::set_heartbeat_interval(int32_t value) {
  _internal_set_heartbeat_interval(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.heartbeat_interval)
}

// optional string thumbnail_url = 13;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_thumbnail_url() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_thumbnail_url() const {
  return _internal_has_thumbnail_url();
}
inline void CBroadcast_WatchBroadcast_Response::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CBroadcast_WatchBroadcast_Response::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.thumbnail_url)
  return _internal_thumbnail_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_WatchBroadcast_Response::set_thumbnail_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.thumbnail_url)
}
inline std::string* CBroadcast_WatchBroadcast_Response::mutable_thumbnail_url() {
  std::string* _s = _internal_mutable_thumbnail_url();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WatchBroadcast_Response.thumbnail_url)
  return _s;
}
inline const std::string& CBroadcast_WatchBroadcast_Response::_internal_thumbnail_url() const {
  return thumbnail_url_.Get();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_thumbnail_url(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_WatchBroadcast_Response::_internal_mutable_thumbnail_url() {
  _has_bits_[0] |= 0x00000008u;
  return thumbnail_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_WatchBroadcast_Response::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:CBroadcast_WatchBroadcast_Response.thumbnail_url)
  if (!_internal_has_thumbnail_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = thumbnail_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_thumbnail_url(std::string* thumbnail_url) {
  if (thumbnail_url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  thumbnail_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnail_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WatchBroadcast_Response.thumbnail_url)
}

// optional bool is_webrtc = 14;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_is_webrtc() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_is_webrtc() const {
  return _internal_has_is_webrtc();
}
inline void CBroadcast_WatchBroadcast_Response::clear_is_webrtc() {
  is_webrtc_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CBroadcast_WatchBroadcast_Response::_internal_is_webrtc() const {
  return is_webrtc_;
}
inline bool CBroadcast_WatchBroadcast_Response::is_webrtc() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.is_webrtc)
  return _internal_is_webrtc();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_is_webrtc(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_webrtc_ = value;
}
inline void CBroadcast_WatchBroadcast_Response::set_is_webrtc(bool value) {
  _internal_set_is_webrtc(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.is_webrtc)
}

// optional fixed64 webrtc_session_id = 15;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_webrtc_session_id() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_webrtc_session_id() const {
  return _internal_has_webrtc_session_id();
}
inline void CBroadcast_WatchBroadcast_Response::clear_webrtc_session_id() {
  webrtc_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00040000u;
}
inline uint64_t CBroadcast_WatchBroadcast_Response::_internal_webrtc_session_id() const {
  return webrtc_session_id_;
}
inline uint64_t CBroadcast_WatchBroadcast_Response::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.webrtc_session_id)
  return _internal_webrtc_session_id();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_webrtc_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00040000u;
  webrtc_session_id_ = value;
}
inline void CBroadcast_WatchBroadcast_Response::set_webrtc_session_id(uint64_t value) {
  _internal_set_webrtc_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.webrtc_session_id)
}

// optional string webrtc_offer_sdp = 16;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_webrtc_offer_sdp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_webrtc_offer_sdp() const {
  return _internal_has_webrtc_offer_sdp();
}
inline void CBroadcast_WatchBroadcast_Response::clear_webrtc_offer_sdp() {
  webrtc_offer_sdp_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CBroadcast_WatchBroadcast_Response::webrtc_offer_sdp() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp)
  return _internal_webrtc_offer_sdp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_WatchBroadcast_Response::set_webrtc_offer_sdp(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 webrtc_offer_sdp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp)
}
inline std::string* CBroadcast_WatchBroadcast_Response::mutable_webrtc_offer_sdp() {
  std::string* _s = _internal_mutable_webrtc_offer_sdp();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp)
  return _s;
}
inline const std::string& CBroadcast_WatchBroadcast_Response::_internal_webrtc_offer_sdp() const {
  return webrtc_offer_sdp_.Get();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_webrtc_offer_sdp(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  webrtc_offer_sdp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_WatchBroadcast_Response::_internal_mutable_webrtc_offer_sdp() {
  _has_bits_[0] |= 0x00000010u;
  return webrtc_offer_sdp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_WatchBroadcast_Response::release_webrtc_offer_sdp() {
  // @@protoc_insertion_point(field_release:CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp)
  if (!_internal_has_webrtc_offer_sdp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = webrtc_offer_sdp_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (webrtc_offer_sdp_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    webrtc_offer_sdp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_webrtc_offer_sdp(std::string* webrtc_offer_sdp) {
  if (webrtc_offer_sdp != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  webrtc_offer_sdp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), webrtc_offer_sdp,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (webrtc_offer_sdp_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    webrtc_offer_sdp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WatchBroadcast_Response.webrtc_offer_sdp)
}

// optional string webrtc_turn_server = 17;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_webrtc_turn_server() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_webrtc_turn_server() const {
  return _internal_has_webrtc_turn_server();
}
inline void CBroadcast_WatchBroadcast_Response::clear_webrtc_turn_server() {
  webrtc_turn_server_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CBroadcast_WatchBroadcast_Response::webrtc_turn_server() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.webrtc_turn_server)
  return _internal_webrtc_turn_server();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_WatchBroadcast_Response::set_webrtc_turn_server(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 webrtc_turn_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.webrtc_turn_server)
}
inline std::string* CBroadcast_WatchBroadcast_Response::mutable_webrtc_turn_server() {
  std::string* _s = _internal_mutable_webrtc_turn_server();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WatchBroadcast_Response.webrtc_turn_server)
  return _s;
}
inline const std::string& CBroadcast_WatchBroadcast_Response::_internal_webrtc_turn_server() const {
  return webrtc_turn_server_.Get();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_webrtc_turn_server(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  webrtc_turn_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_WatchBroadcast_Response::_internal_mutable_webrtc_turn_server() {
  _has_bits_[0] |= 0x00000020u;
  return webrtc_turn_server_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_WatchBroadcast_Response::release_webrtc_turn_server() {
  // @@protoc_insertion_point(field_release:CBroadcast_WatchBroadcast_Response.webrtc_turn_server)
  if (!_internal_has_webrtc_turn_server()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = webrtc_turn_server_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (webrtc_turn_server_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    webrtc_turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_webrtc_turn_server(std::string* webrtc_turn_server) {
  if (webrtc_turn_server != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  webrtc_turn_server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), webrtc_turn_server,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (webrtc_turn_server_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    webrtc_turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WatchBroadcast_Response.webrtc_turn_server)
}

// optional bool is_replay = 18;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_is_replay() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_is_replay() const {
  return _internal_has_is_replay();
}
inline void CBroadcast_WatchBroadcast_Response::clear_is_replay() {
  is_replay_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CBroadcast_WatchBroadcast_Response::_internal_is_replay() const {
  return is_replay_;
}
inline bool CBroadcast_WatchBroadcast_Response::is_replay() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.is_replay)
  return _internal_is_replay();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_is_replay(bool value) {
  _has_bits_[0] |= 0x00010000u;
  is_replay_ = value;
}
inline void CBroadcast_WatchBroadcast_Response::set_is_replay(bool value) {
  _internal_set_is_replay(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.is_replay)
}

// optional int32 duration = 19;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_duration() const {
  return _internal_has_duration();
}
inline void CBroadcast_WatchBroadcast_Response::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline int32_t CBroadcast_WatchBroadcast_Response::_internal_duration() const {
  return duration_;
}
inline int32_t CBroadcast_WatchBroadcast_Response::duration() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.duration)
  return _internal_duration();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_duration(int32_t value) {
  _has_bits_[0] |= 0x00020000u;
  duration_ = value;
}
inline void CBroadcast_WatchBroadcast_Response::set_duration(int32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.duration)
}

// optional string cdn_auth_url_parameters = 20;
inline bool CBroadcast_WatchBroadcast_Response::_internal_has_cdn_auth_url_parameters() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CBroadcast_WatchBroadcast_Response::has_cdn_auth_url_parameters() const {
  return _internal_has_cdn_auth_url_parameters();
}
inline void CBroadcast_WatchBroadcast_Response::clear_cdn_auth_url_parameters() {
  cdn_auth_url_parameters_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CBroadcast_WatchBroadcast_Response::cdn_auth_url_parameters() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WatchBroadcast_Response.cdn_auth_url_parameters)
  return _internal_cdn_auth_url_parameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_WatchBroadcast_Response::set_cdn_auth_url_parameters(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 cdn_auth_url_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_WatchBroadcast_Response.cdn_auth_url_parameters)
}
inline std::string* CBroadcast_WatchBroadcast_Response::mutable_cdn_auth_url_parameters() {
  std::string* _s = _internal_mutable_cdn_auth_url_parameters();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WatchBroadcast_Response.cdn_auth_url_parameters)
  return _s;
}
inline const std::string& CBroadcast_WatchBroadcast_Response::_internal_cdn_auth_url_parameters() const {
  return cdn_auth_url_parameters_.Get();
}
inline void CBroadcast_WatchBroadcast_Response::_internal_set_cdn_auth_url_parameters(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  cdn_auth_url_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_WatchBroadcast_Response::_internal_mutable_cdn_auth_url_parameters() {
  _has_bits_[0] |= 0x00000040u;
  return cdn_auth_url_parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_WatchBroadcast_Response::release_cdn_auth_url_parameters() {
  // @@protoc_insertion_point(field_release:CBroadcast_WatchBroadcast_Response.cdn_auth_url_parameters)
  if (!_internal_has_cdn_auth_url_parameters()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = cdn_auth_url_parameters_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cdn_auth_url_parameters_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cdn_auth_url_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_WatchBroadcast_Response::set_allocated_cdn_auth_url_parameters(std::string* cdn_auth_url_parameters) {
  if (cdn_auth_url_parameters != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  cdn_auth_url_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cdn_auth_url_parameters,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cdn_auth_url_parameters_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cdn_auth_url_parameters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WatchBroadcast_Response.cdn_auth_url_parameters)
}

// -------------------------------------------------------------------

// CBroadcast_HeartbeatBroadcast_Notification

// optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
inline bool CBroadcast_HeartbeatBroadcast_Notification::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_HeartbeatBroadcast_Notification::has_steamid() const {
  return _internal_has_steamid();
}
inline void CBroadcast_HeartbeatBroadcast_Notification::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_HeartbeatBroadcast_Notification::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CBroadcast_HeartbeatBroadcast_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_HeartbeatBroadcast_Notification.steamid)
  return _internal_steamid();
}
inline void CBroadcast_HeartbeatBroadcast_Notification::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CBroadcast_HeartbeatBroadcast_Notification::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_HeartbeatBroadcast_Notification.steamid)
}

// optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
inline bool CBroadcast_HeartbeatBroadcast_Notification::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_HeartbeatBroadcast_Notification::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CBroadcast_HeartbeatBroadcast_Notification::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_HeartbeatBroadcast_Notification::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CBroadcast_HeartbeatBroadcast_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_HeartbeatBroadcast_Notification.broadcast_id)
  return _internal_broadcast_id();
}
inline void CBroadcast_HeartbeatBroadcast_Notification::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_id_ = value;
}
inline void CBroadcast_HeartbeatBroadcast_Notification::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_HeartbeatBroadcast_Notification.broadcast_id)
}

// optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
inline bool CBroadcast_HeartbeatBroadcast_Notification::_internal_has_viewer_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_HeartbeatBroadcast_Notification::has_viewer_token() const {
  return _internal_has_viewer_token();
}
inline void CBroadcast_HeartbeatBroadcast_Notification::clear_viewer_token() {
  viewer_token_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_HeartbeatBroadcast_Notification::_internal_viewer_token() const {
  return viewer_token_;
}
inline uint64_t CBroadcast_HeartbeatBroadcast_Notification::viewer_token() const {
  // @@protoc_insertion_point(field_get:CBroadcast_HeartbeatBroadcast_Notification.viewer_token)
  return _internal_viewer_token();
}
inline void CBroadcast_HeartbeatBroadcast_Notification::_internal_set_viewer_token(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  viewer_token_ = value;
}
inline void CBroadcast_HeartbeatBroadcast_Notification::set_viewer_token(uint64_t value) {
  _internal_set_viewer_token(value);
  // @@protoc_insertion_point(field_set:CBroadcast_HeartbeatBroadcast_Notification.viewer_token)
}

// optional uint32 representation = 4 [(.description) = "video stream representation watching"];
inline bool CBroadcast_HeartbeatBroadcast_Notification::_internal_has_representation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_HeartbeatBroadcast_Notification::has_representation() const {
  return _internal_has_representation();
}
inline void CBroadcast_HeartbeatBroadcast_Notification::clear_representation() {
  representation_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CBroadcast_HeartbeatBroadcast_Notification::_internal_representation() const {
  return representation_;
}
inline uint32_t CBroadcast_HeartbeatBroadcast_Notification::representation() const {
  // @@protoc_insertion_point(field_get:CBroadcast_HeartbeatBroadcast_Notification.representation)
  return _internal_representation();
}
inline void CBroadcast_HeartbeatBroadcast_Notification::_internal_set_representation(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  representation_ = value;
}
inline void CBroadcast_HeartbeatBroadcast_Notification::set_representation(uint32_t value) {
  _internal_set_representation(value);
  // @@protoc_insertion_point(field_set:CBroadcast_HeartbeatBroadcast_Notification.representation)
}

// -------------------------------------------------------------------

// CBroadcast_StopWatchingBroadcast_Notification

// optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
inline bool CBroadcast_StopWatchingBroadcast_Notification::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_StopWatchingBroadcast_Notification::has_steamid() const {
  return _internal_has_steamid();
}
inline void CBroadcast_StopWatchingBroadcast_Notification::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_StopWatchingBroadcast_Notification::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CBroadcast_StopWatchingBroadcast_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StopWatchingBroadcast_Notification.steamid)
  return _internal_steamid();
}
inline void CBroadcast_StopWatchingBroadcast_Notification::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CBroadcast_StopWatchingBroadcast_Notification::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StopWatchingBroadcast_Notification.steamid)
}

// optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID."];
inline bool CBroadcast_StopWatchingBroadcast_Notification::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_StopWatchingBroadcast_Notification::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CBroadcast_StopWatchingBroadcast_Notification::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_StopWatchingBroadcast_Notification::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CBroadcast_StopWatchingBroadcast_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StopWatchingBroadcast_Notification.broadcast_id)
  return _internal_broadcast_id();
}
inline void CBroadcast_StopWatchingBroadcast_Notification::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_id_ = value;
}
inline void CBroadcast_StopWatchingBroadcast_Notification::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StopWatchingBroadcast_Notification.broadcast_id)
}

// optional fixed64 viewer_token = 3 [(.description) = "viewer token received from last WatchRequest call, from browser storage."];
inline bool CBroadcast_StopWatchingBroadcast_Notification::_internal_has_viewer_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_StopWatchingBroadcast_Notification::has_viewer_token() const {
  return _internal_has_viewer_token();
}
inline void CBroadcast_StopWatchingBroadcast_Notification::clear_viewer_token() {
  viewer_token_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_StopWatchingBroadcast_Notification::_internal_viewer_token() const {
  return viewer_token_;
}
inline uint64_t CBroadcast_StopWatchingBroadcast_Notification::viewer_token() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StopWatchingBroadcast_Notification.viewer_token)
  return _internal_viewer_token();
}
inline void CBroadcast_StopWatchingBroadcast_Notification::_internal_set_viewer_token(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  viewer_token_ = value;
}
inline void CBroadcast_StopWatchingBroadcast_Notification::set_viewer_token(uint64_t value) {
  _internal_set_viewer_token(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StopWatchingBroadcast_Notification.viewer_token)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastStatus_Request

// optional fixed64 steamid = 1 [(.description) = "broadcaster steamID."];
inline bool CBroadcast_GetBroadcastStatus_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CBroadcast_GetBroadcastStatus_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_GetBroadcastStatus_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CBroadcast_GetBroadcastStatus_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Request.steamid)
  return _internal_steamid();
}
inline void CBroadcast_GetBroadcastStatus_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CBroadcast_GetBroadcastStatus_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Request.steamid)
}

// optional fixed64 broadcast_id = 2 [(.description) = "broadcast session ID to proof that user is allowed to see details."];
inline bool CBroadcast_GetBroadcastStatus_Request::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Request::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CBroadcast_GetBroadcastStatus_Request::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_GetBroadcastStatus_Request::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CBroadcast_GetBroadcastStatus_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Request.broadcast_id)
  return _internal_broadcast_id();
}
inline void CBroadcast_GetBroadcastStatus_Request::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_id_ = value;
}
inline void CBroadcast_GetBroadcastStatus_Request::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Request.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastStatus_Response

// optional uint64 gameid = 1;
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Response::has_gameid() const {
  return _internal_has_gameid();
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_gameid() {
  gameid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_GetBroadcastStatus_Response::_internal_gameid() const {
  return gameid_;
}
inline uint64_t CBroadcast_GetBroadcastStatus_Response::gameid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Response.gameid)
  return _internal_gameid();
}
inline void CBroadcast_GetBroadcastStatus_Response::_internal_set_gameid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  gameid_ = value;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_gameid(uint64_t value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Response.gameid)
}

// optional string title = 2;
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Response::has_title() const {
  return _internal_has_title();
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_GetBroadcastStatus_Response::title() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Response.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_GetBroadcastStatus_Response::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Response.title)
}
inline std::string* CBroadcast_GetBroadcastStatus_Response::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetBroadcastStatus_Response.title)
  return _s;
}
inline const std::string& CBroadcast_GetBroadcastStatus_Response::_internal_title() const {
  return title_.Get();
}
inline void CBroadcast_GetBroadcastStatus_Response::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastStatus_Response::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastStatus_Response::release_title() {
  // @@protoc_insertion_point(field_release:CBroadcast_GetBroadcastStatus_Response.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_GetBroadcastStatus_Response.title)
}

// optional uint32 num_viewers = 3;
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_has_num_viewers() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Response::has_num_viewers() const {
  return _internal_has_num_viewers();
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_num_viewers() {
  num_viewers_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CBroadcast_GetBroadcastStatus_Response::_internal_num_viewers() const {
  return num_viewers_;
}
inline uint32_t CBroadcast_GetBroadcastStatus_Response::num_viewers() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Response.num_viewers)
  return _internal_num_viewers();
}
inline void CBroadcast_GetBroadcastStatus_Response::_internal_set_num_viewers(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  num_viewers_ = value;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_num_viewers(uint32_t value) {
  _internal_set_num_viewers(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Response.num_viewers)
}

// optional int32 permission = 4;
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_has_permission() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Response::has_permission() const {
  return _internal_has_permission();
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_permission() {
  permission_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CBroadcast_GetBroadcastStatus_Response::_internal_permission() const {
  return permission_;
}
inline int32_t CBroadcast_GetBroadcastStatus_Response::permission() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Response.permission)
  return _internal_permission();
}
inline void CBroadcast_GetBroadcastStatus_Response::_internal_set_permission(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  permission_ = value;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_permission(int32_t value) {
  _internal_set_permission(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Response.permission)
}

// optional bool is_rtmp = 5;
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_has_is_rtmp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Response::has_is_rtmp() const {
  return _internal_has_is_rtmp();
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_is_rtmp() {
  is_rtmp_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_is_rtmp() const {
  return is_rtmp_;
}
inline bool CBroadcast_GetBroadcastStatus_Response::is_rtmp() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Response.is_rtmp)
  return _internal_is_rtmp();
}
inline void CBroadcast_GetBroadcastStatus_Response::_internal_set_is_rtmp(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_rtmp_ = value;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_is_rtmp(bool value) {
  _internal_set_is_rtmp(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Response.is_rtmp)
}

// optional int32 seconds_delay = 6;
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_has_seconds_delay() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Response::has_seconds_delay() const {
  return _internal_has_seconds_delay();
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_seconds_delay() {
  seconds_delay_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CBroadcast_GetBroadcastStatus_Response::_internal_seconds_delay() const {
  return seconds_delay_;
}
inline int32_t CBroadcast_GetBroadcastStatus_Response::seconds_delay() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Response.seconds_delay)
  return _internal_seconds_delay();
}
inline void CBroadcast_GetBroadcastStatus_Response::_internal_set_seconds_delay(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  seconds_delay_ = value;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_seconds_delay(int32_t value) {
  _internal_set_seconds_delay(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Response.seconds_delay)
}

// optional bool is_publisher = 7;
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_has_is_publisher() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Response::has_is_publisher() const {
  return _internal_has_is_publisher();
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_is_publisher() {
  is_publisher_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_is_publisher() const {
  return is_publisher_;
}
inline bool CBroadcast_GetBroadcastStatus_Response::is_publisher() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Response.is_publisher)
  return _internal_is_publisher();
}
inline void CBroadcast_GetBroadcastStatus_Response::_internal_set_is_publisher(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_publisher_ = value;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_is_publisher(bool value) {
  _internal_set_is_publisher(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Response.is_publisher)
}

// optional string thumbnail_url = 8;
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_has_thumbnail_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Response::has_thumbnail_url() const {
  return _internal_has_thumbnail_url();
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBroadcast_GetBroadcastStatus_Response::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Response.thumbnail_url)
  return _internal_thumbnail_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_GetBroadcastStatus_Response::set_thumbnail_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Response.thumbnail_url)
}
inline std::string* CBroadcast_GetBroadcastStatus_Response::mutable_thumbnail_url() {
  std::string* _s = _internal_mutable_thumbnail_url();
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetBroadcastStatus_Response.thumbnail_url)
  return _s;
}
inline const std::string& CBroadcast_GetBroadcastStatus_Response::_internal_thumbnail_url() const {
  return thumbnail_url_.Get();
}
inline void CBroadcast_GetBroadcastStatus_Response::_internal_set_thumbnail_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastStatus_Response::_internal_mutable_thumbnail_url() {
  _has_bits_[0] |= 0x00000002u;
  return thumbnail_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastStatus_Response::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:CBroadcast_GetBroadcastStatus_Response.thumbnail_url)
  if (!_internal_has_thumbnail_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = thumbnail_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_allocated_thumbnail_url(std::string* thumbnail_url) {
  if (thumbnail_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  thumbnail_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnail_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_GetBroadcastStatus_Response.thumbnail_url)
}

// optional int32 update_interval = 9;
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_has_update_interval() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Response::has_update_interval() const {
  return _internal_has_update_interval();
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_update_interval() {
  update_interval_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t CBroadcast_GetBroadcastStatus_Response::_internal_update_interval() const {
  return update_interval_;
}
inline int32_t CBroadcast_GetBroadcastStatus_Response::update_interval() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Response.update_interval)
  return _internal_update_interval();
}
inline void CBroadcast_GetBroadcastStatus_Response::_internal_set_update_interval(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  update_interval_ = value;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_update_interval(int32_t value) {
  _internal_set_update_interval(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Response.update_interval)
}

// optional bool is_uploading = 10;
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_has_is_uploading() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Response::has_is_uploading() const {
  return _internal_has_is_uploading();
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_is_uploading() {
  is_uploading_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_is_uploading() const {
  return is_uploading_;
}
inline bool CBroadcast_GetBroadcastStatus_Response::is_uploading() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Response.is_uploading)
  return _internal_is_uploading();
}
inline void CBroadcast_GetBroadcastStatus_Response::_internal_set_is_uploading(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_uploading_ = value;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_is_uploading(bool value) {
  _internal_set_is_uploading(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Response.is_uploading)
}

// optional uint32 duration = 11;
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Response::has_duration() const {
  return _internal_has_duration();
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CBroadcast_GetBroadcastStatus_Response::_internal_duration() const {
  return duration_;
}
inline uint32_t CBroadcast_GetBroadcastStatus_Response::duration() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Response.duration)
  return _internal_duration();
}
inline void CBroadcast_GetBroadcastStatus_Response::_internal_set_duration(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  duration_ = value;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Response.duration)
}

// optional bool is_replay = 12;
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_has_is_replay() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Response::has_is_replay() const {
  return _internal_has_is_replay();
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_is_replay() {
  is_replay_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_is_replay() const {
  return is_replay_;
}
inline bool CBroadcast_GetBroadcastStatus_Response::is_replay() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Response.is_replay)
  return _internal_is_replay();
}
inline void CBroadcast_GetBroadcastStatus_Response::_internal_set_is_replay(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_replay_ = value;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_is_replay(bool value) {
  _internal_set_is_replay(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Response.is_replay)
}

// optional bool is_capturing_vod = 13;
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_has_is_capturing_vod() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Response::has_is_capturing_vod() const {
  return _internal_has_is_capturing_vod();
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_is_capturing_vod() {
  is_capturing_vod_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_is_capturing_vod() const {
  return is_capturing_vod_;
}
inline bool CBroadcast_GetBroadcastStatus_Response::is_capturing_vod() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Response.is_capturing_vod)
  return _internal_is_capturing_vod();
}
inline void CBroadcast_GetBroadcastStatus_Response::_internal_set_is_capturing_vod(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_capturing_vod_ = value;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_is_capturing_vod(bool value) {
  _internal_set_is_capturing_vod(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Response.is_capturing_vod)
}

// optional bool is_store_whitelisted = 14;
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_has_is_store_whitelisted() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastStatus_Response::has_is_store_whitelisted() const {
  return _internal_has_is_store_whitelisted();
}
inline void CBroadcast_GetBroadcastStatus_Response::clear_is_store_whitelisted() {
  is_store_whitelisted_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CBroadcast_GetBroadcastStatus_Response::_internal_is_store_whitelisted() const {
  return is_store_whitelisted_;
}
inline bool CBroadcast_GetBroadcastStatus_Response::is_store_whitelisted() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastStatus_Response.is_store_whitelisted)
  return _internal_is_store_whitelisted();
}
inline void CBroadcast_GetBroadcastStatus_Response::_internal_set_is_store_whitelisted(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_store_whitelisted_ = value;
}
inline void CBroadcast_GetBroadcastStatus_Response::set_is_store_whitelisted(bool value) {
  _internal_set_is_store_whitelisted(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastStatus_Response.is_store_whitelisted)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastThumbnail_Request

// optional fixed64 steamid = 1;
inline bool CBroadcast_GetBroadcastThumbnail_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastThumbnail_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CBroadcast_GetBroadcastThumbnail_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_GetBroadcastThumbnail_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CBroadcast_GetBroadcastThumbnail_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastThumbnail_Request.steamid)
  return _internal_steamid();
}
inline void CBroadcast_GetBroadcastThumbnail_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CBroadcast_GetBroadcastThumbnail_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastThumbnail_Request.steamid)
}

// optional fixed64 broadcast_id = 2;
inline bool CBroadcast_GetBroadcastThumbnail_Request::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastThumbnail_Request::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CBroadcast_GetBroadcastThumbnail_Request::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_GetBroadcastThumbnail_Request::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CBroadcast_GetBroadcastThumbnail_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastThumbnail_Request.broadcast_id)
  return _internal_broadcast_id();
}
inline void CBroadcast_GetBroadcastThumbnail_Request::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_id_ = value;
}
inline void CBroadcast_GetBroadcastThumbnail_Request::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastThumbnail_Request.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastThumbnail_Response

// optional string thumbnail_url = 1;
inline bool CBroadcast_GetBroadcastThumbnail_Response::_internal_has_thumbnail_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastThumbnail_Response::has_thumbnail_url() const {
  return _internal_has_thumbnail_url();
}
inline void CBroadcast_GetBroadcastThumbnail_Response::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_GetBroadcastThumbnail_Response::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url)
  return _internal_thumbnail_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_GetBroadcastThumbnail_Response::set_thumbnail_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url)
}
inline std::string* CBroadcast_GetBroadcastThumbnail_Response::mutable_thumbnail_url() {
  std::string* _s = _internal_mutable_thumbnail_url();
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url)
  return _s;
}
inline const std::string& CBroadcast_GetBroadcastThumbnail_Response::_internal_thumbnail_url() const {
  return thumbnail_url_.Get();
}
inline void CBroadcast_GetBroadcastThumbnail_Response::_internal_set_thumbnail_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  thumbnail_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastThumbnail_Response::_internal_mutable_thumbnail_url() {
  _has_bits_[0] |= 0x00000001u;
  return thumbnail_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastThumbnail_Response::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url)
  if (!_internal_has_thumbnail_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = thumbnail_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_GetBroadcastThumbnail_Response::set_allocated_thumbnail_url(std::string* thumbnail_url) {
  if (thumbnail_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  thumbnail_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnail_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_GetBroadcastThumbnail_Response.thumbnail_url)
}

// optional int32 update_interval = 2;
inline bool CBroadcast_GetBroadcastThumbnail_Response::_internal_has_update_interval() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastThumbnail_Response::has_update_interval() const {
  return _internal_has_update_interval();
}
inline void CBroadcast_GetBroadcastThumbnail_Response::clear_update_interval() {
  update_interval_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CBroadcast_GetBroadcastThumbnail_Response::_internal_update_interval() const {
  return update_interval_;
}
inline int32_t CBroadcast_GetBroadcastThumbnail_Response::update_interval() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastThumbnail_Response.update_interval)
  return _internal_update_interval();
}
inline void CBroadcast_GetBroadcastThumbnail_Response::_internal_set_update_interval(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  update_interval_ = value;
}
inline void CBroadcast_GetBroadcastThumbnail_Response::set_update_interval(int32_t value) {
  _internal_set_update_interval(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastThumbnail_Response.update_interval)
}

// optional int32 num_viewers = 3;
inline bool CBroadcast_GetBroadcastThumbnail_Response::_internal_has_num_viewers() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastThumbnail_Response::has_num_viewers() const {
  return _internal_has_num_viewers();
}
inline void CBroadcast_GetBroadcastThumbnail_Response::clear_num_viewers() {
  num_viewers_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CBroadcast_GetBroadcastThumbnail_Response::_internal_num_viewers() const {
  return num_viewers_;
}
inline int32_t CBroadcast_GetBroadcastThumbnail_Response::num_viewers() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastThumbnail_Response.num_viewers)
  return _internal_num_viewers();
}
inline void CBroadcast_GetBroadcastThumbnail_Response::_internal_set_num_viewers(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  num_viewers_ = value;
}
inline void CBroadcast_GetBroadcastThumbnail_Response::set_num_viewers(int32_t value) {
  _internal_set_num_viewers(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastThumbnail_Response.num_viewers)
}

// optional int32 duration = 4;
inline bool CBroadcast_GetBroadcastThumbnail_Response::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastThumbnail_Response::has_duration() const {
  return _internal_has_duration();
}
inline void CBroadcast_GetBroadcastThumbnail_Response::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CBroadcast_GetBroadcastThumbnail_Response::_internal_duration() const {
  return duration_;
}
inline int32_t CBroadcast_GetBroadcastThumbnail_Response::duration() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastThumbnail_Response.duration)
  return _internal_duration();
}
inline void CBroadcast_GetBroadcastThumbnail_Response::_internal_set_duration(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  duration_ = value;
}
inline void CBroadcast_GetBroadcastThumbnail_Response::set_duration(int32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastThumbnail_Response.duration)
}

// -------------------------------------------------------------------

// CBroadcast_InviteToBroadcast_Request

// optional fixed64 steamid = 1;
inline bool CBroadcast_InviteToBroadcast_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_InviteToBroadcast_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CBroadcast_InviteToBroadcast_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_InviteToBroadcast_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CBroadcast_InviteToBroadcast_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_InviteToBroadcast_Request.steamid)
  return _internal_steamid();
}
inline void CBroadcast_InviteToBroadcast_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CBroadcast_InviteToBroadcast_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_InviteToBroadcast_Request.steamid)
}

// optional bool approval_response = 2;
inline bool CBroadcast_InviteToBroadcast_Request::_internal_has_approval_response() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_InviteToBroadcast_Request::has_approval_response() const {
  return _internal_has_approval_response();
}
inline void CBroadcast_InviteToBroadcast_Request::clear_approval_response() {
  approval_response_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CBroadcast_InviteToBroadcast_Request::_internal_approval_response() const {
  return approval_response_;
}
inline bool CBroadcast_InviteToBroadcast_Request::approval_response() const {
  // @@protoc_insertion_point(field_get:CBroadcast_InviteToBroadcast_Request.approval_response)
  return _internal_approval_response();
}
inline void CBroadcast_InviteToBroadcast_Request::_internal_set_approval_response(bool value) {
  _has_bits_[0] |= 0x00000002u;
  approval_response_ = value;
}
inline void CBroadcast_InviteToBroadcast_Request::set_approval_response(bool value) {
  _internal_set_approval_response(value);
  // @@protoc_insertion_point(field_set:CBroadcast_InviteToBroadcast_Request.approval_response)
}

// -------------------------------------------------------------------

// CBroadcast_InviteToBroadcast_Response

// optional bool success = 1;
inline bool CBroadcast_InviteToBroadcast_Response::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_InviteToBroadcast_Response::has_success() const {
  return _internal_has_success();
}
inline void CBroadcast_InviteToBroadcast_Response::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CBroadcast_InviteToBroadcast_Response::_internal_success() const {
  return success_;
}
inline bool CBroadcast_InviteToBroadcast_Response::success() const {
  // @@protoc_insertion_point(field_get:CBroadcast_InviteToBroadcast_Response.success)
  return _internal_success();
}
inline void CBroadcast_InviteToBroadcast_Response::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000001u;
  success_ = value;
}
inline void CBroadcast_InviteToBroadcast_Response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:CBroadcast_InviteToBroadcast_Response.success)
}

// -------------------------------------------------------------------

// CBroadcast_SendBroadcastStateToServer_Request

// optional int32 permission = 1;
inline bool CBroadcast_SendBroadcastStateToServer_Request::_internal_has_permission() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_SendBroadcastStateToServer_Request::has_permission() const {
  return _internal_has_permission();
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_permission() {
  permission_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CBroadcast_SendBroadcastStateToServer_Request::_internal_permission() const {
  return permission_;
}
inline int32_t CBroadcast_SendBroadcastStateToServer_Request::permission() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SendBroadcastStateToServer_Request.permission)
  return _internal_permission();
}
inline void CBroadcast_SendBroadcastStateToServer_Request::_internal_set_permission(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  permission_ = value;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_permission(int32_t value) {
  _internal_set_permission(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SendBroadcastStateToServer_Request.permission)
}

// optional uint64 gameid = 2;
inline bool CBroadcast_SendBroadcastStateToServer_Request::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_SendBroadcastStateToServer_Request::has_gameid() const {
  return _internal_has_gameid();
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_gameid() {
  gameid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_SendBroadcastStateToServer_Request::_internal_gameid() const {
  return gameid_;
}
inline uint64_t CBroadcast_SendBroadcastStateToServer_Request::gameid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SendBroadcastStateToServer_Request.gameid)
  return _internal_gameid();
}
inline void CBroadcast_SendBroadcastStateToServer_Request::_internal_set_gameid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  gameid_ = value;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_gameid(uint64_t value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SendBroadcastStateToServer_Request.gameid)
}

// optional string title = 3;
inline bool CBroadcast_SendBroadcastStateToServer_Request::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_SendBroadcastStateToServer_Request::has_title() const {
  return _internal_has_title();
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_SendBroadcastStateToServer_Request::title() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SendBroadcastStateToServer_Request.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_SendBroadcastStateToServer_Request::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_SendBroadcastStateToServer_Request.title)
}
inline std::string* CBroadcast_SendBroadcastStateToServer_Request::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:CBroadcast_SendBroadcastStateToServer_Request.title)
  return _s;
}
inline const std::string& CBroadcast_SendBroadcastStateToServer_Request::_internal_title() const {
  return title_.Get();
}
inline void CBroadcast_SendBroadcastStateToServer_Request::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_SendBroadcastStateToServer_Request::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_SendBroadcastStateToServer_Request::release_title() {
  // @@protoc_insertion_point(field_release:CBroadcast_SendBroadcastStateToServer_Request.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_SendBroadcastStateToServer_Request.title)
}

// optional string game_data_config = 4;
inline bool CBroadcast_SendBroadcastStateToServer_Request::_internal_has_game_data_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_SendBroadcastStateToServer_Request::has_game_data_config() const {
  return _internal_has_game_data_config();
}
inline void CBroadcast_SendBroadcastStateToServer_Request::clear_game_data_config() {
  game_data_config_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBroadcast_SendBroadcastStateToServer_Request::game_data_config() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
  return _internal_game_data_config();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_SendBroadcastStateToServer_Request::set_game_data_config(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 game_data_config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}
inline std::string* CBroadcast_SendBroadcastStateToServer_Request::mutable_game_data_config() {
  std::string* _s = _internal_mutable_game_data_config();
  // @@protoc_insertion_point(field_mutable:CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
  return _s;
}
inline const std::string& CBroadcast_SendBroadcastStateToServer_Request::_internal_game_data_config() const {
  return game_data_config_.Get();
}
inline void CBroadcast_SendBroadcastStateToServer_Request::_internal_set_game_data_config(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  game_data_config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_SendBroadcastStateToServer_Request::_internal_mutable_game_data_config() {
  _has_bits_[0] |= 0x00000002u;
  return game_data_config_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_SendBroadcastStateToServer_Request::release_game_data_config() {
  // @@protoc_insertion_point(field_release:CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
  if (!_internal_has_game_data_config()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = game_data_config_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_data_config_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_data_config_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_SendBroadcastStateToServer_Request::set_allocated_game_data_config(std::string* game_data_config) {
  if (game_data_config != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_data_config_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_data_config,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_data_config_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_data_config_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}

// -------------------------------------------------------------------

// CBroadcast_SendBroadcastStateToServer_Response

// -------------------------------------------------------------------

// CBroadcast_NotifyBroadcastSessionHeartbeat_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification.broadcast_id)
  return _internal_broadcast_id();
}
inline void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_id_ = value;
}
inline void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_NotifyBroadcastSessionHeartbeat_Notification.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastChatInfo_Request

// optional fixed64 steamid = 1;
inline bool CBroadcast_GetBroadcastChatInfo_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastChatInfo_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_GetBroadcastChatInfo_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CBroadcast_GetBroadcastChatInfo_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastChatInfo_Request.steamid)
  return _internal_steamid();
}
inline void CBroadcast_GetBroadcastChatInfo_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastChatInfo_Request.steamid)
}

// optional fixed64 broadcast_id = 2;
inline bool CBroadcast_GetBroadcastChatInfo_Request::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastChatInfo_Request::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_GetBroadcastChatInfo_Request::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CBroadcast_GetBroadcastChatInfo_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastChatInfo_Request.broadcast_id)
  return _internal_broadcast_id();
}
inline void CBroadcast_GetBroadcastChatInfo_Request::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_id_ = value;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastChatInfo_Request.broadcast_id)
}

// optional uint32 client_ip = 3;
inline bool CBroadcast_GetBroadcastChatInfo_Request::_internal_has_client_ip() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastChatInfo_Request::has_client_ip() const {
  return _internal_has_client_ip();
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_client_ip() {
  client_ip_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CBroadcast_GetBroadcastChatInfo_Request::_internal_client_ip() const {
  return client_ip_;
}
inline uint32_t CBroadcast_GetBroadcastChatInfo_Request::client_ip() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastChatInfo_Request.client_ip)
  return _internal_client_ip();
}
inline void CBroadcast_GetBroadcastChatInfo_Request::_internal_set_client_ip(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  client_ip_ = value;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_client_ip(uint32_t value) {
  _internal_set_client_ip(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastChatInfo_Request.client_ip)
}

// optional uint32 client_cell = 4;
inline bool CBroadcast_GetBroadcastChatInfo_Request::_internal_has_client_cell() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastChatInfo_Request::has_client_cell() const {
  return _internal_has_client_cell();
}
inline void CBroadcast_GetBroadcastChatInfo_Request::clear_client_cell() {
  client_cell_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CBroadcast_GetBroadcastChatInfo_Request::_internal_client_cell() const {
  return client_cell_;
}
inline uint32_t CBroadcast_GetBroadcastChatInfo_Request::client_cell() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastChatInfo_Request.client_cell)
  return _internal_client_cell();
}
inline void CBroadcast_GetBroadcastChatInfo_Request::_internal_set_client_cell(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  client_cell_ = value;
}
inline void CBroadcast_GetBroadcastChatInfo_Request::set_client_cell(uint32_t value) {
  _internal_set_client_cell(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastChatInfo_Request.client_cell)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastChatInfo_Response

// optional fixed64 chat_id = 1;
inline bool CBroadcast_GetBroadcastChatInfo_Response::_internal_has_chat_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastChatInfo_Response::has_chat_id() const {
  return _internal_has_chat_id();
}
inline void CBroadcast_GetBroadcastChatInfo_Response::clear_chat_id() {
  chat_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_GetBroadcastChatInfo_Response::_internal_chat_id() const {
  return chat_id_;
}
inline uint64_t CBroadcast_GetBroadcastChatInfo_Response::chat_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastChatInfo_Response.chat_id)
  return _internal_chat_id();
}
inline void CBroadcast_GetBroadcastChatInfo_Response::_internal_set_chat_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  chat_id_ = value;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_chat_id(uint64_t value) {
  _internal_set_chat_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastChatInfo_Response.chat_id)
}

// optional string view_url_template = 3;
inline bool CBroadcast_GetBroadcastChatInfo_Response::_internal_has_view_url_template() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastChatInfo_Response::has_view_url_template() const {
  return _internal_has_view_url_template();
}
inline void CBroadcast_GetBroadcastChatInfo_Response::clear_view_url_template() {
  view_url_template_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_GetBroadcastChatInfo_Response::view_url_template() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
  return _internal_view_url_template();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_GetBroadcastChatInfo_Response::set_view_url_template(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 view_url_template_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}
inline std::string* CBroadcast_GetBroadcastChatInfo_Response::mutable_view_url_template() {
  std::string* _s = _internal_mutable_view_url_template();
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
  return _s;
}
inline const std::string& CBroadcast_GetBroadcastChatInfo_Response::_internal_view_url_template() const {
  return view_url_template_.Get();
}
inline void CBroadcast_GetBroadcastChatInfo_Response::_internal_set_view_url_template(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  view_url_template_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastChatInfo_Response::_internal_mutable_view_url_template() {
  _has_bits_[0] |= 0x00000001u;
  return view_url_template_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastChatInfo_Response::release_view_url_template() {
  // @@protoc_insertion_point(field_release:CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
  if (!_internal_has_view_url_template()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = view_url_template_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (view_url_template_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    view_url_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_allocated_view_url_template(std::string* view_url_template) {
  if (view_url_template != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  view_url_template_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), view_url_template,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (view_url_template_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    view_url_template_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}

// repeated uint32 flair_group_ids = 4;
inline int CBroadcast_GetBroadcastChatInfo_Response::_internal_flair_group_ids_size() const {
  return flair_group_ids_.size();
}
inline int CBroadcast_GetBroadcastChatInfo_Response::flair_group_ids_size() const {
  return _internal_flair_group_ids_size();
}
inline void CBroadcast_GetBroadcastChatInfo_Response::clear_flair_group_ids() {
  flair_group_ids_.Clear();
}
inline uint32_t CBroadcast_GetBroadcastChatInfo_Response::_internal_flair_group_ids(int index) const {
  return flair_group_ids_.Get(index);
}
inline uint32_t CBroadcast_GetBroadcastChatInfo_Response::flair_group_ids(int index) const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastChatInfo_Response.flair_group_ids)
  return _internal_flair_group_ids(index);
}
inline void CBroadcast_GetBroadcastChatInfo_Response::set_flair_group_ids(int index, uint32_t value) {
  flair_group_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastChatInfo_Response.flair_group_ids)
}
inline void CBroadcast_GetBroadcastChatInfo_Response::_internal_add_flair_group_ids(uint32_t value) {
  flair_group_ids_.Add(value);
}
inline void CBroadcast_GetBroadcastChatInfo_Response::add_flair_group_ids(uint32_t value) {
  _internal_add_flair_group_ids(value);
  // @@protoc_insertion_point(field_add:CBroadcast_GetBroadcastChatInfo_Response.flair_group_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CBroadcast_GetBroadcastChatInfo_Response::_internal_flair_group_ids() const {
  return flair_group_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CBroadcast_GetBroadcastChatInfo_Response::flair_group_ids() const {
  // @@protoc_insertion_point(field_list:CBroadcast_GetBroadcastChatInfo_Response.flair_group_ids)
  return _internal_flair_group_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CBroadcast_GetBroadcastChatInfo_Response::_internal_mutable_flair_group_ids() {
  return &flair_group_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CBroadcast_GetBroadcastChatInfo_Response::mutable_flair_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:CBroadcast_GetBroadcastChatInfo_Response.flair_group_ids)
  return _internal_mutable_flair_group_ids();
}

// -------------------------------------------------------------------

// CBroadcast_PostChatMessage_Request

// optional fixed64 chat_id = 1;
inline bool CBroadcast_PostChatMessage_Request::_internal_has_chat_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_PostChatMessage_Request::has_chat_id() const {
  return _internal_has_chat_id();
}
inline void CBroadcast_PostChatMessage_Request::clear_chat_id() {
  chat_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_PostChatMessage_Request::_internal_chat_id() const {
  return chat_id_;
}
inline uint64_t CBroadcast_PostChatMessage_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_PostChatMessage_Request.chat_id)
  return _internal_chat_id();
}
inline void CBroadcast_PostChatMessage_Request::_internal_set_chat_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  chat_id_ = value;
}
inline void CBroadcast_PostChatMessage_Request::set_chat_id(uint64_t value) {
  _internal_set_chat_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_PostChatMessage_Request.chat_id)
}

// optional string message = 2;
inline bool CBroadcast_PostChatMessage_Request::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_PostChatMessage_Request::has_message() const {
  return _internal_has_message();
}
inline void CBroadcast_PostChatMessage_Request::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_PostChatMessage_Request::message() const {
  // @@protoc_insertion_point(field_get:CBroadcast_PostChatMessage_Request.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_PostChatMessage_Request::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_PostChatMessage_Request.message)
}
inline std::string* CBroadcast_PostChatMessage_Request::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CBroadcast_PostChatMessage_Request.message)
  return _s;
}
inline const std::string& CBroadcast_PostChatMessage_Request::_internal_message() const {
  return message_.Get();
}
inline void CBroadcast_PostChatMessage_Request::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_PostChatMessage_Request::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_PostChatMessage_Request::release_message() {
  // @@protoc_insertion_point(field_release:CBroadcast_PostChatMessage_Request.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_PostChatMessage_Request::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_PostChatMessage_Request.message)
}

// optional uint32 instance_id = 3;
inline bool CBroadcast_PostChatMessage_Request::_internal_has_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_PostChatMessage_Request::has_instance_id() const {
  return _internal_has_instance_id();
}
inline void CBroadcast_PostChatMessage_Request::clear_instance_id() {
  instance_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CBroadcast_PostChatMessage_Request::_internal_instance_id() const {
  return instance_id_;
}
inline uint32_t CBroadcast_PostChatMessage_Request::instance_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_PostChatMessage_Request.instance_id)
  return _internal_instance_id();
}
inline void CBroadcast_PostChatMessage_Request::_internal_set_instance_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  instance_id_ = value;
}
inline void CBroadcast_PostChatMessage_Request::set_instance_id(uint32_t value) {
  _internal_set_instance_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_PostChatMessage_Request.instance_id)
}

// optional uint32 language = 4 [default = 0, (.description) = "ELanguage of the user posting the message, default is english"];
inline bool CBroadcast_PostChatMessage_Request::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_PostChatMessage_Request::has_language() const {
  return _internal_has_language();
}
inline void CBroadcast_PostChatMessage_Request::clear_language() {
  language_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CBroadcast_PostChatMessage_Request::_internal_language() const {
  return language_;
}
inline uint32_t CBroadcast_PostChatMessage_Request::language() const {
  // @@protoc_insertion_point(field_get:CBroadcast_PostChatMessage_Request.language)
  return _internal_language();
}
inline void CBroadcast_PostChatMessage_Request::_internal_set_language(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  language_ = value;
}
inline void CBroadcast_PostChatMessage_Request::set_language(uint32_t value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CBroadcast_PostChatMessage_Request.language)
}

// optional string country_code = 5 [(.description) = "The two letter country code"];
inline bool CBroadcast_PostChatMessage_Request::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_PostChatMessage_Request::has_country_code() const {
  return _internal_has_country_code();
}
inline void CBroadcast_PostChatMessage_Request::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBroadcast_PostChatMessage_Request::country_code() const {
  // @@protoc_insertion_point(field_get:CBroadcast_PostChatMessage_Request.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_PostChatMessage_Request::set_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_PostChatMessage_Request.country_code)
}
inline std::string* CBroadcast_PostChatMessage_Request::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:CBroadcast_PostChatMessage_Request.country_code)
  return _s;
}
inline const std::string& CBroadcast_PostChatMessage_Request::_internal_country_code() const {
  return country_code_.Get();
}
inline void CBroadcast_PostChatMessage_Request::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_PostChatMessage_Request::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000002u;
  return country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_PostChatMessage_Request::release_country_code() {
  // @@protoc_insertion_point(field_release:CBroadcast_PostChatMessage_Request.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_PostChatMessage_Request::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_PostChatMessage_Request.country_code)
}

// -------------------------------------------------------------------

// CBroadcast_PostChatMessage_Response

// optional string persona_name = 1;
inline bool CBroadcast_PostChatMessage_Response::_internal_has_persona_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_PostChatMessage_Response::has_persona_name() const {
  return _internal_has_persona_name();
}
inline void CBroadcast_PostChatMessage_Response::clear_persona_name() {
  persona_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_PostChatMessage_Response::persona_name() const {
  // @@protoc_insertion_point(field_get:CBroadcast_PostChatMessage_Response.persona_name)
  return _internal_persona_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_PostChatMessage_Response::set_persona_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_PostChatMessage_Response.persona_name)
}
inline std::string* CBroadcast_PostChatMessage_Response::mutable_persona_name() {
  std::string* _s = _internal_mutable_persona_name();
  // @@protoc_insertion_point(field_mutable:CBroadcast_PostChatMessage_Response.persona_name)
  return _s;
}
inline const std::string& CBroadcast_PostChatMessage_Response::_internal_persona_name() const {
  return persona_name_.Get();
}
inline void CBroadcast_PostChatMessage_Response::_internal_set_persona_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_PostChatMessage_Response::_internal_mutable_persona_name() {
  _has_bits_[0] |= 0x00000001u;
  return persona_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_PostChatMessage_Response::release_persona_name() {
  // @@protoc_insertion_point(field_release:CBroadcast_PostChatMessage_Response.persona_name)
  if (!_internal_has_persona_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = persona_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_PostChatMessage_Response::set_allocated_persona_name(std::string* persona_name) {
  if (persona_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), persona_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_PostChatMessage_Response.persona_name)
}

// optional bool in_game = 2;
inline bool CBroadcast_PostChatMessage_Response::_internal_has_in_game() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_PostChatMessage_Response::has_in_game() const {
  return _internal_has_in_game();
}
inline void CBroadcast_PostChatMessage_Response::clear_in_game() {
  in_game_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CBroadcast_PostChatMessage_Response::_internal_in_game() const {
  return in_game_;
}
inline bool CBroadcast_PostChatMessage_Response::in_game() const {
  // @@protoc_insertion_point(field_get:CBroadcast_PostChatMessage_Response.in_game)
  return _internal_in_game();
}
inline void CBroadcast_PostChatMessage_Response::_internal_set_in_game(bool value) {
  _has_bits_[0] |= 0x00000002u;
  in_game_ = value;
}
inline void CBroadcast_PostChatMessage_Response::set_in_game(bool value) {
  _internal_set_in_game(value);
  // @@protoc_insertion_point(field_set:CBroadcast_PostChatMessage_Response.in_game)
}

// optional int32 result = 3;
inline bool CBroadcast_PostChatMessage_Response::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_PostChatMessage_Response::has_result() const {
  return _internal_has_result();
}
inline void CBroadcast_PostChatMessage_Response::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CBroadcast_PostChatMessage_Response::_internal_result() const {
  return result_;
}
inline int32_t CBroadcast_PostChatMessage_Response::result() const {
  // @@protoc_insertion_point(field_get:CBroadcast_PostChatMessage_Response.result)
  return _internal_result();
}
inline void CBroadcast_PostChatMessage_Response::_internal_set_result(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
}
inline void CBroadcast_PostChatMessage_Response::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CBroadcast_PostChatMessage_Response.result)
}

// optional int32 cooldown_time_seconds = 4;
inline bool CBroadcast_PostChatMessage_Response::_internal_has_cooldown_time_seconds() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_PostChatMessage_Response::has_cooldown_time_seconds() const {
  return _internal_has_cooldown_time_seconds();
}
inline void CBroadcast_PostChatMessage_Response::clear_cooldown_time_seconds() {
  cooldown_time_seconds_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CBroadcast_PostChatMessage_Response::_internal_cooldown_time_seconds() const {
  return cooldown_time_seconds_;
}
inline int32_t CBroadcast_PostChatMessage_Response::cooldown_time_seconds() const {
  // @@protoc_insertion_point(field_get:CBroadcast_PostChatMessage_Response.cooldown_time_seconds)
  return _internal_cooldown_time_seconds();
}
inline void CBroadcast_PostChatMessage_Response::_internal_set_cooldown_time_seconds(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  cooldown_time_seconds_ = value;
}
inline void CBroadcast_PostChatMessage_Response::set_cooldown_time_seconds(int32_t value) {
  _internal_set_cooldown_time_seconds(value);
  // @@protoc_insertion_point(field_set:CBroadcast_PostChatMessage_Response.cooldown_time_seconds)
}

// -------------------------------------------------------------------

// CBroadcast_UpdateChatMessageFlair_Request

// optional fixed64 chat_id = 1;
inline bool CBroadcast_UpdateChatMessageFlair_Request::_internal_has_chat_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_UpdateChatMessageFlair_Request::has_chat_id() const {
  return _internal_has_chat_id();
}
inline void CBroadcast_UpdateChatMessageFlair_Request::clear_chat_id() {
  chat_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_UpdateChatMessageFlair_Request::_internal_chat_id() const {
  return chat_id_;
}
inline uint64_t CBroadcast_UpdateChatMessageFlair_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_UpdateChatMessageFlair_Request.chat_id)
  return _internal_chat_id();
}
inline void CBroadcast_UpdateChatMessageFlair_Request::_internal_set_chat_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  chat_id_ = value;
}
inline void CBroadcast_UpdateChatMessageFlair_Request::set_chat_id(uint64_t value) {
  _internal_set_chat_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_UpdateChatMessageFlair_Request.chat_id)
}

// optional string flair = 2;
inline bool CBroadcast_UpdateChatMessageFlair_Request::_internal_has_flair() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_UpdateChatMessageFlair_Request::has_flair() const {
  return _internal_has_flair();
}
inline void CBroadcast_UpdateChatMessageFlair_Request::clear_flair() {
  flair_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_UpdateChatMessageFlair_Request::flair() const {
  // @@protoc_insertion_point(field_get:CBroadcast_UpdateChatMessageFlair_Request.flair)
  return _internal_flair();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_UpdateChatMessageFlair_Request::set_flair(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 flair_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_UpdateChatMessageFlair_Request.flair)
}
inline std::string* CBroadcast_UpdateChatMessageFlair_Request::mutable_flair() {
  std::string* _s = _internal_mutable_flair();
  // @@protoc_insertion_point(field_mutable:CBroadcast_UpdateChatMessageFlair_Request.flair)
  return _s;
}
inline const std::string& CBroadcast_UpdateChatMessageFlair_Request::_internal_flair() const {
  return flair_.Get();
}
inline void CBroadcast_UpdateChatMessageFlair_Request::_internal_set_flair(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  flair_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_UpdateChatMessageFlair_Request::_internal_mutable_flair() {
  _has_bits_[0] |= 0x00000001u;
  return flair_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_UpdateChatMessageFlair_Request::release_flair() {
  // @@protoc_insertion_point(field_release:CBroadcast_UpdateChatMessageFlair_Request.flair)
  if (!_internal_has_flair()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = flair_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flair_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flair_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_UpdateChatMessageFlair_Request::set_allocated_flair(std::string* flair) {
  if (flair != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  flair_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flair,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flair_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flair_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_UpdateChatMessageFlair_Request.flair)
}

// -------------------------------------------------------------------

// CBroadcast_UpdateChatMessageFlair_Response

// optional int32 result = 1;
inline bool CBroadcast_UpdateChatMessageFlair_Response::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_UpdateChatMessageFlair_Response::has_result() const {
  return _internal_has_result();
}
inline void CBroadcast_UpdateChatMessageFlair_Response::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CBroadcast_UpdateChatMessageFlair_Response::_internal_result() const {
  return result_;
}
inline int32_t CBroadcast_UpdateChatMessageFlair_Response::result() const {
  // @@protoc_insertion_point(field_get:CBroadcast_UpdateChatMessageFlair_Response.result)
  return _internal_result();
}
inline void CBroadcast_UpdateChatMessageFlair_Response::_internal_set_result(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
}
inline void CBroadcast_UpdateChatMessageFlair_Response::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CBroadcast_UpdateChatMessageFlair_Response.result)
}

// optional fixed64 chat_id = 2;
inline bool CBroadcast_UpdateChatMessageFlair_Response::_internal_has_chat_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_UpdateChatMessageFlair_Response::has_chat_id() const {
  return _internal_has_chat_id();
}
inline void CBroadcast_UpdateChatMessageFlair_Response::clear_chat_id() {
  chat_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_UpdateChatMessageFlair_Response::_internal_chat_id() const {
  return chat_id_;
}
inline uint64_t CBroadcast_UpdateChatMessageFlair_Response::chat_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_UpdateChatMessageFlair_Response.chat_id)
  return _internal_chat_id();
}
inline void CBroadcast_UpdateChatMessageFlair_Response::_internal_set_chat_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  chat_id_ = value;
}
inline void CBroadcast_UpdateChatMessageFlair_Response::set_chat_id(uint64_t value) {
  _internal_set_chat_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_UpdateChatMessageFlair_Response.chat_id)
}

// optional string flair = 3;
inline bool CBroadcast_UpdateChatMessageFlair_Response::_internal_has_flair() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_UpdateChatMessageFlair_Response::has_flair() const {
  return _internal_has_flair();
}
inline void CBroadcast_UpdateChatMessageFlair_Response::clear_flair() {
  flair_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_UpdateChatMessageFlair_Response::flair() const {
  // @@protoc_insertion_point(field_get:CBroadcast_UpdateChatMessageFlair_Response.flair)
  return _internal_flair();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_UpdateChatMessageFlair_Response::set_flair(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 flair_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_UpdateChatMessageFlair_Response.flair)
}
inline std::string* CBroadcast_UpdateChatMessageFlair_Response::mutable_flair() {
  std::string* _s = _internal_mutable_flair();
  // @@protoc_insertion_point(field_mutable:CBroadcast_UpdateChatMessageFlair_Response.flair)
  return _s;
}
inline const std::string& CBroadcast_UpdateChatMessageFlair_Response::_internal_flair() const {
  return flair_.Get();
}
inline void CBroadcast_UpdateChatMessageFlair_Response::_internal_set_flair(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  flair_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_UpdateChatMessageFlair_Response::_internal_mutable_flair() {
  _has_bits_[0] |= 0x00000001u;
  return flair_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_UpdateChatMessageFlair_Response::release_flair() {
  // @@protoc_insertion_point(field_release:CBroadcast_UpdateChatMessageFlair_Response.flair)
  if (!_internal_has_flair()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = flair_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flair_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flair_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_UpdateChatMessageFlair_Response::set_allocated_flair(std::string* flair) {
  if (flair != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  flair_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flair,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flair_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flair_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_UpdateChatMessageFlair_Response.flair)
}

// -------------------------------------------------------------------

// CBroadcast_MuteBroadcastChatUser_Request

// optional fixed64 chat_id = 1;
inline bool CBroadcast_MuteBroadcastChatUser_Request::_internal_has_chat_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_MuteBroadcastChatUser_Request::has_chat_id() const {
  return _internal_has_chat_id();
}
inline void CBroadcast_MuteBroadcastChatUser_Request::clear_chat_id() {
  chat_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_MuteBroadcastChatUser_Request::_internal_chat_id() const {
  return chat_id_;
}
inline uint64_t CBroadcast_MuteBroadcastChatUser_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_MuteBroadcastChatUser_Request.chat_id)
  return _internal_chat_id();
}
inline void CBroadcast_MuteBroadcastChatUser_Request::_internal_set_chat_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  chat_id_ = value;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::set_chat_id(uint64_t value) {
  _internal_set_chat_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_MuteBroadcastChatUser_Request.chat_id)
}

// optional fixed64 user_steamid = 2;
inline bool CBroadcast_MuteBroadcastChatUser_Request::_internal_has_user_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_MuteBroadcastChatUser_Request::has_user_steamid() const {
  return _internal_has_user_steamid();
}
inline void CBroadcast_MuteBroadcastChatUser_Request::clear_user_steamid() {
  user_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_MuteBroadcastChatUser_Request::_internal_user_steamid() const {
  return user_steamid_;
}
inline uint64_t CBroadcast_MuteBroadcastChatUser_Request::user_steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_MuteBroadcastChatUser_Request.user_steamid)
  return _internal_user_steamid();
}
inline void CBroadcast_MuteBroadcastChatUser_Request::_internal_set_user_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  user_steamid_ = value;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::set_user_steamid(uint64_t value) {
  _internal_set_user_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_MuteBroadcastChatUser_Request.user_steamid)
}

// optional bool muted = 3;
inline bool CBroadcast_MuteBroadcastChatUser_Request::_internal_has_muted() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_MuteBroadcastChatUser_Request::has_muted() const {
  return _internal_has_muted();
}
inline void CBroadcast_MuteBroadcastChatUser_Request::clear_muted() {
  muted_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CBroadcast_MuteBroadcastChatUser_Request::_internal_muted() const {
  return muted_;
}
inline bool CBroadcast_MuteBroadcastChatUser_Request::muted() const {
  // @@protoc_insertion_point(field_get:CBroadcast_MuteBroadcastChatUser_Request.muted)
  return _internal_muted();
}
inline void CBroadcast_MuteBroadcastChatUser_Request::_internal_set_muted(bool value) {
  _has_bits_[0] |= 0x00000004u;
  muted_ = value;
}
inline void CBroadcast_MuteBroadcastChatUser_Request::set_muted(bool value) {
  _internal_set_muted(value);
  // @@protoc_insertion_point(field_set:CBroadcast_MuteBroadcastChatUser_Request.muted)
}

// -------------------------------------------------------------------

// CBroadcast_MuteBroadcastChatUser_Response

// -------------------------------------------------------------------

// CBroadcast_RemoveUserChatText_Request

// optional fixed64 chat_id = 1;
inline bool CBroadcast_RemoveUserChatText_Request::_internal_has_chat_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_RemoveUserChatText_Request::has_chat_id() const {
  return _internal_has_chat_id();
}
inline void CBroadcast_RemoveUserChatText_Request::clear_chat_id() {
  chat_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_RemoveUserChatText_Request::_internal_chat_id() const {
  return chat_id_;
}
inline uint64_t CBroadcast_RemoveUserChatText_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_RemoveUserChatText_Request.chat_id)
  return _internal_chat_id();
}
inline void CBroadcast_RemoveUserChatText_Request::_internal_set_chat_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  chat_id_ = value;
}
inline void CBroadcast_RemoveUserChatText_Request::set_chat_id(uint64_t value) {
  _internal_set_chat_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_RemoveUserChatText_Request.chat_id)
}

// optional fixed64 user_steamid = 2;
inline bool CBroadcast_RemoveUserChatText_Request::_internal_has_user_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_RemoveUserChatText_Request::has_user_steamid() const {
  return _internal_has_user_steamid();
}
inline void CBroadcast_RemoveUserChatText_Request::clear_user_steamid() {
  user_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_RemoveUserChatText_Request::_internal_user_steamid() const {
  return user_steamid_;
}
inline uint64_t CBroadcast_RemoveUserChatText_Request::user_steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_RemoveUserChatText_Request.user_steamid)
  return _internal_user_steamid();
}
inline void CBroadcast_RemoveUserChatText_Request::_internal_set_user_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  user_steamid_ = value;
}
inline void CBroadcast_RemoveUserChatText_Request::set_user_steamid(uint64_t value) {
  _internal_set_user_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_RemoveUserChatText_Request.user_steamid)
}

// -------------------------------------------------------------------

// CBroadcast_RemoveUserChatText_Response

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastChatUserNames_Request

// optional fixed64 chat_id = 1;
inline bool CBroadcast_GetBroadcastChatUserNames_Request::_internal_has_chat_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastChatUserNames_Request::has_chat_id() const {
  return _internal_has_chat_id();
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::clear_chat_id() {
  chat_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_GetBroadcastChatUserNames_Request::_internal_chat_id() const {
  return chat_id_;
}
inline uint64_t CBroadcast_GetBroadcastChatUserNames_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastChatUserNames_Request.chat_id)
  return _internal_chat_id();
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::_internal_set_chat_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  chat_id_ = value;
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::set_chat_id(uint64_t value) {
  _internal_set_chat_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastChatUserNames_Request.chat_id)
}

// repeated fixed64 user_steamid = 2;
inline int CBroadcast_GetBroadcastChatUserNames_Request::_internal_user_steamid_size() const {
  return user_steamid_.size();
}
inline int CBroadcast_GetBroadcastChatUserNames_Request::user_steamid_size() const {
  return _internal_user_steamid_size();
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::clear_user_steamid() {
  user_steamid_.Clear();
}
inline uint64_t CBroadcast_GetBroadcastChatUserNames_Request::_internal_user_steamid(int index) const {
  return user_steamid_.Get(index);
}
inline uint64_t CBroadcast_GetBroadcastChatUserNames_Request::user_steamid(int index) const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
  return _internal_user_steamid(index);
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::set_user_steamid(int index, uint64_t value) {
  user_steamid_.Set(index, value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::_internal_add_user_steamid(uint64_t value) {
  user_steamid_.Add(value);
}
inline void CBroadcast_GetBroadcastChatUserNames_Request::add_user_steamid(uint64_t value) {
  _internal_add_user_steamid(value);
  // @@protoc_insertion_point(field_add:CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CBroadcast_GetBroadcastChatUserNames_Request::_internal_user_steamid() const {
  return user_steamid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CBroadcast_GetBroadcastChatUserNames_Request::user_steamid() const {
  // @@protoc_insertion_point(field_list:CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
  return _internal_user_steamid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CBroadcast_GetBroadcastChatUserNames_Request::_internal_mutable_user_steamid() {
  return &user_steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CBroadcast_GetBroadcastChatUserNames_Request::mutable_user_steamid() {
  // @@protoc_insertion_point(field_mutable_list:CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
  return _internal_mutable_user_steamid();
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastChatUserNames_Response_PersonaName

// optional fixed64 steam_id = 1 [(.allow_field_named_steam_id) = true];
inline bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::clear_steam_id() {
  steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::_internal_steam_id() const {
  return steam_id_;
}
inline uint64_t CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::steam_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.steam_id)
  return _internal_steam_id();
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::_internal_set_steam_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_ = value;
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.steam_id)
}

// optional string persona = 2;
inline bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::_internal_has_persona() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::has_persona() const {
  return _internal_has_persona();
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::clear_persona() {
  persona_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::persona() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
  return _internal_persona();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_persona(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 persona_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}
inline std::string* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::mutable_persona() {
  std::string* _s = _internal_mutable_persona();
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
  return _s;
}
inline const std::string& CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::_internal_persona() const {
  return persona_.Get();
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::_internal_set_persona(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::_internal_mutable_persona() {
  _has_bits_[0] |= 0x00000001u;
  return persona_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::release_persona() {
  // @@protoc_insertion_point(field_release:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
  if (!_internal_has_persona()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = persona_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_allocated_persona(std::string* persona) {
  if (persona != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), persona,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (persona_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    persona_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastChatUserNames_Response

// repeated .CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
inline int CBroadcast_GetBroadcastChatUserNames_Response::_internal_persona_names_size() const {
  return persona_names_.size();
}
inline int CBroadcast_GetBroadcastChatUserNames_Response::persona_names_size() const {
  return _internal_persona_names_size();
}
inline void CBroadcast_GetBroadcastChatUserNames_Response::clear_persona_names() {
  persona_names_.Clear();
}
inline ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* CBroadcast_GetBroadcastChatUserNames_Response::mutable_persona_names(int index) {
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return persona_names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >*
CBroadcast_GetBroadcastChatUserNames_Response::mutable_persona_names() {
  // @@protoc_insertion_point(field_mutable_list:CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return &persona_names_;
}
inline const ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& CBroadcast_GetBroadcastChatUserNames_Response::_internal_persona_names(int index) const {
  return persona_names_.Get(index);
}
inline const ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& CBroadcast_GetBroadcastChatUserNames_Response::persona_names(int index) const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return _internal_persona_names(index);
}
inline ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* CBroadcast_GetBroadcastChatUserNames_Response::_internal_add_persona_names() {
  return persona_names_.Add();
}
inline ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* CBroadcast_GetBroadcastChatUserNames_Response::add_persona_names() {
  ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* _add = _internal_add_persona_names();
  // @@protoc_insertion_point(field_add:CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >&
CBroadcast_GetBroadcastChatUserNames_Response::persona_names() const {
  // @@protoc_insertion_point(field_list:CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return persona_names_;
}

// -------------------------------------------------------------------

// CBroadcast_StartBuildClip_Request

// optional fixed64 steamid = 1;
inline bool CBroadcast_StartBuildClip_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_StartBuildClip_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CBroadcast_StartBuildClip_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_StartBuildClip_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CBroadcast_StartBuildClip_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBuildClip_Request.steamid)
  return _internal_steamid();
}
inline void CBroadcast_StartBuildClip_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CBroadcast_StartBuildClip_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StartBuildClip_Request.steamid)
}

// optional fixed64 broadcast_session_id = 2;
inline bool CBroadcast_StartBuildClip_Request::_internal_has_broadcast_session_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_StartBuildClip_Request::has_broadcast_session_id() const {
  return _internal_has_broadcast_session_id();
}
inline void CBroadcast_StartBuildClip_Request::clear_broadcast_session_id() {
  broadcast_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_StartBuildClip_Request::_internal_broadcast_session_id() const {
  return broadcast_session_id_;
}
inline uint64_t CBroadcast_StartBuildClip_Request::broadcast_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBuildClip_Request.broadcast_session_id)
  return _internal_broadcast_session_id();
}
inline void CBroadcast_StartBuildClip_Request::_internal_set_broadcast_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  broadcast_session_id_ = value;
}
inline void CBroadcast_StartBuildClip_Request::set_broadcast_session_id(uint64_t value) {
  _internal_set_broadcast_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StartBuildClip_Request.broadcast_session_id)
}

// optional int32 first_segment = 3;
inline bool CBroadcast_StartBuildClip_Request::_internal_has_first_segment() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_StartBuildClip_Request::has_first_segment() const {
  return _internal_has_first_segment();
}
inline void CBroadcast_StartBuildClip_Request::clear_first_segment() {
  first_segment_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CBroadcast_StartBuildClip_Request::_internal_first_segment() const {
  return first_segment_;
}
inline int32_t CBroadcast_StartBuildClip_Request::first_segment() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBuildClip_Request.first_segment)
  return _internal_first_segment();
}
inline void CBroadcast_StartBuildClip_Request::_internal_set_first_segment(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  first_segment_ = value;
}
inline void CBroadcast_StartBuildClip_Request::set_first_segment(int32_t value) {
  _internal_set_first_segment(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StartBuildClip_Request.first_segment)
}

// optional int32 num_segments = 4;
inline bool CBroadcast_StartBuildClip_Request::_internal_has_num_segments() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_StartBuildClip_Request::has_num_segments() const {
  return _internal_has_num_segments();
}
inline void CBroadcast_StartBuildClip_Request::clear_num_segments() {
  num_segments_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CBroadcast_StartBuildClip_Request::_internal_num_segments() const {
  return num_segments_;
}
inline int32_t CBroadcast_StartBuildClip_Request::num_segments() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBuildClip_Request.num_segments)
  return _internal_num_segments();
}
inline void CBroadcast_StartBuildClip_Request::_internal_set_num_segments(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  num_segments_ = value;
}
inline void CBroadcast_StartBuildClip_Request::set_num_segments(int32_t value) {
  _internal_set_num_segments(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StartBuildClip_Request.num_segments)
}

// optional string clip_description = 5;
inline bool CBroadcast_StartBuildClip_Request::_internal_has_clip_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_StartBuildClip_Request::has_clip_description() const {
  return _internal_has_clip_description();
}
inline void CBroadcast_StartBuildClip_Request::clear_clip_description() {
  clip_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_StartBuildClip_Request::clip_description() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBuildClip_Request.clip_description)
  return _internal_clip_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_StartBuildClip_Request::set_clip_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 clip_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_StartBuildClip_Request.clip_description)
}
inline std::string* CBroadcast_StartBuildClip_Request::mutable_clip_description() {
  std::string* _s = _internal_mutable_clip_description();
  // @@protoc_insertion_point(field_mutable:CBroadcast_StartBuildClip_Request.clip_description)
  return _s;
}
inline const std::string& CBroadcast_StartBuildClip_Request::_internal_clip_description() const {
  return clip_description_.Get();
}
inline void CBroadcast_StartBuildClip_Request::_internal_set_clip_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clip_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_StartBuildClip_Request::_internal_mutable_clip_description() {
  _has_bits_[0] |= 0x00000001u;
  return clip_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_StartBuildClip_Request::release_clip_description() {
  // @@protoc_insertion_point(field_release:CBroadcast_StartBuildClip_Request.clip_description)
  if (!_internal_has_clip_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = clip_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (clip_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    clip_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_StartBuildClip_Request::set_allocated_clip_description(std::string* clip_description) {
  if (clip_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (clip_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    clip_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_StartBuildClip_Request.clip_description)
}

// -------------------------------------------------------------------

// CBroadcast_StartBuildClip_Response

// optional fixed64 broadcast_clip_id = 1;
inline bool CBroadcast_StartBuildClip_Response::_internal_has_broadcast_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_StartBuildClip_Response::has_broadcast_clip_id() const {
  return _internal_has_broadcast_clip_id();
}
inline void CBroadcast_StartBuildClip_Response::clear_broadcast_clip_id() {
  broadcast_clip_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_StartBuildClip_Response::_internal_broadcast_clip_id() const {
  return broadcast_clip_id_;
}
inline uint64_t CBroadcast_StartBuildClip_Response::broadcast_clip_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StartBuildClip_Response.broadcast_clip_id)
  return _internal_broadcast_clip_id();
}
inline void CBroadcast_StartBuildClip_Response::_internal_set_broadcast_clip_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_clip_id_ = value;
}
inline void CBroadcast_StartBuildClip_Response::set_broadcast_clip_id(uint64_t value) {
  _internal_set_broadcast_clip_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StartBuildClip_Response.broadcast_clip_id)
}

// -------------------------------------------------------------------

// CBroadcast_GetBuildClipStatus_Request

// optional fixed64 broadcast_clip_id = 1;
inline bool CBroadcast_GetBuildClipStatus_Request::_internal_has_broadcast_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetBuildClipStatus_Request::has_broadcast_clip_id() const {
  return _internal_has_broadcast_clip_id();
}
inline void CBroadcast_GetBuildClipStatus_Request::clear_broadcast_clip_id() {
  broadcast_clip_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_GetBuildClipStatus_Request::_internal_broadcast_clip_id() const {
  return broadcast_clip_id_;
}
inline uint64_t CBroadcast_GetBuildClipStatus_Request::broadcast_clip_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBuildClipStatus_Request.broadcast_clip_id)
  return _internal_broadcast_clip_id();
}
inline void CBroadcast_GetBuildClipStatus_Request::_internal_set_broadcast_clip_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_clip_id_ = value;
}
inline void CBroadcast_GetBuildClipStatus_Request::set_broadcast_clip_id(uint64_t value) {
  _internal_set_broadcast_clip_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBuildClipStatus_Request.broadcast_clip_id)
}

// -------------------------------------------------------------------

// CBroadcast_GetBuildClipStatus_Response

// -------------------------------------------------------------------

// CBroadcast_SetClipDetails_Request

// optional uint64 broadcast_clip_id = 1 [(.description) = "Clip ID"];
inline bool CBroadcast_SetClipDetails_Request::_internal_has_broadcast_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_SetClipDetails_Request::has_broadcast_clip_id() const {
  return _internal_has_broadcast_clip_id();
}
inline void CBroadcast_SetClipDetails_Request::clear_broadcast_clip_id() {
  broadcast_clip_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_SetClipDetails_Request::_internal_broadcast_clip_id() const {
  return broadcast_clip_id_;
}
inline uint64_t CBroadcast_SetClipDetails_Request::broadcast_clip_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetClipDetails_Request.broadcast_clip_id)
  return _internal_broadcast_clip_id();
}
inline void CBroadcast_SetClipDetails_Request::_internal_set_broadcast_clip_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_clip_id_ = value;
}
inline void CBroadcast_SetClipDetails_Request::set_broadcast_clip_id(uint64_t value) {
  _internal_set_broadcast_clip_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SetClipDetails_Request.broadcast_clip_id)
}

// optional uint32 start_time = 2 [(.description) = "start time of the clip"];
inline bool CBroadcast_SetClipDetails_Request::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_SetClipDetails_Request::has_start_time() const {
  return _internal_has_start_time();
}
inline void CBroadcast_SetClipDetails_Request::clear_start_time() {
  start_time_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CBroadcast_SetClipDetails_Request::_internal_start_time() const {
  return start_time_;
}
inline uint32_t CBroadcast_SetClipDetails_Request::start_time() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetClipDetails_Request.start_time)
  return _internal_start_time();
}
inline void CBroadcast_SetClipDetails_Request::_internal_set_start_time(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  start_time_ = value;
}
inline void CBroadcast_SetClipDetails_Request::set_start_time(uint32_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SetClipDetails_Request.start_time)
}

// optional uint32 end_time = 3 [(.description) = "end time of the clip"];
inline bool CBroadcast_SetClipDetails_Request::_internal_has_end_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_SetClipDetails_Request::has_end_time() const {
  return _internal_has_end_time();
}
inline void CBroadcast_SetClipDetails_Request::clear_end_time() {
  end_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CBroadcast_SetClipDetails_Request::_internal_end_time() const {
  return end_time_;
}
inline uint32_t CBroadcast_SetClipDetails_Request::end_time() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetClipDetails_Request.end_time)
  return _internal_end_time();
}
inline void CBroadcast_SetClipDetails_Request::_internal_set_end_time(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  end_time_ = value;
}
inline void CBroadcast_SetClipDetails_Request::set_end_time(uint32_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SetClipDetails_Request.end_time)
}

// optional string video_description = 4;
inline bool CBroadcast_SetClipDetails_Request::_internal_has_video_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_SetClipDetails_Request::has_video_description() const {
  return _internal_has_video_description();
}
inline void CBroadcast_SetClipDetails_Request::clear_video_description() {
  video_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_SetClipDetails_Request::video_description() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetClipDetails_Request.video_description)
  return _internal_video_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_SetClipDetails_Request::set_video_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 video_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_SetClipDetails_Request.video_description)
}
inline std::string* CBroadcast_SetClipDetails_Request::mutable_video_description() {
  std::string* _s = _internal_mutable_video_description();
  // @@protoc_insertion_point(field_mutable:CBroadcast_SetClipDetails_Request.video_description)
  return _s;
}
inline const std::string& CBroadcast_SetClipDetails_Request::_internal_video_description() const {
  return video_description_.Get();
}
inline void CBroadcast_SetClipDetails_Request::_internal_set_video_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  video_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_SetClipDetails_Request::_internal_mutable_video_description() {
  _has_bits_[0] |= 0x00000001u;
  return video_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_SetClipDetails_Request::release_video_description() {
  // @@protoc_insertion_point(field_release:CBroadcast_SetClipDetails_Request.video_description)
  if (!_internal_has_video_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = video_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (video_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    video_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_SetClipDetails_Request::set_allocated_video_description(std::string* video_description) {
  if (video_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  video_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (video_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    video_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_SetClipDetails_Request.video_description)
}

// -------------------------------------------------------------------

// CBroadcast_SetClipDetails_Response

// -------------------------------------------------------------------

// CBroadcast_GetClipDetails_Request

// optional uint64 broadcast_clip_id = 1 [(.description) = "List of clip IDs we want details for"];
inline bool CBroadcast_GetClipDetails_Request::_internal_has_broadcast_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetClipDetails_Request::has_broadcast_clip_id() const {
  return _internal_has_broadcast_clip_id();
}
inline void CBroadcast_GetClipDetails_Request::clear_broadcast_clip_id() {
  broadcast_clip_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_GetClipDetails_Request::_internal_broadcast_clip_id() const {
  return broadcast_clip_id_;
}
inline uint64_t CBroadcast_GetClipDetails_Request::broadcast_clip_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetClipDetails_Request.broadcast_clip_id)
  return _internal_broadcast_clip_id();
}
inline void CBroadcast_GetClipDetails_Request::_internal_set_broadcast_clip_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_clip_id_ = value;
}
inline void CBroadcast_GetClipDetails_Request::set_broadcast_clip_id(uint64_t value) {
  _internal_set_broadcast_clip_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetClipDetails_Request.broadcast_clip_id)
}

// -------------------------------------------------------------------

// CBroadcast_GetClipDetails_Response

// optional uint64 broadcast_clip_id = 1 [(.description) = "broadcast clip ID"];
inline bool CBroadcast_GetClipDetails_Response::_internal_has_broadcast_clip_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_GetClipDetails_Response::has_broadcast_clip_id() const {
  return _internal_has_broadcast_clip_id();
}
inline void CBroadcast_GetClipDetails_Response::clear_broadcast_clip_id() {
  broadcast_clip_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_GetClipDetails_Response::_internal_broadcast_clip_id() const {
  return broadcast_clip_id_;
}
inline uint64_t CBroadcast_GetClipDetails_Response::broadcast_clip_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetClipDetails_Response.broadcast_clip_id)
  return _internal_broadcast_clip_id();
}
inline void CBroadcast_GetClipDetails_Response::_internal_set_broadcast_clip_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  broadcast_clip_id_ = value;
}
inline void CBroadcast_GetClipDetails_Response::set_broadcast_clip_id(uint64_t value) {
  _internal_set_broadcast_clip_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetClipDetails_Response.broadcast_clip_id)
}

// optional uint64 video_id = 2 [(.description) = "matching unique video ID"];
inline bool CBroadcast_GetClipDetails_Response::_internal_has_video_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_GetClipDetails_Response::has_video_id() const {
  return _internal_has_video_id();
}
inline void CBroadcast_GetClipDetails_Response::clear_video_id() {
  video_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CBroadcast_GetClipDetails_Response::_internal_video_id() const {
  return video_id_;
}
inline uint64_t CBroadcast_GetClipDetails_Response::video_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetClipDetails_Response.video_id)
  return _internal_video_id();
}
inline void CBroadcast_GetClipDetails_Response::_internal_set_video_id(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  video_id_ = value;
}
inline void CBroadcast_GetClipDetails_Response::set_video_id(uint64_t value) {
  _internal_set_video_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetClipDetails_Response.video_id)
}

// optional uint64 channel_id = 3 [(.description) = "Broadcast Channel ID"];
inline bool CBroadcast_GetClipDetails_Response::_internal_has_channel_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_GetClipDetails_Response::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void CBroadcast_GetClipDetails_Response::clear_channel_id() {
  channel_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CBroadcast_GetClipDetails_Response::_internal_channel_id() const {
  return channel_id_;
}
inline uint64_t CBroadcast_GetClipDetails_Response::channel_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetClipDetails_Response.channel_id)
  return _internal_channel_id();
}
inline void CBroadcast_GetClipDetails_Response::_internal_set_channel_id(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  channel_id_ = value;
}
inline void CBroadcast_GetClipDetails_Response::set_channel_id(uint64_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetClipDetails_Response.channel_id)
}

// optional uint32 app_id = 4 [(.description) = "App ID stream is tagged with"];
inline bool CBroadcast_GetClipDetails_Response::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CBroadcast_GetClipDetails_Response::has_app_id() const {
  return _internal_has_app_id();
}
inline void CBroadcast_GetClipDetails_Response::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CBroadcast_GetClipDetails_Response::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CBroadcast_GetClipDetails_Response::app_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetClipDetails_Response.app_id)
  return _internal_app_id();
}
inline void CBroadcast_GetClipDetails_Response::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  app_id_ = value;
}
inline void CBroadcast_GetClipDetails_Response::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetClipDetails_Response.app_id)
}

// optional uint32 accountid_broadcaster = 5 [(.description) = "Account ID of broadcaster"];
inline bool CBroadcast_GetClipDetails_Response::_internal_has_accountid_broadcaster() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CBroadcast_GetClipDetails_Response::has_accountid_broadcaster() const {
  return _internal_has_accountid_broadcaster();
}
inline void CBroadcast_GetClipDetails_Response::clear_accountid_broadcaster() {
  accountid_broadcaster_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CBroadcast_GetClipDetails_Response::_internal_accountid_broadcaster() const {
  return accountid_broadcaster_;
}
inline uint32_t CBroadcast_GetClipDetails_Response::accountid_broadcaster() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetClipDetails_Response.accountid_broadcaster)
  return _internal_accountid_broadcaster();
}
inline void CBroadcast_GetClipDetails_Response::_internal_set_accountid_broadcaster(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  accountid_broadcaster_ = value;
}
inline void CBroadcast_GetClipDetails_Response::set_accountid_broadcaster(uint32_t value) {
  _internal_set_accountid_broadcaster(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetClipDetails_Response.accountid_broadcaster)
}

// optional uint32 accountid_clipmaker = 6 [(.description) = "Account ID of clip-maker"];
inline bool CBroadcast_GetClipDetails_Response::_internal_has_accountid_clipmaker() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CBroadcast_GetClipDetails_Response::has_accountid_clipmaker() const {
  return _internal_has_accountid_clipmaker();
}
inline void CBroadcast_GetClipDetails_Response::clear_accountid_clipmaker() {
  accountid_clipmaker_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CBroadcast_GetClipDetails_Response::_internal_accountid_clipmaker() const {
  return accountid_clipmaker_;
}
inline uint32_t CBroadcast_GetClipDetails_Response::accountid_clipmaker() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetClipDetails_Response.accountid_clipmaker)
  return _internal_accountid_clipmaker();
}
inline void CBroadcast_GetClipDetails_Response::_internal_set_accountid_clipmaker(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  accountid_clipmaker_ = value;
}
inline void CBroadcast_GetClipDetails_Response::set_accountid_clipmaker(uint32_t value) {
  _internal_set_accountid_clipmaker(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetClipDetails_Response.accountid_clipmaker)
}

// optional string video_description = 7 [(.description) = "Short name or description of this clip"];
inline bool CBroadcast_GetClipDetails_Response::_internal_has_video_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetClipDetails_Response::has_video_description() const {
  return _internal_has_video_description();
}
inline void CBroadcast_GetClipDetails_Response::clear_video_description() {
  video_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_GetClipDetails_Response::video_description() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetClipDetails_Response.video_description)
  return _internal_video_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_GetClipDetails_Response::set_video_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 video_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_GetClipDetails_Response.video_description)
}
inline std::string* CBroadcast_GetClipDetails_Response::mutable_video_description() {
  std::string* _s = _internal_mutable_video_description();
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetClipDetails_Response.video_description)
  return _s;
}
inline const std::string& CBroadcast_GetClipDetails_Response::_internal_video_description() const {
  return video_description_.Get();
}
inline void CBroadcast_GetClipDetails_Response::_internal_set_video_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  video_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetClipDetails_Response::_internal_mutable_video_description() {
  _has_bits_[0] |= 0x00000001u;
  return video_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetClipDetails_Response::release_video_description() {
  // @@protoc_insertion_point(field_release:CBroadcast_GetClipDetails_Response.video_description)
  if (!_internal_has_video_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = video_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (video_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    video_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_GetClipDetails_Response::set_allocated_video_description(std::string* video_description) {
  if (video_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  video_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video_description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (video_description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    video_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_GetClipDetails_Response.video_description)
}

// optional uint32 start_time = 8 [(.description) = "Wall time clip was broadcasted live"];
inline bool CBroadcast_GetClipDetails_Response::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CBroadcast_GetClipDetails_Response::has_start_time() const {
  return _internal_has_start_time();
}
inline void CBroadcast_GetClipDetails_Response::clear_start_time() {
  start_time_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CBroadcast_GetClipDetails_Response::_internal_start_time() const {
  return start_time_;
}
inline uint32_t CBroadcast_GetClipDetails_Response::start_time() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetClipDetails_Response.start_time)
  return _internal_start_time();
}
inline void CBroadcast_GetClipDetails_Response::_internal_set_start_time(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  start_time_ = value;
}
inline void CBroadcast_GetClipDetails_Response::set_start_time(uint32_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetClipDetails_Response.start_time)
}

// optional uint32 length_milliseconds = 9 [(.description) = "length of video in MS"];
inline bool CBroadcast_GetClipDetails_Response::_internal_has_length_milliseconds() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CBroadcast_GetClipDetails_Response::has_length_milliseconds() const {
  return _internal_has_length_milliseconds();
}
inline void CBroadcast_GetClipDetails_Response::clear_length_milliseconds() {
  length_milliseconds_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CBroadcast_GetClipDetails_Response::_internal_length_milliseconds() const {
  return length_milliseconds_;
}
inline uint32_t CBroadcast_GetClipDetails_Response::length_milliseconds() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetClipDetails_Response.length_milliseconds)
  return _internal_length_milliseconds();
}
inline void CBroadcast_GetClipDetails_Response::_internal_set_length_milliseconds(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  length_milliseconds_ = value;
}
inline void CBroadcast_GetClipDetails_Response::set_length_milliseconds(uint32_t value) {
  _internal_set_length_milliseconds(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetClipDetails_Response.length_milliseconds)
}

// optional string thumbnail_path = 10 [(.description) = "Path for thumbnail URL"];
inline bool CBroadcast_GetClipDetails_Response::_internal_has_thumbnail_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_GetClipDetails_Response::has_thumbnail_path() const {
  return _internal_has_thumbnail_path();
}
inline void CBroadcast_GetClipDetails_Response::clear_thumbnail_path() {
  thumbnail_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBroadcast_GetClipDetails_Response::thumbnail_path() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetClipDetails_Response.thumbnail_path)
  return _internal_thumbnail_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_GetClipDetails_Response::set_thumbnail_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 thumbnail_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_GetClipDetails_Response.thumbnail_path)
}
inline std::string* CBroadcast_GetClipDetails_Response::mutable_thumbnail_path() {
  std::string* _s = _internal_mutable_thumbnail_path();
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetClipDetails_Response.thumbnail_path)
  return _s;
}
inline const std::string& CBroadcast_GetClipDetails_Response::_internal_thumbnail_path() const {
  return thumbnail_path_.Get();
}
inline void CBroadcast_GetClipDetails_Response::_internal_set_thumbnail_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  thumbnail_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetClipDetails_Response::_internal_mutable_thumbnail_path() {
  _has_bits_[0] |= 0x00000002u;
  return thumbnail_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetClipDetails_Response::release_thumbnail_path() {
  // @@protoc_insertion_point(field_release:CBroadcast_GetClipDetails_Response.thumbnail_path)
  if (!_internal_has_thumbnail_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = thumbnail_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_GetClipDetails_Response::set_allocated_thumbnail_path(std::string* thumbnail_path) {
  if (thumbnail_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  thumbnail_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnail_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_GetClipDetails_Response.thumbnail_path)
}

// -------------------------------------------------------------------

// CBroadcast_SetRTMPInfo_Request

// optional int32 broadcast_permission = 1;
inline bool CBroadcast_SetRTMPInfo_Request::_internal_has_broadcast_permission() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_SetRTMPInfo_Request::has_broadcast_permission() const {
  return _internal_has_broadcast_permission();
}
inline void CBroadcast_SetRTMPInfo_Request::clear_broadcast_permission() {
  broadcast_permission_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CBroadcast_SetRTMPInfo_Request::_internal_broadcast_permission() const {
  return broadcast_permission_;
}
inline int32_t CBroadcast_SetRTMPInfo_Request::broadcast_permission() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetRTMPInfo_Request.broadcast_permission)
  return _internal_broadcast_permission();
}
inline void CBroadcast_SetRTMPInfo_Request::_internal_set_broadcast_permission(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_permission_ = value;
}
inline void CBroadcast_SetRTMPInfo_Request::set_broadcast_permission(int32_t value) {
  _internal_set_broadcast_permission(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SetRTMPInfo_Request.broadcast_permission)
}

// optional bool update_token = 2;
inline bool CBroadcast_SetRTMPInfo_Request::_internal_has_update_token() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CBroadcast_SetRTMPInfo_Request::has_update_token() const {
  return _internal_has_update_token();
}
inline void CBroadcast_SetRTMPInfo_Request::clear_update_token() {
  update_token_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CBroadcast_SetRTMPInfo_Request::_internal_update_token() const {
  return update_token_;
}
inline bool CBroadcast_SetRTMPInfo_Request::update_token() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetRTMPInfo_Request.update_token)
  return _internal_update_token();
}
inline void CBroadcast_SetRTMPInfo_Request::_internal_set_update_token(bool value) {
  _has_bits_[0] |= 0x00000100u;
  update_token_ = value;
}
inline void CBroadcast_SetRTMPInfo_Request::set_update_token(bool value) {
  _internal_set_update_token(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SetRTMPInfo_Request.update_token)
}

// optional int32 broadcast_delay = 3;
inline bool CBroadcast_SetRTMPInfo_Request::_internal_has_broadcast_delay() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_SetRTMPInfo_Request::has_broadcast_delay() const {
  return _internal_has_broadcast_delay();
}
inline void CBroadcast_SetRTMPInfo_Request::clear_broadcast_delay() {
  broadcast_delay_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CBroadcast_SetRTMPInfo_Request::_internal_broadcast_delay() const {
  return broadcast_delay_;
}
inline int32_t CBroadcast_SetRTMPInfo_Request::broadcast_delay() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetRTMPInfo_Request.broadcast_delay)
  return _internal_broadcast_delay();
}
inline void CBroadcast_SetRTMPInfo_Request::_internal_set_broadcast_delay(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  broadcast_delay_ = value;
}
inline void CBroadcast_SetRTMPInfo_Request::set_broadcast_delay(int32_t value) {
  _internal_set_broadcast_delay(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SetRTMPInfo_Request.broadcast_delay)
}

// optional uint32 app_id = 4;
inline bool CBroadcast_SetRTMPInfo_Request::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_SetRTMPInfo_Request::has_app_id() const {
  return _internal_has_app_id();
}
inline void CBroadcast_SetRTMPInfo_Request::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CBroadcast_SetRTMPInfo_Request::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CBroadcast_SetRTMPInfo_Request::app_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetRTMPInfo_Request.app_id)
  return _internal_app_id();
}
inline void CBroadcast_SetRTMPInfo_Request::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  app_id_ = value;
}
inline void CBroadcast_SetRTMPInfo_Request::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SetRTMPInfo_Request.app_id)
}

// optional uint32 required_app_id = 5;
inline bool CBroadcast_SetRTMPInfo_Request::_internal_has_required_app_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_SetRTMPInfo_Request::has_required_app_id() const {
  return _internal_has_required_app_id();
}
inline void CBroadcast_SetRTMPInfo_Request::clear_required_app_id() {
  required_app_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CBroadcast_SetRTMPInfo_Request::_internal_required_app_id() const {
  return required_app_id_;
}
inline uint32_t CBroadcast_SetRTMPInfo_Request::required_app_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetRTMPInfo_Request.required_app_id)
  return _internal_required_app_id();
}
inline void CBroadcast_SetRTMPInfo_Request::_internal_set_required_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  required_app_id_ = value;
}
inline void CBroadcast_SetRTMPInfo_Request::set_required_app_id(uint32_t value) {
  _internal_set_required_app_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SetRTMPInfo_Request.required_app_id)
}

// optional .EBroadcastChatPermission broadcast_chat_permission = 6 [default = k_EBroadcastChatPermissionPublic, (.description) = "Who is permitted to send a chat message during broadcast"];
inline bool CBroadcast_SetRTMPInfo_Request::_internal_has_broadcast_chat_permission() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CBroadcast_SetRTMPInfo_Request::has_broadcast_chat_permission() const {
  return _internal_has_broadcast_chat_permission();
}
inline void CBroadcast_SetRTMPInfo_Request::clear_broadcast_chat_permission() {
  broadcast_chat_permission_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::EBroadcastChatPermission CBroadcast_SetRTMPInfo_Request::_internal_broadcast_chat_permission() const {
  return static_cast< ::EBroadcastChatPermission >(broadcast_chat_permission_);
}
inline ::EBroadcastChatPermission CBroadcast_SetRTMPInfo_Request::broadcast_chat_permission() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetRTMPInfo_Request.broadcast_chat_permission)
  return _internal_broadcast_chat_permission();
}
inline void CBroadcast_SetRTMPInfo_Request::_internal_set_broadcast_chat_permission(::EBroadcastChatPermission value) {
  assert(::EBroadcastChatPermission_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  broadcast_chat_permission_ = value;
}
inline void CBroadcast_SetRTMPInfo_Request::set_broadcast_chat_permission(::EBroadcastChatPermission value) {
  _internal_set_broadcast_chat_permission(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SetRTMPInfo_Request.broadcast_chat_permission)
}

// optional int32 broadcast_buffer = 7 [(.description) = "Previous seconds we keep of the stream available"];
inline bool CBroadcast_SetRTMPInfo_Request::_internal_has_broadcast_buffer() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CBroadcast_SetRTMPInfo_Request::has_broadcast_buffer() const {
  return _internal_has_broadcast_buffer();
}
inline void CBroadcast_SetRTMPInfo_Request::clear_broadcast_buffer() {
  broadcast_buffer_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t CBroadcast_SetRTMPInfo_Request::_internal_broadcast_buffer() const {
  return broadcast_buffer_;
}
inline int32_t CBroadcast_SetRTMPInfo_Request::broadcast_buffer() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetRTMPInfo_Request.broadcast_buffer)
  return _internal_broadcast_buffer();
}
inline void CBroadcast_SetRTMPInfo_Request::_internal_set_broadcast_buffer(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  broadcast_buffer_ = value;
}
inline void CBroadcast_SetRTMPInfo_Request::set_broadcast_buffer(int32_t value) {
  _internal_set_broadcast_buffer(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SetRTMPInfo_Request.broadcast_buffer)
}

// optional fixed64 steamid = 8 [(.description) = "broadcaster steamID if not logged-in user"];
inline bool CBroadcast_SetRTMPInfo_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CBroadcast_SetRTMPInfo_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CBroadcast_SetRTMPInfo_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CBroadcast_SetRTMPInfo_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CBroadcast_SetRTMPInfo_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetRTMPInfo_Request.steamid)
  return _internal_steamid();
}
inline void CBroadcast_SetRTMPInfo_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  steamid_ = value;
}
inline void CBroadcast_SetRTMPInfo_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SetRTMPInfo_Request.steamid)
}

// optional uint32 chat_rate_limit = 9 [(.description) = "Seconds required between chat messages"];
inline bool CBroadcast_SetRTMPInfo_Request::_internal_has_chat_rate_limit() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CBroadcast_SetRTMPInfo_Request::has_chat_rate_limit() const {
  return _internal_has_chat_rate_limit();
}
inline void CBroadcast_SetRTMPInfo_Request::clear_chat_rate_limit() {
  chat_rate_limit_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CBroadcast_SetRTMPInfo_Request::_internal_chat_rate_limit() const {
  return chat_rate_limit_;
}
inline uint32_t CBroadcast_SetRTMPInfo_Request::chat_rate_limit() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetRTMPInfo_Request.chat_rate_limit)
  return _internal_chat_rate_limit();
}
inline void CBroadcast_SetRTMPInfo_Request::_internal_set_chat_rate_limit(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  chat_rate_limit_ = value;
}
inline void CBroadcast_SetRTMPInfo_Request::set_chat_rate_limit(uint32_t value) {
  _internal_set_chat_rate_limit(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SetRTMPInfo_Request.chat_rate_limit)
}

// optional bool enable_replay = 10 [(.description) = "Enable replay of last upload"];
inline bool CBroadcast_SetRTMPInfo_Request::_internal_has_enable_replay() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CBroadcast_SetRTMPInfo_Request::has_enable_replay() const {
  return _internal_has_enable_replay();
}
inline void CBroadcast_SetRTMPInfo_Request::clear_enable_replay() {
  enable_replay_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CBroadcast_SetRTMPInfo_Request::_internal_enable_replay() const {
  return enable_replay_;
}
inline bool CBroadcast_SetRTMPInfo_Request::enable_replay() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetRTMPInfo_Request.enable_replay)
  return _internal_enable_replay();
}
inline void CBroadcast_SetRTMPInfo_Request::_internal_set_enable_replay(bool value) {
  _has_bits_[0] |= 0x00000200u;
  enable_replay_ = value;
}
inline void CBroadcast_SetRTMPInfo_Request::set_enable_replay(bool value) {
  _internal_set_enable_replay(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SetRTMPInfo_Request.enable_replay)
}

// optional bool is_partner_chat_only = 11 [(.description) = "When true, then only steamwork partner can create chat messages."];
inline bool CBroadcast_SetRTMPInfo_Request::_internal_has_is_partner_chat_only() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CBroadcast_SetRTMPInfo_Request::has_is_partner_chat_only() const {
  return _internal_has_is_partner_chat_only();
}
inline void CBroadcast_SetRTMPInfo_Request::clear_is_partner_chat_only() {
  is_partner_chat_only_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CBroadcast_SetRTMPInfo_Request::_internal_is_partner_chat_only() const {
  return is_partner_chat_only_;
}
inline bool CBroadcast_SetRTMPInfo_Request::is_partner_chat_only() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetRTMPInfo_Request.is_partner_chat_only)
  return _internal_is_partner_chat_only();
}
inline void CBroadcast_SetRTMPInfo_Request::_internal_set_is_partner_chat_only(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_partner_chat_only_ = value;
}
inline void CBroadcast_SetRTMPInfo_Request::set_is_partner_chat_only(bool value) {
  _internal_set_is_partner_chat_only(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SetRTMPInfo_Request.is_partner_chat_only)
}

// optional string wordban_list = 12;
inline bool CBroadcast_SetRTMPInfo_Request::_internal_has_wordban_list() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_SetRTMPInfo_Request::has_wordban_list() const {
  return _internal_has_wordban_list();
}
inline void CBroadcast_SetRTMPInfo_Request::clear_wordban_list() {
  wordban_list_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_SetRTMPInfo_Request::wordban_list() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SetRTMPInfo_Request.wordban_list)
  return _internal_wordban_list();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_SetRTMPInfo_Request::set_wordban_list(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 wordban_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_SetRTMPInfo_Request.wordban_list)
}
inline std::string* CBroadcast_SetRTMPInfo_Request::mutable_wordban_list() {
  std::string* _s = _internal_mutable_wordban_list();
  // @@protoc_insertion_point(field_mutable:CBroadcast_SetRTMPInfo_Request.wordban_list)
  return _s;
}
inline const std::string& CBroadcast_SetRTMPInfo_Request::_internal_wordban_list() const {
  return wordban_list_.Get();
}
inline void CBroadcast_SetRTMPInfo_Request::_internal_set_wordban_list(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  wordban_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_SetRTMPInfo_Request::_internal_mutable_wordban_list() {
  _has_bits_[0] |= 0x00000001u;
  return wordban_list_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_SetRTMPInfo_Request::release_wordban_list() {
  // @@protoc_insertion_point(field_release:CBroadcast_SetRTMPInfo_Request.wordban_list)
  if (!_internal_has_wordban_list()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = wordban_list_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (wordban_list_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    wordban_list_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_SetRTMPInfo_Request::set_allocated_wordban_list(std::string* wordban_list) {
  if (wordban_list != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  wordban_list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wordban_list,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (wordban_list_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    wordban_list_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_SetRTMPInfo_Request.wordban_list)
}

// -------------------------------------------------------------------

// CBroadcast_SetRTMPInfo_Response

// -------------------------------------------------------------------

// CBroadcast_GetRTMPInfo_Request

// optional uint32 ip = 1;
inline bool CBroadcast_GetRTMPInfo_Request::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_GetRTMPInfo_Request::has_ip() const {
  return _internal_has_ip();
}
inline void CBroadcast_GetRTMPInfo_Request::clear_ip() {
  ip_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CBroadcast_GetRTMPInfo_Request::_internal_ip() const {
  return ip_;
}
inline uint32_t CBroadcast_GetRTMPInfo_Request::ip() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetRTMPInfo_Request.ip)
  return _internal_ip();
}
inline void CBroadcast_GetRTMPInfo_Request::_internal_set_ip(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ip_ = value;
}
inline void CBroadcast_GetRTMPInfo_Request::set_ip(uint32_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetRTMPInfo_Request.ip)
}

// optional fixed64 steamid = 2 [(.description) = "broadcaster steamID if not logged-in user"];
inline bool CBroadcast_GetRTMPInfo_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetRTMPInfo_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CBroadcast_GetRTMPInfo_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_GetRTMPInfo_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CBroadcast_GetRTMPInfo_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetRTMPInfo_Request.steamid)
  return _internal_steamid();
}
inline void CBroadcast_GetRTMPInfo_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CBroadcast_GetRTMPInfo_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetRTMPInfo_Request.steamid)
}

// -------------------------------------------------------------------

// CBroadcast_GetRTMPInfo_Response

// optional int32 broadcast_permission = 1;
inline bool CBroadcast_GetRTMPInfo_Response::_internal_has_broadcast_permission() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_GetRTMPInfo_Response::has_broadcast_permission() const {
  return _internal_has_broadcast_permission();
}
inline void CBroadcast_GetRTMPInfo_Response::clear_broadcast_permission() {
  broadcast_permission_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CBroadcast_GetRTMPInfo_Response::_internal_broadcast_permission() const {
  return broadcast_permission_;
}
inline int32_t CBroadcast_GetRTMPInfo_Response::broadcast_permission() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetRTMPInfo_Response.broadcast_permission)
  return _internal_broadcast_permission();
}
inline void CBroadcast_GetRTMPInfo_Response::_internal_set_broadcast_permission(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  broadcast_permission_ = value;
}
inline void CBroadcast_GetRTMPInfo_Response::set_broadcast_permission(int32_t value) {
  _internal_set_broadcast_permission(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetRTMPInfo_Response.broadcast_permission)
}

// optional string rtmp_host = 2;
inline bool CBroadcast_GetRTMPInfo_Response::_internal_has_rtmp_host() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetRTMPInfo_Response::has_rtmp_host() const {
  return _internal_has_rtmp_host();
}
inline void CBroadcast_GetRTMPInfo_Response::clear_rtmp_host() {
  rtmp_host_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_GetRTMPInfo_Response::rtmp_host() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetRTMPInfo_Response.rtmp_host)
  return _internal_rtmp_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_GetRTMPInfo_Response::set_rtmp_host(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 rtmp_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_GetRTMPInfo_Response.rtmp_host)
}
inline std::string* CBroadcast_GetRTMPInfo_Response::mutable_rtmp_host() {
  std::string* _s = _internal_mutable_rtmp_host();
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetRTMPInfo_Response.rtmp_host)
  return _s;
}
inline const std::string& CBroadcast_GetRTMPInfo_Response::_internal_rtmp_host() const {
  return rtmp_host_.Get();
}
inline void CBroadcast_GetRTMPInfo_Response::_internal_set_rtmp_host(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rtmp_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetRTMPInfo_Response::_internal_mutable_rtmp_host() {
  _has_bits_[0] |= 0x00000001u;
  return rtmp_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetRTMPInfo_Response::release_rtmp_host() {
  // @@protoc_insertion_point(field_release:CBroadcast_GetRTMPInfo_Response.rtmp_host)
  if (!_internal_has_rtmp_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = rtmp_host_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rtmp_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rtmp_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_GetRTMPInfo_Response::set_allocated_rtmp_host(std::string* rtmp_host) {
  if (rtmp_host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rtmp_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rtmp_host,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rtmp_host_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rtmp_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_GetRTMPInfo_Response.rtmp_host)
}

// optional string rtmp_token = 3;
inline bool CBroadcast_GetRTMPInfo_Response::_internal_has_rtmp_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_GetRTMPInfo_Response::has_rtmp_token() const {
  return _internal_has_rtmp_token();
}
inline void CBroadcast_GetRTMPInfo_Response::clear_rtmp_token() {
  rtmp_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBroadcast_GetRTMPInfo_Response::rtmp_token() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetRTMPInfo_Response.rtmp_token)
  return _internal_rtmp_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_GetRTMPInfo_Response::set_rtmp_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 rtmp_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_GetRTMPInfo_Response.rtmp_token)
}
inline std::string* CBroadcast_GetRTMPInfo_Response::mutable_rtmp_token() {
  std::string* _s = _internal_mutable_rtmp_token();
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetRTMPInfo_Response.rtmp_token)
  return _s;
}
inline const std::string& CBroadcast_GetRTMPInfo_Response::_internal_rtmp_token() const {
  return rtmp_token_.Get();
}
inline void CBroadcast_GetRTMPInfo_Response::_internal_set_rtmp_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  rtmp_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetRTMPInfo_Response::_internal_mutable_rtmp_token() {
  _has_bits_[0] |= 0x00000002u;
  return rtmp_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetRTMPInfo_Response::release_rtmp_token() {
  // @@protoc_insertion_point(field_release:CBroadcast_GetRTMPInfo_Response.rtmp_token)
  if (!_internal_has_rtmp_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = rtmp_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rtmp_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rtmp_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_GetRTMPInfo_Response::set_allocated_rtmp_token(std::string* rtmp_token) {
  if (rtmp_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rtmp_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rtmp_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rtmp_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rtmp_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_GetRTMPInfo_Response.rtmp_token)
}

// optional int32 broadcast_delay = 4;
inline bool CBroadcast_GetRTMPInfo_Response::_internal_has_broadcast_delay() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_GetRTMPInfo_Response::has_broadcast_delay() const {
  return _internal_has_broadcast_delay();
}
inline void CBroadcast_GetRTMPInfo_Response::clear_broadcast_delay() {
  broadcast_delay_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CBroadcast_GetRTMPInfo_Response::_internal_broadcast_delay() const {
  return broadcast_delay_;
}
inline int32_t CBroadcast_GetRTMPInfo_Response::broadcast_delay() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetRTMPInfo_Response.broadcast_delay)
  return _internal_broadcast_delay();
}
inline void CBroadcast_GetRTMPInfo_Response::_internal_set_broadcast_delay(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  broadcast_delay_ = value;
}
inline void CBroadcast_GetRTMPInfo_Response::set_broadcast_delay(int32_t value) {
  _internal_set_broadcast_delay(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetRTMPInfo_Response.broadcast_delay)
}

// optional uint32 app_id = 5;
inline bool CBroadcast_GetRTMPInfo_Response::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CBroadcast_GetRTMPInfo_Response::has_app_id() const {
  return _internal_has_app_id();
}
inline void CBroadcast_GetRTMPInfo_Response::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CBroadcast_GetRTMPInfo_Response::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CBroadcast_GetRTMPInfo_Response::app_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetRTMPInfo_Response.app_id)
  return _internal_app_id();
}
inline void CBroadcast_GetRTMPInfo_Response::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  app_id_ = value;
}
inline void CBroadcast_GetRTMPInfo_Response::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetRTMPInfo_Response.app_id)
}

// optional uint32 required_app_id = 6;
inline bool CBroadcast_GetRTMPInfo_Response::_internal_has_required_app_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CBroadcast_GetRTMPInfo_Response::has_required_app_id() const {
  return _internal_has_required_app_id();
}
inline void CBroadcast_GetRTMPInfo_Response::clear_required_app_id() {
  required_app_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CBroadcast_GetRTMPInfo_Response::_internal_required_app_id() const {
  return required_app_id_;
}
inline uint32_t CBroadcast_GetRTMPInfo_Response::required_app_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetRTMPInfo_Response.required_app_id)
  return _internal_required_app_id();
}
inline void CBroadcast_GetRTMPInfo_Response::_internal_set_required_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  required_app_id_ = value;
}
inline void CBroadcast_GetRTMPInfo_Response::set_required_app_id(uint32_t value) {
  _internal_set_required_app_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetRTMPInfo_Response.required_app_id)
}

// optional .EBroadcastChatPermission broadcast_chat_permission = 7 [default = k_EBroadcastChatPermissionPublic, (.description) = "Who is permitted to send a chat message during broadcast"];
inline bool CBroadcast_GetRTMPInfo_Response::_internal_has_broadcast_chat_permission() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CBroadcast_GetRTMPInfo_Response::has_broadcast_chat_permission() const {
  return _internal_has_broadcast_chat_permission();
}
inline void CBroadcast_GetRTMPInfo_Response::clear_broadcast_chat_permission() {
  broadcast_chat_permission_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::EBroadcastChatPermission CBroadcast_GetRTMPInfo_Response::_internal_broadcast_chat_permission() const {
  return static_cast< ::EBroadcastChatPermission >(broadcast_chat_permission_);
}
inline ::EBroadcastChatPermission CBroadcast_GetRTMPInfo_Response::broadcast_chat_permission() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetRTMPInfo_Response.broadcast_chat_permission)
  return _internal_broadcast_chat_permission();
}
inline void CBroadcast_GetRTMPInfo_Response::_internal_set_broadcast_chat_permission(::EBroadcastChatPermission value) {
  assert(::EBroadcastChatPermission_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  broadcast_chat_permission_ = value;
}
inline void CBroadcast_GetRTMPInfo_Response::set_broadcast_chat_permission(::EBroadcastChatPermission value) {
  _internal_set_broadcast_chat_permission(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetRTMPInfo_Response.broadcast_chat_permission)
}

// optional int32 broadcast_buffer = 8 [(.description) = "Seconds we keep streams available"];
inline bool CBroadcast_GetRTMPInfo_Response::_internal_has_broadcast_buffer() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CBroadcast_GetRTMPInfo_Response::has_broadcast_buffer() const {
  return _internal_has_broadcast_buffer();
}
inline void CBroadcast_GetRTMPInfo_Response::clear_broadcast_buffer() {
  broadcast_buffer_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t CBroadcast_GetRTMPInfo_Response::_internal_broadcast_buffer() const {
  return broadcast_buffer_;
}
inline int32_t CBroadcast_GetRTMPInfo_Response::broadcast_buffer() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetRTMPInfo_Response.broadcast_buffer)
  return _internal_broadcast_buffer();
}
inline void CBroadcast_GetRTMPInfo_Response::_internal_set_broadcast_buffer(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  broadcast_buffer_ = value;
}
inline void CBroadcast_GetRTMPInfo_Response::set_broadcast_buffer(int32_t value) {
  _internal_set_broadcast_buffer(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetRTMPInfo_Response.broadcast_buffer)
}

// optional fixed64 steamid = 9 [(.description) = "broadcaster steamID"];
inline bool CBroadcast_GetRTMPInfo_Response::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CBroadcast_GetRTMPInfo_Response::has_steamid() const {
  return _internal_has_steamid();
}
inline void CBroadcast_GetRTMPInfo_Response::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CBroadcast_GetRTMPInfo_Response::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CBroadcast_GetRTMPInfo_Response::steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetRTMPInfo_Response.steamid)
  return _internal_steamid();
}
inline void CBroadcast_GetRTMPInfo_Response::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000200u;
  steamid_ = value;
}
inline void CBroadcast_GetRTMPInfo_Response::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetRTMPInfo_Response.steamid)
}

// optional uint32 chat_rate_limit = 10 [(.description) = "Seconds required between chat messages"];
inline bool CBroadcast_GetRTMPInfo_Response::_internal_has_chat_rate_limit() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CBroadcast_GetRTMPInfo_Response::has_chat_rate_limit() const {
  return _internal_has_chat_rate_limit();
}
inline void CBroadcast_GetRTMPInfo_Response::clear_chat_rate_limit() {
  chat_rate_limit_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CBroadcast_GetRTMPInfo_Response::_internal_chat_rate_limit() const {
  return chat_rate_limit_;
}
inline uint32_t CBroadcast_GetRTMPInfo_Response::chat_rate_limit() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetRTMPInfo_Response.chat_rate_limit)
  return _internal_chat_rate_limit();
}
inline void CBroadcast_GetRTMPInfo_Response::_internal_set_chat_rate_limit(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  chat_rate_limit_ = value;
}
inline void CBroadcast_GetRTMPInfo_Response::set_chat_rate_limit(uint32_t value) {
  _internal_set_chat_rate_limit(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetRTMPInfo_Response.chat_rate_limit)
}

// optional bool enable_replay = 11 [(.description) = "Enable replay of last upload"];
inline bool CBroadcast_GetRTMPInfo_Response::_internal_has_enable_replay() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CBroadcast_GetRTMPInfo_Response::has_enable_replay() const {
  return _internal_has_enable_replay();
}
inline void CBroadcast_GetRTMPInfo_Response::clear_enable_replay() {
  enable_replay_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CBroadcast_GetRTMPInfo_Response::_internal_enable_replay() const {
  return enable_replay_;
}
inline bool CBroadcast_GetRTMPInfo_Response::enable_replay() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetRTMPInfo_Response.enable_replay)
  return _internal_enable_replay();
}
inline void CBroadcast_GetRTMPInfo_Response::_internal_set_enable_replay(bool value) {
  _has_bits_[0] |= 0x00000800u;
  enable_replay_ = value;
}
inline void CBroadcast_GetRTMPInfo_Response::set_enable_replay(bool value) {
  _internal_set_enable_replay(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetRTMPInfo_Response.enable_replay)
}

// optional bool is_partner_chat_only = 12 [(.description) = "When true, then only steamwork partner can create chat messages."];
inline bool CBroadcast_GetRTMPInfo_Response::_internal_has_is_partner_chat_only() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CBroadcast_GetRTMPInfo_Response::has_is_partner_chat_only() const {
  return _internal_has_is_partner_chat_only();
}
inline void CBroadcast_GetRTMPInfo_Response::clear_is_partner_chat_only() {
  is_partner_chat_only_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CBroadcast_GetRTMPInfo_Response::_internal_is_partner_chat_only() const {
  return is_partner_chat_only_;
}
inline bool CBroadcast_GetRTMPInfo_Response::is_partner_chat_only() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetRTMPInfo_Response.is_partner_chat_only)
  return _internal_is_partner_chat_only();
}
inline void CBroadcast_GetRTMPInfo_Response::_internal_set_is_partner_chat_only(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_partner_chat_only_ = value;
}
inline void CBroadcast_GetRTMPInfo_Response::set_is_partner_chat_only(bool value) {
  _internal_set_is_partner_chat_only(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetRTMPInfo_Response.is_partner_chat_only)
}

// optional string wordban_list = 13;
inline bool CBroadcast_GetRTMPInfo_Response::_internal_has_wordban_list() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_GetRTMPInfo_Response::has_wordban_list() const {
  return _internal_has_wordban_list();
}
inline void CBroadcast_GetRTMPInfo_Response::clear_wordban_list() {
  wordban_list_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CBroadcast_GetRTMPInfo_Response::wordban_list() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetRTMPInfo_Response.wordban_list)
  return _internal_wordban_list();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_GetRTMPInfo_Response::set_wordban_list(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 wordban_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_GetRTMPInfo_Response.wordban_list)
}
inline std::string* CBroadcast_GetRTMPInfo_Response::mutable_wordban_list() {
  std::string* _s = _internal_mutable_wordban_list();
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetRTMPInfo_Response.wordban_list)
  return _s;
}
inline const std::string& CBroadcast_GetRTMPInfo_Response::_internal_wordban_list() const {
  return wordban_list_.Get();
}
inline void CBroadcast_GetRTMPInfo_Response::_internal_set_wordban_list(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  wordban_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetRTMPInfo_Response::_internal_mutable_wordban_list() {
  _has_bits_[0] |= 0x00000004u;
  return wordban_list_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetRTMPInfo_Response::release_wordban_list() {
  // @@protoc_insertion_point(field_release:CBroadcast_GetRTMPInfo_Response.wordban_list)
  if (!_internal_has_wordban_list()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = wordban_list_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (wordban_list_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    wordban_list_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_GetRTMPInfo_Response::set_allocated_wordban_list(std::string* wordban_list) {
  if (wordban_list != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  wordban_list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wordban_list,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (wordban_list_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    wordban_list_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_GetRTMPInfo_Response.wordban_list)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCHaveTURNServer_Notification

// optional fixed64 broadcast_session_id = 1;
inline bool CBroadcast_WebRTCHaveTURNServer_Notification::_internal_has_broadcast_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCHaveTURNServer_Notification::has_broadcast_session_id() const {
  return _internal_has_broadcast_session_id();
}
inline void CBroadcast_WebRTCHaveTURNServer_Notification::clear_broadcast_session_id() {
  broadcast_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_WebRTCHaveTURNServer_Notification::_internal_broadcast_session_id() const {
  return broadcast_session_id_;
}
inline uint64_t CBroadcast_WebRTCHaveTURNServer_Notification::broadcast_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCHaveTURNServer_Notification.broadcast_session_id)
  return _internal_broadcast_session_id();
}
inline void CBroadcast_WebRTCHaveTURNServer_Notification::_internal_set_broadcast_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_session_id_ = value;
}
inline void CBroadcast_WebRTCHaveTURNServer_Notification::set_broadcast_session_id(uint64_t value) {
  _internal_set_broadcast_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCHaveTURNServer_Notification.broadcast_session_id)
}

// optional string turn_server = 2;
inline bool CBroadcast_WebRTCHaveTURNServer_Notification::_internal_has_turn_server() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCHaveTURNServer_Notification::has_turn_server() const {
  return _internal_has_turn_server();
}
inline void CBroadcast_WebRTCHaveTURNServer_Notification::clear_turn_server() {
  turn_server_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_WebRTCHaveTURNServer_Notification::turn_server() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCHaveTURNServer_Notification.turn_server)
  return _internal_turn_server();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_WebRTCHaveTURNServer_Notification::set_turn_server(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 turn_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCHaveTURNServer_Notification.turn_server)
}
inline std::string* CBroadcast_WebRTCHaveTURNServer_Notification::mutable_turn_server() {
  std::string* _s = _internal_mutable_turn_server();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WebRTCHaveTURNServer_Notification.turn_server)
  return _s;
}
inline const std::string& CBroadcast_WebRTCHaveTURNServer_Notification::_internal_turn_server() const {
  return turn_server_.Get();
}
inline void CBroadcast_WebRTCHaveTURNServer_Notification::_internal_set_turn_server(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  turn_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_WebRTCHaveTURNServer_Notification::_internal_mutable_turn_server() {
  _has_bits_[0] |= 0x00000001u;
  return turn_server_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_WebRTCHaveTURNServer_Notification::release_turn_server() {
  // @@protoc_insertion_point(field_release:CBroadcast_WebRTCHaveTURNServer_Notification.turn_server)
  if (!_internal_has_turn_server()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = turn_server_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (turn_server_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_WebRTCHaveTURNServer_Notification::set_allocated_turn_server(std::string* turn_server) {
  if (turn_server != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  turn_server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), turn_server,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (turn_server_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WebRTCHaveTURNServer_Notification.turn_server)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCStartResult_Request

// optional fixed64 webrtc_session_id = 1;
inline bool CBroadcast_WebRTCStartResult_Request::_internal_has_webrtc_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCStartResult_Request::has_webrtc_session_id() const {
  return _internal_has_webrtc_session_id();
}
inline void CBroadcast_WebRTCStartResult_Request::clear_webrtc_session_id() {
  webrtc_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_WebRTCStartResult_Request::_internal_webrtc_session_id() const {
  return webrtc_session_id_;
}
inline uint64_t CBroadcast_WebRTCStartResult_Request::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCStartResult_Request.webrtc_session_id)
  return _internal_webrtc_session_id();
}
inline void CBroadcast_WebRTCStartResult_Request::_internal_set_webrtc_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  webrtc_session_id_ = value;
}
inline void CBroadcast_WebRTCStartResult_Request::set_webrtc_session_id(uint64_t value) {
  _internal_set_webrtc_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCStartResult_Request.webrtc_session_id)
}

// optional bool started = 2;
inline bool CBroadcast_WebRTCStartResult_Request::_internal_has_started() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCStartResult_Request::has_started() const {
  return _internal_has_started();
}
inline void CBroadcast_WebRTCStartResult_Request::clear_started() {
  started_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CBroadcast_WebRTCStartResult_Request::_internal_started() const {
  return started_;
}
inline bool CBroadcast_WebRTCStartResult_Request::started() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCStartResult_Request.started)
  return _internal_started();
}
inline void CBroadcast_WebRTCStartResult_Request::_internal_set_started(bool value) {
  _has_bits_[0] |= 0x00000004u;
  started_ = value;
}
inline void CBroadcast_WebRTCStartResult_Request::set_started(bool value) {
  _internal_set_started(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCStartResult_Request.started)
}

// optional string offer = 3;
inline bool CBroadcast_WebRTCStartResult_Request::_internal_has_offer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCStartResult_Request::has_offer() const {
  return _internal_has_offer();
}
inline void CBroadcast_WebRTCStartResult_Request::clear_offer() {
  offer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_WebRTCStartResult_Request::offer() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCStartResult_Request.offer)
  return _internal_offer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_WebRTCStartResult_Request::set_offer(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 offer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCStartResult_Request.offer)
}
inline std::string* CBroadcast_WebRTCStartResult_Request::mutable_offer() {
  std::string* _s = _internal_mutable_offer();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WebRTCStartResult_Request.offer)
  return _s;
}
inline const std::string& CBroadcast_WebRTCStartResult_Request::_internal_offer() const {
  return offer_.Get();
}
inline void CBroadcast_WebRTCStartResult_Request::_internal_set_offer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  offer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_WebRTCStartResult_Request::_internal_mutable_offer() {
  _has_bits_[0] |= 0x00000001u;
  return offer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_WebRTCStartResult_Request::release_offer() {
  // @@protoc_insertion_point(field_release:CBroadcast_WebRTCStartResult_Request.offer)
  if (!_internal_has_offer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = offer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (offer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_WebRTCStartResult_Request::set_allocated_offer(std::string* offer) {
  if (offer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  offer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (offer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    offer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WebRTCStartResult_Request.offer)
}

// optional uint32 resolution_x = 4;
inline bool CBroadcast_WebRTCStartResult_Request::_internal_has_resolution_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCStartResult_Request::has_resolution_x() const {
  return _internal_has_resolution_x();
}
inline void CBroadcast_WebRTCStartResult_Request::clear_resolution_x() {
  resolution_x_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CBroadcast_WebRTCStartResult_Request::_internal_resolution_x() const {
  return resolution_x_;
}
inline uint32_t CBroadcast_WebRTCStartResult_Request::resolution_x() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCStartResult_Request.resolution_x)
  return _internal_resolution_x();
}
inline void CBroadcast_WebRTCStartResult_Request::_internal_set_resolution_x(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  resolution_x_ = value;
}
inline void CBroadcast_WebRTCStartResult_Request::set_resolution_x(uint32_t value) {
  _internal_set_resolution_x(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCStartResult_Request.resolution_x)
}

// optional uint32 resolution_y = 5;
inline bool CBroadcast_WebRTCStartResult_Request::_internal_has_resolution_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCStartResult_Request::has_resolution_y() const {
  return _internal_has_resolution_y();
}
inline void CBroadcast_WebRTCStartResult_Request::clear_resolution_y() {
  resolution_y_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CBroadcast_WebRTCStartResult_Request::_internal_resolution_y() const {
  return resolution_y_;
}
inline uint32_t CBroadcast_WebRTCStartResult_Request::resolution_y() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCStartResult_Request.resolution_y)
  return _internal_resolution_y();
}
inline void CBroadcast_WebRTCStartResult_Request::_internal_set_resolution_y(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  resolution_y_ = value;
}
inline void CBroadcast_WebRTCStartResult_Request::set_resolution_y(uint32_t value) {
  _internal_set_resolution_y(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCStartResult_Request.resolution_y)
}

// optional uint32 fps = 6;
inline bool CBroadcast_WebRTCStartResult_Request::_internal_has_fps() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCStartResult_Request::has_fps() const {
  return _internal_has_fps();
}
inline void CBroadcast_WebRTCStartResult_Request::clear_fps() {
  fps_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CBroadcast_WebRTCStartResult_Request::_internal_fps() const {
  return fps_;
}
inline uint32_t CBroadcast_WebRTCStartResult_Request::fps() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCStartResult_Request.fps)
  return _internal_fps();
}
inline void CBroadcast_WebRTCStartResult_Request::_internal_set_fps(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  fps_ = value;
}
inline void CBroadcast_WebRTCStartResult_Request::set_fps(uint32_t value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCStartResult_Request.fps)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCStartResult_Response

// -------------------------------------------------------------------

// CBroadcast_WebRTCStopped_Request

// optional fixed64 webrtc_session_id = 1;
inline bool CBroadcast_WebRTCStopped_Request::_internal_has_webrtc_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCStopped_Request::has_webrtc_session_id() const {
  return _internal_has_webrtc_session_id();
}
inline void CBroadcast_WebRTCStopped_Request::clear_webrtc_session_id() {
  webrtc_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_WebRTCStopped_Request::_internal_webrtc_session_id() const {
  return webrtc_session_id_;
}
inline uint64_t CBroadcast_WebRTCStopped_Request::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCStopped_Request.webrtc_session_id)
  return _internal_webrtc_session_id();
}
inline void CBroadcast_WebRTCStopped_Request::_internal_set_webrtc_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  webrtc_session_id_ = value;
}
inline void CBroadcast_WebRTCStopped_Request::set_webrtc_session_id(uint64_t value) {
  _internal_set_webrtc_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCStopped_Request.webrtc_session_id)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCStopped_Response

// -------------------------------------------------------------------

// CBroadcast_WebRTCSetAnswer_Request

// optional fixed64 broadcaster_steamid = 1;
inline bool CBroadcast_WebRTCSetAnswer_Request::_internal_has_broadcaster_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCSetAnswer_Request::has_broadcaster_steamid() const {
  return _internal_has_broadcaster_steamid();
}
inline void CBroadcast_WebRTCSetAnswer_Request::clear_broadcaster_steamid() {
  broadcaster_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_WebRTCSetAnswer_Request::_internal_broadcaster_steamid() const {
  return broadcaster_steamid_;
}
inline uint64_t CBroadcast_WebRTCSetAnswer_Request::broadcaster_steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCSetAnswer_Request.broadcaster_steamid)
  return _internal_broadcaster_steamid();
}
inline void CBroadcast_WebRTCSetAnswer_Request::_internal_set_broadcaster_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  broadcaster_steamid_ = value;
}
inline void CBroadcast_WebRTCSetAnswer_Request::set_broadcaster_steamid(uint64_t value) {
  _internal_set_broadcaster_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCSetAnswer_Request.broadcaster_steamid)
}

// optional fixed64 webrtc_session_id = 2;
inline bool CBroadcast_WebRTCSetAnswer_Request::_internal_has_webrtc_session_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCSetAnswer_Request::has_webrtc_session_id() const {
  return _internal_has_webrtc_session_id();
}
inline void CBroadcast_WebRTCSetAnswer_Request::clear_webrtc_session_id() {
  webrtc_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_WebRTCSetAnswer_Request::_internal_webrtc_session_id() const {
  return webrtc_session_id_;
}
inline uint64_t CBroadcast_WebRTCSetAnswer_Request::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCSetAnswer_Request.webrtc_session_id)
  return _internal_webrtc_session_id();
}
inline void CBroadcast_WebRTCSetAnswer_Request::_internal_set_webrtc_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  webrtc_session_id_ = value;
}
inline void CBroadcast_WebRTCSetAnswer_Request::set_webrtc_session_id(uint64_t value) {
  _internal_set_webrtc_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCSetAnswer_Request.webrtc_session_id)
}

// optional string answer = 3;
inline bool CBroadcast_WebRTCSetAnswer_Request::_internal_has_answer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCSetAnswer_Request::has_answer() const {
  return _internal_has_answer();
}
inline void CBroadcast_WebRTCSetAnswer_Request::clear_answer() {
  answer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_WebRTCSetAnswer_Request::answer() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCSetAnswer_Request.answer)
  return _internal_answer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_WebRTCSetAnswer_Request::set_answer(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 answer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCSetAnswer_Request.answer)
}
inline std::string* CBroadcast_WebRTCSetAnswer_Request::mutable_answer() {
  std::string* _s = _internal_mutable_answer();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WebRTCSetAnswer_Request.answer)
  return _s;
}
inline const std::string& CBroadcast_WebRTCSetAnswer_Request::_internal_answer() const {
  return answer_.Get();
}
inline void CBroadcast_WebRTCSetAnswer_Request::_internal_set_answer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  answer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_WebRTCSetAnswer_Request::_internal_mutable_answer() {
  _has_bits_[0] |= 0x00000001u;
  return answer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_WebRTCSetAnswer_Request::release_answer() {
  // @@protoc_insertion_point(field_release:CBroadcast_WebRTCSetAnswer_Request.answer)
  if (!_internal_has_answer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = answer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (answer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_WebRTCSetAnswer_Request::set_allocated_answer(std::string* answer) {
  if (answer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  answer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (answer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WebRTCSetAnswer_Request.answer)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCSetAnswer_Response

// -------------------------------------------------------------------

// CBroadcast_WebRTCLookupTURNServer_Request

// optional uint32 cellid = 1;
inline bool CBroadcast_WebRTCLookupTURNServer_Request::_internal_has_cellid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCLookupTURNServer_Request::has_cellid() const {
  return _internal_has_cellid();
}
inline void CBroadcast_WebRTCLookupTURNServer_Request::clear_cellid() {
  cellid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CBroadcast_WebRTCLookupTURNServer_Request::_internal_cellid() const {
  return cellid_;
}
inline uint32_t CBroadcast_WebRTCLookupTURNServer_Request::cellid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCLookupTURNServer_Request.cellid)
  return _internal_cellid();
}
inline void CBroadcast_WebRTCLookupTURNServer_Request::_internal_set_cellid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  cellid_ = value;
}
inline void CBroadcast_WebRTCLookupTURNServer_Request::set_cellid(uint32_t value) {
  _internal_set_cellid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCLookupTURNServer_Request.cellid)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCLookupTURNServer_Response

// optional string turn_server = 1;
inline bool CBroadcast_WebRTCLookupTURNServer_Response::_internal_has_turn_server() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCLookupTURNServer_Response::has_turn_server() const {
  return _internal_has_turn_server();
}
inline void CBroadcast_WebRTCLookupTURNServer_Response::clear_turn_server() {
  turn_server_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_WebRTCLookupTURNServer_Response::turn_server() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCLookupTURNServer_Response.turn_server)
  return _internal_turn_server();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_WebRTCLookupTURNServer_Response::set_turn_server(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 turn_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCLookupTURNServer_Response.turn_server)
}
inline std::string* CBroadcast_WebRTCLookupTURNServer_Response::mutable_turn_server() {
  std::string* _s = _internal_mutable_turn_server();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WebRTCLookupTURNServer_Response.turn_server)
  return _s;
}
inline const std::string& CBroadcast_WebRTCLookupTURNServer_Response::_internal_turn_server() const {
  return turn_server_.Get();
}
inline void CBroadcast_WebRTCLookupTURNServer_Response::_internal_set_turn_server(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  turn_server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_WebRTCLookupTURNServer_Response::_internal_mutable_turn_server() {
  _has_bits_[0] |= 0x00000001u;
  return turn_server_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_WebRTCLookupTURNServer_Response::release_turn_server() {
  // @@protoc_insertion_point(field_release:CBroadcast_WebRTCLookupTURNServer_Response.turn_server)
  if (!_internal_has_turn_server()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = turn_server_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (turn_server_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_WebRTCLookupTURNServer_Response::set_allocated_turn_server(std::string* turn_server) {
  if (turn_server != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  turn_server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), turn_server,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (turn_server_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    turn_server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WebRTCLookupTURNServer_Response.turn_server)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTC_Candidate

// optional string sdp_mid = 1;
inline bool CBroadcast_WebRTC_Candidate::_internal_has_sdp_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_WebRTC_Candidate::has_sdp_mid() const {
  return _internal_has_sdp_mid();
}
inline void CBroadcast_WebRTC_Candidate::clear_sdp_mid() {
  sdp_mid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_WebRTC_Candidate::sdp_mid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTC_Candidate.sdp_mid)
  return _internal_sdp_mid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_WebRTC_Candidate::set_sdp_mid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sdp_mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTC_Candidate.sdp_mid)
}
inline std::string* CBroadcast_WebRTC_Candidate::mutable_sdp_mid() {
  std::string* _s = _internal_mutable_sdp_mid();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WebRTC_Candidate.sdp_mid)
  return _s;
}
inline const std::string& CBroadcast_WebRTC_Candidate::_internal_sdp_mid() const {
  return sdp_mid_.Get();
}
inline void CBroadcast_WebRTC_Candidate::_internal_set_sdp_mid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sdp_mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_WebRTC_Candidate::_internal_mutable_sdp_mid() {
  _has_bits_[0] |= 0x00000001u;
  return sdp_mid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_WebRTC_Candidate::release_sdp_mid() {
  // @@protoc_insertion_point(field_release:CBroadcast_WebRTC_Candidate.sdp_mid)
  if (!_internal_has_sdp_mid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sdp_mid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sdp_mid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sdp_mid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_WebRTC_Candidate::set_allocated_sdp_mid(std::string* sdp_mid) {
  if (sdp_mid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sdp_mid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdp_mid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sdp_mid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sdp_mid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WebRTC_Candidate.sdp_mid)
}

// optional int32 sdp_mline_index = 2;
inline bool CBroadcast_WebRTC_Candidate::_internal_has_sdp_mline_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_WebRTC_Candidate::has_sdp_mline_index() const {
  return _internal_has_sdp_mline_index();
}
inline void CBroadcast_WebRTC_Candidate::clear_sdp_mline_index() {
  sdp_mline_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CBroadcast_WebRTC_Candidate::_internal_sdp_mline_index() const {
  return sdp_mline_index_;
}
inline int32_t CBroadcast_WebRTC_Candidate::sdp_mline_index() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTC_Candidate.sdp_mline_index)
  return _internal_sdp_mline_index();
}
inline void CBroadcast_WebRTC_Candidate::_internal_set_sdp_mline_index(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  sdp_mline_index_ = value;
}
inline void CBroadcast_WebRTC_Candidate::set_sdp_mline_index(int32_t value) {
  _internal_set_sdp_mline_index(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTC_Candidate.sdp_mline_index)
}

// optional string candidate = 3;
inline bool CBroadcast_WebRTC_Candidate::_internal_has_candidate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_WebRTC_Candidate::has_candidate() const {
  return _internal_has_candidate();
}
inline void CBroadcast_WebRTC_Candidate::clear_candidate() {
  candidate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBroadcast_WebRTC_Candidate::candidate() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTC_Candidate.candidate)
  return _internal_candidate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_WebRTC_Candidate::set_candidate(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 candidate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTC_Candidate.candidate)
}
inline std::string* CBroadcast_WebRTC_Candidate::mutable_candidate() {
  std::string* _s = _internal_mutable_candidate();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WebRTC_Candidate.candidate)
  return _s;
}
inline const std::string& CBroadcast_WebRTC_Candidate::_internal_candidate() const {
  return candidate_.Get();
}
inline void CBroadcast_WebRTC_Candidate::_internal_set_candidate(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  candidate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_WebRTC_Candidate::_internal_mutable_candidate() {
  _has_bits_[0] |= 0x00000002u;
  return candidate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_WebRTC_Candidate::release_candidate() {
  // @@protoc_insertion_point(field_release:CBroadcast_WebRTC_Candidate.candidate)
  if (!_internal_has_candidate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = candidate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (candidate_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_WebRTC_Candidate::set_allocated_candidate(std::string* candidate) {
  if (candidate != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  candidate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidate,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (candidate_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    candidate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WebRTC_Candidate.candidate)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCAddHostCandidate_Request

// optional fixed64 webrtc_session_id = 1;
inline bool CBroadcast_WebRTCAddHostCandidate_Request::_internal_has_webrtc_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCAddHostCandidate_Request::has_webrtc_session_id() const {
  return _internal_has_webrtc_session_id();
}
inline void CBroadcast_WebRTCAddHostCandidate_Request::clear_webrtc_session_id() {
  webrtc_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_WebRTCAddHostCandidate_Request::_internal_webrtc_session_id() const {
  return webrtc_session_id_;
}
inline uint64_t CBroadcast_WebRTCAddHostCandidate_Request::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCAddHostCandidate_Request.webrtc_session_id)
  return _internal_webrtc_session_id();
}
inline void CBroadcast_WebRTCAddHostCandidate_Request::_internal_set_webrtc_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  webrtc_session_id_ = value;
}
inline void CBroadcast_WebRTCAddHostCandidate_Request::set_webrtc_session_id(uint64_t value) {
  _internal_set_webrtc_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCAddHostCandidate_Request.webrtc_session_id)
}

// optional .CBroadcast_WebRTC_Candidate candidate = 2;
inline bool CBroadcast_WebRTCAddHostCandidate_Request::_internal_has_candidate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || candidate_ != nullptr);
  return value;
}
inline bool CBroadcast_WebRTCAddHostCandidate_Request::has_candidate() const {
  return _internal_has_candidate();
}
inline void CBroadcast_WebRTCAddHostCandidate_Request::clear_candidate() {
  if (candidate_ != nullptr) candidate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CBroadcast_WebRTC_Candidate& CBroadcast_WebRTCAddHostCandidate_Request::_internal_candidate() const {
  const ::CBroadcast_WebRTC_Candidate* p = candidate_;
  return p != nullptr ? *p : reinterpret_cast<const ::CBroadcast_WebRTC_Candidate&>(
      ::_CBroadcast_WebRTC_Candidate_default_instance_);
}
inline const ::CBroadcast_WebRTC_Candidate& CBroadcast_WebRTCAddHostCandidate_Request::candidate() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCAddHostCandidate_Request.candidate)
  return _internal_candidate();
}
inline void CBroadcast_WebRTCAddHostCandidate_Request::unsafe_arena_set_allocated_candidate(
    ::CBroadcast_WebRTC_Candidate* candidate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_);
  }
  candidate_ = candidate;
  if (candidate) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CBroadcast_WebRTCAddHostCandidate_Request.candidate)
}
inline ::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddHostCandidate_Request::release_candidate() {
  _has_bits_[0] &= ~0x00000001u;
  ::CBroadcast_WebRTC_Candidate* temp = candidate_;
  candidate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddHostCandidate_Request::unsafe_arena_release_candidate() {
  // @@protoc_insertion_point(field_release:CBroadcast_WebRTCAddHostCandidate_Request.candidate)
  _has_bits_[0] &= ~0x00000001u;
  ::CBroadcast_WebRTC_Candidate* temp = candidate_;
  candidate_ = nullptr;
  return temp;
}
inline ::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddHostCandidate_Request::_internal_mutable_candidate() {
  _has_bits_[0] |= 0x00000001u;
  if (candidate_ == nullptr) {
    auto* p = CreateMaybeMessage<::CBroadcast_WebRTC_Candidate>(GetArenaForAllocation());
    candidate_ = p;
  }
  return candidate_;
}
inline ::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddHostCandidate_Request::mutable_candidate() {
  ::CBroadcast_WebRTC_Candidate* _msg = _internal_mutable_candidate();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WebRTCAddHostCandidate_Request.candidate)
  return _msg;
}
inline void CBroadcast_WebRTCAddHostCandidate_Request::set_allocated_candidate(::CBroadcast_WebRTC_Candidate* candidate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete candidate_;
  }
  if (candidate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CBroadcast_WebRTC_Candidate>::GetOwningArena(candidate);
    if (message_arena != submessage_arena) {
      candidate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  candidate_ = candidate;
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WebRTCAddHostCandidate_Request.candidate)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCAddHostCandidate_Response

// -------------------------------------------------------------------

// CBroadcast_WebRTCAddViewerCandidate_Request

// optional fixed64 broadcaster_steamid = 1;
inline bool CBroadcast_WebRTCAddViewerCandidate_Request::_internal_has_broadcaster_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCAddViewerCandidate_Request::has_broadcaster_steamid() const {
  return _internal_has_broadcaster_steamid();
}
inline void CBroadcast_WebRTCAddViewerCandidate_Request::clear_broadcaster_steamid() {
  broadcaster_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_WebRTCAddViewerCandidate_Request::_internal_broadcaster_steamid() const {
  return broadcaster_steamid_;
}
inline uint64_t CBroadcast_WebRTCAddViewerCandidate_Request::broadcaster_steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCAddViewerCandidate_Request.broadcaster_steamid)
  return _internal_broadcaster_steamid();
}
inline void CBroadcast_WebRTCAddViewerCandidate_Request::_internal_set_broadcaster_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  broadcaster_steamid_ = value;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Request::set_broadcaster_steamid(uint64_t value) {
  _internal_set_broadcaster_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCAddViewerCandidate_Request.broadcaster_steamid)
}

// optional fixed64 webrtc_session_id = 2;
inline bool CBroadcast_WebRTCAddViewerCandidate_Request::_internal_has_webrtc_session_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCAddViewerCandidate_Request::has_webrtc_session_id() const {
  return _internal_has_webrtc_session_id();
}
inline void CBroadcast_WebRTCAddViewerCandidate_Request::clear_webrtc_session_id() {
  webrtc_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_WebRTCAddViewerCandidate_Request::_internal_webrtc_session_id() const {
  return webrtc_session_id_;
}
inline uint64_t CBroadcast_WebRTCAddViewerCandidate_Request::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCAddViewerCandidate_Request.webrtc_session_id)
  return _internal_webrtc_session_id();
}
inline void CBroadcast_WebRTCAddViewerCandidate_Request::_internal_set_webrtc_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  webrtc_session_id_ = value;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Request::set_webrtc_session_id(uint64_t value) {
  _internal_set_webrtc_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCAddViewerCandidate_Request.webrtc_session_id)
}

// optional .CBroadcast_WebRTC_Candidate candidate = 3;
inline bool CBroadcast_WebRTCAddViewerCandidate_Request::_internal_has_candidate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || candidate_ != nullptr);
  return value;
}
inline bool CBroadcast_WebRTCAddViewerCandidate_Request::has_candidate() const {
  return _internal_has_candidate();
}
inline void CBroadcast_WebRTCAddViewerCandidate_Request::clear_candidate() {
  if (candidate_ != nullptr) candidate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CBroadcast_WebRTC_Candidate& CBroadcast_WebRTCAddViewerCandidate_Request::_internal_candidate() const {
  const ::CBroadcast_WebRTC_Candidate* p = candidate_;
  return p != nullptr ? *p : reinterpret_cast<const ::CBroadcast_WebRTC_Candidate&>(
      ::_CBroadcast_WebRTC_Candidate_default_instance_);
}
inline const ::CBroadcast_WebRTC_Candidate& CBroadcast_WebRTCAddViewerCandidate_Request::candidate() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCAddViewerCandidate_Request.candidate)
  return _internal_candidate();
}
inline void CBroadcast_WebRTCAddViewerCandidate_Request::unsafe_arena_set_allocated_candidate(
    ::CBroadcast_WebRTC_Candidate* candidate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_);
  }
  candidate_ = candidate;
  if (candidate) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CBroadcast_WebRTCAddViewerCandidate_Request.candidate)
}
inline ::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddViewerCandidate_Request::release_candidate() {
  _has_bits_[0] &= ~0x00000001u;
  ::CBroadcast_WebRTC_Candidate* temp = candidate_;
  candidate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddViewerCandidate_Request::unsafe_arena_release_candidate() {
  // @@protoc_insertion_point(field_release:CBroadcast_WebRTCAddViewerCandidate_Request.candidate)
  _has_bits_[0] &= ~0x00000001u;
  ::CBroadcast_WebRTC_Candidate* temp = candidate_;
  candidate_ = nullptr;
  return temp;
}
inline ::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddViewerCandidate_Request::_internal_mutable_candidate() {
  _has_bits_[0] |= 0x00000001u;
  if (candidate_ == nullptr) {
    auto* p = CreateMaybeMessage<::CBroadcast_WebRTC_Candidate>(GetArenaForAllocation());
    candidate_ = p;
  }
  return candidate_;
}
inline ::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddViewerCandidate_Request::mutable_candidate() {
  ::CBroadcast_WebRTC_Candidate* _msg = _internal_mutable_candidate();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WebRTCAddViewerCandidate_Request.candidate)
  return _msg;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Request::set_allocated_candidate(::CBroadcast_WebRTC_Candidate* candidate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete candidate_;
  }
  if (candidate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CBroadcast_WebRTC_Candidate>::GetOwningArena(candidate);
    if (message_arena != submessage_arena) {
      candidate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  candidate_ = candidate;
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WebRTCAddViewerCandidate_Request.candidate)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCAddViewerCandidate_Response

// -------------------------------------------------------------------

// CBroadcast_WebRTCGetHostCandidates_Request

// optional fixed64 broadcaster_steamid = 1;
inline bool CBroadcast_WebRTCGetHostCandidates_Request::_internal_has_broadcaster_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCGetHostCandidates_Request::has_broadcaster_steamid() const {
  return _internal_has_broadcaster_steamid();
}
inline void CBroadcast_WebRTCGetHostCandidates_Request::clear_broadcaster_steamid() {
  broadcaster_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_WebRTCGetHostCandidates_Request::_internal_broadcaster_steamid() const {
  return broadcaster_steamid_;
}
inline uint64_t CBroadcast_WebRTCGetHostCandidates_Request::broadcaster_steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCGetHostCandidates_Request.broadcaster_steamid)
  return _internal_broadcaster_steamid();
}
inline void CBroadcast_WebRTCGetHostCandidates_Request::_internal_set_broadcaster_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  broadcaster_steamid_ = value;
}
inline void CBroadcast_WebRTCGetHostCandidates_Request::set_broadcaster_steamid(uint64_t value) {
  _internal_set_broadcaster_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCGetHostCandidates_Request.broadcaster_steamid)
}

// optional fixed64 webrtc_session_id = 2;
inline bool CBroadcast_WebRTCGetHostCandidates_Request::_internal_has_webrtc_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCGetHostCandidates_Request::has_webrtc_session_id() const {
  return _internal_has_webrtc_session_id();
}
inline void CBroadcast_WebRTCGetHostCandidates_Request::clear_webrtc_session_id() {
  webrtc_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_WebRTCGetHostCandidates_Request::_internal_webrtc_session_id() const {
  return webrtc_session_id_;
}
inline uint64_t CBroadcast_WebRTCGetHostCandidates_Request::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCGetHostCandidates_Request.webrtc_session_id)
  return _internal_webrtc_session_id();
}
inline void CBroadcast_WebRTCGetHostCandidates_Request::_internal_set_webrtc_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  webrtc_session_id_ = value;
}
inline void CBroadcast_WebRTCGetHostCandidates_Request::set_webrtc_session_id(uint64_t value) {
  _internal_set_webrtc_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCGetHostCandidates_Request.webrtc_session_id)
}

// optional uint32 candidate_generation = 3;
inline bool CBroadcast_WebRTCGetHostCandidates_Request::_internal_has_candidate_generation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCGetHostCandidates_Request::has_candidate_generation() const {
  return _internal_has_candidate_generation();
}
inline void CBroadcast_WebRTCGetHostCandidates_Request::clear_candidate_generation() {
  candidate_generation_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CBroadcast_WebRTCGetHostCandidates_Request::_internal_candidate_generation() const {
  return candidate_generation_;
}
inline uint32_t CBroadcast_WebRTCGetHostCandidates_Request::candidate_generation() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCGetHostCandidates_Request.candidate_generation)
  return _internal_candidate_generation();
}
inline void CBroadcast_WebRTCGetHostCandidates_Request::_internal_set_candidate_generation(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  candidate_generation_ = value;
}
inline void CBroadcast_WebRTCGetHostCandidates_Request::set_candidate_generation(uint32_t value) {
  _internal_set_candidate_generation(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCGetHostCandidates_Request.candidate_generation)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCGetHostCandidates_Response

// optional uint32 candidate_generation = 1;
inline bool CBroadcast_WebRTCGetHostCandidates_Response::_internal_has_candidate_generation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCGetHostCandidates_Response::has_candidate_generation() const {
  return _internal_has_candidate_generation();
}
inline void CBroadcast_WebRTCGetHostCandidates_Response::clear_candidate_generation() {
  candidate_generation_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CBroadcast_WebRTCGetHostCandidates_Response::_internal_candidate_generation() const {
  return candidate_generation_;
}
inline uint32_t CBroadcast_WebRTCGetHostCandidates_Response::candidate_generation() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCGetHostCandidates_Response.candidate_generation)
  return _internal_candidate_generation();
}
inline void CBroadcast_WebRTCGetHostCandidates_Response::_internal_set_candidate_generation(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  candidate_generation_ = value;
}
inline void CBroadcast_WebRTCGetHostCandidates_Response::set_candidate_generation(uint32_t value) {
  _internal_set_candidate_generation(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCGetHostCandidates_Response.candidate_generation)
}

// repeated .CBroadcast_WebRTC_Candidate candidates = 2;
inline int CBroadcast_WebRTCGetHostCandidates_Response::_internal_candidates_size() const {
  return candidates_.size();
}
inline int CBroadcast_WebRTCGetHostCandidates_Response::candidates_size() const {
  return _internal_candidates_size();
}
inline void CBroadcast_WebRTCGetHostCandidates_Response::clear_candidates() {
  candidates_.Clear();
}
inline ::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCGetHostCandidates_Response::mutable_candidates(int index) {
  // @@protoc_insertion_point(field_mutable:CBroadcast_WebRTCGetHostCandidates_Response.candidates)
  return candidates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_WebRTC_Candidate >*
CBroadcast_WebRTCGetHostCandidates_Response::mutable_candidates() {
  // @@protoc_insertion_point(field_mutable_list:CBroadcast_WebRTCGetHostCandidates_Response.candidates)
  return &candidates_;
}
inline const ::CBroadcast_WebRTC_Candidate& CBroadcast_WebRTCGetHostCandidates_Response::_internal_candidates(int index) const {
  return candidates_.Get(index);
}
inline const ::CBroadcast_WebRTC_Candidate& CBroadcast_WebRTCGetHostCandidates_Response::candidates(int index) const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCGetHostCandidates_Response.candidates)
  return _internal_candidates(index);
}
inline ::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCGetHostCandidates_Response::_internal_add_candidates() {
  return candidates_.Add();
}
inline ::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCGetHostCandidates_Response::add_candidates() {
  ::CBroadcast_WebRTC_Candidate* _add = _internal_add_candidates();
  // @@protoc_insertion_point(field_add:CBroadcast_WebRTCGetHostCandidates_Response.candidates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_WebRTC_Candidate >&
CBroadcast_WebRTCGetHostCandidates_Response::candidates() const {
  // @@protoc_insertion_point(field_list:CBroadcast_WebRTCGetHostCandidates_Response.candidates)
  return candidates_;
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastUploadStats_Request

// optional uint32 row_limit = 1 [default = 100, (.description) = "How many at maximum to return."];
inline bool CBroadcast_GetBroadcastUploadStats_Request::_internal_has_row_limit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Request::has_row_limit() const {
  return _internal_has_row_limit();
}
inline void CBroadcast_GetBroadcastUploadStats_Request::clear_row_limit() {
  row_limit_ = 100u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Request::_internal_row_limit() const {
  return row_limit_;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Request::row_limit() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Request.row_limit)
  return _internal_row_limit();
}
inline void CBroadcast_GetBroadcastUploadStats_Request::_internal_set_row_limit(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  row_limit_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Request::set_row_limit(uint32_t value) {
  _internal_set_row_limit(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Request.row_limit)
}

// optional uint32 start_time = 2 [default = 0, (.description) = "Start time"];
inline bool CBroadcast_GetBroadcastUploadStats_Request::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Request::has_start_time() const {
  return _internal_has_start_time();
}
inline void CBroadcast_GetBroadcastUploadStats_Request::clear_start_time() {
  start_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Request::_internal_start_time() const {
  return start_time_;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Request::start_time() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Request.start_time)
  return _internal_start_time();
}
inline void CBroadcast_GetBroadcastUploadStats_Request::_internal_set_start_time(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  start_time_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Request::set_start_time(uint32_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Request.start_time)
}

// optional uint64 upload_id = 3 [(.description) = "Optional relay upload ID - not compatible with session_id"];
inline bool CBroadcast_GetBroadcastUploadStats_Request::_internal_has_upload_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Request::has_upload_id() const {
  return _internal_has_upload_id();
}
inline void CBroadcast_GetBroadcastUploadStats_Request::clear_upload_id() {
  upload_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_GetBroadcastUploadStats_Request::_internal_upload_id() const {
  return upload_id_;
}
inline uint64_t CBroadcast_GetBroadcastUploadStats_Request::upload_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Request.upload_id)
  return _internal_upload_id();
}
inline void CBroadcast_GetBroadcastUploadStats_Request::_internal_set_upload_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  upload_id_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Request::set_upload_id(uint64_t value) {
  _internal_set_upload_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Request.upload_id)
}

// optional fixed64 steamid = 4 [(.description) = "Optional the steamid whose stats you want, otherwise the user logged in - admin only"];
inline bool CBroadcast_GetBroadcastUploadStats_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CBroadcast_GetBroadcastUploadStats_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_GetBroadcastUploadStats_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CBroadcast_GetBroadcastUploadStats_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Request.steamid)
  return _internal_steamid();
}
inline void CBroadcast_GetBroadcastUploadStats_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Request.steamid)
}

// optional uint64 session_id = 5 [(.description) = "Optional broadcast session ID - not compatiable with upload_id"];
inline bool CBroadcast_GetBroadcastUploadStats_Request::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Request::has_session_id() const {
  return _internal_has_session_id();
}
inline void CBroadcast_GetBroadcastUploadStats_Request::clear_session_id() {
  session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_GetBroadcastUploadStats_Request::_internal_session_id() const {
  return session_id_;
}
inline uint64_t CBroadcast_GetBroadcastUploadStats_Request::session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Request.session_id)
  return _internal_session_id();
}
inline void CBroadcast_GetBroadcastUploadStats_Request::_internal_set_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  session_id_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Request::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Request.session_id)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastUploadStats_Response_UploadStats

// optional uint32 upload_result = 1 [(.description) = ""];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_upload_result() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_upload_result() const {
  return _internal_has_upload_result();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_upload_result() {
  upload_result_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_upload_result() const {
  return upload_result_;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::upload_result() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.upload_result)
  return _internal_upload_result();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_upload_result(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  upload_result_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_upload_result(uint32_t value) {
  _internal_set_upload_result(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.upload_result)
}

// optional uint32 time_stopped = 2 [(.description) = "time broadcast upload stopped"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_time_stopped() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_time_stopped() const {
  return _internal_has_time_stopped();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_time_stopped() {
  time_stopped_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_time_stopped() const {
  return time_stopped_;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::time_stopped() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.time_stopped)
  return _internal_time_stopped();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_time_stopped(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  time_stopped_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_time_stopped(uint32_t value) {
  _internal_set_time_stopped(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.time_stopped)
}

// optional uint32 seconds_uploaded = 3 [(.description) = "seconds of vido uploaded"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_seconds_uploaded() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_seconds_uploaded() const {
  return _internal_has_seconds_uploaded();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_seconds_uploaded() {
  seconds_uploaded_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_seconds_uploaded() const {
  return seconds_uploaded_;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::seconds_uploaded() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.seconds_uploaded)
  return _internal_seconds_uploaded();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_seconds_uploaded(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  seconds_uploaded_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_seconds_uploaded(uint32_t value) {
  _internal_set_seconds_uploaded(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.seconds_uploaded)
}

// optional uint32 max_viewers = 4 [(.description) = "max concurrent viewers"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_max_viewers() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_max_viewers() const {
  return _internal_has_max_viewers();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_max_viewers() {
  max_viewers_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_max_viewers() const {
  return max_viewers_;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::max_viewers() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.max_viewers)
  return _internal_max_viewers();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_max_viewers(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  max_viewers_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_max_viewers(uint32_t value) {
  _internal_set_max_viewers(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.max_viewers)
}

// optional uint32 resolution_x = 5 [(.description) = "horizontal resultion"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_resolution_x() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_resolution_x() const {
  return _internal_has_resolution_x();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_resolution_x() {
  resolution_x_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_resolution_x() const {
  return resolution_x_;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::resolution_x() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.resolution_x)
  return _internal_resolution_x();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_resolution_x(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  resolution_x_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_resolution_x(uint32_t value) {
  _internal_set_resolution_x(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.resolution_x)
}

// optional uint32 resolution_y = 6 [(.description) = "vertical resultion"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_resolution_y() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_resolution_y() const {
  return _internal_has_resolution_y();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_resolution_y() {
  resolution_y_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_resolution_y() const {
  return resolution_y_;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::resolution_y() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.resolution_y)
  return _internal_resolution_y();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_resolution_y(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  resolution_y_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_resolution_y(uint32_t value) {
  _internal_set_resolution_y(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.resolution_y)
}

// optional uint32 avg_bandwidth = 7 [(.description) = ""];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_avg_bandwidth() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_avg_bandwidth() const {
  return _internal_has_avg_bandwidth();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_avg_bandwidth() {
  avg_bandwidth_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_avg_bandwidth() const {
  return avg_bandwidth_;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::avg_bandwidth() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.avg_bandwidth)
  return _internal_avg_bandwidth();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_avg_bandwidth(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  avg_bandwidth_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_avg_bandwidth(uint32_t value) {
  _internal_set_avg_bandwidth(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.avg_bandwidth)
}

// optional uint64 total_bytes = 8 [(.description) = "total byte uploaded by broadcaster"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_total_bytes() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_total_bytes() const {
  return _internal_has_total_bytes();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_total_bytes() {
  total_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_total_bytes() const {
  return total_bytes_;
}
inline uint64_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::total_bytes() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.total_bytes)
  return _internal_total_bytes();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_total_bytes(uint64_t value) {
  _has_bits_[0] |= 0x00000200u;
  total_bytes_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_total_bytes(uint64_t value) {
  _internal_set_total_bytes(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.total_bytes)
}

// optional uint32 app_id = 9 [(.description) = "game broadcasted"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_app_id() const {
  return _internal_has_app_id();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::app_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.app_id)
  return _internal_app_id();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  app_id_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.app_id)
}

// optional uint32 total_unique_viewers = 10 [(.description) = "total unique viewers seen"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_total_unique_viewers() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_total_unique_viewers() const {
  return _internal_has_total_unique_viewers();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_total_unique_viewers() {
  total_unique_viewers_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_total_unique_viewers() const {
  return total_unique_viewers_;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::total_unique_viewers() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.total_unique_viewers)
  return _internal_total_unique_viewers();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_total_unique_viewers(uint32_t value) {
  _has_bits_[0] |= 0x00002000u;
  total_unique_viewers_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_total_unique_viewers(uint32_t value) {
  _internal_set_total_unique_viewers(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.total_unique_viewers)
}

// optional uint64 total_seconds_watched = 11 [(.description) = "total number of seconds watched by all viewers"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_total_seconds_watched() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_total_seconds_watched() const {
  return _internal_has_total_seconds_watched();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_total_seconds_watched() {
  total_seconds_watched_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00001000u;
}
inline uint64_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_total_seconds_watched() const {
  return total_seconds_watched_;
}
inline uint64_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::total_seconds_watched() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.total_seconds_watched)
  return _internal_total_seconds_watched();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_total_seconds_watched(uint64_t value) {
  _has_bits_[0] |= 0x00001000u;
  total_seconds_watched_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_total_seconds_watched(uint64_t value) {
  _internal_set_total_seconds_watched(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.total_seconds_watched)
}

// optional uint32 time_started = 12 [(.description) = "time broadcast upload started"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_time_started() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_time_started() const {
  return _internal_has_time_started();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_time_started() {
  time_started_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_time_started() const {
  return time_started_;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::time_started() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.time_started)
  return _internal_time_started();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_time_started(uint32_t value) {
  _has_bits_[0] |= 0x00004000u;
  time_started_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_time_started(uint32_t value) {
  _internal_set_time_started(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.time_started)
}

// optional uint64 upload_id = 13 [(.description) = "broadcast relay upload id"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_upload_id() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_upload_id() const {
  return _internal_has_upload_id();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_upload_id() {
  upload_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00008000u;
}
inline uint64_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_upload_id() const {
  return upload_id_;
}
inline uint64_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::upload_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.upload_id)
  return _internal_upload_id();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_upload_id(uint64_t value) {
  _has_bits_[0] |= 0x00008000u;
  upload_id_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_upload_id(uint64_t value) {
  _internal_set_upload_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.upload_id)
}

// optional string local_address = 14 [(.description) = "upload to server address"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_local_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_local_address() const {
  return _internal_has_local_address();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_local_address() {
  local_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_GetBroadcastUploadStats_Response_UploadStats::local_address() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.local_address)
  return _internal_local_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_local_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 local_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.local_address)
}
inline std::string* CBroadcast_GetBroadcastUploadStats_Response_UploadStats::mutable_local_address() {
  std::string* _s = _internal_mutable_local_address();
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.local_address)
  return _s;
}
inline const std::string& CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_local_address() const {
  return local_address_.Get();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_local_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  local_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_mutable_local_address() {
  _has_bits_[0] |= 0x00000001u;
  return local_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastUploadStats_Response_UploadStats::release_local_address() {
  // @@protoc_insertion_point(field_release:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.local_address)
  if (!_internal_has_local_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = local_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (local_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    local_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_allocated_local_address(std::string* local_address) {
  if (local_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  local_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (local_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    local_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.local_address)
}

// optional string remote_address = 15 [(.description) = "upload from client address"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_remote_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_remote_address() const {
  return _internal_has_remote_address();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_remote_address() {
  remote_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBroadcast_GetBroadcastUploadStats_Response_UploadStats::remote_address() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.remote_address)
  return _internal_remote_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_remote_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 remote_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.remote_address)
}
inline std::string* CBroadcast_GetBroadcastUploadStats_Response_UploadStats::mutable_remote_address() {
  std::string* _s = _internal_mutable_remote_address();
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.remote_address)
  return _s;
}
inline const std::string& CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_remote_address() const {
  return remote_address_.Get();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_remote_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  remote_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_mutable_remote_address() {
  _has_bits_[0] |= 0x00000002u;
  return remote_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastUploadStats_Response_UploadStats::release_remote_address() {
  // @@protoc_insertion_point(field_release:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.remote_address)
  if (!_internal_has_remote_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = remote_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remote_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    remote_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_allocated_remote_address(std::string* remote_address) {
  if (remote_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  remote_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remote_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    remote_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.remote_address)
}

// optional uint32 frames_per_second = 16 [(.description) = "frames per second"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_frames_per_second() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_frames_per_second() const {
  return _internal_has_frames_per_second();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_frames_per_second() {
  frames_per_second_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_frames_per_second() const {
  return frames_per_second_;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::frames_per_second() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.frames_per_second)
  return _internal_frames_per_second();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_frames_per_second(uint32_t value) {
  _has_bits_[0] |= 0x00010000u;
  frames_per_second_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_frames_per_second(uint32_t value) {
  _internal_set_frames_per_second(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.frames_per_second)
}

// optional uint32 num_representations = 17 [(.description) = "number of video represetations"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_num_representations() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_num_representations() const {
  return _internal_has_num_representations();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_num_representations() {
  num_representations_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_num_representations() const {
  return num_representations_;
}
inline uint32_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::num_representations() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.num_representations)
  return _internal_num_representations();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_num_representations(uint32_t value) {
  _has_bits_[0] |= 0x00020000u;
  num_representations_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_num_representations(uint32_t value) {
  _internal_set_num_representations(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.num_representations)
}

// optional string app_name = 18 [(.description) = "game name"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_app_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_app_name() const {
  return _internal_has_app_name();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_app_name() {
  app_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CBroadcast_GetBroadcastUploadStats_Response_UploadStats::app_name() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_app_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.app_name)
}
inline std::string* CBroadcast_GetBroadcastUploadStats_Response_UploadStats::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.app_name)
  return _s;
}
inline const std::string& CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_app_name() const {
  return app_name_.Get();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_app_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_mutable_app_name() {
  _has_bits_[0] |= 0x00000004u;
  return app_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastUploadStats_Response_UploadStats::release_app_name() {
  // @@protoc_insertion_point(field_release:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = app_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  app_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.app_name)
}

// optional bool is_replay = 19 [(.description) = "replay of previous recording"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_is_replay() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_is_replay() const {
  return _internal_has_is_replay();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_is_replay() {
  is_replay_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_is_replay() const {
  return is_replay_;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::is_replay() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.is_replay)
  return _internal_is_replay();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_is_replay(bool value) {
  _has_bits_[0] |= 0x00080000u;
  is_replay_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_is_replay(bool value) {
  _internal_set_is_replay(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.is_replay)
}

// optional uint64 session_id = 20 [(.description) = "broadcast session id"];
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastUploadStats_Response_UploadStats::has_session_id() const {
  return _internal_has_session_id();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::clear_session_id() {
  session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00040000u;
}
inline uint64_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_session_id() const {
  return session_id_;
}
inline uint64_t CBroadcast_GetBroadcastUploadStats_Response_UploadStats::session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.session_id)
  return _internal_session_id();
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::_internal_set_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00040000u;
  session_id_ = value;
}
inline void CBroadcast_GetBroadcastUploadStats_Response_UploadStats::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastUploadStats_Response.UploadStats.session_id)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastUploadStats_Response

// repeated .CBroadcast_GetBroadcastUploadStats_Response.UploadStats upload_stats = 1;
inline int CBroadcast_GetBroadcastUploadStats_Response::_internal_upload_stats_size() const {
  return upload_stats_.size();
}
inline int CBroadcast_GetBroadcastUploadStats_Response::upload_stats_size() const {
  return _internal_upload_stats_size();
}
inline void CBroadcast_GetBroadcastUploadStats_Response::clear_upload_stats() {
  upload_stats_.Clear();
}
inline ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats* CBroadcast_GetBroadcastUploadStats_Response::mutable_upload_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetBroadcastUploadStats_Response.upload_stats)
  return upload_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats >*
CBroadcast_GetBroadcastUploadStats_Response::mutable_upload_stats() {
  // @@protoc_insertion_point(field_mutable_list:CBroadcast_GetBroadcastUploadStats_Response.upload_stats)
  return &upload_stats_;
}
inline const ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats& CBroadcast_GetBroadcastUploadStats_Response::_internal_upload_stats(int index) const {
  return upload_stats_.Get(index);
}
inline const ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats& CBroadcast_GetBroadcastUploadStats_Response::upload_stats(int index) const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastUploadStats_Response.upload_stats)
  return _internal_upload_stats(index);
}
inline ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats* CBroadcast_GetBroadcastUploadStats_Response::_internal_add_upload_stats() {
  return upload_stats_.Add();
}
inline ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats* CBroadcast_GetBroadcastUploadStats_Response::add_upload_stats() {
  ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats* _add = _internal_add_upload_stats();
  // @@protoc_insertion_point(field_add:CBroadcast_GetBroadcastUploadStats_Response.upload_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastUploadStats_Response_UploadStats >&
CBroadcast_GetBroadcastUploadStats_Response::upload_stats() const {
  // @@protoc_insertion_point(field_list:CBroadcast_GetBroadcastUploadStats_Response.upload_stats)
  return upload_stats_;
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastViewerStats_Request

// optional uint64 upload_id = 1 [(.description) = "Get stats for this stream"];
inline bool CBroadcast_GetBroadcastViewerStats_Request::_internal_has_upload_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastViewerStats_Request::has_upload_id() const {
  return _internal_has_upload_id();
}
inline void CBroadcast_GetBroadcastViewerStats_Request::clear_upload_id() {
  upload_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_GetBroadcastViewerStats_Request::_internal_upload_id() const {
  return upload_id_;
}
inline uint64_t CBroadcast_GetBroadcastViewerStats_Request::upload_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastViewerStats_Request.upload_id)
  return _internal_upload_id();
}
inline void CBroadcast_GetBroadcastViewerStats_Request::_internal_set_upload_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  upload_id_ = value;
}
inline void CBroadcast_GetBroadcastViewerStats_Request::set_upload_id(uint64_t value) {
  _internal_set_upload_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastViewerStats_Request.upload_id)
}

// optional fixed64 steamid = 2 [(.description) = "Optional: The steamid of the broadcast whose details you are requesting."];
inline bool CBroadcast_GetBroadcastViewerStats_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastViewerStats_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CBroadcast_GetBroadcastViewerStats_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_GetBroadcastViewerStats_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CBroadcast_GetBroadcastViewerStats_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastViewerStats_Request.steamid)
  return _internal_steamid();
}
inline void CBroadcast_GetBroadcastViewerStats_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CBroadcast_GetBroadcastViewerStats_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastViewerStats_Request.steamid)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastViewerStats_Response_ViewerStats

// optional uint32 time = 1 [(.description) = "time of record"];
inline bool CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::has_time() const {
  return _internal_has_time();
}
inline void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::clear_time() {
  time_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::_internal_time() const {
  return time_;
}
inline uint32_t CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::time() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastViewerStats_Response.ViewerStats.time)
  return _internal_time();
}
inline void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::_internal_set_time(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastViewerStats_Response.ViewerStats.time)
}

// optional uint32 num_viewers = 2 [(.description) = "current number of viewers"];
inline bool CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::_internal_has_num_viewers() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::has_num_viewers() const {
  return _internal_has_num_viewers();
}
inline void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::clear_num_viewers() {
  num_viewers_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::_internal_num_viewers() const {
  return num_viewers_;
}
inline uint32_t CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::num_viewers() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastViewerStats_Response.ViewerStats.num_viewers)
  return _internal_num_viewers();
}
inline void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::_internal_set_num_viewers(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_viewers_ = value;
}
inline void CBroadcast_GetBroadcastViewerStats_Response_ViewerStats::set_num_viewers(uint32_t value) {
  _internal_set_num_viewers(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastViewerStats_Response.ViewerStats.num_viewers)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastViewerStats_Response_CountryStats

// optional string country_code = 1 [(.description) = "country code"];
inline bool CBroadcast_GetBroadcastViewerStats_Response_CountryStats::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastViewerStats_Response_CountryStats::has_country_code() const {
  return _internal_has_country_code();
}
inline void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_GetBroadcastViewerStats_Response_CountryStats::country_code() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastViewerStats_Response.CountryStats.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::set_country_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastViewerStats_Response.CountryStats.country_code)
}
inline std::string* CBroadcast_GetBroadcastViewerStats_Response_CountryStats::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetBroadcastViewerStats_Response.CountryStats.country_code)
  return _s;
}
inline const std::string& CBroadcast_GetBroadcastViewerStats_Response_CountryStats::_internal_country_code() const {
  return country_code_.Get();
}
inline void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastViewerStats_Response_CountryStats::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000001u;
  return country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_GetBroadcastViewerStats_Response_CountryStats::release_country_code() {
  // @@protoc_insertion_point(field_release:CBroadcast_GetBroadcastViewerStats_Response.CountryStats.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (country_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_GetBroadcastViewerStats_Response.CountryStats.country_code)
}

// optional uint32 num_viewers = 2 [(.description) = "number of viewers"];
inline bool CBroadcast_GetBroadcastViewerStats_Response_CountryStats::_internal_has_num_viewers() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_GetBroadcastViewerStats_Response_CountryStats::has_num_viewers() const {
  return _internal_has_num_viewers();
}
inline void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::clear_num_viewers() {
  num_viewers_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CBroadcast_GetBroadcastViewerStats_Response_CountryStats::_internal_num_viewers() const {
  return num_viewers_;
}
inline uint32_t CBroadcast_GetBroadcastViewerStats_Response_CountryStats::num_viewers() const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastViewerStats_Response.CountryStats.num_viewers)
  return _internal_num_viewers();
}
inline void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::_internal_set_num_viewers(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_viewers_ = value;
}
inline void CBroadcast_GetBroadcastViewerStats_Response_CountryStats::set_num_viewers(uint32_t value) {
  _internal_set_num_viewers(value);
  // @@protoc_insertion_point(field_set:CBroadcast_GetBroadcastViewerStats_Response.CountryStats.num_viewers)
}

// -------------------------------------------------------------------

// CBroadcast_GetBroadcastViewerStats_Response

// repeated .CBroadcast_GetBroadcastViewerStats_Response.ViewerStats viewer_stats = 1;
inline int CBroadcast_GetBroadcastViewerStats_Response::_internal_viewer_stats_size() const {
  return viewer_stats_.size();
}
inline int CBroadcast_GetBroadcastViewerStats_Response::viewer_stats_size() const {
  return _internal_viewer_stats_size();
}
inline void CBroadcast_GetBroadcastViewerStats_Response::clear_viewer_stats() {
  viewer_stats_.Clear();
}
inline ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* CBroadcast_GetBroadcastViewerStats_Response::mutable_viewer_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetBroadcastViewerStats_Response.viewer_stats)
  return viewer_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats >*
CBroadcast_GetBroadcastViewerStats_Response::mutable_viewer_stats() {
  // @@protoc_insertion_point(field_mutable_list:CBroadcast_GetBroadcastViewerStats_Response.viewer_stats)
  return &viewer_stats_;
}
inline const ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& CBroadcast_GetBroadcastViewerStats_Response::_internal_viewer_stats(int index) const {
  return viewer_stats_.Get(index);
}
inline const ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats& CBroadcast_GetBroadcastViewerStats_Response::viewer_stats(int index) const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastViewerStats_Response.viewer_stats)
  return _internal_viewer_stats(index);
}
inline ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* CBroadcast_GetBroadcastViewerStats_Response::_internal_add_viewer_stats() {
  return viewer_stats_.Add();
}
inline ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* CBroadcast_GetBroadcastViewerStats_Response::add_viewer_stats() {
  ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats* _add = _internal_add_viewer_stats();
  // @@protoc_insertion_point(field_add:CBroadcast_GetBroadcastViewerStats_Response.viewer_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastViewerStats_Response_ViewerStats >&
CBroadcast_GetBroadcastViewerStats_Response::viewer_stats() const {
  // @@protoc_insertion_point(field_list:CBroadcast_GetBroadcastViewerStats_Response.viewer_stats)
  return viewer_stats_;
}

// repeated .CBroadcast_GetBroadcastViewerStats_Response.CountryStats country_stats = 2;
inline int CBroadcast_GetBroadcastViewerStats_Response::_internal_country_stats_size() const {
  return country_stats_.size();
}
inline int CBroadcast_GetBroadcastViewerStats_Response::country_stats_size() const {
  return _internal_country_stats_size();
}
inline void CBroadcast_GetBroadcastViewerStats_Response::clear_country_stats() {
  country_stats_.Clear();
}
inline ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats* CBroadcast_GetBroadcastViewerStats_Response::mutable_country_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CBroadcast_GetBroadcastViewerStats_Response.country_stats)
  return country_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats >*
CBroadcast_GetBroadcastViewerStats_Response::mutable_country_stats() {
  // @@protoc_insertion_point(field_mutable_list:CBroadcast_GetBroadcastViewerStats_Response.country_stats)
  return &country_stats_;
}
inline const ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats& CBroadcast_GetBroadcastViewerStats_Response::_internal_country_stats(int index) const {
  return country_stats_.Get(index);
}
inline const ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats& CBroadcast_GetBroadcastViewerStats_Response::country_stats(int index) const {
  // @@protoc_insertion_point(field_get:CBroadcast_GetBroadcastViewerStats_Response.country_stats)
  return _internal_country_stats(index);
}
inline ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats* CBroadcast_GetBroadcastViewerStats_Response::_internal_add_country_stats() {
  return country_stats_.Add();
}
inline ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats* CBroadcast_GetBroadcastViewerStats_Response::add_country_stats() {
  ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats* _add = _internal_add_country_stats();
  // @@protoc_insertion_point(field_add:CBroadcast_GetBroadcastViewerStats_Response.country_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBroadcast_GetBroadcastViewerStats_Response_CountryStats >&
CBroadcast_GetBroadcastViewerStats_Response::country_stats() const {
  // @@protoc_insertion_point(field_list:CBroadcast_GetBroadcastViewerStats_Response.country_stats)
  return country_stats_;
}

// -------------------------------------------------------------------

// CBroadcast_BroadcastViewerState_Notification

// optional fixed64 steamid = 1;
inline bool CBroadcast_BroadcastViewerState_Notification::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_BroadcastViewerState_Notification::has_steamid() const {
  return _internal_has_steamid();
}
inline void CBroadcast_BroadcastViewerState_Notification::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_BroadcastViewerState_Notification::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CBroadcast_BroadcastViewerState_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BroadcastViewerState_Notification.steamid)
  return _internal_steamid();
}
inline void CBroadcast_BroadcastViewerState_Notification::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CBroadcast_BroadcastViewerState_Notification::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BroadcastViewerState_Notification.steamid)
}

// optional .CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
inline bool CBroadcast_BroadcastViewerState_Notification::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_BroadcastViewerState_Notification::has_state() const {
  return _internal_has_state();
}
inline void CBroadcast_BroadcastViewerState_Notification::clear_state() {
  state_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::_internal_state() const {
  return static_cast< ::CBroadcast_BroadcastViewerState_Notification_EViewerState >(state_);
}
inline ::CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::state() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BroadcastViewerState_Notification.state)
  return _internal_state();
}
inline void CBroadcast_BroadcastViewerState_Notification::_internal_set_state(::CBroadcast_BroadcastViewerState_Notification_EViewerState value) {
  assert(::CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  state_ = value;
}
inline void CBroadcast_BroadcastViewerState_Notification::set_state(::CBroadcast_BroadcastViewerState_Notification_EViewerState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BroadcastViewerState_Notification.state)
}

// -------------------------------------------------------------------

// CBroadcast_WaitingBroadcastViewer_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_WaitingBroadcastViewer_Notification::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_WaitingBroadcastViewer_Notification::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CBroadcast_WaitingBroadcastViewer_Notification::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_WaitingBroadcastViewer_Notification::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CBroadcast_WaitingBroadcastViewer_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WaitingBroadcastViewer_Notification.broadcast_id)
  return _internal_broadcast_id();
}
inline void CBroadcast_WaitingBroadcastViewer_Notification::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_id_ = value;
}
inline void CBroadcast_WaitingBroadcastViewer_Notification::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WaitingBroadcastViewer_Notification.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_BroadcastUploadStarted_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_BroadcastUploadStarted_Notification::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_BroadcastUploadStarted_Notification::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CBroadcast_BroadcastUploadStarted_Notification::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CBroadcast_BroadcastUploadStarted_Notification::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CBroadcast_BroadcastUploadStarted_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BroadcastUploadStarted_Notification.broadcast_id)
  return _internal_broadcast_id();
}
inline void CBroadcast_BroadcastUploadStarted_Notification::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  broadcast_id_ = value;
}
inline void CBroadcast_BroadcastUploadStarted_Notification::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BroadcastUploadStarted_Notification.broadcast_id)
}

// optional string upload_token = 2;
inline bool CBroadcast_BroadcastUploadStarted_Notification::_internal_has_upload_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_BroadcastUploadStarted_Notification::has_upload_token() const {
  return _internal_has_upload_token();
}
inline void CBroadcast_BroadcastUploadStarted_Notification::clear_upload_token() {
  upload_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_BroadcastUploadStarted_Notification::upload_token() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BroadcastUploadStarted_Notification.upload_token)
  return _internal_upload_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_BroadcastUploadStarted_Notification::set_upload_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 upload_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_BroadcastUploadStarted_Notification.upload_token)
}
inline std::string* CBroadcast_BroadcastUploadStarted_Notification::mutable_upload_token() {
  std::string* _s = _internal_mutable_upload_token();
  // @@protoc_insertion_point(field_mutable:CBroadcast_BroadcastUploadStarted_Notification.upload_token)
  return _s;
}
inline const std::string& CBroadcast_BroadcastUploadStarted_Notification::_internal_upload_token() const {
  return upload_token_.Get();
}
inline void CBroadcast_BroadcastUploadStarted_Notification::_internal_set_upload_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  upload_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_BroadcastUploadStarted_Notification::_internal_mutable_upload_token() {
  _has_bits_[0] |= 0x00000001u;
  return upload_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_BroadcastUploadStarted_Notification::release_upload_token() {
  // @@protoc_insertion_point(field_release:CBroadcast_BroadcastUploadStarted_Notification.upload_token)
  if (!_internal_has_upload_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = upload_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (upload_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_BroadcastUploadStarted_Notification::set_allocated_upload_token(std::string* upload_token) {
  if (upload_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  upload_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), upload_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (upload_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_BroadcastUploadStarted_Notification.upload_token)
}

// optional string upload_address = 3;
inline bool CBroadcast_BroadcastUploadStarted_Notification::_internal_has_upload_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_BroadcastUploadStarted_Notification::has_upload_address() const {
  return _internal_has_upload_address();
}
inline void CBroadcast_BroadcastUploadStarted_Notification::clear_upload_address() {
  upload_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBroadcast_BroadcastUploadStarted_Notification::upload_address() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BroadcastUploadStarted_Notification.upload_address)
  return _internal_upload_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_BroadcastUploadStarted_Notification::set_upload_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 upload_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_BroadcastUploadStarted_Notification.upload_address)
}
inline std::string* CBroadcast_BroadcastUploadStarted_Notification::mutable_upload_address() {
  std::string* _s = _internal_mutable_upload_address();
  // @@protoc_insertion_point(field_mutable:CBroadcast_BroadcastUploadStarted_Notification.upload_address)
  return _s;
}
inline const std::string& CBroadcast_BroadcastUploadStarted_Notification::_internal_upload_address() const {
  return upload_address_.Get();
}
inline void CBroadcast_BroadcastUploadStarted_Notification::_internal_set_upload_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  upload_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_BroadcastUploadStarted_Notification::_internal_mutable_upload_address() {
  _has_bits_[0] |= 0x00000002u;
  return upload_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_BroadcastUploadStarted_Notification::release_upload_address() {
  // @@protoc_insertion_point(field_release:CBroadcast_BroadcastUploadStarted_Notification.upload_address)
  if (!_internal_has_upload_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = upload_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (upload_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    upload_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_BroadcastUploadStarted_Notification::set_allocated_upload_address(std::string* upload_address) {
  if (upload_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  upload_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), upload_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (upload_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    upload_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_BroadcastUploadStarted_Notification.upload_address)
}

// optional string http_address = 4;
inline bool CBroadcast_BroadcastUploadStarted_Notification::_internal_has_http_address() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_BroadcastUploadStarted_Notification::has_http_address() const {
  return _internal_has_http_address();
}
inline void CBroadcast_BroadcastUploadStarted_Notification::clear_http_address() {
  http_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CBroadcast_BroadcastUploadStarted_Notification::http_address() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BroadcastUploadStarted_Notification.http_address)
  return _internal_http_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_BroadcastUploadStarted_Notification::set_http_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 http_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_BroadcastUploadStarted_Notification.http_address)
}
inline std::string* CBroadcast_BroadcastUploadStarted_Notification::mutable_http_address() {
  std::string* _s = _internal_mutable_http_address();
  // @@protoc_insertion_point(field_mutable:CBroadcast_BroadcastUploadStarted_Notification.http_address)
  return _s;
}
inline const std::string& CBroadcast_BroadcastUploadStarted_Notification::_internal_http_address() const {
  return http_address_.Get();
}
inline void CBroadcast_BroadcastUploadStarted_Notification::_internal_set_http_address(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  http_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_BroadcastUploadStarted_Notification::_internal_mutable_http_address() {
  _has_bits_[0] |= 0x00000004u;
  return http_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_BroadcastUploadStarted_Notification::release_http_address() {
  // @@protoc_insertion_point(field_release:CBroadcast_BroadcastUploadStarted_Notification.http_address)
  if (!_internal_has_http_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = http_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (http_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    http_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_BroadcastUploadStarted_Notification::set_allocated_http_address(std::string* http_address) {
  if (http_address != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  http_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), http_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (http_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    http_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_BroadcastUploadStarted_Notification.http_address)
}

// optional fixed64 broadcast_upload_id = 5;
inline bool CBroadcast_BroadcastUploadStarted_Notification::_internal_has_broadcast_upload_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_BroadcastUploadStarted_Notification::has_broadcast_upload_id() const {
  return _internal_has_broadcast_upload_id();
}
inline void CBroadcast_BroadcastUploadStarted_Notification::clear_broadcast_upload_id() {
  broadcast_upload_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CBroadcast_BroadcastUploadStarted_Notification::_internal_broadcast_upload_id() const {
  return broadcast_upload_id_;
}
inline uint64_t CBroadcast_BroadcastUploadStarted_Notification::broadcast_upload_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BroadcastUploadStarted_Notification.broadcast_upload_id)
  return _internal_broadcast_upload_id();
}
inline void CBroadcast_BroadcastUploadStarted_Notification::_internal_set_broadcast_upload_id(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  broadcast_upload_id_ = value;
}
inline void CBroadcast_BroadcastUploadStarted_Notification::set_broadcast_upload_id(uint64_t value) {
  _internal_set_broadcast_upload_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BroadcastUploadStarted_Notification.broadcast_upload_id)
}

// optional uint32 heartbeat_interval_seconds = 6 [(.description) = "how many seconds between session heartbeats"];
inline bool CBroadcast_BroadcastUploadStarted_Notification::_internal_has_heartbeat_interval_seconds() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CBroadcast_BroadcastUploadStarted_Notification::has_heartbeat_interval_seconds() const {
  return _internal_has_heartbeat_interval_seconds();
}
inline void CBroadcast_BroadcastUploadStarted_Notification::clear_heartbeat_interval_seconds() {
  heartbeat_interval_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CBroadcast_BroadcastUploadStarted_Notification::_internal_heartbeat_interval_seconds() const {
  return heartbeat_interval_seconds_;
}
inline uint32_t CBroadcast_BroadcastUploadStarted_Notification::heartbeat_interval_seconds() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BroadcastUploadStarted_Notification.heartbeat_interval_seconds)
  return _internal_heartbeat_interval_seconds();
}
inline void CBroadcast_BroadcastUploadStarted_Notification::_internal_set_heartbeat_interval_seconds(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  heartbeat_interval_seconds_ = value;
}
inline void CBroadcast_BroadcastUploadStarted_Notification::set_heartbeat_interval_seconds(uint32_t value) {
  _internal_set_heartbeat_interval_seconds(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BroadcastUploadStarted_Notification.heartbeat_interval_seconds)
}

// optional bool is_rtmp = 7;
inline bool CBroadcast_BroadcastUploadStarted_Notification::_internal_has_is_rtmp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CBroadcast_BroadcastUploadStarted_Notification::has_is_rtmp() const {
  return _internal_has_is_rtmp();
}
inline void CBroadcast_BroadcastUploadStarted_Notification::clear_is_rtmp() {
  is_rtmp_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CBroadcast_BroadcastUploadStarted_Notification::_internal_is_rtmp() const {
  return is_rtmp_;
}
inline bool CBroadcast_BroadcastUploadStarted_Notification::is_rtmp() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BroadcastUploadStarted_Notification.is_rtmp)
  return _internal_is_rtmp();
}
inline void CBroadcast_BroadcastUploadStarted_Notification::_internal_set_is_rtmp(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_rtmp_ = value;
}
inline void CBroadcast_BroadcastUploadStarted_Notification::set_is_rtmp(bool value) {
  _internal_set_is_rtmp(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BroadcastUploadStarted_Notification.is_rtmp)
}

// -------------------------------------------------------------------

// CBroadcast_StopBroadcastUpload_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_StopBroadcastUpload_Notification::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_StopBroadcastUpload_Notification::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_StopBroadcastUpload_Notification::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CBroadcast_StopBroadcastUpload_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StopBroadcastUpload_Notification.broadcast_id)
  return _internal_broadcast_id();
}
inline void CBroadcast_StopBroadcastUpload_Notification::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_id_ = value;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StopBroadcastUpload_Notification.broadcast_id)
}

// optional fixed64 broadcast_relay_id = 2;
inline bool CBroadcast_StopBroadcastUpload_Notification::_internal_has_broadcast_relay_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_StopBroadcastUpload_Notification::has_broadcast_relay_id() const {
  return _internal_has_broadcast_relay_id();
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_broadcast_relay_id() {
  broadcast_relay_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_StopBroadcastUpload_Notification::_internal_broadcast_relay_id() const {
  return broadcast_relay_id_;
}
inline uint64_t CBroadcast_StopBroadcastUpload_Notification::broadcast_relay_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StopBroadcastUpload_Notification.broadcast_relay_id)
  return _internal_broadcast_relay_id();
}
inline void CBroadcast_StopBroadcastUpload_Notification::_internal_set_broadcast_relay_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_relay_id_ = value;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_broadcast_relay_id(uint64_t value) {
  _internal_set_broadcast_relay_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StopBroadcastUpload_Notification.broadcast_relay_id)
}

// optional uint32 upload_result = 3;
inline bool CBroadcast_StopBroadcastUpload_Notification::_internal_has_upload_result() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_StopBroadcastUpload_Notification::has_upload_result() const {
  return _internal_has_upload_result();
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_upload_result() {
  upload_result_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CBroadcast_StopBroadcastUpload_Notification::_internal_upload_result() const {
  return upload_result_;
}
inline uint32_t CBroadcast_StopBroadcastUpload_Notification::upload_result() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StopBroadcastUpload_Notification.upload_result)
  return _internal_upload_result();
}
inline void CBroadcast_StopBroadcastUpload_Notification::_internal_set_upload_result(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  upload_result_ = value;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_upload_result(uint32_t value) {
  _internal_set_upload_result(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StopBroadcastUpload_Notification.upload_result)
}

// optional bool too_many_poor_uploads = 4;
inline bool CBroadcast_StopBroadcastUpload_Notification::_internal_has_too_many_poor_uploads() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_StopBroadcastUpload_Notification::has_too_many_poor_uploads() const {
  return _internal_has_too_many_poor_uploads();
}
inline void CBroadcast_StopBroadcastUpload_Notification::clear_too_many_poor_uploads() {
  too_many_poor_uploads_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CBroadcast_StopBroadcastUpload_Notification::_internal_too_many_poor_uploads() const {
  return too_many_poor_uploads_;
}
inline bool CBroadcast_StopBroadcastUpload_Notification::too_many_poor_uploads() const {
  // @@protoc_insertion_point(field_get:CBroadcast_StopBroadcastUpload_Notification.too_many_poor_uploads)
  return _internal_too_many_poor_uploads();
}
inline void CBroadcast_StopBroadcastUpload_Notification::_internal_set_too_many_poor_uploads(bool value) {
  _has_bits_[0] |= 0x00000008u;
  too_many_poor_uploads_ = value;
}
inline void CBroadcast_StopBroadcastUpload_Notification::set_too_many_poor_uploads(bool value) {
  _internal_set_too_many_poor_uploads(value);
  // @@protoc_insertion_point(field_set:CBroadcast_StopBroadcastUpload_Notification.too_many_poor_uploads)
}

// -------------------------------------------------------------------

// CBroadcast_SessionClosed_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_SessionClosed_Notification::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_SessionClosed_Notification::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CBroadcast_SessionClosed_Notification::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_SessionClosed_Notification::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CBroadcast_SessionClosed_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SessionClosed_Notification.broadcast_id)
  return _internal_broadcast_id();
}
inline void CBroadcast_SessionClosed_Notification::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_id_ = value;
}
inline void CBroadcast_SessionClosed_Notification::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SessionClosed_Notification.broadcast_id)
}

// -------------------------------------------------------------------

// CBroadcast_ViewerBroadcastInvite_Notification

// optional fixed64 broadcaster_steamid = 1;
inline bool CBroadcast_ViewerBroadcastInvite_Notification::_internal_has_broadcaster_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_ViewerBroadcastInvite_Notification::has_broadcaster_steamid() const {
  return _internal_has_broadcaster_steamid();
}
inline void CBroadcast_ViewerBroadcastInvite_Notification::clear_broadcaster_steamid() {
  broadcaster_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_ViewerBroadcastInvite_Notification::_internal_broadcaster_steamid() const {
  return broadcaster_steamid_;
}
inline uint64_t CBroadcast_ViewerBroadcastInvite_Notification::broadcaster_steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_ViewerBroadcastInvite_Notification.broadcaster_steamid)
  return _internal_broadcaster_steamid();
}
inline void CBroadcast_ViewerBroadcastInvite_Notification::_internal_set_broadcaster_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  broadcaster_steamid_ = value;
}
inline void CBroadcast_ViewerBroadcastInvite_Notification::set_broadcaster_steamid(uint64_t value) {
  _internal_set_broadcaster_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_ViewerBroadcastInvite_Notification.broadcaster_steamid)
}

// -------------------------------------------------------------------

// CBroadcast_BroadcastStatus_Notification

// optional fixed64 broadcast_id = 1;
inline bool CBroadcast_BroadcastStatus_Notification::_internal_has_broadcast_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_BroadcastStatus_Notification::has_broadcast_id() const {
  return _internal_has_broadcast_id();
}
inline void CBroadcast_BroadcastStatus_Notification::clear_broadcast_id() {
  broadcast_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_BroadcastStatus_Notification::_internal_broadcast_id() const {
  return broadcast_id_;
}
inline uint64_t CBroadcast_BroadcastStatus_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BroadcastStatus_Notification.broadcast_id)
  return _internal_broadcast_id();
}
inline void CBroadcast_BroadcastStatus_Notification::_internal_set_broadcast_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_id_ = value;
}
inline void CBroadcast_BroadcastStatus_Notification::set_broadcast_id(uint64_t value) {
  _internal_set_broadcast_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BroadcastStatus_Notification.broadcast_id)
}

// optional int32 num_viewers = 2;
inline bool CBroadcast_BroadcastStatus_Notification::_internal_has_num_viewers() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_BroadcastStatus_Notification::has_num_viewers() const {
  return _internal_has_num_viewers();
}
inline void CBroadcast_BroadcastStatus_Notification::clear_num_viewers() {
  num_viewers_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CBroadcast_BroadcastStatus_Notification::_internal_num_viewers() const {
  return num_viewers_;
}
inline int32_t CBroadcast_BroadcastStatus_Notification::num_viewers() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BroadcastStatus_Notification.num_viewers)
  return _internal_num_viewers();
}
inline void CBroadcast_BroadcastStatus_Notification::_internal_set_num_viewers(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_viewers_ = value;
}
inline void CBroadcast_BroadcastStatus_Notification::set_num_viewers(int32_t value) {
  _internal_set_num_viewers(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BroadcastStatus_Notification.num_viewers)
}

// -------------------------------------------------------------------

// CBroadcast_BroadcastChannelLive_Notification

// optional fixed64 broadcast_channel_id = 1;
inline bool CBroadcast_BroadcastChannelLive_Notification::_internal_has_broadcast_channel_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_BroadcastChannelLive_Notification::has_broadcast_channel_id() const {
  return _internal_has_broadcast_channel_id();
}
inline void CBroadcast_BroadcastChannelLive_Notification::clear_broadcast_channel_id() {
  broadcast_channel_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_BroadcastChannelLive_Notification::_internal_broadcast_channel_id() const {
  return broadcast_channel_id_;
}
inline uint64_t CBroadcast_BroadcastChannelLive_Notification::broadcast_channel_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_id)
  return _internal_broadcast_channel_id();
}
inline void CBroadcast_BroadcastChannelLive_Notification::_internal_set_broadcast_channel_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  broadcast_channel_id_ = value;
}
inline void CBroadcast_BroadcastChannelLive_Notification::set_broadcast_channel_id(uint64_t value) {
  _internal_set_broadcast_channel_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_id)
}

// optional string broadcast_channel_name = 2;
inline bool CBroadcast_BroadcastChannelLive_Notification::_internal_has_broadcast_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_BroadcastChannelLive_Notification::has_broadcast_channel_name() const {
  return _internal_has_broadcast_channel_name();
}
inline void CBroadcast_BroadcastChannelLive_Notification::clear_broadcast_channel_name() {
  broadcast_channel_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_BroadcastChannelLive_Notification::broadcast_channel_name() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_name)
  return _internal_broadcast_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_BroadcastChannelLive_Notification::set_broadcast_channel_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 broadcast_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_name)
}
inline std::string* CBroadcast_BroadcastChannelLive_Notification::mutable_broadcast_channel_name() {
  std::string* _s = _internal_mutable_broadcast_channel_name();
  // @@protoc_insertion_point(field_mutable:CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_name)
  return _s;
}
inline const std::string& CBroadcast_BroadcastChannelLive_Notification::_internal_broadcast_channel_name() const {
  return broadcast_channel_name_.Get();
}
inline void CBroadcast_BroadcastChannelLive_Notification::_internal_set_broadcast_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_BroadcastChannelLive_Notification::_internal_mutable_broadcast_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  return broadcast_channel_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_BroadcastChannelLive_Notification::release_broadcast_channel_name() {
  // @@protoc_insertion_point(field_release:CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_name)
  if (!_internal_has_broadcast_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = broadcast_channel_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (broadcast_channel_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    broadcast_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_BroadcastChannelLive_Notification::set_allocated_broadcast_channel_name(std::string* broadcast_channel_name) {
  if (broadcast_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  broadcast_channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broadcast_channel_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (broadcast_channel_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    broadcast_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_name)
}

// optional string broadcast_channel_avatar = 3;
inline bool CBroadcast_BroadcastChannelLive_Notification::_internal_has_broadcast_channel_avatar() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_BroadcastChannelLive_Notification::has_broadcast_channel_avatar() const {
  return _internal_has_broadcast_channel_avatar();
}
inline void CBroadcast_BroadcastChannelLive_Notification::clear_broadcast_channel_avatar() {
  broadcast_channel_avatar_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBroadcast_BroadcastChannelLive_Notification::broadcast_channel_avatar() const {
  // @@protoc_insertion_point(field_get:CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_avatar)
  return _internal_broadcast_channel_avatar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_BroadcastChannelLive_Notification::set_broadcast_channel_avatar(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 broadcast_channel_avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_avatar)
}
inline std::string* CBroadcast_BroadcastChannelLive_Notification::mutable_broadcast_channel_avatar() {
  std::string* _s = _internal_mutable_broadcast_channel_avatar();
  // @@protoc_insertion_point(field_mutable:CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_avatar)
  return _s;
}
inline const std::string& CBroadcast_BroadcastChannelLive_Notification::_internal_broadcast_channel_avatar() const {
  return broadcast_channel_avatar_.Get();
}
inline void CBroadcast_BroadcastChannelLive_Notification::_internal_set_broadcast_channel_avatar(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_channel_avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_BroadcastChannelLive_Notification::_internal_mutable_broadcast_channel_avatar() {
  _has_bits_[0] |= 0x00000002u;
  return broadcast_channel_avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_BroadcastChannelLive_Notification::release_broadcast_channel_avatar() {
  // @@protoc_insertion_point(field_release:CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_avatar)
  if (!_internal_has_broadcast_channel_avatar()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = broadcast_channel_avatar_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (broadcast_channel_avatar_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    broadcast_channel_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_BroadcastChannelLive_Notification::set_allocated_broadcast_channel_avatar(std::string* broadcast_channel_avatar) {
  if (broadcast_channel_avatar != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  broadcast_channel_avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broadcast_channel_avatar,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (broadcast_channel_avatar_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    broadcast_channel_avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_BroadcastChannelLive_Notification.broadcast_channel_avatar)
}

// -------------------------------------------------------------------

// CBroadcast_SendThumbnailToRelay_Notification

// optional string thumbnail_upload_token = 1;
inline bool CBroadcast_SendThumbnailToRelay_Notification::_internal_has_thumbnail_upload_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_SendThumbnailToRelay_Notification::has_thumbnail_upload_token() const {
  return _internal_has_thumbnail_upload_token();
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_thumbnail_upload_token() {
  thumbnail_upload_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_SendThumbnailToRelay_Notification::thumbnail_upload_token() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
  return _internal_thumbnail_upload_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_upload_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 thumbnail_upload_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
}
inline std::string* CBroadcast_SendThumbnailToRelay_Notification::mutable_thumbnail_upload_token() {
  std::string* _s = _internal_mutable_thumbnail_upload_token();
  // @@protoc_insertion_point(field_mutable:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
  return _s;
}
inline const std::string& CBroadcast_SendThumbnailToRelay_Notification::_internal_thumbnail_upload_token() const {
  return thumbnail_upload_token_.Get();
}
inline void CBroadcast_SendThumbnailToRelay_Notification::_internal_set_thumbnail_upload_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  thumbnail_upload_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_SendThumbnailToRelay_Notification::_internal_mutable_thumbnail_upload_token() {
  _has_bits_[0] |= 0x00000001u;
  return thumbnail_upload_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_SendThumbnailToRelay_Notification::release_thumbnail_upload_token() {
  // @@protoc_insertion_point(field_release:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
  if (!_internal_has_thumbnail_upload_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = thumbnail_upload_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_upload_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_allocated_thumbnail_upload_token(std::string* thumbnail_upload_token) {
  if (thumbnail_upload_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  thumbnail_upload_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnail_upload_token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_upload_token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_upload_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_upload_token)
}

// optional fixed64 thumbnail_broadcast_session_id = 2;
inline bool CBroadcast_SendThumbnailToRelay_Notification::_internal_has_thumbnail_broadcast_session_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_SendThumbnailToRelay_Notification::has_thumbnail_broadcast_session_id() const {
  return _internal_has_thumbnail_broadcast_session_id();
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_thumbnail_broadcast_session_id() {
  thumbnail_broadcast_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_SendThumbnailToRelay_Notification::_internal_thumbnail_broadcast_session_id() const {
  return thumbnail_broadcast_session_id_;
}
inline uint64_t CBroadcast_SendThumbnailToRelay_Notification::thumbnail_broadcast_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_broadcast_session_id)
  return _internal_thumbnail_broadcast_session_id();
}
inline void CBroadcast_SendThumbnailToRelay_Notification::_internal_set_thumbnail_broadcast_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  thumbnail_broadcast_session_id_ = value;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_broadcast_session_id(uint64_t value) {
  _internal_set_thumbnail_broadcast_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_broadcast_session_id)
}

// optional bytes thumbnail_data = 3;
inline bool CBroadcast_SendThumbnailToRelay_Notification::_internal_has_thumbnail_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_SendThumbnailToRelay_Notification::has_thumbnail_data() const {
  return _internal_has_thumbnail_data();
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_thumbnail_data() {
  thumbnail_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CBroadcast_SendThumbnailToRelay_Notification::thumbnail_data() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
  return _internal_thumbnail_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 thumbnail_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
}
inline std::string* CBroadcast_SendThumbnailToRelay_Notification::mutable_thumbnail_data() {
  std::string* _s = _internal_mutable_thumbnail_data();
  // @@protoc_insertion_point(field_mutable:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
  return _s;
}
inline const std::string& CBroadcast_SendThumbnailToRelay_Notification::_internal_thumbnail_data() const {
  return thumbnail_data_.Get();
}
inline void CBroadcast_SendThumbnailToRelay_Notification::_internal_set_thumbnail_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  thumbnail_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_SendThumbnailToRelay_Notification::_internal_mutable_thumbnail_data() {
  _has_bits_[0] |= 0x00000002u;
  return thumbnail_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_SendThumbnailToRelay_Notification::release_thumbnail_data() {
  // @@protoc_insertion_point(field_release:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
  if (!_internal_has_thumbnail_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = thumbnail_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_allocated_thumbnail_data(std::string* thumbnail_data) {
  if (thumbnail_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  thumbnail_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thumbnail_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (thumbnail_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    thumbnail_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_data)
}

// optional uint32 thumbnail_width = 4;
inline bool CBroadcast_SendThumbnailToRelay_Notification::_internal_has_thumbnail_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_SendThumbnailToRelay_Notification::has_thumbnail_width() const {
  return _internal_has_thumbnail_width();
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_thumbnail_width() {
  thumbnail_width_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CBroadcast_SendThumbnailToRelay_Notification::_internal_thumbnail_width() const {
  return thumbnail_width_;
}
inline uint32_t CBroadcast_SendThumbnailToRelay_Notification::thumbnail_width() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_width)
  return _internal_thumbnail_width();
}
inline void CBroadcast_SendThumbnailToRelay_Notification::_internal_set_thumbnail_width(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  thumbnail_width_ = value;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_width(uint32_t value) {
  _internal_set_thumbnail_width(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_width)
}

// optional uint32 thumbnail_height = 5;
inline bool CBroadcast_SendThumbnailToRelay_Notification::_internal_has_thumbnail_height() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CBroadcast_SendThumbnailToRelay_Notification::has_thumbnail_height() const {
  return _internal_has_thumbnail_height();
}
inline void CBroadcast_SendThumbnailToRelay_Notification::clear_thumbnail_height() {
  thumbnail_height_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CBroadcast_SendThumbnailToRelay_Notification::_internal_thumbnail_height() const {
  return thumbnail_height_;
}
inline uint32_t CBroadcast_SendThumbnailToRelay_Notification::thumbnail_height() const {
  // @@protoc_insertion_point(field_get:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_height)
  return _internal_thumbnail_height();
}
inline void CBroadcast_SendThumbnailToRelay_Notification::_internal_set_thumbnail_height(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  thumbnail_height_ = value;
}
inline void CBroadcast_SendThumbnailToRelay_Notification::set_thumbnail_height(uint32_t value) {
  _internal_set_thumbnail_height(value);
  // @@protoc_insertion_point(field_set:CBroadcast_SendThumbnailToRelay_Notification.thumbnail_height)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCNeedTURNServer_Notification

// optional fixed64 broadcast_session_id = 1;
inline bool CBroadcast_WebRTCNeedTURNServer_Notification::_internal_has_broadcast_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCNeedTURNServer_Notification::has_broadcast_session_id() const {
  return _internal_has_broadcast_session_id();
}
inline void CBroadcast_WebRTCNeedTURNServer_Notification::clear_broadcast_session_id() {
  broadcast_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_WebRTCNeedTURNServer_Notification::_internal_broadcast_session_id() const {
  return broadcast_session_id_;
}
inline uint64_t CBroadcast_WebRTCNeedTURNServer_Notification::broadcast_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCNeedTURNServer_Notification.broadcast_session_id)
  return _internal_broadcast_session_id();
}
inline void CBroadcast_WebRTCNeedTURNServer_Notification::_internal_set_broadcast_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_session_id_ = value;
}
inline void CBroadcast_WebRTCNeedTURNServer_Notification::set_broadcast_session_id(uint64_t value) {
  _internal_set_broadcast_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCNeedTURNServer_Notification.broadcast_session_id)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCStart_Notification

// optional fixed64 broadcast_session_id = 1;
inline bool CBroadcast_WebRTCStart_Notification::_internal_has_broadcast_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCStart_Notification::has_broadcast_session_id() const {
  return _internal_has_broadcast_session_id();
}
inline void CBroadcast_WebRTCStart_Notification::clear_broadcast_session_id() {
  broadcast_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CBroadcast_WebRTCStart_Notification::_internal_broadcast_session_id() const {
  return broadcast_session_id_;
}
inline uint64_t CBroadcast_WebRTCStart_Notification::broadcast_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCStart_Notification.broadcast_session_id)
  return _internal_broadcast_session_id();
}
inline void CBroadcast_WebRTCStart_Notification::_internal_set_broadcast_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  broadcast_session_id_ = value;
}
inline void CBroadcast_WebRTCStart_Notification::set_broadcast_session_id(uint64_t value) {
  _internal_set_broadcast_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCStart_Notification.broadcast_session_id)
}

// optional fixed64 webrtc_session_id = 2;
inline bool CBroadcast_WebRTCStart_Notification::_internal_has_webrtc_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCStart_Notification::has_webrtc_session_id() const {
  return _internal_has_webrtc_session_id();
}
inline void CBroadcast_WebRTCStart_Notification::clear_webrtc_session_id() {
  webrtc_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_WebRTCStart_Notification::_internal_webrtc_session_id() const {
  return webrtc_session_id_;
}
inline uint64_t CBroadcast_WebRTCStart_Notification::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCStart_Notification.webrtc_session_id)
  return _internal_webrtc_session_id();
}
inline void CBroadcast_WebRTCStart_Notification::_internal_set_webrtc_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  webrtc_session_id_ = value;
}
inline void CBroadcast_WebRTCStart_Notification::set_webrtc_session_id(uint64_t value) {
  _internal_set_webrtc_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCStart_Notification.webrtc_session_id)
}

// optional fixed64 viewer_steamid = 3;
inline bool CBroadcast_WebRTCStart_Notification::_internal_has_viewer_steamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCStart_Notification::has_viewer_steamid() const {
  return _internal_has_viewer_steamid();
}
inline void CBroadcast_WebRTCStart_Notification::clear_viewer_steamid() {
  viewer_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_WebRTCStart_Notification::_internal_viewer_steamid() const {
  return viewer_steamid_;
}
inline uint64_t CBroadcast_WebRTCStart_Notification::viewer_steamid() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCStart_Notification.viewer_steamid)
  return _internal_viewer_steamid();
}
inline void CBroadcast_WebRTCStart_Notification::_internal_set_viewer_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  viewer_steamid_ = value;
}
inline void CBroadcast_WebRTCStart_Notification::set_viewer_steamid(uint64_t value) {
  _internal_set_viewer_steamid(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCStart_Notification.viewer_steamid)
}

// optional fixed64 viewer_token = 4;
inline bool CBroadcast_WebRTCStart_Notification::_internal_has_viewer_token() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCStart_Notification::has_viewer_token() const {
  return _internal_has_viewer_token();
}
inline void CBroadcast_WebRTCStart_Notification::clear_viewer_token() {
  viewer_token_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CBroadcast_WebRTCStart_Notification::_internal_viewer_token() const {
  return viewer_token_;
}
inline uint64_t CBroadcast_WebRTCStart_Notification::viewer_token() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCStart_Notification.viewer_token)
  return _internal_viewer_token();
}
inline void CBroadcast_WebRTCStart_Notification::_internal_set_viewer_token(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  viewer_token_ = value;
}
inline void CBroadcast_WebRTCStart_Notification::set_viewer_token(uint64_t value) {
  _internal_set_viewer_token(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCStart_Notification.viewer_token)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCSetAnswer_Notification

// optional fixed64 broadcast_session_id = 1;
inline bool CBroadcast_WebRTCSetAnswer_Notification::_internal_has_broadcast_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCSetAnswer_Notification::has_broadcast_session_id() const {
  return _internal_has_broadcast_session_id();
}
inline void CBroadcast_WebRTCSetAnswer_Notification::clear_broadcast_session_id() {
  broadcast_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_WebRTCSetAnswer_Notification::_internal_broadcast_session_id() const {
  return broadcast_session_id_;
}
inline uint64_t CBroadcast_WebRTCSetAnswer_Notification::broadcast_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCSetAnswer_Notification.broadcast_session_id)
  return _internal_broadcast_session_id();
}
inline void CBroadcast_WebRTCSetAnswer_Notification::_internal_set_broadcast_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_session_id_ = value;
}
inline void CBroadcast_WebRTCSetAnswer_Notification::set_broadcast_session_id(uint64_t value) {
  _internal_set_broadcast_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCSetAnswer_Notification.broadcast_session_id)
}

// optional fixed64 webrtc_session_id = 2;
inline bool CBroadcast_WebRTCSetAnswer_Notification::_internal_has_webrtc_session_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCSetAnswer_Notification::has_webrtc_session_id() const {
  return _internal_has_webrtc_session_id();
}
inline void CBroadcast_WebRTCSetAnswer_Notification::clear_webrtc_session_id() {
  webrtc_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_WebRTCSetAnswer_Notification::_internal_webrtc_session_id() const {
  return webrtc_session_id_;
}
inline uint64_t CBroadcast_WebRTCSetAnswer_Notification::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCSetAnswer_Notification.webrtc_session_id)
  return _internal_webrtc_session_id();
}
inline void CBroadcast_WebRTCSetAnswer_Notification::_internal_set_webrtc_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  webrtc_session_id_ = value;
}
inline void CBroadcast_WebRTCSetAnswer_Notification::set_webrtc_session_id(uint64_t value) {
  _internal_set_webrtc_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCSetAnswer_Notification.webrtc_session_id)
}

// optional string answer = 3;
inline bool CBroadcast_WebRTCSetAnswer_Notification::_internal_has_answer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCSetAnswer_Notification::has_answer() const {
  return _internal_has_answer();
}
inline void CBroadcast_WebRTCSetAnswer_Notification::clear_answer() {
  answer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBroadcast_WebRTCSetAnswer_Notification::answer() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCSetAnswer_Notification.answer)
  return _internal_answer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CBroadcast_WebRTCSetAnswer_Notification::set_answer(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 answer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCSetAnswer_Notification.answer)
}
inline std::string* CBroadcast_WebRTCSetAnswer_Notification::mutable_answer() {
  std::string* _s = _internal_mutable_answer();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WebRTCSetAnswer_Notification.answer)
  return _s;
}
inline const std::string& CBroadcast_WebRTCSetAnswer_Notification::_internal_answer() const {
  return answer_.Get();
}
inline void CBroadcast_WebRTCSetAnswer_Notification::_internal_set_answer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  answer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CBroadcast_WebRTCSetAnswer_Notification::_internal_mutable_answer() {
  _has_bits_[0] |= 0x00000001u;
  return answer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CBroadcast_WebRTCSetAnswer_Notification::release_answer() {
  // @@protoc_insertion_point(field_release:CBroadcast_WebRTCSetAnswer_Notification.answer)
  if (!_internal_has_answer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = answer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (answer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CBroadcast_WebRTCSetAnswer_Notification::set_allocated_answer(std::string* answer) {
  if (answer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  answer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (answer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    answer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WebRTCSetAnswer_Notification.answer)
}

// -------------------------------------------------------------------

// CBroadcast_WebRTCAddViewerCandidate_Notification

// optional fixed64 broadcast_session_id = 1;
inline bool CBroadcast_WebRTCAddViewerCandidate_Notification::_internal_has_broadcast_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCAddViewerCandidate_Notification::has_broadcast_session_id() const {
  return _internal_has_broadcast_session_id();
}
inline void CBroadcast_WebRTCAddViewerCandidate_Notification::clear_broadcast_session_id() {
  broadcast_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CBroadcast_WebRTCAddViewerCandidate_Notification::_internal_broadcast_session_id() const {
  return broadcast_session_id_;
}
inline uint64_t CBroadcast_WebRTCAddViewerCandidate_Notification::broadcast_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCAddViewerCandidate_Notification.broadcast_session_id)
  return _internal_broadcast_session_id();
}
inline void CBroadcast_WebRTCAddViewerCandidate_Notification::_internal_set_broadcast_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_session_id_ = value;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Notification::set_broadcast_session_id(uint64_t value) {
  _internal_set_broadcast_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCAddViewerCandidate_Notification.broadcast_session_id)
}

// optional fixed64 webrtc_session_id = 2;
inline bool CBroadcast_WebRTCAddViewerCandidate_Notification::_internal_has_webrtc_session_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBroadcast_WebRTCAddViewerCandidate_Notification::has_webrtc_session_id() const {
  return _internal_has_webrtc_session_id();
}
inline void CBroadcast_WebRTCAddViewerCandidate_Notification::clear_webrtc_session_id() {
  webrtc_session_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CBroadcast_WebRTCAddViewerCandidate_Notification::_internal_webrtc_session_id() const {
  return webrtc_session_id_;
}
inline uint64_t CBroadcast_WebRTCAddViewerCandidate_Notification::webrtc_session_id() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCAddViewerCandidate_Notification.webrtc_session_id)
  return _internal_webrtc_session_id();
}
inline void CBroadcast_WebRTCAddViewerCandidate_Notification::_internal_set_webrtc_session_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  webrtc_session_id_ = value;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Notification::set_webrtc_session_id(uint64_t value) {
  _internal_set_webrtc_session_id(value);
  // @@protoc_insertion_point(field_set:CBroadcast_WebRTCAddViewerCandidate_Notification.webrtc_session_id)
}

// optional .CBroadcast_WebRTC_Candidate candidate = 3;
inline bool CBroadcast_WebRTCAddViewerCandidate_Notification::_internal_has_candidate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || candidate_ != nullptr);
  return value;
}
inline bool CBroadcast_WebRTCAddViewerCandidate_Notification::has_candidate() const {
  return _internal_has_candidate();
}
inline void CBroadcast_WebRTCAddViewerCandidate_Notification::clear_candidate() {
  if (candidate_ != nullptr) candidate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CBroadcast_WebRTC_Candidate& CBroadcast_WebRTCAddViewerCandidate_Notification::_internal_candidate() const {
  const ::CBroadcast_WebRTC_Candidate* p = candidate_;
  return p != nullptr ? *p : reinterpret_cast<const ::CBroadcast_WebRTC_Candidate&>(
      ::_CBroadcast_WebRTC_Candidate_default_instance_);
}
inline const ::CBroadcast_WebRTC_Candidate& CBroadcast_WebRTCAddViewerCandidate_Notification::candidate() const {
  // @@protoc_insertion_point(field_get:CBroadcast_WebRTCAddViewerCandidate_Notification.candidate)
  return _internal_candidate();
}
inline void CBroadcast_WebRTCAddViewerCandidate_Notification::unsafe_arena_set_allocated_candidate(
    ::CBroadcast_WebRTC_Candidate* candidate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_);
  }
  candidate_ = candidate;
  if (candidate) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CBroadcast_WebRTCAddViewerCandidate_Notification.candidate)
}
inline ::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddViewerCandidate_Notification::release_candidate() {
  _has_bits_[0] &= ~0x00000001u;
  ::CBroadcast_WebRTC_Candidate* temp = candidate_;
  candidate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddViewerCandidate_Notification::unsafe_arena_release_candidate() {
  // @@protoc_insertion_point(field_release:CBroadcast_WebRTCAddViewerCandidate_Notification.candidate)
  _has_bits_[0] &= ~0x00000001u;
  ::CBroadcast_WebRTC_Candidate* temp = candidate_;
  candidate_ = nullptr;
  return temp;
}
inline ::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddViewerCandidate_Notification::_internal_mutable_candidate() {
  _has_bits_[0] |= 0x00000001u;
  if (candidate_ == nullptr) {
    auto* p = CreateMaybeMessage<::CBroadcast_WebRTC_Candidate>(GetArenaForAllocation());
    candidate_ = p;
  }
  return candidate_;
}
inline ::CBroadcast_WebRTC_Candidate* CBroadcast_WebRTCAddViewerCandidate_Notification::mutable_candidate() {
  ::CBroadcast_WebRTC_Candidate* _msg = _internal_mutable_candidate();
  // @@protoc_insertion_point(field_mutable:CBroadcast_WebRTCAddViewerCandidate_Notification.candidate)
  return _msg;
}
inline void CBroadcast_WebRTCAddViewerCandidate_Notification::set_allocated_candidate(::CBroadcast_WebRTC_Candidate* candidate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete candidate_;
  }
  if (candidate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CBroadcast_WebRTC_Candidate>::GetOwningArena(candidate);
    if (message_arena != submessage_arena) {
      candidate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  candidate_ = candidate;
  // @@protoc_insertion_point(field_set_allocated:CBroadcast_WebRTCAddViewerCandidate_Notification.candidate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CBroadcast_WatchBroadcast_Response_EWatchResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBroadcast_WatchBroadcast_Response_EWatchResponse>() {
  return ::CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor();
}
template <> struct is_proto_enum< ::CBroadcast_BroadcastViewerState_Notification_EViewerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBroadcast_BroadcastViewerState_Notification_EViewerState>() {
  return ::CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor();
}
template <> struct is_proto_enum< ::EBroadcastWatchLocation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EBroadcastWatchLocation>() {
  return ::EBroadcastWatchLocation_descriptor();
}
template <> struct is_proto_enum< ::EBroadcastChatPermission> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EBroadcastChatPermission>() {
  return ::EBroadcastChatPermission_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fbroadcast_2esteamclient_2eproto
