// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientnotificationtypes.proto

#include "steammessages_clientnotificationtypes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CClientNotificationCloudSyncFailure::CClientNotificationCloudSyncFailure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CClientNotificationCloudSyncFailureDefaultTypeInternal {
  constexpr CClientNotificationCloudSyncFailureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationCloudSyncFailureDefaultTypeInternal() {}
  union {
    CClientNotificationCloudSyncFailure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationCloudSyncFailureDefaultTypeInternal _CClientNotificationCloudSyncFailure_default_instance_;
constexpr CClientNotificationCloudSyncConflict::CClientNotificationCloudSyncConflict(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CClientNotificationCloudSyncConflictDefaultTypeInternal {
  constexpr CClientNotificationCloudSyncConflictDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationCloudSyncConflictDefaultTypeInternal() {}
  union {
    CClientNotificationCloudSyncConflict _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationCloudSyncConflictDefaultTypeInternal _CClientNotificationCloudSyncConflict_default_instance_;
constexpr CClientNotificationScreenshot::CClientNotificationScreenshot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : screenshot_handle_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , local_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CClientNotificationScreenshotDefaultTypeInternal {
  constexpr CClientNotificationScreenshotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationScreenshotDefaultTypeInternal() {}
  union {
    CClientNotificationScreenshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationScreenshotDefaultTypeInternal _CClientNotificationScreenshot_default_instance_;
constexpr CClientNotificationDownloadCompleted::CClientNotificationDownloadCompleted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CClientNotificationDownloadCompletedDefaultTypeInternal {
  constexpr CClientNotificationDownloadCompletedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationDownloadCompletedDefaultTypeInternal() {}
  union {
    CClientNotificationDownloadCompleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationDownloadCompletedDefaultTypeInternal _CClientNotificationDownloadCompleted_default_instance_;
constexpr CClientNotificationFriendInvite::CClientNotificationFriendInvite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct CClientNotificationFriendInviteDefaultTypeInternal {
  constexpr CClientNotificationFriendInviteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationFriendInviteDefaultTypeInternal() {}
  union {
    CClientNotificationFriendInvite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationFriendInviteDefaultTypeInternal _CClientNotificationFriendInvite_default_instance_;
constexpr CClientNotificationFriendInviteRollup::CClientNotificationFriendInviteRollup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_invite_count_(0u){}
struct CClientNotificationFriendInviteRollupDefaultTypeInternal {
  constexpr CClientNotificationFriendInviteRollupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationFriendInviteRollupDefaultTypeInternal() {}
  union {
    CClientNotificationFriendInviteRollup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationFriendInviteRollupDefaultTypeInternal _CClientNotificationFriendInviteRollup_default_instance_;
constexpr CClientNotificationFriendInGame::CClientNotificationFriendInGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u}){}
struct CClientNotificationFriendInGameDefaultTypeInternal {
  constexpr CClientNotificationFriendInGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationFriendInGameDefaultTypeInternal() {}
  union {
    CClientNotificationFriendInGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationFriendInGameDefaultTypeInternal _CClientNotificationFriendInGame_default_instance_;
constexpr CClientNotificationFriendOnline::CClientNotificationFriendOnline(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct CClientNotificationFriendOnlineDefaultTypeInternal {
  constexpr CClientNotificationFriendOnlineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationFriendOnlineDefaultTypeInternal() {}
  union {
    CClientNotificationFriendOnline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationFriendOnlineDefaultTypeInternal _CClientNotificationFriendOnline_default_instance_;
constexpr CClientNotificationAchievement::CClientNotificationAchievement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : achievement_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , achieved_(false)
  , rtime_unlocked_(0u)
  , min_progress_(0)
  , current_progress_(0)
  , max_progress_(0)
  , global_achieved_pct_(0){}
struct CClientNotificationAchievementDefaultTypeInternal {
  constexpr CClientNotificationAchievementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationAchievementDefaultTypeInternal() {}
  union {
    CClientNotificationAchievement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationAchievementDefaultTypeInternal _CClientNotificationAchievement_default_instance_;
constexpr CClientNotificationLowBattery::CClientNotificationLowBattery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pct_remaining_(0){}
struct CClientNotificationLowBatteryDefaultTypeInternal {
  constexpr CClientNotificationLowBatteryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationLowBatteryDefaultTypeInternal() {}
  union {
    CClientNotificationLowBattery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationLowBatteryDefaultTypeInternal _CClientNotificationLowBattery_default_instance_;
constexpr CClientNotificationSystemUpdate::CClientNotificationSystemUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
{}
struct CClientNotificationSystemUpdateDefaultTypeInternal {
  constexpr CClientNotificationSystemUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationSystemUpdateDefaultTypeInternal() {}
  union {
    CClientNotificationSystemUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationSystemUpdateDefaultTypeInternal _CClientNotificationSystemUpdate_default_instance_;
constexpr CClientNotificationFriendMessage::CClientNotificationFriendMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , response_steamurl_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notificationid_(0u){}
struct CClientNotificationFriendMessageDefaultTypeInternal {
  constexpr CClientNotificationFriendMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationFriendMessageDefaultTypeInternal() {}
  union {
    CClientNotificationFriendMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationFriendMessageDefaultTypeInternal _CClientNotificationFriendMessage_default_instance_;
constexpr CClientNotificationGroupChatMessage::CClientNotificationGroupChatMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_sender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_group_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rawbody_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notificationid_(0u){}
struct CClientNotificationGroupChatMessageDefaultTypeInternal {
  constexpr CClientNotificationGroupChatMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationGroupChatMessageDefaultTypeInternal() {}
  union {
    CClientNotificationGroupChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationGroupChatMessageDefaultTypeInternal _CClientNotificationGroupChatMessage_default_instance_;
constexpr CClientNotificationFamilySharingDeviceAuthorizationChanged::CClientNotificationFamilySharingDeviceAuthorizationChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accountid_owner_(0u)
  , authorized_(false){}
struct CClientNotificationFamilySharingDeviceAuthorizationChangedDefaultTypeInternal {
  constexpr CClientNotificationFamilySharingDeviceAuthorizationChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationFamilySharingDeviceAuthorizationChangedDefaultTypeInternal() {}
  union {
    CClientNotificationFamilySharingDeviceAuthorizationChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationFamilySharingDeviceAuthorizationChangedDefaultTypeInternal _CClientNotificationFamilySharingDeviceAuthorizationChanged_default_instance_;
constexpr CClientNotificationFamilySharingStopPlaying::CClientNotificationFamilySharingStopPlaying(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accountid_owner_(0u)
  , seconds_remaining_(0u){}
struct CClientNotificationFamilySharingStopPlayingDefaultTypeInternal {
  constexpr CClientNotificationFamilySharingStopPlayingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationFamilySharingStopPlayingDefaultTypeInternal() {}
  union {
    CClientNotificationFamilySharingStopPlaying _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationFamilySharingStopPlayingDefaultTypeInternal _CClientNotificationFamilySharingStopPlaying_default_instance_;
constexpr CClientNotificationFamilySharingLibraryAvailable::CClientNotificationFamilySharingLibraryAvailable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accountid_owner_(0u){}
struct CClientNotificationFamilySharingLibraryAvailableDefaultTypeInternal {
  constexpr CClientNotificationFamilySharingLibraryAvailableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationFamilySharingLibraryAvailableDefaultTypeInternal() {}
  union {
    CClientNotificationFamilySharingLibraryAvailable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationFamilySharingLibraryAvailableDefaultTypeInternal _CClientNotificationFamilySharingLibraryAvailable_default_instance_;
constexpr CClientNotificationIncomingVoiceChat::CClientNotificationIncomingVoiceChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct CClientNotificationIncomingVoiceChatDefaultTypeInternal {
  constexpr CClientNotificationIncomingVoiceChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationIncomingVoiceChatDefaultTypeInternal() {}
  union {
    CClientNotificationIncomingVoiceChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationIncomingVoiceChatDefaultTypeInternal _CClientNotificationIncomingVoiceChat_default_instance_;
constexpr CClientNotificationClaimSteamDeckRewards::CClientNotificationClaimSteamDeckRewards(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CClientNotificationClaimSteamDeckRewardsDefaultTypeInternal {
  constexpr CClientNotificationClaimSteamDeckRewardsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationClaimSteamDeckRewardsDefaultTypeInternal() {}
  union {
    CClientNotificationClaimSteamDeckRewards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationClaimSteamDeckRewardsDefaultTypeInternal _CClientNotificationClaimSteamDeckRewards_default_instance_;
constexpr CClientNotificationGiftReceived::CClientNotificationGiftReceived(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sender_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CClientNotificationGiftReceivedDefaultTypeInternal {
  constexpr CClientNotificationGiftReceivedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationGiftReceivedDefaultTypeInternal() {}
  union {
    CClientNotificationGiftReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationGiftReceivedDefaultTypeInternal _CClientNotificationGiftReceived_default_instance_;
constexpr CClientNotificationItemAnnouncement::CClientNotificationItemAnnouncement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_item_count_(0u)
  , new_backpack_items_(false){}
struct CClientNotificationItemAnnouncementDefaultTypeInternal {
  constexpr CClientNotificationItemAnnouncementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationItemAnnouncementDefaultTypeInternal() {}
  union {
    CClientNotificationItemAnnouncement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationItemAnnouncementDefaultTypeInternal _CClientNotificationItemAnnouncement_default_instance_;
constexpr CClientNotificationHardwareSurveyPending::CClientNotificationHardwareSurveyPending(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CClientNotificationHardwareSurveyPendingDefaultTypeInternal {
  constexpr CClientNotificationHardwareSurveyPendingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationHardwareSurveyPendingDefaultTypeInternal() {}
  union {
    CClientNotificationHardwareSurveyPending _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationHardwareSurveyPendingDefaultTypeInternal _CClientNotificationHardwareSurveyPending_default_instance_;
constexpr CClientNotificationLowDiskSpace::CClientNotificationLowDiskSpace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : folder_index_(0u){}
struct CClientNotificationLowDiskSpaceDefaultTypeInternal {
  constexpr CClientNotificationLowDiskSpaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationLowDiskSpaceDefaultTypeInternal() {}
  union {
    CClientNotificationLowDiskSpace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationLowDiskSpaceDefaultTypeInternal _CClientNotificationLowDiskSpace_default_instance_;
constexpr CClientNotificationBatteryTemperature::CClientNotificationBatteryTemperature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notification_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , temperature_(0u){}
struct CClientNotificationBatteryTemperatureDefaultTypeInternal {
  constexpr CClientNotificationBatteryTemperatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationBatteryTemperatureDefaultTypeInternal() {}
  union {
    CClientNotificationBatteryTemperature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationBatteryTemperatureDefaultTypeInternal _CClientNotificationBatteryTemperature_default_instance_;
constexpr CClientNotificationDockUnsupportedFirmware::CClientNotificationDockUnsupportedFirmware(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CClientNotificationDockUnsupportedFirmwareDefaultTypeInternal {
  constexpr CClientNotificationDockUnsupportedFirmwareDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationDockUnsupportedFirmwareDefaultTypeInternal() {}
  union {
    CClientNotificationDockUnsupportedFirmware _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationDockUnsupportedFirmwareDefaultTypeInternal _CClientNotificationDockUnsupportedFirmware_default_instance_;
constexpr CClientNotificationPeerContentUpload::CClientNotificationPeerContentUpload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : peer_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CClientNotificationPeerContentUploadDefaultTypeInternal {
  constexpr CClientNotificationPeerContentUploadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationPeerContentUploadDefaultTypeInternal() {}
  union {
    CClientNotificationPeerContentUpload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationPeerContentUploadDefaultTypeInternal _CClientNotificationPeerContentUpload_default_instance_;
constexpr CClientNotificationCannotReadControllerGuideButton::CClientNotificationCannotReadControllerGuideButton(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_index_(0){}
struct CClientNotificationCannotReadControllerGuideButtonDefaultTypeInternal {
  constexpr CClientNotificationCannotReadControllerGuideButtonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationCannotReadControllerGuideButtonDefaultTypeInternal() {}
  union {
    CClientNotificationCannotReadControllerGuideButton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationCannotReadControllerGuideButtonDefaultTypeInternal _CClientNotificationCannotReadControllerGuideButton_default_instance_;
constexpr CClientNotificationOverlaySplashScreen::CClientNotificationOverlaySplashScreen(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CClientNotificationOverlaySplashScreenDefaultTypeInternal {
  constexpr CClientNotificationOverlaySplashScreenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationOverlaySplashScreenDefaultTypeInternal() {}
  union {
    CClientNotificationOverlaySplashScreen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationOverlaySplashScreenDefaultTypeInternal _CClientNotificationOverlaySplashScreen_default_instance_;
constexpr CClientNotificationBroadcastAvailableToWatch::CClientNotificationBroadcastAvailableToWatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_permission_(0){}
struct CClientNotificationBroadcastAvailableToWatchDefaultTypeInternal {
  constexpr CClientNotificationBroadcastAvailableToWatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationBroadcastAvailableToWatchDefaultTypeInternal() {}
  union {
    CClientNotificationBroadcastAvailableToWatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationBroadcastAvailableToWatchDefaultTypeInternal _CClientNotificationBroadcastAvailableToWatch_default_instance_;
constexpr CClientNotificationTimedTrialRemaining::CClientNotificationTimedTrialRemaining(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , offline_(false)
  , allowed_seconds_(0u)
  , played_seconds_(0u){}
struct CClientNotificationTimedTrialRemainingDefaultTypeInternal {
  constexpr CClientNotificationTimedTrialRemainingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationTimedTrialRemainingDefaultTypeInternal() {}
  union {
    CClientNotificationTimedTrialRemaining _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationTimedTrialRemainingDefaultTypeInternal _CClientNotificationTimedTrialRemaining_default_instance_;
constexpr CClientNotificationLoginRefresh::CClientNotificationLoginRefresh(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CClientNotificationLoginRefreshDefaultTypeInternal {
  constexpr CClientNotificationLoginRefreshDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationLoginRefreshDefaultTypeInternal() {}
  union {
    CClientNotificationLoginRefresh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationLoginRefreshDefaultTypeInternal _CClientNotificationLoginRefresh_default_instance_;
constexpr CClientNotificationTimerExpired::CClientNotificationTimerExpired(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CClientNotificationTimerExpiredDefaultTypeInternal {
  constexpr CClientNotificationTimerExpiredDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationTimerExpiredDefaultTypeInternal() {}
  union {
    CClientNotificationTimerExpired _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationTimerExpiredDefaultTypeInternal _CClientNotificationTimerExpired_default_instance_;
constexpr CClientNotificationSteamInputActionSetChanged::CClientNotificationSteamInputActionSetChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_set_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , controller_index_(0){}
struct CClientNotificationSteamInputActionSetChangedDefaultTypeInternal {
  constexpr CClientNotificationSteamInputActionSetChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientNotificationSteamInputActionSetChangedDefaultTypeInternal() {}
  union {
    CClientNotificationSteamInputActionSetChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientNotificationSteamInputActionSetChangedDefaultTypeInternal _CClientNotificationSteamInputActionSetChanged_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[32];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fclientnotificationtypes_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientnotificationtypes_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fclientnotificationtypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CClientNotificationCloudSyncFailure, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationCloudSyncFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationCloudSyncFailure, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationCloudSyncConflict, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationCloudSyncConflict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationCloudSyncConflict, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationScreenshot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationScreenshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationScreenshot, screenshot_handle_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationScreenshot, description_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationScreenshot, local_url_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationDownloadCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationDownloadCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationDownloadCompleted, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendInvite, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendInviteRollup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendInviteRollup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendInviteRollup, new_invite_count_),
  0,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendInGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendInGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendInGame, steamid_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendInGame, game_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendOnline, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendOnline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendOnline, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationAchievement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationAchievement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationAchievement, achievement_id_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationAchievement, appid_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationAchievement, name_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationAchievement, description_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationAchievement, image_url_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationAchievement, achieved_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationAchievement, rtime_unlocked_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationAchievement, min_progress_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationAchievement, current_progress_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationAchievement, max_progress_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationAchievement, global_achieved_pct_),
  0,
  4,
  1,
  2,
  3,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationLowBattery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationLowBattery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationLowBattery, pct_remaining_),
  0,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationSystemUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationSystemUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationSystemUpdate, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendMessage, tag_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendMessage, steamid_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendMessage, title_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendMessage, body_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendMessage, icon_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendMessage, notificationid_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFriendMessage, response_steamurl_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationGroupChatMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationGroupChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationGroupChatMessage, tag_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationGroupChatMessage, steamid_sender_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationGroupChatMessage, chat_group_id_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationGroupChatMessage, chat_id_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationGroupChatMessage, title_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationGroupChatMessage, body_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationGroupChatMessage, rawbody_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationGroupChatMessage, icon_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationGroupChatMessage, notificationid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFamilySharingDeviceAuthorizationChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFamilySharingDeviceAuthorizationChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFamilySharingDeviceAuthorizationChanged, accountid_owner_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFamilySharingDeviceAuthorizationChanged, authorized_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFamilySharingStopPlaying, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFamilySharingStopPlaying, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFamilySharingStopPlaying, accountid_owner_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFamilySharingStopPlaying, seconds_remaining_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFamilySharingLibraryAvailable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFamilySharingLibraryAvailable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationFamilySharingLibraryAvailable, accountid_owner_),
  0,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationIncomingVoiceChat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationIncomingVoiceChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationIncomingVoiceChat, steamid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationClaimSteamDeckRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationGiftReceived, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationGiftReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationGiftReceived, sender_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationItemAnnouncement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationItemAnnouncement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationItemAnnouncement, new_item_count_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationItemAnnouncement, new_backpack_items_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationHardwareSurveyPending, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationLowDiskSpace, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationLowDiskSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationLowDiskSpace, folder_index_),
  0,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationBatteryTemperature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationBatteryTemperature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationBatteryTemperature, temperature_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationBatteryTemperature, notification_type_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationDockUnsupportedFirmware, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationPeerContentUpload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationPeerContentUpload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationPeerContentUpload, appid_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationPeerContentUpload, peer_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationCannotReadControllerGuideButton, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationCannotReadControllerGuideButton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationCannotReadControllerGuideButton, controller_index_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationOverlaySplashScreen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationBroadcastAvailableToWatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationBroadcastAvailableToWatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationBroadcastAvailableToWatch, broadcast_permission_),
  0,
  PROTOBUF_FIELD_OFFSET(::CClientNotificationTimedTrialRemaining, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationTimedTrialRemaining, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationTimedTrialRemaining, appid_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationTimedTrialRemaining, icon_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationTimedTrialRemaining, offline_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationTimedTrialRemaining, allowed_seconds_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationTimedTrialRemaining, played_seconds_),
  1,
  0,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationLoginRefresh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationTimerExpired, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationSteamInputActionSetChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationSteamInputActionSetChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientNotificationSteamInputActionSetChanged, controller_index_),
  PROTOBUF_FIELD_OFFSET(::CClientNotificationSteamInputActionSetChanged, action_set_name_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::CClientNotificationCloudSyncFailure)},
  { 8, 15, -1, sizeof(::CClientNotificationCloudSyncConflict)},
  { 16, 25, -1, sizeof(::CClientNotificationScreenshot)},
  { 28, 35, -1, sizeof(::CClientNotificationDownloadCompleted)},
  { 36, 43, -1, sizeof(::CClientNotificationFriendInvite)},
  { 44, 51, -1, sizeof(::CClientNotificationFriendInviteRollup)},
  { 52, 60, -1, sizeof(::CClientNotificationFriendInGame)},
  { 62, 69, -1, sizeof(::CClientNotificationFriendOnline)},
  { 70, 87, -1, sizeof(::CClientNotificationAchievement)},
  { 98, 105, -1, sizeof(::CClientNotificationLowBattery)},
  { 106, 113, -1, sizeof(::CClientNotificationSystemUpdate)},
  { 114, 127, -1, sizeof(::CClientNotificationFriendMessage)},
  { 134, 149, -1, sizeof(::CClientNotificationGroupChatMessage)},
  { 158, 166, -1, sizeof(::CClientNotificationFamilySharingDeviceAuthorizationChanged)},
  { 168, 176, -1, sizeof(::CClientNotificationFamilySharingStopPlaying)},
  { 178, 185, -1, sizeof(::CClientNotificationFamilySharingLibraryAvailable)},
  { 186, 193, -1, sizeof(::CClientNotificationIncomingVoiceChat)},
  { 194, -1, -1, sizeof(::CClientNotificationClaimSteamDeckRewards)},
  { 200, 207, -1, sizeof(::CClientNotificationGiftReceived)},
  { 208, 216, -1, sizeof(::CClientNotificationItemAnnouncement)},
  { 218, -1, -1, sizeof(::CClientNotificationHardwareSurveyPending)},
  { 224, 231, -1, sizeof(::CClientNotificationLowDiskSpace)},
  { 232, 240, -1, sizeof(::CClientNotificationBatteryTemperature)},
  { 242, -1, -1, sizeof(::CClientNotificationDockUnsupportedFirmware)},
  { 248, 256, -1, sizeof(::CClientNotificationPeerContentUpload)},
  { 258, 265, -1, sizeof(::CClientNotificationCannotReadControllerGuideButton)},
  { 266, -1, -1, sizeof(::CClientNotificationOverlaySplashScreen)},
  { 272, 279, -1, sizeof(::CClientNotificationBroadcastAvailableToWatch)},
  { 280, 291, -1, sizeof(::CClientNotificationTimedTrialRemaining)},
  { 296, -1, -1, sizeof(::CClientNotificationLoginRefresh)},
  { 302, -1, -1, sizeof(::CClientNotificationTimerExpired)},
  { 308, 316, -1, sizeof(::CClientNotificationSteamInputActionSetChanged)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationCloudSyncFailure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationCloudSyncConflict_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationScreenshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationDownloadCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationFriendInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationFriendInviteRollup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationFriendInGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationFriendOnline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationAchievement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationLowBattery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationSystemUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationFriendMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationGroupChatMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationFamilySharingDeviceAuthorizationChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationFamilySharingStopPlaying_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationFamilySharingLibraryAvailable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationIncomingVoiceChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationClaimSteamDeckRewards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationGiftReceived_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationItemAnnouncement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationHardwareSurveyPending_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationLowDiskSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationBatteryTemperature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationDockUnsupportedFirmware_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationPeerContentUpload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationCannotReadControllerGuideButton_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationOverlaySplashScreen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationBroadcastAvailableToWatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationTimedTrialRemaining_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationLoginRefresh_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationTimerExpired_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientNotificationSteamInputActionSetChanged_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientnotificationtypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+steammessages_clientnotificationtypes."
  "proto\"4\n#CClientNotificationCloudSyncFai"
  "lure\022\r\n\005appid\030\001 \001(\r\"5\n$CClientNotificati"
  "onCloudSyncConflict\022\r\n\005appid\030\001 \001(\r\"b\n\035CC"
  "lientNotificationScreenshot\022\031\n\021screensho"
  "t_handle\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\021\n\tl"
  "ocal_url\030\003 \001(\t\"5\n$CClientNotificationDow"
  "nloadCompleted\022\r\n\005appid\030\001 \001(\r\"2\n\037CClient"
  "NotificationFriendInvite\022\017\n\007steamid\030\001 \001("
  "\006\"A\n%CClientNotificationFriendInviteRoll"
  "up\022\030\n\020new_invite_count\030\001 \001(\r\"E\n\037CClientN"
  "otificationFriendInGame\022\017\n\007steamid\030\001 \001(\006"
  "\022\021\n\tgame_name\030\002 \001(\t\"2\n\037CClientNotificati"
  "onFriendOnline\022\017\n\007steamid\030\001 \001(\006\"\212\002\n\036CCli"
  "entNotificationAchievement\022\026\n\016achievemen"
  "t_id\030\001 \001(\t\022\r\n\005appid\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022"
  "\023\n\013description\030\004 \001(\t\022\021\n\timage_url\030\005 \001(\t\022"
  "\020\n\010achieved\030\006 \001(\010\022\026\n\016rtime_unlocked\030\007 \001("
  "\r\022\024\n\014min_progress\030\010 \001(\002\022\030\n\020current_progr"
  "ess\030\t \001(\002\022\024\n\014max_progress\030\n \001(\002\022\033\n\023globa"
  "l_achieved_pct\030\013 \001(\002\"6\n\035CClientNotificat"
  "ionLowBattery\022\025\n\rpct_remaining\030\001 \001(\002\"x\n\037"
  "CClientNotificationSystemUpdate\022U\n\004type\030"
  "\001 \001(\0162\036.ESystemUpdateNotificationType:\'k"
  "_ESystemUpdateNotificationType_Invalid\"\236"
  "\001\n CClientNotificationFriendMessage\022\013\n\003t"
  "ag\030\001 \001(\t\022\017\n\007steamid\030\002 \001(\t\022\r\n\005title\030\003 \001(\t"
  "\022\014\n\004body\030\004 \001(\t\022\014\n\004icon\030\005 \001(\t\022\026\n\016notifica"
  "tionid\030\006 \001(\r\022\031\n\021response_steamurl\030\007 \001(\t\""
  "\306\001\n#CClientNotificationGroupChatMessage\022"
  "\013\n\003tag\030\001 \001(\t\022\026\n\016steamid_sender\030\002 \001(\t\022\025\n\r"
  "chat_group_id\030\003 \001(\t\022\017\n\007chat_id\030\004 \001(\t\022\r\n\005"
  "title\030\005 \001(\t\022\014\n\004body\030\006 \001(\t\022\017\n\007rawbody\030\007 \001"
  "(\t\022\014\n\004icon\030\010 \001(\t\022\026\n\016notificationid\030\t \001(\r"
  "\"i\n:CClientNotificationFamilySharingDevi"
  "ceAuthorizationChanged\022\027\n\017accountid_owne"
  "r\030\001 \001(\r\022\022\n\nauthorized\030\002 \001(\010\"a\n+CClientNo"
  "tificationFamilySharingStopPlaying\022\027\n\017ac"
  "countid_owner\030\001 \001(\r\022\031\n\021seconds_remaining"
  "\030\002 \001(\r\"K\n0CClientNotificationFamilyShari"
  "ngLibraryAvailable\022\027\n\017accountid_owner\030\001 "
  "\001(\r\"7\n$CClientNotificationIncomingVoiceC"
  "hat\022\017\n\007steamid\030\001 \001(\006\"*\n(CClientNotificat"
  "ionClaimSteamDeckRewards\"6\n\037CClientNotif"
  "icationGiftReceived\022\023\n\013sender_name\030\001 \001(\t"
  "\"Y\n#CClientNotificationItemAnnouncement\022"
  "\026\n\016new_item_count\030\001 \001(\r\022\032\n\022new_backpack_"
  "items\030\002 \001(\010\"*\n(CClientNotificationHardwa"
  "reSurveyPending\"7\n\037CClientNotificationLo"
  "wDiskSpace\022\024\n\014folder_index\030\001 \001(\r\"W\n%CCli"
  "entNotificationBatteryTemperature\022\023\n\013tem"
  "perature\030\001 \001(\r\022\031\n\021notification_type\030\002 \001("
  "\t\",\n*CClientNotificationDockUnsupportedF"
  "irmware\"H\n$CClientNotificationPeerConten"
  "tUpload\022\r\n\005appid\030\001 \001(\r\022\021\n\tpeer_name\030\002 \001("
  "\t\"N\n2CClientNotificationCannotReadContro"
  "llerGuideButton\022\030\n\020controller_index\030\001 \001("
  "\005\"(\n&CClientNotificationOverlaySplashScr"
  "een\"L\n,CClientNotificationBroadcastAvail"
  "ableToWatch\022\034\n\024broadcast_permission\030\001 \001("
  "\005\"\207\001\n&CClientNotificationTimedTrialRemai"
  "ning\022\r\n\005appid\030\001 \001(\r\022\014\n\004icon\030\002 \001(\t\022\017\n\007off"
  "line\030\003 \001(\010\022\027\n\017allowed_seconds\030\004 \001(\r\022\026\n\016p"
  "layed_seconds\030\005 \001(\r\"!\n\037CClientNotificati"
  "onLoginRefresh\"!\n\037CClientNotificationTim"
  "erExpired\"b\n-CClientNotificationSteamInp"
  "utActionSetChanged\022\030\n\020controller_index\030\001"
  " \001(\005\022\027\n\017action_set_name\030\002 \001(\t*\273\017\n\027EClien"
  "tNotificationType\022%\n!k_EClientNotificati"
  "onType_Invalid\020\000\022/\n+k_EClientNotificatio"
  "nType_DownloadCompleted\020\001\022*\n&k_EClientNo"
  "tificationType_FriendInvite\020\002\022*\n&k_EClie"
  "ntNotificationType_FriendInGame\020\003\022*\n&k_E"
  "ClientNotificationType_FriendOnline\020\004\022)\n"
  "%k_EClientNotificationType_Achievement\020\005"
  "\022(\n$k_EClientNotificationType_LowBattery"
  "\020\006\022*\n&k_EClientNotificationType_SystemUp"
  "date\020\007\022+\n\'k_EClientNotificationType_Frie"
  "ndMessage\020\010\022.\n*k_EClientNotificationType"
  "_GroupChatMessage\020\t\0220\n,k_EClientNotifica"
  "tionType_FriendInviteRollup\020\n\022E\nAk_EClie"
  "ntNotificationType_FamilySharingDeviceAu"
  "thorizationChanged\020\013\0226\n2k_EClientNotific"
  "ationType_FamilySharingStopPlaying\020\014\022;\n7"
  "k_EClientNotificationType_FamilySharingL"
  "ibraryAvailable\020\r\022(\n$k_EClientNotificati"
  "onType_Screenshot\020\016\022.\n*k_EClientNotifica"
  "tionType_CloudSyncFailure\020\017\022/\n+k_EClient"
  "NotificationType_CloudSyncConflict\020\020\022/\n+"
  "k_EClientNotificationType_IncomingVoiceC"
  "hat\020\021\0223\n/k_EClientNotificationType_Claim"
  "SteamDeckRewards\020\022\022*\n&k_EClientNotificat"
  "ionType_GiftReceived\020\023\022.\n*k_EClientNotif"
  "icationType_ItemAnnouncement\020\024\022,\n(k_ECli"
  "entNotificationType_HardwareSurvey\020\025\022*\n&"
  "k_EClientNotificationType_LowDiskSpace\020\026"
  "\0220\n,k_EClientNotificationType_BatteryTem"
  "perature\020\027\0225\n1k_EClientNotificationType_"
  "DockUnsupportedFirmware\020\030\022/\n+k_EClientNo"
  "tificationType_PeerContentUpload\020\031\022=\n9k_"
  "EClientNotificationType_CannotReadContro"
  "llerGuideButton\020\032\022%\n!k_EClientNotificati"
  "onType_Comment\020\033\022&\n\"k_EClientNotificatio"
  "nType_Wishlist\020\034\022(\n$k_EClientNotificatio"
  "nType_TradeOffer\020\035\022\'\n#k_EClientNotificat"
  "ionType_AsyncGame\020\036\022%\n!k_EClientNotifica"
  "tionType_General\020\037\022)\n%k_EClientNotificat"
  "ionType_HelpRequest\020 \0221\n-k_EClientNotifi"
  "cationType_OverlaySplashScreen\020!\0227\n3k_EC"
  "lientNotificationType_BroadcastAvailable"
  "ToWatch\020\"\0221\n-k_EClientNotificationType_T"
  "imedTrialRemaining\020#\022*\n&k_EClientNotific"
  "ationType_LoginRefresh\020$\022\'\n#k_EClientNot"
  "ificationType_MajorSale\020%\022*\n&k_EClientNo"
  "tificationType_TimerExpired\020&\022*\n&k_EClie"
  "ntNotificationType_ModeratorMsg\020\'\0228\n4k_E"
  "ClientNotificationType_SteamInputActionS"
  "etChanged\020(*\255\001\n\035ESystemUpdateNotificatio"
  "nType\022+\n\'k_ESystemUpdateNotificationType"
  "_Invalid\020\000\022-\n)k_ESystemUpdateNotificatio"
  "nType_Available\020\001\0220\n,k_ESystemUpdateNoti"
  "ficationType_NeedsRestart\020\002B\005H\001\200\001\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientnotificationtypes_2eproto = {
  false, false, 4874, descriptor_table_protodef_steammessages_5fclientnotificationtypes_2eproto, "steammessages_clientnotificationtypes.proto", 
  &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once, nullptr, 0, 32,
  schemas, file_default_instances, TableStruct_steammessages_5fclientnotificationtypes_2eproto::offsets,
  file_level_metadata_steammessages_5fclientnotificationtypes_2eproto, file_level_enum_descriptors_steammessages_5fclientnotificationtypes_2eproto, file_level_service_descriptors_steammessages_5fclientnotificationtypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter() {
  return &descriptor_table_steammessages_5fclientnotificationtypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientnotificationtypes_2eproto(&descriptor_table_steammessages_5fclientnotificationtypes_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EClientNotificationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientnotificationtypes_2eproto);
  return file_level_enum_descriptors_steammessages_5fclientnotificationtypes_2eproto[0];
}
bool EClientNotificationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESystemUpdateNotificationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientnotificationtypes_2eproto);
  return file_level_enum_descriptors_steammessages_5fclientnotificationtypes_2eproto[1];
}
bool ESystemUpdateNotificationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CClientNotificationCloudSyncFailure::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationCloudSyncFailure>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationCloudSyncFailure::CClientNotificationCloudSyncFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationCloudSyncFailure)
}
CClientNotificationCloudSyncFailure::CClientNotificationCloudSyncFailure(const CClientNotificationCloudSyncFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationCloudSyncFailure)
}

inline void CClientNotificationCloudSyncFailure::SharedCtor() {
appid_ = 0u;
}

CClientNotificationCloudSyncFailure::~CClientNotificationCloudSyncFailure() {
  // @@protoc_insertion_point(destructor:CClientNotificationCloudSyncFailure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationCloudSyncFailure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationCloudSyncFailure::ArenaDtor(void* object) {
  CClientNotificationCloudSyncFailure* _this = reinterpret_cast< CClientNotificationCloudSyncFailure* >(object);
  (void)_this;
}
void CClientNotificationCloudSyncFailure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationCloudSyncFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationCloudSyncFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationCloudSyncFailure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationCloudSyncFailure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationCloudSyncFailure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationCloudSyncFailure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationCloudSyncFailure)
  return target;
}

size_t CClientNotificationCloudSyncFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationCloudSyncFailure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationCloudSyncFailure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationCloudSyncFailure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationCloudSyncFailure::GetClassData() const { return &_class_data_; }

void CClientNotificationCloudSyncFailure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationCloudSyncFailure *>(to)->MergeFrom(
      static_cast<const CClientNotificationCloudSyncFailure &>(from));
}


void CClientNotificationCloudSyncFailure::MergeFrom(const CClientNotificationCloudSyncFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationCloudSyncFailure)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationCloudSyncFailure::CopyFrom(const CClientNotificationCloudSyncFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationCloudSyncFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationCloudSyncFailure::IsInitialized() const {
  return true;
}

void CClientNotificationCloudSyncFailure::InternalSwap(CClientNotificationCloudSyncFailure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationCloudSyncFailure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[0]);
}

// ===================================================================

class CClientNotificationCloudSyncConflict::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationCloudSyncConflict>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationCloudSyncConflict::CClientNotificationCloudSyncConflict(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationCloudSyncConflict)
}
CClientNotificationCloudSyncConflict::CClientNotificationCloudSyncConflict(const CClientNotificationCloudSyncConflict& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationCloudSyncConflict)
}

inline void CClientNotificationCloudSyncConflict::SharedCtor() {
appid_ = 0u;
}

CClientNotificationCloudSyncConflict::~CClientNotificationCloudSyncConflict() {
  // @@protoc_insertion_point(destructor:CClientNotificationCloudSyncConflict)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationCloudSyncConflict::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationCloudSyncConflict::ArenaDtor(void* object) {
  CClientNotificationCloudSyncConflict* _this = reinterpret_cast< CClientNotificationCloudSyncConflict* >(object);
  (void)_this;
}
void CClientNotificationCloudSyncConflict::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationCloudSyncConflict::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationCloudSyncConflict::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationCloudSyncConflict)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationCloudSyncConflict::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationCloudSyncConflict::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationCloudSyncConflict)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationCloudSyncConflict)
  return target;
}

size_t CClientNotificationCloudSyncConflict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationCloudSyncConflict)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationCloudSyncConflict::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationCloudSyncConflict::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationCloudSyncConflict::GetClassData() const { return &_class_data_; }

void CClientNotificationCloudSyncConflict::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationCloudSyncConflict *>(to)->MergeFrom(
      static_cast<const CClientNotificationCloudSyncConflict &>(from));
}


void CClientNotificationCloudSyncConflict::MergeFrom(const CClientNotificationCloudSyncConflict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationCloudSyncConflict)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationCloudSyncConflict::CopyFrom(const CClientNotificationCloudSyncConflict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationCloudSyncConflict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationCloudSyncConflict::IsInitialized() const {
  return true;
}

void CClientNotificationCloudSyncConflict::InternalSwap(CClientNotificationCloudSyncConflict* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationCloudSyncConflict::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[1]);
}

// ===================================================================

class CClientNotificationScreenshot::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationScreenshot>()._has_bits_);
  static void set_has_screenshot_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_local_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CClientNotificationScreenshot::CClientNotificationScreenshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationScreenshot)
}
CClientNotificationScreenshot::CClientNotificationScreenshot(const CClientNotificationScreenshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  screenshot_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    screenshot_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_screenshot_handle()) {
    screenshot_handle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_screenshot_handle(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  local_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    local_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_local_url()) {
    local_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_local_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CClientNotificationScreenshot)
}

inline void CClientNotificationScreenshot::SharedCtor() {
screenshot_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  screenshot_handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
local_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  local_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CClientNotificationScreenshot::~CClientNotificationScreenshot() {
  // @@protoc_insertion_point(destructor:CClientNotificationScreenshot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationScreenshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  screenshot_handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientNotificationScreenshot::ArenaDtor(void* object) {
  CClientNotificationScreenshot* _this = reinterpret_cast< CClientNotificationScreenshot* >(object);
  (void)_this;
}
void CClientNotificationScreenshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationScreenshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationScreenshot::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationScreenshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      screenshot_handle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      local_url_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationScreenshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string screenshot_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_screenshot_handle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationScreenshot.screenshot_handle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationScreenshot.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string local_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_local_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationScreenshot.local_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationScreenshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationScreenshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string screenshot_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_screenshot_handle().data(), static_cast<int>(this->_internal_screenshot_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationScreenshot.screenshot_handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_screenshot_handle(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationScreenshot.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // optional string local_url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_local_url().data(), static_cast<int>(this->_internal_local_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationScreenshot.local_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_local_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationScreenshot)
  return target;
}

size_t CClientNotificationScreenshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationScreenshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string screenshot_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_screenshot_handle());
    }

    // optional string description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string local_url = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_local_url());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationScreenshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationScreenshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationScreenshot::GetClassData() const { return &_class_data_; }

void CClientNotificationScreenshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationScreenshot *>(to)->MergeFrom(
      static_cast<const CClientNotificationScreenshot &>(from));
}


void CClientNotificationScreenshot::MergeFrom(const CClientNotificationScreenshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationScreenshot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_screenshot_handle(from._internal_screenshot_handle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_local_url(from._internal_local_url());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationScreenshot::CopyFrom(const CClientNotificationScreenshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationScreenshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationScreenshot::IsInitialized() const {
  return true;
}

void CClientNotificationScreenshot::InternalSwap(CClientNotificationScreenshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &screenshot_handle_, lhs_arena,
      &other->screenshot_handle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &local_url_, lhs_arena,
      &other->local_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationScreenshot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[2]);
}

// ===================================================================

class CClientNotificationDownloadCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationDownloadCompleted>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationDownloadCompleted::CClientNotificationDownloadCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationDownloadCompleted)
}
CClientNotificationDownloadCompleted::CClientNotificationDownloadCompleted(const CClientNotificationDownloadCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationDownloadCompleted)
}

inline void CClientNotificationDownloadCompleted::SharedCtor() {
appid_ = 0u;
}

CClientNotificationDownloadCompleted::~CClientNotificationDownloadCompleted() {
  // @@protoc_insertion_point(destructor:CClientNotificationDownloadCompleted)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationDownloadCompleted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationDownloadCompleted::ArenaDtor(void* object) {
  CClientNotificationDownloadCompleted* _this = reinterpret_cast< CClientNotificationDownloadCompleted* >(object);
  (void)_this;
}
void CClientNotificationDownloadCompleted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationDownloadCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationDownloadCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationDownloadCompleted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationDownloadCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationDownloadCompleted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationDownloadCompleted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationDownloadCompleted)
  return target;
}

size_t CClientNotificationDownloadCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationDownloadCompleted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationDownloadCompleted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationDownloadCompleted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationDownloadCompleted::GetClassData() const { return &_class_data_; }

void CClientNotificationDownloadCompleted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationDownloadCompleted *>(to)->MergeFrom(
      static_cast<const CClientNotificationDownloadCompleted &>(from));
}


void CClientNotificationDownloadCompleted::MergeFrom(const CClientNotificationDownloadCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationDownloadCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationDownloadCompleted::CopyFrom(const CClientNotificationDownloadCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationDownloadCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationDownloadCompleted::IsInitialized() const {
  return true;
}

void CClientNotificationDownloadCompleted::InternalSwap(CClientNotificationDownloadCompleted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationDownloadCompleted::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[3]);
}

// ===================================================================

class CClientNotificationFriendInvite::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationFriendInvite>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationFriendInvite::CClientNotificationFriendInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationFriendInvite)
}
CClientNotificationFriendInvite::CClientNotificationFriendInvite(const CClientNotificationFriendInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationFriendInvite)
}

inline void CClientNotificationFriendInvite::SharedCtor() {
steamid_ = uint64_t{0u};
}

CClientNotificationFriendInvite::~CClientNotificationFriendInvite() {
  // @@protoc_insertion_point(destructor:CClientNotificationFriendInvite)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationFriendInvite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationFriendInvite::ArenaDtor(void* object) {
  CClientNotificationFriendInvite* _this = reinterpret_cast< CClientNotificationFriendInvite* >(object);
  (void)_this;
}
void CClientNotificationFriendInvite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationFriendInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationFriendInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationFriendInvite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationFriendInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationFriendInvite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationFriendInvite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationFriendInvite)
  return target;
}

size_t CClientNotificationFriendInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationFriendInvite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationFriendInvite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationFriendInvite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationFriendInvite::GetClassData() const { return &_class_data_; }

void CClientNotificationFriendInvite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationFriendInvite *>(to)->MergeFrom(
      static_cast<const CClientNotificationFriendInvite &>(from));
}


void CClientNotificationFriendInvite::MergeFrom(const CClientNotificationFriendInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationFriendInvite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationFriendInvite::CopyFrom(const CClientNotificationFriendInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationFriendInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationFriendInvite::IsInitialized() const {
  return true;
}

void CClientNotificationFriendInvite::InternalSwap(CClientNotificationFriendInvite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationFriendInvite::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[4]);
}

// ===================================================================

class CClientNotificationFriendInviteRollup::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationFriendInviteRollup>()._has_bits_);
  static void set_has_new_invite_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationFriendInviteRollup::CClientNotificationFriendInviteRollup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationFriendInviteRollup)
}
CClientNotificationFriendInviteRollup::CClientNotificationFriendInviteRollup(const CClientNotificationFriendInviteRollup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_invite_count_ = from.new_invite_count_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationFriendInviteRollup)
}

inline void CClientNotificationFriendInviteRollup::SharedCtor() {
new_invite_count_ = 0u;
}

CClientNotificationFriendInviteRollup::~CClientNotificationFriendInviteRollup() {
  // @@protoc_insertion_point(destructor:CClientNotificationFriendInviteRollup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationFriendInviteRollup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationFriendInviteRollup::ArenaDtor(void* object) {
  CClientNotificationFriendInviteRollup* _this = reinterpret_cast< CClientNotificationFriendInviteRollup* >(object);
  (void)_this;
}
void CClientNotificationFriendInviteRollup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationFriendInviteRollup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationFriendInviteRollup::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationFriendInviteRollup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_invite_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationFriendInviteRollup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 new_invite_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_new_invite_count(&has_bits);
          new_invite_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationFriendInviteRollup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationFriendInviteRollup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_invite_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_new_invite_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationFriendInviteRollup)
  return target;
}

size_t CClientNotificationFriendInviteRollup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationFriendInviteRollup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 new_invite_count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_new_invite_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationFriendInviteRollup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationFriendInviteRollup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationFriendInviteRollup::GetClassData() const { return &_class_data_; }

void CClientNotificationFriendInviteRollup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationFriendInviteRollup *>(to)->MergeFrom(
      static_cast<const CClientNotificationFriendInviteRollup &>(from));
}


void CClientNotificationFriendInviteRollup::MergeFrom(const CClientNotificationFriendInviteRollup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationFriendInviteRollup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_new_invite_count()) {
    _internal_set_new_invite_count(from._internal_new_invite_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationFriendInviteRollup::CopyFrom(const CClientNotificationFriendInviteRollup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationFriendInviteRollup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationFriendInviteRollup::IsInitialized() const {
  return true;
}

void CClientNotificationFriendInviteRollup::InternalSwap(CClientNotificationFriendInviteRollup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(new_invite_count_, other->new_invite_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationFriendInviteRollup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[5]);
}

// ===================================================================

class CClientNotificationFriendInGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationFriendInGame>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationFriendInGame::CClientNotificationFriendInGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationFriendInGame)
}
CClientNotificationFriendInGame::CClientNotificationFriendInGame(const CClientNotificationFriendInGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    game_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_name()) {
    game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_name(), 
      GetArenaForAllocation());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationFriendInGame)
}

inline void CClientNotificationFriendInGame::SharedCtor() {
game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  game_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_ = uint64_t{0u};
}

CClientNotificationFriendInGame::~CClientNotificationFriendInGame() {
  // @@protoc_insertion_point(destructor:CClientNotificationFriendInGame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationFriendInGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  game_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientNotificationFriendInGame::ArenaDtor(void* object) {
  CClientNotificationFriendInGame* _this = reinterpret_cast< CClientNotificationFriendInGame* >(object);
  (void)_this;
}
void CClientNotificationFriendInGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationFriendInGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationFriendInGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationFriendInGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    game_name_.ClearNonDefaultToEmpty();
  }
  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationFriendInGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string game_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_game_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationFriendInGame.game_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationFriendInGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationFriendInGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationFriendInGame.game_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_game_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationFriendInGame)
  return target;
}

size_t CClientNotificationFriendInGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationFriendInGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string game_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_name());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationFriendInGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationFriendInGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationFriendInGame::GetClassData() const { return &_class_data_; }

void CClientNotificationFriendInGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationFriendInGame *>(to)->MergeFrom(
      static_cast<const CClientNotificationFriendInGame &>(from));
}


void CClientNotificationFriendInGame::MergeFrom(const CClientNotificationFriendInGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationFriendInGame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_game_name(from._internal_game_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationFriendInGame::CopyFrom(const CClientNotificationFriendInGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationFriendInGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationFriendInGame::IsInitialized() const {
  return true;
}

void CClientNotificationFriendInGame::InternalSwap(CClientNotificationFriendInGame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_name_, lhs_arena,
      &other->game_name_, rhs_arena
  );
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationFriendInGame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[6]);
}

// ===================================================================

class CClientNotificationFriendOnline::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationFriendOnline>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationFriendOnline::CClientNotificationFriendOnline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationFriendOnline)
}
CClientNotificationFriendOnline::CClientNotificationFriendOnline(const CClientNotificationFriendOnline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationFriendOnline)
}

inline void CClientNotificationFriendOnline::SharedCtor() {
steamid_ = uint64_t{0u};
}

CClientNotificationFriendOnline::~CClientNotificationFriendOnline() {
  // @@protoc_insertion_point(destructor:CClientNotificationFriendOnline)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationFriendOnline::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationFriendOnline::ArenaDtor(void* object) {
  CClientNotificationFriendOnline* _this = reinterpret_cast< CClientNotificationFriendOnline* >(object);
  (void)_this;
}
void CClientNotificationFriendOnline::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationFriendOnline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationFriendOnline::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationFriendOnline)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationFriendOnline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationFriendOnline::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationFriendOnline)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationFriendOnline)
  return target;
}

size_t CClientNotificationFriendOnline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationFriendOnline)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationFriendOnline::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationFriendOnline::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationFriendOnline::GetClassData() const { return &_class_data_; }

void CClientNotificationFriendOnline::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationFriendOnline *>(to)->MergeFrom(
      static_cast<const CClientNotificationFriendOnline &>(from));
}


void CClientNotificationFriendOnline::MergeFrom(const CClientNotificationFriendOnline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationFriendOnline)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationFriendOnline::CopyFrom(const CClientNotificationFriendOnline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationFriendOnline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationFriendOnline::IsInitialized() const {
  return true;
}

void CClientNotificationFriendOnline::InternalSwap(CClientNotificationFriendOnline* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationFriendOnline::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[7]);
}

// ===================================================================

class CClientNotificationAchievement::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationAchievement>()._has_bits_);
  static void set_has_achievement_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_image_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_achieved(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rtime_unlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_min_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_current_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_global_achieved_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CClientNotificationAchievement::CClientNotificationAchievement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationAchievement)
}
CClientNotificationAchievement::CClientNotificationAchievement(const CClientNotificationAchievement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  achievement_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    achievement_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_achievement_id()) {
    achievement_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_achievement_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  image_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image_url()) {
    image_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&global_achieved_pct_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(global_achieved_pct_));
  // @@protoc_insertion_point(copy_constructor:CClientNotificationAchievement)
}

inline void CClientNotificationAchievement::SharedCtor() {
achievement_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  achievement_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&global_achieved_pct_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(global_achieved_pct_));
}

CClientNotificationAchievement::~CClientNotificationAchievement() {
  // @@protoc_insertion_point(destructor:CClientNotificationAchievement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationAchievement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  achievement_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientNotificationAchievement::ArenaDtor(void* object) {
  CClientNotificationAchievement* _this = reinterpret_cast< CClientNotificationAchievement* >(object);
  (void)_this;
}
void CClientNotificationAchievement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationAchievement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationAchievement::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationAchievement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      achievement_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      image_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_progress_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(min_progress_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&current_progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&global_achieved_pct_) -
        reinterpret_cast<char*>(&current_progress_)) + sizeof(global_achieved_pct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationAchievement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string achievement_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_achievement_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationAchievement.achievement_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationAchievement.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationAchievement.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string image_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_image_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationAchievement.image_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool achieved = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_achieved(&has_bits);
          achieved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rtime_unlocked = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_rtime_unlocked(&has_bits);
          rtime_unlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float min_progress = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_min_progress(&has_bits);
          min_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float current_progress = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_current_progress(&has_bits);
          current_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_progress = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_max_progress(&has_bits);
          max_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float global_achieved_pct = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_global_achieved_pct(&has_bits);
          global_achieved_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationAchievement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationAchievement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string achievement_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_achievement_id().data(), static_cast<int>(this->_internal_achievement_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationAchievement.achievement_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_achievement_id(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationAchievement.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationAchievement.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // optional string image_url = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image_url().data(), static_cast<int>(this->_internal_image_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationAchievement.image_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_image_url(), target);
  }

  // optional bool achieved = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_achieved(), target);
  }

  // optional uint32 rtime_unlocked = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rtime_unlocked(), target);
  }

  // optional float min_progress = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_min_progress(), target);
  }

  // optional float current_progress = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_current_progress(), target);
  }

  // optional float max_progress = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_max_progress(), target);
  }

  // optional float global_achieved_pct = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_global_achieved_pct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationAchievement)
  return target;
}

size_t CClientNotificationAchievement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationAchievement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string achievement_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_achievement_id());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string image_url = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_url());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool achieved = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 rtime_unlocked = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rtime_unlocked());
    }

    // optional float min_progress = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float current_progress = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float max_progress = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float global_achieved_pct = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationAchievement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationAchievement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationAchievement::GetClassData() const { return &_class_data_; }

void CClientNotificationAchievement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationAchievement *>(to)->MergeFrom(
      static_cast<const CClientNotificationAchievement &>(from));
}


void CClientNotificationAchievement::MergeFrom(const CClientNotificationAchievement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationAchievement)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_achievement_id(from._internal_achievement_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_image_url(from._internal_image_url());
    }
    if (cached_has_bits & 0x00000010u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000020u) {
      achieved_ = from.achieved_;
    }
    if (cached_has_bits & 0x00000040u) {
      rtime_unlocked_ = from.rtime_unlocked_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_progress_ = from.min_progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      current_progress_ = from.current_progress_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_progress_ = from.max_progress_;
    }
    if (cached_has_bits & 0x00000400u) {
      global_achieved_pct_ = from.global_achieved_pct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationAchievement::CopyFrom(const CClientNotificationAchievement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationAchievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationAchievement::IsInitialized() const {
  return true;
}

void CClientNotificationAchievement::InternalSwap(CClientNotificationAchievement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &achievement_id_, lhs_arena,
      &other->achievement_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_url_, lhs_arena,
      &other->image_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientNotificationAchievement, global_achieved_pct_)
      + sizeof(CClientNotificationAchievement::global_achieved_pct_)
      - PROTOBUF_FIELD_OFFSET(CClientNotificationAchievement, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationAchievement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[8]);
}

// ===================================================================

class CClientNotificationLowBattery::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationLowBattery>()._has_bits_);
  static void set_has_pct_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationLowBattery::CClientNotificationLowBattery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationLowBattery)
}
CClientNotificationLowBattery::CClientNotificationLowBattery(const CClientNotificationLowBattery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pct_remaining_ = from.pct_remaining_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationLowBattery)
}

inline void CClientNotificationLowBattery::SharedCtor() {
pct_remaining_ = 0;
}

CClientNotificationLowBattery::~CClientNotificationLowBattery() {
  // @@protoc_insertion_point(destructor:CClientNotificationLowBattery)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationLowBattery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationLowBattery::ArenaDtor(void* object) {
  CClientNotificationLowBattery* _this = reinterpret_cast< CClientNotificationLowBattery* >(object);
  (void)_this;
}
void CClientNotificationLowBattery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationLowBattery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationLowBattery::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationLowBattery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pct_remaining_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationLowBattery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float pct_remaining = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_pct_remaining(&has_bits);
          pct_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationLowBattery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationLowBattery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pct_remaining = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_pct_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationLowBattery)
  return target;
}

size_t CClientNotificationLowBattery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationLowBattery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float pct_remaining = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationLowBattery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationLowBattery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationLowBattery::GetClassData() const { return &_class_data_; }

void CClientNotificationLowBattery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationLowBattery *>(to)->MergeFrom(
      static_cast<const CClientNotificationLowBattery &>(from));
}


void CClientNotificationLowBattery::MergeFrom(const CClientNotificationLowBattery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationLowBattery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pct_remaining()) {
    _internal_set_pct_remaining(from._internal_pct_remaining());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationLowBattery::CopyFrom(const CClientNotificationLowBattery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationLowBattery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationLowBattery::IsInitialized() const {
  return true;
}

void CClientNotificationLowBattery::InternalSwap(CClientNotificationLowBattery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pct_remaining_, other->pct_remaining_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationLowBattery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[9]);
}

// ===================================================================

class CClientNotificationSystemUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationSystemUpdate>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationSystemUpdate::CClientNotificationSystemUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationSystemUpdate)
}
CClientNotificationSystemUpdate::CClientNotificationSystemUpdate(const CClientNotificationSystemUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationSystemUpdate)
}

inline void CClientNotificationSystemUpdate::SharedCtor() {
type_ = 0;
}

CClientNotificationSystemUpdate::~CClientNotificationSystemUpdate() {
  // @@protoc_insertion_point(destructor:CClientNotificationSystemUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationSystemUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationSystemUpdate::ArenaDtor(void* object) {
  CClientNotificationSystemUpdate* _this = reinterpret_cast< CClientNotificationSystemUpdate* >(object);
  (void)_this;
}
void CClientNotificationSystemUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationSystemUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationSystemUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationSystemUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationSystemUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ESystemUpdateNotificationType type = 1 [default = k_ESystemUpdateNotificationType_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ESystemUpdateNotificationType_IsValid(val))) {
            _internal_set_type(static_cast<::ESystemUpdateNotificationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationSystemUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationSystemUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ESystemUpdateNotificationType type = 1 [default = k_ESystemUpdateNotificationType_Invalid];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationSystemUpdate)
  return target;
}

size_t CClientNotificationSystemUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationSystemUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ESystemUpdateNotificationType type = 1 [default = k_ESystemUpdateNotificationType_Invalid];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationSystemUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationSystemUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationSystemUpdate::GetClassData() const { return &_class_data_; }

void CClientNotificationSystemUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationSystemUpdate *>(to)->MergeFrom(
      static_cast<const CClientNotificationSystemUpdate &>(from));
}


void CClientNotificationSystemUpdate::MergeFrom(const CClientNotificationSystemUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationSystemUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationSystemUpdate::CopyFrom(const CClientNotificationSystemUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationSystemUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationSystemUpdate::IsInitialized() const {
  return true;
}

void CClientNotificationSystemUpdate::InternalSwap(CClientNotificationSystemUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationSystemUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[10]);
}

// ===================================================================

class CClientNotificationFriendMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationFriendMessage>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_notificationid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_response_steamurl(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CClientNotificationFriendMessage::CClientNotificationFriendMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationFriendMessage)
}
CClientNotificationFriendMessage::CClientNotificationFriendMessage(const CClientNotificationFriendMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArenaForAllocation());
  }
  steamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    steamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_steamid()) {
    steamid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_steamid(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArenaForAllocation());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArenaForAllocation());
  }
  response_steamurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    response_steamurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_response_steamurl()) {
    response_steamurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_response_steamurl(), 
      GetArenaForAllocation());
  }
  notificationid_ = from.notificationid_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationFriendMessage)
}

inline void CClientNotificationFriendMessage::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  steamid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
response_steamurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  response_steamurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notificationid_ = 0u;
}

CClientNotificationFriendMessage::~CClientNotificationFriendMessage() {
  // @@protoc_insertion_point(destructor:CClientNotificationFriendMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationFriendMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  steamid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_steamurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientNotificationFriendMessage::ArenaDtor(void* object) {
  CClientNotificationFriendMessage* _this = reinterpret_cast< CClientNotificationFriendMessage* >(object);
  (void)_this;
}
void CClientNotificationFriendMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationFriendMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationFriendMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationFriendMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      response_steamurl_.ClearNonDefaultToEmpty();
    }
  }
  notificationid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationFriendMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationFriendMessage.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_steamid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationFriendMessage.steamid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationFriendMessage.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationFriendMessage.body");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationFriendMessage.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 notificationid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_notificationid(&has_bits);
          notificationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string response_steamurl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_response_steamurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationFriendMessage.response_steamurl");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationFriendMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationFriendMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationFriendMessage.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // optional string steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_steamid().data(), static_cast<int>(this->_internal_steamid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationFriendMessage.steamid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_steamid(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationFriendMessage.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // optional string body = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationFriendMessage.body");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_body(), target);
  }

  // optional string icon = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationFriendMessage.icon");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_icon(), target);
  }

  // optional uint32 notificationid = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_notificationid(), target);
  }

  // optional string response_steamurl = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_response_steamurl().data(), static_cast<int>(this->_internal_response_steamurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationFriendMessage.response_steamurl");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_response_steamurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationFriendMessage)
  return target;
}

size_t CClientNotificationFriendMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationFriendMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_steamid());
    }

    // optional string title = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string body = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_body());
    }

    // optional string icon = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional string response_steamurl = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_response_steamurl());
    }

    // optional uint32 notificationid = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_notificationid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationFriendMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationFriendMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationFriendMessage::GetClassData() const { return &_class_data_; }

void CClientNotificationFriendMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationFriendMessage *>(to)->MergeFrom(
      static_cast<const CClientNotificationFriendMessage &>(from));
}


void CClientNotificationFriendMessage::MergeFrom(const CClientNotificationFriendMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationFriendMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_steamid(from._internal_steamid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_response_steamurl(from._internal_response_steamurl());
    }
    if (cached_has_bits & 0x00000040u) {
      notificationid_ = from.notificationid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationFriendMessage::CopyFrom(const CClientNotificationFriendMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationFriendMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationFriendMessage::IsInitialized() const {
  return true;
}

void CClientNotificationFriendMessage::InternalSwap(CClientNotificationFriendMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tag_, lhs_arena,
      &other->tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &steamid_, lhs_arena,
      &other->steamid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &response_steamurl_, lhs_arena,
      &other->response_steamurl_, rhs_arena
  );
  swap(notificationid_, other->notificationid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationFriendMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[11]);
}

// ===================================================================

class CClientNotificationGroupChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationGroupChatMessage>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chat_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rawbody(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_notificationid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CClientNotificationGroupChatMessage::CClientNotificationGroupChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationGroupChatMessage)
}
CClientNotificationGroupChatMessage::CClientNotificationGroupChatMessage(const CClientNotificationGroupChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArenaForAllocation());
  }
  steamid_sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    steamid_sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_steamid_sender()) {
    steamid_sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_steamid_sender(), 
      GetArenaForAllocation());
  }
  chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chat_group_id()) {
    chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_group_id(), 
      GetArenaForAllocation());
  }
  chat_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chat_id()) {
    chat_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_id(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArenaForAllocation());
  }
  rawbody_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rawbody_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rawbody()) {
    rawbody_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rawbody(), 
      GetArenaForAllocation());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArenaForAllocation());
  }
  notificationid_ = from.notificationid_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationGroupChatMessage)
}

inline void CClientNotificationGroupChatMessage::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  steamid_sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rawbody_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rawbody_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notificationid_ = 0u;
}

CClientNotificationGroupChatMessage::~CClientNotificationGroupChatMessage() {
  // @@protoc_insertion_point(destructor:CClientNotificationGroupChatMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationGroupChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  steamid_sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rawbody_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientNotificationGroupChatMessage::ArenaDtor(void* object) {
  CClientNotificationGroupChatMessage* _this = reinterpret_cast< CClientNotificationGroupChatMessage* >(object);
  (void)_this;
}
void CClientNotificationGroupChatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationGroupChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationGroupChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationGroupChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_sender_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      chat_group_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      chat_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      rawbody_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      icon_.ClearNonDefaultToEmpty();
    }
  }
  notificationid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationGroupChatMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationGroupChatMessage.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string steamid_sender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_steamid_sender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationGroupChatMessage.steamid_sender");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string chat_group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_chat_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationGroupChatMessage.chat_group_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string chat_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_chat_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationGroupChatMessage.chat_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationGroupChatMessage.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string body = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationGroupChatMessage.body");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rawbody = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_rawbody();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationGroupChatMessage.rawbody");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationGroupChatMessage.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 notificationid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_notificationid(&has_bits);
          notificationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationGroupChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationGroupChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationGroupChatMessage.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // optional string steamid_sender = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_steamid_sender().data(), static_cast<int>(this->_internal_steamid_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationGroupChatMessage.steamid_sender");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_steamid_sender(), target);
  }

  // optional string chat_group_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chat_group_id().data(), static_cast<int>(this->_internal_chat_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationGroupChatMessage.chat_group_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chat_group_id(), target);
  }

  // optional string chat_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chat_id().data(), static_cast<int>(this->_internal_chat_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationGroupChatMessage.chat_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_chat_id(), target);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationGroupChatMessage.title");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_title(), target);
  }

  // optional string body = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationGroupChatMessage.body");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_body(), target);
  }

  // optional string rawbody = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rawbody().data(), static_cast<int>(this->_internal_rawbody().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationGroupChatMessage.rawbody");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_rawbody(), target);
  }

  // optional string icon = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationGroupChatMessage.icon");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_icon(), target);
  }

  // optional uint32 notificationid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_notificationid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationGroupChatMessage)
  return target;
}

size_t CClientNotificationGroupChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationGroupChatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string steamid_sender = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_steamid_sender());
    }

    // optional string chat_group_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chat_group_id());
    }

    // optional string chat_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chat_id());
    }

    // optional string title = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string body = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_body());
    }

    // optional string rawbody = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rawbody());
    }

    // optional string icon = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

  }
  // optional uint32 notificationid = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_notificationid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationGroupChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationGroupChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationGroupChatMessage::GetClassData() const { return &_class_data_; }

void CClientNotificationGroupChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationGroupChatMessage *>(to)->MergeFrom(
      static_cast<const CClientNotificationGroupChatMessage &>(from));
}


void CClientNotificationGroupChatMessage::MergeFrom(const CClientNotificationGroupChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationGroupChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_steamid_sender(from._internal_steamid_sender());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_chat_group_id(from._internal_chat_group_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_chat_id(from._internal_chat_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_rawbody(from._internal_rawbody());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_icon(from._internal_icon());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_notificationid(from._internal_notificationid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationGroupChatMessage::CopyFrom(const CClientNotificationGroupChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationGroupChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationGroupChatMessage::IsInitialized() const {
  return true;
}

void CClientNotificationGroupChatMessage::InternalSwap(CClientNotificationGroupChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tag_, lhs_arena,
      &other->tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &steamid_sender_, lhs_arena,
      &other->steamid_sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_group_id_, lhs_arena,
      &other->chat_group_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_id_, lhs_arena,
      &other->chat_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rawbody_, lhs_arena,
      &other->rawbody_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  swap(notificationid_, other->notificationid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationGroupChatMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[12]);
}

// ===================================================================

class CClientNotificationFamilySharingDeviceAuthorizationChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationFamilySharingDeviceAuthorizationChanged>()._has_bits_);
  static void set_has_accountid_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_authorized(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClientNotificationFamilySharingDeviceAuthorizationChanged::CClientNotificationFamilySharingDeviceAuthorizationChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationFamilySharingDeviceAuthorizationChanged)
}
CClientNotificationFamilySharingDeviceAuthorizationChanged::CClientNotificationFamilySharingDeviceAuthorizationChanged(const CClientNotificationFamilySharingDeviceAuthorizationChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_owner_, &from.accountid_owner_,
    static_cast<size_t>(reinterpret_cast<char*>(&authorized_) -
    reinterpret_cast<char*>(&accountid_owner_)) + sizeof(authorized_));
  // @@protoc_insertion_point(copy_constructor:CClientNotificationFamilySharingDeviceAuthorizationChanged)
}

inline void CClientNotificationFamilySharingDeviceAuthorizationChanged::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_owner_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&authorized_) -
    reinterpret_cast<char*>(&accountid_owner_)) + sizeof(authorized_));
}

CClientNotificationFamilySharingDeviceAuthorizationChanged::~CClientNotificationFamilySharingDeviceAuthorizationChanged() {
  // @@protoc_insertion_point(destructor:CClientNotificationFamilySharingDeviceAuthorizationChanged)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationFamilySharingDeviceAuthorizationChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationFamilySharingDeviceAuthorizationChanged::ArenaDtor(void* object) {
  CClientNotificationFamilySharingDeviceAuthorizationChanged* _this = reinterpret_cast< CClientNotificationFamilySharingDeviceAuthorizationChanged* >(object);
  (void)_this;
}
void CClientNotificationFamilySharingDeviceAuthorizationChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationFamilySharingDeviceAuthorizationChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationFamilySharingDeviceAuthorizationChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationFamilySharingDeviceAuthorizationChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&accountid_owner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&authorized_) -
        reinterpret_cast<char*>(&accountid_owner_)) + sizeof(authorized_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationFamilySharingDeviceAuthorizationChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid_owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid_owner(&has_bits);
          accountid_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool authorized = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_authorized(&has_bits);
          authorized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationFamilySharingDeviceAuthorizationChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationFamilySharingDeviceAuthorizationChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid_owner = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid_owner(), target);
  }

  // optional bool authorized = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_authorized(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationFamilySharingDeviceAuthorizationChanged)
  return target;
}

size_t CClientNotificationFamilySharingDeviceAuthorizationChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationFamilySharingDeviceAuthorizationChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 accountid_owner = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid_owner());
    }

    // optional bool authorized = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationFamilySharingDeviceAuthorizationChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationFamilySharingDeviceAuthorizationChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationFamilySharingDeviceAuthorizationChanged::GetClassData() const { return &_class_data_; }

void CClientNotificationFamilySharingDeviceAuthorizationChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationFamilySharingDeviceAuthorizationChanged *>(to)->MergeFrom(
      static_cast<const CClientNotificationFamilySharingDeviceAuthorizationChanged &>(from));
}


void CClientNotificationFamilySharingDeviceAuthorizationChanged::MergeFrom(const CClientNotificationFamilySharingDeviceAuthorizationChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationFamilySharingDeviceAuthorizationChanged)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_owner_ = from.accountid_owner_;
    }
    if (cached_has_bits & 0x00000002u) {
      authorized_ = from.authorized_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationFamilySharingDeviceAuthorizationChanged::CopyFrom(const CClientNotificationFamilySharingDeviceAuthorizationChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationFamilySharingDeviceAuthorizationChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationFamilySharingDeviceAuthorizationChanged::IsInitialized() const {
  return true;
}

void CClientNotificationFamilySharingDeviceAuthorizationChanged::InternalSwap(CClientNotificationFamilySharingDeviceAuthorizationChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientNotificationFamilySharingDeviceAuthorizationChanged, authorized_)
      + sizeof(CClientNotificationFamilySharingDeviceAuthorizationChanged::authorized_)
      - PROTOBUF_FIELD_OFFSET(CClientNotificationFamilySharingDeviceAuthorizationChanged, accountid_owner_)>(
          reinterpret_cast<char*>(&accountid_owner_),
          reinterpret_cast<char*>(&other->accountid_owner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationFamilySharingDeviceAuthorizationChanged::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[13]);
}

// ===================================================================

class CClientNotificationFamilySharingStopPlaying::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationFamilySharingStopPlaying>()._has_bits_);
  static void set_has_accountid_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClientNotificationFamilySharingStopPlaying::CClientNotificationFamilySharingStopPlaying(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationFamilySharingStopPlaying)
}
CClientNotificationFamilySharingStopPlaying::CClientNotificationFamilySharingStopPlaying(const CClientNotificationFamilySharingStopPlaying& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_owner_, &from.accountid_owner_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_remaining_) -
    reinterpret_cast<char*>(&accountid_owner_)) + sizeof(seconds_remaining_));
  // @@protoc_insertion_point(copy_constructor:CClientNotificationFamilySharingStopPlaying)
}

inline void CClientNotificationFamilySharingStopPlaying::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_owner_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seconds_remaining_) -
    reinterpret_cast<char*>(&accountid_owner_)) + sizeof(seconds_remaining_));
}

CClientNotificationFamilySharingStopPlaying::~CClientNotificationFamilySharingStopPlaying() {
  // @@protoc_insertion_point(destructor:CClientNotificationFamilySharingStopPlaying)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationFamilySharingStopPlaying::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationFamilySharingStopPlaying::ArenaDtor(void* object) {
  CClientNotificationFamilySharingStopPlaying* _this = reinterpret_cast< CClientNotificationFamilySharingStopPlaying* >(object);
  (void)_this;
}
void CClientNotificationFamilySharingStopPlaying::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationFamilySharingStopPlaying::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationFamilySharingStopPlaying::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationFamilySharingStopPlaying)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&accountid_owner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_remaining_) -
        reinterpret_cast<char*>(&accountid_owner_)) + sizeof(seconds_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationFamilySharingStopPlaying::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid_owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid_owner(&has_bits);
          accountid_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds_remaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_seconds_remaining(&has_bits);
          seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationFamilySharingStopPlaying::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationFamilySharingStopPlaying)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid_owner = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid_owner(), target);
  }

  // optional uint32 seconds_remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seconds_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationFamilySharingStopPlaying)
  return target;
}

size_t CClientNotificationFamilySharingStopPlaying::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationFamilySharingStopPlaying)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 accountid_owner = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid_owner());
    }

    // optional uint32 seconds_remaining = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds_remaining());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationFamilySharingStopPlaying::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationFamilySharingStopPlaying::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationFamilySharingStopPlaying::GetClassData() const { return &_class_data_; }

void CClientNotificationFamilySharingStopPlaying::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationFamilySharingStopPlaying *>(to)->MergeFrom(
      static_cast<const CClientNotificationFamilySharingStopPlaying &>(from));
}


void CClientNotificationFamilySharingStopPlaying::MergeFrom(const CClientNotificationFamilySharingStopPlaying& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationFamilySharingStopPlaying)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_owner_ = from.accountid_owner_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_remaining_ = from.seconds_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationFamilySharingStopPlaying::CopyFrom(const CClientNotificationFamilySharingStopPlaying& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationFamilySharingStopPlaying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationFamilySharingStopPlaying::IsInitialized() const {
  return true;
}

void CClientNotificationFamilySharingStopPlaying::InternalSwap(CClientNotificationFamilySharingStopPlaying* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientNotificationFamilySharingStopPlaying, seconds_remaining_)
      + sizeof(CClientNotificationFamilySharingStopPlaying::seconds_remaining_)
      - PROTOBUF_FIELD_OFFSET(CClientNotificationFamilySharingStopPlaying, accountid_owner_)>(
          reinterpret_cast<char*>(&accountid_owner_),
          reinterpret_cast<char*>(&other->accountid_owner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationFamilySharingStopPlaying::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[14]);
}

// ===================================================================

class CClientNotificationFamilySharingLibraryAvailable::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationFamilySharingLibraryAvailable>()._has_bits_);
  static void set_has_accountid_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationFamilySharingLibraryAvailable::CClientNotificationFamilySharingLibraryAvailable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationFamilySharingLibraryAvailable)
}
CClientNotificationFamilySharingLibraryAvailable::CClientNotificationFamilySharingLibraryAvailable(const CClientNotificationFamilySharingLibraryAvailable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  accountid_owner_ = from.accountid_owner_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationFamilySharingLibraryAvailable)
}

inline void CClientNotificationFamilySharingLibraryAvailable::SharedCtor() {
accountid_owner_ = 0u;
}

CClientNotificationFamilySharingLibraryAvailable::~CClientNotificationFamilySharingLibraryAvailable() {
  // @@protoc_insertion_point(destructor:CClientNotificationFamilySharingLibraryAvailable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationFamilySharingLibraryAvailable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationFamilySharingLibraryAvailable::ArenaDtor(void* object) {
  CClientNotificationFamilySharingLibraryAvailable* _this = reinterpret_cast< CClientNotificationFamilySharingLibraryAvailable* >(object);
  (void)_this;
}
void CClientNotificationFamilySharingLibraryAvailable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationFamilySharingLibraryAvailable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationFamilySharingLibraryAvailable::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationFamilySharingLibraryAvailable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountid_owner_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationFamilySharingLibraryAvailable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid_owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid_owner(&has_bits);
          accountid_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationFamilySharingLibraryAvailable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationFamilySharingLibraryAvailable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid_owner = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid_owner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationFamilySharingLibraryAvailable)
  return target;
}

size_t CClientNotificationFamilySharingLibraryAvailable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationFamilySharingLibraryAvailable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 accountid_owner = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid_owner());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationFamilySharingLibraryAvailable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationFamilySharingLibraryAvailable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationFamilySharingLibraryAvailable::GetClassData() const { return &_class_data_; }

void CClientNotificationFamilySharingLibraryAvailable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationFamilySharingLibraryAvailable *>(to)->MergeFrom(
      static_cast<const CClientNotificationFamilySharingLibraryAvailable &>(from));
}


void CClientNotificationFamilySharingLibraryAvailable::MergeFrom(const CClientNotificationFamilySharingLibraryAvailable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationFamilySharingLibraryAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accountid_owner()) {
    _internal_set_accountid_owner(from._internal_accountid_owner());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationFamilySharingLibraryAvailable::CopyFrom(const CClientNotificationFamilySharingLibraryAvailable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationFamilySharingLibraryAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationFamilySharingLibraryAvailable::IsInitialized() const {
  return true;
}

void CClientNotificationFamilySharingLibraryAvailable::InternalSwap(CClientNotificationFamilySharingLibraryAvailable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(accountid_owner_, other->accountid_owner_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationFamilySharingLibraryAvailable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[15]);
}

// ===================================================================

class CClientNotificationIncomingVoiceChat::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationIncomingVoiceChat>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationIncomingVoiceChat::CClientNotificationIncomingVoiceChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationIncomingVoiceChat)
}
CClientNotificationIncomingVoiceChat::CClientNotificationIncomingVoiceChat(const CClientNotificationIncomingVoiceChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationIncomingVoiceChat)
}

inline void CClientNotificationIncomingVoiceChat::SharedCtor() {
steamid_ = uint64_t{0u};
}

CClientNotificationIncomingVoiceChat::~CClientNotificationIncomingVoiceChat() {
  // @@protoc_insertion_point(destructor:CClientNotificationIncomingVoiceChat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationIncomingVoiceChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationIncomingVoiceChat::ArenaDtor(void* object) {
  CClientNotificationIncomingVoiceChat* _this = reinterpret_cast< CClientNotificationIncomingVoiceChat* >(object);
  (void)_this;
}
void CClientNotificationIncomingVoiceChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationIncomingVoiceChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationIncomingVoiceChat::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationIncomingVoiceChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationIncomingVoiceChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationIncomingVoiceChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationIncomingVoiceChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationIncomingVoiceChat)
  return target;
}

size_t CClientNotificationIncomingVoiceChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationIncomingVoiceChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationIncomingVoiceChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationIncomingVoiceChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationIncomingVoiceChat::GetClassData() const { return &_class_data_; }

void CClientNotificationIncomingVoiceChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationIncomingVoiceChat *>(to)->MergeFrom(
      static_cast<const CClientNotificationIncomingVoiceChat &>(from));
}


void CClientNotificationIncomingVoiceChat::MergeFrom(const CClientNotificationIncomingVoiceChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationIncomingVoiceChat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationIncomingVoiceChat::CopyFrom(const CClientNotificationIncomingVoiceChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationIncomingVoiceChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationIncomingVoiceChat::IsInitialized() const {
  return true;
}

void CClientNotificationIncomingVoiceChat::InternalSwap(CClientNotificationIncomingVoiceChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationIncomingVoiceChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[16]);
}

// ===================================================================

class CClientNotificationClaimSteamDeckRewards::_Internal {
 public:
};

CClientNotificationClaimSteamDeckRewards::CClientNotificationClaimSteamDeckRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CClientNotificationClaimSteamDeckRewards)
}
CClientNotificationClaimSteamDeckRewards::CClientNotificationClaimSteamDeckRewards(const CClientNotificationClaimSteamDeckRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CClientNotificationClaimSteamDeckRewards)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationClaimSteamDeckRewards::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationClaimSteamDeckRewards::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationClaimSteamDeckRewards::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[17]);
}

// ===================================================================

class CClientNotificationGiftReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationGiftReceived>()._has_bits_);
  static void set_has_sender_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationGiftReceived::CClientNotificationGiftReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationGiftReceived)
}
CClientNotificationGiftReceived::CClientNotificationGiftReceived(const CClientNotificationGiftReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sender_name()) {
    sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CClientNotificationGiftReceived)
}

inline void CClientNotificationGiftReceived::SharedCtor() {
sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CClientNotificationGiftReceived::~CClientNotificationGiftReceived() {
  // @@protoc_insertion_point(destructor:CClientNotificationGiftReceived)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationGiftReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sender_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientNotificationGiftReceived::ArenaDtor(void* object) {
  CClientNotificationGiftReceived* _this = reinterpret_cast< CClientNotificationGiftReceived* >(object);
  (void)_this;
}
void CClientNotificationGiftReceived::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationGiftReceived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationGiftReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationGiftReceived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sender_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationGiftReceived::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string sender_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationGiftReceived.sender_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationGiftReceived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationGiftReceived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sender_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender_name().data(), static_cast<int>(this->_internal_sender_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationGiftReceived.sender_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sender_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationGiftReceived)
  return target;
}

size_t CClientNotificationGiftReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationGiftReceived)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string sender_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationGiftReceived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationGiftReceived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationGiftReceived::GetClassData() const { return &_class_data_; }

void CClientNotificationGiftReceived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationGiftReceived *>(to)->MergeFrom(
      static_cast<const CClientNotificationGiftReceived &>(from));
}


void CClientNotificationGiftReceived::MergeFrom(const CClientNotificationGiftReceived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationGiftReceived)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sender_name()) {
    _internal_set_sender_name(from._internal_sender_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationGiftReceived::CopyFrom(const CClientNotificationGiftReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationGiftReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationGiftReceived::IsInitialized() const {
  return true;
}

void CClientNotificationGiftReceived::InternalSwap(CClientNotificationGiftReceived* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sender_name_, lhs_arena,
      &other->sender_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationGiftReceived::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[18]);
}

// ===================================================================

class CClientNotificationItemAnnouncement::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationItemAnnouncement>()._has_bits_);
  static void set_has_new_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_backpack_items(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClientNotificationItemAnnouncement::CClientNotificationItemAnnouncement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationItemAnnouncement)
}
CClientNotificationItemAnnouncement::CClientNotificationItemAnnouncement(const CClientNotificationItemAnnouncement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&new_item_count_, &from.new_item_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_backpack_items_) -
    reinterpret_cast<char*>(&new_item_count_)) + sizeof(new_backpack_items_));
  // @@protoc_insertion_point(copy_constructor:CClientNotificationItemAnnouncement)
}

inline void CClientNotificationItemAnnouncement::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&new_item_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_backpack_items_) -
    reinterpret_cast<char*>(&new_item_count_)) + sizeof(new_backpack_items_));
}

CClientNotificationItemAnnouncement::~CClientNotificationItemAnnouncement() {
  // @@protoc_insertion_point(destructor:CClientNotificationItemAnnouncement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationItemAnnouncement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationItemAnnouncement::ArenaDtor(void* object) {
  CClientNotificationItemAnnouncement* _this = reinterpret_cast< CClientNotificationItemAnnouncement* >(object);
  (void)_this;
}
void CClientNotificationItemAnnouncement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationItemAnnouncement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationItemAnnouncement::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationItemAnnouncement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&new_item_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_backpack_items_) -
        reinterpret_cast<char*>(&new_item_count_)) + sizeof(new_backpack_items_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationItemAnnouncement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 new_item_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_new_item_count(&has_bits);
          new_item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool new_backpack_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_new_backpack_items(&has_bits);
          new_backpack_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationItemAnnouncement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationItemAnnouncement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_new_item_count(), target);
  }

  // optional bool new_backpack_items = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_new_backpack_items(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationItemAnnouncement)
  return target;
}

size_t CClientNotificationItemAnnouncement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationItemAnnouncement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 new_item_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_new_item_count());
    }

    // optional bool new_backpack_items = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationItemAnnouncement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationItemAnnouncement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationItemAnnouncement::GetClassData() const { return &_class_data_; }

void CClientNotificationItemAnnouncement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationItemAnnouncement *>(to)->MergeFrom(
      static_cast<const CClientNotificationItemAnnouncement &>(from));
}


void CClientNotificationItemAnnouncement::MergeFrom(const CClientNotificationItemAnnouncement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationItemAnnouncement)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      new_item_count_ = from.new_item_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_backpack_items_ = from.new_backpack_items_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationItemAnnouncement::CopyFrom(const CClientNotificationItemAnnouncement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationItemAnnouncement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationItemAnnouncement::IsInitialized() const {
  return true;
}

void CClientNotificationItemAnnouncement::InternalSwap(CClientNotificationItemAnnouncement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientNotificationItemAnnouncement, new_backpack_items_)
      + sizeof(CClientNotificationItemAnnouncement::new_backpack_items_)
      - PROTOBUF_FIELD_OFFSET(CClientNotificationItemAnnouncement, new_item_count_)>(
          reinterpret_cast<char*>(&new_item_count_),
          reinterpret_cast<char*>(&other->new_item_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationItemAnnouncement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[19]);
}

// ===================================================================

class CClientNotificationHardwareSurveyPending::_Internal {
 public:
};

CClientNotificationHardwareSurveyPending::CClientNotificationHardwareSurveyPending(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CClientNotificationHardwareSurveyPending)
}
CClientNotificationHardwareSurveyPending::CClientNotificationHardwareSurveyPending(const CClientNotificationHardwareSurveyPending& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CClientNotificationHardwareSurveyPending)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationHardwareSurveyPending::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationHardwareSurveyPending::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationHardwareSurveyPending::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[20]);
}

// ===================================================================

class CClientNotificationLowDiskSpace::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationLowDiskSpace>()._has_bits_);
  static void set_has_folder_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationLowDiskSpace::CClientNotificationLowDiskSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationLowDiskSpace)
}
CClientNotificationLowDiskSpace::CClientNotificationLowDiskSpace(const CClientNotificationLowDiskSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  folder_index_ = from.folder_index_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationLowDiskSpace)
}

inline void CClientNotificationLowDiskSpace::SharedCtor() {
folder_index_ = 0u;
}

CClientNotificationLowDiskSpace::~CClientNotificationLowDiskSpace() {
  // @@protoc_insertion_point(destructor:CClientNotificationLowDiskSpace)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationLowDiskSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationLowDiskSpace::ArenaDtor(void* object) {
  CClientNotificationLowDiskSpace* _this = reinterpret_cast< CClientNotificationLowDiskSpace* >(object);
  (void)_this;
}
void CClientNotificationLowDiskSpace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationLowDiskSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationLowDiskSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationLowDiskSpace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  folder_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationLowDiskSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 folder_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_folder_index(&has_bits);
          folder_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationLowDiskSpace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationLowDiskSpace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 folder_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_folder_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationLowDiskSpace)
  return target;
}

size_t CClientNotificationLowDiskSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationLowDiskSpace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 folder_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_folder_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationLowDiskSpace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationLowDiskSpace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationLowDiskSpace::GetClassData() const { return &_class_data_; }

void CClientNotificationLowDiskSpace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationLowDiskSpace *>(to)->MergeFrom(
      static_cast<const CClientNotificationLowDiskSpace &>(from));
}


void CClientNotificationLowDiskSpace::MergeFrom(const CClientNotificationLowDiskSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationLowDiskSpace)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_folder_index()) {
    _internal_set_folder_index(from._internal_folder_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationLowDiskSpace::CopyFrom(const CClientNotificationLowDiskSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationLowDiskSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationLowDiskSpace::IsInitialized() const {
  return true;
}

void CClientNotificationLowDiskSpace::InternalSwap(CClientNotificationLowDiskSpace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(folder_index_, other->folder_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationLowDiskSpace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[21]);
}

// ===================================================================

class CClientNotificationBatteryTemperature::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationBatteryTemperature>()._has_bits_);
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_notification_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationBatteryTemperature::CClientNotificationBatteryTemperature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationBatteryTemperature)
}
CClientNotificationBatteryTemperature::CClientNotificationBatteryTemperature(const CClientNotificationBatteryTemperature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notification_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notification_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_notification_type()) {
    notification_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notification_type(), 
      GetArenaForAllocation());
  }
  temperature_ = from.temperature_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationBatteryTemperature)
}

inline void CClientNotificationBatteryTemperature::SharedCtor() {
notification_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notification_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
temperature_ = 0u;
}

CClientNotificationBatteryTemperature::~CClientNotificationBatteryTemperature() {
  // @@protoc_insertion_point(destructor:CClientNotificationBatteryTemperature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationBatteryTemperature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  notification_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientNotificationBatteryTemperature::ArenaDtor(void* object) {
  CClientNotificationBatteryTemperature* _this = reinterpret_cast< CClientNotificationBatteryTemperature* >(object);
  (void)_this;
}
void CClientNotificationBatteryTemperature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationBatteryTemperature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationBatteryTemperature::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationBatteryTemperature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    notification_type_.ClearNonDefaultToEmpty();
  }
  temperature_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationBatteryTemperature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string notification_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_notification_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationBatteryTemperature.notification_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationBatteryTemperature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationBatteryTemperature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 temperature = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_temperature(), target);
  }

  // optional string notification_type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notification_type().data(), static_cast<int>(this->_internal_notification_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationBatteryTemperature.notification_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_notification_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationBatteryTemperature)
  return target;
}

size_t CClientNotificationBatteryTemperature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationBatteryTemperature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string notification_type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notification_type());
    }

    // optional uint32 temperature = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_temperature());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationBatteryTemperature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationBatteryTemperature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationBatteryTemperature::GetClassData() const { return &_class_data_; }

void CClientNotificationBatteryTemperature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationBatteryTemperature *>(to)->MergeFrom(
      static_cast<const CClientNotificationBatteryTemperature &>(from));
}


void CClientNotificationBatteryTemperature::MergeFrom(const CClientNotificationBatteryTemperature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationBatteryTemperature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_notification_type(from._internal_notification_type());
    }
    if (cached_has_bits & 0x00000002u) {
      temperature_ = from.temperature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationBatteryTemperature::CopyFrom(const CClientNotificationBatteryTemperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationBatteryTemperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationBatteryTemperature::IsInitialized() const {
  return true;
}

void CClientNotificationBatteryTemperature::InternalSwap(CClientNotificationBatteryTemperature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notification_type_, lhs_arena,
      &other->notification_type_, rhs_arena
  );
  swap(temperature_, other->temperature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationBatteryTemperature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[22]);
}

// ===================================================================

class CClientNotificationDockUnsupportedFirmware::_Internal {
 public:
};

CClientNotificationDockUnsupportedFirmware::CClientNotificationDockUnsupportedFirmware(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CClientNotificationDockUnsupportedFirmware)
}
CClientNotificationDockUnsupportedFirmware::CClientNotificationDockUnsupportedFirmware(const CClientNotificationDockUnsupportedFirmware& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CClientNotificationDockUnsupportedFirmware)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationDockUnsupportedFirmware::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationDockUnsupportedFirmware::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationDockUnsupportedFirmware::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[23]);
}

// ===================================================================

class CClientNotificationPeerContentUpload::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationPeerContentUpload>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_peer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationPeerContentUpload::CClientNotificationPeerContentUpload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationPeerContentUpload)
}
CClientNotificationPeerContentUpload::CClientNotificationPeerContentUpload(const CClientNotificationPeerContentUpload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  peer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    peer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_peer_name()) {
    peer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_peer_name(), 
      GetArenaForAllocation());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationPeerContentUpload)
}

inline void CClientNotificationPeerContentUpload::SharedCtor() {
peer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  peer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
appid_ = 0u;
}

CClientNotificationPeerContentUpload::~CClientNotificationPeerContentUpload() {
  // @@protoc_insertion_point(destructor:CClientNotificationPeerContentUpload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationPeerContentUpload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  peer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientNotificationPeerContentUpload::ArenaDtor(void* object) {
  CClientNotificationPeerContentUpload* _this = reinterpret_cast< CClientNotificationPeerContentUpload* >(object);
  (void)_this;
}
void CClientNotificationPeerContentUpload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationPeerContentUpload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationPeerContentUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationPeerContentUpload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    peer_name_.ClearNonDefaultToEmpty();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationPeerContentUpload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string peer_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_peer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationPeerContentUpload.peer_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationPeerContentUpload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationPeerContentUpload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string peer_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_peer_name().data(), static_cast<int>(this->_internal_peer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationPeerContentUpload.peer_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_peer_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationPeerContentUpload)
  return target;
}

size_t CClientNotificationPeerContentUpload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationPeerContentUpload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string peer_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_peer_name());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationPeerContentUpload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationPeerContentUpload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationPeerContentUpload::GetClassData() const { return &_class_data_; }

void CClientNotificationPeerContentUpload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationPeerContentUpload *>(to)->MergeFrom(
      static_cast<const CClientNotificationPeerContentUpload &>(from));
}


void CClientNotificationPeerContentUpload::MergeFrom(const CClientNotificationPeerContentUpload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationPeerContentUpload)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_peer_name(from._internal_peer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationPeerContentUpload::CopyFrom(const CClientNotificationPeerContentUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationPeerContentUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationPeerContentUpload::IsInitialized() const {
  return true;
}

void CClientNotificationPeerContentUpload::InternalSwap(CClientNotificationPeerContentUpload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &peer_name_, lhs_arena,
      &other->peer_name_, rhs_arena
  );
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationPeerContentUpload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[24]);
}

// ===================================================================

class CClientNotificationCannotReadControllerGuideButton::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationCannotReadControllerGuideButton>()._has_bits_);
  static void set_has_controller_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationCannotReadControllerGuideButton::CClientNotificationCannotReadControllerGuideButton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationCannotReadControllerGuideButton)
}
CClientNotificationCannotReadControllerGuideButton::CClientNotificationCannotReadControllerGuideButton(const CClientNotificationCannotReadControllerGuideButton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  controller_index_ = from.controller_index_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationCannotReadControllerGuideButton)
}

inline void CClientNotificationCannotReadControllerGuideButton::SharedCtor() {
controller_index_ = 0;
}

CClientNotificationCannotReadControllerGuideButton::~CClientNotificationCannotReadControllerGuideButton() {
  // @@protoc_insertion_point(destructor:CClientNotificationCannotReadControllerGuideButton)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationCannotReadControllerGuideButton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationCannotReadControllerGuideButton::ArenaDtor(void* object) {
  CClientNotificationCannotReadControllerGuideButton* _this = reinterpret_cast< CClientNotificationCannotReadControllerGuideButton* >(object);
  (void)_this;
}
void CClientNotificationCannotReadControllerGuideButton::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationCannotReadControllerGuideButton::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationCannotReadControllerGuideButton::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationCannotReadControllerGuideButton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationCannotReadControllerGuideButton::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 controller_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_controller_index(&has_bits);
          controller_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationCannotReadControllerGuideButton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationCannotReadControllerGuideButton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 controller_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_controller_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationCannotReadControllerGuideButton)
  return target;
}

size_t CClientNotificationCannotReadControllerGuideButton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationCannotReadControllerGuideButton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 controller_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_controller_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationCannotReadControllerGuideButton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationCannotReadControllerGuideButton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationCannotReadControllerGuideButton::GetClassData() const { return &_class_data_; }

void CClientNotificationCannotReadControllerGuideButton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationCannotReadControllerGuideButton *>(to)->MergeFrom(
      static_cast<const CClientNotificationCannotReadControllerGuideButton &>(from));
}


void CClientNotificationCannotReadControllerGuideButton::MergeFrom(const CClientNotificationCannotReadControllerGuideButton& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationCannotReadControllerGuideButton)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_controller_index()) {
    _internal_set_controller_index(from._internal_controller_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationCannotReadControllerGuideButton::CopyFrom(const CClientNotificationCannotReadControllerGuideButton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationCannotReadControllerGuideButton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationCannotReadControllerGuideButton::IsInitialized() const {
  return true;
}

void CClientNotificationCannotReadControllerGuideButton::InternalSwap(CClientNotificationCannotReadControllerGuideButton* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(controller_index_, other->controller_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationCannotReadControllerGuideButton::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[25]);
}

// ===================================================================

class CClientNotificationOverlaySplashScreen::_Internal {
 public:
};

CClientNotificationOverlaySplashScreen::CClientNotificationOverlaySplashScreen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CClientNotificationOverlaySplashScreen)
}
CClientNotificationOverlaySplashScreen::CClientNotificationOverlaySplashScreen(const CClientNotificationOverlaySplashScreen& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CClientNotificationOverlaySplashScreen)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationOverlaySplashScreen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationOverlaySplashScreen::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationOverlaySplashScreen::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[26]);
}

// ===================================================================

class CClientNotificationBroadcastAvailableToWatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationBroadcastAvailableToWatch>()._has_bits_);
  static void set_has_broadcast_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationBroadcastAvailableToWatch::CClientNotificationBroadcastAvailableToWatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationBroadcastAvailableToWatch)
}
CClientNotificationBroadcastAvailableToWatch::CClientNotificationBroadcastAvailableToWatch(const CClientNotificationBroadcastAvailableToWatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  broadcast_permission_ = from.broadcast_permission_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationBroadcastAvailableToWatch)
}

inline void CClientNotificationBroadcastAvailableToWatch::SharedCtor() {
broadcast_permission_ = 0;
}

CClientNotificationBroadcastAvailableToWatch::~CClientNotificationBroadcastAvailableToWatch() {
  // @@protoc_insertion_point(destructor:CClientNotificationBroadcastAvailableToWatch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationBroadcastAvailableToWatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientNotificationBroadcastAvailableToWatch::ArenaDtor(void* object) {
  CClientNotificationBroadcastAvailableToWatch* _this = reinterpret_cast< CClientNotificationBroadcastAvailableToWatch* >(object);
  (void)_this;
}
void CClientNotificationBroadcastAvailableToWatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationBroadcastAvailableToWatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationBroadcastAvailableToWatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationBroadcastAvailableToWatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcast_permission_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationBroadcastAvailableToWatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 broadcast_permission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_broadcast_permission(&has_bits);
          broadcast_permission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationBroadcastAvailableToWatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationBroadcastAvailableToWatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 broadcast_permission = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_broadcast_permission(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationBroadcastAvailableToWatch)
  return target;
}

size_t CClientNotificationBroadcastAvailableToWatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationBroadcastAvailableToWatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 broadcast_permission = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_broadcast_permission());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationBroadcastAvailableToWatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationBroadcastAvailableToWatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationBroadcastAvailableToWatch::GetClassData() const { return &_class_data_; }

void CClientNotificationBroadcastAvailableToWatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationBroadcastAvailableToWatch *>(to)->MergeFrom(
      static_cast<const CClientNotificationBroadcastAvailableToWatch &>(from));
}


void CClientNotificationBroadcastAvailableToWatch::MergeFrom(const CClientNotificationBroadcastAvailableToWatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationBroadcastAvailableToWatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast_permission()) {
    _internal_set_broadcast_permission(from._internal_broadcast_permission());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationBroadcastAvailableToWatch::CopyFrom(const CClientNotificationBroadcastAvailableToWatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationBroadcastAvailableToWatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationBroadcastAvailableToWatch::IsInitialized() const {
  return true;
}

void CClientNotificationBroadcastAvailableToWatch::InternalSwap(CClientNotificationBroadcastAvailableToWatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_permission_, other->broadcast_permission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationBroadcastAvailableToWatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[27]);
}

// ===================================================================

class CClientNotificationTimedTrialRemaining::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationTimedTrialRemaining>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offline(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_allowed_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_played_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CClientNotificationTimedTrialRemaining::CClientNotificationTimedTrialRemaining(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationTimedTrialRemaining)
}
CClientNotificationTimedTrialRemaining::CClientNotificationTimedTrialRemaining(const CClientNotificationTimedTrialRemaining& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&played_seconds_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(played_seconds_));
  // @@protoc_insertion_point(copy_constructor:CClientNotificationTimedTrialRemaining)
}

inline void CClientNotificationTimedTrialRemaining::SharedCtor() {
icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&played_seconds_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(played_seconds_));
}

CClientNotificationTimedTrialRemaining::~CClientNotificationTimedTrialRemaining() {
  // @@protoc_insertion_point(destructor:CClientNotificationTimedTrialRemaining)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationTimedTrialRemaining::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientNotificationTimedTrialRemaining::ArenaDtor(void* object) {
  CClientNotificationTimedTrialRemaining* _this = reinterpret_cast< CClientNotificationTimedTrialRemaining* >(object);
  (void)_this;
}
void CClientNotificationTimedTrialRemaining::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationTimedTrialRemaining::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationTimedTrialRemaining::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationTimedTrialRemaining)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    icon_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&played_seconds_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(played_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationTimedTrialRemaining::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationTimedTrialRemaining.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool offline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_offline(&has_bits);
          offline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 allowed_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_allowed_seconds(&has_bits);
          allowed_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 played_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_played_seconds(&has_bits);
          played_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationTimedTrialRemaining::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationTimedTrialRemaining)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationTimedTrialRemaining.icon");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_icon(), target);
  }

  // optional bool offline = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_offline(), target);
  }

  // optional uint32 allowed_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_allowed_seconds(), target);
  }

  // optional uint32 played_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_played_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationTimedTrialRemaining)
  return target;
}

size_t CClientNotificationTimedTrialRemaining::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationTimedTrialRemaining)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string icon = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool offline = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 allowed_seconds = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_allowed_seconds());
    }

    // optional uint32 played_seconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_played_seconds());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationTimedTrialRemaining::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationTimedTrialRemaining::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationTimedTrialRemaining::GetClassData() const { return &_class_data_; }

void CClientNotificationTimedTrialRemaining::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationTimedTrialRemaining *>(to)->MergeFrom(
      static_cast<const CClientNotificationTimedTrialRemaining &>(from));
}


void CClientNotificationTimedTrialRemaining::MergeFrom(const CClientNotificationTimedTrialRemaining& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationTimedTrialRemaining)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      offline_ = from.offline_;
    }
    if (cached_has_bits & 0x00000008u) {
      allowed_seconds_ = from.allowed_seconds_;
    }
    if (cached_has_bits & 0x00000010u) {
      played_seconds_ = from.played_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationTimedTrialRemaining::CopyFrom(const CClientNotificationTimedTrialRemaining& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationTimedTrialRemaining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationTimedTrialRemaining::IsInitialized() const {
  return true;
}

void CClientNotificationTimedTrialRemaining::InternalSwap(CClientNotificationTimedTrialRemaining* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientNotificationTimedTrialRemaining, played_seconds_)
      + sizeof(CClientNotificationTimedTrialRemaining::played_seconds_)
      - PROTOBUF_FIELD_OFFSET(CClientNotificationTimedTrialRemaining, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationTimedTrialRemaining::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[28]);
}

// ===================================================================

class CClientNotificationLoginRefresh::_Internal {
 public:
};

CClientNotificationLoginRefresh::CClientNotificationLoginRefresh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CClientNotificationLoginRefresh)
}
CClientNotificationLoginRefresh::CClientNotificationLoginRefresh(const CClientNotificationLoginRefresh& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CClientNotificationLoginRefresh)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationLoginRefresh::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationLoginRefresh::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationLoginRefresh::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[29]);
}

// ===================================================================

class CClientNotificationTimerExpired::_Internal {
 public:
};

CClientNotificationTimerExpired::CClientNotificationTimerExpired(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CClientNotificationTimerExpired)
}
CClientNotificationTimerExpired::CClientNotificationTimerExpired(const CClientNotificationTimerExpired& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CClientNotificationTimerExpired)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationTimerExpired::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationTimerExpired::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationTimerExpired::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[30]);
}

// ===================================================================

class CClientNotificationSteamInputActionSetChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientNotificationSteamInputActionSetChanged>()._has_bits_);
  static void set_has_controller_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action_set_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientNotificationSteamInputActionSetChanged::CClientNotificationSteamInputActionSetChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientNotificationSteamInputActionSetChanged)
}
CClientNotificationSteamInputActionSetChanged::CClientNotificationSteamInputActionSetChanged(const CClientNotificationSteamInputActionSetChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_set_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_set_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_action_set_name()) {
    action_set_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action_set_name(), 
      GetArenaForAllocation());
  }
  controller_index_ = from.controller_index_;
  // @@protoc_insertion_point(copy_constructor:CClientNotificationSteamInputActionSetChanged)
}

inline void CClientNotificationSteamInputActionSetChanged::SharedCtor() {
action_set_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_set_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
controller_index_ = 0;
}

CClientNotificationSteamInputActionSetChanged::~CClientNotificationSteamInputActionSetChanged() {
  // @@protoc_insertion_point(destructor:CClientNotificationSteamInputActionSetChanged)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientNotificationSteamInputActionSetChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_set_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientNotificationSteamInputActionSetChanged::ArenaDtor(void* object) {
  CClientNotificationSteamInputActionSetChanged* _this = reinterpret_cast< CClientNotificationSteamInputActionSetChanged* >(object);
  (void)_this;
}
void CClientNotificationSteamInputActionSetChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientNotificationSteamInputActionSetChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientNotificationSteamInputActionSetChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientNotificationSteamInputActionSetChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    action_set_name_.ClearNonDefaultToEmpty();
  }
  controller_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientNotificationSteamInputActionSetChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 controller_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_controller_index(&has_bits);
          controller_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string action_set_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_action_set_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientNotificationSteamInputActionSetChanged.action_set_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientNotificationSteamInputActionSetChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientNotificationSteamInputActionSetChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 controller_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_controller_index(), target);
  }

  // optional string action_set_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action_set_name().data(), static_cast<int>(this->_internal_action_set_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientNotificationSteamInputActionSetChanged.action_set_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action_set_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientNotificationSteamInputActionSetChanged)
  return target;
}

size_t CClientNotificationSteamInputActionSetChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientNotificationSteamInputActionSetChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string action_set_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action_set_name());
    }

    // optional int32 controller_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_controller_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientNotificationSteamInputActionSetChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientNotificationSteamInputActionSetChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientNotificationSteamInputActionSetChanged::GetClassData() const { return &_class_data_; }

void CClientNotificationSteamInputActionSetChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientNotificationSteamInputActionSetChanged *>(to)->MergeFrom(
      static_cast<const CClientNotificationSteamInputActionSetChanged &>(from));
}


void CClientNotificationSteamInputActionSetChanged::MergeFrom(const CClientNotificationSteamInputActionSetChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientNotificationSteamInputActionSetChanged)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_action_set_name(from._internal_action_set_name());
    }
    if (cached_has_bits & 0x00000002u) {
      controller_index_ = from.controller_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientNotificationSteamInputActionSetChanged::CopyFrom(const CClientNotificationSteamInputActionSetChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientNotificationSteamInputActionSetChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientNotificationSteamInputActionSetChanged::IsInitialized() const {
  return true;
}

void CClientNotificationSteamInputActionSetChanged::InternalSwap(CClientNotificationSteamInputActionSetChanged* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_set_name_, lhs_arena,
      &other->action_set_name_, rhs_arena
  );
  swap(controller_index_, other->controller_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientNotificationSteamInputActionSetChanged::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_getter, &descriptor_table_steammessages_5fclientnotificationtypes_2eproto_once,
      file_level_metadata_steammessages_5fclientnotificationtypes_2eproto[31]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CClientNotificationCloudSyncFailure* Arena::CreateMaybeMessage< ::CClientNotificationCloudSyncFailure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationCloudSyncFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationCloudSyncConflict* Arena::CreateMaybeMessage< ::CClientNotificationCloudSyncConflict >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationCloudSyncConflict >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationScreenshot* Arena::CreateMaybeMessage< ::CClientNotificationScreenshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationScreenshot >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationDownloadCompleted* Arena::CreateMaybeMessage< ::CClientNotificationDownloadCompleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationDownloadCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationFriendInvite* Arena::CreateMaybeMessage< ::CClientNotificationFriendInvite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationFriendInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationFriendInviteRollup* Arena::CreateMaybeMessage< ::CClientNotificationFriendInviteRollup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationFriendInviteRollup >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationFriendInGame* Arena::CreateMaybeMessage< ::CClientNotificationFriendInGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationFriendInGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationFriendOnline* Arena::CreateMaybeMessage< ::CClientNotificationFriendOnline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationFriendOnline >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationAchievement* Arena::CreateMaybeMessage< ::CClientNotificationAchievement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationAchievement >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationLowBattery* Arena::CreateMaybeMessage< ::CClientNotificationLowBattery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationLowBattery >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationSystemUpdate* Arena::CreateMaybeMessage< ::CClientNotificationSystemUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationSystemUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationFriendMessage* Arena::CreateMaybeMessage< ::CClientNotificationFriendMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationFriendMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationGroupChatMessage* Arena::CreateMaybeMessage< ::CClientNotificationGroupChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationGroupChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationFamilySharingDeviceAuthorizationChanged* Arena::CreateMaybeMessage< ::CClientNotificationFamilySharingDeviceAuthorizationChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationFamilySharingDeviceAuthorizationChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationFamilySharingStopPlaying* Arena::CreateMaybeMessage< ::CClientNotificationFamilySharingStopPlaying >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationFamilySharingStopPlaying >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationFamilySharingLibraryAvailable* Arena::CreateMaybeMessage< ::CClientNotificationFamilySharingLibraryAvailable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationFamilySharingLibraryAvailable >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationIncomingVoiceChat* Arena::CreateMaybeMessage< ::CClientNotificationIncomingVoiceChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationIncomingVoiceChat >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationClaimSteamDeckRewards* Arena::CreateMaybeMessage< ::CClientNotificationClaimSteamDeckRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationClaimSteamDeckRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationGiftReceived* Arena::CreateMaybeMessage< ::CClientNotificationGiftReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationGiftReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationItemAnnouncement* Arena::CreateMaybeMessage< ::CClientNotificationItemAnnouncement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationItemAnnouncement >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationHardwareSurveyPending* Arena::CreateMaybeMessage< ::CClientNotificationHardwareSurveyPending >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationHardwareSurveyPending >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationLowDiskSpace* Arena::CreateMaybeMessage< ::CClientNotificationLowDiskSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationLowDiskSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationBatteryTemperature* Arena::CreateMaybeMessage< ::CClientNotificationBatteryTemperature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationBatteryTemperature >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationDockUnsupportedFirmware* Arena::CreateMaybeMessage< ::CClientNotificationDockUnsupportedFirmware >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationDockUnsupportedFirmware >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationPeerContentUpload* Arena::CreateMaybeMessage< ::CClientNotificationPeerContentUpload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationPeerContentUpload >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationCannotReadControllerGuideButton* Arena::CreateMaybeMessage< ::CClientNotificationCannotReadControllerGuideButton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationCannotReadControllerGuideButton >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationOverlaySplashScreen* Arena::CreateMaybeMessage< ::CClientNotificationOverlaySplashScreen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationOverlaySplashScreen >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationBroadcastAvailableToWatch* Arena::CreateMaybeMessage< ::CClientNotificationBroadcastAvailableToWatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationBroadcastAvailableToWatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationTimedTrialRemaining* Arena::CreateMaybeMessage< ::CClientNotificationTimedTrialRemaining >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationTimedTrialRemaining >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationLoginRefresh* Arena::CreateMaybeMessage< ::CClientNotificationLoginRefresh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationLoginRefresh >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationTimerExpired* Arena::CreateMaybeMessage< ::CClientNotificationTimerExpired >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationTimerExpired >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientNotificationSteamInputActionSetChanged* Arena::CreateMaybeMessage< ::CClientNotificationSteamInputActionSetChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientNotificationSteamInputActionSetChanged >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
