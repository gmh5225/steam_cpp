// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_vac.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fvac_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fvac_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fvac_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fvac_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fvac_2esteamclient_2eproto;
class CFileVerification_SignatureCheck_Request;
struct CFileVerification_SignatureCheck_RequestDefaultTypeInternal;
extern CFileVerification_SignatureCheck_RequestDefaultTypeInternal _CFileVerification_SignatureCheck_Request_default_instance_;
class CFileVerification_SignatureCheck_Response;
struct CFileVerification_SignatureCheck_ResponseDefaultTypeInternal;
extern CFileVerification_SignatureCheck_ResponseDefaultTypeInternal _CFileVerification_SignatureCheck_Response_default_instance_;
class CFileVerification_SteamServiceCheck_Request;
struct CFileVerification_SteamServiceCheck_RequestDefaultTypeInternal;
extern CFileVerification_SteamServiceCheck_RequestDefaultTypeInternal _CFileVerification_SteamServiceCheck_Request_default_instance_;
class CFileVerification_SteamServiceCheck_Response;
struct CFileVerification_SteamServiceCheck_ResponseDefaultTypeInternal;
extern CFileVerification_SteamServiceCheck_ResponseDefaultTypeInternal _CFileVerification_SteamServiceCheck_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CFileVerification_SignatureCheck_Request* Arena::CreateMaybeMessage<::CFileVerification_SignatureCheck_Request>(Arena*);
template<> ::CFileVerification_SignatureCheck_Response* Arena::CreateMaybeMessage<::CFileVerification_SignatureCheck_Response>(Arena*);
template<> ::CFileVerification_SteamServiceCheck_Request* Arena::CreateMaybeMessage<::CFileVerification_SteamServiceCheck_Request>(Arena*);
template<> ::CFileVerification_SteamServiceCheck_Response* Arena::CreateMaybeMessage<::CFileVerification_SteamServiceCheck_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CFileVerification_SignatureCheck_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFileVerification_SignatureCheck_Request) */ {
 public:
  inline CFileVerification_SignatureCheck_Request() : CFileVerification_SignatureCheck_Request(nullptr) {}
  ~CFileVerification_SignatureCheck_Request() override;
  explicit constexpr CFileVerification_SignatureCheck_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFileVerification_SignatureCheck_Request(const CFileVerification_SignatureCheck_Request& from);
  CFileVerification_SignatureCheck_Request(CFileVerification_SignatureCheck_Request&& from) noexcept
    : CFileVerification_SignatureCheck_Request() {
    *this = ::std::move(from);
  }

  inline CFileVerification_SignatureCheck_Request& operator=(const CFileVerification_SignatureCheck_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFileVerification_SignatureCheck_Request& operator=(CFileVerification_SignatureCheck_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFileVerification_SignatureCheck_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFileVerification_SignatureCheck_Request* internal_default_instance() {
    return reinterpret_cast<const CFileVerification_SignatureCheck_Request*>(
               &_CFileVerification_SignatureCheck_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CFileVerification_SignatureCheck_Request& a, CFileVerification_SignatureCheck_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CFileVerification_SignatureCheck_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFileVerification_SignatureCheck_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFileVerification_SignatureCheck_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFileVerification_SignatureCheck_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFileVerification_SignatureCheck_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFileVerification_SignatureCheck_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFileVerification_SignatureCheck_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFileVerification_SignatureCheck_Request";
  }
  protected:
  explicit CFileVerification_SignatureCheck_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 7,
    kSha1HashFieldNumber = 9,
    kSteamidFieldNumber = 1,
    kFileSizeFieldNumber = 3,
    kAppidFieldNumber = 2,
    kFileTimestampFieldNumber = 4,
    kFileTimestamp2FieldNumber = 5,
    kSignatureResultFieldNumber = 6,
    kClientPackageVersionFieldNumber = 8,
  };
  // optional string filename = 7;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional bytes sha1hash = 9;
  bool has_sha1hash() const;
  private:
  bool _internal_has_sha1hash() const;
  public:
  void clear_sha1hash();
  const std::string& sha1hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha1hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha1hash();
  PROTOBUF_NODISCARD std::string* release_sha1hash();
  void set_allocated_sha1hash(std::string* sha1hash);
  private:
  const std::string& _internal_sha1hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha1hash(const std::string& value);
  std::string* _internal_mutable_sha1hash();
  public:

  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint64 file_size = 3;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  uint64_t file_size() const;
  void set_file_size(uint64_t value);
  private:
  uint64_t _internal_file_size() const;
  void _internal_set_file_size(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 file_timestamp = 4;
  bool has_file_timestamp() const;
  private:
  bool _internal_has_file_timestamp() const;
  public:
  void clear_file_timestamp();
  uint32_t file_timestamp() const;
  void set_file_timestamp(uint32_t value);
  private:
  uint32_t _internal_file_timestamp() const;
  void _internal_set_file_timestamp(uint32_t value);
  public:

  // optional uint32 file_timestamp2 = 5;
  bool has_file_timestamp2() const;
  private:
  bool _internal_has_file_timestamp2() const;
  public:
  void clear_file_timestamp2();
  uint32_t file_timestamp2() const;
  void set_file_timestamp2(uint32_t value);
  private:
  uint32_t _internal_file_timestamp2() const;
  void _internal_set_file_timestamp2(uint32_t value);
  public:

  // optional uint32 signature_result = 6;
  bool has_signature_result() const;
  private:
  bool _internal_has_signature_result() const;
  public:
  void clear_signature_result();
  uint32_t signature_result() const;
  void set_signature_result(uint32_t value);
  private:
  uint32_t _internal_signature_result() const;
  void _internal_set_signature_result(uint32_t value);
  public:

  // optional uint32 client_package_version = 8;
  bool has_client_package_version() const;
  private:
  bool _internal_has_client_package_version() const;
  public:
  void clear_client_package_version();
  uint32_t client_package_version() const;
  void set_client_package_version(uint32_t value);
  private:
  uint32_t _internal_client_package_version() const;
  void _internal_set_client_package_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CFileVerification_SignatureCheck_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha1hash_;
  uint64_t steamid_;
  uint64_t file_size_;
  uint32_t appid_;
  uint32_t file_timestamp_;
  uint32_t file_timestamp2_;
  uint32_t signature_result_;
  uint32_t client_package_version_;
  friend struct ::TableStruct_steammessages_5fvac_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFileVerification_SignatureCheck_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFileVerification_SignatureCheck_Response) */ {
 public:
  inline CFileVerification_SignatureCheck_Response() : CFileVerification_SignatureCheck_Response(nullptr) {}
  ~CFileVerification_SignatureCheck_Response() override;
  explicit constexpr CFileVerification_SignatureCheck_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFileVerification_SignatureCheck_Response(const CFileVerification_SignatureCheck_Response& from);
  CFileVerification_SignatureCheck_Response(CFileVerification_SignatureCheck_Response&& from) noexcept
    : CFileVerification_SignatureCheck_Response() {
    *this = ::std::move(from);
  }

  inline CFileVerification_SignatureCheck_Response& operator=(const CFileVerification_SignatureCheck_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFileVerification_SignatureCheck_Response& operator=(CFileVerification_SignatureCheck_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFileVerification_SignatureCheck_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFileVerification_SignatureCheck_Response* internal_default_instance() {
    return reinterpret_cast<const CFileVerification_SignatureCheck_Response*>(
               &_CFileVerification_SignatureCheck_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CFileVerification_SignatureCheck_Response& a, CFileVerification_SignatureCheck_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CFileVerification_SignatureCheck_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFileVerification_SignatureCheck_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFileVerification_SignatureCheck_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFileVerification_SignatureCheck_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFileVerification_SignatureCheck_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFileVerification_SignatureCheck_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFileVerification_SignatureCheck_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFileVerification_SignatureCheck_Response";
  }
  protected:
  explicit CFileVerification_SignatureCheck_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenyOperationFieldNumber = 1,
  };
  // optional bool deny_operation = 1;
  bool has_deny_operation() const;
  private:
  bool _internal_has_deny_operation() const;
  public:
  void clear_deny_operation();
  bool deny_operation() const;
  void set_deny_operation(bool value);
  private:
  bool _internal_deny_operation() const;
  void _internal_set_deny_operation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CFileVerification_SignatureCheck_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool deny_operation_;
  friend struct ::TableStruct_steammessages_5fvac_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFileVerification_SteamServiceCheck_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFileVerification_SteamServiceCheck_Request) */ {
 public:
  inline CFileVerification_SteamServiceCheck_Request() : CFileVerification_SteamServiceCheck_Request(nullptr) {}
  ~CFileVerification_SteamServiceCheck_Request() override;
  explicit constexpr CFileVerification_SteamServiceCheck_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFileVerification_SteamServiceCheck_Request(const CFileVerification_SteamServiceCheck_Request& from);
  CFileVerification_SteamServiceCheck_Request(CFileVerification_SteamServiceCheck_Request&& from) noexcept
    : CFileVerification_SteamServiceCheck_Request() {
    *this = ::std::move(from);
  }

  inline CFileVerification_SteamServiceCheck_Request& operator=(const CFileVerification_SteamServiceCheck_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFileVerification_SteamServiceCheck_Request& operator=(CFileVerification_SteamServiceCheck_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFileVerification_SteamServiceCheck_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFileVerification_SteamServiceCheck_Request* internal_default_instance() {
    return reinterpret_cast<const CFileVerification_SteamServiceCheck_Request*>(
               &_CFileVerification_SteamServiceCheck_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CFileVerification_SteamServiceCheck_Request& a, CFileVerification_SteamServiceCheck_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CFileVerification_SteamServiceCheck_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFileVerification_SteamServiceCheck_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFileVerification_SteamServiceCheck_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFileVerification_SteamServiceCheck_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFileVerification_SteamServiceCheck_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFileVerification_SteamServiceCheck_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFileVerification_SteamServiceCheck_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFileVerification_SteamServiceCheck_Request";
  }
  protected:
  explicit CFileVerification_SteamServiceCheck_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceStatusFieldNumber = 2,
    kClientPackageVersionFieldNumber = 3,
    kLauncherTypeFieldNumber = 4,
    kOsTypeFieldNumber = 5,
    kServiceRepairFieldNumber = 6,
  };
  // optional uint32 service_status = 2;
  bool has_service_status() const;
  private:
  bool _internal_has_service_status() const;
  public:
  void clear_service_status();
  uint32_t service_status() const;
  void set_service_status(uint32_t value);
  private:
  uint32_t _internal_service_status() const;
  void _internal_set_service_status(uint32_t value);
  public:

  // optional uint32 client_package_version = 3;
  bool has_client_package_version() const;
  private:
  bool _internal_has_client_package_version() const;
  public:
  void clear_client_package_version();
  uint32_t client_package_version() const;
  void set_client_package_version(uint32_t value);
  private:
  uint32_t _internal_client_package_version() const;
  void _internal_set_client_package_version(uint32_t value);
  public:

  // optional uint32 launcher_type = 4;
  bool has_launcher_type() const;
  private:
  bool _internal_has_launcher_type() const;
  public:
  void clear_launcher_type();
  uint32_t launcher_type() const;
  void set_launcher_type(uint32_t value);
  private:
  uint32_t _internal_launcher_type() const;
  void _internal_set_launcher_type(uint32_t value);
  public:

  // optional uint32 os_type = 5;
  bool has_os_type() const;
  private:
  bool _internal_has_os_type() const;
  public:
  void clear_os_type();
  uint32_t os_type() const;
  void set_os_type(uint32_t value);
  private:
  uint32_t _internal_os_type() const;
  void _internal_set_os_type(uint32_t value);
  public:

  // optional uint32 service_repair = 6;
  bool has_service_repair() const;
  private:
  bool _internal_has_service_repair() const;
  public:
  void clear_service_repair();
  uint32_t service_repair() const;
  void set_service_repair(uint32_t value);
  private:
  uint32_t _internal_service_repair() const;
  void _internal_set_service_repair(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CFileVerification_SteamServiceCheck_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t service_status_;
  uint32_t client_package_version_;
  uint32_t launcher_type_;
  uint32_t os_type_;
  uint32_t service_repair_;
  friend struct ::TableStruct_steammessages_5fvac_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CFileVerification_SteamServiceCheck_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFileVerification_SteamServiceCheck_Response) */ {
 public:
  inline CFileVerification_SteamServiceCheck_Response() : CFileVerification_SteamServiceCheck_Response(nullptr) {}
  ~CFileVerification_SteamServiceCheck_Response() override;
  explicit constexpr CFileVerification_SteamServiceCheck_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CFileVerification_SteamServiceCheck_Response(const CFileVerification_SteamServiceCheck_Response& from);
  CFileVerification_SteamServiceCheck_Response(CFileVerification_SteamServiceCheck_Response&& from) noexcept
    : CFileVerification_SteamServiceCheck_Response() {
    *this = ::std::move(from);
  }

  inline CFileVerification_SteamServiceCheck_Response& operator=(const CFileVerification_SteamServiceCheck_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFileVerification_SteamServiceCheck_Response& operator=(CFileVerification_SteamServiceCheck_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CFileVerification_SteamServiceCheck_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CFileVerification_SteamServiceCheck_Response* internal_default_instance() {
    return reinterpret_cast<const CFileVerification_SteamServiceCheck_Response*>(
               &_CFileVerification_SteamServiceCheck_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CFileVerification_SteamServiceCheck_Response& a, CFileVerification_SteamServiceCheck_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CFileVerification_SteamServiceCheck_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CFileVerification_SteamServiceCheck_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CFileVerification_SteamServiceCheck_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CFileVerification_SteamServiceCheck_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CFileVerification_SteamServiceCheck_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CFileVerification_SteamServiceCheck_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFileVerification_SteamServiceCheck_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFileVerification_SteamServiceCheck_Response";
  }
  protected:
  explicit CFileVerification_SteamServiceCheck_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttemptRepairFieldNumber = 1,
  };
  // optional bool attempt_repair = 1;
  bool has_attempt_repair() const;
  private:
  bool _internal_has_attempt_repair() const;
  public:
  void clear_attempt_repair();
  bool attempt_repair() const;
  void set_attempt_repair(bool value);
  private:
  bool _internal_attempt_repair() const;
  void _internal_set_attempt_repair(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CFileVerification_SteamServiceCheck_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool attempt_repair_;
  friend struct ::TableStruct_steammessages_5fvac_2esteamclient_2eproto;
};
// ===================================================================

class FileVerification_Stub;

class FileVerification : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FileVerification() {};
 public:
  virtual ~FileVerification();

  typedef FileVerification_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void SignatureCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFileVerification_SignatureCheck_Request* request,
                       ::CFileVerification_SignatureCheck_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SteamServiceCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFileVerification_SteamServiceCheck_Request* request,
                       ::CFileVerification_SteamServiceCheck_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FileVerification);
};

class FileVerification_Stub : public FileVerification {
 public:
  FileVerification_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FileVerification_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FileVerification_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FileVerification ------------------------------------------

  void SignatureCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFileVerification_SignatureCheck_Request* request,
                       ::CFileVerification_SignatureCheck_Response* response,
                       ::google::protobuf::Closure* done);
  void SteamServiceCheck(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CFileVerification_SteamServiceCheck_Request* request,
                       ::CFileVerification_SteamServiceCheck_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FileVerification_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CFileVerification_SignatureCheck_Request

// optional fixed64 steamid = 1;
inline bool CFileVerification_SignatureCheck_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CFileVerification_SignatureCheck_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CFileVerification_SignatureCheck_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CFileVerification_SignatureCheck_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CFileVerification_SignatureCheck_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureCheck_Request.steamid)
  return _internal_steamid();
}
inline void CFileVerification_SignatureCheck_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_ = value;
}
inline void CFileVerification_SignatureCheck_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureCheck_Request.steamid)
}

// optional uint32 appid = 2;
inline bool CFileVerification_SignatureCheck_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CFileVerification_SignatureCheck_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CFileVerification_SignatureCheck_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CFileVerification_SignatureCheck_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CFileVerification_SignatureCheck_Request::appid() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureCheck_Request.appid)
  return _internal_appid();
}
inline void CFileVerification_SignatureCheck_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  appid_ = value;
}
inline void CFileVerification_SignatureCheck_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureCheck_Request.appid)
}

// optional uint64 file_size = 3;
inline bool CFileVerification_SignatureCheck_Request::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CFileVerification_SignatureCheck_Request::has_file_size() const {
  return _internal_has_file_size();
}
inline void CFileVerification_SignatureCheck_Request::clear_file_size() {
  file_size_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CFileVerification_SignatureCheck_Request::_internal_file_size() const {
  return file_size_;
}
inline uint64_t CFileVerification_SignatureCheck_Request::file_size() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureCheck_Request.file_size)
  return _internal_file_size();
}
inline void CFileVerification_SignatureCheck_Request::_internal_set_file_size(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  file_size_ = value;
}
inline void CFileVerification_SignatureCheck_Request::set_file_size(uint64_t value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureCheck_Request.file_size)
}

// optional uint32 file_timestamp = 4;
inline bool CFileVerification_SignatureCheck_Request::_internal_has_file_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CFileVerification_SignatureCheck_Request::has_file_timestamp() const {
  return _internal_has_file_timestamp();
}
inline void CFileVerification_SignatureCheck_Request::clear_file_timestamp() {
  file_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CFileVerification_SignatureCheck_Request::_internal_file_timestamp() const {
  return file_timestamp_;
}
inline uint32_t CFileVerification_SignatureCheck_Request::file_timestamp() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureCheck_Request.file_timestamp)
  return _internal_file_timestamp();
}
inline void CFileVerification_SignatureCheck_Request::_internal_set_file_timestamp(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  file_timestamp_ = value;
}
inline void CFileVerification_SignatureCheck_Request::set_file_timestamp(uint32_t value) {
  _internal_set_file_timestamp(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureCheck_Request.file_timestamp)
}

// optional uint32 file_timestamp2 = 5;
inline bool CFileVerification_SignatureCheck_Request::_internal_has_file_timestamp2() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CFileVerification_SignatureCheck_Request::has_file_timestamp2() const {
  return _internal_has_file_timestamp2();
}
inline void CFileVerification_SignatureCheck_Request::clear_file_timestamp2() {
  file_timestamp2_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CFileVerification_SignatureCheck_Request::_internal_file_timestamp2() const {
  return file_timestamp2_;
}
inline uint32_t CFileVerification_SignatureCheck_Request::file_timestamp2() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureCheck_Request.file_timestamp2)
  return _internal_file_timestamp2();
}
inline void CFileVerification_SignatureCheck_Request::_internal_set_file_timestamp2(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  file_timestamp2_ = value;
}
inline void CFileVerification_SignatureCheck_Request::set_file_timestamp2(uint32_t value) {
  _internal_set_file_timestamp2(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureCheck_Request.file_timestamp2)
}

// optional uint32 signature_result = 6;
inline bool CFileVerification_SignatureCheck_Request::_internal_has_signature_result() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CFileVerification_SignatureCheck_Request::has_signature_result() const {
  return _internal_has_signature_result();
}
inline void CFileVerification_SignatureCheck_Request::clear_signature_result() {
  signature_result_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CFileVerification_SignatureCheck_Request::_internal_signature_result() const {
  return signature_result_;
}
inline uint32_t CFileVerification_SignatureCheck_Request::signature_result() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureCheck_Request.signature_result)
  return _internal_signature_result();
}
inline void CFileVerification_SignatureCheck_Request::_internal_set_signature_result(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  signature_result_ = value;
}
inline void CFileVerification_SignatureCheck_Request::set_signature_result(uint32_t value) {
  _internal_set_signature_result(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureCheck_Request.signature_result)
}

// optional string filename = 7;
inline bool CFileVerification_SignatureCheck_Request::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFileVerification_SignatureCheck_Request::has_filename() const {
  return _internal_has_filename();
}
inline void CFileVerification_SignatureCheck_Request::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CFileVerification_SignatureCheck_Request::filename() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureCheck_Request.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CFileVerification_SignatureCheck_Request::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureCheck_Request.filename)
}
inline std::string* CFileVerification_SignatureCheck_Request::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CFileVerification_SignatureCheck_Request.filename)
  return _s;
}
inline const std::string& CFileVerification_SignatureCheck_Request::_internal_filename() const {
  return filename_.Get();
}
inline void CFileVerification_SignatureCheck_Request::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CFileVerification_SignatureCheck_Request::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CFileVerification_SignatureCheck_Request::release_filename() {
  // @@protoc_insertion_point(field_release:CFileVerification_SignatureCheck_Request.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CFileVerification_SignatureCheck_Request::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CFileVerification_SignatureCheck_Request.filename)
}

// optional uint32 client_package_version = 8;
inline bool CFileVerification_SignatureCheck_Request::_internal_has_client_package_version() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CFileVerification_SignatureCheck_Request::has_client_package_version() const {
  return _internal_has_client_package_version();
}
inline void CFileVerification_SignatureCheck_Request::clear_client_package_version() {
  client_package_version_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CFileVerification_SignatureCheck_Request::_internal_client_package_version() const {
  return client_package_version_;
}
inline uint32_t CFileVerification_SignatureCheck_Request::client_package_version() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureCheck_Request.client_package_version)
  return _internal_client_package_version();
}
inline void CFileVerification_SignatureCheck_Request::_internal_set_client_package_version(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  client_package_version_ = value;
}
inline void CFileVerification_SignatureCheck_Request::set_client_package_version(uint32_t value) {
  _internal_set_client_package_version(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureCheck_Request.client_package_version)
}

// optional bytes sha1hash = 9;
inline bool CFileVerification_SignatureCheck_Request::_internal_has_sha1hash() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFileVerification_SignatureCheck_Request::has_sha1hash() const {
  return _internal_has_sha1hash();
}
inline void CFileVerification_SignatureCheck_Request::clear_sha1hash() {
  sha1hash_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CFileVerification_SignatureCheck_Request::sha1hash() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureCheck_Request.sha1hash)
  return _internal_sha1hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CFileVerification_SignatureCheck_Request::set_sha1hash(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 sha1hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureCheck_Request.sha1hash)
}
inline std::string* CFileVerification_SignatureCheck_Request::mutable_sha1hash() {
  std::string* _s = _internal_mutable_sha1hash();
  // @@protoc_insertion_point(field_mutable:CFileVerification_SignatureCheck_Request.sha1hash)
  return _s;
}
inline const std::string& CFileVerification_SignatureCheck_Request::_internal_sha1hash() const {
  return sha1hash_.Get();
}
inline void CFileVerification_SignatureCheck_Request::_internal_set_sha1hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sha1hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CFileVerification_SignatureCheck_Request::_internal_mutable_sha1hash() {
  _has_bits_[0] |= 0x00000002u;
  return sha1hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CFileVerification_SignatureCheck_Request::release_sha1hash() {
  // @@protoc_insertion_point(field_release:CFileVerification_SignatureCheck_Request.sha1hash)
  if (!_internal_has_sha1hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = sha1hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha1hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha1hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CFileVerification_SignatureCheck_Request::set_allocated_sha1hash(std::string* sha1hash) {
  if (sha1hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sha1hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha1hash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha1hash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha1hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CFileVerification_SignatureCheck_Request.sha1hash)
}

// -------------------------------------------------------------------

// CFileVerification_SignatureCheck_Response

// optional bool deny_operation = 1;
inline bool CFileVerification_SignatureCheck_Response::_internal_has_deny_operation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFileVerification_SignatureCheck_Response::has_deny_operation() const {
  return _internal_has_deny_operation();
}
inline void CFileVerification_SignatureCheck_Response::clear_deny_operation() {
  deny_operation_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CFileVerification_SignatureCheck_Response::_internal_deny_operation() const {
  return deny_operation_;
}
inline bool CFileVerification_SignatureCheck_Response::deny_operation() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SignatureCheck_Response.deny_operation)
  return _internal_deny_operation();
}
inline void CFileVerification_SignatureCheck_Response::_internal_set_deny_operation(bool value) {
  _has_bits_[0] |= 0x00000001u;
  deny_operation_ = value;
}
inline void CFileVerification_SignatureCheck_Response::set_deny_operation(bool value) {
  _internal_set_deny_operation(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SignatureCheck_Response.deny_operation)
}

// -------------------------------------------------------------------

// CFileVerification_SteamServiceCheck_Request

// optional uint32 service_status = 2;
inline bool CFileVerification_SteamServiceCheck_Request::_internal_has_service_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFileVerification_SteamServiceCheck_Request::has_service_status() const {
  return _internal_has_service_status();
}
inline void CFileVerification_SteamServiceCheck_Request::clear_service_status() {
  service_status_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CFileVerification_SteamServiceCheck_Request::_internal_service_status() const {
  return service_status_;
}
inline uint32_t CFileVerification_SteamServiceCheck_Request::service_status() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SteamServiceCheck_Request.service_status)
  return _internal_service_status();
}
inline void CFileVerification_SteamServiceCheck_Request::_internal_set_service_status(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  service_status_ = value;
}
inline void CFileVerification_SteamServiceCheck_Request::set_service_status(uint32_t value) {
  _internal_set_service_status(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SteamServiceCheck_Request.service_status)
}

// optional uint32 client_package_version = 3;
inline bool CFileVerification_SteamServiceCheck_Request::_internal_has_client_package_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CFileVerification_SteamServiceCheck_Request::has_client_package_version() const {
  return _internal_has_client_package_version();
}
inline void CFileVerification_SteamServiceCheck_Request::clear_client_package_version() {
  client_package_version_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CFileVerification_SteamServiceCheck_Request::_internal_client_package_version() const {
  return client_package_version_;
}
inline uint32_t CFileVerification_SteamServiceCheck_Request::client_package_version() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SteamServiceCheck_Request.client_package_version)
  return _internal_client_package_version();
}
inline void CFileVerification_SteamServiceCheck_Request::_internal_set_client_package_version(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  client_package_version_ = value;
}
inline void CFileVerification_SteamServiceCheck_Request::set_client_package_version(uint32_t value) {
  _internal_set_client_package_version(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SteamServiceCheck_Request.client_package_version)
}

// optional uint32 launcher_type = 4;
inline bool CFileVerification_SteamServiceCheck_Request::_internal_has_launcher_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CFileVerification_SteamServiceCheck_Request::has_launcher_type() const {
  return _internal_has_launcher_type();
}
inline void CFileVerification_SteamServiceCheck_Request::clear_launcher_type() {
  launcher_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CFileVerification_SteamServiceCheck_Request::_internal_launcher_type() const {
  return launcher_type_;
}
inline uint32_t CFileVerification_SteamServiceCheck_Request::launcher_type() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SteamServiceCheck_Request.launcher_type)
  return _internal_launcher_type();
}
inline void CFileVerification_SteamServiceCheck_Request::_internal_set_launcher_type(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  launcher_type_ = value;
}
inline void CFileVerification_SteamServiceCheck_Request::set_launcher_type(uint32_t value) {
  _internal_set_launcher_type(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SteamServiceCheck_Request.launcher_type)
}

// optional uint32 os_type = 5;
inline bool CFileVerification_SteamServiceCheck_Request::_internal_has_os_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CFileVerification_SteamServiceCheck_Request::has_os_type() const {
  return _internal_has_os_type();
}
inline void CFileVerification_SteamServiceCheck_Request::clear_os_type() {
  os_type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CFileVerification_SteamServiceCheck_Request::_internal_os_type() const {
  return os_type_;
}
inline uint32_t CFileVerification_SteamServiceCheck_Request::os_type() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SteamServiceCheck_Request.os_type)
  return _internal_os_type();
}
inline void CFileVerification_SteamServiceCheck_Request::_internal_set_os_type(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  os_type_ = value;
}
inline void CFileVerification_SteamServiceCheck_Request::set_os_type(uint32_t value) {
  _internal_set_os_type(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SteamServiceCheck_Request.os_type)
}

// optional uint32 service_repair = 6;
inline bool CFileVerification_SteamServiceCheck_Request::_internal_has_service_repair() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CFileVerification_SteamServiceCheck_Request::has_service_repair() const {
  return _internal_has_service_repair();
}
inline void CFileVerification_SteamServiceCheck_Request::clear_service_repair() {
  service_repair_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CFileVerification_SteamServiceCheck_Request::_internal_service_repair() const {
  return service_repair_;
}
inline uint32_t CFileVerification_SteamServiceCheck_Request::service_repair() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SteamServiceCheck_Request.service_repair)
  return _internal_service_repair();
}
inline void CFileVerification_SteamServiceCheck_Request::_internal_set_service_repair(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  service_repair_ = value;
}
inline void CFileVerification_SteamServiceCheck_Request::set_service_repair(uint32_t value) {
  _internal_set_service_repair(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SteamServiceCheck_Request.service_repair)
}

// -------------------------------------------------------------------

// CFileVerification_SteamServiceCheck_Response

// optional bool attempt_repair = 1;
inline bool CFileVerification_SteamServiceCheck_Response::_internal_has_attempt_repair() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFileVerification_SteamServiceCheck_Response::has_attempt_repair() const {
  return _internal_has_attempt_repair();
}
inline void CFileVerification_SteamServiceCheck_Response::clear_attempt_repair() {
  attempt_repair_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CFileVerification_SteamServiceCheck_Response::_internal_attempt_repair() const {
  return attempt_repair_;
}
inline bool CFileVerification_SteamServiceCheck_Response::attempt_repair() const {
  // @@protoc_insertion_point(field_get:CFileVerification_SteamServiceCheck_Response.attempt_repair)
  return _internal_attempt_repair();
}
inline void CFileVerification_SteamServiceCheck_Response::_internal_set_attempt_repair(bool value) {
  _has_bits_[0] |= 0x00000001u;
  attempt_repair_ = value;
}
inline void CFileVerification_SteamServiceCheck_Response::set_attempt_repair(bool value) {
  _internal_set_attempt_repair(value);
  // @@protoc_insertion_point(field_set:CFileVerification_SteamServiceCheck_Response.attempt_repair)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fvac_2esteamclient_2eproto
