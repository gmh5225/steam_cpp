// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_datapublisher.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fdatapublisher_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fdatapublisher_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fdatapublisher_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fdatapublisher_2esteamclient_2eproto;
class CDataPublisher_AddVRDeviceInfo_Request;
struct CDataPublisher_AddVRDeviceInfo_RequestDefaultTypeInternal;
extern CDataPublisher_AddVRDeviceInfo_RequestDefaultTypeInternal _CDataPublisher_AddVRDeviceInfo_Request_default_instance_;
class CDataPublisher_AddVRDeviceInfo_Response;
struct CDataPublisher_AddVRDeviceInfo_ResponseDefaultTypeInternal;
extern CDataPublisher_AddVRDeviceInfo_ResponseDefaultTypeInternal _CDataPublisher_AddVRDeviceInfo_Response_default_instance_;
class CDataPublisher_ClientContentCorruptionReport_Notification;
struct CDataPublisher_ClientContentCorruptionReport_NotificationDefaultTypeInternal;
extern CDataPublisher_ClientContentCorruptionReport_NotificationDefaultTypeInternal _CDataPublisher_ClientContentCorruptionReport_Notification_default_instance_;
class CDataPublisher_ClientUpdateAppJob_Notification;
struct CDataPublisher_ClientUpdateAppJob_NotificationDefaultTypeInternal;
extern CDataPublisher_ClientUpdateAppJob_NotificationDefaultTypeInternal _CDataPublisher_ClientUpdateAppJob_Notification_default_instance_;
class CDataPublisher_GetVRDeviceInfo_Request;
struct CDataPublisher_GetVRDeviceInfo_RequestDefaultTypeInternal;
extern CDataPublisher_GetVRDeviceInfo_RequestDefaultTypeInternal _CDataPublisher_GetVRDeviceInfo_Request_default_instance_;
class CDataPublisher_GetVRDeviceInfo_Response;
struct CDataPublisher_GetVRDeviceInfo_ResponseDefaultTypeInternal;
extern CDataPublisher_GetVRDeviceInfo_ResponseDefaultTypeInternal _CDataPublisher_GetVRDeviceInfo_Response_default_instance_;
class CDataPublisher_GetVRDeviceInfo_Response_Device;
struct CDataPublisher_GetVRDeviceInfo_Response_DeviceDefaultTypeInternal;
extern CDataPublisher_GetVRDeviceInfo_Response_DeviceDefaultTypeInternal _CDataPublisher_GetVRDeviceInfo_Response_Device_default_instance_;
class CDataPublisher_SetVRDeviceInfoAggregationReference_Request;
struct CDataPublisher_SetVRDeviceInfoAggregationReference_RequestDefaultTypeInternal;
extern CDataPublisher_SetVRDeviceInfoAggregationReference_RequestDefaultTypeInternal _CDataPublisher_SetVRDeviceInfoAggregationReference_Request_default_instance_;
class CDataPublisher_SetVRDeviceInfoAggregationReference_Response;
struct CDataPublisher_SetVRDeviceInfoAggregationReference_ResponseDefaultTypeInternal;
extern CDataPublisher_SetVRDeviceInfoAggregationReference_ResponseDefaultTypeInternal _CDataPublisher_SetVRDeviceInfoAggregationReference_Response_default_instance_;
class CValveHWSurvey_GetSurveySchedule_Request;
struct CValveHWSurvey_GetSurveySchedule_RequestDefaultTypeInternal;
extern CValveHWSurvey_GetSurveySchedule_RequestDefaultTypeInternal _CValveHWSurvey_GetSurveySchedule_Request_default_instance_;
class CValveHWSurvey_GetSurveySchedule_Response;
struct CValveHWSurvey_GetSurveySchedule_ResponseDefaultTypeInternal;
extern CValveHWSurvey_GetSurveySchedule_ResponseDefaultTypeInternal _CValveHWSurvey_GetSurveySchedule_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CDataPublisher_AddVRDeviceInfo_Request* Arena::CreateMaybeMessage<::CDataPublisher_AddVRDeviceInfo_Request>(Arena*);
template<> ::CDataPublisher_AddVRDeviceInfo_Response* Arena::CreateMaybeMessage<::CDataPublisher_AddVRDeviceInfo_Response>(Arena*);
template<> ::CDataPublisher_ClientContentCorruptionReport_Notification* Arena::CreateMaybeMessage<::CDataPublisher_ClientContentCorruptionReport_Notification>(Arena*);
template<> ::CDataPublisher_ClientUpdateAppJob_Notification* Arena::CreateMaybeMessage<::CDataPublisher_ClientUpdateAppJob_Notification>(Arena*);
template<> ::CDataPublisher_GetVRDeviceInfo_Request* Arena::CreateMaybeMessage<::CDataPublisher_GetVRDeviceInfo_Request>(Arena*);
template<> ::CDataPublisher_GetVRDeviceInfo_Response* Arena::CreateMaybeMessage<::CDataPublisher_GetVRDeviceInfo_Response>(Arena*);
template<> ::CDataPublisher_GetVRDeviceInfo_Response_Device* Arena::CreateMaybeMessage<::CDataPublisher_GetVRDeviceInfo_Response_Device>(Arena*);
template<> ::CDataPublisher_SetVRDeviceInfoAggregationReference_Request* Arena::CreateMaybeMessage<::CDataPublisher_SetVRDeviceInfoAggregationReference_Request>(Arena*);
template<> ::CDataPublisher_SetVRDeviceInfoAggregationReference_Response* Arena::CreateMaybeMessage<::CDataPublisher_SetVRDeviceInfoAggregationReference_Response>(Arena*);
template<> ::CValveHWSurvey_GetSurveySchedule_Request* Arena::CreateMaybeMessage<::CValveHWSurvey_GetSurveySchedule_Request>(Arena*);
template<> ::CValveHWSurvey_GetSurveySchedule_Response* Arena::CreateMaybeMessage<::CValveHWSurvey_GetSurveySchedule_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CDataPublisher_ClientContentCorruptionReport_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataPublisher_ClientContentCorruptionReport_Notification) */ {
 public:
  inline CDataPublisher_ClientContentCorruptionReport_Notification() : CDataPublisher_ClientContentCorruptionReport_Notification(nullptr) {}
  ~CDataPublisher_ClientContentCorruptionReport_Notification() override;
  explicit constexpr CDataPublisher_ClientContentCorruptionReport_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataPublisher_ClientContentCorruptionReport_Notification(const CDataPublisher_ClientContentCorruptionReport_Notification& from);
  CDataPublisher_ClientContentCorruptionReport_Notification(CDataPublisher_ClientContentCorruptionReport_Notification&& from) noexcept
    : CDataPublisher_ClientContentCorruptionReport_Notification() {
    *this = ::std::move(from);
  }

  inline CDataPublisher_ClientContentCorruptionReport_Notification& operator=(const CDataPublisher_ClientContentCorruptionReport_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataPublisher_ClientContentCorruptionReport_Notification& operator=(CDataPublisher_ClientContentCorruptionReport_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataPublisher_ClientContentCorruptionReport_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataPublisher_ClientContentCorruptionReport_Notification* internal_default_instance() {
    return reinterpret_cast<const CDataPublisher_ClientContentCorruptionReport_Notification*>(
               &_CDataPublisher_ClientContentCorruptionReport_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CDataPublisher_ClientContentCorruptionReport_Notification& a, CDataPublisher_ClientContentCorruptionReport_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataPublisher_ClientContentCorruptionReport_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataPublisher_ClientContentCorruptionReport_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDataPublisher_ClientContentCorruptionReport_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDataPublisher_ClientContentCorruptionReport_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataPublisher_ClientContentCorruptionReport_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataPublisher_ClientContentCorruptionReport_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataPublisher_ClientContentCorruptionReport_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataPublisher_ClientContentCorruptionReport_Notification";
  }
  protected:
  explicit CDataPublisher_ClientContentCorruptionReport_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDownloadSourceFieldNumber = 3,
    kObjectidFieldNumber = 4,
    kAppidFieldNumber = 1,
    kDepotidFieldNumber = 2,
    kCellidFieldNumber = 5,
    kCorruptionTypeFieldNumber = 8,
    kObjectSizeFieldNumber = 7,
    kIsManifestFieldNumber = 6,
    kUsedHttpsFieldNumber = 9,
    kOcProxyDetectedFieldNumber = 10,
  };
  // optional string download_source = 3 [(.description) = "host name of download source"];
  bool has_download_source() const;
  private:
  bool _internal_has_download_source() const;
  public:
  void clear_download_source();
  const std::string& download_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_download_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_download_source();
  PROTOBUF_NODISCARD std::string* release_download_source();
  void set_allocated_download_source(std::string* download_source);
  private:
  const std::string& _internal_download_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_download_source(const std::string& value);
  std::string* _internal_mutable_download_source();
  public:

  // optional string objectid = 4 [(.description) = "Chunk SHA or Manifest ID"];
  bool has_objectid() const;
  private:
  bool _internal_has_objectid() const;
  public:
  void clear_objectid();
  const std::string& objectid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_objectid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_objectid();
  PROTOBUF_NODISCARD std::string* release_objectid();
  void set_allocated_objectid(std::string* objectid);
  private:
  const std::string& _internal_objectid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_objectid(const std::string& value);
  std::string* _internal_mutable_objectid();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 depotid = 2;
  bool has_depotid() const;
  private:
  bool _internal_has_depotid() const;
  public:
  void clear_depotid();
  uint32_t depotid() const;
  void set_depotid(uint32_t value);
  private:
  uint32_t _internal_depotid() const;
  void _internal_set_depotid(uint32_t value);
  public:

  // optional uint32 cellid = 5 [(.description) = "Client Cell ID"];
  bool has_cellid() const;
  private:
  bool _internal_has_cellid() const;
  public:
  void clear_cellid();
  uint32_t cellid() const;
  void set_cellid(uint32_t value);
  private:
  uint32_t _internal_cellid() const;
  void _internal_set_cellid(uint32_t value);
  public:

  // optional uint32 corruption_type = 8 [(.description) = "See EContentCorruptionType"];
  bool has_corruption_type() const;
  private:
  bool _internal_has_corruption_type() const;
  public:
  void clear_corruption_type();
  uint32_t corruption_type() const;
  void set_corruption_type(uint32_t value);
  private:
  uint32_t _internal_corruption_type() const;
  void _internal_set_corruption_type(uint32_t value);
  public:

  // optional uint64 object_size = 7 [(.description) = "object size in bytes"];
  bool has_object_size() const;
  private:
  bool _internal_has_object_size() const;
  public:
  void clear_object_size();
  uint64_t object_size() const;
  void set_object_size(uint64_t value);
  private:
  uint64_t _internal_object_size() const;
  void _internal_set_object_size(uint64_t value);
  public:

  // optional bool is_manifest = 6 [(.description) = "The object is a manifest, not a chunk"];
  bool has_is_manifest() const;
  private:
  bool _internal_has_is_manifest() const;
  public:
  void clear_is_manifest();
  bool is_manifest() const;
  void set_is_manifest(bool value);
  private:
  bool _internal_is_manifest() const;
  void _internal_set_is_manifest(bool value);
  public:

  // optional bool used_https = 9 [(.description) = "the request was HTTPS"];
  bool has_used_https() const;
  private:
  bool _internal_has_used_https() const;
  public:
  void clear_used_https();
  bool used_https() const;
  void set_used_https(bool value);
  private:
  bool _internal_used_https() const;
  void _internal_set_used_https(bool value);
  public:

  // optional bool oc_proxy_detected = 10 [(.description) = "detected an OpenCache proxy"];
  bool has_oc_proxy_detected() const;
  private:
  bool _internal_has_oc_proxy_detected() const;
  public:
  void clear_oc_proxy_detected();
  bool oc_proxy_detected() const;
  void set_oc_proxy_detected(bool value);
  private:
  bool _internal_oc_proxy_detected() const;
  void _internal_set_oc_proxy_detected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDataPublisher_ClientContentCorruptionReport_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr download_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectid_;
  uint32_t appid_;
  uint32_t depotid_;
  uint32_t cellid_;
  uint32_t corruption_type_;
  uint64_t object_size_;
  bool is_manifest_;
  bool used_https_;
  bool oc_proxy_detected_;
  friend struct ::TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDataPublisher_ClientUpdateAppJob_Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataPublisher_ClientUpdateAppJob_Notification) */ {
 public:
  inline CDataPublisher_ClientUpdateAppJob_Notification() : CDataPublisher_ClientUpdateAppJob_Notification(nullptr) {}
  ~CDataPublisher_ClientUpdateAppJob_Notification() override;
  explicit constexpr CDataPublisher_ClientUpdateAppJob_Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataPublisher_ClientUpdateAppJob_Notification(const CDataPublisher_ClientUpdateAppJob_Notification& from);
  CDataPublisher_ClientUpdateAppJob_Notification(CDataPublisher_ClientUpdateAppJob_Notification&& from) noexcept
    : CDataPublisher_ClientUpdateAppJob_Notification() {
    *this = ::std::move(from);
  }

  inline CDataPublisher_ClientUpdateAppJob_Notification& operator=(const CDataPublisher_ClientUpdateAppJob_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataPublisher_ClientUpdateAppJob_Notification& operator=(CDataPublisher_ClientUpdateAppJob_Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataPublisher_ClientUpdateAppJob_Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataPublisher_ClientUpdateAppJob_Notification* internal_default_instance() {
    return reinterpret_cast<const CDataPublisher_ClientUpdateAppJob_Notification*>(
               &_CDataPublisher_ClientUpdateAppJob_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CDataPublisher_ClientUpdateAppJob_Notification& a, CDataPublisher_ClientUpdateAppJob_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataPublisher_ClientUpdateAppJob_Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataPublisher_ClientUpdateAppJob_Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDataPublisher_ClientUpdateAppJob_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDataPublisher_ClientUpdateAppJob_Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataPublisher_ClientUpdateAppJob_Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataPublisher_ClientUpdateAppJob_Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataPublisher_ClientUpdateAppJob_Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataPublisher_ClientUpdateAppJob_Notification";
  }
  protected:
  explicit CDataPublisher_ClientUpdateAppJob_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepotIdsFieldNumber = 2,
    kErrorDetailsFieldNumber = 5,
    kBranchNameFieldNumber = 13,
    kAppIdFieldNumber = 1,
    kAppStateFieldNumber = 3,
    kJobAppErrorFieldNumber = 4,
    kJobDurationFieldNumber = 6,
    kJobBytesDownloadedFieldNumber = 8,
    kJobBytesStagedFieldNumber = 9,
    kFilesValidationFailedFieldNumber = 7,
    kStartAppStateFieldNumber = 11,
    kBytesComittedFieldNumber = 10,
    kStatsMachineIdFieldNumber = 12,
    kTotalBytesDownloadedFieldNumber = 14,
    kTotalBytesStagedFieldNumber = 15,
    kTotalBytesRestoredFieldNumber = 16,
    kIsBorrowedFieldNumber = 17,
    kIsFreeWeekendFieldNumber = 18,
    kCellIdFieldNumber = 22,
    kTotalBytesPatchedFieldNumber = 20,
    kTotalBytesSavedFieldNumber = 21,
  };
  // repeated uint32 depot_ids = 2;
  int depot_ids_size() const;
  private:
  int _internal_depot_ids_size() const;
  public:
  void clear_depot_ids();
  private:
  uint32_t _internal_depot_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_depot_ids() const;
  void _internal_add_depot_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_depot_ids();
  public:
  uint32_t depot_ids(int index) const;
  void set_depot_ids(int index, uint32_t value);
  void add_depot_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      depot_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_depot_ids();

  // optional string error_details = 5;
  bool has_error_details() const;
  private:
  bool _internal_has_error_details() const;
  public:
  void clear_error_details();
  const std::string& error_details() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_details(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_details();
  PROTOBUF_NODISCARD std::string* release_error_details();
  void set_allocated_error_details(std::string* error_details);
  private:
  const std::string& _internal_error_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_details(const std::string& value);
  std::string* _internal_mutable_error_details();
  public:

  // optional string branch_name = 13;
  bool has_branch_name() const;
  private:
  bool _internal_has_branch_name() const;
  public:
  void clear_branch_name();
  const std::string& branch_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_branch_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_branch_name();
  PROTOBUF_NODISCARD std::string* release_branch_name();
  void set_allocated_branch_name(std::string* branch_name);
  private:
  const std::string& _internal_branch_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_branch_name(const std::string& value);
  std::string* _internal_mutable_branch_name();
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 app_state = 3;
  bool has_app_state() const;
  private:
  bool _internal_has_app_state() const;
  public:
  void clear_app_state();
  uint32_t app_state() const;
  void set_app_state(uint32_t value);
  private:
  uint32_t _internal_app_state() const;
  void _internal_set_app_state(uint32_t value);
  public:

  // optional uint32 job_app_error = 4;
  bool has_job_app_error() const;
  private:
  bool _internal_has_job_app_error() const;
  public:
  void clear_job_app_error();
  uint32_t job_app_error() const;
  void set_job_app_error(uint32_t value);
  private:
  uint32_t _internal_job_app_error() const;
  void _internal_set_job_app_error(uint32_t value);
  public:

  // optional uint32 job_duration = 6;
  bool has_job_duration() const;
  private:
  bool _internal_has_job_duration() const;
  public:
  void clear_job_duration();
  uint32_t job_duration() const;
  void set_job_duration(uint32_t value);
  private:
  uint32_t _internal_job_duration() const;
  void _internal_set_job_duration(uint32_t value);
  public:

  // optional uint64 job_bytes_downloaded = 8;
  bool has_job_bytes_downloaded() const;
  private:
  bool _internal_has_job_bytes_downloaded() const;
  public:
  void clear_job_bytes_downloaded();
  uint64_t job_bytes_downloaded() const;
  void set_job_bytes_downloaded(uint64_t value);
  private:
  uint64_t _internal_job_bytes_downloaded() const;
  void _internal_set_job_bytes_downloaded(uint64_t value);
  public:

  // optional uint64 job_bytes_staged = 9;
  bool has_job_bytes_staged() const;
  private:
  bool _internal_has_job_bytes_staged() const;
  public:
  void clear_job_bytes_staged();
  uint64_t job_bytes_staged() const;
  void set_job_bytes_staged(uint64_t value);
  private:
  uint64_t _internal_job_bytes_staged() const;
  void _internal_set_job_bytes_staged(uint64_t value);
  public:

  // optional uint32 files_validation_failed = 7;
  bool has_files_validation_failed() const;
  private:
  bool _internal_has_files_validation_failed() const;
  public:
  void clear_files_validation_failed();
  uint32_t files_validation_failed() const;
  void set_files_validation_failed(uint32_t value);
  private:
  uint32_t _internal_files_validation_failed() const;
  void _internal_set_files_validation_failed(uint32_t value);
  public:

  // optional uint32 start_app_state = 11;
  bool has_start_app_state() const;
  private:
  bool _internal_has_start_app_state() const;
  public:
  void clear_start_app_state();
  uint32_t start_app_state() const;
  void set_start_app_state(uint32_t value);
  private:
  uint32_t _internal_start_app_state() const;
  void _internal_set_start_app_state(uint32_t value);
  public:

  // optional uint64 bytes_comitted = 10;
  bool has_bytes_comitted() const;
  private:
  bool _internal_has_bytes_comitted() const;
  public:
  void clear_bytes_comitted();
  uint64_t bytes_comitted() const;
  void set_bytes_comitted(uint64_t value);
  private:
  uint64_t _internal_bytes_comitted() const;
  void _internal_set_bytes_comitted(uint64_t value);
  public:

  // optional fixed64 stats_machine_id = 12;
  bool has_stats_machine_id() const;
  private:
  bool _internal_has_stats_machine_id() const;
  public:
  void clear_stats_machine_id();
  uint64_t stats_machine_id() const;
  void set_stats_machine_id(uint64_t value);
  private:
  uint64_t _internal_stats_machine_id() const;
  void _internal_set_stats_machine_id(uint64_t value);
  public:

  // optional uint64 total_bytes_downloaded = 14;
  bool has_total_bytes_downloaded() const;
  private:
  bool _internal_has_total_bytes_downloaded() const;
  public:
  void clear_total_bytes_downloaded();
  uint64_t total_bytes_downloaded() const;
  void set_total_bytes_downloaded(uint64_t value);
  private:
  uint64_t _internal_total_bytes_downloaded() const;
  void _internal_set_total_bytes_downloaded(uint64_t value);
  public:

  // optional uint64 total_bytes_staged = 15;
  bool has_total_bytes_staged() const;
  private:
  bool _internal_has_total_bytes_staged() const;
  public:
  void clear_total_bytes_staged();
  uint64_t total_bytes_staged() const;
  void set_total_bytes_staged(uint64_t value);
  private:
  uint64_t _internal_total_bytes_staged() const;
  void _internal_set_total_bytes_staged(uint64_t value);
  public:

  // optional uint64 total_bytes_restored = 16;
  bool has_total_bytes_restored() const;
  private:
  bool _internal_has_total_bytes_restored() const;
  public:
  void clear_total_bytes_restored();
  uint64_t total_bytes_restored() const;
  void set_total_bytes_restored(uint64_t value);
  private:
  uint64_t _internal_total_bytes_restored() const;
  void _internal_set_total_bytes_restored(uint64_t value);
  public:

  // optional bool is_borrowed = 17;
  bool has_is_borrowed() const;
  private:
  bool _internal_has_is_borrowed() const;
  public:
  void clear_is_borrowed();
  bool is_borrowed() const;
  void set_is_borrowed(bool value);
  private:
  bool _internal_is_borrowed() const;
  void _internal_set_is_borrowed(bool value);
  public:

  // optional bool is_free_weekend = 18;
  bool has_is_free_weekend() const;
  private:
  bool _internal_has_is_free_weekend() const;
  public:
  void clear_is_free_weekend();
  bool is_free_weekend() const;
  void set_is_free_weekend(bool value);
  private:
  bool _internal_is_free_weekend() const;
  void _internal_set_is_free_weekend(bool value);
  public:

  // optional uint32 cell_id = 22;
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  uint32_t cell_id() const;
  void set_cell_id(uint32_t value);
  private:
  uint32_t _internal_cell_id() const;
  void _internal_set_cell_id(uint32_t value);
  public:

  // optional uint64 total_bytes_patched = 20;
  bool has_total_bytes_patched() const;
  private:
  bool _internal_has_total_bytes_patched() const;
  public:
  void clear_total_bytes_patched();
  uint64_t total_bytes_patched() const;
  void set_total_bytes_patched(uint64_t value);
  private:
  uint64_t _internal_total_bytes_patched() const;
  void _internal_set_total_bytes_patched(uint64_t value);
  public:

  // optional uint64 total_bytes_saved = 21;
  bool has_total_bytes_saved() const;
  private:
  bool _internal_has_total_bytes_saved() const;
  public:
  void clear_total_bytes_saved();
  uint64_t total_bytes_saved() const;
  void set_total_bytes_saved(uint64_t value);
  private:
  uint64_t _internal_total_bytes_saved() const;
  void _internal_set_total_bytes_saved(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDataPublisher_ClientUpdateAppJob_Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > depot_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_details_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr branch_name_;
  uint32_t app_id_;
  uint32_t app_state_;
  uint32_t job_app_error_;
  uint32_t job_duration_;
  uint64_t job_bytes_downloaded_;
  uint64_t job_bytes_staged_;
  uint32_t files_validation_failed_;
  uint32_t start_app_state_;
  uint64_t bytes_comitted_;
  uint64_t stats_machine_id_;
  uint64_t total_bytes_downloaded_;
  uint64_t total_bytes_staged_;
  uint64_t total_bytes_restored_;
  bool is_borrowed_;
  bool is_free_weekend_;
  uint32_t cell_id_;
  uint64_t total_bytes_patched_;
  uint64_t total_bytes_saved_;
  friend struct ::TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDataPublisher_GetVRDeviceInfo_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataPublisher_GetVRDeviceInfo_Request) */ {
 public:
  inline CDataPublisher_GetVRDeviceInfo_Request() : CDataPublisher_GetVRDeviceInfo_Request(nullptr) {}
  ~CDataPublisher_GetVRDeviceInfo_Request() override;
  explicit constexpr CDataPublisher_GetVRDeviceInfo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataPublisher_GetVRDeviceInfo_Request(const CDataPublisher_GetVRDeviceInfo_Request& from);
  CDataPublisher_GetVRDeviceInfo_Request(CDataPublisher_GetVRDeviceInfo_Request&& from) noexcept
    : CDataPublisher_GetVRDeviceInfo_Request() {
    *this = ::std::move(from);
  }

  inline CDataPublisher_GetVRDeviceInfo_Request& operator=(const CDataPublisher_GetVRDeviceInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataPublisher_GetVRDeviceInfo_Request& operator=(CDataPublisher_GetVRDeviceInfo_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataPublisher_GetVRDeviceInfo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataPublisher_GetVRDeviceInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CDataPublisher_GetVRDeviceInfo_Request*>(
               &_CDataPublisher_GetVRDeviceInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CDataPublisher_GetVRDeviceInfo_Request& a, CDataPublisher_GetVRDeviceInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataPublisher_GetVRDeviceInfo_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataPublisher_GetVRDeviceInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDataPublisher_GetVRDeviceInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDataPublisher_GetVRDeviceInfo_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataPublisher_GetVRDeviceInfo_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataPublisher_GetVRDeviceInfo_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataPublisher_GetVRDeviceInfo_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataPublisher_GetVRDeviceInfo_Request";
  }
  protected:
  explicit CDataPublisher_GetVRDeviceInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonthCountFieldNumber = 1,
  };
  // optional uint32 month_count = 1 [(.description) = "Number of months for which to generate a report"];
  bool has_month_count() const;
  private:
  bool _internal_has_month_count() const;
  public:
  void clear_month_count();
  uint32_t month_count() const;
  void set_month_count(uint32_t value);
  private:
  uint32_t _internal_month_count() const;
  void _internal_set_month_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDataPublisher_GetVRDeviceInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t month_count_;
  friend struct ::TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDataPublisher_GetVRDeviceInfo_Response_Device final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataPublisher_GetVRDeviceInfo_Response.Device) */ {
 public:
  inline CDataPublisher_GetVRDeviceInfo_Response_Device() : CDataPublisher_GetVRDeviceInfo_Response_Device(nullptr) {}
  ~CDataPublisher_GetVRDeviceInfo_Response_Device() override;
  explicit constexpr CDataPublisher_GetVRDeviceInfo_Response_Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataPublisher_GetVRDeviceInfo_Response_Device(const CDataPublisher_GetVRDeviceInfo_Response_Device& from);
  CDataPublisher_GetVRDeviceInfo_Response_Device(CDataPublisher_GetVRDeviceInfo_Response_Device&& from) noexcept
    : CDataPublisher_GetVRDeviceInfo_Response_Device() {
    *this = ::std::move(from);
  }

  inline CDataPublisher_GetVRDeviceInfo_Response_Device& operator=(const CDataPublisher_GetVRDeviceInfo_Response_Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataPublisher_GetVRDeviceInfo_Response_Device& operator=(CDataPublisher_GetVRDeviceInfo_Response_Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataPublisher_GetVRDeviceInfo_Response_Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataPublisher_GetVRDeviceInfo_Response_Device* internal_default_instance() {
    return reinterpret_cast<const CDataPublisher_GetVRDeviceInfo_Response_Device*>(
               &_CDataPublisher_GetVRDeviceInfo_Response_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CDataPublisher_GetVRDeviceInfo_Response_Device& a, CDataPublisher_GetVRDeviceInfo_Response_Device& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataPublisher_GetVRDeviceInfo_Response_Device* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataPublisher_GetVRDeviceInfo_Response_Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDataPublisher_GetVRDeviceInfo_Response_Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDataPublisher_GetVRDeviceInfo_Response_Device>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataPublisher_GetVRDeviceInfo_Response_Device& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataPublisher_GetVRDeviceInfo_Response_Device& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataPublisher_GetVRDeviceInfo_Response_Device* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataPublisher_GetVRDeviceInfo_Response.Device";
  }
  protected:
  explicit CDataPublisher_GetVRDeviceInfo_Response_Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDriverFieldNumber = 5,
    kRefFieldNumber = 2,
    kAggregationRefFieldNumber = 3,
    kTotalFieldNumber = 4,
    kDeviceClassFieldNumber = 6,
  };
  // optional string name = 1 [(.description) = "Name to show for this device"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string driver = 5 [(.description) = "driver name reported by the user"];
  bool has_driver() const;
  private:
  bool _internal_has_driver() const;
  public:
  void clear_driver();
  const std::string& driver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_driver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_driver();
  PROTOBUF_NODISCARD std::string* release_driver();
  void set_allocated_driver(std::string* driver);
  private:
  const std::string& _internal_driver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver(const std::string& value);
  std::string* _internal_mutable_driver();
  public:

  // optional uint32 ref = 2 [(.description) = "Reference number for this device"];
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  uint32_t ref() const;
  void set_ref(uint32_t value);
  private:
  uint32_t _internal_ref() const;
  void _internal_set_ref(uint32_t value);
  public:

  // optional uint32 aggregation_ref = 3 [(.description) = "Reference number to aggregate this device under"];
  bool has_aggregation_ref() const;
  private:
  bool _internal_has_aggregation_ref() const;
  public:
  void clear_aggregation_ref();
  uint32_t aggregation_ref() const;
  void set_aggregation_ref(uint32_t value);
  private:
  uint32_t _internal_aggregation_ref() const;
  void _internal_set_aggregation_ref(uint32_t value);
  public:

  // optional uint32 total = 4 [(.description) = "Sum of all the counts"];
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  uint32_t total() const;
  void set_total(uint32_t value);
  private:
  uint32_t _internal_total() const;
  void _internal_set_total(uint32_t value);
  public:

  // optional int32 device_class = 6 [(.description) = "Class of the device. HMD=1, controller=2, tracker=3, base=4"];
  bool has_device_class() const;
  private:
  bool _internal_has_device_class() const;
  public:
  void clear_device_class();
  int32_t device_class() const;
  void set_device_class(int32_t value);
  private:
  int32_t _internal_device_class() const;
  void _internal_set_device_class(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDataPublisher_GetVRDeviceInfo_Response.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
  uint32_t ref_;
  uint32_t aggregation_ref_;
  uint32_t total_;
  int32_t device_class_;
  friend struct ::TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDataPublisher_GetVRDeviceInfo_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataPublisher_GetVRDeviceInfo_Response) */ {
 public:
  inline CDataPublisher_GetVRDeviceInfo_Response() : CDataPublisher_GetVRDeviceInfo_Response(nullptr) {}
  ~CDataPublisher_GetVRDeviceInfo_Response() override;
  explicit constexpr CDataPublisher_GetVRDeviceInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataPublisher_GetVRDeviceInfo_Response(const CDataPublisher_GetVRDeviceInfo_Response& from);
  CDataPublisher_GetVRDeviceInfo_Response(CDataPublisher_GetVRDeviceInfo_Response&& from) noexcept
    : CDataPublisher_GetVRDeviceInfo_Response() {
    *this = ::std::move(from);
  }

  inline CDataPublisher_GetVRDeviceInfo_Response& operator=(const CDataPublisher_GetVRDeviceInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataPublisher_GetVRDeviceInfo_Response& operator=(CDataPublisher_GetVRDeviceInfo_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataPublisher_GetVRDeviceInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataPublisher_GetVRDeviceInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CDataPublisher_GetVRDeviceInfo_Response*>(
               &_CDataPublisher_GetVRDeviceInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CDataPublisher_GetVRDeviceInfo_Response& a, CDataPublisher_GetVRDeviceInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataPublisher_GetVRDeviceInfo_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataPublisher_GetVRDeviceInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDataPublisher_GetVRDeviceInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDataPublisher_GetVRDeviceInfo_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataPublisher_GetVRDeviceInfo_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataPublisher_GetVRDeviceInfo_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataPublisher_GetVRDeviceInfo_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataPublisher_GetVRDeviceInfo_Response";
  }
  protected:
  explicit CDataPublisher_GetVRDeviceInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDataPublisher_GetVRDeviceInfo_Response_Device Device;

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // repeated .CDataPublisher_GetVRDeviceInfo_Response.Device device = 1 [(.description) = "Result devices"];
  int device_size() const;
  private:
  int _internal_device_size() const;
  public:
  void clear_device();
  ::CDataPublisher_GetVRDeviceInfo_Response_Device* mutable_device(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataPublisher_GetVRDeviceInfo_Response_Device >*
      mutable_device();
  private:
  const ::CDataPublisher_GetVRDeviceInfo_Response_Device& _internal_device(int index) const;
  ::CDataPublisher_GetVRDeviceInfo_Response_Device* _internal_add_device();
  public:
  const ::CDataPublisher_GetVRDeviceInfo_Response_Device& device(int index) const;
  ::CDataPublisher_GetVRDeviceInfo_Response_Device* add_device();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataPublisher_GetVRDeviceInfo_Response_Device >&
      device() const;

  // @@protoc_insertion_point(class_scope:CDataPublisher_GetVRDeviceInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataPublisher_GetVRDeviceInfo_Response_Device > device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDataPublisher_SetVRDeviceInfoAggregationReference_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataPublisher_SetVRDeviceInfoAggregationReference_Request) */ {
 public:
  inline CDataPublisher_SetVRDeviceInfoAggregationReference_Request() : CDataPublisher_SetVRDeviceInfoAggregationReference_Request(nullptr) {}
  ~CDataPublisher_SetVRDeviceInfoAggregationReference_Request() override;
  explicit constexpr CDataPublisher_SetVRDeviceInfoAggregationReference_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataPublisher_SetVRDeviceInfoAggregationReference_Request(const CDataPublisher_SetVRDeviceInfoAggregationReference_Request& from);
  CDataPublisher_SetVRDeviceInfoAggregationReference_Request(CDataPublisher_SetVRDeviceInfoAggregationReference_Request&& from) noexcept
    : CDataPublisher_SetVRDeviceInfoAggregationReference_Request() {
    *this = ::std::move(from);
  }

  inline CDataPublisher_SetVRDeviceInfoAggregationReference_Request& operator=(const CDataPublisher_SetVRDeviceInfoAggregationReference_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataPublisher_SetVRDeviceInfoAggregationReference_Request& operator=(CDataPublisher_SetVRDeviceInfoAggregationReference_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataPublisher_SetVRDeviceInfoAggregationReference_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataPublisher_SetVRDeviceInfoAggregationReference_Request* internal_default_instance() {
    return reinterpret_cast<const CDataPublisher_SetVRDeviceInfoAggregationReference_Request*>(
               &_CDataPublisher_SetVRDeviceInfoAggregationReference_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CDataPublisher_SetVRDeviceInfoAggregationReference_Request& a, CDataPublisher_SetVRDeviceInfoAggregationReference_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataPublisher_SetVRDeviceInfoAggregationReference_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataPublisher_SetVRDeviceInfoAggregationReference_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDataPublisher_SetVRDeviceInfoAggregationReference_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDataPublisher_SetVRDeviceInfoAggregationReference_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataPublisher_SetVRDeviceInfoAggregationReference_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataPublisher_SetVRDeviceInfoAggregationReference_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataPublisher_SetVRDeviceInfoAggregationReference_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataPublisher_SetVRDeviceInfoAggregationReference_Request";
  }
  protected:
  explicit CDataPublisher_SetVRDeviceInfoAggregationReference_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefFieldNumber = 1,
    kAggregationRefFieldNumber = 2,
  };
  // optional uint32 ref = 1 [(.description) = "Reference number in the VRDeviceInfo table for the entry to set"];
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  uint32_t ref() const;
  void set_ref(uint32_t value);
  private:
  uint32_t _internal_ref() const;
  void _internal_set_ref(uint32_t value);
  public:

  // optional uint32 aggregation_ref = 2 [(.description) = "Aggregation to set the entry to"];
  bool has_aggregation_ref() const;
  private:
  bool _internal_has_aggregation_ref() const;
  public:
  void clear_aggregation_ref();
  uint32_t aggregation_ref() const;
  void set_aggregation_ref(uint32_t value);
  private:
  uint32_t _internal_aggregation_ref() const;
  void _internal_set_aggregation_ref(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDataPublisher_SetVRDeviceInfoAggregationReference_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t ref_;
  uint32_t aggregation_ref_;
  friend struct ::TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDataPublisher_SetVRDeviceInfoAggregationReference_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataPublisher_SetVRDeviceInfoAggregationReference_Response) */ {
 public:
  inline CDataPublisher_SetVRDeviceInfoAggregationReference_Response() : CDataPublisher_SetVRDeviceInfoAggregationReference_Response(nullptr) {}
  ~CDataPublisher_SetVRDeviceInfoAggregationReference_Response() override;
  explicit constexpr CDataPublisher_SetVRDeviceInfoAggregationReference_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataPublisher_SetVRDeviceInfoAggregationReference_Response(const CDataPublisher_SetVRDeviceInfoAggregationReference_Response& from);
  CDataPublisher_SetVRDeviceInfoAggregationReference_Response(CDataPublisher_SetVRDeviceInfoAggregationReference_Response&& from) noexcept
    : CDataPublisher_SetVRDeviceInfoAggregationReference_Response() {
    *this = ::std::move(from);
  }

  inline CDataPublisher_SetVRDeviceInfoAggregationReference_Response& operator=(const CDataPublisher_SetVRDeviceInfoAggregationReference_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataPublisher_SetVRDeviceInfoAggregationReference_Response& operator=(CDataPublisher_SetVRDeviceInfoAggregationReference_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataPublisher_SetVRDeviceInfoAggregationReference_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataPublisher_SetVRDeviceInfoAggregationReference_Response* internal_default_instance() {
    return reinterpret_cast<const CDataPublisher_SetVRDeviceInfoAggregationReference_Response*>(
               &_CDataPublisher_SetVRDeviceInfoAggregationReference_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CDataPublisher_SetVRDeviceInfoAggregationReference_Response& a, CDataPublisher_SetVRDeviceInfoAggregationReference_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataPublisher_SetVRDeviceInfoAggregationReference_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataPublisher_SetVRDeviceInfoAggregationReference_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDataPublisher_SetVRDeviceInfoAggregationReference_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDataPublisher_SetVRDeviceInfoAggregationReference_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataPublisher_SetVRDeviceInfoAggregationReference_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataPublisher_SetVRDeviceInfoAggregationReference_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataPublisher_SetVRDeviceInfoAggregationReference_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataPublisher_SetVRDeviceInfoAggregationReference_Response";
  }
  protected:
  explicit CDataPublisher_SetVRDeviceInfoAggregationReference_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional uint32 result = 1 [(.description) = "k_EResultOK, etc."];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDataPublisher_SetVRDeviceInfoAggregationReference_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t result_;
  friend struct ::TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDataPublisher_AddVRDeviceInfo_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataPublisher_AddVRDeviceInfo_Request) */ {
 public:
  inline CDataPublisher_AddVRDeviceInfo_Request() : CDataPublisher_AddVRDeviceInfo_Request(nullptr) {}
  ~CDataPublisher_AddVRDeviceInfo_Request() override;
  explicit constexpr CDataPublisher_AddVRDeviceInfo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataPublisher_AddVRDeviceInfo_Request(const CDataPublisher_AddVRDeviceInfo_Request& from);
  CDataPublisher_AddVRDeviceInfo_Request(CDataPublisher_AddVRDeviceInfo_Request&& from) noexcept
    : CDataPublisher_AddVRDeviceInfo_Request() {
    *this = ::std::move(from);
  }

  inline CDataPublisher_AddVRDeviceInfo_Request& operator=(const CDataPublisher_AddVRDeviceInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataPublisher_AddVRDeviceInfo_Request& operator=(CDataPublisher_AddVRDeviceInfo_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataPublisher_AddVRDeviceInfo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataPublisher_AddVRDeviceInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CDataPublisher_AddVRDeviceInfo_Request*>(
               &_CDataPublisher_AddVRDeviceInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CDataPublisher_AddVRDeviceInfo_Request& a, CDataPublisher_AddVRDeviceInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataPublisher_AddVRDeviceInfo_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataPublisher_AddVRDeviceInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDataPublisher_AddVRDeviceInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDataPublisher_AddVRDeviceInfo_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataPublisher_AddVRDeviceInfo_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataPublisher_AddVRDeviceInfo_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataPublisher_AddVRDeviceInfo_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataPublisher_AddVRDeviceInfo_Request";
  }
  protected:
  explicit CDataPublisher_AddVRDeviceInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManufacturerFieldNumber = 1,
    kModelFieldNumber = 2,
    kDriverFieldNumber = 3,
    kControllerTypeFieldNumber = 4,
    kDeviceClassFieldNumber = 5,
  };
  // optional string manufacturer = 1 [(.description) = "Manufacturer for the new device"];
  bool has_manufacturer() const;
  private:
  bool _internal_has_manufacturer() const;
  public:
  void clear_manufacturer();
  const std::string& manufacturer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_manufacturer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_manufacturer();
  PROTOBUF_NODISCARD std::string* release_manufacturer();
  void set_allocated_manufacturer(std::string* manufacturer);
  private:
  const std::string& _internal_manufacturer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_manufacturer(const std::string& value);
  std::string* _internal_mutable_manufacturer();
  public:

  // optional string model = 2 [(.description) = "Model for the new device"];
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // optional string driver = 3 [(.description) = "driver name (not including driver_). e.g. lighthouse, oculus, holographic"];
  bool has_driver() const;
  private:
  bool _internal_has_driver() const;
  public:
  void clear_driver();
  const std::string& driver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_driver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_driver();
  PROTOBUF_NODISCARD std::string* release_driver();
  void set_allocated_driver(std::string* driver);
  private:
  const std::string& _internal_driver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driver(const std::string& value);
  std::string* _internal_mutable_driver();
  public:

  // optional string controller_type = 4 [(.description) = "controller type for the device. Can be an empty string for devices with no inputs"];
  bool has_controller_type() const;
  private:
  bool _internal_has_controller_type() const;
  public:
  void clear_controller_type();
  const std::string& controller_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_controller_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_controller_type();
  PROTOBUF_NODISCARD std::string* release_controller_type();
  void set_allocated_controller_type(std::string* controller_type);
  private:
  const std::string& _internal_controller_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller_type(const std::string& value);
  std::string* _internal_mutable_controller_type();
  public:

  // optional int32 device_class = 5 [(.description) = "Class of the device. HMD=1, controller=2, tracker=3, base=4"];
  bool has_device_class() const;
  private:
  bool _internal_has_device_class() const;
  public:
  void clear_device_class();
  int32_t device_class() const;
  void set_device_class(int32_t value);
  private:
  int32_t _internal_device_class() const;
  void _internal_set_device_class(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDataPublisher_AddVRDeviceInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_type_;
  int32_t device_class_;
  friend struct ::TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CDataPublisher_AddVRDeviceInfo_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataPublisher_AddVRDeviceInfo_Response) */ {
 public:
  inline CDataPublisher_AddVRDeviceInfo_Response() : CDataPublisher_AddVRDeviceInfo_Response(nullptr) {}
  ~CDataPublisher_AddVRDeviceInfo_Response() override;
  explicit constexpr CDataPublisher_AddVRDeviceInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataPublisher_AddVRDeviceInfo_Response(const CDataPublisher_AddVRDeviceInfo_Response& from);
  CDataPublisher_AddVRDeviceInfo_Response(CDataPublisher_AddVRDeviceInfo_Response&& from) noexcept
    : CDataPublisher_AddVRDeviceInfo_Response() {
    *this = ::std::move(from);
  }

  inline CDataPublisher_AddVRDeviceInfo_Response& operator=(const CDataPublisher_AddVRDeviceInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataPublisher_AddVRDeviceInfo_Response& operator=(CDataPublisher_AddVRDeviceInfo_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataPublisher_AddVRDeviceInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataPublisher_AddVRDeviceInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CDataPublisher_AddVRDeviceInfo_Response*>(
               &_CDataPublisher_AddVRDeviceInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CDataPublisher_AddVRDeviceInfo_Response& a, CDataPublisher_AddVRDeviceInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataPublisher_AddVRDeviceInfo_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataPublisher_AddVRDeviceInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDataPublisher_AddVRDeviceInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDataPublisher_AddVRDeviceInfo_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataPublisher_AddVRDeviceInfo_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataPublisher_AddVRDeviceInfo_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataPublisher_AddVRDeviceInfo_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataPublisher_AddVRDeviceInfo_Response";
  }
  protected:
  explicit CDataPublisher_AddVRDeviceInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kRefFieldNumber = 2,
  };
  // optional uint32 result = 1 [(.description) = "k_EResultOK, etc."];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // optional uint32 ref = 2 [(.description) = "The reference number of the inserted device"];
  bool has_ref() const;
  private:
  bool _internal_has_ref() const;
  public:
  void clear_ref();
  uint32_t ref() const;
  void set_ref(uint32_t value);
  private:
  uint32_t _internal_ref() const;
  void _internal_set_ref(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDataPublisher_AddVRDeviceInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t result_;
  uint32_t ref_;
  friend struct ::TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CValveHWSurvey_GetSurveySchedule_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CValveHWSurvey_GetSurveySchedule_Request) */ {
 public:
  inline CValveHWSurvey_GetSurveySchedule_Request() : CValveHWSurvey_GetSurveySchedule_Request(nullptr) {}
  ~CValveHWSurvey_GetSurveySchedule_Request() override;
  explicit constexpr CValveHWSurvey_GetSurveySchedule_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CValveHWSurvey_GetSurveySchedule_Request(const CValveHWSurvey_GetSurveySchedule_Request& from);
  CValveHWSurvey_GetSurveySchedule_Request(CValveHWSurvey_GetSurveySchedule_Request&& from) noexcept
    : CValveHWSurvey_GetSurveySchedule_Request() {
    *this = ::std::move(from);
  }

  inline CValveHWSurvey_GetSurveySchedule_Request& operator=(const CValveHWSurvey_GetSurveySchedule_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CValveHWSurvey_GetSurveySchedule_Request& operator=(CValveHWSurvey_GetSurveySchedule_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CValveHWSurvey_GetSurveySchedule_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CValveHWSurvey_GetSurveySchedule_Request* internal_default_instance() {
    return reinterpret_cast<const CValveHWSurvey_GetSurveySchedule_Request*>(
               &_CValveHWSurvey_GetSurveySchedule_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CValveHWSurvey_GetSurveySchedule_Request& a, CValveHWSurvey_GetSurveySchedule_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CValveHWSurvey_GetSurveySchedule_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CValveHWSurvey_GetSurveySchedule_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CValveHWSurvey_GetSurveySchedule_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CValveHWSurvey_GetSurveySchedule_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CValveHWSurvey_GetSurveySchedule_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CValveHWSurvey_GetSurveySchedule_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CValveHWSurvey_GetSurveySchedule_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CValveHWSurvey_GetSurveySchedule_Request";
  }
  protected:
  explicit CValveHWSurvey_GetSurveySchedule_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSurveydatetokenFieldNumber = 1,
    kSurveydatetokenversionFieldNumber = 2,
  };
  // optional string surveydatetoken = 1;
  bool has_surveydatetoken() const;
  private:
  bool _internal_has_surveydatetoken() const;
  public:
  void clear_surveydatetoken();
  const std::string& surveydatetoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_surveydatetoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_surveydatetoken();
  PROTOBUF_NODISCARD std::string* release_surveydatetoken();
  void set_allocated_surveydatetoken(std::string* surveydatetoken);
  private:
  const std::string& _internal_surveydatetoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_surveydatetoken(const std::string& value);
  std::string* _internal_mutable_surveydatetoken();
  public:

  // optional fixed64 surveydatetokenversion = 2;
  bool has_surveydatetokenversion() const;
  private:
  bool _internal_has_surveydatetokenversion() const;
  public:
  void clear_surveydatetokenversion();
  uint64_t surveydatetokenversion() const;
  void set_surveydatetokenversion(uint64_t value);
  private:
  uint64_t _internal_surveydatetokenversion() const;
  void _internal_set_surveydatetokenversion(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CValveHWSurvey_GetSurveySchedule_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr surveydatetoken_;
  uint64_t surveydatetokenversion_;
  friend struct ::TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CValveHWSurvey_GetSurveySchedule_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CValveHWSurvey_GetSurveySchedule_Response) */ {
 public:
  inline CValveHWSurvey_GetSurveySchedule_Response() : CValveHWSurvey_GetSurveySchedule_Response(nullptr) {}
  ~CValveHWSurvey_GetSurveySchedule_Response() override;
  explicit constexpr CValveHWSurvey_GetSurveySchedule_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CValveHWSurvey_GetSurveySchedule_Response(const CValveHWSurvey_GetSurveySchedule_Response& from);
  CValveHWSurvey_GetSurveySchedule_Response(CValveHWSurvey_GetSurveySchedule_Response&& from) noexcept
    : CValveHWSurvey_GetSurveySchedule_Response() {
    *this = ::std::move(from);
  }

  inline CValveHWSurvey_GetSurveySchedule_Response& operator=(const CValveHWSurvey_GetSurveySchedule_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CValveHWSurvey_GetSurveySchedule_Response& operator=(CValveHWSurvey_GetSurveySchedule_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CValveHWSurvey_GetSurveySchedule_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CValveHWSurvey_GetSurveySchedule_Response* internal_default_instance() {
    return reinterpret_cast<const CValveHWSurvey_GetSurveySchedule_Response*>(
               &_CValveHWSurvey_GetSurveySchedule_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CValveHWSurvey_GetSurveySchedule_Response& a, CValveHWSurvey_GetSurveySchedule_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CValveHWSurvey_GetSurveySchedule_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CValveHWSurvey_GetSurveySchedule_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CValveHWSurvey_GetSurveySchedule_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CValveHWSurvey_GetSurveySchedule_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CValveHWSurvey_GetSurveySchedule_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CValveHWSurvey_GetSurveySchedule_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CValveHWSurvey_GetSurveySchedule_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CValveHWSurvey_GetSurveySchedule_Response";
  }
  protected:
  explicit CValveHWSurvey_GetSurveySchedule_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSurveydatetokenversionFieldNumber = 2,
    kSurveydatetokenFieldNumber = 1,
  };
  // optional fixed64 surveydatetokenversion = 2;
  bool has_surveydatetokenversion() const;
  private:
  bool _internal_has_surveydatetokenversion() const;
  public:
  void clear_surveydatetokenversion();
  uint64_t surveydatetokenversion() const;
  void set_surveydatetokenversion(uint64_t value);
  private:
  uint64_t _internal_surveydatetokenversion() const;
  void _internal_set_surveydatetokenversion(uint64_t value);
  public:

  // optional uint32 surveydatetoken = 1;
  bool has_surveydatetoken() const;
  private:
  bool _internal_has_surveydatetoken() const;
  public:
  void clear_surveydatetoken();
  uint32_t surveydatetoken() const;
  void set_surveydatetoken(uint32_t value);
  private:
  uint32_t _internal_surveydatetoken() const;
  void _internal_set_surveydatetoken(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CValveHWSurvey_GetSurveySchedule_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t surveydatetokenversion_;
  uint32_t surveydatetoken_;
  friend struct ::TableStruct_steammessages_5fdatapublisher_2esteamclient_2eproto;
};
// ===================================================================

class DataPublisher_Stub;

class DataPublisher : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DataPublisher() {};
 public:
  virtual ~DataPublisher();

  typedef DataPublisher_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void ClientContentCorruptionReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDataPublisher_ClientContentCorruptionReport_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientUpdateAppJobReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDataPublisher_ClientUpdateAppJob_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetVRDeviceInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDataPublisher_GetVRDeviceInfo_Request* request,
                       ::CDataPublisher_GetVRDeviceInfo_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetVRDeviceInfoAggregationReference(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDataPublisher_SetVRDeviceInfoAggregationReference_Request* request,
                       ::CDataPublisher_SetVRDeviceInfoAggregationReference_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AddVRDeviceInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDataPublisher_AddVRDeviceInfo_Request* request,
                       ::CDataPublisher_AddVRDeviceInfo_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DataPublisher);
};

class DataPublisher_Stub : public DataPublisher {
 public:
  DataPublisher_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  DataPublisher_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~DataPublisher_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements DataPublisher ------------------------------------------

  void ClientContentCorruptionReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDataPublisher_ClientContentCorruptionReport_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void ClientUpdateAppJobReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDataPublisher_ClientUpdateAppJob_Notification* request,
                       ::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void GetVRDeviceInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDataPublisher_GetVRDeviceInfo_Request* request,
                       ::CDataPublisher_GetVRDeviceInfo_Response* response,
                       ::google::protobuf::Closure* done);
  void SetVRDeviceInfoAggregationReference(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDataPublisher_SetVRDeviceInfoAggregationReference_Request* request,
                       ::CDataPublisher_SetVRDeviceInfoAggregationReference_Response* response,
                       ::google::protobuf::Closure* done);
  void AddVRDeviceInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CDataPublisher_AddVRDeviceInfo_Request* request,
                       ::CDataPublisher_AddVRDeviceInfo_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DataPublisher_Stub);
};


// -------------------------------------------------------------------

class ValveHWSurvey_Stub;

class ValveHWSurvey : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ValveHWSurvey() {};
 public:
  virtual ~ValveHWSurvey();

  typedef ValveHWSurvey_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetSurveySchedule(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CValveHWSurvey_GetSurveySchedule_Request* request,
                       ::CValveHWSurvey_GetSurveySchedule_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ValveHWSurvey);
};

class ValveHWSurvey_Stub : public ValveHWSurvey {
 public:
  ValveHWSurvey_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ValveHWSurvey_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ValveHWSurvey_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ValveHWSurvey ------------------------------------------

  void GetSurveySchedule(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CValveHWSurvey_GetSurveySchedule_Request* request,
                       ::CValveHWSurvey_GetSurveySchedule_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ValveHWSurvey_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CDataPublisher_ClientContentCorruptionReport_Notification

// optional uint32 appid = 1;
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_appid() const {
  return _internal_has_appid();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDataPublisher_ClientContentCorruptionReport_Notification::_internal_appid() const {
  return appid_;
}
inline uint32_t CDataPublisher_ClientContentCorruptionReport_Notification::appid() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientContentCorruptionReport_Notification.appid)
  return _internal_appid();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientContentCorruptionReport_Notification.appid)
}

// optional uint32 depotid = 2;
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::_internal_has_depotid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_depotid() const {
  return _internal_has_depotid();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_depotid() {
  depotid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CDataPublisher_ClientContentCorruptionReport_Notification::_internal_depotid() const {
  return depotid_;
}
inline uint32_t CDataPublisher_ClientContentCorruptionReport_Notification::depotid() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientContentCorruptionReport_Notification.depotid)
  return _internal_depotid();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::_internal_set_depotid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  depotid_ = value;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_depotid(uint32_t value) {
  _internal_set_depotid(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientContentCorruptionReport_Notification.depotid)
}

// optional string download_source = 3 [(.description) = "host name of download source"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::_internal_has_download_source() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_download_source() const {
  return _internal_has_download_source();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_download_source() {
  download_source_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDataPublisher_ClientContentCorruptionReport_Notification::download_source() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
  return _internal_download_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDataPublisher_ClientContentCorruptionReport_Notification::set_download_source(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 download_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
}
inline std::string* CDataPublisher_ClientContentCorruptionReport_Notification::mutable_download_source() {
  std::string* _s = _internal_mutable_download_source();
  // @@protoc_insertion_point(field_mutable:CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
  return _s;
}
inline const std::string& CDataPublisher_ClientContentCorruptionReport_Notification::_internal_download_source() const {
  return download_source_.Get();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::_internal_set_download_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  download_source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDataPublisher_ClientContentCorruptionReport_Notification::_internal_mutable_download_source() {
  _has_bits_[0] |= 0x00000001u;
  return download_source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDataPublisher_ClientContentCorruptionReport_Notification::release_download_source() {
  // @@protoc_insertion_point(field_release:CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
  if (!_internal_has_download_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = download_source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (download_source_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    download_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_allocated_download_source(std::string* download_source) {
  if (download_source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  download_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), download_source,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (download_source_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    download_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDataPublisher_ClientContentCorruptionReport_Notification.download_source)
}

// optional string objectid = 4 [(.description) = "Chunk SHA or Manifest ID"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::_internal_has_objectid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_objectid() const {
  return _internal_has_objectid();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_objectid() {
  objectid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CDataPublisher_ClientContentCorruptionReport_Notification::objectid() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
  return _internal_objectid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDataPublisher_ClientContentCorruptionReport_Notification::set_objectid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 objectid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
}
inline std::string* CDataPublisher_ClientContentCorruptionReport_Notification::mutable_objectid() {
  std::string* _s = _internal_mutable_objectid();
  // @@protoc_insertion_point(field_mutable:CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
  return _s;
}
inline const std::string& CDataPublisher_ClientContentCorruptionReport_Notification::_internal_objectid() const {
  return objectid_.Get();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::_internal_set_objectid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  objectid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDataPublisher_ClientContentCorruptionReport_Notification::_internal_mutable_objectid() {
  _has_bits_[0] |= 0x00000002u;
  return objectid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDataPublisher_ClientContentCorruptionReport_Notification::release_objectid() {
  // @@protoc_insertion_point(field_release:CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
  if (!_internal_has_objectid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = objectid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (objectid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    objectid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_allocated_objectid(std::string* objectid) {
  if (objectid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  objectid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objectid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (objectid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    objectid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDataPublisher_ClientContentCorruptionReport_Notification.objectid)
}

// optional uint32 cellid = 5 [(.description) = "Client Cell ID"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::_internal_has_cellid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_cellid() const {
  return _internal_has_cellid();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_cellid() {
  cellid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CDataPublisher_ClientContentCorruptionReport_Notification::_internal_cellid() const {
  return cellid_;
}
inline uint32_t CDataPublisher_ClientContentCorruptionReport_Notification::cellid() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientContentCorruptionReport_Notification.cellid)
  return _internal_cellid();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::_internal_set_cellid(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  cellid_ = value;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_cellid(uint32_t value) {
  _internal_set_cellid(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientContentCorruptionReport_Notification.cellid)
}

// optional bool is_manifest = 6 [(.description) = "The object is a manifest, not a chunk"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::_internal_has_is_manifest() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_is_manifest() const {
  return _internal_has_is_manifest();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_is_manifest() {
  is_manifest_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::_internal_is_manifest() const {
  return is_manifest_;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::is_manifest() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientContentCorruptionReport_Notification.is_manifest)
  return _internal_is_manifest();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::_internal_set_is_manifest(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_manifest_ = value;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_is_manifest(bool value) {
  _internal_set_is_manifest(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientContentCorruptionReport_Notification.is_manifest)
}

// optional uint64 object_size = 7 [(.description) = "object size in bytes"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::_internal_has_object_size() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_object_size() const {
  return _internal_has_object_size();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_object_size() {
  object_size_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CDataPublisher_ClientContentCorruptionReport_Notification::_internal_object_size() const {
  return object_size_;
}
inline uint64_t CDataPublisher_ClientContentCorruptionReport_Notification::object_size() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientContentCorruptionReport_Notification.object_size)
  return _internal_object_size();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::_internal_set_object_size(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  object_size_ = value;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_object_size(uint64_t value) {
  _internal_set_object_size(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientContentCorruptionReport_Notification.object_size)
}

// optional uint32 corruption_type = 8 [(.description) = "See EContentCorruptionType"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::_internal_has_corruption_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_corruption_type() const {
  return _internal_has_corruption_type();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_corruption_type() {
  corruption_type_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CDataPublisher_ClientContentCorruptionReport_Notification::_internal_corruption_type() const {
  return corruption_type_;
}
inline uint32_t CDataPublisher_ClientContentCorruptionReport_Notification::corruption_type() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientContentCorruptionReport_Notification.corruption_type)
  return _internal_corruption_type();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::_internal_set_corruption_type(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  corruption_type_ = value;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_corruption_type(uint32_t value) {
  _internal_set_corruption_type(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientContentCorruptionReport_Notification.corruption_type)
}

// optional bool used_https = 9 [(.description) = "the request was HTTPS"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::_internal_has_used_https() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_used_https() const {
  return _internal_has_used_https();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_used_https() {
  used_https_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::_internal_used_https() const {
  return used_https_;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::used_https() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientContentCorruptionReport_Notification.used_https)
  return _internal_used_https();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::_internal_set_used_https(bool value) {
  _has_bits_[0] |= 0x00000100u;
  used_https_ = value;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_used_https(bool value) {
  _internal_set_used_https(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientContentCorruptionReport_Notification.used_https)
}

// optional bool oc_proxy_detected = 10 [(.description) = "detected an OpenCache proxy"];
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::_internal_has_oc_proxy_detected() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::has_oc_proxy_detected() const {
  return _internal_has_oc_proxy_detected();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::clear_oc_proxy_detected() {
  oc_proxy_detected_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::_internal_oc_proxy_detected() const {
  return oc_proxy_detected_;
}
inline bool CDataPublisher_ClientContentCorruptionReport_Notification::oc_proxy_detected() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientContentCorruptionReport_Notification.oc_proxy_detected)
  return _internal_oc_proxy_detected();
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::_internal_set_oc_proxy_detected(bool value) {
  _has_bits_[0] |= 0x00000200u;
  oc_proxy_detected_ = value;
}
inline void CDataPublisher_ClientContentCorruptionReport_Notification::set_oc_proxy_detected(bool value) {
  _internal_set_oc_proxy_detected(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientContentCorruptionReport_Notification.oc_proxy_detected)
}

// -------------------------------------------------------------------

// CDataPublisher_ClientUpdateAppJob_Notification

// optional uint32 app_id = 1;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_app_id() const {
  return _internal_has_app_id();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::app_id() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.app_id)
  return _internal_app_id();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  app_id_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.app_id)
}

// repeated uint32 depot_ids = 2;
inline int CDataPublisher_ClientUpdateAppJob_Notification::_internal_depot_ids_size() const {
  return depot_ids_.size();
}
inline int CDataPublisher_ClientUpdateAppJob_Notification::depot_ids_size() const {
  return _internal_depot_ids_size();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_depot_ids() {
  depot_ids_.Clear();
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_depot_ids(int index) const {
  return depot_ids_.Get(index);
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::depot_ids(int index) const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.depot_ids)
  return _internal_depot_ids(index);
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_depot_ids(int index, uint32_t value) {
  depot_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.depot_ids)
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_add_depot_ids(uint32_t value) {
  depot_ids_.Add(value);
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::add_depot_ids(uint32_t value) {
  _internal_add_depot_ids(value);
  // @@protoc_insertion_point(field_add:CDataPublisher_ClientUpdateAppJob_Notification.depot_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CDataPublisher_ClientUpdateAppJob_Notification::_internal_depot_ids() const {
  return depot_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CDataPublisher_ClientUpdateAppJob_Notification::depot_ids() const {
  // @@protoc_insertion_point(field_list:CDataPublisher_ClientUpdateAppJob_Notification.depot_ids)
  return _internal_depot_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CDataPublisher_ClientUpdateAppJob_Notification::_internal_mutable_depot_ids() {
  return &depot_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CDataPublisher_ClientUpdateAppJob_Notification::mutable_depot_ids() {
  // @@protoc_insertion_point(field_mutable_list:CDataPublisher_ClientUpdateAppJob_Notification.depot_ids)
  return _internal_mutable_depot_ids();
}

// optional uint32 app_state = 3;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_app_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_app_state() const {
  return _internal_has_app_state();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_app_state() {
  app_state_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_app_state() const {
  return app_state_;
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::app_state() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.app_state)
  return _internal_app_state();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_app_state(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  app_state_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_app_state(uint32_t value) {
  _internal_set_app_state(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.app_state)
}

// optional uint32 job_app_error = 4;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_job_app_error() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_job_app_error() const {
  return _internal_has_job_app_error();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_job_app_error() {
  job_app_error_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_job_app_error() const {
  return job_app_error_;
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::job_app_error() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.job_app_error)
  return _internal_job_app_error();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_job_app_error(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  job_app_error_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_job_app_error(uint32_t value) {
  _internal_set_job_app_error(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.job_app_error)
}

// optional string error_details = 5;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_error_details() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_error_details() const {
  return _internal_has_error_details();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_error_details() {
  error_details_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDataPublisher_ClientUpdateAppJob_Notification::error_details() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.error_details)
  return _internal_error_details();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDataPublisher_ClientUpdateAppJob_Notification::set_error_details(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 error_details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.error_details)
}
inline std::string* CDataPublisher_ClientUpdateAppJob_Notification::mutable_error_details() {
  std::string* _s = _internal_mutable_error_details();
  // @@protoc_insertion_point(field_mutable:CDataPublisher_ClientUpdateAppJob_Notification.error_details)
  return _s;
}
inline const std::string& CDataPublisher_ClientUpdateAppJob_Notification::_internal_error_details() const {
  return error_details_.Get();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_error_details(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDataPublisher_ClientUpdateAppJob_Notification::_internal_mutable_error_details() {
  _has_bits_[0] |= 0x00000001u;
  return error_details_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDataPublisher_ClientUpdateAppJob_Notification::release_error_details() {
  // @@protoc_insertion_point(field_release:CDataPublisher_ClientUpdateAppJob_Notification.error_details)
  if (!_internal_has_error_details()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = error_details_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_details_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_allocated_error_details(std::string* error_details) {
  if (error_details != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_details_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_details,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_details_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDataPublisher_ClientUpdateAppJob_Notification.error_details)
}

// optional uint32 job_duration = 6;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_job_duration() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_job_duration() const {
  return _internal_has_job_duration();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_job_duration() {
  job_duration_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_job_duration() const {
  return job_duration_;
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::job_duration() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.job_duration)
  return _internal_job_duration();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_job_duration(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  job_duration_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_job_duration(uint32_t value) {
  _internal_set_job_duration(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.job_duration)
}

// optional uint32 files_validation_failed = 7;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_files_validation_failed() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_files_validation_failed() const {
  return _internal_has_files_validation_failed();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_files_validation_failed() {
  files_validation_failed_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_files_validation_failed() const {
  return files_validation_failed_;
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::files_validation_failed() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.files_validation_failed)
  return _internal_files_validation_failed();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_files_validation_failed(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  files_validation_failed_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_files_validation_failed(uint32_t value) {
  _internal_set_files_validation_failed(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.files_validation_failed)
}

// optional uint64 job_bytes_downloaded = 8;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_job_bytes_downloaded() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_job_bytes_downloaded() const {
  return _internal_has_job_bytes_downloaded();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_job_bytes_downloaded() {
  job_bytes_downloaded_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_job_bytes_downloaded() const {
  return job_bytes_downloaded_;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::job_bytes_downloaded() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.job_bytes_downloaded)
  return _internal_job_bytes_downloaded();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_job_bytes_downloaded(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  job_bytes_downloaded_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_job_bytes_downloaded(uint64_t value) {
  _internal_set_job_bytes_downloaded(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.job_bytes_downloaded)
}

// optional uint64 job_bytes_staged = 9;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_job_bytes_staged() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_job_bytes_staged() const {
  return _internal_has_job_bytes_staged();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_job_bytes_staged() {
  job_bytes_staged_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_job_bytes_staged() const {
  return job_bytes_staged_;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::job_bytes_staged() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.job_bytes_staged)
  return _internal_job_bytes_staged();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_job_bytes_staged(uint64_t value) {
  _has_bits_[0] |= 0x00000080u;
  job_bytes_staged_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_job_bytes_staged(uint64_t value) {
  _internal_set_job_bytes_staged(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.job_bytes_staged)
}

// optional uint64 bytes_comitted = 10;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_bytes_comitted() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_bytes_comitted() const {
  return _internal_has_bytes_comitted();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_bytes_comitted() {
  bytes_comitted_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000400u;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_bytes_comitted() const {
  return bytes_comitted_;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::bytes_comitted() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.bytes_comitted)
  return _internal_bytes_comitted();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_bytes_comitted(uint64_t value) {
  _has_bits_[0] |= 0x00000400u;
  bytes_comitted_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_bytes_comitted(uint64_t value) {
  _internal_set_bytes_comitted(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.bytes_comitted)
}

// optional uint32 start_app_state = 11;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_start_app_state() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_start_app_state() const {
  return _internal_has_start_app_state();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_start_app_state() {
  start_app_state_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_start_app_state() const {
  return start_app_state_;
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::start_app_state() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.start_app_state)
  return _internal_start_app_state();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_start_app_state(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  start_app_state_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_start_app_state(uint32_t value) {
  _internal_set_start_app_state(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.start_app_state)
}

// optional fixed64 stats_machine_id = 12;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_stats_machine_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_stats_machine_id() const {
  return _internal_has_stats_machine_id();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_stats_machine_id() {
  stats_machine_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000800u;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_stats_machine_id() const {
  return stats_machine_id_;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::stats_machine_id() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.stats_machine_id)
  return _internal_stats_machine_id();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_stats_machine_id(uint64_t value) {
  _has_bits_[0] |= 0x00000800u;
  stats_machine_id_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_stats_machine_id(uint64_t value) {
  _internal_set_stats_machine_id(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.stats_machine_id)
}

// optional string branch_name = 13;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_branch_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_branch_name() const {
  return _internal_has_branch_name();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_branch_name() {
  branch_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CDataPublisher_ClientUpdateAppJob_Notification::branch_name() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.branch_name)
  return _internal_branch_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDataPublisher_ClientUpdateAppJob_Notification::set_branch_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 branch_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.branch_name)
}
inline std::string* CDataPublisher_ClientUpdateAppJob_Notification::mutable_branch_name() {
  std::string* _s = _internal_mutable_branch_name();
  // @@protoc_insertion_point(field_mutable:CDataPublisher_ClientUpdateAppJob_Notification.branch_name)
  return _s;
}
inline const std::string& CDataPublisher_ClientUpdateAppJob_Notification::_internal_branch_name() const {
  return branch_name_.Get();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_branch_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  branch_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDataPublisher_ClientUpdateAppJob_Notification::_internal_mutable_branch_name() {
  _has_bits_[0] |= 0x00000002u;
  return branch_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDataPublisher_ClientUpdateAppJob_Notification::release_branch_name() {
  // @@protoc_insertion_point(field_release:CDataPublisher_ClientUpdateAppJob_Notification.branch_name)
  if (!_internal_has_branch_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = branch_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (branch_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    branch_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_allocated_branch_name(std::string* branch_name) {
  if (branch_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  branch_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), branch_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (branch_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    branch_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDataPublisher_ClientUpdateAppJob_Notification.branch_name)
}

// optional uint64 total_bytes_downloaded = 14;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_total_bytes_downloaded() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_total_bytes_downloaded() const {
  return _internal_has_total_bytes_downloaded();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_total_bytes_downloaded() {
  total_bytes_downloaded_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00001000u;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_total_bytes_downloaded() const {
  return total_bytes_downloaded_;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::total_bytes_downloaded() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.total_bytes_downloaded)
  return _internal_total_bytes_downloaded();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_total_bytes_downloaded(uint64_t value) {
  _has_bits_[0] |= 0x00001000u;
  total_bytes_downloaded_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_total_bytes_downloaded(uint64_t value) {
  _internal_set_total_bytes_downloaded(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.total_bytes_downloaded)
}

// optional uint64 total_bytes_staged = 15;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_total_bytes_staged() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_total_bytes_staged() const {
  return _internal_has_total_bytes_staged();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_total_bytes_staged() {
  total_bytes_staged_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00002000u;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_total_bytes_staged() const {
  return total_bytes_staged_;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::total_bytes_staged() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.total_bytes_staged)
  return _internal_total_bytes_staged();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_total_bytes_staged(uint64_t value) {
  _has_bits_[0] |= 0x00002000u;
  total_bytes_staged_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_total_bytes_staged(uint64_t value) {
  _internal_set_total_bytes_staged(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.total_bytes_staged)
}

// optional uint64 total_bytes_restored = 16;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_total_bytes_restored() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_total_bytes_restored() const {
  return _internal_has_total_bytes_restored();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_total_bytes_restored() {
  total_bytes_restored_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00004000u;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_total_bytes_restored() const {
  return total_bytes_restored_;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::total_bytes_restored() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.total_bytes_restored)
  return _internal_total_bytes_restored();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_total_bytes_restored(uint64_t value) {
  _has_bits_[0] |= 0x00004000u;
  total_bytes_restored_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_total_bytes_restored(uint64_t value) {
  _internal_set_total_bytes_restored(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.total_bytes_restored)
}

// optional bool is_borrowed = 17;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_is_borrowed() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_is_borrowed() const {
  return _internal_has_is_borrowed();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_is_borrowed() {
  is_borrowed_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_is_borrowed() const {
  return is_borrowed_;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::is_borrowed() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.is_borrowed)
  return _internal_is_borrowed();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_is_borrowed(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_borrowed_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_is_borrowed(bool value) {
  _internal_set_is_borrowed(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.is_borrowed)
}

// optional bool is_free_weekend = 18;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_is_free_weekend() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_is_free_weekend() const {
  return _internal_has_is_free_weekend();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_is_free_weekend() {
  is_free_weekend_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_is_free_weekend() const {
  return is_free_weekend_;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::is_free_weekend() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.is_free_weekend)
  return _internal_is_free_weekend();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_is_free_weekend(bool value) {
  _has_bits_[0] |= 0x00010000u;
  is_free_weekend_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_is_free_weekend(bool value) {
  _internal_set_is_free_weekend(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.is_free_weekend)
}

// optional uint64 total_bytes_patched = 20;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_total_bytes_patched() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_total_bytes_patched() const {
  return _internal_has_total_bytes_patched();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_total_bytes_patched() {
  total_bytes_patched_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00040000u;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_total_bytes_patched() const {
  return total_bytes_patched_;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::total_bytes_patched() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.total_bytes_patched)
  return _internal_total_bytes_patched();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_total_bytes_patched(uint64_t value) {
  _has_bits_[0] |= 0x00040000u;
  total_bytes_patched_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_total_bytes_patched(uint64_t value) {
  _internal_set_total_bytes_patched(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.total_bytes_patched)
}

// optional uint64 total_bytes_saved = 21;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_total_bytes_saved() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_total_bytes_saved() const {
  return _internal_has_total_bytes_saved();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_total_bytes_saved() {
  total_bytes_saved_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00080000u;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_total_bytes_saved() const {
  return total_bytes_saved_;
}
inline uint64_t CDataPublisher_ClientUpdateAppJob_Notification::total_bytes_saved() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.total_bytes_saved)
  return _internal_total_bytes_saved();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_total_bytes_saved(uint64_t value) {
  _has_bits_[0] |= 0x00080000u;
  total_bytes_saved_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_total_bytes_saved(uint64_t value) {
  _internal_set_total_bytes_saved(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.total_bytes_saved)
}

// optional uint32 cell_id = 22;
inline bool CDataPublisher_ClientUpdateAppJob_Notification::_internal_has_cell_id() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CDataPublisher_ClientUpdateAppJob_Notification::has_cell_id() const {
  return _internal_has_cell_id();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::clear_cell_id() {
  cell_id_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::_internal_cell_id() const {
  return cell_id_;
}
inline uint32_t CDataPublisher_ClientUpdateAppJob_Notification::cell_id() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_ClientUpdateAppJob_Notification.cell_id)
  return _internal_cell_id();
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::_internal_set_cell_id(uint32_t value) {
  _has_bits_[0] |= 0x00020000u;
  cell_id_ = value;
}
inline void CDataPublisher_ClientUpdateAppJob_Notification::set_cell_id(uint32_t value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_ClientUpdateAppJob_Notification.cell_id)
}

// -------------------------------------------------------------------

// CDataPublisher_GetVRDeviceInfo_Request

// optional uint32 month_count = 1 [(.description) = "Number of months for which to generate a report"];
inline bool CDataPublisher_GetVRDeviceInfo_Request::_internal_has_month_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDataPublisher_GetVRDeviceInfo_Request::has_month_count() const {
  return _internal_has_month_count();
}
inline void CDataPublisher_GetVRDeviceInfo_Request::clear_month_count() {
  month_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDataPublisher_GetVRDeviceInfo_Request::_internal_month_count() const {
  return month_count_;
}
inline uint32_t CDataPublisher_GetVRDeviceInfo_Request::month_count() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_GetVRDeviceInfo_Request.month_count)
  return _internal_month_count();
}
inline void CDataPublisher_GetVRDeviceInfo_Request::_internal_set_month_count(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  month_count_ = value;
}
inline void CDataPublisher_GetVRDeviceInfo_Request::set_month_count(uint32_t value) {
  _internal_set_month_count(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_GetVRDeviceInfo_Request.month_count)
}

// -------------------------------------------------------------------

// CDataPublisher_GetVRDeviceInfo_Response_Device

// optional string name = 1 [(.description) = "Name to show for this device"];
inline bool CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDataPublisher_GetVRDeviceInfo_Response_Device::has_name() const {
  return _internal_has_name();
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDataPublisher_GetVRDeviceInfo_Response_Device::name() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_GetVRDeviceInfo_Response.Device.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDataPublisher_GetVRDeviceInfo_Response_Device::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDataPublisher_GetVRDeviceInfo_Response.Device.name)
}
inline std::string* CDataPublisher_GetVRDeviceInfo_Response_Device::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CDataPublisher_GetVRDeviceInfo_Response.Device.name)
  return _s;
}
inline const std::string& CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_name() const {
  return name_.Get();
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDataPublisher_GetVRDeviceInfo_Response_Device::release_name() {
  // @@protoc_insertion_point(field_release:CDataPublisher_GetVRDeviceInfo_Response.Device.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDataPublisher_GetVRDeviceInfo_Response.Device.name)
}

// optional uint32 ref = 2 [(.description) = "Reference number for this device"];
inline bool CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_has_ref() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDataPublisher_GetVRDeviceInfo_Response_Device::has_ref() const {
  return _internal_has_ref();
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::clear_ref() {
  ref_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_ref() const {
  return ref_;
}
inline uint32_t CDataPublisher_GetVRDeviceInfo_Response_Device::ref() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_GetVRDeviceInfo_Response.Device.ref)
  return _internal_ref();
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_set_ref(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  ref_ = value;
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::set_ref(uint32_t value) {
  _internal_set_ref(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_GetVRDeviceInfo_Response.Device.ref)
}

// optional uint32 aggregation_ref = 3 [(.description) = "Reference number to aggregate this device under"];
inline bool CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_has_aggregation_ref() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDataPublisher_GetVRDeviceInfo_Response_Device::has_aggregation_ref() const {
  return _internal_has_aggregation_ref();
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::clear_aggregation_ref() {
  aggregation_ref_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_aggregation_ref() const {
  return aggregation_ref_;
}
inline uint32_t CDataPublisher_GetVRDeviceInfo_Response_Device::aggregation_ref() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_GetVRDeviceInfo_Response.Device.aggregation_ref)
  return _internal_aggregation_ref();
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_set_aggregation_ref(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  aggregation_ref_ = value;
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::set_aggregation_ref(uint32_t value) {
  _internal_set_aggregation_ref(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_GetVRDeviceInfo_Response.Device.aggregation_ref)
}

// optional uint32 total = 4 [(.description) = "Sum of all the counts"];
inline bool CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_has_total() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDataPublisher_GetVRDeviceInfo_Response_Device::has_total() const {
  return _internal_has_total();
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::clear_total() {
  total_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_total() const {
  return total_;
}
inline uint32_t CDataPublisher_GetVRDeviceInfo_Response_Device::total() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_GetVRDeviceInfo_Response.Device.total)
  return _internal_total();
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_set_total(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  total_ = value;
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::set_total(uint32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_GetVRDeviceInfo_Response.Device.total)
}

// optional string driver = 5 [(.description) = "driver name reported by the user"];
inline bool CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_has_driver() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDataPublisher_GetVRDeviceInfo_Response_Device::has_driver() const {
  return _internal_has_driver();
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::clear_driver() {
  driver_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CDataPublisher_GetVRDeviceInfo_Response_Device::driver() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_GetVRDeviceInfo_Response.Device.driver)
  return _internal_driver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDataPublisher_GetVRDeviceInfo_Response_Device::set_driver(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 driver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDataPublisher_GetVRDeviceInfo_Response.Device.driver)
}
inline std::string* CDataPublisher_GetVRDeviceInfo_Response_Device::mutable_driver() {
  std::string* _s = _internal_mutable_driver();
  // @@protoc_insertion_point(field_mutable:CDataPublisher_GetVRDeviceInfo_Response.Device.driver)
  return _s;
}
inline const std::string& CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_driver() const {
  return driver_.Get();
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_set_driver(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  driver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_mutable_driver() {
  _has_bits_[0] |= 0x00000002u;
  return driver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDataPublisher_GetVRDeviceInfo_Response_Device::release_driver() {
  // @@protoc_insertion_point(field_release:CDataPublisher_GetVRDeviceInfo_Response.Device.driver)
  if (!_internal_has_driver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = driver_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::set_allocated_driver(std::string* driver) {
  if (driver != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  driver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDataPublisher_GetVRDeviceInfo_Response.Device.driver)
}

// optional int32 device_class = 6 [(.description) = "Class of the device. HMD=1, controller=2, tracker=3, base=4"];
inline bool CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_has_device_class() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDataPublisher_GetVRDeviceInfo_Response_Device::has_device_class() const {
  return _internal_has_device_class();
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::clear_device_class() {
  device_class_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_device_class() const {
  return device_class_;
}
inline int32_t CDataPublisher_GetVRDeviceInfo_Response_Device::device_class() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_GetVRDeviceInfo_Response.Device.device_class)
  return _internal_device_class();
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::_internal_set_device_class(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  device_class_ = value;
}
inline void CDataPublisher_GetVRDeviceInfo_Response_Device::set_device_class(int32_t value) {
  _internal_set_device_class(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_GetVRDeviceInfo_Response.Device.device_class)
}

// -------------------------------------------------------------------

// CDataPublisher_GetVRDeviceInfo_Response

// repeated .CDataPublisher_GetVRDeviceInfo_Response.Device device = 1 [(.description) = "Result devices"];
inline int CDataPublisher_GetVRDeviceInfo_Response::_internal_device_size() const {
  return device_.size();
}
inline int CDataPublisher_GetVRDeviceInfo_Response::device_size() const {
  return _internal_device_size();
}
inline void CDataPublisher_GetVRDeviceInfo_Response::clear_device() {
  device_.Clear();
}
inline ::CDataPublisher_GetVRDeviceInfo_Response_Device* CDataPublisher_GetVRDeviceInfo_Response::mutable_device(int index) {
  // @@protoc_insertion_point(field_mutable:CDataPublisher_GetVRDeviceInfo_Response.device)
  return device_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataPublisher_GetVRDeviceInfo_Response_Device >*
CDataPublisher_GetVRDeviceInfo_Response::mutable_device() {
  // @@protoc_insertion_point(field_mutable_list:CDataPublisher_GetVRDeviceInfo_Response.device)
  return &device_;
}
inline const ::CDataPublisher_GetVRDeviceInfo_Response_Device& CDataPublisher_GetVRDeviceInfo_Response::_internal_device(int index) const {
  return device_.Get(index);
}
inline const ::CDataPublisher_GetVRDeviceInfo_Response_Device& CDataPublisher_GetVRDeviceInfo_Response::device(int index) const {
  // @@protoc_insertion_point(field_get:CDataPublisher_GetVRDeviceInfo_Response.device)
  return _internal_device(index);
}
inline ::CDataPublisher_GetVRDeviceInfo_Response_Device* CDataPublisher_GetVRDeviceInfo_Response::_internal_add_device() {
  return device_.Add();
}
inline ::CDataPublisher_GetVRDeviceInfo_Response_Device* CDataPublisher_GetVRDeviceInfo_Response::add_device() {
  ::CDataPublisher_GetVRDeviceInfo_Response_Device* _add = _internal_add_device();
  // @@protoc_insertion_point(field_add:CDataPublisher_GetVRDeviceInfo_Response.device)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataPublisher_GetVRDeviceInfo_Response_Device >&
CDataPublisher_GetVRDeviceInfo_Response::device() const {
  // @@protoc_insertion_point(field_list:CDataPublisher_GetVRDeviceInfo_Response.device)
  return device_;
}

// -------------------------------------------------------------------

// CDataPublisher_SetVRDeviceInfoAggregationReference_Request

// optional uint32 ref = 1 [(.description) = "Reference number in the VRDeviceInfo table for the entry to set"];
inline bool CDataPublisher_SetVRDeviceInfoAggregationReference_Request::_internal_has_ref() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDataPublisher_SetVRDeviceInfoAggregationReference_Request::has_ref() const {
  return _internal_has_ref();
}
inline void CDataPublisher_SetVRDeviceInfoAggregationReference_Request::clear_ref() {
  ref_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDataPublisher_SetVRDeviceInfoAggregationReference_Request::_internal_ref() const {
  return ref_;
}
inline uint32_t CDataPublisher_SetVRDeviceInfoAggregationReference_Request::ref() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_SetVRDeviceInfoAggregationReference_Request.ref)
  return _internal_ref();
}
inline void CDataPublisher_SetVRDeviceInfoAggregationReference_Request::_internal_set_ref(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ref_ = value;
}
inline void CDataPublisher_SetVRDeviceInfoAggregationReference_Request::set_ref(uint32_t value) {
  _internal_set_ref(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_SetVRDeviceInfoAggregationReference_Request.ref)
}

// optional uint32 aggregation_ref = 2 [(.description) = "Aggregation to set the entry to"];
inline bool CDataPublisher_SetVRDeviceInfoAggregationReference_Request::_internal_has_aggregation_ref() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDataPublisher_SetVRDeviceInfoAggregationReference_Request::has_aggregation_ref() const {
  return _internal_has_aggregation_ref();
}
inline void CDataPublisher_SetVRDeviceInfoAggregationReference_Request::clear_aggregation_ref() {
  aggregation_ref_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDataPublisher_SetVRDeviceInfoAggregationReference_Request::_internal_aggregation_ref() const {
  return aggregation_ref_;
}
inline uint32_t CDataPublisher_SetVRDeviceInfoAggregationReference_Request::aggregation_ref() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_SetVRDeviceInfoAggregationReference_Request.aggregation_ref)
  return _internal_aggregation_ref();
}
inline void CDataPublisher_SetVRDeviceInfoAggregationReference_Request::_internal_set_aggregation_ref(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  aggregation_ref_ = value;
}
inline void CDataPublisher_SetVRDeviceInfoAggregationReference_Request::set_aggregation_ref(uint32_t value) {
  _internal_set_aggregation_ref(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_SetVRDeviceInfoAggregationReference_Request.aggregation_ref)
}

// -------------------------------------------------------------------

// CDataPublisher_SetVRDeviceInfoAggregationReference_Response

// optional uint32 result = 1 [(.description) = "k_EResultOK, etc."];
inline bool CDataPublisher_SetVRDeviceInfoAggregationReference_Response::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDataPublisher_SetVRDeviceInfoAggregationReference_Response::has_result() const {
  return _internal_has_result();
}
inline void CDataPublisher_SetVRDeviceInfoAggregationReference_Response::clear_result() {
  result_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDataPublisher_SetVRDeviceInfoAggregationReference_Response::_internal_result() const {
  return result_;
}
inline uint32_t CDataPublisher_SetVRDeviceInfoAggregationReference_Response::result() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_SetVRDeviceInfoAggregationReference_Response.result)
  return _internal_result();
}
inline void CDataPublisher_SetVRDeviceInfoAggregationReference_Response::_internal_set_result(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CDataPublisher_SetVRDeviceInfoAggregationReference_Response::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_SetVRDeviceInfoAggregationReference_Response.result)
}

// -------------------------------------------------------------------

// CDataPublisher_AddVRDeviceInfo_Request

// optional string manufacturer = 1 [(.description) = "Manufacturer for the new device"];
inline bool CDataPublisher_AddVRDeviceInfo_Request::_internal_has_manufacturer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDataPublisher_AddVRDeviceInfo_Request::has_manufacturer() const {
  return _internal_has_manufacturer();
}
inline void CDataPublisher_AddVRDeviceInfo_Request::clear_manufacturer() {
  manufacturer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDataPublisher_AddVRDeviceInfo_Request::manufacturer() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_AddVRDeviceInfo_Request.manufacturer)
  return _internal_manufacturer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDataPublisher_AddVRDeviceInfo_Request::set_manufacturer(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDataPublisher_AddVRDeviceInfo_Request.manufacturer)
}
inline std::string* CDataPublisher_AddVRDeviceInfo_Request::mutable_manufacturer() {
  std::string* _s = _internal_mutable_manufacturer();
  // @@protoc_insertion_point(field_mutable:CDataPublisher_AddVRDeviceInfo_Request.manufacturer)
  return _s;
}
inline const std::string& CDataPublisher_AddVRDeviceInfo_Request::_internal_manufacturer() const {
  return manufacturer_.Get();
}
inline void CDataPublisher_AddVRDeviceInfo_Request::_internal_set_manufacturer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDataPublisher_AddVRDeviceInfo_Request::_internal_mutable_manufacturer() {
  _has_bits_[0] |= 0x00000001u;
  return manufacturer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDataPublisher_AddVRDeviceInfo_Request::release_manufacturer() {
  // @@protoc_insertion_point(field_release:CDataPublisher_AddVRDeviceInfo_Request.manufacturer)
  if (!_internal_has_manufacturer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = manufacturer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manufacturer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDataPublisher_AddVRDeviceInfo_Request::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  manufacturer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manufacturer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDataPublisher_AddVRDeviceInfo_Request.manufacturer)
}

// optional string model = 2 [(.description) = "Model for the new device"];
inline bool CDataPublisher_AddVRDeviceInfo_Request::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDataPublisher_AddVRDeviceInfo_Request::has_model() const {
  return _internal_has_model();
}
inline void CDataPublisher_AddVRDeviceInfo_Request::clear_model() {
  model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CDataPublisher_AddVRDeviceInfo_Request::model() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_AddVRDeviceInfo_Request.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDataPublisher_AddVRDeviceInfo_Request::set_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDataPublisher_AddVRDeviceInfo_Request.model)
}
inline std::string* CDataPublisher_AddVRDeviceInfo_Request::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:CDataPublisher_AddVRDeviceInfo_Request.model)
  return _s;
}
inline const std::string& CDataPublisher_AddVRDeviceInfo_Request::_internal_model() const {
  return model_.Get();
}
inline void CDataPublisher_AddVRDeviceInfo_Request::_internal_set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDataPublisher_AddVRDeviceInfo_Request::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000002u;
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDataPublisher_AddVRDeviceInfo_Request::release_model() {
  // @@protoc_insertion_point(field_release:CDataPublisher_AddVRDeviceInfo_Request.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = model_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDataPublisher_AddVRDeviceInfo_Request::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDataPublisher_AddVRDeviceInfo_Request.model)
}

// optional string driver = 3 [(.description) = "driver name (not including driver_). e.g. lighthouse, oculus, holographic"];
inline bool CDataPublisher_AddVRDeviceInfo_Request::_internal_has_driver() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDataPublisher_AddVRDeviceInfo_Request::has_driver() const {
  return _internal_has_driver();
}
inline void CDataPublisher_AddVRDeviceInfo_Request::clear_driver() {
  driver_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CDataPublisher_AddVRDeviceInfo_Request::driver() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_AddVRDeviceInfo_Request.driver)
  return _internal_driver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDataPublisher_AddVRDeviceInfo_Request::set_driver(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 driver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDataPublisher_AddVRDeviceInfo_Request.driver)
}
inline std::string* CDataPublisher_AddVRDeviceInfo_Request::mutable_driver() {
  std::string* _s = _internal_mutable_driver();
  // @@protoc_insertion_point(field_mutable:CDataPublisher_AddVRDeviceInfo_Request.driver)
  return _s;
}
inline const std::string& CDataPublisher_AddVRDeviceInfo_Request::_internal_driver() const {
  return driver_.Get();
}
inline void CDataPublisher_AddVRDeviceInfo_Request::_internal_set_driver(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  driver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDataPublisher_AddVRDeviceInfo_Request::_internal_mutable_driver() {
  _has_bits_[0] |= 0x00000004u;
  return driver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDataPublisher_AddVRDeviceInfo_Request::release_driver() {
  // @@protoc_insertion_point(field_release:CDataPublisher_AddVRDeviceInfo_Request.driver)
  if (!_internal_has_driver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = driver_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDataPublisher_AddVRDeviceInfo_Request::set_allocated_driver(std::string* driver) {
  if (driver != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  driver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDataPublisher_AddVRDeviceInfo_Request.driver)
}

// optional string controller_type = 4 [(.description) = "controller type for the device. Can be an empty string for devices with no inputs"];
inline bool CDataPublisher_AddVRDeviceInfo_Request::_internal_has_controller_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDataPublisher_AddVRDeviceInfo_Request::has_controller_type() const {
  return _internal_has_controller_type();
}
inline void CDataPublisher_AddVRDeviceInfo_Request::clear_controller_type() {
  controller_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CDataPublisher_AddVRDeviceInfo_Request::controller_type() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_AddVRDeviceInfo_Request.controller_type)
  return _internal_controller_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDataPublisher_AddVRDeviceInfo_Request::set_controller_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 controller_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDataPublisher_AddVRDeviceInfo_Request.controller_type)
}
inline std::string* CDataPublisher_AddVRDeviceInfo_Request::mutable_controller_type() {
  std::string* _s = _internal_mutable_controller_type();
  // @@protoc_insertion_point(field_mutable:CDataPublisher_AddVRDeviceInfo_Request.controller_type)
  return _s;
}
inline const std::string& CDataPublisher_AddVRDeviceInfo_Request::_internal_controller_type() const {
  return controller_type_.Get();
}
inline void CDataPublisher_AddVRDeviceInfo_Request::_internal_set_controller_type(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  controller_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDataPublisher_AddVRDeviceInfo_Request::_internal_mutable_controller_type() {
  _has_bits_[0] |= 0x00000008u;
  return controller_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDataPublisher_AddVRDeviceInfo_Request::release_controller_type() {
  // @@protoc_insertion_point(field_release:CDataPublisher_AddVRDeviceInfo_Request.controller_type)
  if (!_internal_has_controller_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = controller_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDataPublisher_AddVRDeviceInfo_Request::set_allocated_controller_type(std::string* controller_type) {
  if (controller_type != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  controller_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controller_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    controller_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDataPublisher_AddVRDeviceInfo_Request.controller_type)
}

// optional int32 device_class = 5 [(.description) = "Class of the device. HMD=1, controller=2, tracker=3, base=4"];
inline bool CDataPublisher_AddVRDeviceInfo_Request::_internal_has_device_class() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDataPublisher_AddVRDeviceInfo_Request::has_device_class() const {
  return _internal_has_device_class();
}
inline void CDataPublisher_AddVRDeviceInfo_Request::clear_device_class() {
  device_class_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CDataPublisher_AddVRDeviceInfo_Request::_internal_device_class() const {
  return device_class_;
}
inline int32_t CDataPublisher_AddVRDeviceInfo_Request::device_class() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_AddVRDeviceInfo_Request.device_class)
  return _internal_device_class();
}
inline void CDataPublisher_AddVRDeviceInfo_Request::_internal_set_device_class(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  device_class_ = value;
}
inline void CDataPublisher_AddVRDeviceInfo_Request::set_device_class(int32_t value) {
  _internal_set_device_class(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_AddVRDeviceInfo_Request.device_class)
}

// -------------------------------------------------------------------

// CDataPublisher_AddVRDeviceInfo_Response

// optional uint32 result = 1 [(.description) = "k_EResultOK, etc."];
inline bool CDataPublisher_AddVRDeviceInfo_Response::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDataPublisher_AddVRDeviceInfo_Response::has_result() const {
  return _internal_has_result();
}
inline void CDataPublisher_AddVRDeviceInfo_Response::clear_result() {
  result_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDataPublisher_AddVRDeviceInfo_Response::_internal_result() const {
  return result_;
}
inline uint32_t CDataPublisher_AddVRDeviceInfo_Response::result() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_AddVRDeviceInfo_Response.result)
  return _internal_result();
}
inline void CDataPublisher_AddVRDeviceInfo_Response::_internal_set_result(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CDataPublisher_AddVRDeviceInfo_Response::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_AddVRDeviceInfo_Response.result)
}

// optional uint32 ref = 2 [(.description) = "The reference number of the inserted device"];
inline bool CDataPublisher_AddVRDeviceInfo_Response::_internal_has_ref() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDataPublisher_AddVRDeviceInfo_Response::has_ref() const {
  return _internal_has_ref();
}
inline void CDataPublisher_AddVRDeviceInfo_Response::clear_ref() {
  ref_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDataPublisher_AddVRDeviceInfo_Response::_internal_ref() const {
  return ref_;
}
inline uint32_t CDataPublisher_AddVRDeviceInfo_Response::ref() const {
  // @@protoc_insertion_point(field_get:CDataPublisher_AddVRDeviceInfo_Response.ref)
  return _internal_ref();
}
inline void CDataPublisher_AddVRDeviceInfo_Response::_internal_set_ref(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ref_ = value;
}
inline void CDataPublisher_AddVRDeviceInfo_Response::set_ref(uint32_t value) {
  _internal_set_ref(value);
  // @@protoc_insertion_point(field_set:CDataPublisher_AddVRDeviceInfo_Response.ref)
}

// -------------------------------------------------------------------

// CValveHWSurvey_GetSurveySchedule_Request

// optional string surveydatetoken = 1;
inline bool CValveHWSurvey_GetSurveySchedule_Request::_internal_has_surveydatetoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CValveHWSurvey_GetSurveySchedule_Request::has_surveydatetoken() const {
  return _internal_has_surveydatetoken();
}
inline void CValveHWSurvey_GetSurveySchedule_Request::clear_surveydatetoken() {
  surveydatetoken_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CValveHWSurvey_GetSurveySchedule_Request::surveydatetoken() const {
  // @@protoc_insertion_point(field_get:CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken)
  return _internal_surveydatetoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CValveHWSurvey_GetSurveySchedule_Request::set_surveydatetoken(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 surveydatetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken)
}
inline std::string* CValveHWSurvey_GetSurveySchedule_Request::mutable_surveydatetoken() {
  std::string* _s = _internal_mutable_surveydatetoken();
  // @@protoc_insertion_point(field_mutable:CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken)
  return _s;
}
inline const std::string& CValveHWSurvey_GetSurveySchedule_Request::_internal_surveydatetoken() const {
  return surveydatetoken_.Get();
}
inline void CValveHWSurvey_GetSurveySchedule_Request::_internal_set_surveydatetoken(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  surveydatetoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CValveHWSurvey_GetSurveySchedule_Request::_internal_mutable_surveydatetoken() {
  _has_bits_[0] |= 0x00000001u;
  return surveydatetoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CValveHWSurvey_GetSurveySchedule_Request::release_surveydatetoken() {
  // @@protoc_insertion_point(field_release:CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken)
  if (!_internal_has_surveydatetoken()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = surveydatetoken_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (surveydatetoken_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    surveydatetoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CValveHWSurvey_GetSurveySchedule_Request::set_allocated_surveydatetoken(std::string* surveydatetoken) {
  if (surveydatetoken != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  surveydatetoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), surveydatetoken,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (surveydatetoken_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    surveydatetoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CValveHWSurvey_GetSurveySchedule_Request.surveydatetoken)
}

// optional fixed64 surveydatetokenversion = 2;
inline bool CValveHWSurvey_GetSurveySchedule_Request::_internal_has_surveydatetokenversion() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CValveHWSurvey_GetSurveySchedule_Request::has_surveydatetokenversion() const {
  return _internal_has_surveydatetokenversion();
}
inline void CValveHWSurvey_GetSurveySchedule_Request::clear_surveydatetokenversion() {
  surveydatetokenversion_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CValveHWSurvey_GetSurveySchedule_Request::_internal_surveydatetokenversion() const {
  return surveydatetokenversion_;
}
inline uint64_t CValveHWSurvey_GetSurveySchedule_Request::surveydatetokenversion() const {
  // @@protoc_insertion_point(field_get:CValveHWSurvey_GetSurveySchedule_Request.surveydatetokenversion)
  return _internal_surveydatetokenversion();
}
inline void CValveHWSurvey_GetSurveySchedule_Request::_internal_set_surveydatetokenversion(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  surveydatetokenversion_ = value;
}
inline void CValveHWSurvey_GetSurveySchedule_Request::set_surveydatetokenversion(uint64_t value) {
  _internal_set_surveydatetokenversion(value);
  // @@protoc_insertion_point(field_set:CValveHWSurvey_GetSurveySchedule_Request.surveydatetokenversion)
}

// -------------------------------------------------------------------

// CValveHWSurvey_GetSurveySchedule_Response

// optional uint32 surveydatetoken = 1;
inline bool CValveHWSurvey_GetSurveySchedule_Response::_internal_has_surveydatetoken() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CValveHWSurvey_GetSurveySchedule_Response::has_surveydatetoken() const {
  return _internal_has_surveydatetoken();
}
inline void CValveHWSurvey_GetSurveySchedule_Response::clear_surveydatetoken() {
  surveydatetoken_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CValveHWSurvey_GetSurveySchedule_Response::_internal_surveydatetoken() const {
  return surveydatetoken_;
}
inline uint32_t CValveHWSurvey_GetSurveySchedule_Response::surveydatetoken() const {
  // @@protoc_insertion_point(field_get:CValveHWSurvey_GetSurveySchedule_Response.surveydatetoken)
  return _internal_surveydatetoken();
}
inline void CValveHWSurvey_GetSurveySchedule_Response::_internal_set_surveydatetoken(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  surveydatetoken_ = value;
}
inline void CValveHWSurvey_GetSurveySchedule_Response::set_surveydatetoken(uint32_t value) {
  _internal_set_surveydatetoken(value);
  // @@protoc_insertion_point(field_set:CValveHWSurvey_GetSurveySchedule_Response.surveydatetoken)
}

// optional fixed64 surveydatetokenversion = 2;
inline bool CValveHWSurvey_GetSurveySchedule_Response::_internal_has_surveydatetokenversion() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CValveHWSurvey_GetSurveySchedule_Response::has_surveydatetokenversion() const {
  return _internal_has_surveydatetokenversion();
}
inline void CValveHWSurvey_GetSurveySchedule_Response::clear_surveydatetokenversion() {
  surveydatetokenversion_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CValveHWSurvey_GetSurveySchedule_Response::_internal_surveydatetokenversion() const {
  return surveydatetokenversion_;
}
inline uint64_t CValveHWSurvey_GetSurveySchedule_Response::surveydatetokenversion() const {
  // @@protoc_insertion_point(field_get:CValveHWSurvey_GetSurveySchedule_Response.surveydatetokenversion)
  return _internal_surveydatetokenversion();
}
inline void CValveHWSurvey_GetSurveySchedule_Response::_internal_set_surveydatetokenversion(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  surveydatetokenversion_ = value;
}
inline void CValveHWSurvey_GetSurveySchedule_Response::set_surveydatetokenversion(uint64_t value) {
  _internal_set_surveydatetokenversion(value);
  // @@protoc_insertion_point(field_set:CValveHWSurvey_GetSurveySchedule_Response.surveydatetokenversion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fdatapublisher_2esteamclient_2eproto
