// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_econ.steamclient.proto

#include "steammessages_econ.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assetids_()
  , currencyids_()
  , tradable_only_(false)
  , marketable_only_(false){}
struct CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptionsDefaultTypeInternal {
  constexpr CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptionsDefaultTypeInternal() {}
  union {
    CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptionsDefaultTypeInternal _CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions_default_instance_;
constexpr CEcon_GetInventoryItemsWithDescriptions_Request::CEcon_GetInventoryItemsWithDescriptions_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filters_(nullptr)
  , steamid_(uint64_t{0u})
  , contextid_(uint64_t{0u})
  , appid_(0u)
  , get_descriptions_(false)
  , for_trade_offer_verification_(false)
  , start_assetid_(uint64_t{0u})
  , count_(0){}
struct CEcon_GetInventoryItemsWithDescriptions_RequestDefaultTypeInternal {
  constexpr CEcon_GetInventoryItemsWithDescriptions_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEcon_GetInventoryItemsWithDescriptions_RequestDefaultTypeInternal() {}
  union {
    CEcon_GetInventoryItemsWithDescriptions_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEcon_GetInventoryItemsWithDescriptions_RequestDefaultTypeInternal _CEcon_GetInventoryItemsWithDescriptions_Request_default_instance_;
constexpr CEcon_Asset::CEcon_Asset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contextid_(uint64_t{0u})
  , assetid_(uint64_t{0u})
  , appid_(0u)
  , currencyid_(0u)
  , classid_(uint64_t{0u})
  , instanceid_(uint64_t{0u})
  , amount_(int64_t{0})
  , est_usd_(int64_t{0})
  , missing_(false){}
struct CEcon_AssetDefaultTypeInternal {
  constexpr CEcon_AssetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEcon_AssetDefaultTypeInternal() {}
  union {
    CEcon_Asset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEcon_AssetDefaultTypeInternal _CEcon_Asset_default_instance_;
constexpr CEconItem_DescriptionLine::CEconItem_DescriptionLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CEconItem_DescriptionLineDefaultTypeInternal {
  constexpr CEconItem_DescriptionLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEconItem_DescriptionLineDefaultTypeInternal() {}
  union {
    CEconItem_DescriptionLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEconItem_DescriptionLineDefaultTypeInternal _CEconItem_DescriptionLine_default_instance_;
constexpr CEconItem_Action::CEconItem_Action(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : link_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CEconItem_ActionDefaultTypeInternal {
  constexpr CEconItem_ActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEconItem_ActionDefaultTypeInternal() {}
  union {
    CEconItem_Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEconItem_ActionDefaultTypeInternal _CEconItem_Action_default_instance_;
constexpr CEconItem_Description::CEconItem_Description(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : descriptions_()
  , actions_()
  , owner_descriptions_()
  , owner_actions_()
  , fraudwarnings_()
  , market_actions_()
  , tags_()
  , background_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_url_large_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , market_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , market_hash_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , market_fee_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_expiration_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , market_buy_country_restriction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , market_sell_country_restriction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contained_item_(nullptr)
  , classid_(uint64_t{0u})
  , instanceid_(uint64_t{0u})
  , appid_(0)
  , currency_(false)
  , tradable_(false)
  , commodity_(false)
  , marketable_(false)
  , market_tradable_restriction_(0)
  , market_marketable_restriction_(0)
  , market_fee_app_(0){}
struct CEconItem_DescriptionDefaultTypeInternal {
  constexpr CEconItem_DescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEconItem_DescriptionDefaultTypeInternal() {}
  union {
    CEconItem_Description _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEconItem_DescriptionDefaultTypeInternal _CEconItem_Description_default_instance_;
constexpr CEconItem_Tag::CEconItem_Tag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : category_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , internal_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , localized_category_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , localized_tag_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u){}
struct CEconItem_TagDefaultTypeInternal {
  constexpr CEconItem_TagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEconItem_TagDefaultTypeInternal() {}
  union {
    CEconItem_Tag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEconItem_TagDefaultTypeInternal _CEconItem_Tag_default_instance_;
constexpr CEcon_GetInventoryItemsWithDescriptions_Response::CEcon_GetInventoryItemsWithDescriptions_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assets_()
  , descriptions_()
  , missing_assets_()
  , last_assetid_(uint64_t{0u})
  , more_items_(false)
  , total_inventory_count_(0u){}
struct CEcon_GetInventoryItemsWithDescriptions_ResponseDefaultTypeInternal {
  constexpr CEcon_GetInventoryItemsWithDescriptions_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEcon_GetInventoryItemsWithDescriptions_ResponseDefaultTypeInternal() {}
  union {
    CEcon_GetInventoryItemsWithDescriptions_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEcon_GetInventoryItemsWithDescriptions_ResponseDefaultTypeInternal _CEcon_GetInventoryItemsWithDescriptions_Response_default_instance_;
constexpr CEcon_GetTradeOfferAccessToken_Request::CEcon_GetTradeOfferAccessToken_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : generate_new_token_(false){}
struct CEcon_GetTradeOfferAccessToken_RequestDefaultTypeInternal {
  constexpr CEcon_GetTradeOfferAccessToken_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEcon_GetTradeOfferAccessToken_RequestDefaultTypeInternal() {}
  union {
    CEcon_GetTradeOfferAccessToken_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEcon_GetTradeOfferAccessToken_RequestDefaultTypeInternal _CEcon_GetTradeOfferAccessToken_Request_default_instance_;
constexpr CEcon_GetTradeOfferAccessToken_Response::CEcon_GetTradeOfferAccessToken_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trade_offer_access_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CEcon_GetTradeOfferAccessToken_ResponseDefaultTypeInternal {
  constexpr CEcon_GetTradeOfferAccessToken_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEcon_GetTradeOfferAccessToken_ResponseDefaultTypeInternal() {}
  union {
    CEcon_GetTradeOfferAccessToken_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEcon_GetTradeOfferAccessToken_ResponseDefaultTypeInternal _CEcon_GetTradeOfferAccessToken_Response_default_instance_;
constexpr CEcon_ClientGetItemShopOverlayAuthURL_Request::CEcon_ClientGetItemShopOverlayAuthURL_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : return_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CEcon_ClientGetItemShopOverlayAuthURL_RequestDefaultTypeInternal {
  constexpr CEcon_ClientGetItemShopOverlayAuthURL_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEcon_ClientGetItemShopOverlayAuthURL_RequestDefaultTypeInternal() {}
  union {
    CEcon_ClientGetItemShopOverlayAuthURL_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEcon_ClientGetItemShopOverlayAuthURL_RequestDefaultTypeInternal _CEcon_ClientGetItemShopOverlayAuthURL_Request_default_instance_;
constexpr CEcon_ClientGetItemShopOverlayAuthURL_Response::CEcon_ClientGetItemShopOverlayAuthURL_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CEcon_ClientGetItemShopOverlayAuthURL_ResponseDefaultTypeInternal {
  constexpr CEcon_ClientGetItemShopOverlayAuthURL_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEcon_ClientGetItemShopOverlayAuthURL_ResponseDefaultTypeInternal() {}
  union {
    CEcon_ClientGetItemShopOverlayAuthURL_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEcon_ClientGetItemShopOverlayAuthURL_ResponseDefaultTypeInternal _CEcon_ClientGetItemShopOverlayAuthURL_Response_default_instance_;
constexpr CEcon_GetAssetClassInfo_Request_Class::CEcon_GetAssetClassInfo_Request_Class(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : classid_(uint64_t{0u})
  , instanceid_(uint64_t{0u}){}
struct CEcon_GetAssetClassInfo_Request_ClassDefaultTypeInternal {
  constexpr CEcon_GetAssetClassInfo_Request_ClassDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEcon_GetAssetClassInfo_Request_ClassDefaultTypeInternal() {}
  union {
    CEcon_GetAssetClassInfo_Request_Class _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEcon_GetAssetClassInfo_Request_ClassDefaultTypeInternal _CEcon_GetAssetClassInfo_Request_Class_default_instance_;
constexpr CEcon_GetAssetClassInfo_Request::CEcon_GetAssetClassInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : classes_()
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , high_pri_(false){}
struct CEcon_GetAssetClassInfo_RequestDefaultTypeInternal {
  constexpr CEcon_GetAssetClassInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEcon_GetAssetClassInfo_RequestDefaultTypeInternal() {}
  union {
    CEcon_GetAssetClassInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEcon_GetAssetClassInfo_RequestDefaultTypeInternal _CEcon_GetAssetClassInfo_Request_default_instance_;
constexpr CEcon_GetAssetClassInfo_Response::CEcon_GetAssetClassInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : descriptions_(){}
struct CEcon_GetAssetClassInfo_ResponseDefaultTypeInternal {
  constexpr CEcon_GetAssetClassInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEcon_GetAssetClassInfo_ResponseDefaultTypeInternal() {}
  union {
    CEcon_GetAssetClassInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEcon_GetAssetClassInfo_ResponseDefaultTypeInternal _CEcon_GetAssetClassInfo_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fecon_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fecon_2esteamclient_2eproto[1];

const uint32_t TableStruct_steammessages_5fecon_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions, assetids_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions, currencyids_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions, tradable_only_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions, marketable_only_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request, contextid_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request, get_descriptions_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request, for_trade_offer_verification_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request, filters_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request, start_assetid_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Request, count_),
  2,
  4,
  3,
  5,
  6,
  0,
  1,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CEcon_Asset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEcon_Asset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEcon_Asset, appid_),
  PROTOBUF_FIELD_OFFSET(::CEcon_Asset, contextid_),
  PROTOBUF_FIELD_OFFSET(::CEcon_Asset, assetid_),
  PROTOBUF_FIELD_OFFSET(::CEcon_Asset, classid_),
  PROTOBUF_FIELD_OFFSET(::CEcon_Asset, instanceid_),
  PROTOBUF_FIELD_OFFSET(::CEcon_Asset, currencyid_),
  PROTOBUF_FIELD_OFFSET(::CEcon_Asset, amount_),
  PROTOBUF_FIELD_OFFSET(::CEcon_Asset, missing_),
  PROTOBUF_FIELD_OFFSET(::CEcon_Asset, est_usd_),
  2,
  0,
  1,
  4,
  5,
  3,
  6,
  8,
  7,
  PROTOBUF_FIELD_OFFSET(::CEconItem_DescriptionLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_DescriptionLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEconItem_DescriptionLine, type_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_DescriptionLine, value_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_DescriptionLine, color_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_DescriptionLine, label_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CEconItem_Action, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEconItem_Action, link_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Action, name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, appid_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, classid_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, instanceid_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, currency_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, background_color_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, icon_url_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, icon_url_large_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, descriptions_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, tradable_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, actions_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, owner_descriptions_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, owner_actions_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, fraudwarnings_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, name_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, name_color_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, type_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, market_name_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, market_hash_name_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, market_fee_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, market_fee_app_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, contained_item_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, market_actions_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, commodity_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, market_tradable_restriction_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, market_marketable_restriction_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, marketable_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, tags_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, item_expiration_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, market_buy_country_restriction_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Description, market_sell_country_restriction_),
  15,
  13,
  14,
  16,
  0,
  1,
  2,
  ~0u,
  17,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  22,
  12,
  ~0u,
  18,
  20,
  21,
  19,
  ~0u,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CEconItem_Tag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEconItem_Tag, appid_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Tag, category_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Tag, internal_name_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Tag, localized_category_name_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Tag, localized_tag_name_),
  PROTOBUF_FIELD_OFFSET(::CEconItem_Tag, color_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Response, assets_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Response, descriptions_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Response, missing_assets_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Response, more_items_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Response, last_assetid_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetInventoryItemsWithDescriptions_Response, total_inventory_count_),
  ~0u,
  ~0u,
  ~0u,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CEcon_GetTradeOfferAccessToken_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetTradeOfferAccessToken_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEcon_GetTradeOfferAccessToken_Request, generate_new_token_),
  0,
  PROTOBUF_FIELD_OFFSET(::CEcon_GetTradeOfferAccessToken_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetTradeOfferAccessToken_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEcon_GetTradeOfferAccessToken_Response, trade_offer_access_token_),
  0,
  PROTOBUF_FIELD_OFFSET(::CEcon_ClientGetItemShopOverlayAuthURL_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEcon_ClientGetItemShopOverlayAuthURL_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEcon_ClientGetItemShopOverlayAuthURL_Request, return_url_),
  0,
  PROTOBUF_FIELD_OFFSET(::CEcon_ClientGetItemShopOverlayAuthURL_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEcon_ClientGetItemShopOverlayAuthURL_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEcon_ClientGetItemShopOverlayAuthURL_Response, url_),
  0,
  PROTOBUF_FIELD_OFFSET(::CEcon_GetAssetClassInfo_Request_Class, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetAssetClassInfo_Request_Class, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEcon_GetAssetClassInfo_Request_Class, classid_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetAssetClassInfo_Request_Class, instanceid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CEcon_GetAssetClassInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetAssetClassInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEcon_GetAssetClassInfo_Request, language_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetAssetClassInfo_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetAssetClassInfo_Request, classes_),
  PROTOBUF_FIELD_OFFSET(::CEcon_GetAssetClassInfo_Request, high_pri_),
  0,
  1,
  ~0u,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CEcon_GetAssetClassInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEcon_GetAssetClassInfo_Response, descriptions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions)},
  { 14, 29, -1, sizeof(::CEcon_GetInventoryItemsWithDescriptions_Request)},
  { 38, 53, -1, sizeof(::CEcon_Asset)},
  { 62, 72, -1, sizeof(::CEconItem_DescriptionLine)},
  { 76, 84, -1, sizeof(::CEconItem_Action)},
  { 86, 122, -1, sizeof(::CEconItem_Description)},
  { 152, 164, -1, sizeof(::CEconItem_Tag)},
  { 170, 182, -1, sizeof(::CEcon_GetInventoryItemsWithDescriptions_Response)},
  { 188, 195, -1, sizeof(::CEcon_GetTradeOfferAccessToken_Request)},
  { 196, 203, -1, sizeof(::CEcon_GetTradeOfferAccessToken_Response)},
  { 204, 211, -1, sizeof(::CEcon_ClientGetItemShopOverlayAuthURL_Request)},
  { 212, 219, -1, sizeof(::CEcon_ClientGetItemShopOverlayAuthURL_Response)},
  { 220, 228, -1, sizeof(::CEcon_GetAssetClassInfo_Request_Class)},
  { 230, 240, -1, sizeof(::CEcon_GetAssetClassInfo_Request)},
  { 244, -1, -1, sizeof(::CEcon_GetAssetClassInfo_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEcon_GetInventoryItemsWithDescriptions_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEcon_Asset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEconItem_DescriptionLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEconItem_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEconItem_Description_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEconItem_Tag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEcon_GetInventoryItemsWithDescriptions_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEcon_GetTradeOfferAccessToken_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEcon_GetTradeOfferAccessToken_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEcon_ClientGetItemShopOverlayAuthURL_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEcon_ClientGetItemShopOverlayAuthURL_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEcon_GetAssetClassInfo_Request_Class_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEcon_GetAssetClassInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEcon_GetAssetClassInfo_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fecon_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$steammessages_econ.steamclient.proto\032\030"
  "steammessages_base.proto\032,steammessages_"
  "unified_base.steamclient.proto\"\225\003\n/CEcon"
  "_GetInventoryItemsWithDescriptions_Reque"
  "st\022\017\n\007steamid\030\001 \001(\006\022\r\n\005appid\030\002 \001(\r\022\021\n\tco"
  "ntextid\030\003 \001(\004\022\030\n\020get_descriptions\030\004 \001(\010\022"
  "$\n\034for_trade_offer_verification\030\n \001(\010\022\020\n"
  "\010language\030\005 \001(\t\022O\n\007filters\030\006 \001(\0132>.CEcon"
  "_GetInventoryItemsWithDescriptions_Reque"
  "st.FilterOptions\022\025\n\rstart_assetid\030\010 \001(\004\022"
  "\r\n\005count\030\t \001(\005\032f\n\rFilterOptions\022\020\n\010asset"
  "ids\030\001 \003(\004\022\023\n\013currencyids\030\002 \003(\r\022\025\n\rtradab"
  "le_only\030\003 \001(\010\022\027\n\017marketable_only\030\004 \001(\010\"\347"
  "\001\n\013CEcon_Asset\022\r\n\005appid\030\001 \001(\r\022\021\n\tcontext"
  "id\030\002 \001(\004\022\017\n\007assetid\030\003 \001(\004\022\017\n\007classid\030\004 \001"
  "(\004\022\022\n\ninstanceid\030\005 \001(\004\022N\n\ncurrencyid\030\006 \001"
  "(\rB:\202\265\0306Set currencyid if it\'s a currenc"
  "y, assetid for an item\022\016\n\006amount\030\007 \001(\003\022\017"
  "\n\007missing\030\010 \001(\010\022\017\n\007est_usd\030\t \001(\003\"V\n\031CEco"
  "nItem_DescriptionLine\022\014\n\004type\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\t\022\r\n\005color\030\003 \001(\t\022\r\n\005label\030\004 \001(\t"
  "\".\n\020CEconItem_Action\022\014\n\004link\030\001 \001(\t\022\014\n\004na"
  "me\030\002 \001(\t\"\343\006\n\025CEconItem_Description\022\r\n\005ap"
  "pid\030\001 \001(\005\022\017\n\007classid\030\002 \001(\004\022\022\n\ninstanceid"
  "\030\003 \001(\004\022\020\n\010currency\030\004 \001(\010\022\030\n\020background_c"
  "olor\030\005 \001(\t\022\020\n\010icon_url\030\006 \001(\t\022\026\n\016icon_url"
  "_large\030\007 \001(\t\0220\n\014descriptions\030\010 \003(\0132\032.CEc"
  "onItem_DescriptionLine\022\020\n\010tradable\030\t \001(\010"
  "\022\"\n\007actions\030\n \003(\0132\021.CEconItem_Action\0226\n\022"
  "owner_descriptions\030\013 \003(\0132\032.CEconItem_Des"
  "criptionLine\022(\n\rowner_actions\030\014 \003(\0132\021.CE"
  "conItem_Action\022\025\n\rfraudwarnings\030\r \003(\t\022\014\n"
  "\004name\030\016 \001(\t\022\022\n\nname_color\030\017 \001(\t\022\014\n\004type\030"
  "\020 \001(\t\022\023\n\013market_name\030\021 \001(\t\022\030\n\020market_has"
  "h_name\030\022 \001(\t\022\022\n\nmarket_fee\030\023 \001(\t\022\026\n\016mark"
  "et_fee_app\030\034 \001(\005\022.\n\016contained_item\030\024 \001(\013"
  "2\026.CEconItem_Description\022)\n\016market_actio"
  "ns\030\025 \003(\0132\021.CEconItem_Action\022\021\n\tcommodity"
  "\030\026 \001(\010\022#\n\033market_tradable_restriction\030\027 "
  "\001(\005\022%\n\035market_marketable_restriction\030\030 \001"
  "(\005\022\022\n\nmarketable\030\031 \001(\010\022\034\n\004tags\030\032 \003(\0132\016.C"
  "EconItem_Tag\022\027\n\017item_expiration\030\033 \001(\t\022&\n"
  "\036market_buy_country_restriction\030\036 \001(\t\022\'\n"
  "\037market_sell_country_restriction\030\037 \001(\t\"\230"
  "\003\n\rCEconItem_Tag\0221\n\005appid\030\001 \001(\rB\"\202\265\030\036The"
  " app that contains the item\022J\n\010category\030"
  "\002 \001(\tB8\202\265\0304The internal name of the cate"
  "gory the tag belongs to\0227\n\rinternal_name"
  "\030\003 \001(\tB \202\265\030\034The internal name of the tag"
  "\022G\n\027localized_category_name\030\004 \001(\tB&\202\265\030\"T"
  "he localized name of the category\022=\n\022loc"
  "alized_tag_name\030\005 \001(\tB!\202\265\030\035The localized"
  " name of the tag\022G\n\005color\030\006 \001(\tB8\202\265\0304The"
  " color to use when displaying the tag to"
  " the user\"\304\002\n0CEcon_GetInventoryItemsWit"
  "hDescriptions_Response\022\034\n\006assets\030\001 \003(\0132\014"
  ".CEcon_Asset\022,\n\014descriptions\030\002 \003(\0132\026.CEc"
  "onItem_Description\022{\n\016missing_assets\030\003 \003"
  "(\0132\014.CEcon_AssetBU\202\265\030QThis list of asset"
  "s in the original list we could not find"
  " in the users inventory\022\022\n\nmore_items\030\004 "
  "\001(\010\022\024\n\014last_assetid\030\005 \001(\004\022\035\n\025total_inven"
  "tory_count\030\006 \001(\r\"D\n&CEcon_GetTradeOfferA"
  "ccessToken_Request\022\032\n\022generate_new_token"
  "\030\001 \001(\010\"K\n\'CEcon_GetTradeOfferAccessToken"
  "_Response\022 \n\030trade_offer_access_token\030\001 "
  "\001(\t\"C\n-CEcon_ClientGetItemShopOverlayAut"
  "hURL_Request\022\022\n\nreturn_url\030\001 \001(\t\"=\n.CEco"
  "n_ClientGetItemShopOverlayAuthURL_Respon"
  "se\022\013\n\003url\030\001 \001(\t\"\273\001\n\037CEcon_GetAssetClassI"
  "nfo_Request\022\020\n\010language\030\001 \001(\t\022\r\n\005appid\030\002"
  " \001(\r\0227\n\007classes\030\003 \003(\0132&.CEcon_GetAssetCl"
  "assInfo_Request.Class\022\020\n\010high_pri\030\004 \001(\010\032"
  ",\n\005Class\022\017\n\007classid\030\001 \001(\004\022\022\n\ninstanceid\030"
  "\002 \001(\004\"P\n CEcon_GetAssetClassInfo_Respons"
  "e\022,\n\014descriptions\030\001 \003(\0132\026.CEconItem_Desc"
  "ription2\266\006\n\004Econ\022\321\001\n!GetInventoryItemsWi"
  "thDescriptions\0220.CEcon_GetInventoryItems"
  "WithDescriptions_Request\0321.CEcon_GetInve"
  "ntoryItemsWithDescriptions_Response\"G\202\265\030"
  "CGets a set of items from a users invent"
  "ory, along with descriptions\022\232\001\n\030GetTrad"
  "eOfferAccessToken\022\'.CEcon_GetTradeOfferA"
  "ccessToken_Request\032(.CEcon_GetTradeOffer"
  "AccessToken_Response\"+\202\265\030\'Get the user\'s"
  " trade offer access token\022\331\001\n\037ClientGetI"
  "temShopOverlayAuthURL\022..CEcon_ClientGetI"
  "temShopOverlayAuthURL_Request\032/.CEcon_Cl"
  "ientGetItemShopOverlayAuthURL_Response\"U"
  "\202\265\030QGenerates a URL which sets a secure "
  "cookie for in-game-browser itemshop purc"
  "hases\022\237\001\n\021GetAssetClassInfo\022 .CEcon_GetA"
  "ssetClassInfo_Request\032!.CEcon_GetAssetCl"
  "assInfo_Response\"E\202\265\030AReturns descriptio"
  "n information about the passed in asset "
  "classes\032\?\202\265\030;A service that provides com"
  "munication with the econ serversB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fecon_2esteamclient_2eproto_deps[2] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fecon_2esteamclient_2eproto = {
  false, false, 3877, descriptor_table_protodef_steammessages_5fecon_2esteamclient_2eproto, "steammessages_econ.steamclient.proto", 
  &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once, descriptor_table_steammessages_5fecon_2esteamclient_2eproto_deps, 2, 15,
  schemas, file_default_instances, TableStruct_steammessages_5fecon_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fecon_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fecon_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fecon_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fecon_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fecon_2esteamclient_2eproto(&descriptor_table_steammessages_5fecon_2esteamclient_2eproto);

// ===================================================================

class CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions>()._has_bits_);
  static void set_has_tradable_only(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_marketable_only(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  assetids_(arena),
  currencyids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions)
}
CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions(const CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      assetids_(from.assetids_),
      currencyids_(from.currencyids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tradable_only_, &from.tradable_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&marketable_only_) -
    reinterpret_cast<char*>(&tradable_only_)) + sizeof(marketable_only_));
  // @@protoc_insertion_point(copy_constructor:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions)
}

inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tradable_only_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&marketable_only_) -
    reinterpret_cast<char*>(&tradable_only_)) + sizeof(marketable_only_));
}

CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::~CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions() {
  // @@protoc_insertion_point(destructor:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::ArenaDtor(void* object) {
  CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* _this = reinterpret_cast< CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* >(object);
  (void)_this;
}
void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assetids_.Clear();
  currencyids_.Clear();
  ::memset(&tradable_only_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marketable_only_) -
      reinterpret_cast<char*>(&tradable_only_)) + sizeof(marketable_only_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 assetids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_assetids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_assetids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 currencyids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_currencyids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_currencyids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tradable_only = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tradable_only(&has_bits);
          tradable_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool marketable_only = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_marketable_only(&has_bits);
          marketable_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 assetids = 1;
  for (int i = 0, n = this->_internal_assetids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_assetids(i), target);
  }

  // repeated uint32 currencyids = 2;
  for (int i = 0, n = this->_internal_currencyids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_currencyids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool tradable_only = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_tradable_only(), target);
  }

  // optional bool marketable_only = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_marketable_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions)
  return target;
}

size_t CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 assetids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->assetids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_assetids_size());
    total_size += data_size;
  }

  // repeated uint32 currencyids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->currencyids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_currencyids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool tradable_only = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool marketable_only = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::GetClassData() const { return &_class_data_; }

void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions *>(to)->MergeFrom(
      static_cast<const CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions &>(from));
}


void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::MergeFrom(const CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  assetids_.MergeFrom(from.assetids_);
  currencyids_.MergeFrom(from.currencyids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tradable_only_ = from.tradable_only_;
    }
    if (cached_has_bits & 0x00000002u) {
      marketable_only_ = from.marketable_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::CopyFrom(const CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::IsInitialized() const {
  return true;
}

void CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::InternalSwap(CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  assetids_.InternalSwap(&other->assetids_);
  currencyids_.InternalSwap(&other->currencyids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions, marketable_only_)
      + sizeof(CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::marketable_only_)
      - PROTOBUF_FIELD_OFFSET(CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions, tradable_only_)>(
          reinterpret_cast<char*>(&tradable_only_),
          reinterpret_cast<char*>(&other->tradable_only_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[0]);
}

// ===================================================================

class CEcon_GetInventoryItemsWithDescriptions_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CEcon_GetInventoryItemsWithDescriptions_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_contextid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_get_descriptions(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_for_trade_offer_verification(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions& filters(const CEcon_GetInventoryItemsWithDescriptions_Request* msg);
  static void set_has_filters(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_assetid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions&
CEcon_GetInventoryItemsWithDescriptions_Request::_Internal::filters(const CEcon_GetInventoryItemsWithDescriptions_Request* msg) {
  return *msg->filters_;
}
CEcon_GetInventoryItemsWithDescriptions_Request::CEcon_GetInventoryItemsWithDescriptions_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEcon_GetInventoryItemsWithDescriptions_Request)
}
CEcon_GetInventoryItemsWithDescriptions_Request::CEcon_GetInventoryItemsWithDescriptions_Request(const CEcon_GetInventoryItemsWithDescriptions_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_filters()) {
    filters_ = new ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions(*from.filters_);
  } else {
    filters_ = nullptr;
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:CEcon_GetInventoryItemsWithDescriptions_Request)
}

inline void CEcon_GetInventoryItemsWithDescriptions_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&filters_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&filters_)) + sizeof(count_));
}

CEcon_GetInventoryItemsWithDescriptions_Request::~CEcon_GetInventoryItemsWithDescriptions_Request() {
  // @@protoc_insertion_point(destructor:CEcon_GetInventoryItemsWithDescriptions_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEcon_GetInventoryItemsWithDescriptions_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete filters_;
}

void CEcon_GetInventoryItemsWithDescriptions_Request::ArenaDtor(void* object) {
  CEcon_GetInventoryItemsWithDescriptions_Request* _this = reinterpret_cast< CEcon_GetInventoryItemsWithDescriptions_Request* >(object);
  (void)_this;
}
void CEcon_GetInventoryItemsWithDescriptions_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEcon_GetInventoryItemsWithDescriptions_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEcon_GetInventoryItemsWithDescriptions_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CEcon_GetInventoryItemsWithDescriptions_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(filters_ != nullptr);
      filters_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_assetid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(start_assetid_));
  }
  count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEcon_GetInventoryItemsWithDescriptions_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 contextid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_contextid(&has_bits);
          contextid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool get_descriptions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_get_descriptions(&has_bits);
          get_descriptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string language = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEcon_GetInventoryItemsWithDescriptions_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions filters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_filters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 start_assetid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_start_assetid(&has_bits);
          start_assetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool for_trade_offer_verification = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_for_trade_offer_verification(&has_bits);
          for_trade_offer_verification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEcon_GetInventoryItemsWithDescriptions_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEcon_GetInventoryItemsWithDescriptions_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional uint64 contextid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_contextid(), target);
  }

  // optional bool get_descriptions = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_get_descriptions(), target);
  }

  // optional string language = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEcon_GetInventoryItemsWithDescriptions_Request.language");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language(), target);
  }

  // optional .CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions filters = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::filters(this), target, stream);
  }

  // optional uint64 start_assetid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_start_assetid(), target);
  }

  // optional int32 count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_count(), target);
  }

  // optional bool for_trade_offer_verification = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_for_trade_offer_verification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEcon_GetInventoryItemsWithDescriptions_Request)
  return target;
}

size_t CEcon_GetInventoryItemsWithDescriptions_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEcon_GetInventoryItemsWithDescriptions_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string language = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional .CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions filters = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filters_);
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 contextid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_contextid());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool get_descriptions = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool for_trade_offer_verification = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint64 start_assetid = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_start_assetid());
    }

  }
  // optional int32 count = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEcon_GetInventoryItemsWithDescriptions_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEcon_GetInventoryItemsWithDescriptions_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEcon_GetInventoryItemsWithDescriptions_Request::GetClassData() const { return &_class_data_; }

void CEcon_GetInventoryItemsWithDescriptions_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEcon_GetInventoryItemsWithDescriptions_Request *>(to)->MergeFrom(
      static_cast<const CEcon_GetInventoryItemsWithDescriptions_Request &>(from));
}


void CEcon_GetInventoryItemsWithDescriptions_Request::MergeFrom(const CEcon_GetInventoryItemsWithDescriptions_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEcon_GetInventoryItemsWithDescriptions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_filters()->::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions::MergeFrom(from._internal_filters());
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      contextid_ = from.contextid_;
    }
    if (cached_has_bits & 0x00000010u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000020u) {
      get_descriptions_ = from.get_descriptions_;
    }
    if (cached_has_bits & 0x00000040u) {
      for_trade_offer_verification_ = from.for_trade_offer_verification_;
    }
    if (cached_has_bits & 0x00000080u) {
      start_assetid_ = from.start_assetid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEcon_GetInventoryItemsWithDescriptions_Request::CopyFrom(const CEcon_GetInventoryItemsWithDescriptions_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEcon_GetInventoryItemsWithDescriptions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEcon_GetInventoryItemsWithDescriptions_Request::IsInitialized() const {
  return true;
}

void CEcon_GetInventoryItemsWithDescriptions_Request::InternalSwap(CEcon_GetInventoryItemsWithDescriptions_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEcon_GetInventoryItemsWithDescriptions_Request, count_)
      + sizeof(CEcon_GetInventoryItemsWithDescriptions_Request::count_)
      - PROTOBUF_FIELD_OFFSET(CEcon_GetInventoryItemsWithDescriptions_Request, filters_)>(
          reinterpret_cast<char*>(&filters_),
          reinterpret_cast<char*>(&other->filters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEcon_GetInventoryItemsWithDescriptions_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[1]);
}

// ===================================================================

class CEcon_Asset::_Internal {
 public:
  using HasBits = decltype(std::declval<CEcon_Asset>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contextid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_assetid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_classid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_instanceid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_currencyid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_missing(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_est_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CEcon_Asset::CEcon_Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEcon_Asset)
}
CEcon_Asset::CEcon_Asset(const CEcon_Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&contextid_, &from.contextid_,
    static_cast<size_t>(reinterpret_cast<char*>(&missing_) -
    reinterpret_cast<char*>(&contextid_)) + sizeof(missing_));
  // @@protoc_insertion_point(copy_constructor:CEcon_Asset)
}

inline void CEcon_Asset::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&contextid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&missing_) -
    reinterpret_cast<char*>(&contextid_)) + sizeof(missing_));
}

CEcon_Asset::~CEcon_Asset() {
  // @@protoc_insertion_point(destructor:CEcon_Asset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEcon_Asset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CEcon_Asset::ArenaDtor(void* object) {
  CEcon_Asset* _this = reinterpret_cast< CEcon_Asset* >(object);
  (void)_this;
}
void CEcon_Asset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEcon_Asset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEcon_Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:CEcon_Asset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&contextid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&est_usd_) -
        reinterpret_cast<char*>(&contextid_)) + sizeof(est_usd_));
  }
  missing_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEcon_Asset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 contextid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_contextid(&has_bits);
          contextid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 assetid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_assetid(&has_bits);
          assetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 classid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_classid(&has_bits);
          classid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 instanceid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_instanceid(&has_bits);
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 currencyid = 6 [(.description) = "Set currencyid if it\'s a currency, assetid for an item"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_currencyid(&has_bits);
          currencyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 amount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool missing = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_missing(&has_bits);
          missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 est_usd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_est_usd(&has_bits);
          est_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEcon_Asset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEcon_Asset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 contextid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_contextid(), target);
  }

  // optional uint64 assetid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_assetid(), target);
  }

  // optional uint64 classid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_classid(), target);
  }

  // optional uint64 instanceid = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_instanceid(), target);
  }

  // optional uint32 currencyid = 6 [(.description) = "Set currencyid if it\'s a currency, assetid for an item"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_currencyid(), target);
  }

  // optional int64 amount = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_amount(), target);
  }

  // optional bool missing = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_missing(), target);
  }

  // optional int64 est_usd = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_est_usd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEcon_Asset)
  return target;
}

size_t CEcon_Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEcon_Asset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 contextid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_contextid());
    }

    // optional uint64 assetid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_assetid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 currencyid = 6 [(.description) = "Set currencyid if it\'s a currency, assetid for an item"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_currencyid());
    }

    // optional uint64 classid = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_classid());
    }

    // optional uint64 instanceid = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_instanceid());
    }

    // optional int64 amount = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_amount());
    }

    // optional int64 est_usd = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_est_usd());
    }

  }
  // optional bool missing = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEcon_Asset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEcon_Asset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEcon_Asset::GetClassData() const { return &_class_data_; }

void CEcon_Asset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEcon_Asset *>(to)->MergeFrom(
      static_cast<const CEcon_Asset &>(from));
}


void CEcon_Asset::MergeFrom(const CEcon_Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEcon_Asset)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      contextid_ = from.contextid_;
    }
    if (cached_has_bits & 0x00000002u) {
      assetid_ = from.assetid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      currencyid_ = from.currencyid_;
    }
    if (cached_has_bits & 0x00000010u) {
      classid_ = from.classid_;
    }
    if (cached_has_bits & 0x00000020u) {
      instanceid_ = from.instanceid_;
    }
    if (cached_has_bits & 0x00000040u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000080u) {
      est_usd_ = from.est_usd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_missing(from._internal_missing());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEcon_Asset::CopyFrom(const CEcon_Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEcon_Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEcon_Asset::IsInitialized() const {
  return true;
}

void CEcon_Asset::InternalSwap(CEcon_Asset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEcon_Asset, missing_)
      + sizeof(CEcon_Asset::missing_)
      - PROTOBUF_FIELD_OFFSET(CEcon_Asset, contextid_)>(
          reinterpret_cast<char*>(&contextid_),
          reinterpret_cast<char*>(&other->contextid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEcon_Asset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[2]);
}

// ===================================================================

class CEconItem_DescriptionLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CEconItem_DescriptionLine>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CEconItem_DescriptionLine::CEconItem_DescriptionLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEconItem_DescriptionLine)
}
CEconItem_DescriptionLine::CEconItem_DescriptionLine(const CEconItem_DescriptionLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_color()) {
    color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color(), 
      GetArenaForAllocation());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_label()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CEconItem_DescriptionLine)
}

inline void CEconItem_DescriptionLine::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CEconItem_DescriptionLine::~CEconItem_DescriptionLine() {
  // @@protoc_insertion_point(destructor:CEconItem_DescriptionLine)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEconItem_DescriptionLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CEconItem_DescriptionLine::ArenaDtor(void* object) {
  CEconItem_DescriptionLine* _this = reinterpret_cast< CEconItem_DescriptionLine* >(object);
  (void)_this;
}
void CEconItem_DescriptionLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEconItem_DescriptionLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEconItem_DescriptionLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CEconItem_DescriptionLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      color_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      label_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEconItem_DescriptionLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_DescriptionLine.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_DescriptionLine.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_DescriptionLine.color");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string label = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_DescriptionLine.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEconItem_DescriptionLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEconItem_DescriptionLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_DescriptionLine.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_DescriptionLine.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional string color = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_DescriptionLine.color");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_color(), target);
  }

  // optional string label = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_DescriptionLine.label");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEconItem_DescriptionLine)
  return target;
}

size_t CEconItem_DescriptionLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEconItem_DescriptionLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional string color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_color());
    }

    // optional string label = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEconItem_DescriptionLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEconItem_DescriptionLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEconItem_DescriptionLine::GetClassData() const { return &_class_data_; }

void CEconItem_DescriptionLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEconItem_DescriptionLine *>(to)->MergeFrom(
      static_cast<const CEconItem_DescriptionLine &>(from));
}


void CEconItem_DescriptionLine::MergeFrom(const CEconItem_DescriptionLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEconItem_DescriptionLine)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_color(from._internal_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_label(from._internal_label());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEconItem_DescriptionLine::CopyFrom(const CEconItem_DescriptionLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEconItem_DescriptionLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItem_DescriptionLine::IsInitialized() const {
  return true;
}

void CEconItem_DescriptionLine::InternalSwap(CEconItem_DescriptionLine* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &color_, lhs_arena,
      &other->color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CEconItem_DescriptionLine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[3]);
}

// ===================================================================

class CEconItem_Action::_Internal {
 public:
  using HasBits = decltype(std::declval<CEconItem_Action>()._has_bits_);
  static void set_has_link(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CEconItem_Action::CEconItem_Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEconItem_Action)
}
CEconItem_Action::CEconItem_Action(const CEconItem_Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_link()) {
    link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_link(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CEconItem_Action)
}

inline void CEconItem_Action::SharedCtor() {
link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CEconItem_Action::~CEconItem_Action() {
  // @@protoc_insertion_point(destructor:CEconItem_Action)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEconItem_Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CEconItem_Action::ArenaDtor(void* object) {
  CEconItem_Action* _this = reinterpret_cast< CEconItem_Action* >(object);
  (void)_this;
}
void CEconItem_Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEconItem_Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEconItem_Action::Clear() {
// @@protoc_insertion_point(message_clear_start:CEconItem_Action)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      link_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEconItem_Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Action.link");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Action.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEconItem_Action::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEconItem_Action)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string link = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_link().data(), static_cast<int>(this->_internal_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Action.link");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_link(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Action.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEconItem_Action)
  return target;
}

size_t CEconItem_Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEconItem_Action)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string link = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_link());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEconItem_Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEconItem_Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEconItem_Action::GetClassData() const { return &_class_data_; }

void CEconItem_Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEconItem_Action *>(to)->MergeFrom(
      static_cast<const CEconItem_Action &>(from));
}


void CEconItem_Action::MergeFrom(const CEconItem_Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEconItem_Action)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_link(from._internal_link());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEconItem_Action::CopyFrom(const CEconItem_Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEconItem_Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItem_Action::IsInitialized() const {
  return true;
}

void CEconItem_Action::InternalSwap(CEconItem_Action* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &link_, lhs_arena,
      &other->link_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CEconItem_Action::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[4]);
}

// ===================================================================

class CEconItem_Description::_Internal {
 public:
  using HasBits = decltype(std::declval<CEconItem_Description>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_classid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_instanceid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_background_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_icon_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icon_url_large(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tradable(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_market_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_market_hash_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_market_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_market_fee_app(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::CEconItem_Description& contained_item(const CEconItem_Description* msg);
  static void set_has_contained_item(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_commodity(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_market_tradable_restriction(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_market_marketable_restriction(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_marketable(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_item_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_market_buy_country_restriction(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_market_sell_country_restriction(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::CEconItem_Description&
CEconItem_Description::_Internal::contained_item(const CEconItem_Description* msg) {
  return *msg->contained_item_;
}
CEconItem_Description::CEconItem_Description(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  descriptions_(arena),
  actions_(arena),
  owner_descriptions_(arena),
  owner_actions_(arena),
  fraudwarnings_(arena),
  market_actions_(arena),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEconItem_Description)
}
CEconItem_Description::CEconItem_Description(const CEconItem_Description& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      descriptions_(from.descriptions_),
      actions_(from.actions_),
      owner_descriptions_(from.owner_descriptions_),
      owner_actions_(from.owner_actions_),
      fraudwarnings_(from.fraudwarnings_),
      market_actions_(from.market_actions_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  background_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    background_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_background_color()) {
    background_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_background_color(), 
      GetArenaForAllocation());
  }
  icon_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon_url()) {
    icon_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon_url(), 
      GetArenaForAllocation());
  }
  icon_url_large_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_url_large_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon_url_large()) {
    icon_url_large_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon_url_large(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  name_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name_color()) {
    name_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_color(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  market_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    market_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_market_name()) {
    market_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_name(), 
      GetArenaForAllocation());
  }
  market_hash_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    market_hash_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_market_hash_name()) {
    market_hash_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_hash_name(), 
      GetArenaForAllocation());
  }
  market_fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    market_fee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_market_fee()) {
    market_fee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_fee(), 
      GetArenaForAllocation());
  }
  item_expiration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    item_expiration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_item_expiration()) {
    item_expiration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_expiration(), 
      GetArenaForAllocation());
  }
  market_buy_country_restriction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    market_buy_country_restriction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_market_buy_country_restriction()) {
    market_buy_country_restriction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_buy_country_restriction(), 
      GetArenaForAllocation());
  }
  market_sell_country_restriction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    market_sell_country_restriction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_market_sell_country_restriction()) {
    market_sell_country_restriction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_market_sell_country_restriction(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_contained_item()) {
    contained_item_ = new ::CEconItem_Description(*from.contained_item_);
  } else {
    contained_item_ = nullptr;
  }
  ::memcpy(&classid_, &from.classid_,
    static_cast<size_t>(reinterpret_cast<char*>(&market_fee_app_) -
    reinterpret_cast<char*>(&classid_)) + sizeof(market_fee_app_));
  // @@protoc_insertion_point(copy_constructor:CEconItem_Description)
}

inline void CEconItem_Description::SharedCtor() {
background_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  background_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_url_large_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_url_large_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
market_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  market_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
market_hash_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  market_hash_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
market_fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  market_fee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
item_expiration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  item_expiration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
market_buy_country_restriction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  market_buy_country_restriction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
market_sell_country_restriction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  market_sell_country_restriction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&contained_item_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&market_fee_app_) -
    reinterpret_cast<char*>(&contained_item_)) + sizeof(market_fee_app_));
}

CEconItem_Description::~CEconItem_Description() {
  // @@protoc_insertion_point(destructor:CEconItem_Description)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEconItem_Description::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  background_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_url_large_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_hash_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_fee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_expiration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_buy_country_restriction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  market_sell_country_restriction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete contained_item_;
}

void CEconItem_Description::ArenaDtor(void* object) {
  CEconItem_Description* _this = reinterpret_cast< CEconItem_Description* >(object);
  (void)_this;
}
void CEconItem_Description::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEconItem_Description::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEconItem_Description::Clear() {
// @@protoc_insertion_point(message_clear_start:CEconItem_Description)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descriptions_.Clear();
  actions_.Clear();
  owner_descriptions_.Clear();
  owner_actions_.Clear();
  fraudwarnings_.Clear();
  market_actions_.Clear();
  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      background_color_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      icon_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      icon_url_large_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      name_color_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      market_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      market_hash_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      market_fee_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      item_expiration_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      market_buy_country_restriction_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      market_sell_country_restriction_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(contained_item_ != nullptr);
      contained_item_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&classid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&classid_)) + sizeof(appid_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&currency_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&market_fee_app_) -
        reinterpret_cast<char*>(&currency_)) + sizeof(market_fee_app_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEconItem_Description::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 classid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_classid(&has_bits);
          classid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 instanceid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_instanceid(&has_bits);
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool currency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_currency(&has_bits);
          currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string background_color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_background_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Description.background_color");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_icon_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Description.icon_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon_url_large = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_icon_url_large();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Description.icon_url_large");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CEconItem_DescriptionLine descriptions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool tradable = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tradable(&has_bits);
          tradable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CEconItem_Action actions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CEconItem_DescriptionLine owner_descriptions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owner_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CEconItem_Action owner_actions = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owner_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string fraudwarnings = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fraudwarnings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Description.fraudwarnings");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string name = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Description.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name_color = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_name_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Description.name_color");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Description.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string market_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_market_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Description.market_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string market_hash_name = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_market_hash_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Description.market_hash_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string market_fee = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_market_fee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Description.market_fee");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CEconItem_Description contained_item = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_contained_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CEconItem_Action market_actions = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_market_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool commodity = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_commodity(&has_bits);
          commodity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 market_tradable_restriction = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_market_tradable_restriction(&has_bits);
          market_tradable_restriction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 market_marketable_restriction = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_market_marketable_restriction(&has_bits);
          market_marketable_restriction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool marketable = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_marketable(&has_bits);
          marketable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CEconItem_Tag tags = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string item_expiration = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_item_expiration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Description.item_expiration");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 market_fee_app = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_market_fee_app(&has_bits);
          market_fee_app_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string market_buy_country_restriction = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_market_buy_country_restriction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Description.market_buy_country_restriction");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string market_sell_country_restriction = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_market_sell_country_restriction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Description.market_sell_country_restriction");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEconItem_Description::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEconItem_Description)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 appid = 1;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 classid = 2;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_classid(), target);
  }

  // optional uint64 instanceid = 3;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_instanceid(), target);
  }

  // optional bool currency = 4;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_currency(), target);
  }

  // optional string background_color = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_background_color().data(), static_cast<int>(this->_internal_background_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Description.background_color");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_background_color(), target);
  }

  // optional string icon_url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon_url().data(), static_cast<int>(this->_internal_icon_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Description.icon_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_icon_url(), target);
  }

  // optional string icon_url_large = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon_url_large().data(), static_cast<int>(this->_internal_icon_url_large().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Description.icon_url_large");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_icon_url_large(), target);
  }

  // repeated .CEconItem_DescriptionLine descriptions = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_descriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_descriptions(i), target, stream);
  }

  // optional bool tradable = 9;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_tradable(), target);
  }

  // repeated .CEconItem_Action actions = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_actions(i), target, stream);
  }

  // repeated .CEconItem_DescriptionLine owner_descriptions = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_owner_descriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_owner_descriptions(i), target, stream);
  }

  // repeated .CEconItem_Action owner_actions = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_owner_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_owner_actions(i), target, stream);
  }

  // repeated string fraudwarnings = 13;
  for (int i = 0, n = this->_internal_fraudwarnings_size(); i < n; i++) {
    const auto& s = this->_internal_fraudwarnings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Description.fraudwarnings");
    target = stream->WriteString(13, s, target);
  }

  // optional string name = 14;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Description.name");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_name(), target);
  }

  // optional string name_color = 15;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_color().data(), static_cast<int>(this->_internal_name_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Description.name_color");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_name_color(), target);
  }

  // optional string type = 16;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Description.type");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_type(), target);
  }

  // optional string market_name = 17;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_market_name().data(), static_cast<int>(this->_internal_market_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Description.market_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_market_name(), target);
  }

  // optional string market_hash_name = 18;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_market_hash_name().data(), static_cast<int>(this->_internal_market_hash_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Description.market_hash_name");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_market_hash_name(), target);
  }

  // optional string market_fee = 19;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_market_fee().data(), static_cast<int>(this->_internal_market_fee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Description.market_fee");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_market_fee(), target);
  }

  // optional .CEconItem_Description contained_item = 20;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::contained_item(this), target, stream);
  }

  // repeated .CEconItem_Action market_actions = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_market_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_market_actions(i), target, stream);
  }

  // optional bool commodity = 22;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_commodity(), target);
  }

  // optional int32 market_tradable_restriction = 23;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_market_tradable_restriction(), target);
  }

  // optional int32 market_marketable_restriction = 24;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_market_marketable_restriction(), target);
  }

  // optional bool marketable = 25;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_marketable(), target);
  }

  // repeated .CEconItem_Tag tags = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_tags(i), target, stream);
  }

  // optional string item_expiration = 27;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_expiration().data(), static_cast<int>(this->_internal_item_expiration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Description.item_expiration");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_item_expiration(), target);
  }

  // optional int32 market_fee_app = 28;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_market_fee_app(), target);
  }

  // optional string market_buy_country_restriction = 30;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_market_buy_country_restriction().data(), static_cast<int>(this->_internal_market_buy_country_restriction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Description.market_buy_country_restriction");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_market_buy_country_restriction(), target);
  }

  // optional string market_sell_country_restriction = 31;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_market_sell_country_restriction().data(), static_cast<int>(this->_internal_market_sell_country_restriction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Description.market_sell_country_restriction");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_market_sell_country_restriction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEconItem_Description)
  return target;
}

size_t CEconItem_Description::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEconItem_Description)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CEconItem_DescriptionLine descriptions = 8;
  total_size += 1UL * this->_internal_descriptions_size();
  for (const auto& msg : this->descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CEconItem_Action actions = 10;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CEconItem_DescriptionLine owner_descriptions = 11;
  total_size += 1UL * this->_internal_owner_descriptions_size();
  for (const auto& msg : this->owner_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CEconItem_Action owner_actions = 12;
  total_size += 1UL * this->_internal_owner_actions_size();
  for (const auto& msg : this->owner_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string fraudwarnings = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(fraudwarnings_.size());
  for (int i = 0, n = fraudwarnings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      fraudwarnings_.Get(i));
  }

  // repeated .CEconItem_Action market_actions = 21;
  total_size += 2UL * this->_internal_market_actions_size();
  for (const auto& msg : this->market_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CEconItem_Tag tags = 26;
  total_size += 2UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string background_color = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_background_color());
    }

    // optional string icon_url = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon_url());
    }

    // optional string icon_url_large = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon_url_large());
    }

    // optional string name = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string name_color = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_color());
    }

    // optional string type = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string market_name = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_market_name());
    }

    // optional string market_hash_name = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_market_hash_name());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string market_fee = 19;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_market_fee());
    }

    // optional string item_expiration = 27;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_expiration());
    }

    // optional string market_buy_country_restriction = 30;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_market_buy_country_restriction());
    }

    // optional string market_sell_country_restriction = 31;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_market_sell_country_restriction());
    }

    // optional .CEconItem_Description contained_item = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contained_item_);
    }

    // optional uint64 classid = 2;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_classid());
    }

    // optional uint64 instanceid = 3;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_instanceid());
    }

    // optional int32 appid = 1;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_appid());
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional bool currency = 4;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool tradable = 9;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool commodity = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool marketable = 25;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional int32 market_tradable_restriction = 23;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_market_tradable_restriction());
    }

    // optional int32 market_marketable_restriction = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_market_marketable_restriction());
    }

    // optional int32 market_fee_app = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_market_fee_app());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEconItem_Description::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEconItem_Description::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEconItem_Description::GetClassData() const { return &_class_data_; }

void CEconItem_Description::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEconItem_Description *>(to)->MergeFrom(
      static_cast<const CEconItem_Description &>(from));
}


void CEconItem_Description::MergeFrom(const CEconItem_Description& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEconItem_Description)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  descriptions_.MergeFrom(from.descriptions_);
  actions_.MergeFrom(from.actions_);
  owner_descriptions_.MergeFrom(from.owner_descriptions_);
  owner_actions_.MergeFrom(from.owner_actions_);
  fraudwarnings_.MergeFrom(from.fraudwarnings_);
  market_actions_.MergeFrom(from.market_actions_);
  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_background_color(from._internal_background_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_icon_url(from._internal_icon_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_icon_url_large(from._internal_icon_url_large());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_name_color(from._internal_name_color());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_market_name(from._internal_market_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_market_hash_name(from._internal_market_hash_name());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_market_fee(from._internal_market_fee());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_item_expiration(from._internal_item_expiration());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_market_buy_country_restriction(from._internal_market_buy_country_restriction());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_market_sell_country_restriction(from._internal_market_sell_country_restriction());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_contained_item()->::CEconItem_Description::MergeFrom(from._internal_contained_item());
    }
    if (cached_has_bits & 0x00002000u) {
      classid_ = from.classid_;
    }
    if (cached_has_bits & 0x00004000u) {
      instanceid_ = from.instanceid_;
    }
    if (cached_has_bits & 0x00008000u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      currency_ = from.currency_;
    }
    if (cached_has_bits & 0x00020000u) {
      tradable_ = from.tradable_;
    }
    if (cached_has_bits & 0x00040000u) {
      commodity_ = from.commodity_;
    }
    if (cached_has_bits & 0x00080000u) {
      marketable_ = from.marketable_;
    }
    if (cached_has_bits & 0x00100000u) {
      market_tradable_restriction_ = from.market_tradable_restriction_;
    }
    if (cached_has_bits & 0x00200000u) {
      market_marketable_restriction_ = from.market_marketable_restriction_;
    }
    if (cached_has_bits & 0x00400000u) {
      market_fee_app_ = from.market_fee_app_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEconItem_Description::CopyFrom(const CEconItem_Description& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEconItem_Description)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItem_Description::IsInitialized() const {
  return true;
}

void CEconItem_Description::InternalSwap(CEconItem_Description* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  descriptions_.InternalSwap(&other->descriptions_);
  actions_.InternalSwap(&other->actions_);
  owner_descriptions_.InternalSwap(&other->owner_descriptions_);
  owner_actions_.InternalSwap(&other->owner_actions_);
  fraudwarnings_.InternalSwap(&other->fraudwarnings_);
  market_actions_.InternalSwap(&other->market_actions_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &background_color_, lhs_arena,
      &other->background_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_url_, lhs_arena,
      &other->icon_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_url_large_, lhs_arena,
      &other->icon_url_large_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_color_, lhs_arena,
      &other->name_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &market_name_, lhs_arena,
      &other->market_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &market_hash_name_, lhs_arena,
      &other->market_hash_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &market_fee_, lhs_arena,
      &other->market_fee_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &item_expiration_, lhs_arena,
      &other->item_expiration_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &market_buy_country_restriction_, lhs_arena,
      &other->market_buy_country_restriction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &market_sell_country_restriction_, lhs_arena,
      &other->market_sell_country_restriction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEconItem_Description, market_fee_app_)
      + sizeof(CEconItem_Description::market_fee_app_)
      - PROTOBUF_FIELD_OFFSET(CEconItem_Description, contained_item_)>(
          reinterpret_cast<char*>(&contained_item_),
          reinterpret_cast<char*>(&other->contained_item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEconItem_Description::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[5]);
}

// ===================================================================

class CEconItem_Tag::_Internal {
 public:
  using HasBits = decltype(std::declval<CEconItem_Tag>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_internal_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_localized_category_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_localized_tag_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CEconItem_Tag::CEconItem_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEconItem_Tag)
}
CEconItem_Tag::CEconItem_Tag(const CEconItem_Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_category()) {
    category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_category(), 
      GetArenaForAllocation());
  }
  internal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    internal_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_internal_name()) {
    internal_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_internal_name(), 
      GetArenaForAllocation());
  }
  localized_category_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    localized_category_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localized_category_name()) {
    localized_category_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_localized_category_name(), 
      GetArenaForAllocation());
  }
  localized_tag_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    localized_tag_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localized_tag_name()) {
    localized_tag_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_localized_tag_name(), 
      GetArenaForAllocation());
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_color()) {
    color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color(), 
      GetArenaForAllocation());
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CEconItem_Tag)
}

inline void CEconItem_Tag::SharedCtor() {
category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  category_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
internal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  internal_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
localized_category_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  localized_category_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
localized_tag_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  localized_tag_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
appid_ = 0u;
}

CEconItem_Tag::~CEconItem_Tag() {
  // @@protoc_insertion_point(destructor:CEconItem_Tag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEconItem_Tag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  internal_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localized_category_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localized_tag_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CEconItem_Tag::ArenaDtor(void* object) {
  CEconItem_Tag* _this = reinterpret_cast< CEconItem_Tag* >(object);
  (void)_this;
}
void CEconItem_Tag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEconItem_Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEconItem_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:CEconItem_Tag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      category_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      internal_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      localized_category_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      localized_tag_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      color_.ClearNonDefaultToEmpty();
    }
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEconItem_Tag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "The app that contains the item"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string category = 2 [(.description) = "The internal name of the category the tag belongs to"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_category();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Tag.category");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string internal_name = 3 [(.description) = "The internal name of the tag"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_internal_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Tag.internal_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string localized_category_name = 4 [(.description) = "The localized name of the category"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_localized_category_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Tag.localized_category_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string localized_tag_name = 5 [(.description) = "The localized name of the tag"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_localized_tag_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Tag.localized_tag_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string color = 6 [(.description) = "The color to use when displaying the tag to the user"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEconItem_Tag.color");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEconItem_Tag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEconItem_Tag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "The app that contains the item"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string category = 2 [(.description) = "The internal name of the category the tag belongs to"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Tag.category");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_category(), target);
  }

  // optional string internal_name = 3 [(.description) = "The internal name of the tag"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_internal_name().data(), static_cast<int>(this->_internal_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Tag.internal_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_internal_name(), target);
  }

  // optional string localized_category_name = 4 [(.description) = "The localized name of the category"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localized_category_name().data(), static_cast<int>(this->_internal_localized_category_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Tag.localized_category_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_localized_category_name(), target);
  }

  // optional string localized_tag_name = 5 [(.description) = "The localized name of the tag"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localized_tag_name().data(), static_cast<int>(this->_internal_localized_tag_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Tag.localized_tag_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_localized_tag_name(), target);
  }

  // optional string color = 6 [(.description) = "The color to use when displaying the tag to the user"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItem_Tag.color");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEconItem_Tag)
  return target;
}

size_t CEconItem_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEconItem_Tag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string category = 2 [(.description) = "The internal name of the category the tag belongs to"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_category());
    }

    // optional string internal_name = 3 [(.description) = "The internal name of the tag"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_internal_name());
    }

    // optional string localized_category_name = 4 [(.description) = "The localized name of the category"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localized_category_name());
    }

    // optional string localized_tag_name = 5 [(.description) = "The localized name of the tag"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localized_tag_name());
    }

    // optional string color = 6 [(.description) = "The color to use when displaying the tag to the user"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_color());
    }

    // optional uint32 appid = 1 [(.description) = "The app that contains the item"];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEconItem_Tag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEconItem_Tag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEconItem_Tag::GetClassData() const { return &_class_data_; }

void CEconItem_Tag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEconItem_Tag *>(to)->MergeFrom(
      static_cast<const CEconItem_Tag &>(from));
}


void CEconItem_Tag::MergeFrom(const CEconItem_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEconItem_Tag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_category(from._internal_category());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_internal_name(from._internal_internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_localized_category_name(from._internal_localized_category_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_localized_tag_name(from._internal_localized_tag_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_color(from._internal_color());
    }
    if (cached_has_bits & 0x00000020u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEconItem_Tag::CopyFrom(const CEconItem_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEconItem_Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItem_Tag::IsInitialized() const {
  return true;
}

void CEconItem_Tag::InternalSwap(CEconItem_Tag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &category_, lhs_arena,
      &other->category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &internal_name_, lhs_arena,
      &other->internal_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &localized_category_name_, lhs_arena,
      &other->localized_category_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &localized_tag_name_, lhs_arena,
      &other->localized_tag_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &color_, lhs_arena,
      &other->color_, rhs_arena
  );
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CEconItem_Tag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[6]);
}

// ===================================================================

class CEcon_GetInventoryItemsWithDescriptions_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CEcon_GetInventoryItemsWithDescriptions_Response>()._has_bits_);
  static void set_has_more_items(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_last_assetid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_inventory_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CEcon_GetInventoryItemsWithDescriptions_Response::CEcon_GetInventoryItemsWithDescriptions_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  assets_(arena),
  descriptions_(arena),
  missing_assets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEcon_GetInventoryItemsWithDescriptions_Response)
}
CEcon_GetInventoryItemsWithDescriptions_Response::CEcon_GetInventoryItemsWithDescriptions_Response(const CEcon_GetInventoryItemsWithDescriptions_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      assets_(from.assets_),
      descriptions_(from.descriptions_),
      missing_assets_(from.missing_assets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&last_assetid_, &from.last_assetid_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_inventory_count_) -
    reinterpret_cast<char*>(&last_assetid_)) + sizeof(total_inventory_count_));
  // @@protoc_insertion_point(copy_constructor:CEcon_GetInventoryItemsWithDescriptions_Response)
}

inline void CEcon_GetInventoryItemsWithDescriptions_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_assetid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_inventory_count_) -
    reinterpret_cast<char*>(&last_assetid_)) + sizeof(total_inventory_count_));
}

CEcon_GetInventoryItemsWithDescriptions_Response::~CEcon_GetInventoryItemsWithDescriptions_Response() {
  // @@protoc_insertion_point(destructor:CEcon_GetInventoryItemsWithDescriptions_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEcon_GetInventoryItemsWithDescriptions_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CEcon_GetInventoryItemsWithDescriptions_Response::ArenaDtor(void* object) {
  CEcon_GetInventoryItemsWithDescriptions_Response* _this = reinterpret_cast< CEcon_GetInventoryItemsWithDescriptions_Response* >(object);
  (void)_this;
}
void CEcon_GetInventoryItemsWithDescriptions_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEcon_GetInventoryItemsWithDescriptions_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEcon_GetInventoryItemsWithDescriptions_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CEcon_GetInventoryItemsWithDescriptions_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assets_.Clear();
  descriptions_.Clear();
  missing_assets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&last_assetid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_inventory_count_) -
        reinterpret_cast<char*>(&last_assetid_)) + sizeof(total_inventory_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEcon_GetInventoryItemsWithDescriptions_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CEcon_Asset assets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CEconItem_Description descriptions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CEcon_Asset missing_assets = 3 [(.description) = "This list of assets in the original list we could not find in the users inventory"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_missing_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool more_items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_more_items(&has_bits);
          more_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 last_assetid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_last_assetid(&has_bits);
          last_assetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_inventory_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_total_inventory_count(&has_bits);
          total_inventory_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEcon_GetInventoryItemsWithDescriptions_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEcon_GetInventoryItemsWithDescriptions_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CEcon_Asset assets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_assets(i), target, stream);
  }

  // repeated .CEconItem_Description descriptions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_descriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_descriptions(i), target, stream);
  }

  // repeated .CEcon_Asset missing_assets = 3 [(.description) = "This list of assets in the original list we could not find in the users inventory"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_missing_assets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_missing_assets(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool more_items = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_more_items(), target);
  }

  // optional uint64 last_assetid = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_last_assetid(), target);
  }

  // optional uint32 total_inventory_count = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_total_inventory_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEcon_GetInventoryItemsWithDescriptions_Response)
  return target;
}

size_t CEcon_GetInventoryItemsWithDescriptions_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEcon_GetInventoryItemsWithDescriptions_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CEcon_Asset assets = 1;
  total_size += 1UL * this->_internal_assets_size();
  for (const auto& msg : this->assets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CEconItem_Description descriptions = 2;
  total_size += 1UL * this->_internal_descriptions_size();
  for (const auto& msg : this->descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CEcon_Asset missing_assets = 3 [(.description) = "This list of assets in the original list we could not find in the users inventory"];
  total_size += 1UL * this->_internal_missing_assets_size();
  for (const auto& msg : this->missing_assets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 last_assetid = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_last_assetid());
    }

    // optional bool more_items = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 total_inventory_count = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total_inventory_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEcon_GetInventoryItemsWithDescriptions_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEcon_GetInventoryItemsWithDescriptions_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEcon_GetInventoryItemsWithDescriptions_Response::GetClassData() const { return &_class_data_; }

void CEcon_GetInventoryItemsWithDescriptions_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEcon_GetInventoryItemsWithDescriptions_Response *>(to)->MergeFrom(
      static_cast<const CEcon_GetInventoryItemsWithDescriptions_Response &>(from));
}


void CEcon_GetInventoryItemsWithDescriptions_Response::MergeFrom(const CEcon_GetInventoryItemsWithDescriptions_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEcon_GetInventoryItemsWithDescriptions_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  assets_.MergeFrom(from.assets_);
  descriptions_.MergeFrom(from.descriptions_);
  missing_assets_.MergeFrom(from.missing_assets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      last_assetid_ = from.last_assetid_;
    }
    if (cached_has_bits & 0x00000002u) {
      more_items_ = from.more_items_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_inventory_count_ = from.total_inventory_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEcon_GetInventoryItemsWithDescriptions_Response::CopyFrom(const CEcon_GetInventoryItemsWithDescriptions_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEcon_GetInventoryItemsWithDescriptions_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEcon_GetInventoryItemsWithDescriptions_Response::IsInitialized() const {
  return true;
}

void CEcon_GetInventoryItemsWithDescriptions_Response::InternalSwap(CEcon_GetInventoryItemsWithDescriptions_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  assets_.InternalSwap(&other->assets_);
  descriptions_.InternalSwap(&other->descriptions_);
  missing_assets_.InternalSwap(&other->missing_assets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEcon_GetInventoryItemsWithDescriptions_Response, total_inventory_count_)
      + sizeof(CEcon_GetInventoryItemsWithDescriptions_Response::total_inventory_count_)
      - PROTOBUF_FIELD_OFFSET(CEcon_GetInventoryItemsWithDescriptions_Response, last_assetid_)>(
          reinterpret_cast<char*>(&last_assetid_),
          reinterpret_cast<char*>(&other->last_assetid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEcon_GetInventoryItemsWithDescriptions_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[7]);
}

// ===================================================================

class CEcon_GetTradeOfferAccessToken_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CEcon_GetTradeOfferAccessToken_Request>()._has_bits_);
  static void set_has_generate_new_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CEcon_GetTradeOfferAccessToken_Request::CEcon_GetTradeOfferAccessToken_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEcon_GetTradeOfferAccessToken_Request)
}
CEcon_GetTradeOfferAccessToken_Request::CEcon_GetTradeOfferAccessToken_Request(const CEcon_GetTradeOfferAccessToken_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  generate_new_token_ = from.generate_new_token_;
  // @@protoc_insertion_point(copy_constructor:CEcon_GetTradeOfferAccessToken_Request)
}

inline void CEcon_GetTradeOfferAccessToken_Request::SharedCtor() {
generate_new_token_ = false;
}

CEcon_GetTradeOfferAccessToken_Request::~CEcon_GetTradeOfferAccessToken_Request() {
  // @@protoc_insertion_point(destructor:CEcon_GetTradeOfferAccessToken_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEcon_GetTradeOfferAccessToken_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CEcon_GetTradeOfferAccessToken_Request::ArenaDtor(void* object) {
  CEcon_GetTradeOfferAccessToken_Request* _this = reinterpret_cast< CEcon_GetTradeOfferAccessToken_Request* >(object);
  (void)_this;
}
void CEcon_GetTradeOfferAccessToken_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEcon_GetTradeOfferAccessToken_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEcon_GetTradeOfferAccessToken_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CEcon_GetTradeOfferAccessToken_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  generate_new_token_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEcon_GetTradeOfferAccessToken_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool generate_new_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_generate_new_token(&has_bits);
          generate_new_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEcon_GetTradeOfferAccessToken_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEcon_GetTradeOfferAccessToken_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool generate_new_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_generate_new_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEcon_GetTradeOfferAccessToken_Request)
  return target;
}

size_t CEcon_GetTradeOfferAccessToken_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEcon_GetTradeOfferAccessToken_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool generate_new_token = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEcon_GetTradeOfferAccessToken_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEcon_GetTradeOfferAccessToken_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEcon_GetTradeOfferAccessToken_Request::GetClassData() const { return &_class_data_; }

void CEcon_GetTradeOfferAccessToken_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEcon_GetTradeOfferAccessToken_Request *>(to)->MergeFrom(
      static_cast<const CEcon_GetTradeOfferAccessToken_Request &>(from));
}


void CEcon_GetTradeOfferAccessToken_Request::MergeFrom(const CEcon_GetTradeOfferAccessToken_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEcon_GetTradeOfferAccessToken_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_generate_new_token()) {
    _internal_set_generate_new_token(from._internal_generate_new_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEcon_GetTradeOfferAccessToken_Request::CopyFrom(const CEcon_GetTradeOfferAccessToken_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEcon_GetTradeOfferAccessToken_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEcon_GetTradeOfferAccessToken_Request::IsInitialized() const {
  return true;
}

void CEcon_GetTradeOfferAccessToken_Request::InternalSwap(CEcon_GetTradeOfferAccessToken_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(generate_new_token_, other->generate_new_token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CEcon_GetTradeOfferAccessToken_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[8]);
}

// ===================================================================

class CEcon_GetTradeOfferAccessToken_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CEcon_GetTradeOfferAccessToken_Response>()._has_bits_);
  static void set_has_trade_offer_access_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CEcon_GetTradeOfferAccessToken_Response::CEcon_GetTradeOfferAccessToken_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEcon_GetTradeOfferAccessToken_Response)
}
CEcon_GetTradeOfferAccessToken_Response::CEcon_GetTradeOfferAccessToken_Response(const CEcon_GetTradeOfferAccessToken_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trade_offer_access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trade_offer_access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_trade_offer_access_token()) {
    trade_offer_access_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trade_offer_access_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CEcon_GetTradeOfferAccessToken_Response)
}

inline void CEcon_GetTradeOfferAccessToken_Response::SharedCtor() {
trade_offer_access_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trade_offer_access_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CEcon_GetTradeOfferAccessToken_Response::~CEcon_GetTradeOfferAccessToken_Response() {
  // @@protoc_insertion_point(destructor:CEcon_GetTradeOfferAccessToken_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEcon_GetTradeOfferAccessToken_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trade_offer_access_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CEcon_GetTradeOfferAccessToken_Response::ArenaDtor(void* object) {
  CEcon_GetTradeOfferAccessToken_Response* _this = reinterpret_cast< CEcon_GetTradeOfferAccessToken_Response* >(object);
  (void)_this;
}
void CEcon_GetTradeOfferAccessToken_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEcon_GetTradeOfferAccessToken_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEcon_GetTradeOfferAccessToken_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CEcon_GetTradeOfferAccessToken_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    trade_offer_access_token_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEcon_GetTradeOfferAccessToken_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string trade_offer_access_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trade_offer_access_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEcon_GetTradeOfferAccessToken_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEcon_GetTradeOfferAccessToken_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string trade_offer_access_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_trade_offer_access_token().data(), static_cast<int>(this->_internal_trade_offer_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEcon_GetTradeOfferAccessToken_Response.trade_offer_access_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trade_offer_access_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEcon_GetTradeOfferAccessToken_Response)
  return target;
}

size_t CEcon_GetTradeOfferAccessToken_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEcon_GetTradeOfferAccessToken_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string trade_offer_access_token = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trade_offer_access_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEcon_GetTradeOfferAccessToken_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEcon_GetTradeOfferAccessToken_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEcon_GetTradeOfferAccessToken_Response::GetClassData() const { return &_class_data_; }

void CEcon_GetTradeOfferAccessToken_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEcon_GetTradeOfferAccessToken_Response *>(to)->MergeFrom(
      static_cast<const CEcon_GetTradeOfferAccessToken_Response &>(from));
}


void CEcon_GetTradeOfferAccessToken_Response::MergeFrom(const CEcon_GetTradeOfferAccessToken_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEcon_GetTradeOfferAccessToken_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_trade_offer_access_token()) {
    _internal_set_trade_offer_access_token(from._internal_trade_offer_access_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEcon_GetTradeOfferAccessToken_Response::CopyFrom(const CEcon_GetTradeOfferAccessToken_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEcon_GetTradeOfferAccessToken_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEcon_GetTradeOfferAccessToken_Response::IsInitialized() const {
  return true;
}

void CEcon_GetTradeOfferAccessToken_Response::InternalSwap(CEcon_GetTradeOfferAccessToken_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &trade_offer_access_token_, lhs_arena,
      &other->trade_offer_access_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CEcon_GetTradeOfferAccessToken_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[9]);
}

// ===================================================================

class CEcon_ClientGetItemShopOverlayAuthURL_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CEcon_ClientGetItemShopOverlayAuthURL_Request>()._has_bits_);
  static void set_has_return_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CEcon_ClientGetItemShopOverlayAuthURL_Request::CEcon_ClientGetItemShopOverlayAuthURL_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEcon_ClientGetItemShopOverlayAuthURL_Request)
}
CEcon_ClientGetItemShopOverlayAuthURL_Request::CEcon_ClientGetItemShopOverlayAuthURL_Request(const CEcon_ClientGetItemShopOverlayAuthURL_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  return_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    return_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_return_url()) {
    return_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_return_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CEcon_ClientGetItemShopOverlayAuthURL_Request)
}

inline void CEcon_ClientGetItemShopOverlayAuthURL_Request::SharedCtor() {
return_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CEcon_ClientGetItemShopOverlayAuthURL_Request::~CEcon_ClientGetItemShopOverlayAuthURL_Request() {
  // @@protoc_insertion_point(destructor:CEcon_ClientGetItemShopOverlayAuthURL_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEcon_ClientGetItemShopOverlayAuthURL_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  return_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CEcon_ClientGetItemShopOverlayAuthURL_Request::ArenaDtor(void* object) {
  CEcon_ClientGetItemShopOverlayAuthURL_Request* _this = reinterpret_cast< CEcon_ClientGetItemShopOverlayAuthURL_Request* >(object);
  (void)_this;
}
void CEcon_ClientGetItemShopOverlayAuthURL_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEcon_ClientGetItemShopOverlayAuthURL_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEcon_ClientGetItemShopOverlayAuthURL_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CEcon_ClientGetItemShopOverlayAuthURL_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    return_url_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEcon_ClientGetItemShopOverlayAuthURL_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string return_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_return_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEcon_ClientGetItemShopOverlayAuthURL_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEcon_ClientGetItemShopOverlayAuthURL_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string return_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_return_url().data(), static_cast<int>(this->_internal_return_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEcon_ClientGetItemShopOverlayAuthURL_Request.return_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_return_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEcon_ClientGetItemShopOverlayAuthURL_Request)
  return target;
}

size_t CEcon_ClientGetItemShopOverlayAuthURL_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEcon_ClientGetItemShopOverlayAuthURL_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string return_url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_return_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEcon_ClientGetItemShopOverlayAuthURL_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEcon_ClientGetItemShopOverlayAuthURL_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEcon_ClientGetItemShopOverlayAuthURL_Request::GetClassData() const { return &_class_data_; }

void CEcon_ClientGetItemShopOverlayAuthURL_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEcon_ClientGetItemShopOverlayAuthURL_Request *>(to)->MergeFrom(
      static_cast<const CEcon_ClientGetItemShopOverlayAuthURL_Request &>(from));
}


void CEcon_ClientGetItemShopOverlayAuthURL_Request::MergeFrom(const CEcon_ClientGetItemShopOverlayAuthURL_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEcon_ClientGetItemShopOverlayAuthURL_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_return_url()) {
    _internal_set_return_url(from._internal_return_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEcon_ClientGetItemShopOverlayAuthURL_Request::CopyFrom(const CEcon_ClientGetItemShopOverlayAuthURL_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEcon_ClientGetItemShopOverlayAuthURL_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEcon_ClientGetItemShopOverlayAuthURL_Request::IsInitialized() const {
  return true;
}

void CEcon_ClientGetItemShopOverlayAuthURL_Request::InternalSwap(CEcon_ClientGetItemShopOverlayAuthURL_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &return_url_, lhs_arena,
      &other->return_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CEcon_ClientGetItemShopOverlayAuthURL_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[10]);
}

// ===================================================================

class CEcon_ClientGetItemShopOverlayAuthURL_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CEcon_ClientGetItemShopOverlayAuthURL_Response>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CEcon_ClientGetItemShopOverlayAuthURL_Response::CEcon_ClientGetItemShopOverlayAuthURL_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEcon_ClientGetItemShopOverlayAuthURL_Response)
}
CEcon_ClientGetItemShopOverlayAuthURL_Response::CEcon_ClientGetItemShopOverlayAuthURL_Response(const CEcon_ClientGetItemShopOverlayAuthURL_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CEcon_ClientGetItemShopOverlayAuthURL_Response)
}

inline void CEcon_ClientGetItemShopOverlayAuthURL_Response::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CEcon_ClientGetItemShopOverlayAuthURL_Response::~CEcon_ClientGetItemShopOverlayAuthURL_Response() {
  // @@protoc_insertion_point(destructor:CEcon_ClientGetItemShopOverlayAuthURL_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEcon_ClientGetItemShopOverlayAuthURL_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CEcon_ClientGetItemShopOverlayAuthURL_Response::ArenaDtor(void* object) {
  CEcon_ClientGetItemShopOverlayAuthURL_Response* _this = reinterpret_cast< CEcon_ClientGetItemShopOverlayAuthURL_Response* >(object);
  (void)_this;
}
void CEcon_ClientGetItemShopOverlayAuthURL_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEcon_ClientGetItemShopOverlayAuthURL_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEcon_ClientGetItemShopOverlayAuthURL_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CEcon_ClientGetItemShopOverlayAuthURL_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEcon_ClientGetItemShopOverlayAuthURL_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEcon_ClientGetItemShopOverlayAuthURL_Response.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEcon_ClientGetItemShopOverlayAuthURL_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEcon_ClientGetItemShopOverlayAuthURL_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEcon_ClientGetItemShopOverlayAuthURL_Response.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEcon_ClientGetItemShopOverlayAuthURL_Response)
  return target;
}

size_t CEcon_ClientGetItemShopOverlayAuthURL_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEcon_ClientGetItemShopOverlayAuthURL_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEcon_ClientGetItemShopOverlayAuthURL_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEcon_ClientGetItemShopOverlayAuthURL_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEcon_ClientGetItemShopOverlayAuthURL_Response::GetClassData() const { return &_class_data_; }

void CEcon_ClientGetItemShopOverlayAuthURL_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEcon_ClientGetItemShopOverlayAuthURL_Response *>(to)->MergeFrom(
      static_cast<const CEcon_ClientGetItemShopOverlayAuthURL_Response &>(from));
}


void CEcon_ClientGetItemShopOverlayAuthURL_Response::MergeFrom(const CEcon_ClientGetItemShopOverlayAuthURL_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEcon_ClientGetItemShopOverlayAuthURL_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_url()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEcon_ClientGetItemShopOverlayAuthURL_Response::CopyFrom(const CEcon_ClientGetItemShopOverlayAuthURL_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEcon_ClientGetItemShopOverlayAuthURL_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEcon_ClientGetItemShopOverlayAuthURL_Response::IsInitialized() const {
  return true;
}

void CEcon_ClientGetItemShopOverlayAuthURL_Response::InternalSwap(CEcon_ClientGetItemShopOverlayAuthURL_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CEcon_ClientGetItemShopOverlayAuthURL_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[11]);
}

// ===================================================================

class CEcon_GetAssetClassInfo_Request_Class::_Internal {
 public:
  using HasBits = decltype(std::declval<CEcon_GetAssetClassInfo_Request_Class>()._has_bits_);
  static void set_has_classid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_instanceid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CEcon_GetAssetClassInfo_Request_Class::CEcon_GetAssetClassInfo_Request_Class(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEcon_GetAssetClassInfo_Request.Class)
}
CEcon_GetAssetClassInfo_Request_Class::CEcon_GetAssetClassInfo_Request_Class(const CEcon_GetAssetClassInfo_Request_Class& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&classid_, &from.classid_,
    static_cast<size_t>(reinterpret_cast<char*>(&instanceid_) -
    reinterpret_cast<char*>(&classid_)) + sizeof(instanceid_));
  // @@protoc_insertion_point(copy_constructor:CEcon_GetAssetClassInfo_Request.Class)
}

inline void CEcon_GetAssetClassInfo_Request_Class::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&classid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&instanceid_) -
    reinterpret_cast<char*>(&classid_)) + sizeof(instanceid_));
}

CEcon_GetAssetClassInfo_Request_Class::~CEcon_GetAssetClassInfo_Request_Class() {
  // @@protoc_insertion_point(destructor:CEcon_GetAssetClassInfo_Request.Class)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEcon_GetAssetClassInfo_Request_Class::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CEcon_GetAssetClassInfo_Request_Class::ArenaDtor(void* object) {
  CEcon_GetAssetClassInfo_Request_Class* _this = reinterpret_cast< CEcon_GetAssetClassInfo_Request_Class* >(object);
  (void)_this;
}
void CEcon_GetAssetClassInfo_Request_Class::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEcon_GetAssetClassInfo_Request_Class::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEcon_GetAssetClassInfo_Request_Class::Clear() {
// @@protoc_insertion_point(message_clear_start:CEcon_GetAssetClassInfo_Request.Class)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&classid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&instanceid_) -
        reinterpret_cast<char*>(&classid_)) + sizeof(instanceid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEcon_GetAssetClassInfo_Request_Class::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 classid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_classid(&has_bits);
          classid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 instanceid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_instanceid(&has_bits);
          instanceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEcon_GetAssetClassInfo_Request_Class::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEcon_GetAssetClassInfo_Request.Class)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 classid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_classid(), target);
  }

  // optional uint64 instanceid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_instanceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEcon_GetAssetClassInfo_Request.Class)
  return target;
}

size_t CEcon_GetAssetClassInfo_Request_Class::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEcon_GetAssetClassInfo_Request.Class)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 classid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_classid());
    }

    // optional uint64 instanceid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_instanceid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEcon_GetAssetClassInfo_Request_Class::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEcon_GetAssetClassInfo_Request_Class::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEcon_GetAssetClassInfo_Request_Class::GetClassData() const { return &_class_data_; }

void CEcon_GetAssetClassInfo_Request_Class::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEcon_GetAssetClassInfo_Request_Class *>(to)->MergeFrom(
      static_cast<const CEcon_GetAssetClassInfo_Request_Class &>(from));
}


void CEcon_GetAssetClassInfo_Request_Class::MergeFrom(const CEcon_GetAssetClassInfo_Request_Class& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEcon_GetAssetClassInfo_Request.Class)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      classid_ = from.classid_;
    }
    if (cached_has_bits & 0x00000002u) {
      instanceid_ = from.instanceid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEcon_GetAssetClassInfo_Request_Class::CopyFrom(const CEcon_GetAssetClassInfo_Request_Class& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEcon_GetAssetClassInfo_Request.Class)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEcon_GetAssetClassInfo_Request_Class::IsInitialized() const {
  return true;
}

void CEcon_GetAssetClassInfo_Request_Class::InternalSwap(CEcon_GetAssetClassInfo_Request_Class* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEcon_GetAssetClassInfo_Request_Class, instanceid_)
      + sizeof(CEcon_GetAssetClassInfo_Request_Class::instanceid_)
      - PROTOBUF_FIELD_OFFSET(CEcon_GetAssetClassInfo_Request_Class, classid_)>(
          reinterpret_cast<char*>(&classid_),
          reinterpret_cast<char*>(&other->classid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEcon_GetAssetClassInfo_Request_Class::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[12]);
}

// ===================================================================

class CEcon_GetAssetClassInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CEcon_GetAssetClassInfo_Request>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_high_pri(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CEcon_GetAssetClassInfo_Request::CEcon_GetAssetClassInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  classes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEcon_GetAssetClassInfo_Request)
}
CEcon_GetAssetClassInfo_Request::CEcon_GetAssetClassInfo_Request(const CEcon_GetAssetClassInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      classes_(from.classes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_pri_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(high_pri_));
  // @@protoc_insertion_point(copy_constructor:CEcon_GetAssetClassInfo_Request)
}

inline void CEcon_GetAssetClassInfo_Request::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&high_pri_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(high_pri_));
}

CEcon_GetAssetClassInfo_Request::~CEcon_GetAssetClassInfo_Request() {
  // @@protoc_insertion_point(destructor:CEcon_GetAssetClassInfo_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEcon_GetAssetClassInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CEcon_GetAssetClassInfo_Request::ArenaDtor(void* object) {
  CEcon_GetAssetClassInfo_Request* _this = reinterpret_cast< CEcon_GetAssetClassInfo_Request* >(object);
  (void)_this;
}
void CEcon_GetAssetClassInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEcon_GetAssetClassInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEcon_GetAssetClassInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CEcon_GetAssetClassInfo_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_pri_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(high_pri_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEcon_GetAssetClassInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CEcon_GetAssetClassInfo_Request.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CEcon_GetAssetClassInfo_Request.Class classes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool high_pri = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_high_pri(&has_bits);
          high_pri_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEcon_GetAssetClassInfo_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEcon_GetAssetClassInfo_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEcon_GetAssetClassInfo_Request.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // repeated .CEcon_GetAssetClassInfo_Request.Class classes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_classes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_classes(i), target, stream);
  }

  // optional bool high_pri = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_high_pri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEcon_GetAssetClassInfo_Request)
  return target;
}

size_t CEcon_GetAssetClassInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEcon_GetAssetClassInfo_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CEcon_GetAssetClassInfo_Request.Class classes = 3;
  total_size += 1UL * this->_internal_classes_size();
  for (const auto& msg : this->classes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string language = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool high_pri = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEcon_GetAssetClassInfo_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEcon_GetAssetClassInfo_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEcon_GetAssetClassInfo_Request::GetClassData() const { return &_class_data_; }

void CEcon_GetAssetClassInfo_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEcon_GetAssetClassInfo_Request *>(to)->MergeFrom(
      static_cast<const CEcon_GetAssetClassInfo_Request &>(from));
}


void CEcon_GetAssetClassInfo_Request::MergeFrom(const CEcon_GetAssetClassInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEcon_GetAssetClassInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  classes_.MergeFrom(from.classes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      high_pri_ = from.high_pri_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEcon_GetAssetClassInfo_Request::CopyFrom(const CEcon_GetAssetClassInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEcon_GetAssetClassInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEcon_GetAssetClassInfo_Request::IsInitialized() const {
  return true;
}

void CEcon_GetAssetClassInfo_Request::InternalSwap(CEcon_GetAssetClassInfo_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  classes_.InternalSwap(&other->classes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEcon_GetAssetClassInfo_Request, high_pri_)
      + sizeof(CEcon_GetAssetClassInfo_Request::high_pri_)
      - PROTOBUF_FIELD_OFFSET(CEcon_GetAssetClassInfo_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEcon_GetAssetClassInfo_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[13]);
}

// ===================================================================

class CEcon_GetAssetClassInfo_Response::_Internal {
 public:
};

CEcon_GetAssetClassInfo_Response::CEcon_GetAssetClassInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  descriptions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEcon_GetAssetClassInfo_Response)
}
CEcon_GetAssetClassInfo_Response::CEcon_GetAssetClassInfo_Response(const CEcon_GetAssetClassInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      descriptions_(from.descriptions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CEcon_GetAssetClassInfo_Response)
}

inline void CEcon_GetAssetClassInfo_Response::SharedCtor() {
}

CEcon_GetAssetClassInfo_Response::~CEcon_GetAssetClassInfo_Response() {
  // @@protoc_insertion_point(destructor:CEcon_GetAssetClassInfo_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEcon_GetAssetClassInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CEcon_GetAssetClassInfo_Response::ArenaDtor(void* object) {
  CEcon_GetAssetClassInfo_Response* _this = reinterpret_cast< CEcon_GetAssetClassInfo_Response* >(object);
  (void)_this;
}
void CEcon_GetAssetClassInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEcon_GetAssetClassInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEcon_GetAssetClassInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CEcon_GetAssetClassInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descriptions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEcon_GetAssetClassInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CEconItem_Description descriptions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEcon_GetAssetClassInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEcon_GetAssetClassInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CEconItem_Description descriptions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_descriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_descriptions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEcon_GetAssetClassInfo_Response)
  return target;
}

size_t CEcon_GetAssetClassInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEcon_GetAssetClassInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CEconItem_Description descriptions = 1;
  total_size += 1UL * this->_internal_descriptions_size();
  for (const auto& msg : this->descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEcon_GetAssetClassInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEcon_GetAssetClassInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEcon_GetAssetClassInfo_Response::GetClassData() const { return &_class_data_; }

void CEcon_GetAssetClassInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEcon_GetAssetClassInfo_Response *>(to)->MergeFrom(
      static_cast<const CEcon_GetAssetClassInfo_Response &>(from));
}


void CEcon_GetAssetClassInfo_Response::MergeFrom(const CEcon_GetAssetClassInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEcon_GetAssetClassInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  descriptions_.MergeFrom(from.descriptions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEcon_GetAssetClassInfo_Response::CopyFrom(const CEcon_GetAssetClassInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEcon_GetAssetClassInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEcon_GetAssetClassInfo_Response::IsInitialized() const {
  return true;
}

void CEcon_GetAssetClassInfo_Response::InternalSwap(CEcon_GetAssetClassInfo_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  descriptions_.InternalSwap(&other->descriptions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CEcon_GetAssetClassInfo_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fecon_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fecon_2esteamclient_2eproto[14]);
}

// ===================================================================

Econ::~Econ() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Econ::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fecon_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fecon_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Econ::GetDescriptor() {
  return descriptor();
}

void Econ::GetInventoryItemsWithDescriptions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CEcon_GetInventoryItemsWithDescriptions_Request*,
                         ::CEcon_GetInventoryItemsWithDescriptions_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInventoryItemsWithDescriptions() not implemented.");
  done->Run();
}

void Econ::GetTradeOfferAccessToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CEcon_GetTradeOfferAccessToken_Request*,
                         ::CEcon_GetTradeOfferAccessToken_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTradeOfferAccessToken() not implemented.");
  done->Run();
}

void Econ::ClientGetItemShopOverlayAuthURL(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CEcon_ClientGetItemShopOverlayAuthURL_Request*,
                         ::CEcon_ClientGetItemShopOverlayAuthURL_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetItemShopOverlayAuthURL() not implemented.");
  done->Run();
}

void Econ::GetAssetClassInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CEcon_GetAssetClassInfo_Request*,
                         ::CEcon_GetAssetClassInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAssetClassInfo() not implemented.");
  done->Run();
}

void Econ::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fecon_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetInventoryItemsWithDescriptions(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CEcon_GetInventoryItemsWithDescriptions_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CEcon_GetInventoryItemsWithDescriptions_Response*>(
                 response),
             done);
      break;
    case 1:
      GetTradeOfferAccessToken(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CEcon_GetTradeOfferAccessToken_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CEcon_GetTradeOfferAccessToken_Response*>(
                 response),
             done);
      break;
    case 2:
      ClientGetItemShopOverlayAuthURL(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CEcon_ClientGetItemShopOverlayAuthURL_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CEcon_ClientGetItemShopOverlayAuthURL_Response*>(
                 response),
             done);
      break;
    case 3:
      GetAssetClassInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CEcon_GetAssetClassInfo_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CEcon_GetAssetClassInfo_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Econ::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CEcon_GetInventoryItemsWithDescriptions_Request::default_instance();
    case 1:
      return ::CEcon_GetTradeOfferAccessToken_Request::default_instance();
    case 2:
      return ::CEcon_ClientGetItemShopOverlayAuthURL_Request::default_instance();
    case 3:
      return ::CEcon_GetAssetClassInfo_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Econ::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CEcon_GetInventoryItemsWithDescriptions_Response::default_instance();
    case 1:
      return ::CEcon_GetTradeOfferAccessToken_Response::default_instance();
    case 2:
      return ::CEcon_ClientGetItemShopOverlayAuthURL_Response::default_instance();
    case 3:
      return ::CEcon_GetAssetClassInfo_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Econ_Stub::Econ_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Econ_Stub::Econ_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Econ_Stub::~Econ_Stub() {
  if (owns_channel_) delete channel_;
}

void Econ_Stub::GetInventoryItemsWithDescriptions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CEcon_GetInventoryItemsWithDescriptions_Request* request,
                              ::CEcon_GetInventoryItemsWithDescriptions_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Econ_Stub::GetTradeOfferAccessToken(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CEcon_GetTradeOfferAccessToken_Request* request,
                              ::CEcon_GetTradeOfferAccessToken_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Econ_Stub::ClientGetItemShopOverlayAuthURL(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CEcon_ClientGetItemShopOverlayAuthURL_Request* request,
                              ::CEcon_ClientGetItemShopOverlayAuthURL_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Econ_Stub::GetAssetClassInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CEcon_GetAssetClassInfo_Request* request,
                              ::CEcon_GetAssetClassInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions* Arena::CreateMaybeMessage< ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::CEcon_GetInventoryItemsWithDescriptions_Request* Arena::CreateMaybeMessage< ::CEcon_GetInventoryItemsWithDescriptions_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEcon_GetInventoryItemsWithDescriptions_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CEcon_Asset* Arena::CreateMaybeMessage< ::CEcon_Asset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEcon_Asset >(arena);
}
template<> PROTOBUF_NOINLINE ::CEconItem_DescriptionLine* Arena::CreateMaybeMessage< ::CEconItem_DescriptionLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEconItem_DescriptionLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CEconItem_Action* Arena::CreateMaybeMessage< ::CEconItem_Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEconItem_Action >(arena);
}
template<> PROTOBUF_NOINLINE ::CEconItem_Description* Arena::CreateMaybeMessage< ::CEconItem_Description >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEconItem_Description >(arena);
}
template<> PROTOBUF_NOINLINE ::CEconItem_Tag* Arena::CreateMaybeMessage< ::CEconItem_Tag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEconItem_Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::CEcon_GetInventoryItemsWithDescriptions_Response* Arena::CreateMaybeMessage< ::CEcon_GetInventoryItemsWithDescriptions_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEcon_GetInventoryItemsWithDescriptions_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CEcon_GetTradeOfferAccessToken_Request* Arena::CreateMaybeMessage< ::CEcon_GetTradeOfferAccessToken_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEcon_GetTradeOfferAccessToken_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CEcon_GetTradeOfferAccessToken_Response* Arena::CreateMaybeMessage< ::CEcon_GetTradeOfferAccessToken_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEcon_GetTradeOfferAccessToken_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CEcon_ClientGetItemShopOverlayAuthURL_Request* Arena::CreateMaybeMessage< ::CEcon_ClientGetItemShopOverlayAuthURL_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEcon_ClientGetItemShopOverlayAuthURL_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CEcon_ClientGetItemShopOverlayAuthURL_Response* Arena::CreateMaybeMessage< ::CEcon_ClientGetItemShopOverlayAuthURL_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEcon_ClientGetItemShopOverlayAuthURL_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CEcon_GetAssetClassInfo_Request_Class* Arena::CreateMaybeMessage< ::CEcon_GetAssetClassInfo_Request_Class >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEcon_GetAssetClassInfo_Request_Class >(arena);
}
template<> PROTOBUF_NOINLINE ::CEcon_GetAssetClassInfo_Request* Arena::CreateMaybeMessage< ::CEcon_GetAssetClassInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEcon_GetAssetClassInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CEcon_GetAssetClassInfo_Response* Arena::CreateMaybeMessage< ::CEcon_GetAssetClassInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEcon_GetAssetClassInfo_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
