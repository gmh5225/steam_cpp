// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientmetrics.steamclient.proto

#include "steammessages_clientmetrics.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CClientMetrics_AppInterfaceCreation::CClientMetrics_AppInterfaceCreation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : raw_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , requested_interface_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CClientMetrics_AppInterfaceCreationDefaultTypeInternal {
  constexpr CClientMetrics_AppInterfaceCreationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_AppInterfaceCreationDefaultTypeInternal() {}
  union {
    CClientMetrics_AppInterfaceCreation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_AppInterfaceCreationDefaultTypeInternal _CClientMetrics_AppInterfaceCreation_default_instance_;
constexpr CClientMetrics_AppInterfaceMethodCounts::CClientMetrics_AppInterfaceMethodCounts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interface_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , method_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , call_count_(0u){}
struct CClientMetrics_AppInterfaceMethodCountsDefaultTypeInternal {
  constexpr CClientMetrics_AppInterfaceMethodCountsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_AppInterfaceMethodCountsDefaultTypeInternal() {}
  union {
    CClientMetrics_AppInterfaceMethodCounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_AppInterfaceMethodCountsDefaultTypeInternal _CClientMetrics_AppInterfaceMethodCounts_default_instance_;
constexpr CClientMetrics_AppInterfaceStats_Notification::CClientMetrics_AppInterfaceStats_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interfaces_created_()
  , methods_called_()
  , game_id_(uint64_t{0u})
  , session_length_seconds_(0u){}
struct CClientMetrics_AppInterfaceStats_NotificationDefaultTypeInternal {
  constexpr CClientMetrics_AppInterfaceStats_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_AppInterfaceStats_NotificationDefaultTypeInternal() {}
  union {
    CClientMetrics_AppInterfaceStats_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_AppInterfaceStats_NotificationDefaultTypeInternal _CClientMetrics_AppInterfaceStats_Notification_default_instance_;
constexpr CClientMetrics_IPv6Connectivity_Result::CClientMetrics_IPv6Connectivity_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocol_tested_(0u)
  , connectivity_state_(0u){}
struct CClientMetrics_IPv6Connectivity_ResultDefaultTypeInternal {
  constexpr CClientMetrics_IPv6Connectivity_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_IPv6Connectivity_ResultDefaultTypeInternal() {}
  union {
    CClientMetrics_IPv6Connectivity_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_IPv6Connectivity_ResultDefaultTypeInternal _CClientMetrics_IPv6Connectivity_Result_default_instance_;
constexpr CClientMetrics_IPv6Connectivity_Notification::CClientMetrics_IPv6Connectivity_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , cell_id_(0u)
  , private_ip_is_rfc6598_(false){}
struct CClientMetrics_IPv6Connectivity_NotificationDefaultTypeInternal {
  constexpr CClientMetrics_IPv6Connectivity_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_IPv6Connectivity_NotificationDefaultTypeInternal() {}
  union {
    CClientMetrics_IPv6Connectivity_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_IPv6Connectivity_NotificationDefaultTypeInternal _CClientMetrics_IPv6Connectivity_Notification_default_instance_;
constexpr CClientMetrics_SteamPipeWorkStats_Operation::CClientMetrics_SteamPipeWorkStats_Operation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , num_ops_(0u)
  , num_bytes_(uint64_t{0u})
  , busy_time_ms_(uint64_t{0u})
  , idle_time_ms_(uint64_t{0u})
  , sum_run_time_ms_(uint64_t{0u})
  , sum_wait_time_ms_(uint64_t{0u}){}
struct CClientMetrics_SteamPipeWorkStats_OperationDefaultTypeInternal {
  constexpr CClientMetrics_SteamPipeWorkStats_OperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_SteamPipeWorkStats_OperationDefaultTypeInternal() {}
  union {
    CClientMetrics_SteamPipeWorkStats_Operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_SteamPipeWorkStats_OperationDefaultTypeInternal _CClientMetrics_SteamPipeWorkStats_Operation_default_instance_;
constexpr CClientMetrics_SteamPipeWorkStats_Notification::CClientMetrics_SteamPipeWorkStats_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operations_()
  , appid_(0u)
  , depotid_(0u)
  , work_type_(0)

  , hardware_type_(0u){}
struct CClientMetrics_SteamPipeWorkStats_NotificationDefaultTypeInternal {
  constexpr CClientMetrics_SteamPipeWorkStats_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_SteamPipeWorkStats_NotificationDefaultTypeInternal() {}
  union {
    CClientMetrics_SteamPipeWorkStats_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_SteamPipeWorkStats_NotificationDefaultTypeInternal _CClientMetrics_SteamPipeWorkStats_Notification_default_instance_;
constexpr CClientMetrics_ReportReactUsage_Notification_RouteData::CClientMetrics_ReportReactUsage_Notification_RouteData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : route_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(0u){}
struct CClientMetrics_ReportReactUsage_Notification_RouteDataDefaultTypeInternal {
  constexpr CClientMetrics_ReportReactUsage_Notification_RouteDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_ReportReactUsage_Notification_RouteDataDefaultTypeInternal() {}
  union {
    CClientMetrics_ReportReactUsage_Notification_RouteData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_ReportReactUsage_Notification_RouteDataDefaultTypeInternal _CClientMetrics_ReportReactUsage_Notification_RouteData_default_instance_;
constexpr CClientMetrics_ReportReactUsage_Notification_ComponentData::CClientMetrics_ReportReactUsage_Notification_ComponentData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : component_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(0u){}
struct CClientMetrics_ReportReactUsage_Notification_ComponentDataDefaultTypeInternal {
  constexpr CClientMetrics_ReportReactUsage_Notification_ComponentDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_ReportReactUsage_Notification_ComponentDataDefaultTypeInternal() {}
  union {
    CClientMetrics_ReportReactUsage_Notification_ComponentData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_ReportReactUsage_Notification_ComponentDataDefaultTypeInternal _CClientMetrics_ReportReactUsage_Notification_ComponentData_default_instance_;
constexpr CClientMetrics_ReportReactUsage_Notification_ActionData::CClientMetrics_ReportReactUsage_Notification_ActionData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(0u){}
struct CClientMetrics_ReportReactUsage_Notification_ActionDataDefaultTypeInternal {
  constexpr CClientMetrics_ReportReactUsage_Notification_ActionDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_ReportReactUsage_Notification_ActionDataDefaultTypeInternal() {}
  union {
    CClientMetrics_ReportReactUsage_Notification_ActionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_ReportReactUsage_Notification_ActionDataDefaultTypeInternal _CClientMetrics_ReportReactUsage_Notification_ActionData_default_instance_;
constexpr CClientMetrics_ReportReactUsage_Notification::CClientMetrics_ReportReactUsage_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routes_()
  , components_()
  , actions_()
  , product_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CClientMetrics_ReportReactUsage_NotificationDefaultTypeInternal {
  constexpr CClientMetrics_ReportReactUsage_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_ReportReactUsage_NotificationDefaultTypeInternal() {}
  union {
    CClientMetrics_ReportReactUsage_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_ReportReactUsage_NotificationDefaultTypeInternal _CClientMetrics_ReportReactUsage_Notification_default_instance_;
constexpr CClientMetrics_ReportClientError_Notification_Error::CClientMetrics_ReportClientError_Notification_Error(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(0u){}
struct CClientMetrics_ReportClientError_Notification_ErrorDefaultTypeInternal {
  constexpr CClientMetrics_ReportClientError_Notification_ErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_ReportClientError_Notification_ErrorDefaultTypeInternal() {}
  union {
    CClientMetrics_ReportClientError_Notification_Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_ReportClientError_Notification_ErrorDefaultTypeInternal _CClientMetrics_ReportClientError_Notification_Error_default_instance_;
constexpr CClientMetrics_ReportClientError_Notification::CClientMetrics_ReportClientError_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errors_()
  , product_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CClientMetrics_ReportClientError_NotificationDefaultTypeInternal {
  constexpr CClientMetrics_ReportClientError_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_ReportClientError_NotificationDefaultTypeInternal() {}
  union {
    CClientMetrics_ReportClientError_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_ReportClientError_NotificationDefaultTypeInternal _CClientMetrics_ReportClientError_Notification_default_instance_;
constexpr CClientMetrics_ClientBootstrap_Notification::CClientMetrics_ClientBootstrap_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : summary_(nullptr){}
struct CClientMetrics_ClientBootstrap_NotificationDefaultTypeInternal {
  constexpr CClientMetrics_ClientBootstrap_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_ClientBootstrap_NotificationDefaultTypeInternal() {}
  union {
    CClientMetrics_ClientBootstrap_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_ClientBootstrap_NotificationDefaultTypeInternal _CClientMetrics_ClientBootstrap_Notification_default_instance_;
constexpr CClientMetrics_DownloadRates_Notification_StatsInfo::CClientMetrics_DownloadRates_Notification_StatsInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : host_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_type_(0u)
  , source_id_(0u)
  , bytes_(uint64_t{0u})
  , microseconds_(uint64_t{0u})
  , used_ipv6_(false)
  , proxied_(false)
  , used_http2_(false)
  , cache_hits_(0u)
  , hit_bytes_(uint64_t{0u})
  , miss_bytes_(uint64_t{0u})
  , cache_misses_(0u){}
struct CClientMetrics_DownloadRates_Notification_StatsInfoDefaultTypeInternal {
  constexpr CClientMetrics_DownloadRates_Notification_StatsInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_DownloadRates_Notification_StatsInfoDefaultTypeInternal() {}
  union {
    CClientMetrics_DownloadRates_Notification_StatsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_DownloadRates_Notification_StatsInfoDefaultTypeInternal _CClientMetrics_DownloadRates_Notification_StatsInfo_default_instance_;
constexpr CClientMetrics_DownloadRates_Notification::CClientMetrics_DownloadRates_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_()
  , cell_id_(0u)
  , throttling_kbps_(0u){}
struct CClientMetrics_DownloadRates_NotificationDefaultTypeInternal {
  constexpr CClientMetrics_DownloadRates_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_DownloadRates_NotificationDefaultTypeInternal() {}
  union {
    CClientMetrics_DownloadRates_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_DownloadRates_NotificationDefaultTypeInternal _CClientMetrics_DownloadRates_Notification_default_instance_;
constexpr CClientMetrics_ContentValidation_Notification::CClientMetrics_ContentValidation_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validation_result_(0)
  , app_id_(0u)
  , staged_files_(false)
  , user_initiated_(false)
  , early_out_(false)
  , chunks_scanned_(0u)
  , bytes_scanned_(uint64_t{0u})
  , chunk_bytes_corrupt_(uint64_t{0u})
  , total_file_size_corrupt_(uint64_t{0u})
  , chunks_corrupt_(0u){}
struct CClientMetrics_ContentValidation_NotificationDefaultTypeInternal {
  constexpr CClientMetrics_ContentValidation_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_ContentValidation_NotificationDefaultTypeInternal() {}
  union {
    CClientMetrics_ContentValidation_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_ContentValidation_NotificationDefaultTypeInternal _CClientMetrics_ContentValidation_Notification_default_instance_;
constexpr CClientMetrics_CloudAppSyncStats_Notification::CClientMetrics_CloudAppSyncStats_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(0u)
  , platform_type_(0u)
  , preload_(false)
  , blocking_app_launch_(false)
  , files_uploaded_(0u)
  , files_downloaded_(0u)
  , files_deleted_(0u)
  , bytes_uploaded_(uint64_t{0u})
  , bytes_downloaded_(uint64_t{0u})
  , microsec_total_(uint64_t{0u})
  , microsec_init_caches_(uint64_t{0u})
  , microsec_validate_state_(uint64_t{0u})
  , microsec_ac_launch_(uint64_t{0u})
  , microsec_ac_prep_user_files_(uint64_t{0u})
  , microsec_ac_exit_(uint64_t{0u})
  , microsec_build_sync_list_(uint64_t{0u})
  , microsec_delete_files_(uint64_t{0u})
  , microsec_download_files_(uint64_t{0u})
  , microsec_upload_files_(uint64_t{0u})
  , hardware_type_(0u)
  , files_managed_(0u){}
struct CClientMetrics_CloudAppSyncStats_NotificationDefaultTypeInternal {
  constexpr CClientMetrics_CloudAppSyncStats_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_CloudAppSyncStats_NotificationDefaultTypeInternal() {}
  union {
    CClientMetrics_CloudAppSyncStats_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_CloudAppSyncStats_NotificationDefaultTypeInternal _CClientMetrics_CloudAppSyncStats_Notification_default_instance_;
constexpr CClientMetrics_ContentDownloadResponse_Counts_Notification::CClientMetrics_ContentDownloadResponse_Counts_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr)
  , cell_id_(0u){}
struct CClientMetrics_ContentDownloadResponse_Counts_NotificationDefaultTypeInternal {
  constexpr CClientMetrics_ContentDownloadResponse_Counts_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_ContentDownloadResponse_Counts_NotificationDefaultTypeInternal() {}
  union {
    CClientMetrics_ContentDownloadResponse_Counts_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_ContentDownloadResponse_Counts_NotificationDefaultTypeInternal _CClientMetrics_ContentDownloadResponse_Counts_Notification_default_instance_;
constexpr CClientMetrics_ReportClientArgs_Notification::CClientMetrics_ReportClientArgs_Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_args_()
  , gpu_webview_regkey_disabled_(false)
  , suppress_gpu_chrome_(false)
  , browser_not_supported_(false)
  , hw_accel_video_regkey_disabled_(false)
  , mini_mode_enabled_(false)
  , fps_counter_enabled_(false)
  , library_low_bandwidth_mode_enabled_(false)
  , library_low_perf_mode_enabled_(false){}
struct CClientMetrics_ReportClientArgs_NotificationDefaultTypeInternal {
  constexpr CClientMetrics_ReportClientArgs_NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMetrics_ReportClientArgs_NotificationDefaultTypeInternal() {}
  union {
    CClientMetrics_ReportClientArgs_Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMetrics_ReportClientArgs_NotificationDefaultTypeInternal _CClientMetrics_ReportClientArgs_Notification_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fclientmetrics_2esteamclient_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fclientmetrics_2esteamclient_2eproto[1];

const uint32_t TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_AppInterfaceCreation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_AppInterfaceCreation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_AppInterfaceCreation, raw_version_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_AppInterfaceCreation, requested_interface_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_AppInterfaceMethodCounts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_AppInterfaceMethodCounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_AppInterfaceMethodCounts, interface_name_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_AppInterfaceMethodCounts, method_name_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_AppInterfaceMethodCounts, call_count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_AppInterfaceStats_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_AppInterfaceStats_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_AppInterfaceStats_Notification, game_id_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_AppInterfaceStats_Notification, interfaces_created_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_AppInterfaceStats_Notification, methods_called_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_AppInterfaceStats_Notification, session_length_seconds_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_IPv6Connectivity_Result, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_IPv6Connectivity_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_IPv6Connectivity_Result, protocol_tested_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_IPv6Connectivity_Result, connectivity_state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_IPv6Connectivity_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_IPv6Connectivity_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_IPv6Connectivity_Notification, cell_id_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_IPv6Connectivity_Notification, results_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_IPv6Connectivity_Notification, private_ip_is_rfc6598_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Operation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Operation, type_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Operation, num_ops_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Operation, num_bytes_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Operation, busy_time_ms_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Operation, idle_time_ms_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Operation, sum_run_time_ms_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Operation, sum_wait_time_ms_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Notification, appid_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Notification, depotid_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Notification, work_type_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Notification, operations_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_SteamPipeWorkStats_Notification, hardware_type_),
  0,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification_RouteData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification_RouteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification_RouteData, route_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification_RouteData, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification_ComponentData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification_ComponentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification_ComponentData, component_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification_ComponentData, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification_ActionData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification_ActionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification_ActionData, action_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification_ActionData, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification, product_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification, version_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification, routes_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification, components_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportReactUsage_Notification, actions_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientError_Notification_Error, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientError_Notification_Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientError_Notification_Error, identifier_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientError_Notification_Error, message_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientError_Notification_Error, count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientError_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientError_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientError_Notification, product_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientError_Notification, version_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientError_Notification, errors_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ClientBootstrap_Notification, summary_),
  0,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification_StatsInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification_StatsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification_StatsInfo, source_type_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification_StatsInfo, source_id_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification_StatsInfo, bytes_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification_StatsInfo, host_name_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification_StatsInfo, microseconds_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification_StatsInfo, used_ipv6_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification_StatsInfo, proxied_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification_StatsInfo, used_http2_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification_StatsInfo, cache_hits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification_StatsInfo, cache_misses_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification_StatsInfo, hit_bytes_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification_StatsInfo, miss_bytes_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  7,
  8,
  11,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification, cell_id_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification, stats_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_DownloadRates_Notification, throttling_kbps_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentValidation_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentValidation_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentValidation_Notification, validation_result_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentValidation_Notification, app_id_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentValidation_Notification, staged_files_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentValidation_Notification, user_initiated_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentValidation_Notification, early_out_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentValidation_Notification, chunks_scanned_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentValidation_Notification, chunks_corrupt_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentValidation_Notification, bytes_scanned_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentValidation_Notification, chunk_bytes_corrupt_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentValidation_Notification, total_file_size_corrupt_),
  0,
  1,
  2,
  3,
  4,
  5,
  9,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, app_id_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, platform_type_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, preload_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, blocking_app_launch_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, files_uploaded_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, files_downloaded_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, files_deleted_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, bytes_uploaded_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, bytes_downloaded_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, microsec_total_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, microsec_init_caches_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, microsec_validate_state_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, microsec_ac_launch_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, microsec_ac_prep_user_files_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, microsec_ac_exit_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, microsec_build_sync_list_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, microsec_delete_files_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, microsec_download_files_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, microsec_upload_files_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, hardware_type_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_CloudAppSyncStats_Notification, files_managed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_Counts_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_Counts_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_Counts_Notification, cell_id_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ContentDownloadResponse_Counts_Notification, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientArgs_Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientArgs_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientArgs_Notification, client_args_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientArgs_Notification, gpu_webview_regkey_disabled_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientArgs_Notification, suppress_gpu_chrome_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientArgs_Notification, browser_not_supported_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientArgs_Notification, hw_accel_video_regkey_disabled_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientArgs_Notification, mini_mode_enabled_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientArgs_Notification, fps_counter_enabled_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientArgs_Notification, library_low_bandwidth_mode_enabled_),
  PROTOBUF_FIELD_OFFSET(::CClientMetrics_ReportClientArgs_Notification, library_low_perf_mode_enabled_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CClientMetrics_AppInterfaceCreation)},
  { 10, 19, -1, sizeof(::CClientMetrics_AppInterfaceMethodCounts)},
  { 22, 32, -1, sizeof(::CClientMetrics_AppInterfaceStats_Notification)},
  { 36, 44, -1, sizeof(::CClientMetrics_IPv6Connectivity_Result)},
  { 46, 55, -1, sizeof(::CClientMetrics_IPv6Connectivity_Notification)},
  { 58, 71, -1, sizeof(::CClientMetrics_SteamPipeWorkStats_Operation)},
  { 78, 89, -1, sizeof(::CClientMetrics_SteamPipeWorkStats_Notification)},
  { 94, 102, -1, sizeof(::CClientMetrics_ReportReactUsage_Notification_RouteData)},
  { 104, 112, -1, sizeof(::CClientMetrics_ReportReactUsage_Notification_ComponentData)},
  { 114, 122, -1, sizeof(::CClientMetrics_ReportReactUsage_Notification_ActionData)},
  { 124, 135, -1, sizeof(::CClientMetrics_ReportReactUsage_Notification)},
  { 140, 149, -1, sizeof(::CClientMetrics_ReportClientError_Notification_Error)},
  { 152, 161, -1, sizeof(::CClientMetrics_ReportClientError_Notification)},
  { 164, 171, -1, sizeof(::CClientMetrics_ClientBootstrap_Notification)},
  { 172, 190, -1, sizeof(::CClientMetrics_DownloadRates_Notification_StatsInfo)},
  { 202, 211, -1, sizeof(::CClientMetrics_DownloadRates_Notification)},
  { 214, 230, -1, sizeof(::CClientMetrics_ContentValidation_Notification)},
  { 240, 267, -1, sizeof(::CClientMetrics_CloudAppSyncStats_Notification)},
  { 288, 296, -1, sizeof(::CClientMetrics_ContentDownloadResponse_Counts_Notification)},
  { 298, 313, -1, sizeof(::CClientMetrics_ReportClientArgs_Notification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_AppInterfaceCreation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_AppInterfaceMethodCounts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_AppInterfaceStats_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_IPv6Connectivity_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_IPv6Connectivity_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_SteamPipeWorkStats_Operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_SteamPipeWorkStats_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_ReportReactUsage_Notification_RouteData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_ReportReactUsage_Notification_ComponentData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_ReportReactUsage_Notification_ActionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_ReportReactUsage_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_ReportClientError_Notification_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_ReportClientError_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_ClientBootstrap_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_DownloadRates_Notification_StatsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_DownloadRates_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_ContentValidation_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_CloudAppSyncStats_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_ContentDownloadResponse_Counts_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMetrics_ReportClientArgs_Notification_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientmetrics_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-steammessages_clientmetrics.steamclien"
  "t.proto\032\030steammessages_base.proto\032,steam"
  "messages_unified_base.steamclient.proto\032"
  "\023clientmetrics.proto\"\\\n#CClientMetrics_A"
  "ppInterfaceCreation\022\023\n\013raw_version\030\001 \001(\t"
  "\022 \n\030requested_interface_type\030\002 \001(\t\"j\n\'CC"
  "lientMetrics_AppInterfaceMethodCounts\022\026\n"
  "\016interface_name\030\001 \001(\t\022\023\n\013method_name\030\002 \001"
  "(\t\022\022\n\ncall_count\030\003 \001(\r\"\344\001\n-CClientMetric"
  "s_AppInterfaceStats_Notification\022\017\n\007game"
  "_id\030\001 \001(\004\022@\n\022interfaces_created\030\002 \003(\0132$."
  "CClientMetrics_AppInterfaceCreation\022@\n\016m"
  "ethods_called\030\003 \003(\0132(.CClientMetrics_App"
  "InterfaceMethodCounts\022\036\n\026session_length_"
  "seconds\030\004 \001(\r\"]\n&CClientMetrics_IPv6Conn"
  "ectivity_Result\022\027\n\017protocol_tested\030\001 \001(\r"
  "\022\032\n\022connectivity_state\030\002 \001(\r\"\230\001\n,CClient"
  "Metrics_IPv6Connectivity_Notification\022\017\n"
  "\007cell_id\030\001 \001(\r\0228\n\007results\030\002 \003(\0132\'.CClien"
  "tMetrics_IPv6Connectivity_Result\022\035\n\025priv"
  "ate_ip_is_rfc6598\030\003 \001(\010\"\373\001\n+CClientMetri"
  "cs_SteamPipeWorkStats_Operation\022I\n\004type\030"
  "\001 \001(\0162\030.ESteamPipeOperationType:!k_EStea"
  "mPipeOperationType_Invalid\022\017\n\007num_ops\030\002 "
  "\001(\r\022\021\n\tnum_bytes\030\003 \001(\004\022\024\n\014busy_time_ms\030\004"
  " \001(\004\022\024\n\014idle_time_ms\030\005 \001(\004\022\027\n\017sum_run_ti"
  "me_ms\030\006 \001(\004\022\030\n\020sum_wait_time_ms\030\007 \001(\004\"\365\001"
  "\n.CClientMetrics_SteamPipeWorkStats_Noti"
  "fication\022\r\n\005appid\030\001 \001(\r\022\017\n\007depotid\030\002 \001(\r"
  "\022J\n\twork_type\030\003 \001(\0162\023.ESteamPipeWorkType"
  ":\"k_ESteamPipeClientWorkType_Invalid\022@\n\n"
  "operations\030\004 \003(\0132,.CClientMetrics_SteamP"
  "ipeWorkStats_Operation\022\025\n\rhardware_type\030"
  "\005 \001(\r\"\300\003\n,CClientMetrics_ReportReactUsag"
  "e_Notification\022\017\n\007product\030\001 \001(\t\022\017\n\007versi"
  "on\030\002 \001(\t\022G\n\006routes\030\003 \003(\01327.CClientMetric"
  "s_ReportReactUsage_Notification.RouteDat"
  "a\022O\n\ncomponents\030\004 \003(\0132;.CClientMetrics_R"
  "eportReactUsage_Notification.ComponentDa"
  "ta\022I\n\007actions\030\005 \003(\01328.CClientMetrics_Rep"
  "ortReactUsage_Notification.ActionData\032)\n"
  "\tRouteData\022\r\n\005route\030\001 \001(\t\022\r\n\005count\030\002 \001(\r"
  "\0321\n\rComponentData\022\021\n\tcomponent\030\001 \001(\t\022\r\n\005"
  "count\030\002 \001(\r\032+\n\nActionData\022\016\n\006action\030\001 \001("
  "\t\022\r\n\005count\030\002 \001(\r\"\324\001\n-CClientMetrics_Repo"
  "rtClientError_Notification\022\017\n\007product\030\001 "
  "\001(\t\022\017\n\007version\030\002 \001(\t\022D\n\006errors\030\003 \003(\01324.C"
  "ClientMetrics_ReportClientError_Notifica"
  "tion.Error\032;\n\005Error\022\022\n\nidentifier\030\001 \001(\t\022"
  "\017\n\007message\030\002 \001(\t\022\r\n\005count\030\003 \001(\r\"g\n+CClie"
  "ntMetrics_ClientBootstrap_Notification\0228"
  "\n\007summary\030\001 \001(\0132\'.CClientMetrics_ClientB"
  "ootstrap_Summary\"\221\003\n)CClientMetrics_Down"
  "loadRates_Notification\022\017\n\007cell_id\030\001 \001(\r\022"
  "C\n\005stats\030\002 \003(\01324.CClientMetrics_Download"
  "Rates_Notification.StatsInfo\022\027\n\017throttli"
  "ng_kbps\030\003 \001(\r\032\364\001\n\tStatsInfo\022\023\n\013source_ty"
  "pe\030\001 \001(\r\022\021\n\tsource_id\030\002 \001(\r\022\r\n\005bytes\030\003 \001"
  "(\004\022\021\n\thost_name\030\004 \001(\t\022\024\n\014microseconds\030\005 "
  "\001(\004\022\021\n\tused_ipv6\030\006 \001(\010\022\017\n\007proxied\030\007 \001(\010\022"
  "\022\n\nused_http2\030\010 \001(\010\022\022\n\ncache_hits\030\t \001(\r\022"
  "\024\n\014cache_misses\030\n \001(\r\022\021\n\thit_bytes\030\013 \001(\004"
  "\022\022\n\nmiss_bytes\030\014 \001(\004\"\240\002\n-CClientMetrics_"
  "ContentValidation_Notification\022\031\n\021valida"
  "tion_result\030\001 \001(\005\022\016\n\006app_id\030\002 \001(\r\022\024\n\014sta"
  "ged_files\030\003 \001(\010\022\026\n\016user_initiated\030\004 \001(\010\022"
  "\021\n\tearly_out\030\005 \001(\010\022\026\n\016chunks_scanned\030\006 \001"
  "(\r\022\026\n\016chunks_corrupt\030\007 \001(\r\022\025\n\rbytes_scan"
  "ned\030\010 \001(\004\022\033\n\023chunk_bytes_corrupt\030\t \001(\004\022\037"
  "\n\027total_file_size_corrupt\030\n \001(\004\"\340\004\n-CCli"
  "entMetrics_CloudAppSyncStats_Notificatio"
  "n\022\016\n\006app_id\030\001 \001(\r\022\025\n\rplatform_type\030\002 \001(\r"
  "\022\017\n\007preload\030\003 \001(\010\022\033\n\023blocking_app_launch"
  "\030\004 \001(\010\022\026\n\016files_uploaded\030\005 \001(\r\022\030\n\020files_"
  "downloaded\030\006 \001(\r\022\025\n\rfiles_deleted\030\007 \001(\r\022"
  "\026\n\016bytes_uploaded\030\010 \001(\004\022\030\n\020bytes_downloa"
  "ded\030\t \001(\004\022\026\n\016microsec_total\030\n \001(\004\022\034\n\024mic"
  "rosec_init_caches\030\013 \001(\004\022\037\n\027microsec_vali"
  "date_state\030\014 \001(\004\022\032\n\022microsec_ac_launch\030\r"
  " \001(\004\022#\n\033microsec_ac_prep_user_files\030\016 \001("
  "\004\022\030\n\020microsec_ac_exit\030\017 \001(\004\022 \n\030microsec_"
  "build_sync_list\030\020 \001(\004\022\035\n\025microsec_delete"
  "_files\030\021 \001(\004\022\037\n\027microsec_download_files\030"
  "\022 \001(\004\022\035\n\025microsec_upload_files\030\023 \001(\004\022\025\n\r"
  "hardware_type\030\024 \001(\r\022\025\n\rfiles_managed\030\025 \001"
  "(\r\"\212\001\n:CClientMetrics_ContentDownloadRes"
  "ponse_Counts_Notification\022\017\n\007cell_id\030\001 \001"
  "(\r\022;\n\004data\030\002 \001(\0132-.CClientMetrics_Conten"
  "tDownloadResponse_Hosts\"\327\002\n,CClientMetri"
  "cs_ReportClientArgs_Notification\022\023\n\013clie"
  "nt_args\030\001 \003(\t\022#\n\033gpu_webview_regkey_disa"
  "bled\030\002 \001(\010\022\033\n\023suppress_gpu_chrome\030\003 \001(\010\022"
  "\035\n\025browser_not_supported\030\004 \001(\010\022&\n\036hw_acc"
  "el_video_regkey_disabled\030\005 \001(\010\022\031\n\021mini_m"
  "ode_enabled\030\006 \001(\010\022\033\n\023fps_counter_enabled"
  "\030\007 \001(\010\022*\n\"library_low_bandwidth_mode_ena"
  "bled\030\010 \001(\010\022%\n\035library_low_perf_mode_enab"
  "led\030\t \001(\010*q\n\022ESteamPipeWorkType\022&\n\"k_ESt"
  "eamPipeClientWorkType_Invalid\020\000\0223\n/k_ESt"
  "eamPipeClientWorkType_StageFromChunkStor"
  "es\020\001*\273\001\n\027ESteamPipeOperationType\022%\n!k_ES"
  "teamPipeOperationType_Invalid\020\000\022(\n$k_ESt"
  "eamPipeOperationType_DecryptCPU\020\001\022&\n\"k_E"
  "SteamPipeOperationType_DiskRead\020\002\022\'\n#k_E"
  "SteamPipeOperationType_DiskWrite\020\0032\216\010\n\rC"
  "lientMetrics\022\\\n\035ClientAppInterfaceStatsR"
  "eport\022..CClientMetrics_AppInterfaceStats"
  "_Notification\032\013.NoResponse\022Z\n\034ClientIPv6"
  "ConnectivityReport\022-.CClientMetrics_IPv6"
  "Connectivity_Notification\032\013.NoResponse\022X"
  "\n\030SteamPipeWorkStatsReport\022/.CClientMetr"
  "ics_SteamPipeWorkStats_Notification\032\013.No"
  "Response\022N\n\020ReportReactUsage\022-.CClientMe"
  "trics_ReportReactUsage_Notification\032\013.No"
  "Response\022P\n\021ReportClientError\022..CClientM"
  "etrics_ReportClientError_Notification\032\013."
  "NoResponse\022R\n\025ClientBootstrapReport\022,.CC"
  "lientMetrics_ClientBootstrap_Notificatio"
  "n\032\013.NoResponse\022T\n\031ClientDownloadRatesRep"
  "ort\022*.CClientMetrics_DownloadRates_Notif"
  "ication\032\013.NoResponse\022\\\n\035ClientContentVal"
  "idationReport\022..CClientMetrics_ContentVa"
  "lidation_Notification\032\013.NoResponse\022V\n\027Cl"
  "ientCloudAppSyncStats\022..CClientMetrics_C"
  "loudAppSyncStats_Notification\032\013.NoRespon"
  "se\022l\n ClientDownloadResponseCodeCounts\022;"
  ".CClientMetrics_ContentDownloadResponse_"
  "Counts_Notification\032\013.NoResponse\022N\n\020Repo"
  "rtClientArgs\022-.CClientMetrics_ReportClie"
  "ntArgs_Notification\032\013.NoResponse\032)\202\265\030%A "
  "service for client-reported metricsB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_clientmetrics_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto = {
  false, false, 5240, descriptor_table_protodef_steammessages_5fclientmetrics_2esteamclient_2eproto, "steammessages_clientmetrics.steamclient.proto", 
  &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once, descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_deps, 3, 20,
  schemas, file_default_instances, TableStruct_steammessages_5fclientmetrics_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5fclientmetrics_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5fclientmetrics_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientmetrics_2esteamclient_2eproto(&descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamPipeWorkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fclientmetrics_2esteamclient_2eproto[0];
}
bool ESteamPipeWorkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamPipeOperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto);
  return file_level_enum_descriptors_steammessages_5fclientmetrics_2esteamclient_2eproto[1];
}
bool ESteamPipeOperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CClientMetrics_AppInterfaceCreation::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_AppInterfaceCreation>()._has_bits_);
  static void set_has_raw_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_requested_interface_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClientMetrics_AppInterfaceCreation::CClientMetrics_AppInterfaceCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_AppInterfaceCreation)
}
CClientMetrics_AppInterfaceCreation::CClientMetrics_AppInterfaceCreation(const CClientMetrics_AppInterfaceCreation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  raw_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    raw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_raw_version()) {
    raw_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_raw_version(), 
      GetArenaForAllocation());
  }
  requested_interface_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    requested_interface_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_requested_interface_type()) {
    requested_interface_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_requested_interface_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_AppInterfaceCreation)
}

inline void CClientMetrics_AppInterfaceCreation::SharedCtor() {
raw_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  raw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
requested_interface_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  requested_interface_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CClientMetrics_AppInterfaceCreation::~CClientMetrics_AppInterfaceCreation() {
  // @@protoc_insertion_point(destructor:CClientMetrics_AppInterfaceCreation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_AppInterfaceCreation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  raw_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requested_interface_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientMetrics_AppInterfaceCreation::ArenaDtor(void* object) {
  CClientMetrics_AppInterfaceCreation* _this = reinterpret_cast< CClientMetrics_AppInterfaceCreation* >(object);
  (void)_this;
}
void CClientMetrics_AppInterfaceCreation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_AppInterfaceCreation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_AppInterfaceCreation::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_AppInterfaceCreation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      raw_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      requested_interface_type_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_AppInterfaceCreation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string raw_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_raw_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_AppInterfaceCreation.raw_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string requested_interface_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requested_interface_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_AppInterfaceCreation.requested_interface_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_AppInterfaceCreation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_AppInterfaceCreation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string raw_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_raw_version().data(), static_cast<int>(this->_internal_raw_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_AppInterfaceCreation.raw_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_raw_version(), target);
  }

  // optional string requested_interface_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requested_interface_type().data(), static_cast<int>(this->_internal_requested_interface_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_AppInterfaceCreation.requested_interface_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requested_interface_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_AppInterfaceCreation)
  return target;
}

size_t CClientMetrics_AppInterfaceCreation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_AppInterfaceCreation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string raw_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_raw_version());
    }

    // optional string requested_interface_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_requested_interface_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_AppInterfaceCreation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_AppInterfaceCreation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_AppInterfaceCreation::GetClassData() const { return &_class_data_; }

void CClientMetrics_AppInterfaceCreation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_AppInterfaceCreation *>(to)->MergeFrom(
      static_cast<const CClientMetrics_AppInterfaceCreation &>(from));
}


void CClientMetrics_AppInterfaceCreation::MergeFrom(const CClientMetrics_AppInterfaceCreation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_AppInterfaceCreation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_raw_version(from._internal_raw_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_requested_interface_type(from._internal_requested_interface_type());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_AppInterfaceCreation::CopyFrom(const CClientMetrics_AppInterfaceCreation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_AppInterfaceCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_AppInterfaceCreation::IsInitialized() const {
  return true;
}

void CClientMetrics_AppInterfaceCreation::InternalSwap(CClientMetrics_AppInterfaceCreation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &raw_version_, lhs_arena,
      &other->raw_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &requested_interface_type_, lhs_arena,
      &other->requested_interface_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_AppInterfaceCreation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[0]);
}

// ===================================================================

class CClientMetrics_AppInterfaceMethodCounts::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_AppInterfaceMethodCounts>()._has_bits_);
  static void set_has_interface_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_call_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CClientMetrics_AppInterfaceMethodCounts::CClientMetrics_AppInterfaceMethodCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_AppInterfaceMethodCounts)
}
CClientMetrics_AppInterfaceMethodCounts::CClientMetrics_AppInterfaceMethodCounts(const CClientMetrics_AppInterfaceMethodCounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interface_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    interface_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_interface_name()) {
    interface_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_interface_name(), 
      GetArenaForAllocation());
  }
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method_name()) {
    method_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_method_name(), 
      GetArenaForAllocation());
  }
  call_count_ = from.call_count_;
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_AppInterfaceMethodCounts)
}

inline void CClientMetrics_AppInterfaceMethodCounts::SharedCtor() {
interface_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  interface_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
call_count_ = 0u;
}

CClientMetrics_AppInterfaceMethodCounts::~CClientMetrics_AppInterfaceMethodCounts() {
  // @@protoc_insertion_point(destructor:CClientMetrics_AppInterfaceMethodCounts)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_AppInterfaceMethodCounts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  interface_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientMetrics_AppInterfaceMethodCounts::ArenaDtor(void* object) {
  CClientMetrics_AppInterfaceMethodCounts* _this = reinterpret_cast< CClientMetrics_AppInterfaceMethodCounts* >(object);
  (void)_this;
}
void CClientMetrics_AppInterfaceMethodCounts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_AppInterfaceMethodCounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_AppInterfaceMethodCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_AppInterfaceMethodCounts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      interface_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      method_name_.ClearNonDefaultToEmpty();
    }
  }
  call_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_AppInterfaceMethodCounts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string interface_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interface_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_AppInterfaceMethodCounts.interface_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string method_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_AppInterfaceMethodCounts.method_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 call_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_call_count(&has_bits);
          call_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_AppInterfaceMethodCounts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_AppInterfaceMethodCounts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string interface_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_interface_name().data(), static_cast<int>(this->_internal_interface_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_AppInterfaceMethodCounts.interface_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interface_name(), target);
  }

  // optional string method_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_AppInterfaceMethodCounts.method_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method_name(), target);
  }

  // optional uint32 call_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_call_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_AppInterfaceMethodCounts)
  return target;
}

size_t CClientMetrics_AppInterfaceMethodCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_AppInterfaceMethodCounts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string interface_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_interface_name());
    }

    // optional string method_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_method_name());
    }

    // optional uint32 call_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_call_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_AppInterfaceMethodCounts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_AppInterfaceMethodCounts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_AppInterfaceMethodCounts::GetClassData() const { return &_class_data_; }

void CClientMetrics_AppInterfaceMethodCounts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_AppInterfaceMethodCounts *>(to)->MergeFrom(
      static_cast<const CClientMetrics_AppInterfaceMethodCounts &>(from));
}


void CClientMetrics_AppInterfaceMethodCounts::MergeFrom(const CClientMetrics_AppInterfaceMethodCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_AppInterfaceMethodCounts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_interface_name(from._internal_interface_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_method_name(from._internal_method_name());
    }
    if (cached_has_bits & 0x00000004u) {
      call_count_ = from.call_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_AppInterfaceMethodCounts::CopyFrom(const CClientMetrics_AppInterfaceMethodCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_AppInterfaceMethodCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_AppInterfaceMethodCounts::IsInitialized() const {
  return true;
}

void CClientMetrics_AppInterfaceMethodCounts::InternalSwap(CClientMetrics_AppInterfaceMethodCounts* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &interface_name_, lhs_arena,
      &other->interface_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &method_name_, lhs_arena,
      &other->method_name_, rhs_arena
  );
  swap(call_count_, other->call_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_AppInterfaceMethodCounts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[1]);
}

// ===================================================================

class CClientMetrics_AppInterfaceStats_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_AppInterfaceStats_Notification>()._has_bits_);
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_length_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClientMetrics_AppInterfaceStats_Notification::CClientMetrics_AppInterfaceStats_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  interfaces_created_(arena),
  methods_called_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_AppInterfaceStats_Notification)
}
CClientMetrics_AppInterfaceStats_Notification::CClientMetrics_AppInterfaceStats_Notification(const CClientMetrics_AppInterfaceStats_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      interfaces_created_(from.interfaces_created_),
      methods_called_(from.methods_called_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_length_seconds_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(session_length_seconds_));
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_AppInterfaceStats_Notification)
}

inline void CClientMetrics_AppInterfaceStats_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_length_seconds_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(session_length_seconds_));
}

CClientMetrics_AppInterfaceStats_Notification::~CClientMetrics_AppInterfaceStats_Notification() {
  // @@protoc_insertion_point(destructor:CClientMetrics_AppInterfaceStats_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_AppInterfaceStats_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientMetrics_AppInterfaceStats_Notification::ArenaDtor(void* object) {
  CClientMetrics_AppInterfaceStats_Notification* _this = reinterpret_cast< CClientMetrics_AppInterfaceStats_Notification* >(object);
  (void)_this;
}
void CClientMetrics_AppInterfaceStats_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_AppInterfaceStats_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_AppInterfaceStats_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_AppInterfaceStats_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interfaces_created_.Clear();
  methods_called_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_length_seconds_) -
        reinterpret_cast<char*>(&game_id_)) + sizeof(session_length_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_AppInterfaceStats_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CClientMetrics_AppInterfaceCreation interfaces_created = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interfaces_created(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CClientMetrics_AppInterfaceMethodCounts methods_called = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_methods_called(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 session_length_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_session_length_seconds(&has_bits);
          session_length_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_AppInterfaceStats_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_AppInterfaceStats_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_id(), target);
  }

  // repeated .CClientMetrics_AppInterfaceCreation interfaces_created = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_interfaces_created_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_interfaces_created(i), target, stream);
  }

  // repeated .CClientMetrics_AppInterfaceMethodCounts methods_called = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_methods_called_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_methods_called(i), target, stream);
  }

  // optional uint32 session_length_seconds = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_session_length_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_AppInterfaceStats_Notification)
  return target;
}

size_t CClientMetrics_AppInterfaceStats_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_AppInterfaceStats_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CClientMetrics_AppInterfaceCreation interfaces_created = 2;
  total_size += 1UL * this->_internal_interfaces_created_size();
  for (const auto& msg : this->interfaces_created_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CClientMetrics_AppInterfaceMethodCounts methods_called = 3;
  total_size += 1UL * this->_internal_methods_called_size();
  for (const auto& msg : this->methods_called_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_game_id());
    }

    // optional uint32 session_length_seconds = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_length_seconds());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_AppInterfaceStats_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_AppInterfaceStats_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_AppInterfaceStats_Notification::GetClassData() const { return &_class_data_; }

void CClientMetrics_AppInterfaceStats_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_AppInterfaceStats_Notification *>(to)->MergeFrom(
      static_cast<const CClientMetrics_AppInterfaceStats_Notification &>(from));
}


void CClientMetrics_AppInterfaceStats_Notification::MergeFrom(const CClientMetrics_AppInterfaceStats_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_AppInterfaceStats_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  interfaces_created_.MergeFrom(from.interfaces_created_);
  methods_called_.MergeFrom(from.methods_called_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      session_length_seconds_ = from.session_length_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_AppInterfaceStats_Notification::CopyFrom(const CClientMetrics_AppInterfaceStats_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_AppInterfaceStats_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_AppInterfaceStats_Notification::IsInitialized() const {
  return true;
}

void CClientMetrics_AppInterfaceStats_Notification::InternalSwap(CClientMetrics_AppInterfaceStats_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  interfaces_created_.InternalSwap(&other->interfaces_created_);
  methods_called_.InternalSwap(&other->methods_called_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMetrics_AppInterfaceStats_Notification, session_length_seconds_)
      + sizeof(CClientMetrics_AppInterfaceStats_Notification::session_length_seconds_)
      - PROTOBUF_FIELD_OFFSET(CClientMetrics_AppInterfaceStats_Notification, game_id_)>(
          reinterpret_cast<char*>(&game_id_),
          reinterpret_cast<char*>(&other->game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_AppInterfaceStats_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[2]);
}

// ===================================================================

class CClientMetrics_IPv6Connectivity_Result::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_IPv6Connectivity_Result>()._has_bits_);
  static void set_has_protocol_tested(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_connectivity_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClientMetrics_IPv6Connectivity_Result::CClientMetrics_IPv6Connectivity_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_IPv6Connectivity_Result)
}
CClientMetrics_IPv6Connectivity_Result::CClientMetrics_IPv6Connectivity_Result(const CClientMetrics_IPv6Connectivity_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&protocol_tested_, &from.protocol_tested_,
    static_cast<size_t>(reinterpret_cast<char*>(&connectivity_state_) -
    reinterpret_cast<char*>(&protocol_tested_)) + sizeof(connectivity_state_));
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_IPv6Connectivity_Result)
}

inline void CClientMetrics_IPv6Connectivity_Result::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&protocol_tested_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&connectivity_state_) -
    reinterpret_cast<char*>(&protocol_tested_)) + sizeof(connectivity_state_));
}

CClientMetrics_IPv6Connectivity_Result::~CClientMetrics_IPv6Connectivity_Result() {
  // @@protoc_insertion_point(destructor:CClientMetrics_IPv6Connectivity_Result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_IPv6Connectivity_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientMetrics_IPv6Connectivity_Result::ArenaDtor(void* object) {
  CClientMetrics_IPv6Connectivity_Result* _this = reinterpret_cast< CClientMetrics_IPv6Connectivity_Result* >(object);
  (void)_this;
}
void CClientMetrics_IPv6Connectivity_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_IPv6Connectivity_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_IPv6Connectivity_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_IPv6Connectivity_Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&protocol_tested_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connectivity_state_) -
        reinterpret_cast<char*>(&protocol_tested_)) + sizeof(connectivity_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_IPv6Connectivity_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 protocol_tested = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_protocol_tested(&has_bits);
          protocol_tested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 connectivity_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_connectivity_state(&has_bits);
          connectivity_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_IPv6Connectivity_Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_IPv6Connectivity_Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_tested = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_protocol_tested(), target);
  }

  // optional uint32 connectivity_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_connectivity_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_IPv6Connectivity_Result)
  return target;
}

size_t CClientMetrics_IPv6Connectivity_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_IPv6Connectivity_Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 protocol_tested = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_protocol_tested());
    }

    // optional uint32 connectivity_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_connectivity_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_IPv6Connectivity_Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_IPv6Connectivity_Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_IPv6Connectivity_Result::GetClassData() const { return &_class_data_; }

void CClientMetrics_IPv6Connectivity_Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_IPv6Connectivity_Result *>(to)->MergeFrom(
      static_cast<const CClientMetrics_IPv6Connectivity_Result &>(from));
}


void CClientMetrics_IPv6Connectivity_Result::MergeFrom(const CClientMetrics_IPv6Connectivity_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_IPv6Connectivity_Result)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      protocol_tested_ = from.protocol_tested_;
    }
    if (cached_has_bits & 0x00000002u) {
      connectivity_state_ = from.connectivity_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_IPv6Connectivity_Result::CopyFrom(const CClientMetrics_IPv6Connectivity_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_IPv6Connectivity_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_IPv6Connectivity_Result::IsInitialized() const {
  return true;
}

void CClientMetrics_IPv6Connectivity_Result::InternalSwap(CClientMetrics_IPv6Connectivity_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMetrics_IPv6Connectivity_Result, connectivity_state_)
      + sizeof(CClientMetrics_IPv6Connectivity_Result::connectivity_state_)
      - PROTOBUF_FIELD_OFFSET(CClientMetrics_IPv6Connectivity_Result, protocol_tested_)>(
          reinterpret_cast<char*>(&protocol_tested_),
          reinterpret_cast<char*>(&other->protocol_tested_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_IPv6Connectivity_Result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[3]);
}

// ===================================================================

class CClientMetrics_IPv6Connectivity_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_IPv6Connectivity_Notification>()._has_bits_);
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_private_ip_is_rfc6598(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClientMetrics_IPv6Connectivity_Notification::CClientMetrics_IPv6Connectivity_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_IPv6Connectivity_Notification)
}
CClientMetrics_IPv6Connectivity_Notification::CClientMetrics_IPv6Connectivity_Notification(const CClientMetrics_IPv6Connectivity_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cell_id_, &from.cell_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&private_ip_is_rfc6598_) -
    reinterpret_cast<char*>(&cell_id_)) + sizeof(private_ip_is_rfc6598_));
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_IPv6Connectivity_Notification)
}

inline void CClientMetrics_IPv6Connectivity_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&private_ip_is_rfc6598_) -
    reinterpret_cast<char*>(&cell_id_)) + sizeof(private_ip_is_rfc6598_));
}

CClientMetrics_IPv6Connectivity_Notification::~CClientMetrics_IPv6Connectivity_Notification() {
  // @@protoc_insertion_point(destructor:CClientMetrics_IPv6Connectivity_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_IPv6Connectivity_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientMetrics_IPv6Connectivity_Notification::ArenaDtor(void* object) {
  CClientMetrics_IPv6Connectivity_Notification* _this = reinterpret_cast< CClientMetrics_IPv6Connectivity_Notification* >(object);
  (void)_this;
}
void CClientMetrics_IPv6Connectivity_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_IPv6Connectivity_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_IPv6Connectivity_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_IPv6Connectivity_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cell_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&private_ip_is_rfc6598_) -
        reinterpret_cast<char*>(&cell_id_)) + sizeof(private_ip_is_rfc6598_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_IPv6Connectivity_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cell_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cell_id(&has_bits);
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CClientMetrics_IPv6Connectivity_Result results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool private_ip_is_rfc6598 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_private_ip_is_rfc6598(&has_bits);
          private_ip_is_rfc6598_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_IPv6Connectivity_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_IPv6Connectivity_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cell_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cell_id(), target);
  }

  // repeated .CClientMetrics_IPv6Connectivity_Result results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_results(i), target, stream);
  }

  // optional bool private_ip_is_rfc6598 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_private_ip_is_rfc6598(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_IPv6Connectivity_Notification)
  return target;
}

size_t CClientMetrics_IPv6Connectivity_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_IPv6Connectivity_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CClientMetrics_IPv6Connectivity_Result results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 cell_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_id());
    }

    // optional bool private_ip_is_rfc6598 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_IPv6Connectivity_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_IPv6Connectivity_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_IPv6Connectivity_Notification::GetClassData() const { return &_class_data_; }

void CClientMetrics_IPv6Connectivity_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_IPv6Connectivity_Notification *>(to)->MergeFrom(
      static_cast<const CClientMetrics_IPv6Connectivity_Notification &>(from));
}


void CClientMetrics_IPv6Connectivity_Notification::MergeFrom(const CClientMetrics_IPv6Connectivity_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_IPv6Connectivity_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      private_ip_is_rfc6598_ = from.private_ip_is_rfc6598_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_IPv6Connectivity_Notification::CopyFrom(const CClientMetrics_IPv6Connectivity_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_IPv6Connectivity_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_IPv6Connectivity_Notification::IsInitialized() const {
  return true;
}

void CClientMetrics_IPv6Connectivity_Notification::InternalSwap(CClientMetrics_IPv6Connectivity_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  results_.InternalSwap(&other->results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMetrics_IPv6Connectivity_Notification, private_ip_is_rfc6598_)
      + sizeof(CClientMetrics_IPv6Connectivity_Notification::private_ip_is_rfc6598_)
      - PROTOBUF_FIELD_OFFSET(CClientMetrics_IPv6Connectivity_Notification, cell_id_)>(
          reinterpret_cast<char*>(&cell_id_),
          reinterpret_cast<char*>(&other->cell_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_IPv6Connectivity_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[4]);
}

// ===================================================================

class CClientMetrics_SteamPipeWorkStats_Operation::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_SteamPipeWorkStats_Operation>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_ops(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_busy_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_idle_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sum_run_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sum_wait_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CClientMetrics_SteamPipeWorkStats_Operation::CClientMetrics_SteamPipeWorkStats_Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_SteamPipeWorkStats_Operation)
}
CClientMetrics_SteamPipeWorkStats_Operation::CClientMetrics_SteamPipeWorkStats_Operation(const CClientMetrics_SteamPipeWorkStats_Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sum_wait_time_ms_) -
    reinterpret_cast<char*>(&type_)) + sizeof(sum_wait_time_ms_));
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_SteamPipeWorkStats_Operation)
}

inline void CClientMetrics_SteamPipeWorkStats_Operation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sum_wait_time_ms_) -
    reinterpret_cast<char*>(&type_)) + sizeof(sum_wait_time_ms_));
}

CClientMetrics_SteamPipeWorkStats_Operation::~CClientMetrics_SteamPipeWorkStats_Operation() {
  // @@protoc_insertion_point(destructor:CClientMetrics_SteamPipeWorkStats_Operation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_SteamPipeWorkStats_Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientMetrics_SteamPipeWorkStats_Operation::ArenaDtor(void* object) {
  CClientMetrics_SteamPipeWorkStats_Operation* _this = reinterpret_cast< CClientMetrics_SteamPipeWorkStats_Operation* >(object);
  (void)_this;
}
void CClientMetrics_SteamPipeWorkStats_Operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_SteamPipeWorkStats_Operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_SteamPipeWorkStats_Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_SteamPipeWorkStats_Operation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sum_wait_time_ms_) -
        reinterpret_cast<char*>(&type_)) + sizeof(sum_wait_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_SteamPipeWorkStats_Operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ESteamPipeOperationType type = 1 [default = k_ESteamPipeOperationType_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ESteamPipeOperationType_IsValid(val))) {
            _internal_set_type(static_cast<::ESteamPipeOperationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_ops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_ops(&has_bits);
          num_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 num_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_bytes(&has_bits);
          num_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 busy_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_busy_time_ms(&has_bits);
          busy_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 idle_time_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_idle_time_ms(&has_bits);
          idle_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sum_run_time_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_sum_run_time_ms(&has_bits);
          sum_run_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 sum_wait_time_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_sum_wait_time_ms(&has_bits);
          sum_wait_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_SteamPipeWorkStats_Operation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_SteamPipeWorkStats_Operation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ESteamPipeOperationType type = 1 [default = k_ESteamPipeOperationType_Invalid];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint32 num_ops = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_ops(), target);
  }

  // optional uint64 num_bytes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_num_bytes(), target);
  }

  // optional uint64 busy_time_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_busy_time_ms(), target);
  }

  // optional uint64 idle_time_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_idle_time_ms(), target);
  }

  // optional uint64 sum_run_time_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sum_run_time_ms(), target);
  }

  // optional uint64 sum_wait_time_ms = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_sum_wait_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_SteamPipeWorkStats_Operation)
  return target;
}

size_t CClientMetrics_SteamPipeWorkStats_Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_SteamPipeWorkStats_Operation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .ESteamPipeOperationType type = 1 [default = k_ESteamPipeOperationType_Invalid];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 num_ops = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_ops());
    }

    // optional uint64 num_bytes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_num_bytes());
    }

    // optional uint64 busy_time_ms = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_busy_time_ms());
    }

    // optional uint64 idle_time_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_idle_time_ms());
    }

    // optional uint64 sum_run_time_ms = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sum_run_time_ms());
    }

    // optional uint64 sum_wait_time_ms = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sum_wait_time_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_SteamPipeWorkStats_Operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_SteamPipeWorkStats_Operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_SteamPipeWorkStats_Operation::GetClassData() const { return &_class_data_; }

void CClientMetrics_SteamPipeWorkStats_Operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_SteamPipeWorkStats_Operation *>(to)->MergeFrom(
      static_cast<const CClientMetrics_SteamPipeWorkStats_Operation &>(from));
}


void CClientMetrics_SteamPipeWorkStats_Operation::MergeFrom(const CClientMetrics_SteamPipeWorkStats_Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_SteamPipeWorkStats_Operation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_ops_ = from.num_ops_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_bytes_ = from.num_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      busy_time_ms_ = from.busy_time_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      idle_time_ms_ = from.idle_time_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      sum_run_time_ms_ = from.sum_run_time_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      sum_wait_time_ms_ = from.sum_wait_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_SteamPipeWorkStats_Operation::CopyFrom(const CClientMetrics_SteamPipeWorkStats_Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_SteamPipeWorkStats_Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_SteamPipeWorkStats_Operation::IsInitialized() const {
  return true;
}

void CClientMetrics_SteamPipeWorkStats_Operation::InternalSwap(CClientMetrics_SteamPipeWorkStats_Operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMetrics_SteamPipeWorkStats_Operation, sum_wait_time_ms_)
      + sizeof(CClientMetrics_SteamPipeWorkStats_Operation::sum_wait_time_ms_)
      - PROTOBUF_FIELD_OFFSET(CClientMetrics_SteamPipeWorkStats_Operation, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_SteamPipeWorkStats_Operation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[5]);
}

// ===================================================================

class CClientMetrics_SteamPipeWorkStats_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_SteamPipeWorkStats_Notification>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_depotid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_work_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hardware_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CClientMetrics_SteamPipeWorkStats_Notification::CClientMetrics_SteamPipeWorkStats_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  operations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_SteamPipeWorkStats_Notification)
}
CClientMetrics_SteamPipeWorkStats_Notification::CClientMetrics_SteamPipeWorkStats_Notification(const CClientMetrics_SteamPipeWorkStats_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hardware_type_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(hardware_type_));
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_SteamPipeWorkStats_Notification)
}

inline void CClientMetrics_SteamPipeWorkStats_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hardware_type_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(hardware_type_));
}

CClientMetrics_SteamPipeWorkStats_Notification::~CClientMetrics_SteamPipeWorkStats_Notification() {
  // @@protoc_insertion_point(destructor:CClientMetrics_SteamPipeWorkStats_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_SteamPipeWorkStats_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientMetrics_SteamPipeWorkStats_Notification::ArenaDtor(void* object) {
  CClientMetrics_SteamPipeWorkStats_Notification* _this = reinterpret_cast< CClientMetrics_SteamPipeWorkStats_Notification* >(object);
  (void)_this;
}
void CClientMetrics_SteamPipeWorkStats_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_SteamPipeWorkStats_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_SteamPipeWorkStats_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_SteamPipeWorkStats_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hardware_type_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(hardware_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_SteamPipeWorkStats_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 depotid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_depotid(&has_bits);
          depotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ESteamPipeWorkType work_type = 3 [default = k_ESteamPipeClientWorkType_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ESteamPipeWorkType_IsValid(val))) {
            _internal_set_work_type(static_cast<::ESteamPipeWorkType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CClientMetrics_SteamPipeWorkStats_Operation operations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hardware_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_hardware_type(&has_bits);
          hardware_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_SteamPipeWorkStats_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_SteamPipeWorkStats_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 depotid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_depotid(), target);
  }

  // optional .ESteamPipeWorkType work_type = 3 [default = k_ESteamPipeClientWorkType_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_work_type(), target);
  }

  // repeated .CClientMetrics_SteamPipeWorkStats_Operation operations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_operations(i), target, stream);
  }

  // optional uint32 hardware_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hardware_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_SteamPipeWorkStats_Notification)
  return target;
}

size_t CClientMetrics_SteamPipeWorkStats_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_SteamPipeWorkStats_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CClientMetrics_SteamPipeWorkStats_Operation operations = 4;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 depotid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_depotid());
    }

    // optional .ESteamPipeWorkType work_type = 3 [default = k_ESteamPipeClientWorkType_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_work_type());
    }

    // optional uint32 hardware_type = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hardware_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_SteamPipeWorkStats_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_SteamPipeWorkStats_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_SteamPipeWorkStats_Notification::GetClassData() const { return &_class_data_; }

void CClientMetrics_SteamPipeWorkStats_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_SteamPipeWorkStats_Notification *>(to)->MergeFrom(
      static_cast<const CClientMetrics_SteamPipeWorkStats_Notification &>(from));
}


void CClientMetrics_SteamPipeWorkStats_Notification::MergeFrom(const CClientMetrics_SteamPipeWorkStats_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_SteamPipeWorkStats_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      depotid_ = from.depotid_;
    }
    if (cached_has_bits & 0x00000004u) {
      work_type_ = from.work_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      hardware_type_ = from.hardware_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_SteamPipeWorkStats_Notification::CopyFrom(const CClientMetrics_SteamPipeWorkStats_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_SteamPipeWorkStats_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_SteamPipeWorkStats_Notification::IsInitialized() const {
  return true;
}

void CClientMetrics_SteamPipeWorkStats_Notification::InternalSwap(CClientMetrics_SteamPipeWorkStats_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  operations_.InternalSwap(&other->operations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMetrics_SteamPipeWorkStats_Notification, hardware_type_)
      + sizeof(CClientMetrics_SteamPipeWorkStats_Notification::hardware_type_)
      - PROTOBUF_FIELD_OFFSET(CClientMetrics_SteamPipeWorkStats_Notification, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_SteamPipeWorkStats_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[6]);
}

// ===================================================================

class CClientMetrics_ReportReactUsage_Notification_RouteData::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_ReportReactUsage_Notification_RouteData>()._has_bits_);
  static void set_has_route(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClientMetrics_ReportReactUsage_Notification_RouteData::CClientMetrics_ReportReactUsage_Notification_RouteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_ReportReactUsage_Notification.RouteData)
}
CClientMetrics_ReportReactUsage_Notification_RouteData::CClientMetrics_ReportReactUsage_Notification_RouteData(const CClientMetrics_ReportReactUsage_Notification_RouteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  route_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    route_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_route()) {
    route_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_route(), 
      GetArenaForAllocation());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_ReportReactUsage_Notification.RouteData)
}

inline void CClientMetrics_ReportReactUsage_Notification_RouteData::SharedCtor() {
route_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  route_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
count_ = 0u;
}

CClientMetrics_ReportReactUsage_Notification_RouteData::~CClientMetrics_ReportReactUsage_Notification_RouteData() {
  // @@protoc_insertion_point(destructor:CClientMetrics_ReportReactUsage_Notification.RouteData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_ReportReactUsage_Notification_RouteData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  route_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientMetrics_ReportReactUsage_Notification_RouteData::ArenaDtor(void* object) {
  CClientMetrics_ReportReactUsage_Notification_RouteData* _this = reinterpret_cast< CClientMetrics_ReportReactUsage_Notification_RouteData* >(object);
  (void)_this;
}
void CClientMetrics_ReportReactUsage_Notification_RouteData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_ReportReactUsage_Notification_RouteData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_ReportReactUsage_Notification_RouteData::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_ReportReactUsage_Notification.RouteData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    route_.ClearNonDefaultToEmpty();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_ReportReactUsage_Notification_RouteData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string route = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_route();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ReportReactUsage_Notification.RouteData.route");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_ReportReactUsage_Notification_RouteData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_ReportReactUsage_Notification.RouteData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string route = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_route().data(), static_cast<int>(this->_internal_route().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ReportReactUsage_Notification.RouteData.route");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_route(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_ReportReactUsage_Notification.RouteData)
  return target;
}

size_t CClientMetrics_ReportReactUsage_Notification_RouteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_ReportReactUsage_Notification.RouteData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string route = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_route());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_ReportReactUsage_Notification_RouteData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_ReportReactUsage_Notification_RouteData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_ReportReactUsage_Notification_RouteData::GetClassData() const { return &_class_data_; }

void CClientMetrics_ReportReactUsage_Notification_RouteData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_ReportReactUsage_Notification_RouteData *>(to)->MergeFrom(
      static_cast<const CClientMetrics_ReportReactUsage_Notification_RouteData &>(from));
}


void CClientMetrics_ReportReactUsage_Notification_RouteData::MergeFrom(const CClientMetrics_ReportReactUsage_Notification_RouteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_ReportReactUsage_Notification.RouteData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_route(from._internal_route());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_ReportReactUsage_Notification_RouteData::CopyFrom(const CClientMetrics_ReportReactUsage_Notification_RouteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_ReportReactUsage_Notification.RouteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_ReportReactUsage_Notification_RouteData::IsInitialized() const {
  return true;
}

void CClientMetrics_ReportReactUsage_Notification_RouteData::InternalSwap(CClientMetrics_ReportReactUsage_Notification_RouteData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &route_, lhs_arena,
      &other->route_, rhs_arena
  );
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_ReportReactUsage_Notification_RouteData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[7]);
}

// ===================================================================

class CClientMetrics_ReportReactUsage_Notification_ComponentData::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_ReportReactUsage_Notification_ComponentData>()._has_bits_);
  static void set_has_component(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClientMetrics_ReportReactUsage_Notification_ComponentData::CClientMetrics_ReportReactUsage_Notification_ComponentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_ReportReactUsage_Notification.ComponentData)
}
CClientMetrics_ReportReactUsage_Notification_ComponentData::CClientMetrics_ReportReactUsage_Notification_ComponentData(const CClientMetrics_ReportReactUsage_Notification_ComponentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  component_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_component()) {
    component_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_component(), 
      GetArenaForAllocation());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_ReportReactUsage_Notification.ComponentData)
}

inline void CClientMetrics_ReportReactUsage_Notification_ComponentData::SharedCtor() {
component_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  component_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
count_ = 0u;
}

CClientMetrics_ReportReactUsage_Notification_ComponentData::~CClientMetrics_ReportReactUsage_Notification_ComponentData() {
  // @@protoc_insertion_point(destructor:CClientMetrics_ReportReactUsage_Notification.ComponentData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_ReportReactUsage_Notification_ComponentData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  component_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientMetrics_ReportReactUsage_Notification_ComponentData::ArenaDtor(void* object) {
  CClientMetrics_ReportReactUsage_Notification_ComponentData* _this = reinterpret_cast< CClientMetrics_ReportReactUsage_Notification_ComponentData* >(object);
  (void)_this;
}
void CClientMetrics_ReportReactUsage_Notification_ComponentData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_ReportReactUsage_Notification_ComponentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_ReportReactUsage_Notification_ComponentData::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_ReportReactUsage_Notification.ComponentData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    component_.ClearNonDefaultToEmpty();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_ReportReactUsage_Notification_ComponentData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_component();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ReportReactUsage_Notification.ComponentData.component");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_ReportReactUsage_Notification_ComponentData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_ReportReactUsage_Notification.ComponentData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string component = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_component().data(), static_cast<int>(this->_internal_component().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ReportReactUsage_Notification.ComponentData.component");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_component(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_ReportReactUsage_Notification.ComponentData)
  return target;
}

size_t CClientMetrics_ReportReactUsage_Notification_ComponentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_ReportReactUsage_Notification.ComponentData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string component = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_component());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_ReportReactUsage_Notification_ComponentData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_ReportReactUsage_Notification_ComponentData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_ReportReactUsage_Notification_ComponentData::GetClassData() const { return &_class_data_; }

void CClientMetrics_ReportReactUsage_Notification_ComponentData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_ReportReactUsage_Notification_ComponentData *>(to)->MergeFrom(
      static_cast<const CClientMetrics_ReportReactUsage_Notification_ComponentData &>(from));
}


void CClientMetrics_ReportReactUsage_Notification_ComponentData::MergeFrom(const CClientMetrics_ReportReactUsage_Notification_ComponentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_ReportReactUsage_Notification.ComponentData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_component(from._internal_component());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_ReportReactUsage_Notification_ComponentData::CopyFrom(const CClientMetrics_ReportReactUsage_Notification_ComponentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_ReportReactUsage_Notification.ComponentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_ReportReactUsage_Notification_ComponentData::IsInitialized() const {
  return true;
}

void CClientMetrics_ReportReactUsage_Notification_ComponentData::InternalSwap(CClientMetrics_ReportReactUsage_Notification_ComponentData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &component_, lhs_arena,
      &other->component_, rhs_arena
  );
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_ReportReactUsage_Notification_ComponentData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[8]);
}

// ===================================================================

class CClientMetrics_ReportReactUsage_Notification_ActionData::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_ReportReactUsage_Notification_ActionData>()._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClientMetrics_ReportReactUsage_Notification_ActionData::CClientMetrics_ReportReactUsage_Notification_ActionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_ReportReactUsage_Notification.ActionData)
}
CClientMetrics_ReportReactUsage_Notification_ActionData::CClientMetrics_ReportReactUsage_Notification_ActionData(const CClientMetrics_ReportReactUsage_Notification_ActionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_action()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_ReportReactUsage_Notification.ActionData)
}

inline void CClientMetrics_ReportReactUsage_Notification_ActionData::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
count_ = 0u;
}

CClientMetrics_ReportReactUsage_Notification_ActionData::~CClientMetrics_ReportReactUsage_Notification_ActionData() {
  // @@protoc_insertion_point(destructor:CClientMetrics_ReportReactUsage_Notification.ActionData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_ReportReactUsage_Notification_ActionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientMetrics_ReportReactUsage_Notification_ActionData::ArenaDtor(void* object) {
  CClientMetrics_ReportReactUsage_Notification_ActionData* _this = reinterpret_cast< CClientMetrics_ReportReactUsage_Notification_ActionData* >(object);
  (void)_this;
}
void CClientMetrics_ReportReactUsage_Notification_ActionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_ReportReactUsage_Notification_ActionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_ReportReactUsage_Notification_ActionData::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_ReportReactUsage_Notification.ActionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    action_.ClearNonDefaultToEmpty();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_ReportReactUsage_Notification_ActionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ReportReactUsage_Notification.ActionData.action");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_ReportReactUsage_Notification_ActionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_ReportReactUsage_Notification.ActionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string action = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ReportReactUsage_Notification.ActionData.action");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_action(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_ReportReactUsage_Notification.ActionData)
  return target;
}

size_t CClientMetrics_ReportReactUsage_Notification_ActionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_ReportReactUsage_Notification.ActionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string action = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_ReportReactUsage_Notification_ActionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_ReportReactUsage_Notification_ActionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_ReportReactUsage_Notification_ActionData::GetClassData() const { return &_class_data_; }

void CClientMetrics_ReportReactUsage_Notification_ActionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_ReportReactUsage_Notification_ActionData *>(to)->MergeFrom(
      static_cast<const CClientMetrics_ReportReactUsage_Notification_ActionData &>(from));
}


void CClientMetrics_ReportReactUsage_Notification_ActionData::MergeFrom(const CClientMetrics_ReportReactUsage_Notification_ActionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_ReportReactUsage_Notification.ActionData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_action(from._internal_action());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_ReportReactUsage_Notification_ActionData::CopyFrom(const CClientMetrics_ReportReactUsage_Notification_ActionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_ReportReactUsage_Notification.ActionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_ReportReactUsage_Notification_ActionData::IsInitialized() const {
  return true;
}

void CClientMetrics_ReportReactUsage_Notification_ActionData::InternalSwap(CClientMetrics_ReportReactUsage_Notification_ActionData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_ReportReactUsage_Notification_ActionData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[9]);
}

// ===================================================================

class CClientMetrics_ReportReactUsage_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_ReportReactUsage_Notification>()._has_bits_);
  static void set_has_product(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClientMetrics_ReportReactUsage_Notification::CClientMetrics_ReportReactUsage_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  routes_(arena),
  components_(arena),
  actions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_ReportReactUsage_Notification)
}
CClientMetrics_ReportReactUsage_Notification::CClientMetrics_ReportReactUsage_Notification(const CClientMetrics_ReportReactUsage_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      routes_(from.routes_),
      components_(from.components_),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_product()) {
    product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_ReportReactUsage_Notification)
}

inline void CClientMetrics_ReportReactUsage_Notification::SharedCtor() {
product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CClientMetrics_ReportReactUsage_Notification::~CClientMetrics_ReportReactUsage_Notification() {
  // @@protoc_insertion_point(destructor:CClientMetrics_ReportReactUsage_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_ReportReactUsage_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  product_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientMetrics_ReportReactUsage_Notification::ArenaDtor(void* object) {
  CClientMetrics_ReportReactUsage_Notification* _this = reinterpret_cast< CClientMetrics_ReportReactUsage_Notification* >(object);
  (void)_this;
}
void CClientMetrics_ReportReactUsage_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_ReportReactUsage_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_ReportReactUsage_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_ReportReactUsage_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  components_.Clear();
  actions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      product_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_ReportReactUsage_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string product = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_product();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ReportReactUsage_Notification.product");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ReportReactUsage_Notification.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CClientMetrics_ReportReactUsage_Notification.RouteData routes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CClientMetrics_ReportReactUsage_Notification.ComponentData components = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CClientMetrics_ReportReactUsage_Notification.ActionData actions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_ReportReactUsage_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_ReportReactUsage_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string product = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_product().data(), static_cast<int>(this->_internal_product().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ReportReactUsage_Notification.product");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ReportReactUsage_Notification.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // repeated .CClientMetrics_ReportReactUsage_Notification.RouteData routes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_routes(i), target, stream);
  }

  // repeated .CClientMetrics_ReportReactUsage_Notification.ComponentData components = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_components_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_components(i), target, stream);
  }

  // repeated .CClientMetrics_ReportReactUsage_Notification.ActionData actions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_actions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_ReportReactUsage_Notification)
  return target;
}

size_t CClientMetrics_ReportReactUsage_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_ReportReactUsage_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CClientMetrics_ReportReactUsage_Notification.RouteData routes = 3;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CClientMetrics_ReportReactUsage_Notification.ComponentData components = 4;
  total_size += 1UL * this->_internal_components_size();
  for (const auto& msg : this->components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CClientMetrics_ReportReactUsage_Notification.ActionData actions = 5;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string product = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_product());
    }

    // optional string version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_ReportReactUsage_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_ReportReactUsage_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_ReportReactUsage_Notification::GetClassData() const { return &_class_data_; }

void CClientMetrics_ReportReactUsage_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_ReportReactUsage_Notification *>(to)->MergeFrom(
      static_cast<const CClientMetrics_ReportReactUsage_Notification &>(from));
}


void CClientMetrics_ReportReactUsage_Notification::MergeFrom(const CClientMetrics_ReportReactUsage_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_ReportReactUsage_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
  components_.MergeFrom(from.components_);
  actions_.MergeFrom(from.actions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_product(from._internal_product());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_ReportReactUsage_Notification::CopyFrom(const CClientMetrics_ReportReactUsage_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_ReportReactUsage_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_ReportReactUsage_Notification::IsInitialized() const {
  return true;
}

void CClientMetrics_ReportReactUsage_Notification::InternalSwap(CClientMetrics_ReportReactUsage_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  routes_.InternalSwap(&other->routes_);
  components_.InternalSwap(&other->components_);
  actions_.InternalSwap(&other->actions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_, lhs_arena,
      &other->product_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_ReportReactUsage_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[10]);
}

// ===================================================================

class CClientMetrics_ReportClientError_Notification_Error::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_ReportClientError_Notification_Error>()._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CClientMetrics_ReportClientError_Notification_Error::CClientMetrics_ReportClientError_Notification_Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_ReportClientError_Notification.Error)
}
CClientMetrics_ReportClientError_Notification_Error::CClientMetrics_ReportClientError_Notification_Error(const CClientMetrics_ReportClientError_Notification_Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_ReportClientError_Notification.Error)
}

inline void CClientMetrics_ReportClientError_Notification_Error::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
count_ = 0u;
}

CClientMetrics_ReportClientError_Notification_Error::~CClientMetrics_ReportClientError_Notification_Error() {
  // @@protoc_insertion_point(destructor:CClientMetrics_ReportClientError_Notification.Error)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_ReportClientError_Notification_Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientMetrics_ReportClientError_Notification_Error::ArenaDtor(void* object) {
  CClientMetrics_ReportClientError_Notification_Error* _this = reinterpret_cast< CClientMetrics_ReportClientError_Notification_Error* >(object);
  (void)_this;
}
void CClientMetrics_ReportClientError_Notification_Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_ReportClientError_Notification_Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_ReportClientError_Notification_Error::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_ReportClientError_Notification.Error)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_.ClearNonDefaultToEmpty();
    }
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_ReportClientError_Notification_Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ReportClientError_Notification.Error.identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ReportClientError_Notification.Error.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_ReportClientError_Notification_Error::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_ReportClientError_Notification.Error)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ReportClientError_Notification.Error.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ReportClientError_Notification.Error.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional uint32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_ReportClientError_Notification.Error)
  return target;
}

size_t CClientMetrics_ReportClientError_Notification_Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_ReportClientError_Notification.Error)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identifier());
    }

    // optional string message = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional uint32 count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_ReportClientError_Notification_Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_ReportClientError_Notification_Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_ReportClientError_Notification_Error::GetClassData() const { return &_class_data_; }

void CClientMetrics_ReportClientError_Notification_Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_ReportClientError_Notification_Error *>(to)->MergeFrom(
      static_cast<const CClientMetrics_ReportClientError_Notification_Error &>(from));
}


void CClientMetrics_ReportClientError_Notification_Error::MergeFrom(const CClientMetrics_ReportClientError_Notification_Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_ReportClientError_Notification.Error)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_ReportClientError_Notification_Error::CopyFrom(const CClientMetrics_ReportClientError_Notification_Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_ReportClientError_Notification.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_ReportClientError_Notification_Error::IsInitialized() const {
  return true;
}

void CClientMetrics_ReportClientError_Notification_Error::InternalSwap(CClientMetrics_ReportClientError_Notification_Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &identifier_, lhs_arena,
      &other->identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_ReportClientError_Notification_Error::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[11]);
}

// ===================================================================

class CClientMetrics_ReportClientError_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_ReportClientError_Notification>()._has_bits_);
  static void set_has_product(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClientMetrics_ReportClientError_Notification::CClientMetrics_ReportClientError_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  errors_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_ReportClientError_Notification)
}
CClientMetrics_ReportClientError_Notification::CClientMetrics_ReportClientError_Notification(const CClientMetrics_ReportClientError_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_product()) {
    product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_product(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_ReportClientError_Notification)
}

inline void CClientMetrics_ReportClientError_Notification::SharedCtor() {
product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CClientMetrics_ReportClientError_Notification::~CClientMetrics_ReportClientError_Notification() {
  // @@protoc_insertion_point(destructor:CClientMetrics_ReportClientError_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_ReportClientError_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  product_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientMetrics_ReportClientError_Notification::ArenaDtor(void* object) {
  CClientMetrics_ReportClientError_Notification* _this = reinterpret_cast< CClientMetrics_ReportClientError_Notification* >(object);
  (void)_this;
}
void CClientMetrics_ReportClientError_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_ReportClientError_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_ReportClientError_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_ReportClientError_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      product_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_ReportClientError_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string product = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_product();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ReportClientError_Notification.product");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ReportClientError_Notification.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CClientMetrics_ReportClientError_Notification.Error errors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_ReportClientError_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_ReportClientError_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string product = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_product().data(), static_cast<int>(this->_internal_product().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ReportClientError_Notification.product");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product(), target);
  }

  // optional string version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ReportClientError_Notification.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // repeated .CClientMetrics_ReportClientError_Notification.Error errors = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_errors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_ReportClientError_Notification)
  return target;
}

size_t CClientMetrics_ReportClientError_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_ReportClientError_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CClientMetrics_ReportClientError_Notification.Error errors = 3;
  total_size += 1UL * this->_internal_errors_size();
  for (const auto& msg : this->errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string product = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_product());
    }

    // optional string version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_ReportClientError_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_ReportClientError_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_ReportClientError_Notification::GetClassData() const { return &_class_data_; }

void CClientMetrics_ReportClientError_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_ReportClientError_Notification *>(to)->MergeFrom(
      static_cast<const CClientMetrics_ReportClientError_Notification &>(from));
}


void CClientMetrics_ReportClientError_Notification::MergeFrom(const CClientMetrics_ReportClientError_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_ReportClientError_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_product(from._internal_product());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_version(from._internal_version());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_ReportClientError_Notification::CopyFrom(const CClientMetrics_ReportClientError_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_ReportClientError_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_ReportClientError_Notification::IsInitialized() const {
  return true;
}

void CClientMetrics_ReportClientError_Notification::InternalSwap(CClientMetrics_ReportClientError_Notification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  errors_.InternalSwap(&other->errors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &product_, lhs_arena,
      &other->product_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_ReportClientError_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[12]);
}

// ===================================================================

class CClientMetrics_ClientBootstrap_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_ClientBootstrap_Notification>()._has_bits_);
  static const ::CClientMetrics_ClientBootstrap_Summary& summary(const CClientMetrics_ClientBootstrap_Notification* msg);
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CClientMetrics_ClientBootstrap_Summary&
CClientMetrics_ClientBootstrap_Notification::_Internal::summary(const CClientMetrics_ClientBootstrap_Notification* msg) {
  return *msg->summary_;
}
void CClientMetrics_ClientBootstrap_Notification::clear_summary() {
  if (summary_ != nullptr) summary_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CClientMetrics_ClientBootstrap_Notification::CClientMetrics_ClientBootstrap_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_ClientBootstrap_Notification)
}
CClientMetrics_ClientBootstrap_Notification::CClientMetrics_ClientBootstrap_Notification(const CClientMetrics_ClientBootstrap_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_summary()) {
    summary_ = new ::CClientMetrics_ClientBootstrap_Summary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_ClientBootstrap_Notification)
}

inline void CClientMetrics_ClientBootstrap_Notification::SharedCtor() {
summary_ = nullptr;
}

CClientMetrics_ClientBootstrap_Notification::~CClientMetrics_ClientBootstrap_Notification() {
  // @@protoc_insertion_point(destructor:CClientMetrics_ClientBootstrap_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_ClientBootstrap_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete summary_;
}

void CClientMetrics_ClientBootstrap_Notification::ArenaDtor(void* object) {
  CClientMetrics_ClientBootstrap_Notification* _this = reinterpret_cast< CClientMetrics_ClientBootstrap_Notification* >(object);
  (void)_this;
}
void CClientMetrics_ClientBootstrap_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_ClientBootstrap_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_ClientBootstrap_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_ClientBootstrap_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(summary_ != nullptr);
    summary_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_ClientBootstrap_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CClientMetrics_ClientBootstrap_Summary summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_ClientBootstrap_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_ClientBootstrap_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CClientMetrics_ClientBootstrap_Summary summary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_ClientBootstrap_Notification)
  return target;
}

size_t CClientMetrics_ClientBootstrap_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_ClientBootstrap_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CClientMetrics_ClientBootstrap_Summary summary = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_ClientBootstrap_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_ClientBootstrap_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_ClientBootstrap_Notification::GetClassData() const { return &_class_data_; }

void CClientMetrics_ClientBootstrap_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_ClientBootstrap_Notification *>(to)->MergeFrom(
      static_cast<const CClientMetrics_ClientBootstrap_Notification &>(from));
}


void CClientMetrics_ClientBootstrap_Notification::MergeFrom(const CClientMetrics_ClientBootstrap_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_ClientBootstrap_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_summary()) {
    _internal_mutable_summary()->::CClientMetrics_ClientBootstrap_Summary::MergeFrom(from._internal_summary());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_ClientBootstrap_Notification::CopyFrom(const CClientMetrics_ClientBootstrap_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_ClientBootstrap_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_ClientBootstrap_Notification::IsInitialized() const {
  return true;
}

void CClientMetrics_ClientBootstrap_Notification::InternalSwap(CClientMetrics_ClientBootstrap_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(summary_, other->summary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_ClientBootstrap_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[13]);
}

// ===================================================================

class CClientMetrics_DownloadRates_Notification_StatsInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_DownloadRates_Notification_StatsInfo>()._has_bits_);
  static void set_has_source_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_host_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_microseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_used_ipv6(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_proxied(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_used_http2(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cache_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cache_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_hit_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_miss_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CClientMetrics_DownloadRates_Notification_StatsInfo::CClientMetrics_DownloadRates_Notification_StatsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_DownloadRates_Notification.StatsInfo)
}
CClientMetrics_DownloadRates_Notification_StatsInfo::CClientMetrics_DownloadRates_Notification_StatsInfo(const CClientMetrics_DownloadRates_Notification_StatsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host_name()) {
    host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&source_type_, &from.source_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&cache_misses_) -
    reinterpret_cast<char*>(&source_type_)) + sizeof(cache_misses_));
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_DownloadRates_Notification.StatsInfo)
}

inline void CClientMetrics_DownloadRates_Notification_StatsInfo::SharedCtor() {
host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cache_misses_) -
    reinterpret_cast<char*>(&source_type_)) + sizeof(cache_misses_));
}

CClientMetrics_DownloadRates_Notification_StatsInfo::~CClientMetrics_DownloadRates_Notification_StatsInfo() {
  // @@protoc_insertion_point(destructor:CClientMetrics_DownloadRates_Notification.StatsInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_DownloadRates_Notification_StatsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  host_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientMetrics_DownloadRates_Notification_StatsInfo::ArenaDtor(void* object) {
  CClientMetrics_DownloadRates_Notification_StatsInfo* _this = reinterpret_cast< CClientMetrics_DownloadRates_Notification_StatsInfo* >(object);
  (void)_this;
}
void CClientMetrics_DownloadRates_Notification_StatsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_DownloadRates_Notification_StatsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_DownloadRates_Notification_StatsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_DownloadRates_Notification.StatsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    host_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&source_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&used_http2_) -
        reinterpret_cast<char*>(&source_type_)) + sizeof(used_http2_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&cache_hits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cache_misses_) -
        reinterpret_cast<char*>(&cache_hits_)) + sizeof(cache_misses_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_DownloadRates_Notification_StatsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 source_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source_type(&has_bits);
          source_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_source_id(&has_bits);
          source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bytes(&has_bits);
          bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string host_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_host_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_DownloadRates_Notification.StatsInfo.host_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 microseconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_microseconds(&has_bits);
          microseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool used_ipv6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_used_ipv6(&has_bits);
          used_ipv6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool proxied = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_proxied(&has_bits);
          proxied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool used_http2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_used_http2(&has_bits);
          used_http2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cache_hits = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_cache_hits(&has_bits);
          cache_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cache_misses = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_cache_misses(&has_bits);
          cache_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 hit_bytes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_hit_bytes(&has_bits);
          hit_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 miss_bytes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_miss_bytes(&has_bits);
          miss_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_DownloadRates_Notification_StatsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_DownloadRates_Notification.StatsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_type(), target);
  }

  // optional uint32 source_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_source_id(), target);
  }

  // optional uint64 bytes = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_bytes(), target);
  }

  // optional string host_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_DownloadRates_Notification.StatsInfo.host_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_host_name(), target);
  }

  // optional uint64 microseconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_microseconds(), target);
  }

  // optional bool used_ipv6 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_used_ipv6(), target);
  }

  // optional bool proxied = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_proxied(), target);
  }

  // optional bool used_http2 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_used_http2(), target);
  }

  // optional uint32 cache_hits = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cache_hits(), target);
  }

  // optional uint32 cache_misses = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cache_misses(), target);
  }

  // optional uint64 hit_bytes = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_hit_bytes(), target);
  }

  // optional uint64 miss_bytes = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_miss_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_DownloadRates_Notification.StatsInfo)
  return target;
}

size_t CClientMetrics_DownloadRates_Notification_StatsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_DownloadRates_Notification.StatsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string host_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host_name());
    }

    // optional uint32 source_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_source_type());
    }

    // optional uint32 source_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_source_id());
    }

    // optional uint64 bytes = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes());
    }

    // optional uint64 microseconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_microseconds());
    }

    // optional bool used_ipv6 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool proxied = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool used_http2 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 cache_hits = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cache_hits());
    }

    // optional uint64 hit_bytes = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_hit_bytes());
    }

    // optional uint64 miss_bytes = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_miss_bytes());
    }

    // optional uint32 cache_misses = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cache_misses());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_DownloadRates_Notification_StatsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_DownloadRates_Notification_StatsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_DownloadRates_Notification_StatsInfo::GetClassData() const { return &_class_data_; }

void CClientMetrics_DownloadRates_Notification_StatsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_DownloadRates_Notification_StatsInfo *>(to)->MergeFrom(
      static_cast<const CClientMetrics_DownloadRates_Notification_StatsInfo &>(from));
}


void CClientMetrics_DownloadRates_Notification_StatsInfo::MergeFrom(const CClientMetrics_DownloadRates_Notification_StatsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_DownloadRates_Notification.StatsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_host_name(from._internal_host_name());
    }
    if (cached_has_bits & 0x00000002u) {
      source_type_ = from.source_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      bytes_ = from.bytes_;
    }
    if (cached_has_bits & 0x00000010u) {
      microseconds_ = from.microseconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      used_ipv6_ = from.used_ipv6_;
    }
    if (cached_has_bits & 0x00000040u) {
      proxied_ = from.proxied_;
    }
    if (cached_has_bits & 0x00000080u) {
      used_http2_ = from.used_http2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      cache_hits_ = from.cache_hits_;
    }
    if (cached_has_bits & 0x00000200u) {
      hit_bytes_ = from.hit_bytes_;
    }
    if (cached_has_bits & 0x00000400u) {
      miss_bytes_ = from.miss_bytes_;
    }
    if (cached_has_bits & 0x00000800u) {
      cache_misses_ = from.cache_misses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_DownloadRates_Notification_StatsInfo::CopyFrom(const CClientMetrics_DownloadRates_Notification_StatsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_DownloadRates_Notification.StatsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_DownloadRates_Notification_StatsInfo::IsInitialized() const {
  return true;
}

void CClientMetrics_DownloadRates_Notification_StatsInfo::InternalSwap(CClientMetrics_DownloadRates_Notification_StatsInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_name_, lhs_arena,
      &other->host_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMetrics_DownloadRates_Notification_StatsInfo, cache_misses_)
      + sizeof(CClientMetrics_DownloadRates_Notification_StatsInfo::cache_misses_)
      - PROTOBUF_FIELD_OFFSET(CClientMetrics_DownloadRates_Notification_StatsInfo, source_type_)>(
          reinterpret_cast<char*>(&source_type_),
          reinterpret_cast<char*>(&other->source_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_DownloadRates_Notification_StatsInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[14]);
}

// ===================================================================

class CClientMetrics_DownloadRates_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_DownloadRates_Notification>()._has_bits_);
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_throttling_kbps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClientMetrics_DownloadRates_Notification::CClientMetrics_DownloadRates_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stats_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_DownloadRates_Notification)
}
CClientMetrics_DownloadRates_Notification::CClientMetrics_DownloadRates_Notification(const CClientMetrics_DownloadRates_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cell_id_, &from.cell_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&throttling_kbps_) -
    reinterpret_cast<char*>(&cell_id_)) + sizeof(throttling_kbps_));
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_DownloadRates_Notification)
}

inline void CClientMetrics_DownloadRates_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&throttling_kbps_) -
    reinterpret_cast<char*>(&cell_id_)) + sizeof(throttling_kbps_));
}

CClientMetrics_DownloadRates_Notification::~CClientMetrics_DownloadRates_Notification() {
  // @@protoc_insertion_point(destructor:CClientMetrics_DownloadRates_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_DownloadRates_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientMetrics_DownloadRates_Notification::ArenaDtor(void* object) {
  CClientMetrics_DownloadRates_Notification* _this = reinterpret_cast< CClientMetrics_DownloadRates_Notification* >(object);
  (void)_this;
}
void CClientMetrics_DownloadRates_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_DownloadRates_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_DownloadRates_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_DownloadRates_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cell_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&throttling_kbps_) -
        reinterpret_cast<char*>(&cell_id_)) + sizeof(throttling_kbps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_DownloadRates_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cell_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cell_id(&has_bits);
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CClientMetrics_DownloadRates_Notification.StatsInfo stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 throttling_kbps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_throttling_kbps(&has_bits);
          throttling_kbps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_DownloadRates_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_DownloadRates_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cell_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cell_id(), target);
  }

  // repeated .CClientMetrics_DownloadRates_Notification.StatsInfo stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stats(i), target, stream);
  }

  // optional uint32 throttling_kbps = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_throttling_kbps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_DownloadRates_Notification)
  return target;
}

size_t CClientMetrics_DownloadRates_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_DownloadRates_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CClientMetrics_DownloadRates_Notification.StatsInfo stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 cell_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_id());
    }

    // optional uint32 throttling_kbps = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_throttling_kbps());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_DownloadRates_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_DownloadRates_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_DownloadRates_Notification::GetClassData() const { return &_class_data_; }

void CClientMetrics_DownloadRates_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_DownloadRates_Notification *>(to)->MergeFrom(
      static_cast<const CClientMetrics_DownloadRates_Notification &>(from));
}


void CClientMetrics_DownloadRates_Notification::MergeFrom(const CClientMetrics_DownloadRates_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_DownloadRates_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      throttling_kbps_ = from.throttling_kbps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_DownloadRates_Notification::CopyFrom(const CClientMetrics_DownloadRates_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_DownloadRates_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_DownloadRates_Notification::IsInitialized() const {
  return true;
}

void CClientMetrics_DownloadRates_Notification::InternalSwap(CClientMetrics_DownloadRates_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_.InternalSwap(&other->stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMetrics_DownloadRates_Notification, throttling_kbps_)
      + sizeof(CClientMetrics_DownloadRates_Notification::throttling_kbps_)
      - PROTOBUF_FIELD_OFFSET(CClientMetrics_DownloadRates_Notification, cell_id_)>(
          reinterpret_cast<char*>(&cell_id_),
          reinterpret_cast<char*>(&other->cell_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_DownloadRates_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[15]);
}

// ===================================================================

class CClientMetrics_ContentValidation_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_ContentValidation_Notification>()._has_bits_);
  static void set_has_validation_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_staged_files(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_initiated(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_early_out(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_chunks_scanned(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_chunks_corrupt(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bytes_scanned(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_chunk_bytes_corrupt(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_total_file_size_corrupt(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CClientMetrics_ContentValidation_Notification::CClientMetrics_ContentValidation_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_ContentValidation_Notification)
}
CClientMetrics_ContentValidation_Notification::CClientMetrics_ContentValidation_Notification(const CClientMetrics_ContentValidation_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&validation_result_, &from.validation_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&chunks_corrupt_) -
    reinterpret_cast<char*>(&validation_result_)) + sizeof(chunks_corrupt_));
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_ContentValidation_Notification)
}

inline void CClientMetrics_ContentValidation_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&validation_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chunks_corrupt_) -
    reinterpret_cast<char*>(&validation_result_)) + sizeof(chunks_corrupt_));
}

CClientMetrics_ContentValidation_Notification::~CClientMetrics_ContentValidation_Notification() {
  // @@protoc_insertion_point(destructor:CClientMetrics_ContentValidation_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_ContentValidation_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientMetrics_ContentValidation_Notification::ArenaDtor(void* object) {
  CClientMetrics_ContentValidation_Notification* _this = reinterpret_cast< CClientMetrics_ContentValidation_Notification* >(object);
  (void)_this;
}
void CClientMetrics_ContentValidation_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_ContentValidation_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_ContentValidation_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_ContentValidation_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&validation_result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chunk_bytes_corrupt_) -
        reinterpret_cast<char*>(&validation_result_)) + sizeof(chunk_bytes_corrupt_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&total_file_size_corrupt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chunks_corrupt_) -
        reinterpret_cast<char*>(&total_file_size_corrupt_)) + sizeof(chunks_corrupt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_ContentValidation_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 validation_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_validation_result(&has_bits);
          validation_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool staged_files = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_staged_files(&has_bits);
          staged_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool user_initiated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_user_initiated(&has_bits);
          user_initiated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool early_out = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_early_out(&has_bits);
          early_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chunks_scanned = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_chunks_scanned(&has_bits);
          chunks_scanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chunks_corrupt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_chunks_corrupt(&has_bits);
          chunks_corrupt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_scanned = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_bytes_scanned(&has_bits);
          bytes_scanned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 chunk_bytes_corrupt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_chunk_bytes_corrupt(&has_bits);
          chunk_bytes_corrupt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 total_file_size_corrupt = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_total_file_size_corrupt(&has_bits);
          total_file_size_corrupt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_ContentValidation_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_ContentValidation_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 validation_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_validation_result(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional bool staged_files = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_staged_files(), target);
  }

  // optional bool user_initiated = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_user_initiated(), target);
  }

  // optional bool early_out = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_early_out(), target);
  }

  // optional uint32 chunks_scanned = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_chunks_scanned(), target);
  }

  // optional uint32 chunks_corrupt = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_chunks_corrupt(), target);
  }

  // optional uint64 bytes_scanned = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_bytes_scanned(), target);
  }

  // optional uint64 chunk_bytes_corrupt = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_chunk_bytes_corrupt(), target);
  }

  // optional uint64 total_file_size_corrupt = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_total_file_size_corrupt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_ContentValidation_Notification)
  return target;
}

size_t CClientMetrics_ContentValidation_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_ContentValidation_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 validation_result = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_validation_result());
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional bool staged_files = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool user_initiated = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool early_out = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 chunks_scanned = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_chunks_scanned());
    }

    // optional uint64 bytes_scanned = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_scanned());
    }

    // optional uint64 chunk_bytes_corrupt = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_chunk_bytes_corrupt());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 total_file_size_corrupt = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_total_file_size_corrupt());
    }

    // optional uint32 chunks_corrupt = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_chunks_corrupt());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_ContentValidation_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_ContentValidation_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_ContentValidation_Notification::GetClassData() const { return &_class_data_; }

void CClientMetrics_ContentValidation_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_ContentValidation_Notification *>(to)->MergeFrom(
      static_cast<const CClientMetrics_ContentValidation_Notification &>(from));
}


void CClientMetrics_ContentValidation_Notification::MergeFrom(const CClientMetrics_ContentValidation_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_ContentValidation_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      validation_result_ = from.validation_result_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      staged_files_ = from.staged_files_;
    }
    if (cached_has_bits & 0x00000008u) {
      user_initiated_ = from.user_initiated_;
    }
    if (cached_has_bits & 0x00000010u) {
      early_out_ = from.early_out_;
    }
    if (cached_has_bits & 0x00000020u) {
      chunks_scanned_ = from.chunks_scanned_;
    }
    if (cached_has_bits & 0x00000040u) {
      bytes_scanned_ = from.bytes_scanned_;
    }
    if (cached_has_bits & 0x00000080u) {
      chunk_bytes_corrupt_ = from.chunk_bytes_corrupt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      total_file_size_corrupt_ = from.total_file_size_corrupt_;
    }
    if (cached_has_bits & 0x00000200u) {
      chunks_corrupt_ = from.chunks_corrupt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_ContentValidation_Notification::CopyFrom(const CClientMetrics_ContentValidation_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_ContentValidation_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_ContentValidation_Notification::IsInitialized() const {
  return true;
}

void CClientMetrics_ContentValidation_Notification::InternalSwap(CClientMetrics_ContentValidation_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMetrics_ContentValidation_Notification, chunks_corrupt_)
      + sizeof(CClientMetrics_ContentValidation_Notification::chunks_corrupt_)
      - PROTOBUF_FIELD_OFFSET(CClientMetrics_ContentValidation_Notification, validation_result_)>(
          reinterpret_cast<char*>(&validation_result_),
          reinterpret_cast<char*>(&other->validation_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_ContentValidation_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[16]);
}

// ===================================================================

class CClientMetrics_CloudAppSyncStats_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_CloudAppSyncStats_Notification>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_platform_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preload(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_blocking_app_launch(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_files_uploaded(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_files_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_files_deleted(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bytes_uploaded(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bytes_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_microsec_total(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_microsec_init_caches(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_microsec_validate_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_microsec_ac_launch(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_microsec_ac_prep_user_files(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_microsec_ac_exit(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_microsec_build_sync_list(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_microsec_delete_files(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_microsec_download_files(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_microsec_upload_files(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_hardware_type(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_files_managed(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

CClientMetrics_CloudAppSyncStats_Notification::CClientMetrics_CloudAppSyncStats_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_CloudAppSyncStats_Notification)
}
CClientMetrics_CloudAppSyncStats_Notification::CClientMetrics_CloudAppSyncStats_Notification(const CClientMetrics_CloudAppSyncStats_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&files_managed_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(files_managed_));
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_CloudAppSyncStats_Notification)
}

inline void CClientMetrics_CloudAppSyncStats_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&files_managed_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(files_managed_));
}

CClientMetrics_CloudAppSyncStats_Notification::~CClientMetrics_CloudAppSyncStats_Notification() {
  // @@protoc_insertion_point(destructor:CClientMetrics_CloudAppSyncStats_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_CloudAppSyncStats_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientMetrics_CloudAppSyncStats_Notification::ArenaDtor(void* object) {
  CClientMetrics_CloudAppSyncStats_Notification* _this = reinterpret_cast< CClientMetrics_CloudAppSyncStats_Notification* >(object);
  (void)_this;
}
void CClientMetrics_CloudAppSyncStats_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_CloudAppSyncStats_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_CloudAppSyncStats_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_CloudAppSyncStats_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bytes_uploaded_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(bytes_uploaded_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&bytes_downloaded_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&microsec_build_sync_list_) -
        reinterpret_cast<char*>(&bytes_downloaded_)) + sizeof(microsec_build_sync_list_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&microsec_delete_files_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&files_managed_) -
        reinterpret_cast<char*>(&microsec_delete_files_)) + sizeof(files_managed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_CloudAppSyncStats_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 platform_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_platform_type(&has_bits);
          platform_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool preload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_preload(&has_bits);
          preload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool blocking_app_launch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_blocking_app_launch(&has_bits);
          blocking_app_launch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 files_uploaded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_files_uploaded(&has_bits);
          files_uploaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 files_downloaded = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_files_downloaded(&has_bits);
          files_downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 files_deleted = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_files_deleted(&has_bits);
          files_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_uploaded = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_bytes_uploaded(&has_bits);
          bytes_uploaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_downloaded = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_bytes_downloaded(&has_bits);
          bytes_downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 microsec_total = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_microsec_total(&has_bits);
          microsec_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 microsec_init_caches = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_microsec_init_caches(&has_bits);
          microsec_init_caches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 microsec_validate_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_microsec_validate_state(&has_bits);
          microsec_validate_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 microsec_ac_launch = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_microsec_ac_launch(&has_bits);
          microsec_ac_launch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 microsec_ac_prep_user_files = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_microsec_ac_prep_user_files(&has_bits);
          microsec_ac_prep_user_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 microsec_ac_exit = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_microsec_ac_exit(&has_bits);
          microsec_ac_exit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 microsec_build_sync_list = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_microsec_build_sync_list(&has_bits);
          microsec_build_sync_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 microsec_delete_files = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_microsec_delete_files(&has_bits);
          microsec_delete_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 microsec_download_files = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_microsec_download_files(&has_bits);
          microsec_download_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 microsec_upload_files = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_microsec_upload_files(&has_bits);
          microsec_upload_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hardware_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_hardware_type(&has_bits);
          hardware_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 files_managed = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_files_managed(&has_bits);
          files_managed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_CloudAppSyncStats_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_CloudAppSyncStats_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 platform_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_platform_type(), target);
  }

  // optional bool preload = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_preload(), target);
  }

  // optional bool blocking_app_launch = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_blocking_app_launch(), target);
  }

  // optional uint32 files_uploaded = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_files_uploaded(), target);
  }

  // optional uint32 files_downloaded = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_files_downloaded(), target);
  }

  // optional uint32 files_deleted = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_files_deleted(), target);
  }

  // optional uint64 bytes_uploaded = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_bytes_uploaded(), target);
  }

  // optional uint64 bytes_downloaded = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_bytes_downloaded(), target);
  }

  // optional uint64 microsec_total = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_microsec_total(), target);
  }

  // optional uint64 microsec_init_caches = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_microsec_init_caches(), target);
  }

  // optional uint64 microsec_validate_state = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_microsec_validate_state(), target);
  }

  // optional uint64 microsec_ac_launch = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_microsec_ac_launch(), target);
  }

  // optional uint64 microsec_ac_prep_user_files = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_microsec_ac_prep_user_files(), target);
  }

  // optional uint64 microsec_ac_exit = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_microsec_ac_exit(), target);
  }

  // optional uint64 microsec_build_sync_list = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_microsec_build_sync_list(), target);
  }

  // optional uint64 microsec_delete_files = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_microsec_delete_files(), target);
  }

  // optional uint64 microsec_download_files = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_microsec_download_files(), target);
  }

  // optional uint64 microsec_upload_files = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_microsec_upload_files(), target);
  }

  // optional uint32 hardware_type = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_hardware_type(), target);
  }

  // optional uint32 files_managed = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_files_managed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_CloudAppSyncStats_Notification)
  return target;
}

size_t CClientMetrics_CloudAppSyncStats_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_CloudAppSyncStats_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 platform_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_platform_type());
    }

    // optional bool preload = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool blocking_app_launch = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 files_uploaded = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_files_uploaded());
    }

    // optional uint32 files_downloaded = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_files_downloaded());
    }

    // optional uint32 files_deleted = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_files_deleted());
    }

    // optional uint64 bytes_uploaded = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_uploaded());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 bytes_downloaded = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_downloaded());
    }

    // optional uint64 microsec_total = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_microsec_total());
    }

    // optional uint64 microsec_init_caches = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_microsec_init_caches());
    }

    // optional uint64 microsec_validate_state = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_microsec_validate_state());
    }

    // optional uint64 microsec_ac_launch = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_microsec_ac_launch());
    }

    // optional uint64 microsec_ac_prep_user_files = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_microsec_ac_prep_user_files());
    }

    // optional uint64 microsec_ac_exit = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_microsec_ac_exit());
    }

    // optional uint64 microsec_build_sync_list = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_microsec_build_sync_list());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional uint64 microsec_delete_files = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_microsec_delete_files());
    }

    // optional uint64 microsec_download_files = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_microsec_download_files());
    }

    // optional uint64 microsec_upload_files = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_microsec_upload_files());
    }

    // optional uint32 hardware_type = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hardware_type());
    }

    // optional uint32 files_managed = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_files_managed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_CloudAppSyncStats_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_CloudAppSyncStats_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_CloudAppSyncStats_Notification::GetClassData() const { return &_class_data_; }

void CClientMetrics_CloudAppSyncStats_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_CloudAppSyncStats_Notification *>(to)->MergeFrom(
      static_cast<const CClientMetrics_CloudAppSyncStats_Notification &>(from));
}


void CClientMetrics_CloudAppSyncStats_Notification::MergeFrom(const CClientMetrics_CloudAppSyncStats_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_CloudAppSyncStats_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      platform_type_ = from.platform_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      preload_ = from.preload_;
    }
    if (cached_has_bits & 0x00000008u) {
      blocking_app_launch_ = from.blocking_app_launch_;
    }
    if (cached_has_bits & 0x00000010u) {
      files_uploaded_ = from.files_uploaded_;
    }
    if (cached_has_bits & 0x00000020u) {
      files_downloaded_ = from.files_downloaded_;
    }
    if (cached_has_bits & 0x00000040u) {
      files_deleted_ = from.files_deleted_;
    }
    if (cached_has_bits & 0x00000080u) {
      bytes_uploaded_ = from.bytes_uploaded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      bytes_downloaded_ = from.bytes_downloaded_;
    }
    if (cached_has_bits & 0x00000200u) {
      microsec_total_ = from.microsec_total_;
    }
    if (cached_has_bits & 0x00000400u) {
      microsec_init_caches_ = from.microsec_init_caches_;
    }
    if (cached_has_bits & 0x00000800u) {
      microsec_validate_state_ = from.microsec_validate_state_;
    }
    if (cached_has_bits & 0x00001000u) {
      microsec_ac_launch_ = from.microsec_ac_launch_;
    }
    if (cached_has_bits & 0x00002000u) {
      microsec_ac_prep_user_files_ = from.microsec_ac_prep_user_files_;
    }
    if (cached_has_bits & 0x00004000u) {
      microsec_ac_exit_ = from.microsec_ac_exit_;
    }
    if (cached_has_bits & 0x00008000u) {
      microsec_build_sync_list_ = from.microsec_build_sync_list_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      microsec_delete_files_ = from.microsec_delete_files_;
    }
    if (cached_has_bits & 0x00020000u) {
      microsec_download_files_ = from.microsec_download_files_;
    }
    if (cached_has_bits & 0x00040000u) {
      microsec_upload_files_ = from.microsec_upload_files_;
    }
    if (cached_has_bits & 0x00080000u) {
      hardware_type_ = from.hardware_type_;
    }
    if (cached_has_bits & 0x00100000u) {
      files_managed_ = from.files_managed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_CloudAppSyncStats_Notification::CopyFrom(const CClientMetrics_CloudAppSyncStats_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_CloudAppSyncStats_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_CloudAppSyncStats_Notification::IsInitialized() const {
  return true;
}

void CClientMetrics_CloudAppSyncStats_Notification::InternalSwap(CClientMetrics_CloudAppSyncStats_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMetrics_CloudAppSyncStats_Notification, files_managed_)
      + sizeof(CClientMetrics_CloudAppSyncStats_Notification::files_managed_)
      - PROTOBUF_FIELD_OFFSET(CClientMetrics_CloudAppSyncStats_Notification, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_CloudAppSyncStats_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[17]);
}

// ===================================================================

class CClientMetrics_ContentDownloadResponse_Counts_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_ContentDownloadResponse_Counts_Notification>()._has_bits_);
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CClientMetrics_ContentDownloadResponse_Hosts& data(const CClientMetrics_ContentDownloadResponse_Counts_Notification* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CClientMetrics_ContentDownloadResponse_Hosts&
CClientMetrics_ContentDownloadResponse_Counts_Notification::_Internal::data(const CClientMetrics_ContentDownloadResponse_Counts_Notification* msg) {
  return *msg->data_;
}
void CClientMetrics_ContentDownloadResponse_Counts_Notification::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CClientMetrics_ContentDownloadResponse_Counts_Notification::CClientMetrics_ContentDownloadResponse_Counts_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_ContentDownloadResponse_Counts_Notification)
}
CClientMetrics_ContentDownloadResponse_Counts_Notification::CClientMetrics_ContentDownloadResponse_Counts_Notification(const CClientMetrics_ContentDownloadResponse_Counts_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::CClientMetrics_ContentDownloadResponse_Hosts(*from.data_);
  } else {
    data_ = nullptr;
  }
  cell_id_ = from.cell_id_;
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_ContentDownloadResponse_Counts_Notification)
}

inline void CClientMetrics_ContentDownloadResponse_Counts_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cell_id_) -
    reinterpret_cast<char*>(&data_)) + sizeof(cell_id_));
}

CClientMetrics_ContentDownloadResponse_Counts_Notification::~CClientMetrics_ContentDownloadResponse_Counts_Notification() {
  // @@protoc_insertion_point(destructor:CClientMetrics_ContentDownloadResponse_Counts_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_ContentDownloadResponse_Counts_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void CClientMetrics_ContentDownloadResponse_Counts_Notification::ArenaDtor(void* object) {
  CClientMetrics_ContentDownloadResponse_Counts_Notification* _this = reinterpret_cast< CClientMetrics_ContentDownloadResponse_Counts_Notification* >(object);
  (void)_this;
}
void CClientMetrics_ContentDownloadResponse_Counts_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_ContentDownloadResponse_Counts_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_ContentDownloadResponse_Counts_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_ContentDownloadResponse_Counts_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  cell_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_ContentDownloadResponse_Counts_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cell_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cell_id(&has_bits);
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CClientMetrics_ContentDownloadResponse_Hosts data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_ContentDownloadResponse_Counts_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_ContentDownloadResponse_Counts_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cell_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cell_id(), target);
  }

  // optional .CClientMetrics_ContentDownloadResponse_Hosts data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_ContentDownloadResponse_Counts_Notification)
  return target;
}

size_t CClientMetrics_ContentDownloadResponse_Counts_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_ContentDownloadResponse_Counts_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CClientMetrics_ContentDownloadResponse_Hosts data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional uint32 cell_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_ContentDownloadResponse_Counts_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_ContentDownloadResponse_Counts_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_ContentDownloadResponse_Counts_Notification::GetClassData() const { return &_class_data_; }

void CClientMetrics_ContentDownloadResponse_Counts_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_ContentDownloadResponse_Counts_Notification *>(to)->MergeFrom(
      static_cast<const CClientMetrics_ContentDownloadResponse_Counts_Notification &>(from));
}


void CClientMetrics_ContentDownloadResponse_Counts_Notification::MergeFrom(const CClientMetrics_ContentDownloadResponse_Counts_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_ContentDownloadResponse_Counts_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_data()->::CClientMetrics_ContentDownloadResponse_Hosts::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      cell_id_ = from.cell_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_ContentDownloadResponse_Counts_Notification::CopyFrom(const CClientMetrics_ContentDownloadResponse_Counts_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_ContentDownloadResponse_Counts_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_ContentDownloadResponse_Counts_Notification::IsInitialized() const {
  return true;
}

void CClientMetrics_ContentDownloadResponse_Counts_Notification::InternalSwap(CClientMetrics_ContentDownloadResponse_Counts_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMetrics_ContentDownloadResponse_Counts_Notification, cell_id_)
      + sizeof(CClientMetrics_ContentDownloadResponse_Counts_Notification::cell_id_)
      - PROTOBUF_FIELD_OFFSET(CClientMetrics_ContentDownloadResponse_Counts_Notification, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_ContentDownloadResponse_Counts_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[18]);
}

// ===================================================================

class CClientMetrics_ReportClientArgs_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMetrics_ReportClientArgs_Notification>()._has_bits_);
  static void set_has_gpu_webview_regkey_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_suppress_gpu_chrome(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_browser_not_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hw_accel_video_regkey_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mini_mode_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fps_counter_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_library_low_bandwidth_mode_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_library_low_perf_mode_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CClientMetrics_ReportClientArgs_Notification::CClientMetrics_ReportClientArgs_Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  client_args_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CClientMetrics_ReportClientArgs_Notification)
}
CClientMetrics_ReportClientArgs_Notification::CClientMetrics_ReportClientArgs_Notification(const CClientMetrics_ReportClientArgs_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      client_args_(from.client_args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gpu_webview_regkey_disabled_, &from.gpu_webview_regkey_disabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&library_low_perf_mode_enabled_) -
    reinterpret_cast<char*>(&gpu_webview_regkey_disabled_)) + sizeof(library_low_perf_mode_enabled_));
  // @@protoc_insertion_point(copy_constructor:CClientMetrics_ReportClientArgs_Notification)
}

inline void CClientMetrics_ReportClientArgs_Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gpu_webview_regkey_disabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&library_low_perf_mode_enabled_) -
    reinterpret_cast<char*>(&gpu_webview_regkey_disabled_)) + sizeof(library_low_perf_mode_enabled_));
}

CClientMetrics_ReportClientArgs_Notification::~CClientMetrics_ReportClientArgs_Notification() {
  // @@protoc_insertion_point(destructor:CClientMetrics_ReportClientArgs_Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CClientMetrics_ReportClientArgs_Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientMetrics_ReportClientArgs_Notification::ArenaDtor(void* object) {
  CClientMetrics_ReportClientArgs_Notification* _this = reinterpret_cast< CClientMetrics_ReportClientArgs_Notification* >(object);
  (void)_this;
}
void CClientMetrics_ReportClientArgs_Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMetrics_ReportClientArgs_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMetrics_ReportClientArgs_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMetrics_ReportClientArgs_Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&gpu_webview_regkey_disabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&library_low_perf_mode_enabled_) -
        reinterpret_cast<char*>(&gpu_webview_regkey_disabled_)) + sizeof(library_low_perf_mode_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMetrics_ReportClientArgs_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string client_args = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_client_args();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMetrics_ReportClientArgs_Notification.client_args");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool gpu_webview_regkey_disabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gpu_webview_regkey_disabled(&has_bits);
          gpu_webview_regkey_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool suppress_gpu_chrome = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_suppress_gpu_chrome(&has_bits);
          suppress_gpu_chrome_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool browser_not_supported = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_browser_not_supported(&has_bits);
          browser_not_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hw_accel_video_regkey_disabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_hw_accel_video_regkey_disabled(&has_bits);
          hw_accel_video_regkey_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mini_mode_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_mini_mode_enabled(&has_bits);
          mini_mode_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fps_counter_enabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_fps_counter_enabled(&has_bits);
          fps_counter_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool library_low_bandwidth_mode_enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_library_low_bandwidth_mode_enabled(&has_bits);
          library_low_bandwidth_mode_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool library_low_perf_mode_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_library_low_perf_mode_enabled(&has_bits);
          library_low_perf_mode_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientMetrics_ReportClientArgs_Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMetrics_ReportClientArgs_Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string client_args = 1;
  for (int i = 0, n = this->_internal_client_args_size(); i < n; i++) {
    const auto& s = this->_internal_client_args(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMetrics_ReportClientArgs_Notification.client_args");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool gpu_webview_regkey_disabled = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_gpu_webview_regkey_disabled(), target);
  }

  // optional bool suppress_gpu_chrome = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_suppress_gpu_chrome(), target);
  }

  // optional bool browser_not_supported = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_browser_not_supported(), target);
  }

  // optional bool hw_accel_video_regkey_disabled = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_hw_accel_video_regkey_disabled(), target);
  }

  // optional bool mini_mode_enabled = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_mini_mode_enabled(), target);
  }

  // optional bool fps_counter_enabled = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_fps_counter_enabled(), target);
  }

  // optional bool library_low_bandwidth_mode_enabled = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_library_low_bandwidth_mode_enabled(), target);
  }

  // optional bool library_low_perf_mode_enabled = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_library_low_perf_mode_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMetrics_ReportClientArgs_Notification)
  return target;
}

size_t CClientMetrics_ReportClientArgs_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMetrics_ReportClientArgs_Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string client_args = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(client_args_.size());
  for (int i = 0, n = client_args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      client_args_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool gpu_webview_regkey_disabled = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool suppress_gpu_chrome = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool browser_not_supported = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool hw_accel_video_regkey_disabled = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool mini_mode_enabled = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool fps_counter_enabled = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool library_low_bandwidth_mode_enabled = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool library_low_perf_mode_enabled = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientMetrics_ReportClientArgs_Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CClientMetrics_ReportClientArgs_Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientMetrics_ReportClientArgs_Notification::GetClassData() const { return &_class_data_; }

void CClientMetrics_ReportClientArgs_Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CClientMetrics_ReportClientArgs_Notification *>(to)->MergeFrom(
      static_cast<const CClientMetrics_ReportClientArgs_Notification &>(from));
}


void CClientMetrics_ReportClientArgs_Notification::MergeFrom(const CClientMetrics_ReportClientArgs_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMetrics_ReportClientArgs_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  client_args_.MergeFrom(from.client_args_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      gpu_webview_regkey_disabled_ = from.gpu_webview_regkey_disabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      suppress_gpu_chrome_ = from.suppress_gpu_chrome_;
    }
    if (cached_has_bits & 0x00000004u) {
      browser_not_supported_ = from.browser_not_supported_;
    }
    if (cached_has_bits & 0x00000008u) {
      hw_accel_video_regkey_disabled_ = from.hw_accel_video_regkey_disabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      mini_mode_enabled_ = from.mini_mode_enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      fps_counter_enabled_ = from.fps_counter_enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      library_low_bandwidth_mode_enabled_ = from.library_low_bandwidth_mode_enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      library_low_perf_mode_enabled_ = from.library_low_perf_mode_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientMetrics_ReportClientArgs_Notification::CopyFrom(const CClientMetrics_ReportClientArgs_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMetrics_ReportClientArgs_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMetrics_ReportClientArgs_Notification::IsInitialized() const {
  return true;
}

void CClientMetrics_ReportClientArgs_Notification::InternalSwap(CClientMetrics_ReportClientArgs_Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  client_args_.InternalSwap(&other->client_args_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMetrics_ReportClientArgs_Notification, library_low_perf_mode_enabled_)
      + sizeof(CClientMetrics_ReportClientArgs_Notification::library_low_perf_mode_enabled_)
      - PROTOBUF_FIELD_OFFSET(CClientMetrics_ReportClientArgs_Notification, gpu_webview_regkey_disabled_)>(
          reinterpret_cast<char*>(&gpu_webview_regkey_disabled_),
          reinterpret_cast<char*>(&other->gpu_webview_regkey_disabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMetrics_ReportClientArgs_Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5fclientmetrics_2esteamclient_2eproto[19]);
}

// ===================================================================

ClientMetrics::~ClientMetrics() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ClientMetrics::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientmetrics_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5fclientmetrics_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ClientMetrics::GetDescriptor() {
  return descriptor();
}

void ClientMetrics::ClientAppInterfaceStatsReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CClientMetrics_AppInterfaceStats_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientAppInterfaceStatsReport() not implemented.");
  done->Run();
}

void ClientMetrics::ClientIPv6ConnectivityReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CClientMetrics_IPv6Connectivity_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientIPv6ConnectivityReport() not implemented.");
  done->Run();
}

void ClientMetrics::SteamPipeWorkStatsReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CClientMetrics_SteamPipeWorkStats_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SteamPipeWorkStatsReport() not implemented.");
  done->Run();
}

void ClientMetrics::ReportReactUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CClientMetrics_ReportReactUsage_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReportReactUsage() not implemented.");
  done->Run();
}

void ClientMetrics::ReportClientError(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CClientMetrics_ReportClientError_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReportClientError() not implemented.");
  done->Run();
}

void ClientMetrics::ClientBootstrapReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CClientMetrics_ClientBootstrap_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientBootstrapReport() not implemented.");
  done->Run();
}

void ClientMetrics::ClientDownloadRatesReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CClientMetrics_DownloadRates_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientDownloadRatesReport() not implemented.");
  done->Run();
}

void ClientMetrics::ClientContentValidationReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CClientMetrics_ContentValidation_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientContentValidationReport() not implemented.");
  done->Run();
}

void ClientMetrics::ClientCloudAppSyncStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CClientMetrics_CloudAppSyncStats_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientCloudAppSyncStats() not implemented.");
  done->Run();
}

void ClientMetrics::ClientDownloadResponseCodeCounts(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CClientMetrics_ContentDownloadResponse_Counts_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientDownloadResponseCodeCounts() not implemented.");
  done->Run();
}

void ClientMetrics::ReportClientArgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CClientMetrics_ReportClientArgs_Notification*,
                         ::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ReportClientArgs() not implemented.");
  done->Run();
}

void ClientMetrics::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fclientmetrics_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      ClientAppInterfaceStatsReport(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CClientMetrics_AppInterfaceStats_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 1:
      ClientIPv6ConnectivityReport(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CClientMetrics_IPv6Connectivity_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 2:
      SteamPipeWorkStatsReport(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CClientMetrics_SteamPipeWorkStats_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 3:
      ReportReactUsage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CClientMetrics_ReportReactUsage_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 4:
      ReportClientError(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CClientMetrics_ReportClientError_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 5:
      ClientBootstrapReport(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CClientMetrics_ClientBootstrap_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 6:
      ClientDownloadRatesReport(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CClientMetrics_DownloadRates_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 7:
      ClientContentValidationReport(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CClientMetrics_ContentValidation_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 8:
      ClientCloudAppSyncStats(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CClientMetrics_CloudAppSyncStats_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 9:
      ClientDownloadResponseCodeCounts(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CClientMetrics_ContentDownloadResponse_Counts_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    case 10:
      ReportClientArgs(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CClientMetrics_ReportClientArgs_Notification*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::NoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ClientMetrics::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CClientMetrics_AppInterfaceStats_Notification::default_instance();
    case 1:
      return ::CClientMetrics_IPv6Connectivity_Notification::default_instance();
    case 2:
      return ::CClientMetrics_SteamPipeWorkStats_Notification::default_instance();
    case 3:
      return ::CClientMetrics_ReportReactUsage_Notification::default_instance();
    case 4:
      return ::CClientMetrics_ReportClientError_Notification::default_instance();
    case 5:
      return ::CClientMetrics_ClientBootstrap_Notification::default_instance();
    case 6:
      return ::CClientMetrics_DownloadRates_Notification::default_instance();
    case 7:
      return ::CClientMetrics_ContentValidation_Notification::default_instance();
    case 8:
      return ::CClientMetrics_CloudAppSyncStats_Notification::default_instance();
    case 9:
      return ::CClientMetrics_ContentDownloadResponse_Counts_Notification::default_instance();
    case 10:
      return ::CClientMetrics_ReportClientArgs_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ClientMetrics::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::NoResponse::default_instance();
    case 1:
      return ::NoResponse::default_instance();
    case 2:
      return ::NoResponse::default_instance();
    case 3:
      return ::NoResponse::default_instance();
    case 4:
      return ::NoResponse::default_instance();
    case 5:
      return ::NoResponse::default_instance();
    case 6:
      return ::NoResponse::default_instance();
    case 7:
      return ::NoResponse::default_instance();
    case 8:
      return ::NoResponse::default_instance();
    case 9:
      return ::NoResponse::default_instance();
    case 10:
      return ::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ClientMetrics_Stub::ClientMetrics_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ClientMetrics_Stub::ClientMetrics_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ClientMetrics_Stub::~ClientMetrics_Stub() {
  if (owns_channel_) delete channel_;
}

void ClientMetrics_Stub::ClientAppInterfaceStatsReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CClientMetrics_AppInterfaceStats_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ClientMetrics_Stub::ClientIPv6ConnectivityReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CClientMetrics_IPv6Connectivity_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ClientMetrics_Stub::SteamPipeWorkStatsReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CClientMetrics_SteamPipeWorkStats_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ClientMetrics_Stub::ReportReactUsage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CClientMetrics_ReportReactUsage_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ClientMetrics_Stub::ReportClientError(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CClientMetrics_ReportClientError_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void ClientMetrics_Stub::ClientBootstrapReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CClientMetrics_ClientBootstrap_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void ClientMetrics_Stub::ClientDownloadRatesReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CClientMetrics_DownloadRates_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void ClientMetrics_Stub::ClientContentValidationReport(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CClientMetrics_ContentValidation_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void ClientMetrics_Stub::ClientCloudAppSyncStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CClientMetrics_CloudAppSyncStats_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void ClientMetrics_Stub::ClientDownloadResponseCodeCounts(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CClientMetrics_ContentDownloadResponse_Counts_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void ClientMetrics_Stub::ReportClientArgs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CClientMetrics_ReportClientArgs_Notification* request,
                              ::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CClientMetrics_AppInterfaceCreation* Arena::CreateMaybeMessage< ::CClientMetrics_AppInterfaceCreation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_AppInterfaceCreation >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_AppInterfaceMethodCounts* Arena::CreateMaybeMessage< ::CClientMetrics_AppInterfaceMethodCounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_AppInterfaceMethodCounts >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_AppInterfaceStats_Notification* Arena::CreateMaybeMessage< ::CClientMetrics_AppInterfaceStats_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_AppInterfaceStats_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_IPv6Connectivity_Result* Arena::CreateMaybeMessage< ::CClientMetrics_IPv6Connectivity_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_IPv6Connectivity_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_IPv6Connectivity_Notification* Arena::CreateMaybeMessage< ::CClientMetrics_IPv6Connectivity_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_IPv6Connectivity_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_SteamPipeWorkStats_Operation* Arena::CreateMaybeMessage< ::CClientMetrics_SteamPipeWorkStats_Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_SteamPipeWorkStats_Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_SteamPipeWorkStats_Notification* Arena::CreateMaybeMessage< ::CClientMetrics_SteamPipeWorkStats_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_SteamPipeWorkStats_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_ReportReactUsage_Notification_RouteData* Arena::CreateMaybeMessage< ::CClientMetrics_ReportReactUsage_Notification_RouteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_ReportReactUsage_Notification_RouteData >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_ReportReactUsage_Notification_ComponentData* Arena::CreateMaybeMessage< ::CClientMetrics_ReportReactUsage_Notification_ComponentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_ReportReactUsage_Notification_ComponentData >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_ReportReactUsage_Notification_ActionData* Arena::CreateMaybeMessage< ::CClientMetrics_ReportReactUsage_Notification_ActionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_ReportReactUsage_Notification_ActionData >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_ReportReactUsage_Notification* Arena::CreateMaybeMessage< ::CClientMetrics_ReportReactUsage_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_ReportReactUsage_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_ReportClientError_Notification_Error* Arena::CreateMaybeMessage< ::CClientMetrics_ReportClientError_Notification_Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_ReportClientError_Notification_Error >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_ReportClientError_Notification* Arena::CreateMaybeMessage< ::CClientMetrics_ReportClientError_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_ReportClientError_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_ClientBootstrap_Notification* Arena::CreateMaybeMessage< ::CClientMetrics_ClientBootstrap_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_ClientBootstrap_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_DownloadRates_Notification_StatsInfo* Arena::CreateMaybeMessage< ::CClientMetrics_DownloadRates_Notification_StatsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_DownloadRates_Notification_StatsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_DownloadRates_Notification* Arena::CreateMaybeMessage< ::CClientMetrics_DownloadRates_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_DownloadRates_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_ContentValidation_Notification* Arena::CreateMaybeMessage< ::CClientMetrics_ContentValidation_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_ContentValidation_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_CloudAppSyncStats_Notification* Arena::CreateMaybeMessage< ::CClientMetrics_CloudAppSyncStats_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_CloudAppSyncStats_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_ContentDownloadResponse_Counts_Notification* Arena::CreateMaybeMessage< ::CClientMetrics_ContentDownloadResponse_Counts_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_ContentDownloadResponse_Counts_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMetrics_ReportClientArgs_Notification* Arena::CreateMaybeMessage< ::CClientMetrics_ReportClientArgs_Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMetrics_ReportClientArgs_Notification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
