// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientlanp2p.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientlanp2p_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientlanp2p_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientlanp2p_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fclientlanp2p_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientlanp2p_2eproto;
class CMsgClientLANP2PRequestChunks;
struct CMsgClientLANP2PRequestChunksDefaultTypeInternal;
extern CMsgClientLANP2PRequestChunksDefaultTypeInternal _CMsgClientLANP2PRequestChunks_default_instance_;
class CMsgClientLANP2PRequestChunksResponse;
struct CMsgClientLANP2PRequestChunksResponseDefaultTypeInternal;
extern CMsgClientLANP2PRequestChunksResponseDefaultTypeInternal _CMsgClientLANP2PRequestChunksResponse_default_instance_;
class CMsgClientLANP2PRequestChunksResponse_ChunkData;
struct CMsgClientLANP2PRequestChunksResponse_ChunkDataDefaultTypeInternal;
extern CMsgClientLANP2PRequestChunksResponse_ChunkDataDefaultTypeInternal _CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_;
class CMsgClientLANP2PRequestChunks_ChunkKey;
struct CMsgClientLANP2PRequestChunks_ChunkKeyDefaultTypeInternal;
extern CMsgClientLANP2PRequestChunks_ChunkKeyDefaultTypeInternal _CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_;
class CMsgClientPeerChunkRequest;
struct CMsgClientPeerChunkRequestDefaultTypeInternal;
extern CMsgClientPeerChunkRequestDefaultTypeInternal _CMsgClientPeerChunkRequest_default_instance_;
class CMsgClientPeerChunkResponse;
struct CMsgClientPeerChunkResponseDefaultTypeInternal;
extern CMsgClientPeerChunkResponseDefaultTypeInternal _CMsgClientPeerChunkResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgClientLANP2PRequestChunks* Arena::CreateMaybeMessage<::CMsgClientLANP2PRequestChunks>(Arena*);
template<> ::CMsgClientLANP2PRequestChunksResponse* Arena::CreateMaybeMessage<::CMsgClientLANP2PRequestChunksResponse>(Arena*);
template<> ::CMsgClientLANP2PRequestChunksResponse_ChunkData* Arena::CreateMaybeMessage<::CMsgClientLANP2PRequestChunksResponse_ChunkData>(Arena*);
template<> ::CMsgClientLANP2PRequestChunks_ChunkKey* Arena::CreateMaybeMessage<::CMsgClientLANP2PRequestChunks_ChunkKey>(Arena*);
template<> ::CMsgClientPeerChunkRequest* Arena::CreateMaybeMessage<::CMsgClientPeerChunkRequest>(Arena*);
template<> ::CMsgClientPeerChunkResponse* Arena::CreateMaybeMessage<::CMsgClientPeerChunkResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CMsgClientLANP2PRequestChunks_ChunkKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientLANP2PRequestChunks.ChunkKey) */ {
 public:
  inline CMsgClientLANP2PRequestChunks_ChunkKey() : CMsgClientLANP2PRequestChunks_ChunkKey(nullptr) {}
  ~CMsgClientLANP2PRequestChunks_ChunkKey() override;
  explicit constexpr CMsgClientLANP2PRequestChunks_ChunkKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientLANP2PRequestChunks_ChunkKey(const CMsgClientLANP2PRequestChunks_ChunkKey& from);
  CMsgClientLANP2PRequestChunks_ChunkKey(CMsgClientLANP2PRequestChunks_ChunkKey&& from) noexcept
    : CMsgClientLANP2PRequestChunks_ChunkKey() {
    *this = ::std::move(from);
  }

  inline CMsgClientLANP2PRequestChunks_ChunkKey& operator=(const CMsgClientLANP2PRequestChunks_ChunkKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientLANP2PRequestChunks_ChunkKey& operator=(CMsgClientLANP2PRequestChunks_ChunkKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientLANP2PRequestChunks_ChunkKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientLANP2PRequestChunks_ChunkKey* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLANP2PRequestChunks_ChunkKey*>(
               &_CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgClientLANP2PRequestChunks_ChunkKey& a, CMsgClientLANP2PRequestChunks_ChunkKey& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientLANP2PRequestChunks_ChunkKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientLANP2PRequestChunks_ChunkKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientLANP2PRequestChunks_ChunkKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientLANP2PRequestChunks_ChunkKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientLANP2PRequestChunks_ChunkKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientLANP2PRequestChunks_ChunkKey& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientLANP2PRequestChunks_ChunkKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientLANP2PRequestChunks.ChunkKey";
  }
  protected:
  explicit CMsgClientLANP2PRequestChunks_ChunkKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFieldNumber = 2,
    kDepotIdFieldNumber = 1,
  };
  // optional bytes sha = 2;
  bool has_sha() const;
  private:
  bool _internal_has_sha() const;
  public:
  void clear_sha();
  const std::string& sha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha();
  PROTOBUF_NODISCARD std::string* release_sha();
  void set_allocated_sha(std::string* sha);
  private:
  const std::string& _internal_sha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha(const std::string& value);
  std::string* _internal_mutable_sha();
  public:

  // optional uint32 depot_id = 1;
  bool has_depot_id() const;
  private:
  bool _internal_has_depot_id() const;
  public:
  void clear_depot_id();
  uint32_t depot_id() const;
  void set_depot_id(uint32_t value);
  private:
  uint32_t _internal_depot_id() const;
  void _internal_set_depot_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientLANP2PRequestChunks.ChunkKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_;
  uint32_t depot_id_;
  friend struct ::TableStruct_steammessages_5fclientlanp2p_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientLANP2PRequestChunks final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientLANP2PRequestChunks) */ {
 public:
  inline CMsgClientLANP2PRequestChunks() : CMsgClientLANP2PRequestChunks(nullptr) {}
  ~CMsgClientLANP2PRequestChunks() override;
  explicit constexpr CMsgClientLANP2PRequestChunks(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientLANP2PRequestChunks(const CMsgClientLANP2PRequestChunks& from);
  CMsgClientLANP2PRequestChunks(CMsgClientLANP2PRequestChunks&& from) noexcept
    : CMsgClientLANP2PRequestChunks() {
    *this = ::std::move(from);
  }

  inline CMsgClientLANP2PRequestChunks& operator=(const CMsgClientLANP2PRequestChunks& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientLANP2PRequestChunks& operator=(CMsgClientLANP2PRequestChunks&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientLANP2PRequestChunks& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientLANP2PRequestChunks* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLANP2PRequestChunks*>(
               &_CMsgClientLANP2PRequestChunks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgClientLANP2PRequestChunks& a, CMsgClientLANP2PRequestChunks& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientLANP2PRequestChunks* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientLANP2PRequestChunks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientLANP2PRequestChunks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientLANP2PRequestChunks>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientLANP2PRequestChunks& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientLANP2PRequestChunks& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientLANP2PRequestChunks* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientLANP2PRequestChunks";
  }
  protected:
  explicit CMsgClientLANP2PRequestChunks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientLANP2PRequestChunks_ChunkKey ChunkKey;

  // accessors -------------------------------------------------------

  enum : int {
    kChunkKeysFieldNumber = 1,
  };
  // repeated .CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
  int chunk_keys_size() const;
  private:
  int _internal_chunk_keys_size() const;
  public:
  void clear_chunk_keys();
  ::CMsgClientLANP2PRequestChunks_ChunkKey* mutable_chunk_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientLANP2PRequestChunks_ChunkKey >*
      mutable_chunk_keys();
  private:
  const ::CMsgClientLANP2PRequestChunks_ChunkKey& _internal_chunk_keys(int index) const;
  ::CMsgClientLANP2PRequestChunks_ChunkKey* _internal_add_chunk_keys();
  public:
  const ::CMsgClientLANP2PRequestChunks_ChunkKey& chunk_keys(int index) const;
  ::CMsgClientLANP2PRequestChunks_ChunkKey* add_chunk_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientLANP2PRequestChunks_ChunkKey >&
      chunk_keys() const;

  // @@protoc_insertion_point(class_scope:CMsgClientLANP2PRequestChunks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientLANP2PRequestChunks_ChunkKey > chunk_keys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclientlanp2p_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientLANP2PRequestChunksResponse_ChunkData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientLANP2PRequestChunksResponse.ChunkData) */ {
 public:
  inline CMsgClientLANP2PRequestChunksResponse_ChunkData() : CMsgClientLANP2PRequestChunksResponse_ChunkData(nullptr) {}
  ~CMsgClientLANP2PRequestChunksResponse_ChunkData() override;
  explicit constexpr CMsgClientLANP2PRequestChunksResponse_ChunkData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientLANP2PRequestChunksResponse_ChunkData(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from);
  CMsgClientLANP2PRequestChunksResponse_ChunkData(CMsgClientLANP2PRequestChunksResponse_ChunkData&& from) noexcept
    : CMsgClientLANP2PRequestChunksResponse_ChunkData() {
    *this = ::std::move(from);
  }

  inline CMsgClientLANP2PRequestChunksResponse_ChunkData& operator=(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientLANP2PRequestChunksResponse_ChunkData& operator=(CMsgClientLANP2PRequestChunksResponse_ChunkData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientLANP2PRequestChunksResponse_ChunkData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientLANP2PRequestChunksResponse_ChunkData* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLANP2PRequestChunksResponse_ChunkData*>(
               &_CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgClientLANP2PRequestChunksResponse_ChunkData& a, CMsgClientLANP2PRequestChunksResponse_ChunkData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientLANP2PRequestChunksResponse_ChunkData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientLANP2PRequestChunksResponse_ChunkData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientLANP2PRequestChunksResponse_ChunkData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientLANP2PRequestChunksResponse_ChunkData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientLANP2PRequestChunksResponse_ChunkData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientLANP2PRequestChunksResponse.ChunkData";
  }
  protected:
  explicit CMsgClientLANP2PRequestChunksResponse_ChunkData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFieldNumber = 3,
    kChunkDataFieldNumber = 4,
    kResultFieldNumber = 1,
    kDepotIdFieldNumber = 2,
    kEncryptedFieldNumber = 5,
    kCompressedFieldNumber = 6,
  };
  // optional bytes sha = 3;
  bool has_sha() const;
  private:
  bool _internal_has_sha() const;
  public:
  void clear_sha();
  const std::string& sha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha();
  PROTOBUF_NODISCARD std::string* release_sha();
  void set_allocated_sha(std::string* sha);
  private:
  const std::string& _internal_sha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha(const std::string& value);
  std::string* _internal_mutable_sha();
  public:

  // optional bytes chunk_data = 4;
  bool has_chunk_data() const;
  private:
  bool _internal_has_chunk_data() const;
  public:
  void clear_chunk_data();
  const std::string& chunk_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chunk_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chunk_data();
  PROTOBUF_NODISCARD std::string* release_chunk_data();
  void set_allocated_chunk_data(std::string* chunk_data);
  private:
  const std::string& _internal_chunk_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk_data(const std::string& value);
  std::string* _internal_mutable_chunk_data();
  public:

  // optional uint32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // optional uint32 depot_id = 2;
  bool has_depot_id() const;
  private:
  bool _internal_has_depot_id() const;
  public:
  void clear_depot_id();
  uint32_t depot_id() const;
  void set_depot_id(uint32_t value);
  private:
  uint32_t _internal_depot_id() const;
  void _internal_set_depot_id(uint32_t value);
  public:

  // optional bool encrypted = 5;
  bool has_encrypted() const;
  private:
  bool _internal_has_encrypted() const;
  public:
  void clear_encrypted();
  bool encrypted() const;
  void set_encrypted(bool value);
  private:
  bool _internal_encrypted() const;
  void _internal_set_encrypted(bool value);
  public:

  // optional bool compressed = 6;
  bool has_compressed() const;
  private:
  bool _internal_has_compressed() const;
  public:
  void clear_compressed();
  bool compressed() const;
  void set_compressed(bool value);
  private:
  bool _internal_compressed() const;
  void _internal_set_compressed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientLANP2PRequestChunksResponse.ChunkData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_data_;
  uint32_t result_;
  uint32_t depot_id_;
  bool encrypted_;
  bool compressed_;
  friend struct ::TableStruct_steammessages_5fclientlanp2p_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientLANP2PRequestChunksResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientLANP2PRequestChunksResponse) */ {
 public:
  inline CMsgClientLANP2PRequestChunksResponse() : CMsgClientLANP2PRequestChunksResponse(nullptr) {}
  ~CMsgClientLANP2PRequestChunksResponse() override;
  explicit constexpr CMsgClientLANP2PRequestChunksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientLANP2PRequestChunksResponse(const CMsgClientLANP2PRequestChunksResponse& from);
  CMsgClientLANP2PRequestChunksResponse(CMsgClientLANP2PRequestChunksResponse&& from) noexcept
    : CMsgClientLANP2PRequestChunksResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientLANP2PRequestChunksResponse& operator=(const CMsgClientLANP2PRequestChunksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientLANP2PRequestChunksResponse& operator=(CMsgClientLANP2PRequestChunksResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientLANP2PRequestChunksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientLANP2PRequestChunksResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLANP2PRequestChunksResponse*>(
               &_CMsgClientLANP2PRequestChunksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgClientLANP2PRequestChunksResponse& a, CMsgClientLANP2PRequestChunksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientLANP2PRequestChunksResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientLANP2PRequestChunksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientLANP2PRequestChunksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientLANP2PRequestChunksResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientLANP2PRequestChunksResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientLANP2PRequestChunksResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientLANP2PRequestChunksResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientLANP2PRequestChunksResponse";
  }
  protected:
  explicit CMsgClientLANP2PRequestChunksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientLANP2PRequestChunksResponse_ChunkData ChunkData;

  // accessors -------------------------------------------------------

  enum : int {
    kChunkResponsesFieldNumber = 1,
  };
  // repeated .CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
  int chunk_responses_size() const;
  private:
  int _internal_chunk_responses_size() const;
  public:
  void clear_chunk_responses();
  ::CMsgClientLANP2PRequestChunksResponse_ChunkData* mutable_chunk_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientLANP2PRequestChunksResponse_ChunkData >*
      mutable_chunk_responses();
  private:
  const ::CMsgClientLANP2PRequestChunksResponse_ChunkData& _internal_chunk_responses(int index) const;
  ::CMsgClientLANP2PRequestChunksResponse_ChunkData* _internal_add_chunk_responses();
  public:
  const ::CMsgClientLANP2PRequestChunksResponse_ChunkData& chunk_responses(int index) const;
  ::CMsgClientLANP2PRequestChunksResponse_ChunkData* add_chunk_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientLANP2PRequestChunksResponse_ChunkData >&
      chunk_responses() const;

  // @@protoc_insertion_point(class_scope:CMsgClientLANP2PRequestChunksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientLANP2PRequestChunksResponse_ChunkData > chunk_responses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclientlanp2p_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientPeerChunkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientPeerChunkRequest) */ {
 public:
  inline CMsgClientPeerChunkRequest() : CMsgClientPeerChunkRequest(nullptr) {}
  ~CMsgClientPeerChunkRequest() override;
  explicit constexpr CMsgClientPeerChunkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientPeerChunkRequest(const CMsgClientPeerChunkRequest& from);
  CMsgClientPeerChunkRequest(CMsgClientPeerChunkRequest&& from) noexcept
    : CMsgClientPeerChunkRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientPeerChunkRequest& operator=(const CMsgClientPeerChunkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientPeerChunkRequest& operator=(CMsgClientPeerChunkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientPeerChunkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientPeerChunkRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientPeerChunkRequest*>(
               &_CMsgClientPeerChunkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgClientPeerChunkRequest& a, CMsgClientPeerChunkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientPeerChunkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientPeerChunkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientPeerChunkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientPeerChunkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientPeerChunkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientPeerChunkRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientPeerChunkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientPeerChunkRequest";
  }
  protected:
  explicit CMsgClientPeerChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFieldNumber = 3,
    kAppIdFieldNumber = 1,
    kDepotIdFieldNumber = 2,
  };
  // optional bytes sha = 3;
  bool has_sha() const;
  private:
  bool _internal_has_sha() const;
  public:
  void clear_sha();
  const std::string& sha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha();
  PROTOBUF_NODISCARD std::string* release_sha();
  void set_allocated_sha(std::string* sha);
  private:
  const std::string& _internal_sha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha(const std::string& value);
  std::string* _internal_mutable_sha();
  public:

  // optional uint32 app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 depot_id = 2;
  bool has_depot_id() const;
  private:
  bool _internal_has_depot_id() const;
  public:
  void clear_depot_id();
  uint32_t depot_id() const;
  void set_depot_id(uint32_t value);
  private:
  uint32_t _internal_depot_id() const;
  void _internal_set_depot_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientPeerChunkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_;
  uint32_t app_id_;
  uint32_t depot_id_;
  friend struct ::TableStruct_steammessages_5fclientlanp2p_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientPeerChunkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientPeerChunkResponse) */ {
 public:
  inline CMsgClientPeerChunkResponse() : CMsgClientPeerChunkResponse(nullptr) {}
  ~CMsgClientPeerChunkResponse() override;
  explicit constexpr CMsgClientPeerChunkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientPeerChunkResponse(const CMsgClientPeerChunkResponse& from);
  CMsgClientPeerChunkResponse(CMsgClientPeerChunkResponse&& from) noexcept
    : CMsgClientPeerChunkResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientPeerChunkResponse& operator=(const CMsgClientPeerChunkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientPeerChunkResponse& operator=(CMsgClientPeerChunkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientPeerChunkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientPeerChunkResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientPeerChunkResponse*>(
               &_CMsgClientPeerChunkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgClientPeerChunkResponse& a, CMsgClientPeerChunkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientPeerChunkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientPeerChunkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientPeerChunkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientPeerChunkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientPeerChunkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgClientPeerChunkResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientPeerChunkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientPeerChunkResponse";
  }
  protected:
  explicit CMsgClientPeerChunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShaFieldNumber = 4,
    kChunkDataFieldNumber = 7,
    kResultFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kDepotIdFieldNumber = 3,
    kEncryptedFieldNumber = 5,
    kCompressedFieldNumber = 6,
  };
  // optional bytes sha = 4;
  bool has_sha() const;
  private:
  bool _internal_has_sha() const;
  public:
  void clear_sha();
  const std::string& sha() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sha(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sha();
  PROTOBUF_NODISCARD std::string* release_sha();
  void set_allocated_sha(std::string* sha);
  private:
  const std::string& _internal_sha() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sha(const std::string& value);
  std::string* _internal_mutable_sha();
  public:

  // optional bytes chunk_data = 7;
  bool has_chunk_data() const;
  private:
  bool _internal_has_chunk_data() const;
  public:
  void clear_chunk_data();
  const std::string& chunk_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chunk_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chunk_data();
  PROTOBUF_NODISCARD std::string* release_chunk_data();
  void set_allocated_chunk_data(std::string* chunk_data);
  private:
  const std::string& _internal_chunk_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk_data(const std::string& value);
  std::string* _internal_mutable_chunk_data();
  public:

  // optional uint32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // optional uint32 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // optional uint32 depot_id = 3;
  bool has_depot_id() const;
  private:
  bool _internal_has_depot_id() const;
  public:
  void clear_depot_id();
  uint32_t depot_id() const;
  void set_depot_id(uint32_t value);
  private:
  uint32_t _internal_depot_id() const;
  void _internal_set_depot_id(uint32_t value);
  public:

  // optional bool encrypted = 5;
  bool has_encrypted() const;
  private:
  bool _internal_has_encrypted() const;
  public:
  void clear_encrypted();
  bool encrypted() const;
  void set_encrypted(bool value);
  private:
  bool _internal_encrypted() const;
  void _internal_set_encrypted(bool value);
  public:

  // optional bool compressed = 6;
  bool has_compressed() const;
  private:
  bool _internal_has_compressed() const;
  public:
  void clear_compressed();
  bool compressed() const;
  void set_compressed(bool value);
  private:
  bool _internal_compressed() const;
  void _internal_set_compressed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientPeerChunkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_data_;
  uint32_t result_;
  uint32_t app_id_;
  uint32_t depot_id_;
  bool encrypted_;
  bool compressed_;
  friend struct ::TableStruct_steammessages_5fclientlanp2p_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgClientLANP2PRequestChunks_ChunkKey

// optional uint32 depot_id = 1;
inline bool CMsgClientLANP2PRequestChunks_ChunkKey::_internal_has_depot_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientLANP2PRequestChunks_ChunkKey::has_depot_id() const {
  return _internal_has_depot_id();
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::clear_depot_id() {
  depot_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientLANP2PRequestChunks_ChunkKey::_internal_depot_id() const {
  return depot_id_;
}
inline uint32_t CMsgClientLANP2PRequestChunks_ChunkKey::depot_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLANP2PRequestChunks.ChunkKey.depot_id)
  return _internal_depot_id();
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::_internal_set_depot_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  depot_id_ = value;
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::set_depot_id(uint32_t value) {
  _internal_set_depot_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientLANP2PRequestChunks.ChunkKey.depot_id)
}

// optional bytes sha = 2;
inline bool CMsgClientLANP2PRequestChunks_ChunkKey::_internal_has_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientLANP2PRequestChunks_ChunkKey::has_sha() const {
  return _internal_has_sha();
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::clear_sha() {
  sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientLANP2PRequestChunks_ChunkKey::sha() const {
  // @@protoc_insertion_point(field_get:CMsgClientLANP2PRequestChunks.ChunkKey.sha)
  return _internal_sha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientLANP2PRequestChunks_ChunkKey::set_sha(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientLANP2PRequestChunks.ChunkKey.sha)
}
inline std::string* CMsgClientLANP2PRequestChunks_ChunkKey::mutable_sha() {
  std::string* _s = _internal_mutable_sha();
  // @@protoc_insertion_point(field_mutable:CMsgClientLANP2PRequestChunks.ChunkKey.sha)
  return _s;
}
inline const std::string& CMsgClientLANP2PRequestChunks_ChunkKey::_internal_sha() const {
  return sha_.Get();
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::_internal_set_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientLANP2PRequestChunks_ChunkKey::_internal_mutable_sha() {
  _has_bits_[0] |= 0x00000001u;
  return sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientLANP2PRequestChunks_ChunkKey::release_sha() {
  // @@protoc_insertion_point(field_release:CMsgClientLANP2PRequestChunks.ChunkKey.sha)
  if (!_internal_has_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientLANP2PRequestChunks_ChunkKey::set_allocated_sha(std::string* sha) {
  if (sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLANP2PRequestChunks.ChunkKey.sha)
}

// -------------------------------------------------------------------

// CMsgClientLANP2PRequestChunks

// repeated .CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
inline int CMsgClientLANP2PRequestChunks::_internal_chunk_keys_size() const {
  return chunk_keys_.size();
}
inline int CMsgClientLANP2PRequestChunks::chunk_keys_size() const {
  return _internal_chunk_keys_size();
}
inline void CMsgClientLANP2PRequestChunks::clear_chunk_keys() {
  chunk_keys_.Clear();
}
inline ::CMsgClientLANP2PRequestChunks_ChunkKey* CMsgClientLANP2PRequestChunks::mutable_chunk_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientLANP2PRequestChunks.chunk_keys)
  return chunk_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientLANP2PRequestChunks_ChunkKey >*
CMsgClientLANP2PRequestChunks::mutable_chunk_keys() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientLANP2PRequestChunks.chunk_keys)
  return &chunk_keys_;
}
inline const ::CMsgClientLANP2PRequestChunks_ChunkKey& CMsgClientLANP2PRequestChunks::_internal_chunk_keys(int index) const {
  return chunk_keys_.Get(index);
}
inline const ::CMsgClientLANP2PRequestChunks_ChunkKey& CMsgClientLANP2PRequestChunks::chunk_keys(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientLANP2PRequestChunks.chunk_keys)
  return _internal_chunk_keys(index);
}
inline ::CMsgClientLANP2PRequestChunks_ChunkKey* CMsgClientLANP2PRequestChunks::_internal_add_chunk_keys() {
  return chunk_keys_.Add();
}
inline ::CMsgClientLANP2PRequestChunks_ChunkKey* CMsgClientLANP2PRequestChunks::add_chunk_keys() {
  ::CMsgClientLANP2PRequestChunks_ChunkKey* _add = _internal_add_chunk_keys();
  // @@protoc_insertion_point(field_add:CMsgClientLANP2PRequestChunks.chunk_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientLANP2PRequestChunks_ChunkKey >&
CMsgClientLANP2PRequestChunks::chunk_keys() const {
  // @@protoc_insertion_point(field_list:CMsgClientLANP2PRequestChunks.chunk_keys)
  return chunk_keys_;
}

// -------------------------------------------------------------------

// CMsgClientLANP2PRequestChunksResponse_ChunkData

// optional uint32 result = 1;
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_result() const {
  return _internal_has_result();
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_result() {
  result_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_result() const {
  return result_;
}
inline uint32_t CMsgClientLANP2PRequestChunksResponse_ChunkData::result() const {
  // @@protoc_insertion_point(field_get:CMsgClientLANP2PRequestChunksResponse.ChunkData.result)
  return _internal_result();
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_set_result(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgClientLANP2PRequestChunksResponse.ChunkData.result)
}

// optional uint32 depot_id = 2;
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_has_depot_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_depot_id() const {
  return _internal_has_depot_id();
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_depot_id() {
  depot_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_depot_id() const {
  return depot_id_;
}
inline uint32_t CMsgClientLANP2PRequestChunksResponse_ChunkData::depot_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLANP2PRequestChunksResponse.ChunkData.depot_id)
  return _internal_depot_id();
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_set_depot_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  depot_id_ = value;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_depot_id(uint32_t value) {
  _internal_set_depot_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientLANP2PRequestChunksResponse.ChunkData.depot_id)
}

// optional bytes sha = 3;
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_has_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_sha() const {
  return _internal_has_sha();
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_sha() {
  sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientLANP2PRequestChunksResponse_ChunkData::sha() const {
  // @@protoc_insertion_point(field_get:CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
  return _internal_sha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_sha(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
}
inline std::string* CMsgClientLANP2PRequestChunksResponse_ChunkData::mutable_sha() {
  std::string* _s = _internal_mutable_sha();
  // @@protoc_insertion_point(field_mutable:CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
  return _s;
}
inline const std::string& CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_sha() const {
  return sha_.Get();
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_set_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_mutable_sha() {
  _has_bits_[0] |= 0x00000001u;
  return sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientLANP2PRequestChunksResponse_ChunkData::release_sha() {
  // @@protoc_insertion_point(field_release:CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
  if (!_internal_has_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_allocated_sha(std::string* sha) {
  if (sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
}

// optional bytes chunk_data = 4;
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_has_chunk_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_chunk_data() const {
  return _internal_has_chunk_data();
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_chunk_data() {
  chunk_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientLANP2PRequestChunksResponse_ChunkData::chunk_data() const {
  // @@protoc_insertion_point(field_get:CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
  return _internal_chunk_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_chunk_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 chunk_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
}
inline std::string* CMsgClientLANP2PRequestChunksResponse_ChunkData::mutable_chunk_data() {
  std::string* _s = _internal_mutable_chunk_data();
  // @@protoc_insertion_point(field_mutable:CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
  return _s;
}
inline const std::string& CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_chunk_data() const {
  return chunk_data_.Get();
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_set_chunk_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  chunk_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_mutable_chunk_data() {
  _has_bits_[0] |= 0x00000002u;
  return chunk_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientLANP2PRequestChunksResponse_ChunkData::release_chunk_data() {
  // @@protoc_insertion_point(field_release:CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
  if (!_internal_has_chunk_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = chunk_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chunk_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chunk_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_allocated_chunk_data(std::string* chunk_data) {
  if (chunk_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  chunk_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chunk_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chunk_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chunk_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
}

// optional bool encrypted = 5;
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_has_encrypted() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_encrypted() const {
  return _internal_has_encrypted();
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_encrypted() {
  encrypted_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_encrypted() const {
  return encrypted_;
}
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::encrypted() const {
  // @@protoc_insertion_point(field_get:CMsgClientLANP2PRequestChunksResponse.ChunkData.encrypted)
  return _internal_encrypted();
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_set_encrypted(bool value) {
  _has_bits_[0] |= 0x00000010u;
  encrypted_ = value;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_encrypted(bool value) {
  _internal_set_encrypted(value);
  // @@protoc_insertion_point(field_set:CMsgClientLANP2PRequestChunksResponse.ChunkData.encrypted)
}

// optional bool compressed = 6;
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_has_compressed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_compressed() const {
  return _internal_has_compressed();
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_compressed() {
  compressed_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_compressed() const {
  return compressed_;
}
inline bool CMsgClientLANP2PRequestChunksResponse_ChunkData::compressed() const {
  // @@protoc_insertion_point(field_get:CMsgClientLANP2PRequestChunksResponse.ChunkData.compressed)
  return _internal_compressed();
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::_internal_set_compressed(bool value) {
  _has_bits_[0] |= 0x00000020u;
  compressed_ = value;
}
inline void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_compressed(bool value) {
  _internal_set_compressed(value);
  // @@protoc_insertion_point(field_set:CMsgClientLANP2PRequestChunksResponse.ChunkData.compressed)
}

// -------------------------------------------------------------------

// CMsgClientLANP2PRequestChunksResponse

// repeated .CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
inline int CMsgClientLANP2PRequestChunksResponse::_internal_chunk_responses_size() const {
  return chunk_responses_.size();
}
inline int CMsgClientLANP2PRequestChunksResponse::chunk_responses_size() const {
  return _internal_chunk_responses_size();
}
inline void CMsgClientLANP2PRequestChunksResponse::clear_chunk_responses() {
  chunk_responses_.Clear();
}
inline ::CMsgClientLANP2PRequestChunksResponse_ChunkData* CMsgClientLANP2PRequestChunksResponse::mutable_chunk_responses(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientLANP2PRequestChunksResponse.chunk_responses)
  return chunk_responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientLANP2PRequestChunksResponse_ChunkData >*
CMsgClientLANP2PRequestChunksResponse::mutable_chunk_responses() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientLANP2PRequestChunksResponse.chunk_responses)
  return &chunk_responses_;
}
inline const ::CMsgClientLANP2PRequestChunksResponse_ChunkData& CMsgClientLANP2PRequestChunksResponse::_internal_chunk_responses(int index) const {
  return chunk_responses_.Get(index);
}
inline const ::CMsgClientLANP2PRequestChunksResponse_ChunkData& CMsgClientLANP2PRequestChunksResponse::chunk_responses(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientLANP2PRequestChunksResponse.chunk_responses)
  return _internal_chunk_responses(index);
}
inline ::CMsgClientLANP2PRequestChunksResponse_ChunkData* CMsgClientLANP2PRequestChunksResponse::_internal_add_chunk_responses() {
  return chunk_responses_.Add();
}
inline ::CMsgClientLANP2PRequestChunksResponse_ChunkData* CMsgClientLANP2PRequestChunksResponse::add_chunk_responses() {
  ::CMsgClientLANP2PRequestChunksResponse_ChunkData* _add = _internal_add_chunk_responses();
  // @@protoc_insertion_point(field_add:CMsgClientLANP2PRequestChunksResponse.chunk_responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientLANP2PRequestChunksResponse_ChunkData >&
CMsgClientLANP2PRequestChunksResponse::chunk_responses() const {
  // @@protoc_insertion_point(field_list:CMsgClientLANP2PRequestChunksResponse.chunk_responses)
  return chunk_responses_;
}

// -------------------------------------------------------------------

// CMsgClientPeerChunkRequest

// optional uint32 app_id = 1;
inline bool CMsgClientPeerChunkRequest::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientPeerChunkRequest::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientPeerChunkRequest::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientPeerChunkRequest::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientPeerChunkRequest::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientPeerChunkRequest.app_id)
  return _internal_app_id();
}
inline void CMsgClientPeerChunkRequest::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_ = value;
}
inline void CMsgClientPeerChunkRequest::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientPeerChunkRequest.app_id)
}

// optional uint32 depot_id = 2;
inline bool CMsgClientPeerChunkRequest::_internal_has_depot_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientPeerChunkRequest::has_depot_id() const {
  return _internal_has_depot_id();
}
inline void CMsgClientPeerChunkRequest::clear_depot_id() {
  depot_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientPeerChunkRequest::_internal_depot_id() const {
  return depot_id_;
}
inline uint32_t CMsgClientPeerChunkRequest::depot_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientPeerChunkRequest.depot_id)
  return _internal_depot_id();
}
inline void CMsgClientPeerChunkRequest::_internal_set_depot_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  depot_id_ = value;
}
inline void CMsgClientPeerChunkRequest::set_depot_id(uint32_t value) {
  _internal_set_depot_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientPeerChunkRequest.depot_id)
}

// optional bytes sha = 3;
inline bool CMsgClientPeerChunkRequest::_internal_has_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientPeerChunkRequest::has_sha() const {
  return _internal_has_sha();
}
inline void CMsgClientPeerChunkRequest::clear_sha() {
  sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientPeerChunkRequest::sha() const {
  // @@protoc_insertion_point(field_get:CMsgClientPeerChunkRequest.sha)
  return _internal_sha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientPeerChunkRequest::set_sha(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientPeerChunkRequest.sha)
}
inline std::string* CMsgClientPeerChunkRequest::mutable_sha() {
  std::string* _s = _internal_mutable_sha();
  // @@protoc_insertion_point(field_mutable:CMsgClientPeerChunkRequest.sha)
  return _s;
}
inline const std::string& CMsgClientPeerChunkRequest::_internal_sha() const {
  return sha_.Get();
}
inline void CMsgClientPeerChunkRequest::_internal_set_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientPeerChunkRequest::_internal_mutable_sha() {
  _has_bits_[0] |= 0x00000001u;
  return sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientPeerChunkRequest::release_sha() {
  // @@protoc_insertion_point(field_release:CMsgClientPeerChunkRequest.sha)
  if (!_internal_has_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientPeerChunkRequest::set_allocated_sha(std::string* sha) {
  if (sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientPeerChunkRequest.sha)
}

// -------------------------------------------------------------------

// CMsgClientPeerChunkResponse

// optional uint32 result = 1;
inline bool CMsgClientPeerChunkResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientPeerChunkResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgClientPeerChunkResponse::clear_result() {
  result_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientPeerChunkResponse::_internal_result() const {
  return result_;
}
inline uint32_t CMsgClientPeerChunkResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgClientPeerChunkResponse.result)
  return _internal_result();
}
inline void CMsgClientPeerChunkResponse::_internal_set_result(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
}
inline void CMsgClientPeerChunkResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgClientPeerChunkResponse.result)
}

// optional uint32 app_id = 2;
inline bool CMsgClientPeerChunkResponse::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientPeerChunkResponse::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgClientPeerChunkResponse::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientPeerChunkResponse::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CMsgClientPeerChunkResponse::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientPeerChunkResponse.app_id)
  return _internal_app_id();
}
inline void CMsgClientPeerChunkResponse::_internal_set_app_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  app_id_ = value;
}
inline void CMsgClientPeerChunkResponse::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientPeerChunkResponse.app_id)
}

// optional uint32 depot_id = 3;
inline bool CMsgClientPeerChunkResponse::_internal_has_depot_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientPeerChunkResponse::has_depot_id() const {
  return _internal_has_depot_id();
}
inline void CMsgClientPeerChunkResponse::clear_depot_id() {
  depot_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientPeerChunkResponse::_internal_depot_id() const {
  return depot_id_;
}
inline uint32_t CMsgClientPeerChunkResponse::depot_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientPeerChunkResponse.depot_id)
  return _internal_depot_id();
}
inline void CMsgClientPeerChunkResponse::_internal_set_depot_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  depot_id_ = value;
}
inline void CMsgClientPeerChunkResponse::set_depot_id(uint32_t value) {
  _internal_set_depot_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientPeerChunkResponse.depot_id)
}

// optional bytes sha = 4;
inline bool CMsgClientPeerChunkResponse::_internal_has_sha() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientPeerChunkResponse::has_sha() const {
  return _internal_has_sha();
}
inline void CMsgClientPeerChunkResponse::clear_sha() {
  sha_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientPeerChunkResponse::sha() const {
  // @@protoc_insertion_point(field_get:CMsgClientPeerChunkResponse.sha)
  return _internal_sha();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientPeerChunkResponse::set_sha(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sha_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientPeerChunkResponse.sha)
}
inline std::string* CMsgClientPeerChunkResponse::mutable_sha() {
  std::string* _s = _internal_mutable_sha();
  // @@protoc_insertion_point(field_mutable:CMsgClientPeerChunkResponse.sha)
  return _s;
}
inline const std::string& CMsgClientPeerChunkResponse::_internal_sha() const {
  return sha_.Get();
}
inline void CMsgClientPeerChunkResponse::_internal_set_sha(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientPeerChunkResponse::_internal_mutable_sha() {
  _has_bits_[0] |= 0x00000001u;
  return sha_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientPeerChunkResponse::release_sha() {
  // @@protoc_insertion_point(field_release:CMsgClientPeerChunkResponse.sha)
  if (!_internal_has_sha()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sha_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientPeerChunkResponse::set_allocated_sha(std::string* sha) {
  if (sha != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sha_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sha_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sha_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientPeerChunkResponse.sha)
}

// optional bool encrypted = 5;
inline bool CMsgClientPeerChunkResponse::_internal_has_encrypted() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientPeerChunkResponse::has_encrypted() const {
  return _internal_has_encrypted();
}
inline void CMsgClientPeerChunkResponse::clear_encrypted() {
  encrypted_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgClientPeerChunkResponse::_internal_encrypted() const {
  return encrypted_;
}
inline bool CMsgClientPeerChunkResponse::encrypted() const {
  // @@protoc_insertion_point(field_get:CMsgClientPeerChunkResponse.encrypted)
  return _internal_encrypted();
}
inline void CMsgClientPeerChunkResponse::_internal_set_encrypted(bool value) {
  _has_bits_[0] |= 0x00000020u;
  encrypted_ = value;
}
inline void CMsgClientPeerChunkResponse::set_encrypted(bool value) {
  _internal_set_encrypted(value);
  // @@protoc_insertion_point(field_set:CMsgClientPeerChunkResponse.encrypted)
}

// optional bool compressed = 6;
inline bool CMsgClientPeerChunkResponse::_internal_has_compressed() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientPeerChunkResponse::has_compressed() const {
  return _internal_has_compressed();
}
inline void CMsgClientPeerChunkResponse::clear_compressed() {
  compressed_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgClientPeerChunkResponse::_internal_compressed() const {
  return compressed_;
}
inline bool CMsgClientPeerChunkResponse::compressed() const {
  // @@protoc_insertion_point(field_get:CMsgClientPeerChunkResponse.compressed)
  return _internal_compressed();
}
inline void CMsgClientPeerChunkResponse::_internal_set_compressed(bool value) {
  _has_bits_[0] |= 0x00000040u;
  compressed_ = value;
}
inline void CMsgClientPeerChunkResponse::set_compressed(bool value) {
  _internal_set_compressed(value);
  // @@protoc_insertion_point(field_set:CMsgClientPeerChunkResponse.compressed)
}

// optional bytes chunk_data = 7;
inline bool CMsgClientPeerChunkResponse::_internal_has_chunk_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientPeerChunkResponse::has_chunk_data() const {
  return _internal_has_chunk_data();
}
inline void CMsgClientPeerChunkResponse::clear_chunk_data() {
  chunk_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientPeerChunkResponse::chunk_data() const {
  // @@protoc_insertion_point(field_get:CMsgClientPeerChunkResponse.chunk_data)
  return _internal_chunk_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientPeerChunkResponse::set_chunk_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 chunk_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientPeerChunkResponse.chunk_data)
}
inline std::string* CMsgClientPeerChunkResponse::mutable_chunk_data() {
  std::string* _s = _internal_mutable_chunk_data();
  // @@protoc_insertion_point(field_mutable:CMsgClientPeerChunkResponse.chunk_data)
  return _s;
}
inline const std::string& CMsgClientPeerChunkResponse::_internal_chunk_data() const {
  return chunk_data_.Get();
}
inline void CMsgClientPeerChunkResponse::_internal_set_chunk_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  chunk_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgClientPeerChunkResponse::_internal_mutable_chunk_data() {
  _has_bits_[0] |= 0x00000002u;
  return chunk_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgClientPeerChunkResponse::release_chunk_data() {
  // @@protoc_insertion_point(field_release:CMsgClientPeerChunkResponse.chunk_data)
  if (!_internal_has_chunk_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = chunk_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chunk_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chunk_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientPeerChunkResponse::set_allocated_chunk_data(std::string* chunk_data) {
  if (chunk_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  chunk_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chunk_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chunk_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chunk_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientPeerChunkResponse.chunk_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientlanp2p_2eproto
