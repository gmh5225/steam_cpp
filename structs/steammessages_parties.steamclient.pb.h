// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_parties.steamclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fparties_2esteamclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fparties_2esteamclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fparties_2esteamclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fparties_2esteamclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fparties_2esteamclient_2eproto;
class CParties_BeaconLocation;
struct CParties_BeaconLocationDefaultTypeInternal;
extern CParties_BeaconLocationDefaultTypeInternal _CParties_BeaconLocation_default_instance_;
class CParties_CancelReservation_Request;
struct CParties_CancelReservation_RequestDefaultTypeInternal;
extern CParties_CancelReservation_RequestDefaultTypeInternal _CParties_CancelReservation_Request_default_instance_;
class CParties_CancelReservation_Response;
struct CParties_CancelReservation_ResponseDefaultTypeInternal;
extern CParties_CancelReservation_ResponseDefaultTypeInternal _CParties_CancelReservation_Response_default_instance_;
class CParties_ChangeNumOpenSlots_Request;
struct CParties_ChangeNumOpenSlots_RequestDefaultTypeInternal;
extern CParties_ChangeNumOpenSlots_RequestDefaultTypeInternal _CParties_ChangeNumOpenSlots_Request_default_instance_;
class CParties_ChangeNumOpenSlots_Response;
struct CParties_ChangeNumOpenSlots_ResponseDefaultTypeInternal;
extern CParties_ChangeNumOpenSlots_ResponseDefaultTypeInternal _CParties_ChangeNumOpenSlots_Response_default_instance_;
class CParties_CreateBeacon_Request;
struct CParties_CreateBeacon_RequestDefaultTypeInternal;
extern CParties_CreateBeacon_RequestDefaultTypeInternal _CParties_CreateBeacon_Request_default_instance_;
class CParties_CreateBeacon_Response;
struct CParties_CreateBeacon_ResponseDefaultTypeInternal;
extern CParties_CreateBeacon_ResponseDefaultTypeInternal _CParties_CreateBeacon_Response_default_instance_;
class CParties_DestroyBeacon_Request;
struct CParties_DestroyBeacon_RequestDefaultTypeInternal;
extern CParties_DestroyBeacon_RequestDefaultTypeInternal _CParties_DestroyBeacon_Request_default_instance_;
class CParties_DestroyBeacon_Response;
struct CParties_DestroyBeacon_ResponseDefaultTypeInternal;
extern CParties_DestroyBeacon_ResponseDefaultTypeInternal _CParties_DestroyBeacon_Response_default_instance_;
class CParties_JoinParty_Request;
struct CParties_JoinParty_RequestDefaultTypeInternal;
extern CParties_JoinParty_RequestDefaultTypeInternal _CParties_JoinParty_Request_default_instance_;
class CParties_JoinParty_Response;
struct CParties_JoinParty_ResponseDefaultTypeInternal;
extern CParties_JoinParty_ResponseDefaultTypeInternal _CParties_JoinParty_Response_default_instance_;
class CParties_OnReservationCompleted_Request;
struct CParties_OnReservationCompleted_RequestDefaultTypeInternal;
extern CParties_OnReservationCompleted_RequestDefaultTypeInternal _CParties_OnReservationCompleted_Request_default_instance_;
class CParties_OnReservationCompleted_Response;
struct CParties_OnReservationCompleted_ResponseDefaultTypeInternal;
extern CParties_OnReservationCompleted_ResponseDefaultTypeInternal _CParties_OnReservationCompleted_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CParties_BeaconLocation* Arena::CreateMaybeMessage<::CParties_BeaconLocation>(Arena*);
template<> ::CParties_CancelReservation_Request* Arena::CreateMaybeMessage<::CParties_CancelReservation_Request>(Arena*);
template<> ::CParties_CancelReservation_Response* Arena::CreateMaybeMessage<::CParties_CancelReservation_Response>(Arena*);
template<> ::CParties_ChangeNumOpenSlots_Request* Arena::CreateMaybeMessage<::CParties_ChangeNumOpenSlots_Request>(Arena*);
template<> ::CParties_ChangeNumOpenSlots_Response* Arena::CreateMaybeMessage<::CParties_ChangeNumOpenSlots_Response>(Arena*);
template<> ::CParties_CreateBeacon_Request* Arena::CreateMaybeMessage<::CParties_CreateBeacon_Request>(Arena*);
template<> ::CParties_CreateBeacon_Response* Arena::CreateMaybeMessage<::CParties_CreateBeacon_Response>(Arena*);
template<> ::CParties_DestroyBeacon_Request* Arena::CreateMaybeMessage<::CParties_DestroyBeacon_Request>(Arena*);
template<> ::CParties_DestroyBeacon_Response* Arena::CreateMaybeMessage<::CParties_DestroyBeacon_Response>(Arena*);
template<> ::CParties_JoinParty_Request* Arena::CreateMaybeMessage<::CParties_JoinParty_Request>(Arena*);
template<> ::CParties_JoinParty_Response* Arena::CreateMaybeMessage<::CParties_JoinParty_Response>(Arena*);
template<> ::CParties_OnReservationCompleted_Request* Arena::CreateMaybeMessage<::CParties_OnReservationCompleted_Request>(Arena*);
template<> ::CParties_OnReservationCompleted_Response* Arena::CreateMaybeMessage<::CParties_OnReservationCompleted_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CParties_JoinParty_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParties_JoinParty_Request) */ {
 public:
  inline CParties_JoinParty_Request() : CParties_JoinParty_Request(nullptr) {}
  ~CParties_JoinParty_Request() override;
  explicit constexpr CParties_JoinParty_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParties_JoinParty_Request(const CParties_JoinParty_Request& from);
  CParties_JoinParty_Request(CParties_JoinParty_Request&& from) noexcept
    : CParties_JoinParty_Request() {
    *this = ::std::move(from);
  }

  inline CParties_JoinParty_Request& operator=(const CParties_JoinParty_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParties_JoinParty_Request& operator=(CParties_JoinParty_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParties_JoinParty_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParties_JoinParty_Request* internal_default_instance() {
    return reinterpret_cast<const CParties_JoinParty_Request*>(
               &_CParties_JoinParty_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CParties_JoinParty_Request& a, CParties_JoinParty_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParties_JoinParty_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParties_JoinParty_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParties_JoinParty_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParties_JoinParty_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParties_JoinParty_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParties_JoinParty_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParties_JoinParty_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParties_JoinParty_Request";
  }
  protected:
  explicit CParties_JoinParty_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kBeaconIdFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint64 beacon_id = 2;
  bool has_beacon_id() const;
  private:
  bool _internal_has_beacon_id() const;
  public:
  void clear_beacon_id();
  uint64_t beacon_id() const;
  void set_beacon_id(uint64_t value);
  private:
  uint64_t _internal_beacon_id() const;
  void _internal_set_beacon_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParties_JoinParty_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t steamid_;
  uint64_t beacon_id_;
  friend struct ::TableStruct_steammessages_5fparties_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParties_JoinParty_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParties_JoinParty_Response) */ {
 public:
  inline CParties_JoinParty_Response() : CParties_JoinParty_Response(nullptr) {}
  ~CParties_JoinParty_Response() override;
  explicit constexpr CParties_JoinParty_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParties_JoinParty_Response(const CParties_JoinParty_Response& from);
  CParties_JoinParty_Response(CParties_JoinParty_Response&& from) noexcept
    : CParties_JoinParty_Response() {
    *this = ::std::move(from);
  }

  inline CParties_JoinParty_Response& operator=(const CParties_JoinParty_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParties_JoinParty_Response& operator=(CParties_JoinParty_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParties_JoinParty_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParties_JoinParty_Response* internal_default_instance() {
    return reinterpret_cast<const CParties_JoinParty_Response*>(
               &_CParties_JoinParty_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CParties_JoinParty_Response& a, CParties_JoinParty_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParties_JoinParty_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParties_JoinParty_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParties_JoinParty_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParties_JoinParty_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParties_JoinParty_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParties_JoinParty_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParties_JoinParty_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParties_JoinParty_Response";
  }
  protected:
  explicit CParties_JoinParty_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectStringFieldNumber = 2,
    kBeaconIdFieldNumber = 1,
  };
  // optional string connect_string = 2;
  bool has_connect_string() const;
  private:
  bool _internal_has_connect_string() const;
  public:
  void clear_connect_string();
  const std::string& connect_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connect_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connect_string();
  PROTOBUF_NODISCARD std::string* release_connect_string();
  void set_allocated_connect_string(std::string* connect_string);
  private:
  const std::string& _internal_connect_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connect_string(const std::string& value);
  std::string* _internal_mutable_connect_string();
  public:

  // optional uint64 beacon_id = 1;
  bool has_beacon_id() const;
  private:
  bool _internal_has_beacon_id() const;
  public:
  void clear_beacon_id();
  uint64_t beacon_id() const;
  void set_beacon_id(uint64_t value);
  private:
  uint64_t _internal_beacon_id() const;
  void _internal_set_beacon_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParties_JoinParty_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connect_string_;
  uint64_t beacon_id_;
  friend struct ::TableStruct_steammessages_5fparties_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParties_BeaconLocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParties_BeaconLocation) */ {
 public:
  inline CParties_BeaconLocation() : CParties_BeaconLocation(nullptr) {}
  ~CParties_BeaconLocation() override;
  explicit constexpr CParties_BeaconLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParties_BeaconLocation(const CParties_BeaconLocation& from);
  CParties_BeaconLocation(CParties_BeaconLocation&& from) noexcept
    : CParties_BeaconLocation() {
    *this = ::std::move(from);
  }

  inline CParties_BeaconLocation& operator=(const CParties_BeaconLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParties_BeaconLocation& operator=(CParties_BeaconLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParties_BeaconLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParties_BeaconLocation* internal_default_instance() {
    return reinterpret_cast<const CParties_BeaconLocation*>(
               &_CParties_BeaconLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CParties_BeaconLocation& a, CParties_BeaconLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(CParties_BeaconLocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParties_BeaconLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParties_BeaconLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParties_BeaconLocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParties_BeaconLocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParties_BeaconLocation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParties_BeaconLocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParties_BeaconLocation";
  }
  protected:
  explicit CParties_BeaconLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationIdFieldNumber = 2,
    kLocationTypeFieldNumber = 1,
  };
  // optional uint64 location_id = 2;
  bool has_location_id() const;
  private:
  bool _internal_has_location_id() const;
  public:
  void clear_location_id();
  uint64_t location_id() const;
  void set_location_id(uint64_t value);
  private:
  uint64_t _internal_location_id() const;
  void _internal_set_location_id(uint64_t value);
  public:

  // optional uint32 location_type = 1;
  bool has_location_type() const;
  private:
  bool _internal_has_location_type() const;
  public:
  void clear_location_type();
  uint32_t location_type() const;
  void set_location_type(uint32_t value);
  private:
  uint32_t _internal_location_type() const;
  void _internal_set_location_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParties_BeaconLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t location_id_;
  uint32_t location_type_;
  friend struct ::TableStruct_steammessages_5fparties_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParties_CreateBeacon_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParties_CreateBeacon_Request) */ {
 public:
  inline CParties_CreateBeacon_Request() : CParties_CreateBeacon_Request(nullptr) {}
  ~CParties_CreateBeacon_Request() override;
  explicit constexpr CParties_CreateBeacon_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParties_CreateBeacon_Request(const CParties_CreateBeacon_Request& from);
  CParties_CreateBeacon_Request(CParties_CreateBeacon_Request&& from) noexcept
    : CParties_CreateBeacon_Request() {
    *this = ::std::move(from);
  }

  inline CParties_CreateBeacon_Request& operator=(const CParties_CreateBeacon_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParties_CreateBeacon_Request& operator=(CParties_CreateBeacon_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParties_CreateBeacon_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParties_CreateBeacon_Request* internal_default_instance() {
    return reinterpret_cast<const CParties_CreateBeacon_Request*>(
               &_CParties_CreateBeacon_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CParties_CreateBeacon_Request& a, CParties_CreateBeacon_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParties_CreateBeacon_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParties_CreateBeacon_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParties_CreateBeacon_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParties_CreateBeacon_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParties_CreateBeacon_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParties_CreateBeacon_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParties_CreateBeacon_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParties_CreateBeacon_Request";
  }
  protected:
  explicit CParties_CreateBeacon_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationsFieldNumber = 3,
    kConnectStringFieldNumber = 4,
    kMetadataFieldNumber = 5,
    kAppidFieldNumber = 1,
    kNumOpenSlotsFieldNumber = 2,
  };
  // repeated .CParties_BeaconLocation locations = 3;
  int locations_size() const;
  private:
  int _internal_locations_size() const;
  public:
  void clear_locations();
  ::CParties_BeaconLocation* mutable_locations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CParties_BeaconLocation >*
      mutable_locations();
  private:
  const ::CParties_BeaconLocation& _internal_locations(int index) const;
  ::CParties_BeaconLocation* _internal_add_locations();
  public:
  const ::CParties_BeaconLocation& locations(int index) const;
  ::CParties_BeaconLocation* add_locations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CParties_BeaconLocation >&
      locations() const;

  // optional string connect_string = 4;
  bool has_connect_string() const;
  private:
  bool _internal_has_connect_string() const;
  public:
  void clear_connect_string();
  const std::string& connect_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connect_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connect_string();
  PROTOBUF_NODISCARD std::string* release_connect_string();
  void set_allocated_connect_string(std::string* connect_string);
  private:
  const std::string& _internal_connect_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connect_string(const std::string& value);
  std::string* _internal_mutable_connect_string();
  public:

  // optional string metadata = 5;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 num_open_slots = 2;
  bool has_num_open_slots() const;
  private:
  bool _internal_has_num_open_slots() const;
  public:
  void clear_num_open_slots();
  uint32_t num_open_slots() const;
  void set_num_open_slots(uint32_t value);
  private:
  uint32_t _internal_num_open_slots() const;
  void _internal_set_num_open_slots(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParties_CreateBeacon_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CParties_BeaconLocation > locations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connect_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  uint32_t appid_;
  uint32_t num_open_slots_;
  friend struct ::TableStruct_steammessages_5fparties_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParties_CreateBeacon_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParties_CreateBeacon_Response) */ {
 public:
  inline CParties_CreateBeacon_Response() : CParties_CreateBeacon_Response(nullptr) {}
  ~CParties_CreateBeacon_Response() override;
  explicit constexpr CParties_CreateBeacon_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParties_CreateBeacon_Response(const CParties_CreateBeacon_Response& from);
  CParties_CreateBeacon_Response(CParties_CreateBeacon_Response&& from) noexcept
    : CParties_CreateBeacon_Response() {
    *this = ::std::move(from);
  }

  inline CParties_CreateBeacon_Response& operator=(const CParties_CreateBeacon_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParties_CreateBeacon_Response& operator=(CParties_CreateBeacon_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParties_CreateBeacon_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParties_CreateBeacon_Response* internal_default_instance() {
    return reinterpret_cast<const CParties_CreateBeacon_Response*>(
               &_CParties_CreateBeacon_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CParties_CreateBeacon_Response& a, CParties_CreateBeacon_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParties_CreateBeacon_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParties_CreateBeacon_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParties_CreateBeacon_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParties_CreateBeacon_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParties_CreateBeacon_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParties_CreateBeacon_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParties_CreateBeacon_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParties_CreateBeacon_Response";
  }
  protected:
  explicit CParties_CreateBeacon_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeaconIdFieldNumber = 1,
  };
  // optional uint64 beacon_id = 1;
  bool has_beacon_id() const;
  private:
  bool _internal_has_beacon_id() const;
  public:
  void clear_beacon_id();
  uint64_t beacon_id() const;
  void set_beacon_id(uint64_t value);
  private:
  uint64_t _internal_beacon_id() const;
  void _internal_set_beacon_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParties_CreateBeacon_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t beacon_id_;
  friend struct ::TableStruct_steammessages_5fparties_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParties_OnReservationCompleted_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParties_OnReservationCompleted_Request) */ {
 public:
  inline CParties_OnReservationCompleted_Request() : CParties_OnReservationCompleted_Request(nullptr) {}
  ~CParties_OnReservationCompleted_Request() override;
  explicit constexpr CParties_OnReservationCompleted_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParties_OnReservationCompleted_Request(const CParties_OnReservationCompleted_Request& from);
  CParties_OnReservationCompleted_Request(CParties_OnReservationCompleted_Request&& from) noexcept
    : CParties_OnReservationCompleted_Request() {
    *this = ::std::move(from);
  }

  inline CParties_OnReservationCompleted_Request& operator=(const CParties_OnReservationCompleted_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParties_OnReservationCompleted_Request& operator=(CParties_OnReservationCompleted_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParties_OnReservationCompleted_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParties_OnReservationCompleted_Request* internal_default_instance() {
    return reinterpret_cast<const CParties_OnReservationCompleted_Request*>(
               &_CParties_OnReservationCompleted_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CParties_OnReservationCompleted_Request& a, CParties_OnReservationCompleted_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParties_OnReservationCompleted_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParties_OnReservationCompleted_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParties_OnReservationCompleted_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParties_OnReservationCompleted_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParties_OnReservationCompleted_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParties_OnReservationCompleted_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParties_OnReservationCompleted_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParties_OnReservationCompleted_Request";
  }
  protected:
  explicit CParties_OnReservationCompleted_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeaconIdFieldNumber = 1,
    kUserSteamidFieldNumber = 2,
  };
  // optional uint64 beacon_id = 1;
  bool has_beacon_id() const;
  private:
  bool _internal_has_beacon_id() const;
  public:
  void clear_beacon_id();
  uint64_t beacon_id() const;
  void set_beacon_id(uint64_t value);
  private:
  uint64_t _internal_beacon_id() const;
  void _internal_set_beacon_id(uint64_t value);
  public:

  // optional fixed64 user_steamid = 2;
  bool has_user_steamid() const;
  private:
  bool _internal_has_user_steamid() const;
  public:
  void clear_user_steamid();
  uint64_t user_steamid() const;
  void set_user_steamid(uint64_t value);
  private:
  uint64_t _internal_user_steamid() const;
  void _internal_set_user_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParties_OnReservationCompleted_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t beacon_id_;
  uint64_t user_steamid_;
  friend struct ::TableStruct_steammessages_5fparties_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParties_OnReservationCompleted_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParties_OnReservationCompleted_Response) */ {
 public:
  inline CParties_OnReservationCompleted_Response() : CParties_OnReservationCompleted_Response(nullptr) {}
  ~CParties_OnReservationCompleted_Response() override;
  explicit constexpr CParties_OnReservationCompleted_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParties_OnReservationCompleted_Response(const CParties_OnReservationCompleted_Response& from);
  CParties_OnReservationCompleted_Response(CParties_OnReservationCompleted_Response&& from) noexcept
    : CParties_OnReservationCompleted_Response() {
    *this = ::std::move(from);
  }

  inline CParties_OnReservationCompleted_Response& operator=(const CParties_OnReservationCompleted_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParties_OnReservationCompleted_Response& operator=(CParties_OnReservationCompleted_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParties_OnReservationCompleted_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParties_OnReservationCompleted_Response* internal_default_instance() {
    return reinterpret_cast<const CParties_OnReservationCompleted_Response*>(
               &_CParties_OnReservationCompleted_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CParties_OnReservationCompleted_Response& a, CParties_OnReservationCompleted_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParties_OnReservationCompleted_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParties_OnReservationCompleted_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParties_OnReservationCompleted_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParties_OnReservationCompleted_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParties_OnReservationCompleted_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParties_OnReservationCompleted_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParties_OnReservationCompleted_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParties_OnReservationCompleted_Response";
  }
  protected:
  explicit CParties_OnReservationCompleted_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeaconIdFieldNumber = 1,
  };
  // optional uint64 beacon_id = 1;
  bool has_beacon_id() const;
  private:
  bool _internal_has_beacon_id() const;
  public:
  void clear_beacon_id();
  uint64_t beacon_id() const;
  void set_beacon_id(uint64_t value);
  private:
  uint64_t _internal_beacon_id() const;
  void _internal_set_beacon_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParties_OnReservationCompleted_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t beacon_id_;
  friend struct ::TableStruct_steammessages_5fparties_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParties_CancelReservation_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParties_CancelReservation_Request) */ {
 public:
  inline CParties_CancelReservation_Request() : CParties_CancelReservation_Request(nullptr) {}
  ~CParties_CancelReservation_Request() override;
  explicit constexpr CParties_CancelReservation_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParties_CancelReservation_Request(const CParties_CancelReservation_Request& from);
  CParties_CancelReservation_Request(CParties_CancelReservation_Request&& from) noexcept
    : CParties_CancelReservation_Request() {
    *this = ::std::move(from);
  }

  inline CParties_CancelReservation_Request& operator=(const CParties_CancelReservation_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParties_CancelReservation_Request& operator=(CParties_CancelReservation_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParties_CancelReservation_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParties_CancelReservation_Request* internal_default_instance() {
    return reinterpret_cast<const CParties_CancelReservation_Request*>(
               &_CParties_CancelReservation_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CParties_CancelReservation_Request& a, CParties_CancelReservation_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParties_CancelReservation_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParties_CancelReservation_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParties_CancelReservation_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParties_CancelReservation_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParties_CancelReservation_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParties_CancelReservation_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParties_CancelReservation_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParties_CancelReservation_Request";
  }
  protected:
  explicit CParties_CancelReservation_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeaconIdFieldNumber = 1,
    kUserSteamidFieldNumber = 2,
  };
  // optional uint64 beacon_id = 1;
  bool has_beacon_id() const;
  private:
  bool _internal_has_beacon_id() const;
  public:
  void clear_beacon_id();
  uint64_t beacon_id() const;
  void set_beacon_id(uint64_t value);
  private:
  uint64_t _internal_beacon_id() const;
  void _internal_set_beacon_id(uint64_t value);
  public:

  // optional fixed64 user_steamid = 2;
  bool has_user_steamid() const;
  private:
  bool _internal_has_user_steamid() const;
  public:
  void clear_user_steamid();
  uint64_t user_steamid() const;
  void set_user_steamid(uint64_t value);
  private:
  uint64_t _internal_user_steamid() const;
  void _internal_set_user_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParties_CancelReservation_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t beacon_id_;
  uint64_t user_steamid_;
  friend struct ::TableStruct_steammessages_5fparties_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParties_CancelReservation_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParties_CancelReservation_Response) */ {
 public:
  inline CParties_CancelReservation_Response() : CParties_CancelReservation_Response(nullptr) {}
  ~CParties_CancelReservation_Response() override;
  explicit constexpr CParties_CancelReservation_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParties_CancelReservation_Response(const CParties_CancelReservation_Response& from);
  CParties_CancelReservation_Response(CParties_CancelReservation_Response&& from) noexcept
    : CParties_CancelReservation_Response() {
    *this = ::std::move(from);
  }

  inline CParties_CancelReservation_Response& operator=(const CParties_CancelReservation_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParties_CancelReservation_Response& operator=(CParties_CancelReservation_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParties_CancelReservation_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParties_CancelReservation_Response* internal_default_instance() {
    return reinterpret_cast<const CParties_CancelReservation_Response*>(
               &_CParties_CancelReservation_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CParties_CancelReservation_Response& a, CParties_CancelReservation_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParties_CancelReservation_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParties_CancelReservation_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParties_CancelReservation_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParties_CancelReservation_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParties_CancelReservation_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParties_CancelReservation_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParties_CancelReservation_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParties_CancelReservation_Response";
  }
  protected:
  explicit CParties_CancelReservation_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeaconIdFieldNumber = 1,
  };
  // optional uint64 beacon_id = 1;
  bool has_beacon_id() const;
  private:
  bool _internal_has_beacon_id() const;
  public:
  void clear_beacon_id();
  uint64_t beacon_id() const;
  void set_beacon_id(uint64_t value);
  private:
  uint64_t _internal_beacon_id() const;
  void _internal_set_beacon_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParties_CancelReservation_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t beacon_id_;
  friend struct ::TableStruct_steammessages_5fparties_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParties_ChangeNumOpenSlots_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParties_ChangeNumOpenSlots_Request) */ {
 public:
  inline CParties_ChangeNumOpenSlots_Request() : CParties_ChangeNumOpenSlots_Request(nullptr) {}
  ~CParties_ChangeNumOpenSlots_Request() override;
  explicit constexpr CParties_ChangeNumOpenSlots_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParties_ChangeNumOpenSlots_Request(const CParties_ChangeNumOpenSlots_Request& from);
  CParties_ChangeNumOpenSlots_Request(CParties_ChangeNumOpenSlots_Request&& from) noexcept
    : CParties_ChangeNumOpenSlots_Request() {
    *this = ::std::move(from);
  }

  inline CParties_ChangeNumOpenSlots_Request& operator=(const CParties_ChangeNumOpenSlots_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParties_ChangeNumOpenSlots_Request& operator=(CParties_ChangeNumOpenSlots_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParties_ChangeNumOpenSlots_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParties_ChangeNumOpenSlots_Request* internal_default_instance() {
    return reinterpret_cast<const CParties_ChangeNumOpenSlots_Request*>(
               &_CParties_ChangeNumOpenSlots_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CParties_ChangeNumOpenSlots_Request& a, CParties_ChangeNumOpenSlots_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParties_ChangeNumOpenSlots_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParties_ChangeNumOpenSlots_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParties_ChangeNumOpenSlots_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParties_ChangeNumOpenSlots_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParties_ChangeNumOpenSlots_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParties_ChangeNumOpenSlots_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParties_ChangeNumOpenSlots_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParties_ChangeNumOpenSlots_Request";
  }
  protected:
  explicit CParties_ChangeNumOpenSlots_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeaconIdFieldNumber = 1,
    kNumOpenSlotsFieldNumber = 2,
  };
  // optional uint64 beacon_id = 1;
  bool has_beacon_id() const;
  private:
  bool _internal_has_beacon_id() const;
  public:
  void clear_beacon_id();
  uint64_t beacon_id() const;
  void set_beacon_id(uint64_t value);
  private:
  uint64_t _internal_beacon_id() const;
  void _internal_set_beacon_id(uint64_t value);
  public:

  // optional uint32 num_open_slots = 2;
  bool has_num_open_slots() const;
  private:
  bool _internal_has_num_open_slots() const;
  public:
  void clear_num_open_slots();
  uint32_t num_open_slots() const;
  void set_num_open_slots(uint32_t value);
  private:
  uint32_t _internal_num_open_slots() const;
  void _internal_set_num_open_slots(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParties_ChangeNumOpenSlots_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t beacon_id_;
  uint32_t num_open_slots_;
  friend struct ::TableStruct_steammessages_5fparties_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParties_ChangeNumOpenSlots_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParties_ChangeNumOpenSlots_Response) */ {
 public:
  inline CParties_ChangeNumOpenSlots_Response() : CParties_ChangeNumOpenSlots_Response(nullptr) {}
  ~CParties_ChangeNumOpenSlots_Response() override;
  explicit constexpr CParties_ChangeNumOpenSlots_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParties_ChangeNumOpenSlots_Response(const CParties_ChangeNumOpenSlots_Response& from);
  CParties_ChangeNumOpenSlots_Response(CParties_ChangeNumOpenSlots_Response&& from) noexcept
    : CParties_ChangeNumOpenSlots_Response() {
    *this = ::std::move(from);
  }

  inline CParties_ChangeNumOpenSlots_Response& operator=(const CParties_ChangeNumOpenSlots_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParties_ChangeNumOpenSlots_Response& operator=(CParties_ChangeNumOpenSlots_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParties_ChangeNumOpenSlots_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParties_ChangeNumOpenSlots_Response* internal_default_instance() {
    return reinterpret_cast<const CParties_ChangeNumOpenSlots_Response*>(
               &_CParties_ChangeNumOpenSlots_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CParties_ChangeNumOpenSlots_Response& a, CParties_ChangeNumOpenSlots_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParties_ChangeNumOpenSlots_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParties_ChangeNumOpenSlots_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParties_ChangeNumOpenSlots_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParties_ChangeNumOpenSlots_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParties_ChangeNumOpenSlots_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParties_ChangeNumOpenSlots_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParties_ChangeNumOpenSlots_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParties_ChangeNumOpenSlots_Response";
  }
  protected:
  explicit CParties_ChangeNumOpenSlots_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeaconIdFieldNumber = 1,
  };
  // optional uint64 beacon_id = 1;
  bool has_beacon_id() const;
  private:
  bool _internal_has_beacon_id() const;
  public:
  void clear_beacon_id();
  uint64_t beacon_id() const;
  void set_beacon_id(uint64_t value);
  private:
  uint64_t _internal_beacon_id() const;
  void _internal_set_beacon_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParties_ChangeNumOpenSlots_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t beacon_id_;
  friend struct ::TableStruct_steammessages_5fparties_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParties_DestroyBeacon_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParties_DestroyBeacon_Request) */ {
 public:
  inline CParties_DestroyBeacon_Request() : CParties_DestroyBeacon_Request(nullptr) {}
  ~CParties_DestroyBeacon_Request() override;
  explicit constexpr CParties_DestroyBeacon_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParties_DestroyBeacon_Request(const CParties_DestroyBeacon_Request& from);
  CParties_DestroyBeacon_Request(CParties_DestroyBeacon_Request&& from) noexcept
    : CParties_DestroyBeacon_Request() {
    *this = ::std::move(from);
  }

  inline CParties_DestroyBeacon_Request& operator=(const CParties_DestroyBeacon_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParties_DestroyBeacon_Request& operator=(CParties_DestroyBeacon_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParties_DestroyBeacon_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParties_DestroyBeacon_Request* internal_default_instance() {
    return reinterpret_cast<const CParties_DestroyBeacon_Request*>(
               &_CParties_DestroyBeacon_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CParties_DestroyBeacon_Request& a, CParties_DestroyBeacon_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CParties_DestroyBeacon_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParties_DestroyBeacon_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParties_DestroyBeacon_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParties_DestroyBeacon_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParties_DestroyBeacon_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParties_DestroyBeacon_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParties_DestroyBeacon_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParties_DestroyBeacon_Request";
  }
  protected:
  explicit CParties_DestroyBeacon_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeaconIdFieldNumber = 1,
  };
  // optional uint64 beacon_id = 1;
  bool has_beacon_id() const;
  private:
  bool _internal_has_beacon_id() const;
  public:
  void clear_beacon_id();
  uint64_t beacon_id() const;
  void set_beacon_id(uint64_t value);
  private:
  uint64_t _internal_beacon_id() const;
  void _internal_set_beacon_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParties_DestroyBeacon_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t beacon_id_;
  friend struct ::TableStruct_steammessages_5fparties_2esteamclient_2eproto;
};
// -------------------------------------------------------------------

class CParties_DestroyBeacon_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CParties_DestroyBeacon_Response) */ {
 public:
  inline CParties_DestroyBeacon_Response() : CParties_DestroyBeacon_Response(nullptr) {}
  ~CParties_DestroyBeacon_Response() override;
  explicit constexpr CParties_DestroyBeacon_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CParties_DestroyBeacon_Response(const CParties_DestroyBeacon_Response& from);
  CParties_DestroyBeacon_Response(CParties_DestroyBeacon_Response&& from) noexcept
    : CParties_DestroyBeacon_Response() {
    *this = ::std::move(from);
  }

  inline CParties_DestroyBeacon_Response& operator=(const CParties_DestroyBeacon_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CParties_DestroyBeacon_Response& operator=(CParties_DestroyBeacon_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CParties_DestroyBeacon_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CParties_DestroyBeacon_Response* internal_default_instance() {
    return reinterpret_cast<const CParties_DestroyBeacon_Response*>(
               &_CParties_DestroyBeacon_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CParties_DestroyBeacon_Response& a, CParties_DestroyBeacon_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CParties_DestroyBeacon_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CParties_DestroyBeacon_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CParties_DestroyBeacon_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CParties_DestroyBeacon_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CParties_DestroyBeacon_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CParties_DestroyBeacon_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CParties_DestroyBeacon_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CParties_DestroyBeacon_Response";
  }
  protected:
  explicit CParties_DestroyBeacon_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeaconIdFieldNumber = 1,
  };
  // optional uint64 beacon_id = 1;
  bool has_beacon_id() const;
  private:
  bool _internal_has_beacon_id() const;
  public:
  void clear_beacon_id();
  uint64_t beacon_id() const;
  void set_beacon_id(uint64_t value);
  private:
  uint64_t _internal_beacon_id() const;
  void _internal_set_beacon_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CParties_DestroyBeacon_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t beacon_id_;
  friend struct ::TableStruct_steammessages_5fparties_2esteamclient_2eproto;
};
// ===================================================================

class Parties_Stub;

class Parties : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Parties() {};
 public:
  virtual ~Parties();

  typedef Parties_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void JoinParty(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParties_JoinParty_Request* request,
                       ::CParties_JoinParty_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateBeacon(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParties_CreateBeacon_Request* request,
                       ::CParties_CreateBeacon_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void OnReservationCompleted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParties_OnReservationCompleted_Request* request,
                       ::CParties_OnReservationCompleted_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CancelReservation(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParties_CancelReservation_Request* request,
                       ::CParties_CancelReservation_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ChangeNumOpenSlots(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParties_ChangeNumOpenSlots_Request* request,
                       ::CParties_ChangeNumOpenSlots_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void DestroyBeacon(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParties_DestroyBeacon_Request* request,
                       ::CParties_DestroyBeacon_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Parties);
};

class Parties_Stub : public Parties {
 public:
  Parties_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Parties_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Parties_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Parties ------------------------------------------

  void JoinParty(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParties_JoinParty_Request* request,
                       ::CParties_JoinParty_Response* response,
                       ::google::protobuf::Closure* done);
  void CreateBeacon(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParties_CreateBeacon_Request* request,
                       ::CParties_CreateBeacon_Response* response,
                       ::google::protobuf::Closure* done);
  void OnReservationCompleted(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParties_OnReservationCompleted_Request* request,
                       ::CParties_OnReservationCompleted_Response* response,
                       ::google::protobuf::Closure* done);
  void CancelReservation(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParties_CancelReservation_Request* request,
                       ::CParties_CancelReservation_Response* response,
                       ::google::protobuf::Closure* done);
  void ChangeNumOpenSlots(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParties_ChangeNumOpenSlots_Request* request,
                       ::CParties_ChangeNumOpenSlots_Response* response,
                       ::google::protobuf::Closure* done);
  void DestroyBeacon(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::CParties_DestroyBeacon_Request* request,
                       ::CParties_DestroyBeacon_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Parties_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CParties_JoinParty_Request

// optional fixed64 steamid = 1;
inline bool CParties_JoinParty_Request::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParties_JoinParty_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CParties_JoinParty_Request::clear_steamid() {
  steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CParties_JoinParty_Request::_internal_steamid() const {
  return steamid_;
}
inline uint64_t CParties_JoinParty_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CParties_JoinParty_Request.steamid)
  return _internal_steamid();
}
inline void CParties_JoinParty_Request::_internal_set_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CParties_JoinParty_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CParties_JoinParty_Request.steamid)
}

// optional uint64 beacon_id = 2;
inline bool CParties_JoinParty_Request::_internal_has_beacon_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CParties_JoinParty_Request::has_beacon_id() const {
  return _internal_has_beacon_id();
}
inline void CParties_JoinParty_Request::clear_beacon_id() {
  beacon_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CParties_JoinParty_Request::_internal_beacon_id() const {
  return beacon_id_;
}
inline uint64_t CParties_JoinParty_Request::beacon_id() const {
  // @@protoc_insertion_point(field_get:CParties_JoinParty_Request.beacon_id)
  return _internal_beacon_id();
}
inline void CParties_JoinParty_Request::_internal_set_beacon_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  beacon_id_ = value;
}
inline void CParties_JoinParty_Request::set_beacon_id(uint64_t value) {
  _internal_set_beacon_id(value);
  // @@protoc_insertion_point(field_set:CParties_JoinParty_Request.beacon_id)
}

// -------------------------------------------------------------------

// CParties_JoinParty_Response

// optional uint64 beacon_id = 1;
inline bool CParties_JoinParty_Response::_internal_has_beacon_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CParties_JoinParty_Response::has_beacon_id() const {
  return _internal_has_beacon_id();
}
inline void CParties_JoinParty_Response::clear_beacon_id() {
  beacon_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CParties_JoinParty_Response::_internal_beacon_id() const {
  return beacon_id_;
}
inline uint64_t CParties_JoinParty_Response::beacon_id() const {
  // @@protoc_insertion_point(field_get:CParties_JoinParty_Response.beacon_id)
  return _internal_beacon_id();
}
inline void CParties_JoinParty_Response::_internal_set_beacon_id(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  beacon_id_ = value;
}
inline void CParties_JoinParty_Response::set_beacon_id(uint64_t value) {
  _internal_set_beacon_id(value);
  // @@protoc_insertion_point(field_set:CParties_JoinParty_Response.beacon_id)
}

// optional string connect_string = 2;
inline bool CParties_JoinParty_Response::_internal_has_connect_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParties_JoinParty_Response::has_connect_string() const {
  return _internal_has_connect_string();
}
inline void CParties_JoinParty_Response::clear_connect_string() {
  connect_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CParties_JoinParty_Response::connect_string() const {
  // @@protoc_insertion_point(field_get:CParties_JoinParty_Response.connect_string)
  return _internal_connect_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParties_JoinParty_Response::set_connect_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 connect_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParties_JoinParty_Response.connect_string)
}
inline std::string* CParties_JoinParty_Response::mutable_connect_string() {
  std::string* _s = _internal_mutable_connect_string();
  // @@protoc_insertion_point(field_mutable:CParties_JoinParty_Response.connect_string)
  return _s;
}
inline const std::string& CParties_JoinParty_Response::_internal_connect_string() const {
  return connect_string_.Get();
}
inline void CParties_JoinParty_Response::_internal_set_connect_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connect_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParties_JoinParty_Response::_internal_mutable_connect_string() {
  _has_bits_[0] |= 0x00000001u;
  return connect_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParties_JoinParty_Response::release_connect_string() {
  // @@protoc_insertion_point(field_release:CParties_JoinParty_Response.connect_string)
  if (!_internal_has_connect_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = connect_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connect_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connect_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParties_JoinParty_Response::set_allocated_connect_string(std::string* connect_string) {
  if (connect_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connect_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connect_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connect_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connect_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParties_JoinParty_Response.connect_string)
}

// -------------------------------------------------------------------

// CParties_BeaconLocation

// optional uint32 location_type = 1;
inline bool CParties_BeaconLocation::_internal_has_location_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CParties_BeaconLocation::has_location_type() const {
  return _internal_has_location_type();
}
inline void CParties_BeaconLocation::clear_location_type() {
  location_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CParties_BeaconLocation::_internal_location_type() const {
  return location_type_;
}
inline uint32_t CParties_BeaconLocation::location_type() const {
  // @@protoc_insertion_point(field_get:CParties_BeaconLocation.location_type)
  return _internal_location_type();
}
inline void CParties_BeaconLocation::_internal_set_location_type(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  location_type_ = value;
}
inline void CParties_BeaconLocation::set_location_type(uint32_t value) {
  _internal_set_location_type(value);
  // @@protoc_insertion_point(field_set:CParties_BeaconLocation.location_type)
}

// optional uint64 location_id = 2;
inline bool CParties_BeaconLocation::_internal_has_location_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParties_BeaconLocation::has_location_id() const {
  return _internal_has_location_id();
}
inline void CParties_BeaconLocation::clear_location_id() {
  location_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CParties_BeaconLocation::_internal_location_id() const {
  return location_id_;
}
inline uint64_t CParties_BeaconLocation::location_id() const {
  // @@protoc_insertion_point(field_get:CParties_BeaconLocation.location_id)
  return _internal_location_id();
}
inline void CParties_BeaconLocation::_internal_set_location_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  location_id_ = value;
}
inline void CParties_BeaconLocation::set_location_id(uint64_t value) {
  _internal_set_location_id(value);
  // @@protoc_insertion_point(field_set:CParties_BeaconLocation.location_id)
}

// -------------------------------------------------------------------

// CParties_CreateBeacon_Request

// optional uint32 appid = 1;
inline bool CParties_CreateBeacon_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CParties_CreateBeacon_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CParties_CreateBeacon_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CParties_CreateBeacon_Request::_internal_appid() const {
  return appid_;
}
inline uint32_t CParties_CreateBeacon_Request::appid() const {
  // @@protoc_insertion_point(field_get:CParties_CreateBeacon_Request.appid)
  return _internal_appid();
}
inline void CParties_CreateBeacon_Request::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CParties_CreateBeacon_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CParties_CreateBeacon_Request.appid)
}

// optional uint32 num_open_slots = 2;
inline bool CParties_CreateBeacon_Request::_internal_has_num_open_slots() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CParties_CreateBeacon_Request::has_num_open_slots() const {
  return _internal_has_num_open_slots();
}
inline void CParties_CreateBeacon_Request::clear_num_open_slots() {
  num_open_slots_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CParties_CreateBeacon_Request::_internal_num_open_slots() const {
  return num_open_slots_;
}
inline uint32_t CParties_CreateBeacon_Request::num_open_slots() const {
  // @@protoc_insertion_point(field_get:CParties_CreateBeacon_Request.num_open_slots)
  return _internal_num_open_slots();
}
inline void CParties_CreateBeacon_Request::_internal_set_num_open_slots(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  num_open_slots_ = value;
}
inline void CParties_CreateBeacon_Request::set_num_open_slots(uint32_t value) {
  _internal_set_num_open_slots(value);
  // @@protoc_insertion_point(field_set:CParties_CreateBeacon_Request.num_open_slots)
}

// repeated .CParties_BeaconLocation locations = 3;
inline int CParties_CreateBeacon_Request::_internal_locations_size() const {
  return locations_.size();
}
inline int CParties_CreateBeacon_Request::locations_size() const {
  return _internal_locations_size();
}
inline void CParties_CreateBeacon_Request::clear_locations() {
  locations_.Clear();
}
inline ::CParties_BeaconLocation* CParties_CreateBeacon_Request::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:CParties_CreateBeacon_Request.locations)
  return locations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CParties_BeaconLocation >*
CParties_CreateBeacon_Request::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:CParties_CreateBeacon_Request.locations)
  return &locations_;
}
inline const ::CParties_BeaconLocation& CParties_CreateBeacon_Request::_internal_locations(int index) const {
  return locations_.Get(index);
}
inline const ::CParties_BeaconLocation& CParties_CreateBeacon_Request::locations(int index) const {
  // @@protoc_insertion_point(field_get:CParties_CreateBeacon_Request.locations)
  return _internal_locations(index);
}
inline ::CParties_BeaconLocation* CParties_CreateBeacon_Request::_internal_add_locations() {
  return locations_.Add();
}
inline ::CParties_BeaconLocation* CParties_CreateBeacon_Request::add_locations() {
  ::CParties_BeaconLocation* _add = _internal_add_locations();
  // @@protoc_insertion_point(field_add:CParties_CreateBeacon_Request.locations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CParties_BeaconLocation >&
CParties_CreateBeacon_Request::locations() const {
  // @@protoc_insertion_point(field_list:CParties_CreateBeacon_Request.locations)
  return locations_;
}

// optional string connect_string = 4;
inline bool CParties_CreateBeacon_Request::_internal_has_connect_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParties_CreateBeacon_Request::has_connect_string() const {
  return _internal_has_connect_string();
}
inline void CParties_CreateBeacon_Request::clear_connect_string() {
  connect_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CParties_CreateBeacon_Request::connect_string() const {
  // @@protoc_insertion_point(field_get:CParties_CreateBeacon_Request.connect_string)
  return _internal_connect_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParties_CreateBeacon_Request::set_connect_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 connect_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParties_CreateBeacon_Request.connect_string)
}
inline std::string* CParties_CreateBeacon_Request::mutable_connect_string() {
  std::string* _s = _internal_mutable_connect_string();
  // @@protoc_insertion_point(field_mutable:CParties_CreateBeacon_Request.connect_string)
  return _s;
}
inline const std::string& CParties_CreateBeacon_Request::_internal_connect_string() const {
  return connect_string_.Get();
}
inline void CParties_CreateBeacon_Request::_internal_set_connect_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connect_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParties_CreateBeacon_Request::_internal_mutable_connect_string() {
  _has_bits_[0] |= 0x00000001u;
  return connect_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParties_CreateBeacon_Request::release_connect_string() {
  // @@protoc_insertion_point(field_release:CParties_CreateBeacon_Request.connect_string)
  if (!_internal_has_connect_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = connect_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connect_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connect_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParties_CreateBeacon_Request::set_allocated_connect_string(std::string* connect_string) {
  if (connect_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connect_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connect_string,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (connect_string_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    connect_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParties_CreateBeacon_Request.connect_string)
}

// optional string metadata = 5;
inline bool CParties_CreateBeacon_Request::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CParties_CreateBeacon_Request::has_metadata() const {
  return _internal_has_metadata();
}
inline void CParties_CreateBeacon_Request::clear_metadata() {
  metadata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CParties_CreateBeacon_Request::metadata() const {
  // @@protoc_insertion_point(field_get:CParties_CreateBeacon_Request.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CParties_CreateBeacon_Request::set_metadata(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CParties_CreateBeacon_Request.metadata)
}
inline std::string* CParties_CreateBeacon_Request::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:CParties_CreateBeacon_Request.metadata)
  return _s;
}
inline const std::string& CParties_CreateBeacon_Request::_internal_metadata() const {
  return metadata_.Get();
}
inline void CParties_CreateBeacon_Request::_internal_set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CParties_CreateBeacon_Request::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CParties_CreateBeacon_Request::release_metadata() {
  // @@protoc_insertion_point(field_release:CParties_CreateBeacon_Request.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CParties_CreateBeacon_Request::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (metadata_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CParties_CreateBeacon_Request.metadata)
}

// -------------------------------------------------------------------

// CParties_CreateBeacon_Response

// optional uint64 beacon_id = 1;
inline bool CParties_CreateBeacon_Response::_internal_has_beacon_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParties_CreateBeacon_Response::has_beacon_id() const {
  return _internal_has_beacon_id();
}
inline void CParties_CreateBeacon_Response::clear_beacon_id() {
  beacon_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CParties_CreateBeacon_Response::_internal_beacon_id() const {
  return beacon_id_;
}
inline uint64_t CParties_CreateBeacon_Response::beacon_id() const {
  // @@protoc_insertion_point(field_get:CParties_CreateBeacon_Response.beacon_id)
  return _internal_beacon_id();
}
inline void CParties_CreateBeacon_Response::_internal_set_beacon_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  beacon_id_ = value;
}
inline void CParties_CreateBeacon_Response::set_beacon_id(uint64_t value) {
  _internal_set_beacon_id(value);
  // @@protoc_insertion_point(field_set:CParties_CreateBeacon_Response.beacon_id)
}

// -------------------------------------------------------------------

// CParties_OnReservationCompleted_Request

// optional uint64 beacon_id = 1;
inline bool CParties_OnReservationCompleted_Request::_internal_has_beacon_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParties_OnReservationCompleted_Request::has_beacon_id() const {
  return _internal_has_beacon_id();
}
inline void CParties_OnReservationCompleted_Request::clear_beacon_id() {
  beacon_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CParties_OnReservationCompleted_Request::_internal_beacon_id() const {
  return beacon_id_;
}
inline uint64_t CParties_OnReservationCompleted_Request::beacon_id() const {
  // @@protoc_insertion_point(field_get:CParties_OnReservationCompleted_Request.beacon_id)
  return _internal_beacon_id();
}
inline void CParties_OnReservationCompleted_Request::_internal_set_beacon_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  beacon_id_ = value;
}
inline void CParties_OnReservationCompleted_Request::set_beacon_id(uint64_t value) {
  _internal_set_beacon_id(value);
  // @@protoc_insertion_point(field_set:CParties_OnReservationCompleted_Request.beacon_id)
}

// optional fixed64 user_steamid = 2;
inline bool CParties_OnReservationCompleted_Request::_internal_has_user_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CParties_OnReservationCompleted_Request::has_user_steamid() const {
  return _internal_has_user_steamid();
}
inline void CParties_OnReservationCompleted_Request::clear_user_steamid() {
  user_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CParties_OnReservationCompleted_Request::_internal_user_steamid() const {
  return user_steamid_;
}
inline uint64_t CParties_OnReservationCompleted_Request::user_steamid() const {
  // @@protoc_insertion_point(field_get:CParties_OnReservationCompleted_Request.user_steamid)
  return _internal_user_steamid();
}
inline void CParties_OnReservationCompleted_Request::_internal_set_user_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  user_steamid_ = value;
}
inline void CParties_OnReservationCompleted_Request::set_user_steamid(uint64_t value) {
  _internal_set_user_steamid(value);
  // @@protoc_insertion_point(field_set:CParties_OnReservationCompleted_Request.user_steamid)
}

// -------------------------------------------------------------------

// CParties_OnReservationCompleted_Response

// optional uint64 beacon_id = 1;
inline bool CParties_OnReservationCompleted_Response::_internal_has_beacon_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParties_OnReservationCompleted_Response::has_beacon_id() const {
  return _internal_has_beacon_id();
}
inline void CParties_OnReservationCompleted_Response::clear_beacon_id() {
  beacon_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CParties_OnReservationCompleted_Response::_internal_beacon_id() const {
  return beacon_id_;
}
inline uint64_t CParties_OnReservationCompleted_Response::beacon_id() const {
  // @@protoc_insertion_point(field_get:CParties_OnReservationCompleted_Response.beacon_id)
  return _internal_beacon_id();
}
inline void CParties_OnReservationCompleted_Response::_internal_set_beacon_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  beacon_id_ = value;
}
inline void CParties_OnReservationCompleted_Response::set_beacon_id(uint64_t value) {
  _internal_set_beacon_id(value);
  // @@protoc_insertion_point(field_set:CParties_OnReservationCompleted_Response.beacon_id)
}

// -------------------------------------------------------------------

// CParties_CancelReservation_Request

// optional uint64 beacon_id = 1;
inline bool CParties_CancelReservation_Request::_internal_has_beacon_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParties_CancelReservation_Request::has_beacon_id() const {
  return _internal_has_beacon_id();
}
inline void CParties_CancelReservation_Request::clear_beacon_id() {
  beacon_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CParties_CancelReservation_Request::_internal_beacon_id() const {
  return beacon_id_;
}
inline uint64_t CParties_CancelReservation_Request::beacon_id() const {
  // @@protoc_insertion_point(field_get:CParties_CancelReservation_Request.beacon_id)
  return _internal_beacon_id();
}
inline void CParties_CancelReservation_Request::_internal_set_beacon_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  beacon_id_ = value;
}
inline void CParties_CancelReservation_Request::set_beacon_id(uint64_t value) {
  _internal_set_beacon_id(value);
  // @@protoc_insertion_point(field_set:CParties_CancelReservation_Request.beacon_id)
}

// optional fixed64 user_steamid = 2;
inline bool CParties_CancelReservation_Request::_internal_has_user_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CParties_CancelReservation_Request::has_user_steamid() const {
  return _internal_has_user_steamid();
}
inline void CParties_CancelReservation_Request::clear_user_steamid() {
  user_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CParties_CancelReservation_Request::_internal_user_steamid() const {
  return user_steamid_;
}
inline uint64_t CParties_CancelReservation_Request::user_steamid() const {
  // @@protoc_insertion_point(field_get:CParties_CancelReservation_Request.user_steamid)
  return _internal_user_steamid();
}
inline void CParties_CancelReservation_Request::_internal_set_user_steamid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  user_steamid_ = value;
}
inline void CParties_CancelReservation_Request::set_user_steamid(uint64_t value) {
  _internal_set_user_steamid(value);
  // @@protoc_insertion_point(field_set:CParties_CancelReservation_Request.user_steamid)
}

// -------------------------------------------------------------------

// CParties_CancelReservation_Response

// optional uint64 beacon_id = 1;
inline bool CParties_CancelReservation_Response::_internal_has_beacon_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParties_CancelReservation_Response::has_beacon_id() const {
  return _internal_has_beacon_id();
}
inline void CParties_CancelReservation_Response::clear_beacon_id() {
  beacon_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CParties_CancelReservation_Response::_internal_beacon_id() const {
  return beacon_id_;
}
inline uint64_t CParties_CancelReservation_Response::beacon_id() const {
  // @@protoc_insertion_point(field_get:CParties_CancelReservation_Response.beacon_id)
  return _internal_beacon_id();
}
inline void CParties_CancelReservation_Response::_internal_set_beacon_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  beacon_id_ = value;
}
inline void CParties_CancelReservation_Response::set_beacon_id(uint64_t value) {
  _internal_set_beacon_id(value);
  // @@protoc_insertion_point(field_set:CParties_CancelReservation_Response.beacon_id)
}

// -------------------------------------------------------------------

// CParties_ChangeNumOpenSlots_Request

// optional uint64 beacon_id = 1;
inline bool CParties_ChangeNumOpenSlots_Request::_internal_has_beacon_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParties_ChangeNumOpenSlots_Request::has_beacon_id() const {
  return _internal_has_beacon_id();
}
inline void CParties_ChangeNumOpenSlots_Request::clear_beacon_id() {
  beacon_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CParties_ChangeNumOpenSlots_Request::_internal_beacon_id() const {
  return beacon_id_;
}
inline uint64_t CParties_ChangeNumOpenSlots_Request::beacon_id() const {
  // @@protoc_insertion_point(field_get:CParties_ChangeNumOpenSlots_Request.beacon_id)
  return _internal_beacon_id();
}
inline void CParties_ChangeNumOpenSlots_Request::_internal_set_beacon_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  beacon_id_ = value;
}
inline void CParties_ChangeNumOpenSlots_Request::set_beacon_id(uint64_t value) {
  _internal_set_beacon_id(value);
  // @@protoc_insertion_point(field_set:CParties_ChangeNumOpenSlots_Request.beacon_id)
}

// optional uint32 num_open_slots = 2;
inline bool CParties_ChangeNumOpenSlots_Request::_internal_has_num_open_slots() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CParties_ChangeNumOpenSlots_Request::has_num_open_slots() const {
  return _internal_has_num_open_slots();
}
inline void CParties_ChangeNumOpenSlots_Request::clear_num_open_slots() {
  num_open_slots_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CParties_ChangeNumOpenSlots_Request::_internal_num_open_slots() const {
  return num_open_slots_;
}
inline uint32_t CParties_ChangeNumOpenSlots_Request::num_open_slots() const {
  // @@protoc_insertion_point(field_get:CParties_ChangeNumOpenSlots_Request.num_open_slots)
  return _internal_num_open_slots();
}
inline void CParties_ChangeNumOpenSlots_Request::_internal_set_num_open_slots(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_open_slots_ = value;
}
inline void CParties_ChangeNumOpenSlots_Request::set_num_open_slots(uint32_t value) {
  _internal_set_num_open_slots(value);
  // @@protoc_insertion_point(field_set:CParties_ChangeNumOpenSlots_Request.num_open_slots)
}

// -------------------------------------------------------------------

// CParties_ChangeNumOpenSlots_Response

// optional uint64 beacon_id = 1;
inline bool CParties_ChangeNumOpenSlots_Response::_internal_has_beacon_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParties_ChangeNumOpenSlots_Response::has_beacon_id() const {
  return _internal_has_beacon_id();
}
inline void CParties_ChangeNumOpenSlots_Response::clear_beacon_id() {
  beacon_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CParties_ChangeNumOpenSlots_Response::_internal_beacon_id() const {
  return beacon_id_;
}
inline uint64_t CParties_ChangeNumOpenSlots_Response::beacon_id() const {
  // @@protoc_insertion_point(field_get:CParties_ChangeNumOpenSlots_Response.beacon_id)
  return _internal_beacon_id();
}
inline void CParties_ChangeNumOpenSlots_Response::_internal_set_beacon_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  beacon_id_ = value;
}
inline void CParties_ChangeNumOpenSlots_Response::set_beacon_id(uint64_t value) {
  _internal_set_beacon_id(value);
  // @@protoc_insertion_point(field_set:CParties_ChangeNumOpenSlots_Response.beacon_id)
}

// -------------------------------------------------------------------

// CParties_DestroyBeacon_Request

// optional uint64 beacon_id = 1;
inline bool CParties_DestroyBeacon_Request::_internal_has_beacon_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParties_DestroyBeacon_Request::has_beacon_id() const {
  return _internal_has_beacon_id();
}
inline void CParties_DestroyBeacon_Request::clear_beacon_id() {
  beacon_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CParties_DestroyBeacon_Request::_internal_beacon_id() const {
  return beacon_id_;
}
inline uint64_t CParties_DestroyBeacon_Request::beacon_id() const {
  // @@protoc_insertion_point(field_get:CParties_DestroyBeacon_Request.beacon_id)
  return _internal_beacon_id();
}
inline void CParties_DestroyBeacon_Request::_internal_set_beacon_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  beacon_id_ = value;
}
inline void CParties_DestroyBeacon_Request::set_beacon_id(uint64_t value) {
  _internal_set_beacon_id(value);
  // @@protoc_insertion_point(field_set:CParties_DestroyBeacon_Request.beacon_id)
}

// -------------------------------------------------------------------

// CParties_DestroyBeacon_Response

// optional uint64 beacon_id = 1;
inline bool CParties_DestroyBeacon_Response::_internal_has_beacon_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CParties_DestroyBeacon_Response::has_beacon_id() const {
  return _internal_has_beacon_id();
}
inline void CParties_DestroyBeacon_Response::clear_beacon_id() {
  beacon_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CParties_DestroyBeacon_Response::_internal_beacon_id() const {
  return beacon_id_;
}
inline uint64_t CParties_DestroyBeacon_Response::beacon_id() const {
  // @@protoc_insertion_point(field_get:CParties_DestroyBeacon_Response.beacon_id)
  return _internal_beacon_id();
}
inline void CParties_DestroyBeacon_Response::_internal_set_beacon_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  beacon_id_ = value;
}
inline void CParties_DestroyBeacon_Response::set_beacon_id(uint64_t value) {
  _internal_set_beacon_id(value);
  // @@protoc_insertion_point(field_set:CParties_DestroyBeacon_Response.beacon_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fparties_2esteamclient_2eproto
