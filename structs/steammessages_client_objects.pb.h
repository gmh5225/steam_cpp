// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_client_objects.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclient_5fobjects_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclient_5fobjects_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fclient_5fobjects_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fclient_5fobjects_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[66]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclient_5fobjects_2eproto;
class CCloud_PendingRemoteOperation;
struct CCloud_PendingRemoteOperationDefaultTypeInternal;
extern CCloud_PendingRemoteOperationDefaultTypeInternal _CCloud_PendingRemoteOperation_default_instance_;
class CMsgAchievementChange;
struct CMsgAchievementChangeDefaultTypeInternal;
extern CMsgAchievementChangeDefaultTypeInternal _CMsgAchievementChange_default_instance_;
class CMsgBluetoothDevicesData;
struct CMsgBluetoothDevicesDataDefaultTypeInternal;
extern CMsgBluetoothDevicesDataDefaultTypeInternal _CMsgBluetoothDevicesData_default_instance_;
class CMsgBluetoothDevicesData_Adapter;
struct CMsgBluetoothDevicesData_AdapterDefaultTypeInternal;
extern CMsgBluetoothDevicesData_AdapterDefaultTypeInternal _CMsgBluetoothDevicesData_Adapter_default_instance_;
class CMsgBluetoothDevicesData_Device;
struct CMsgBluetoothDevicesData_DeviceDefaultTypeInternal;
extern CMsgBluetoothDevicesData_DeviceDefaultTypeInternal _CMsgBluetoothDevicesData_Device_default_instance_;
class CMsgBluetoothDevicesData_Manager;
struct CMsgBluetoothDevicesData_ManagerDefaultTypeInternal;
extern CMsgBluetoothDevicesData_ManagerDefaultTypeInternal _CMsgBluetoothDevicesData_Manager_default_instance_;
class CMsgCellList;
struct CMsgCellListDefaultTypeInternal;
extern CMsgCellListDefaultTypeInternal _CMsgCellList_default_instance_;
class CMsgCellList_Cell;
struct CMsgCellList_CellDefaultTypeInternal;
extern CMsgCellList_CellDefaultTypeInternal _CMsgCellList_Cell_default_instance_;
class CMsgCloudPendingRemoteOperations;
struct CMsgCloudPendingRemoteOperationsDefaultTypeInternal;
extern CMsgCloudPendingRemoteOperationsDefaultTypeInternal _CMsgCloudPendingRemoteOperations_default_instance_;
class CMsgGenerateSystemReportReply;
struct CMsgGenerateSystemReportReplyDefaultTypeInternal;
extern CMsgGenerateSystemReportReplyDefaultTypeInternal _CMsgGenerateSystemReportReply_default_instance_;
class CMsgMonitorInfo;
struct CMsgMonitorInfoDefaultTypeInternal;
extern CMsgMonitorInfoDefaultTypeInternal _CMsgMonitorInfo_default_instance_;
class CMsgMonitorInfo_MonitorInfo;
struct CMsgMonitorInfo_MonitorInfoDefaultTypeInternal;
extern CMsgMonitorInfo_MonitorInfoDefaultTypeInternal _CMsgMonitorInfo_MonitorInfo_default_instance_;
class CMsgNetworkDeviceConnect;
struct CMsgNetworkDeviceConnectDefaultTypeInternal;
extern CMsgNetworkDeviceConnectDefaultTypeInternal _CMsgNetworkDeviceConnect_default_instance_;
class CMsgNetworkDeviceConnect_Credentials;
struct CMsgNetworkDeviceConnect_CredentialsDefaultTypeInternal;
extern CMsgNetworkDeviceConnect_CredentialsDefaultTypeInternal _CMsgNetworkDeviceConnect_Credentials_default_instance_;
class CMsgNetworkDeviceConnect_CustomAP;
struct CMsgNetworkDeviceConnect_CustomAPDefaultTypeInternal;
extern CMsgNetworkDeviceConnect_CustomAPDefaultTypeInternal _CMsgNetworkDeviceConnect_CustomAP_default_instance_;
class CMsgNetworkDeviceConnect_KnownAP;
struct CMsgNetworkDeviceConnect_KnownAPDefaultTypeInternal;
extern CMsgNetworkDeviceConnect_KnownAPDefaultTypeInternal _CMsgNetworkDeviceConnect_KnownAP_default_instance_;
class CMsgNetworkDeviceIP4Address;
struct CMsgNetworkDeviceIP4AddressDefaultTypeInternal;
extern CMsgNetworkDeviceIP4AddressDefaultTypeInternal _CMsgNetworkDeviceIP4Address_default_instance_;
class CMsgNetworkDeviceIP4Config;
struct CMsgNetworkDeviceIP4ConfigDefaultTypeInternal;
extern CMsgNetworkDeviceIP4ConfigDefaultTypeInternal _CMsgNetworkDeviceIP4Config_default_instance_;
class CMsgNetworkDeviceIP6Address;
struct CMsgNetworkDeviceIP6AddressDefaultTypeInternal;
extern CMsgNetworkDeviceIP6AddressDefaultTypeInternal _CMsgNetworkDeviceIP6Address_default_instance_;
class CMsgNetworkDeviceIP6Config;
struct CMsgNetworkDeviceIP6ConfigDefaultTypeInternal;
extern CMsgNetworkDeviceIP6ConfigDefaultTypeInternal _CMsgNetworkDeviceIP6Config_default_instance_;
class CMsgNetworkDevicesData;
struct CMsgNetworkDevicesDataDefaultTypeInternal;
extern CMsgNetworkDevicesDataDefaultTypeInternal _CMsgNetworkDevicesData_default_instance_;
class CMsgNetworkDevicesData_Device;
struct CMsgNetworkDevicesData_DeviceDefaultTypeInternal;
extern CMsgNetworkDevicesData_DeviceDefaultTypeInternal _CMsgNetworkDevicesData_Device_default_instance_;
class CMsgNetworkDevicesData_Device_Wired;
struct CMsgNetworkDevicesData_Device_WiredDefaultTypeInternal;
extern CMsgNetworkDevicesData_Device_WiredDefaultTypeInternal _CMsgNetworkDevicesData_Device_Wired_default_instance_;
class CMsgNetworkDevicesData_Device_Wireless;
struct CMsgNetworkDevicesData_Device_WirelessDefaultTypeInternal;
extern CMsgNetworkDevicesData_Device_WirelessDefaultTypeInternal _CMsgNetworkDevicesData_Device_Wireless_default_instance_;
class CMsgNetworkDevicesData_Device_Wireless_AP;
struct CMsgNetworkDevicesData_Device_Wireless_APDefaultTypeInternal;
extern CMsgNetworkDevicesData_Device_Wireless_APDefaultTypeInternal _CMsgNetworkDevicesData_Device_Wireless_AP_default_instance_;
class CMsgSelectOSBranchParams;
struct CMsgSelectOSBranchParamsDefaultTypeInternal;
extern CMsgSelectOSBranchParamsDefaultTypeInternal _CMsgSelectOSBranchParams_default_instance_;
class CMsgShortcutAppIds;
struct CMsgShortcutAppIdsDefaultTypeInternal;
extern CMsgShortcutAppIdsDefaultTypeInternal _CMsgShortcutAppIds_default_instance_;
class CMsgShortcutInfo;
struct CMsgShortcutInfoDefaultTypeInternal;
extern CMsgShortcutInfoDefaultTypeInternal _CMsgShortcutInfo_default_instance_;
class CMsgStorageDevicesData;
struct CMsgStorageDevicesDataDefaultTypeInternal;
extern CMsgStorageDevicesDataDefaultTypeInternal _CMsgStorageDevicesData_default_instance_;
class CMsgStorageDevicesData_BlockDevice;
struct CMsgStorageDevicesData_BlockDeviceDefaultTypeInternal;
extern CMsgStorageDevicesData_BlockDeviceDefaultTypeInternal _CMsgStorageDevicesData_BlockDevice_default_instance_;
class CMsgStorageDevicesData_Drive;
struct CMsgStorageDevicesData_DriveDefaultTypeInternal;
extern CMsgStorageDevicesData_DriveDefaultTypeInternal _CMsgStorageDevicesData_Drive_default_instance_;
class CMsgSystemAudioManagerDevice;
struct CMsgSystemAudioManagerDeviceDefaultTypeInternal;
extern CMsgSystemAudioManagerDeviceDefaultTypeInternal _CMsgSystemAudioManagerDevice_default_instance_;
class CMsgSystemAudioManagerLink;
struct CMsgSystemAudioManagerLinkDefaultTypeInternal;
extern CMsgSystemAudioManagerLinkDefaultTypeInternal _CMsgSystemAudioManagerLink_default_instance_;
class CMsgSystemAudioManagerNode;
struct CMsgSystemAudioManagerNodeDefaultTypeInternal;
extern CMsgSystemAudioManagerNodeDefaultTypeInternal _CMsgSystemAudioManagerNode_default_instance_;
class CMsgSystemAudioManagerObject;
struct CMsgSystemAudioManagerObjectDefaultTypeInternal;
extern CMsgSystemAudioManagerObjectDefaultTypeInternal _CMsgSystemAudioManagerObject_default_instance_;
class CMsgSystemAudioManagerPort;
struct CMsgSystemAudioManagerPortDefaultTypeInternal;
extern CMsgSystemAudioManagerPortDefaultTypeInternal _CMsgSystemAudioManagerPort_default_instance_;
class CMsgSystemAudioManagerState;
struct CMsgSystemAudioManagerStateDefaultTypeInternal;
extern CMsgSystemAudioManagerStateDefaultTypeInternal _CMsgSystemAudioManagerState_default_instance_;
class CMsgSystemAudioManagerStateHW;
struct CMsgSystemAudioManagerStateHWDefaultTypeInternal;
extern CMsgSystemAudioManagerStateHWDefaultTypeInternal _CMsgSystemAudioManagerStateHW_default_instance_;
class CMsgSystemAudioManagerUpdateSomething;
struct CMsgSystemAudioManagerUpdateSomethingDefaultTypeInternal;
extern CMsgSystemAudioManagerUpdateSomethingDefaultTypeInternal _CMsgSystemAudioManagerUpdateSomething_default_instance_;
class CMsgSystemAudioVolume;
struct CMsgSystemAudioVolumeDefaultTypeInternal;
extern CMsgSystemAudioVolumeDefaultTypeInternal _CMsgSystemAudioVolume_default_instance_;
class CMsgSystemAudioVolume_ChannelEntry;
struct CMsgSystemAudioVolume_ChannelEntryDefaultTypeInternal;
extern CMsgSystemAudioVolume_ChannelEntryDefaultTypeInternal _CMsgSystemAudioVolume_ChannelEntry_default_instance_;
class CMsgSystemDisplay;
struct CMsgSystemDisplayDefaultTypeInternal;
extern CMsgSystemDisplayDefaultTypeInternal _CMsgSystemDisplay_default_instance_;
class CMsgSystemDisplayManagerSetMode;
struct CMsgSystemDisplayManagerSetModeDefaultTypeInternal;
extern CMsgSystemDisplayManagerSetModeDefaultTypeInternal _CMsgSystemDisplayManagerSetMode_default_instance_;
class CMsgSystemDisplayManagerState;
struct CMsgSystemDisplayManagerStateDefaultTypeInternal;
extern CMsgSystemDisplayManagerStateDefaultTypeInternal _CMsgSystemDisplayManagerState_default_instance_;
class CMsgSystemDisplayMode;
struct CMsgSystemDisplayModeDefaultTypeInternal;
extern CMsgSystemDisplayModeDefaultTypeInternal _CMsgSystemDisplayMode_default_instance_;
class CMsgSystemDockState;
struct CMsgSystemDockStateDefaultTypeInternal;
extern CMsgSystemDockStateDefaultTypeInternal _CMsgSystemDockState_default_instance_;
class CMsgSystemDockUpdateFirmware;
struct CMsgSystemDockUpdateFirmwareDefaultTypeInternal;
extern CMsgSystemDockUpdateFirmwareDefaultTypeInternal _CMsgSystemDockUpdateFirmware_default_instance_;
class CMsgSystemDockUpdateState;
struct CMsgSystemDockUpdateStateDefaultTypeInternal;
extern CMsgSystemDockUpdateStateDefaultTypeInternal _CMsgSystemDockUpdateState_default_instance_;
class CMsgSystemManagerSettings;
struct CMsgSystemManagerSettingsDefaultTypeInternal;
extern CMsgSystemManagerSettingsDefaultTypeInternal _CMsgSystemManagerSettings_default_instance_;
class CMsgSystemPerfDiagnosticEntry;
struct CMsgSystemPerfDiagnosticEntryDefaultTypeInternal;
extern CMsgSystemPerfDiagnosticEntryDefaultTypeInternal _CMsgSystemPerfDiagnosticEntry_default_instance_;
class CMsgSystemPerfDiagnosticInfo;
struct CMsgSystemPerfDiagnosticInfoDefaultTypeInternal;
extern CMsgSystemPerfDiagnosticInfoDefaultTypeInternal _CMsgSystemPerfDiagnosticInfo_default_instance_;
class CMsgSystemPerfLimits;
struct CMsgSystemPerfLimitsDefaultTypeInternal;
extern CMsgSystemPerfLimitsDefaultTypeInternal _CMsgSystemPerfLimits_default_instance_;
class CMsgSystemPerfNetworkInterface;
struct CMsgSystemPerfNetworkInterfaceDefaultTypeInternal;
extern CMsgSystemPerfNetworkInterfaceDefaultTypeInternal _CMsgSystemPerfNetworkInterface_default_instance_;
class CMsgSystemPerfSettings;
struct CMsgSystemPerfSettingsDefaultTypeInternal;
extern CMsgSystemPerfSettingsDefaultTypeInternal _CMsgSystemPerfSettings_default_instance_;
class CMsgSystemPerfSettingsGlobal;
struct CMsgSystemPerfSettingsGlobalDefaultTypeInternal;
extern CMsgSystemPerfSettingsGlobalDefaultTypeInternal _CMsgSystemPerfSettingsGlobal_default_instance_;
class CMsgSystemPerfSettingsPerApp;
struct CMsgSystemPerfSettingsPerAppDefaultTypeInternal;
extern CMsgSystemPerfSettingsPerAppDefaultTypeInternal _CMsgSystemPerfSettingsPerApp_default_instance_;
class CMsgSystemPerfSettingsV1;
struct CMsgSystemPerfSettingsV1DefaultTypeInternal;
extern CMsgSystemPerfSettingsV1DefaultTypeInternal _CMsgSystemPerfSettingsV1_default_instance_;
class CMsgSystemPerfState;
struct CMsgSystemPerfStateDefaultTypeInternal;
extern CMsgSystemPerfStateDefaultTypeInternal _CMsgSystemPerfState_default_instance_;
class CMsgSystemPerfUpdateSettings;
struct CMsgSystemPerfUpdateSettingsDefaultTypeInternal;
extern CMsgSystemPerfUpdateSettingsDefaultTypeInternal _CMsgSystemPerfUpdateSettings_default_instance_;
class CMsgSystemUpdateApplyParams;
struct CMsgSystemUpdateApplyParamsDefaultTypeInternal;
extern CMsgSystemUpdateApplyParamsDefaultTypeInternal _CMsgSystemUpdateApplyParams_default_instance_;
class CMsgSystemUpdateApplyResult;
struct CMsgSystemUpdateApplyResultDefaultTypeInternal;
extern CMsgSystemUpdateApplyResultDefaultTypeInternal _CMsgSystemUpdateApplyResult_default_instance_;
class CMsgSystemUpdateCheckResult;
struct CMsgSystemUpdateCheckResultDefaultTypeInternal;
extern CMsgSystemUpdateCheckResultDefaultTypeInternal _CMsgSystemUpdateCheckResult_default_instance_;
class CMsgSystemUpdateProgress;
struct CMsgSystemUpdateProgressDefaultTypeInternal;
extern CMsgSystemUpdateProgressDefaultTypeInternal _CMsgSystemUpdateProgress_default_instance_;
class CMsgSystemUpdateState;
struct CMsgSystemUpdateStateDefaultTypeInternal;
extern CMsgSystemUpdateStateDefaultTypeInternal _CMsgSystemUpdateState_default_instance_;
class CMsgWebUITransportInfo;
struct CMsgWebUITransportInfoDefaultTypeInternal;
extern CMsgWebUITransportInfoDefaultTypeInternal _CMsgWebUITransportInfo_default_instance_;
class SteamMessagesClientIClientForcedEnumDependencies;
struct SteamMessagesClientIClientForcedEnumDependenciesDefaultTypeInternal;
extern SteamMessagesClientIClientForcedEnumDependenciesDefaultTypeInternal _SteamMessagesClientIClientForcedEnumDependencies_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CCloud_PendingRemoteOperation* Arena::CreateMaybeMessage<::CCloud_PendingRemoteOperation>(Arena*);
template<> ::CMsgAchievementChange* Arena::CreateMaybeMessage<::CMsgAchievementChange>(Arena*);
template<> ::CMsgBluetoothDevicesData* Arena::CreateMaybeMessage<::CMsgBluetoothDevicesData>(Arena*);
template<> ::CMsgBluetoothDevicesData_Adapter* Arena::CreateMaybeMessage<::CMsgBluetoothDevicesData_Adapter>(Arena*);
template<> ::CMsgBluetoothDevicesData_Device* Arena::CreateMaybeMessage<::CMsgBluetoothDevicesData_Device>(Arena*);
template<> ::CMsgBluetoothDevicesData_Manager* Arena::CreateMaybeMessage<::CMsgBluetoothDevicesData_Manager>(Arena*);
template<> ::CMsgCellList* Arena::CreateMaybeMessage<::CMsgCellList>(Arena*);
template<> ::CMsgCellList_Cell* Arena::CreateMaybeMessage<::CMsgCellList_Cell>(Arena*);
template<> ::CMsgCloudPendingRemoteOperations* Arena::CreateMaybeMessage<::CMsgCloudPendingRemoteOperations>(Arena*);
template<> ::CMsgGenerateSystemReportReply* Arena::CreateMaybeMessage<::CMsgGenerateSystemReportReply>(Arena*);
template<> ::CMsgMonitorInfo* Arena::CreateMaybeMessage<::CMsgMonitorInfo>(Arena*);
template<> ::CMsgMonitorInfo_MonitorInfo* Arena::CreateMaybeMessage<::CMsgMonitorInfo_MonitorInfo>(Arena*);
template<> ::CMsgNetworkDeviceConnect* Arena::CreateMaybeMessage<::CMsgNetworkDeviceConnect>(Arena*);
template<> ::CMsgNetworkDeviceConnect_Credentials* Arena::CreateMaybeMessage<::CMsgNetworkDeviceConnect_Credentials>(Arena*);
template<> ::CMsgNetworkDeviceConnect_CustomAP* Arena::CreateMaybeMessage<::CMsgNetworkDeviceConnect_CustomAP>(Arena*);
template<> ::CMsgNetworkDeviceConnect_KnownAP* Arena::CreateMaybeMessage<::CMsgNetworkDeviceConnect_KnownAP>(Arena*);
template<> ::CMsgNetworkDeviceIP4Address* Arena::CreateMaybeMessage<::CMsgNetworkDeviceIP4Address>(Arena*);
template<> ::CMsgNetworkDeviceIP4Config* Arena::CreateMaybeMessage<::CMsgNetworkDeviceIP4Config>(Arena*);
template<> ::CMsgNetworkDeviceIP6Address* Arena::CreateMaybeMessage<::CMsgNetworkDeviceIP6Address>(Arena*);
template<> ::CMsgNetworkDeviceIP6Config* Arena::CreateMaybeMessage<::CMsgNetworkDeviceIP6Config>(Arena*);
template<> ::CMsgNetworkDevicesData* Arena::CreateMaybeMessage<::CMsgNetworkDevicesData>(Arena*);
template<> ::CMsgNetworkDevicesData_Device* Arena::CreateMaybeMessage<::CMsgNetworkDevicesData_Device>(Arena*);
template<> ::CMsgNetworkDevicesData_Device_Wired* Arena::CreateMaybeMessage<::CMsgNetworkDevicesData_Device_Wired>(Arena*);
template<> ::CMsgNetworkDevicesData_Device_Wireless* Arena::CreateMaybeMessage<::CMsgNetworkDevicesData_Device_Wireless>(Arena*);
template<> ::CMsgNetworkDevicesData_Device_Wireless_AP* Arena::CreateMaybeMessage<::CMsgNetworkDevicesData_Device_Wireless_AP>(Arena*);
template<> ::CMsgSelectOSBranchParams* Arena::CreateMaybeMessage<::CMsgSelectOSBranchParams>(Arena*);
template<> ::CMsgShortcutAppIds* Arena::CreateMaybeMessage<::CMsgShortcutAppIds>(Arena*);
template<> ::CMsgShortcutInfo* Arena::CreateMaybeMessage<::CMsgShortcutInfo>(Arena*);
template<> ::CMsgStorageDevicesData* Arena::CreateMaybeMessage<::CMsgStorageDevicesData>(Arena*);
template<> ::CMsgStorageDevicesData_BlockDevice* Arena::CreateMaybeMessage<::CMsgStorageDevicesData_BlockDevice>(Arena*);
template<> ::CMsgStorageDevicesData_Drive* Arena::CreateMaybeMessage<::CMsgStorageDevicesData_Drive>(Arena*);
template<> ::CMsgSystemAudioManagerDevice* Arena::CreateMaybeMessage<::CMsgSystemAudioManagerDevice>(Arena*);
template<> ::CMsgSystemAudioManagerLink* Arena::CreateMaybeMessage<::CMsgSystemAudioManagerLink>(Arena*);
template<> ::CMsgSystemAudioManagerNode* Arena::CreateMaybeMessage<::CMsgSystemAudioManagerNode>(Arena*);
template<> ::CMsgSystemAudioManagerObject* Arena::CreateMaybeMessage<::CMsgSystemAudioManagerObject>(Arena*);
template<> ::CMsgSystemAudioManagerPort* Arena::CreateMaybeMessage<::CMsgSystemAudioManagerPort>(Arena*);
template<> ::CMsgSystemAudioManagerState* Arena::CreateMaybeMessage<::CMsgSystemAudioManagerState>(Arena*);
template<> ::CMsgSystemAudioManagerStateHW* Arena::CreateMaybeMessage<::CMsgSystemAudioManagerStateHW>(Arena*);
template<> ::CMsgSystemAudioManagerUpdateSomething* Arena::CreateMaybeMessage<::CMsgSystemAudioManagerUpdateSomething>(Arena*);
template<> ::CMsgSystemAudioVolume* Arena::CreateMaybeMessage<::CMsgSystemAudioVolume>(Arena*);
template<> ::CMsgSystemAudioVolume_ChannelEntry* Arena::CreateMaybeMessage<::CMsgSystemAudioVolume_ChannelEntry>(Arena*);
template<> ::CMsgSystemDisplay* Arena::CreateMaybeMessage<::CMsgSystemDisplay>(Arena*);
template<> ::CMsgSystemDisplayManagerSetMode* Arena::CreateMaybeMessage<::CMsgSystemDisplayManagerSetMode>(Arena*);
template<> ::CMsgSystemDisplayManagerState* Arena::CreateMaybeMessage<::CMsgSystemDisplayManagerState>(Arena*);
template<> ::CMsgSystemDisplayMode* Arena::CreateMaybeMessage<::CMsgSystemDisplayMode>(Arena*);
template<> ::CMsgSystemDockState* Arena::CreateMaybeMessage<::CMsgSystemDockState>(Arena*);
template<> ::CMsgSystemDockUpdateFirmware* Arena::CreateMaybeMessage<::CMsgSystemDockUpdateFirmware>(Arena*);
template<> ::CMsgSystemDockUpdateState* Arena::CreateMaybeMessage<::CMsgSystemDockUpdateState>(Arena*);
template<> ::CMsgSystemManagerSettings* Arena::CreateMaybeMessage<::CMsgSystemManagerSettings>(Arena*);
template<> ::CMsgSystemPerfDiagnosticEntry* Arena::CreateMaybeMessage<::CMsgSystemPerfDiagnosticEntry>(Arena*);
template<> ::CMsgSystemPerfDiagnosticInfo* Arena::CreateMaybeMessage<::CMsgSystemPerfDiagnosticInfo>(Arena*);
template<> ::CMsgSystemPerfLimits* Arena::CreateMaybeMessage<::CMsgSystemPerfLimits>(Arena*);
template<> ::CMsgSystemPerfNetworkInterface* Arena::CreateMaybeMessage<::CMsgSystemPerfNetworkInterface>(Arena*);
template<> ::CMsgSystemPerfSettings* Arena::CreateMaybeMessage<::CMsgSystemPerfSettings>(Arena*);
template<> ::CMsgSystemPerfSettingsGlobal* Arena::CreateMaybeMessage<::CMsgSystemPerfSettingsGlobal>(Arena*);
template<> ::CMsgSystemPerfSettingsPerApp* Arena::CreateMaybeMessage<::CMsgSystemPerfSettingsPerApp>(Arena*);
template<> ::CMsgSystemPerfSettingsV1* Arena::CreateMaybeMessage<::CMsgSystemPerfSettingsV1>(Arena*);
template<> ::CMsgSystemPerfState* Arena::CreateMaybeMessage<::CMsgSystemPerfState>(Arena*);
template<> ::CMsgSystemPerfUpdateSettings* Arena::CreateMaybeMessage<::CMsgSystemPerfUpdateSettings>(Arena*);
template<> ::CMsgSystemUpdateApplyParams* Arena::CreateMaybeMessage<::CMsgSystemUpdateApplyParams>(Arena*);
template<> ::CMsgSystemUpdateApplyResult* Arena::CreateMaybeMessage<::CMsgSystemUpdateApplyResult>(Arena*);
template<> ::CMsgSystemUpdateCheckResult* Arena::CreateMaybeMessage<::CMsgSystemUpdateCheckResult>(Arena*);
template<> ::CMsgSystemUpdateProgress* Arena::CreateMaybeMessage<::CMsgSystemUpdateProgress>(Arena*);
template<> ::CMsgSystemUpdateState* Arena::CreateMaybeMessage<::CMsgSystemUpdateState>(Arena*);
template<> ::CMsgWebUITransportInfo* Arena::CreateMaybeMessage<::CMsgWebUITransportInfo>(Arena*);
template<> ::SteamMessagesClientIClientForcedEnumDependencies* Arena::CreateMaybeMessage<::SteamMessagesClientIClientForcedEnumDependencies>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ECloudPendingRemoteOperation : int {
  k_ECloudPendingRemoteOperationNone = 0,
  k_ECloudPendingRemoteOperationAppSessionActive = 1,
  k_ECloudPendingRemoteOperationUploadInProgress = 2,
  k_ECloudPendingRemoteOperationUploadPending = 3,
  k_ECloudPendingRemoteOperationAppSessionSuspended = 4
};
bool ECloudPendingRemoteOperation_IsValid(int value);
constexpr ECloudPendingRemoteOperation ECloudPendingRemoteOperation_MIN = k_ECloudPendingRemoteOperationNone;
constexpr ECloudPendingRemoteOperation ECloudPendingRemoteOperation_MAX = k_ECloudPendingRemoteOperationAppSessionSuspended;
constexpr int ECloudPendingRemoteOperation_ARRAYSIZE = ECloudPendingRemoteOperation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECloudPendingRemoteOperation_descriptor();
template<typename T>
inline const std::string& ECloudPendingRemoteOperation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECloudPendingRemoteOperation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECloudPendingRemoteOperation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECloudPendingRemoteOperation_descriptor(), enum_t_value);
}
inline bool ECloudPendingRemoteOperation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECloudPendingRemoteOperation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECloudPendingRemoteOperation>(
    ECloudPendingRemoteOperation_descriptor(), name, value);
}
enum ESteamDeckKeyboardLayout : int {
  k_ESteamDeckKeyboardLayout_QWERTY = 0,
  k_ESteamDeckKeyboardLayout_Bulgarian = 1,
  k_ESteamDeckKeyboardLayout_Chinese_Simplified = 2,
  k_ESteamDeckKeyboardLayout_Chinese_Traditional = 3,
  k_ESteamDeckKeyboardLayout_Czech = 4,
  k_ESteamDeckKeyboardLayout_Danish = 5,
  k_ESteamDeckKeyboardLayout_Finnish = 6,
  k_ESteamDeckKeyboardLayout_French = 7,
  k_ESteamDeckKeyboardLayout_German = 8,
  k_ESteamDeckKeyboardLayout_Greek = 9,
  k_ESteamDeckKeyboardLayout_Hungarian = 10,
  k_ESteamDeckKeyboardLayout_Italian = 11,
  k_ESteamDeckKeyboardLayout_Japanese = 12,
  k_ESteamDeckKeyboardLayout_Korean = 13,
  k_ESteamDeckKeyboardLayout_Norwegian = 14,
  k_ESteamDeckKeyboardLayout_Polish = 15,
  k_ESteamDeckKeyboardLayout_Portuguese = 16,
  k_ESteamDeckKeyboardLayout_Romanian = 17,
  k_ESteamDeckKeyboardLayout_Russian = 18,
  k_ESteamDeckKeyboardLayout_Spanish = 19,
  k_ESteamDeckKeyboardLayout_Swedish = 20,
  k_ESteamDeckKeyboardLayout_Thai = 21,
  k_ESteamDeckKeyboardLayout_Turkish_F = 22,
  k_ESteamDeckKeyboardLayout_Turkish_Q = 23,
  k_ESteamDeckKeyboardLayout_Ukrainian = 24,
  k_ESteamDeckKeyboardLayout_Vietnamese = 25,
  k_ESteamDeckKeyboardLayout_QWERTY_International = 26,
  k_ESteamDeckKeyboardLayout_Dvorak = 27,
  k_ESteamDeckKeyboardLayout_Colemak = 28,
  k_ESteamDeckKeyboardLayout_Bulgarian_Phonetic_Traditional = 29,
  k_ESteamDeckKeyboardLayout_Bulgarian_Phonetic = 30,
  k_ESteamDeckKeyboardLayout_Chinese_Traditional_Bopomofo = 31,
  k_ESteamDeckKeyboardLayout_Chinese_Traditional_Cangjie = 32,
  k_ESteamDeckKeyboardLayout_Japanese_Kana = 33,
  k_ESteamDeckKeyboardLayout_Chinese_Traditional_Quick = 34
};
bool ESteamDeckKeyboardLayout_IsValid(int value);
constexpr ESteamDeckKeyboardLayout ESteamDeckKeyboardLayout_MIN = k_ESteamDeckKeyboardLayout_QWERTY;
constexpr ESteamDeckKeyboardLayout ESteamDeckKeyboardLayout_MAX = k_ESteamDeckKeyboardLayout_Chinese_Traditional_Quick;
constexpr int ESteamDeckKeyboardLayout_ARRAYSIZE = ESteamDeckKeyboardLayout_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESteamDeckKeyboardLayout_descriptor();
template<typename T>
inline const std::string& ESteamDeckKeyboardLayout_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESteamDeckKeyboardLayout>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESteamDeckKeyboardLayout_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESteamDeckKeyboardLayout_descriptor(), enum_t_value);
}
inline bool ESteamDeckKeyboardLayout_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESteamDeckKeyboardLayout* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESteamDeckKeyboardLayout>(
    ESteamDeckKeyboardLayout_descriptor(), name, value);
}
// ===================================================================

class SteamMessagesClientIClientForcedEnumDependencies final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SteamMessagesClientIClientForcedEnumDependencies) */ {
 public:
  inline SteamMessagesClientIClientForcedEnumDependencies() : SteamMessagesClientIClientForcedEnumDependencies(nullptr) {}
  ~SteamMessagesClientIClientForcedEnumDependencies() override;
  explicit constexpr SteamMessagesClientIClientForcedEnumDependencies(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SteamMessagesClientIClientForcedEnumDependencies(const SteamMessagesClientIClientForcedEnumDependencies& from);
  SteamMessagesClientIClientForcedEnumDependencies(SteamMessagesClientIClientForcedEnumDependencies&& from) noexcept
    : SteamMessagesClientIClientForcedEnumDependencies() {
    *this = ::std::move(from);
  }

  inline SteamMessagesClientIClientForcedEnumDependencies& operator=(const SteamMessagesClientIClientForcedEnumDependencies& from) {
    CopyFrom(from);
    return *this;
  }
  inline SteamMessagesClientIClientForcedEnumDependencies& operator=(SteamMessagesClientIClientForcedEnumDependencies&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SteamMessagesClientIClientForcedEnumDependencies& default_instance() {
    return *internal_default_instance();
  }
  static inline const SteamMessagesClientIClientForcedEnumDependencies* internal_default_instance() {
    return reinterpret_cast<const SteamMessagesClientIClientForcedEnumDependencies*>(
               &_SteamMessagesClientIClientForcedEnumDependencies_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SteamMessagesClientIClientForcedEnumDependencies& a, SteamMessagesClientIClientForcedEnumDependencies& b) {
    a.Swap(&b);
  }
  inline void Swap(SteamMessagesClientIClientForcedEnumDependencies* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SteamMessagesClientIClientForcedEnumDependencies* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SteamMessagesClientIClientForcedEnumDependencies* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SteamMessagesClientIClientForcedEnumDependencies>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SteamMessagesClientIClientForcedEnumDependencies& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SteamMessagesClientIClientForcedEnumDependencies& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SteamMessagesClientIClientForcedEnumDependencies* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SteamMessagesClientIClientForcedEnumDependencies";
  }
  protected:
  explicit SteamMessagesClientIClientForcedEnumDependencies(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
    kCFieldNumber = 3,
    kDFieldNumber = 4,
  };
  // optional .EBluetoothDeviceType a = 1 [default = k_BluetoothDeviceType_Invalid];
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  ::EBluetoothDeviceType a() const;
  void set_a(::EBluetoothDeviceType value);
  private:
  ::EBluetoothDeviceType _internal_a() const;
  void _internal_set_a(::EBluetoothDeviceType value);
  public:

  // optional .EStorageBlockContentType b = 2 [default = k_EStorageBlockContentType_Invalid];
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  ::EStorageBlockContentType b() const;
  void set_b(::EStorageBlockContentType value);
  private:
  ::EStorageBlockContentType _internal_b() const;
  void _internal_set_b(::EStorageBlockContentType value);
  public:

  // optional .EStorageBlockFileSystemType c = 3 [default = k_EStorageBlockFileSystemType_Invalid];
  bool has_c() const;
  private:
  bool _internal_has_c() const;
  public:
  void clear_c();
  ::EStorageBlockFileSystemType c() const;
  void set_c(::EStorageBlockFileSystemType value);
  private:
  ::EStorageBlockFileSystemType _internal_c() const;
  void _internal_set_c(::EStorageBlockFileSystemType value);
  public:

  // optional .ESDCardFormatStage d = 4 [default = k_ESDCardFormatStage_Invalid];
  bool has_d() const;
  private:
  bool _internal_has_d() const;
  public:
  void clear_d();
  ::ESDCardFormatStage d() const;
  void set_d(::ESDCardFormatStage value);
  private:
  ::ESDCardFormatStage _internal_d() const;
  void _internal_set_d(::ESDCardFormatStage value);
  public:

  // @@protoc_insertion_point(class_scope:SteamMessagesClientIClientForcedEnumDependencies)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int a_;
  int b_;
  int c_;
  int d_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgNetworkDeviceIP4Address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNetworkDeviceIP4Address) */ {
 public:
  inline CMsgNetworkDeviceIP4Address() : CMsgNetworkDeviceIP4Address(nullptr) {}
  ~CMsgNetworkDeviceIP4Address() override;
  explicit constexpr CMsgNetworkDeviceIP4Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNetworkDeviceIP4Address(const CMsgNetworkDeviceIP4Address& from);
  CMsgNetworkDeviceIP4Address(CMsgNetworkDeviceIP4Address&& from) noexcept
    : CMsgNetworkDeviceIP4Address() {
    *this = ::std::move(from);
  }

  inline CMsgNetworkDeviceIP4Address& operator=(const CMsgNetworkDeviceIP4Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNetworkDeviceIP4Address& operator=(CMsgNetworkDeviceIP4Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNetworkDeviceIP4Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNetworkDeviceIP4Address* internal_default_instance() {
    return reinterpret_cast<const CMsgNetworkDeviceIP4Address*>(
               &_CMsgNetworkDeviceIP4Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgNetworkDeviceIP4Address& a, CMsgNetworkDeviceIP4Address& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNetworkDeviceIP4Address* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNetworkDeviceIP4Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNetworkDeviceIP4Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNetworkDeviceIP4Address>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNetworkDeviceIP4Address& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNetworkDeviceIP4Address& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNetworkDeviceIP4Address* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNetworkDeviceIP4Address";
  }
  protected:
  explicit CMsgNetworkDeviceIP4Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kNetmaskFieldNumber = 2,
  };
  // optional int32 ip = 1 [default = 0];
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  int32_t ip() const;
  void set_ip(int32_t value);
  private:
  int32_t _internal_ip() const;
  void _internal_set_ip(int32_t value);
  public:

  // optional int32 netmask = 2;
  bool has_netmask() const;
  private:
  bool _internal_has_netmask() const;
  public:
  void clear_netmask();
  int32_t netmask() const;
  void set_netmask(int32_t value);
  private:
  int32_t _internal_netmask() const;
  void _internal_set_netmask(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNetworkDeviceIP4Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ip_;
  int32_t netmask_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgNetworkDeviceIP4Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNetworkDeviceIP4Config) */ {
 public:
  inline CMsgNetworkDeviceIP4Config() : CMsgNetworkDeviceIP4Config(nullptr) {}
  ~CMsgNetworkDeviceIP4Config() override;
  explicit constexpr CMsgNetworkDeviceIP4Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNetworkDeviceIP4Config(const CMsgNetworkDeviceIP4Config& from);
  CMsgNetworkDeviceIP4Config(CMsgNetworkDeviceIP4Config&& from) noexcept
    : CMsgNetworkDeviceIP4Config() {
    *this = ::std::move(from);
  }

  inline CMsgNetworkDeviceIP4Config& operator=(const CMsgNetworkDeviceIP4Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNetworkDeviceIP4Config& operator=(CMsgNetworkDeviceIP4Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNetworkDeviceIP4Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNetworkDeviceIP4Config* internal_default_instance() {
    return reinterpret_cast<const CMsgNetworkDeviceIP4Config*>(
               &_CMsgNetworkDeviceIP4Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgNetworkDeviceIP4Config& a, CMsgNetworkDeviceIP4Config& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNetworkDeviceIP4Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNetworkDeviceIP4Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNetworkDeviceIP4Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNetworkDeviceIP4Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNetworkDeviceIP4Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNetworkDeviceIP4Config& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNetworkDeviceIP4Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNetworkDeviceIP4Config";
  }
  protected:
  explicit CMsgNetworkDeviceIP4Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
    kDnsIpFieldNumber = 2,
    kGatewayIpFieldNumber = 3,
    kIsDhcpEnabledFieldNumber = 4,
    kIsDefaultRouteFieldNumber = 5,
    kIsEnabledFieldNumber = 6,
  };
  // repeated .CMsgNetworkDeviceIP4Address addresses = 1;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  ::CMsgNetworkDeviceIP4Address* mutable_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDeviceIP4Address >*
      mutable_addresses();
  private:
  const ::CMsgNetworkDeviceIP4Address& _internal_addresses(int index) const;
  ::CMsgNetworkDeviceIP4Address* _internal_add_addresses();
  public:
  const ::CMsgNetworkDeviceIP4Address& addresses(int index) const;
  ::CMsgNetworkDeviceIP4Address* add_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDeviceIP4Address >&
      addresses() const;

  // repeated int32 dns_ip = 2;
  int dns_ip_size() const;
  private:
  int _internal_dns_ip_size() const;
  public:
  void clear_dns_ip();
  private:
  int32_t _internal_dns_ip(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_dns_ip() const;
  void _internal_add_dns_ip(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_dns_ip();
  public:
  int32_t dns_ip(int index) const;
  void set_dns_ip(int index, int32_t value);
  void add_dns_ip(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      dns_ip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_dns_ip();

  // optional int32 gateway_ip = 3;
  bool has_gateway_ip() const;
  private:
  bool _internal_has_gateway_ip() const;
  public:
  void clear_gateway_ip();
  int32_t gateway_ip() const;
  void set_gateway_ip(int32_t value);
  private:
  int32_t _internal_gateway_ip() const;
  void _internal_set_gateway_ip(int32_t value);
  public:

  // optional bool is_dhcp_enabled = 4;
  bool has_is_dhcp_enabled() const;
  private:
  bool _internal_has_is_dhcp_enabled() const;
  public:
  void clear_is_dhcp_enabled();
  bool is_dhcp_enabled() const;
  void set_is_dhcp_enabled(bool value);
  private:
  bool _internal_is_dhcp_enabled() const;
  void _internal_set_is_dhcp_enabled(bool value);
  public:

  // optional bool is_default_route = 5;
  bool has_is_default_route() const;
  private:
  bool _internal_has_is_default_route() const;
  public:
  void clear_is_default_route();
  bool is_default_route() const;
  void set_is_default_route(bool value);
  private:
  bool _internal_is_default_route() const;
  void _internal_set_is_default_route(bool value);
  public:

  // optional bool is_enabled = 6 [default = false];
  bool has_is_enabled() const;
  private:
  bool _internal_has_is_enabled() const;
  public:
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);
  private:
  bool _internal_is_enabled() const;
  void _internal_set_is_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNetworkDeviceIP4Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDeviceIP4Address > addresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > dns_ip_;
  int32_t gateway_ip_;
  bool is_dhcp_enabled_;
  bool is_default_route_;
  bool is_enabled_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgNetworkDeviceIP6Address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNetworkDeviceIP6Address) */ {
 public:
  inline CMsgNetworkDeviceIP6Address() : CMsgNetworkDeviceIP6Address(nullptr) {}
  ~CMsgNetworkDeviceIP6Address() override;
  explicit constexpr CMsgNetworkDeviceIP6Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNetworkDeviceIP6Address(const CMsgNetworkDeviceIP6Address& from);
  CMsgNetworkDeviceIP6Address(CMsgNetworkDeviceIP6Address&& from) noexcept
    : CMsgNetworkDeviceIP6Address() {
    *this = ::std::move(from);
  }

  inline CMsgNetworkDeviceIP6Address& operator=(const CMsgNetworkDeviceIP6Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNetworkDeviceIP6Address& operator=(CMsgNetworkDeviceIP6Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNetworkDeviceIP6Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNetworkDeviceIP6Address* internal_default_instance() {
    return reinterpret_cast<const CMsgNetworkDeviceIP6Address*>(
               &_CMsgNetworkDeviceIP6Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgNetworkDeviceIP6Address& a, CMsgNetworkDeviceIP6Address& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNetworkDeviceIP6Address* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNetworkDeviceIP6Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNetworkDeviceIP6Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNetworkDeviceIP6Address>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNetworkDeviceIP6Address& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNetworkDeviceIP6Address& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNetworkDeviceIP6Address* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNetworkDeviceIP6Address";
  }
  protected:
  explicit CMsgNetworkDeviceIP6Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
  };
  // optional string ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:CMsgNetworkDeviceIP6Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgNetworkDeviceIP6Config final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNetworkDeviceIP6Config) */ {
 public:
  inline CMsgNetworkDeviceIP6Config() : CMsgNetworkDeviceIP6Config(nullptr) {}
  ~CMsgNetworkDeviceIP6Config() override;
  explicit constexpr CMsgNetworkDeviceIP6Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNetworkDeviceIP6Config(const CMsgNetworkDeviceIP6Config& from);
  CMsgNetworkDeviceIP6Config(CMsgNetworkDeviceIP6Config&& from) noexcept
    : CMsgNetworkDeviceIP6Config() {
    *this = ::std::move(from);
  }

  inline CMsgNetworkDeviceIP6Config& operator=(const CMsgNetworkDeviceIP6Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNetworkDeviceIP6Config& operator=(CMsgNetworkDeviceIP6Config&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNetworkDeviceIP6Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNetworkDeviceIP6Config* internal_default_instance() {
    return reinterpret_cast<const CMsgNetworkDeviceIP6Config*>(
               &_CMsgNetworkDeviceIP6Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgNetworkDeviceIP6Config& a, CMsgNetworkDeviceIP6Config& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNetworkDeviceIP6Config* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNetworkDeviceIP6Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNetworkDeviceIP6Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNetworkDeviceIP6Config>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNetworkDeviceIP6Config& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNetworkDeviceIP6Config& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNetworkDeviceIP6Config* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNetworkDeviceIP6Config";
  }
  protected:
  explicit CMsgNetworkDeviceIP6Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
    kDnsIpFieldNumber = 2,
    kGatewayIpFieldNumber = 3,
    kIsDhcpEnabledFieldNumber = 4,
    kIsDefaultRouteFieldNumber = 5,
    kIsEnabledFieldNumber = 6,
  };
  // repeated .CMsgNetworkDeviceIP6Address addresses = 1;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  ::CMsgNetworkDeviceIP6Address* mutable_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDeviceIP6Address >*
      mutable_addresses();
  private:
  const ::CMsgNetworkDeviceIP6Address& _internal_addresses(int index) const;
  ::CMsgNetworkDeviceIP6Address* _internal_add_addresses();
  public:
  const ::CMsgNetworkDeviceIP6Address& addresses(int index) const;
  ::CMsgNetworkDeviceIP6Address* add_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDeviceIP6Address >&
      addresses() const;

  // repeated string dns_ip = 2;
  int dns_ip_size() const;
  private:
  int _internal_dns_ip_size() const;
  public:
  void clear_dns_ip();
  const std::string& dns_ip(int index) const;
  std::string* mutable_dns_ip(int index);
  void set_dns_ip(int index, const std::string& value);
  void set_dns_ip(int index, std::string&& value);
  void set_dns_ip(int index, const char* value);
  void set_dns_ip(int index, const char* value, size_t size);
  std::string* add_dns_ip();
  void add_dns_ip(const std::string& value);
  void add_dns_ip(std::string&& value);
  void add_dns_ip(const char* value);
  void add_dns_ip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dns_ip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dns_ip();
  private:
  const std::string& _internal_dns_ip(int index) const;
  std::string* _internal_add_dns_ip();
  public:

  // optional string gateway_ip = 3;
  bool has_gateway_ip() const;
  private:
  bool _internal_has_gateway_ip() const;
  public:
  void clear_gateway_ip();
  const std::string& gateway_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gateway_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gateway_ip();
  PROTOBUF_NODISCARD std::string* release_gateway_ip();
  void set_allocated_gateway_ip(std::string* gateway_ip);
  private:
  const std::string& _internal_gateway_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gateway_ip(const std::string& value);
  std::string* _internal_mutable_gateway_ip();
  public:

  // optional bool is_dhcp_enabled = 4;
  bool has_is_dhcp_enabled() const;
  private:
  bool _internal_has_is_dhcp_enabled() const;
  public:
  void clear_is_dhcp_enabled();
  bool is_dhcp_enabled() const;
  void set_is_dhcp_enabled(bool value);
  private:
  bool _internal_is_dhcp_enabled() const;
  void _internal_set_is_dhcp_enabled(bool value);
  public:

  // optional bool is_default_route = 5;
  bool has_is_default_route() const;
  private:
  bool _internal_has_is_default_route() const;
  public:
  void clear_is_default_route();
  bool is_default_route() const;
  void set_is_default_route(bool value);
  private:
  bool _internal_is_default_route() const;
  void _internal_set_is_default_route(bool value);
  public:

  // optional bool is_enabled = 6 [default = false];
  bool has_is_enabled() const;
  private:
  bool _internal_has_is_enabled() const;
  public:
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);
  private:
  bool _internal_is_enabled() const;
  void _internal_set_is_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNetworkDeviceIP6Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDeviceIP6Address > addresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dns_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gateway_ip_;
  bool is_dhcp_enabled_;
  bool is_default_route_;
  bool is_enabled_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgNetworkDevicesData_Device_Wired final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNetworkDevicesData.Device.Wired) */ {
 public:
  inline CMsgNetworkDevicesData_Device_Wired() : CMsgNetworkDevicesData_Device_Wired(nullptr) {}
  ~CMsgNetworkDevicesData_Device_Wired() override;
  explicit constexpr CMsgNetworkDevicesData_Device_Wired(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNetworkDevicesData_Device_Wired(const CMsgNetworkDevicesData_Device_Wired& from);
  CMsgNetworkDevicesData_Device_Wired(CMsgNetworkDevicesData_Device_Wired&& from) noexcept
    : CMsgNetworkDevicesData_Device_Wired() {
    *this = ::std::move(from);
  }

  inline CMsgNetworkDevicesData_Device_Wired& operator=(const CMsgNetworkDevicesData_Device_Wired& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNetworkDevicesData_Device_Wired& operator=(CMsgNetworkDevicesData_Device_Wired&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNetworkDevicesData_Device_Wired& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNetworkDevicesData_Device_Wired* internal_default_instance() {
    return reinterpret_cast<const CMsgNetworkDevicesData_Device_Wired*>(
               &_CMsgNetworkDevicesData_Device_Wired_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgNetworkDevicesData_Device_Wired& a, CMsgNetworkDevicesData_Device_Wired& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNetworkDevicesData_Device_Wired* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNetworkDevicesData_Device_Wired* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNetworkDevicesData_Device_Wired* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNetworkDevicesData_Device_Wired>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNetworkDevicesData_Device_Wired& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNetworkDevicesData_Device_Wired& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNetworkDevicesData_Device_Wired* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNetworkDevicesData.Device.Wired";
  }
  protected:
  explicit CMsgNetworkDevicesData_Device_Wired(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendlyNameFieldNumber = 3,
    kIsCablePresentFieldNumber = 1,
    kSpeedMbitFieldNumber = 2,
  };
  // optional string friendly_name = 3;
  bool has_friendly_name() const;
  private:
  bool _internal_has_friendly_name() const;
  public:
  void clear_friendly_name();
  const std::string& friendly_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friendly_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friendly_name();
  PROTOBUF_NODISCARD std::string* release_friendly_name();
  void set_allocated_friendly_name(std::string* friendly_name);
  private:
  const std::string& _internal_friendly_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendly_name(const std::string& value);
  std::string* _internal_mutable_friendly_name();
  public:

  // optional bool is_cable_present = 1 [default = false];
  bool has_is_cable_present() const;
  private:
  bool _internal_has_is_cable_present() const;
  public:
  void clear_is_cable_present();
  bool is_cable_present() const;
  void set_is_cable_present(bool value);
  private:
  bool _internal_is_cable_present() const;
  void _internal_set_is_cable_present(bool value);
  public:

  // optional uint32 speed_mbit = 2;
  bool has_speed_mbit() const;
  private:
  bool _internal_has_speed_mbit() const;
  public:
  void clear_speed_mbit();
  uint32_t speed_mbit() const;
  void set_speed_mbit(uint32_t value);
  private:
  uint32_t _internal_speed_mbit() const;
  void _internal_set_speed_mbit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNetworkDevicesData.Device.Wired)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendly_name_;
  bool is_cable_present_;
  uint32_t speed_mbit_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgNetworkDevicesData_Device_Wireless_AP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNetworkDevicesData.Device.Wireless.AP) */ {
 public:
  inline CMsgNetworkDevicesData_Device_Wireless_AP() : CMsgNetworkDevicesData_Device_Wireless_AP(nullptr) {}
  ~CMsgNetworkDevicesData_Device_Wireless_AP() override;
  explicit constexpr CMsgNetworkDevicesData_Device_Wireless_AP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNetworkDevicesData_Device_Wireless_AP(const CMsgNetworkDevicesData_Device_Wireless_AP& from);
  CMsgNetworkDevicesData_Device_Wireless_AP(CMsgNetworkDevicesData_Device_Wireless_AP&& from) noexcept
    : CMsgNetworkDevicesData_Device_Wireless_AP() {
    *this = ::std::move(from);
  }

  inline CMsgNetworkDevicesData_Device_Wireless_AP& operator=(const CMsgNetworkDevicesData_Device_Wireless_AP& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNetworkDevicesData_Device_Wireless_AP& operator=(CMsgNetworkDevicesData_Device_Wireless_AP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNetworkDevicesData_Device_Wireless_AP& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNetworkDevicesData_Device_Wireless_AP* internal_default_instance() {
    return reinterpret_cast<const CMsgNetworkDevicesData_Device_Wireless_AP*>(
               &_CMsgNetworkDevicesData_Device_Wireless_AP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgNetworkDevicesData_Device_Wireless_AP& a, CMsgNetworkDevicesData_Device_Wireless_AP& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNetworkDevicesData_Device_Wireless_AP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNetworkDevicesData_Device_Wireless_AP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNetworkDevicesData_Device_Wireless_AP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNetworkDevicesData_Device_Wireless_AP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNetworkDevicesData_Device_Wireless_AP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNetworkDevicesData_Device_Wireless_AP& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNetworkDevicesData_Device_Wireless_AP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNetworkDevicesData.Device.Wireless.AP";
  }
  protected:
  explicit CMsgNetworkDevicesData_Device_Wireless_AP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 3,
    kUserNameFieldNumber = 7,
    kPasswordFieldNumber = 8,
    kIdFieldNumber = 1,
    kEstrengthFieldNumber = 2,
    kIsActiveFieldNumber = 4,
    kIsAutoconnectFieldNumber = 5,
    kEsecurityFieldNumber = 6,
    kStrengthRawFieldNumber = 9,
  };
  // optional string ssid = 3;
  bool has_ssid() const;
  private:
  bool _internal_has_ssid() const;
  public:
  void clear_ssid();
  const std::string& ssid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ssid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ssid();
  PROTOBUF_NODISCARD std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // optional string user_name = 7;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // optional string password = 8;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional uint32 id = 1 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional int32 estrength = 2;
  bool has_estrength() const;
  private:
  bool _internal_has_estrength() const;
  public:
  void clear_estrength();
  int32_t estrength() const;
  void set_estrength(int32_t value);
  private:
  int32_t _internal_estrength() const;
  void _internal_set_estrength(int32_t value);
  public:

  // optional bool is_active = 4;
  bool has_is_active() const;
  private:
  bool _internal_has_is_active() const;
  public:
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // optional bool is_autoconnect = 5;
  bool has_is_autoconnect() const;
  private:
  bool _internal_has_is_autoconnect() const;
  public:
  void clear_is_autoconnect();
  bool is_autoconnect() const;
  void set_is_autoconnect(bool value);
  private:
  bool _internal_is_autoconnect() const;
  void _internal_set_is_autoconnect(bool value);
  public:

  // optional int32 esecurity = 6;
  bool has_esecurity() const;
  private:
  bool _internal_has_esecurity() const;
  public:
  void clear_esecurity();
  int32_t esecurity() const;
  void set_esecurity(int32_t value);
  private:
  int32_t _internal_esecurity() const;
  void _internal_set_esecurity(int32_t value);
  public:

  // optional int32 strength_raw = 9;
  bool has_strength_raw() const;
  private:
  bool _internal_has_strength_raw() const;
  public:
  void clear_strength_raw();
  int32_t strength_raw() const;
  void set_strength_raw(int32_t value);
  private:
  int32_t _internal_strength_raw() const;
  void _internal_set_strength_raw(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNetworkDevicesData.Device.Wireless.AP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  uint32_t id_;
  int32_t estrength_;
  bool is_active_;
  bool is_autoconnect_;
  int32_t esecurity_;
  int32_t strength_raw_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgNetworkDevicesData_Device_Wireless final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNetworkDevicesData.Device.Wireless) */ {
 public:
  inline CMsgNetworkDevicesData_Device_Wireless() : CMsgNetworkDevicesData_Device_Wireless(nullptr) {}
  ~CMsgNetworkDevicesData_Device_Wireless() override;
  explicit constexpr CMsgNetworkDevicesData_Device_Wireless(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNetworkDevicesData_Device_Wireless(const CMsgNetworkDevicesData_Device_Wireless& from);
  CMsgNetworkDevicesData_Device_Wireless(CMsgNetworkDevicesData_Device_Wireless&& from) noexcept
    : CMsgNetworkDevicesData_Device_Wireless() {
    *this = ::std::move(from);
  }

  inline CMsgNetworkDevicesData_Device_Wireless& operator=(const CMsgNetworkDevicesData_Device_Wireless& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNetworkDevicesData_Device_Wireless& operator=(CMsgNetworkDevicesData_Device_Wireless&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNetworkDevicesData_Device_Wireless& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNetworkDevicesData_Device_Wireless* internal_default_instance() {
    return reinterpret_cast<const CMsgNetworkDevicesData_Device_Wireless*>(
               &_CMsgNetworkDevicesData_Device_Wireless_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgNetworkDevicesData_Device_Wireless& a, CMsgNetworkDevicesData_Device_Wireless& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNetworkDevicesData_Device_Wireless* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNetworkDevicesData_Device_Wireless* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNetworkDevicesData_Device_Wireless* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNetworkDevicesData_Device_Wireless>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNetworkDevicesData_Device_Wireless& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNetworkDevicesData_Device_Wireless& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNetworkDevicesData_Device_Wireless* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNetworkDevicesData.Device.Wireless";
  }
  protected:
  explicit CMsgNetworkDevicesData_Device_Wireless(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgNetworkDevicesData_Device_Wireless_AP AP;

  // accessors -------------------------------------------------------

  enum : int {
    kApsFieldNumber = 1,
    kEsecuritySupportedFieldNumber = 2,
  };
  // repeated .CMsgNetworkDevicesData.Device.Wireless.AP aps = 1;
  int aps_size() const;
  private:
  int _internal_aps_size() const;
  public:
  void clear_aps();
  ::CMsgNetworkDevicesData_Device_Wireless_AP* mutable_aps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDevicesData_Device_Wireless_AP >*
      mutable_aps();
  private:
  const ::CMsgNetworkDevicesData_Device_Wireless_AP& _internal_aps(int index) const;
  ::CMsgNetworkDevicesData_Device_Wireless_AP* _internal_add_aps();
  public:
  const ::CMsgNetworkDevicesData_Device_Wireless_AP& aps(int index) const;
  ::CMsgNetworkDevicesData_Device_Wireless_AP* add_aps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDevicesData_Device_Wireless_AP >&
      aps() const;

  // optional int32 esecurity_supported = 2;
  bool has_esecurity_supported() const;
  private:
  bool _internal_has_esecurity_supported() const;
  public:
  void clear_esecurity_supported();
  int32_t esecurity_supported() const;
  void set_esecurity_supported(int32_t value);
  private:
  int32_t _internal_esecurity_supported() const;
  void _internal_set_esecurity_supported(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNetworkDevicesData.Device.Wireless)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDevicesData_Device_Wireless_AP > aps_;
  int32_t esecurity_supported_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgNetworkDevicesData_Device final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNetworkDevicesData.Device) */ {
 public:
  inline CMsgNetworkDevicesData_Device() : CMsgNetworkDevicesData_Device(nullptr) {}
  ~CMsgNetworkDevicesData_Device() override;
  explicit constexpr CMsgNetworkDevicesData_Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNetworkDevicesData_Device(const CMsgNetworkDevicesData_Device& from);
  CMsgNetworkDevicesData_Device(CMsgNetworkDevicesData_Device&& from) noexcept
    : CMsgNetworkDevicesData_Device() {
    *this = ::std::move(from);
  }

  inline CMsgNetworkDevicesData_Device& operator=(const CMsgNetworkDevicesData_Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNetworkDevicesData_Device& operator=(CMsgNetworkDevicesData_Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNetworkDevicesData_Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNetworkDevicesData_Device* internal_default_instance() {
    return reinterpret_cast<const CMsgNetworkDevicesData_Device*>(
               &_CMsgNetworkDevicesData_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgNetworkDevicesData_Device& a, CMsgNetworkDevicesData_Device& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNetworkDevicesData_Device* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNetworkDevicesData_Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNetworkDevicesData_Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNetworkDevicesData_Device>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNetworkDevicesData_Device& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNetworkDevicesData_Device& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNetworkDevicesData_Device* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNetworkDevicesData.Device";
  }
  protected:
  explicit CMsgNetworkDevicesData_Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgNetworkDevicesData_Device_Wired Wired;
  typedef CMsgNetworkDevicesData_Device_Wireless Wireless;

  // accessors -------------------------------------------------------

  enum : int {
    kMacFieldNumber = 4,
    kVendorFieldNumber = 5,
    kProductFieldNumber = 6,
    kIp4FieldNumber = 7,
    kIp6FieldNumber = 8,
    kWiredFieldNumber = 9,
    kWirelessFieldNumber = 10,
    kIdFieldNumber = 1,
    kEtypeFieldNumber = 2,
    kEstateFieldNumber = 3,
  };
  // optional string mac = 4;
  bool has_mac() const;
  private:
  bool _internal_has_mac() const;
  public:
  void clear_mac();
  const std::string& mac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac();
  PROTOBUF_NODISCARD std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // optional string vendor = 5;
  bool has_vendor() const;
  private:
  bool _internal_has_vendor() const;
  public:
  void clear_vendor();
  const std::string& vendor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vendor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vendor();
  PROTOBUF_NODISCARD std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // optional string product = 6;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const std::string& product() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product();
  PROTOBUF_NODISCARD std::string* release_product();
  void set_allocated_product(std::string* product);
  private:
  const std::string& _internal_product() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product(const std::string& value);
  std::string* _internal_mutable_product();
  public:

  // optional .CMsgNetworkDeviceIP4Config ip4 = 7;
  bool has_ip4() const;
  private:
  bool _internal_has_ip4() const;
  public:
  void clear_ip4();
  const ::CMsgNetworkDeviceIP4Config& ip4() const;
  PROTOBUF_NODISCARD ::CMsgNetworkDeviceIP4Config* release_ip4();
  ::CMsgNetworkDeviceIP4Config* mutable_ip4();
  void set_allocated_ip4(::CMsgNetworkDeviceIP4Config* ip4);
  private:
  const ::CMsgNetworkDeviceIP4Config& _internal_ip4() const;
  ::CMsgNetworkDeviceIP4Config* _internal_mutable_ip4();
  public:
  void unsafe_arena_set_allocated_ip4(
      ::CMsgNetworkDeviceIP4Config* ip4);
  ::CMsgNetworkDeviceIP4Config* unsafe_arena_release_ip4();

  // optional .CMsgNetworkDeviceIP6Config ip6 = 8;
  bool has_ip6() const;
  private:
  bool _internal_has_ip6() const;
  public:
  void clear_ip6();
  const ::CMsgNetworkDeviceIP6Config& ip6() const;
  PROTOBUF_NODISCARD ::CMsgNetworkDeviceIP6Config* release_ip6();
  ::CMsgNetworkDeviceIP6Config* mutable_ip6();
  void set_allocated_ip6(::CMsgNetworkDeviceIP6Config* ip6);
  private:
  const ::CMsgNetworkDeviceIP6Config& _internal_ip6() const;
  ::CMsgNetworkDeviceIP6Config* _internal_mutable_ip6();
  public:
  void unsafe_arena_set_allocated_ip6(
      ::CMsgNetworkDeviceIP6Config* ip6);
  ::CMsgNetworkDeviceIP6Config* unsafe_arena_release_ip6();

  // optional .CMsgNetworkDevicesData.Device.Wired wired = 9;
  bool has_wired() const;
  private:
  bool _internal_has_wired() const;
  public:
  void clear_wired();
  const ::CMsgNetworkDevicesData_Device_Wired& wired() const;
  PROTOBUF_NODISCARD ::CMsgNetworkDevicesData_Device_Wired* release_wired();
  ::CMsgNetworkDevicesData_Device_Wired* mutable_wired();
  void set_allocated_wired(::CMsgNetworkDevicesData_Device_Wired* wired);
  private:
  const ::CMsgNetworkDevicesData_Device_Wired& _internal_wired() const;
  ::CMsgNetworkDevicesData_Device_Wired* _internal_mutable_wired();
  public:
  void unsafe_arena_set_allocated_wired(
      ::CMsgNetworkDevicesData_Device_Wired* wired);
  ::CMsgNetworkDevicesData_Device_Wired* unsafe_arena_release_wired();

  // optional .CMsgNetworkDevicesData.Device.Wireless wireless = 10;
  bool has_wireless() const;
  private:
  bool _internal_has_wireless() const;
  public:
  void clear_wireless();
  const ::CMsgNetworkDevicesData_Device_Wireless& wireless() const;
  PROTOBUF_NODISCARD ::CMsgNetworkDevicesData_Device_Wireless* release_wireless();
  ::CMsgNetworkDevicesData_Device_Wireless* mutable_wireless();
  void set_allocated_wireless(::CMsgNetworkDevicesData_Device_Wireless* wireless);
  private:
  const ::CMsgNetworkDevicesData_Device_Wireless& _internal_wireless() const;
  ::CMsgNetworkDevicesData_Device_Wireless* _internal_mutable_wireless();
  public:
  void unsafe_arena_set_allocated_wireless(
      ::CMsgNetworkDevicesData_Device_Wireless* wireless);
  ::CMsgNetworkDevicesData_Device_Wireless* unsafe_arena_release_wireless();

  // optional uint32 id = 1 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional int32 etype = 2;
  bool has_etype() const;
  private:
  bool _internal_has_etype() const;
  public:
  void clear_etype();
  int32_t etype() const;
  void set_etype(int32_t value);
  private:
  int32_t _internal_etype() const;
  void _internal_set_etype(int32_t value);
  public:

  // optional int32 estate = 3;
  bool has_estate() const;
  private:
  bool _internal_has_estate() const;
  public:
  void clear_estate();
  int32_t estate() const;
  void set_estate(int32_t value);
  private:
  int32_t _internal_estate() const;
  void _internal_set_estate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNetworkDevicesData.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_;
  ::CMsgNetworkDeviceIP4Config* ip4_;
  ::CMsgNetworkDeviceIP6Config* ip6_;
  ::CMsgNetworkDevicesData_Device_Wired* wired_;
  ::CMsgNetworkDevicesData_Device_Wireless* wireless_;
  uint32_t id_;
  int32_t etype_;
  int32_t estate_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgNetworkDevicesData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNetworkDevicesData) */ {
 public:
  inline CMsgNetworkDevicesData() : CMsgNetworkDevicesData(nullptr) {}
  ~CMsgNetworkDevicesData() override;
  explicit constexpr CMsgNetworkDevicesData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNetworkDevicesData(const CMsgNetworkDevicesData& from);
  CMsgNetworkDevicesData(CMsgNetworkDevicesData&& from) noexcept
    : CMsgNetworkDevicesData() {
    *this = ::std::move(from);
  }

  inline CMsgNetworkDevicesData& operator=(const CMsgNetworkDevicesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNetworkDevicesData& operator=(CMsgNetworkDevicesData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNetworkDevicesData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNetworkDevicesData* internal_default_instance() {
    return reinterpret_cast<const CMsgNetworkDevicesData*>(
               &_CMsgNetworkDevicesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgNetworkDevicesData& a, CMsgNetworkDevicesData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNetworkDevicesData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNetworkDevicesData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNetworkDevicesData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNetworkDevicesData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNetworkDevicesData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNetworkDevicesData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNetworkDevicesData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNetworkDevicesData";
  }
  protected:
  explicit CMsgNetworkDevicesData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgNetworkDevicesData_Device Device;

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
    kIsWifiEnabledFieldNumber = 2,
    kIsWifiScanningEnabledFieldNumber = 3,
  };
  // repeated .CMsgNetworkDevicesData.Device devices = 1;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::CMsgNetworkDevicesData_Device* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDevicesData_Device >*
      mutable_devices();
  private:
  const ::CMsgNetworkDevicesData_Device& _internal_devices(int index) const;
  ::CMsgNetworkDevicesData_Device* _internal_add_devices();
  public:
  const ::CMsgNetworkDevicesData_Device& devices(int index) const;
  ::CMsgNetworkDevicesData_Device* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDevicesData_Device >&
      devices() const;

  // optional bool is_wifi_enabled = 2;
  bool has_is_wifi_enabled() const;
  private:
  bool _internal_has_is_wifi_enabled() const;
  public:
  void clear_is_wifi_enabled();
  bool is_wifi_enabled() const;
  void set_is_wifi_enabled(bool value);
  private:
  bool _internal_is_wifi_enabled() const;
  void _internal_set_is_wifi_enabled(bool value);
  public:

  // optional bool is_wifi_scanning_enabled = 3;
  bool has_is_wifi_scanning_enabled() const;
  private:
  bool _internal_has_is_wifi_scanning_enabled() const;
  public:
  void clear_is_wifi_scanning_enabled();
  bool is_wifi_scanning_enabled() const;
  void set_is_wifi_scanning_enabled(bool value);
  private:
  bool _internal_is_wifi_scanning_enabled() const;
  void _internal_set_is_wifi_scanning_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNetworkDevicesData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDevicesData_Device > devices_;
  bool is_wifi_enabled_;
  bool is_wifi_scanning_enabled_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgNetworkDeviceConnect_KnownAP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNetworkDeviceConnect.KnownAP) */ {
 public:
  inline CMsgNetworkDeviceConnect_KnownAP() : CMsgNetworkDeviceConnect_KnownAP(nullptr) {}
  ~CMsgNetworkDeviceConnect_KnownAP() override;
  explicit constexpr CMsgNetworkDeviceConnect_KnownAP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNetworkDeviceConnect_KnownAP(const CMsgNetworkDeviceConnect_KnownAP& from);
  CMsgNetworkDeviceConnect_KnownAP(CMsgNetworkDeviceConnect_KnownAP&& from) noexcept
    : CMsgNetworkDeviceConnect_KnownAP() {
    *this = ::std::move(from);
  }

  inline CMsgNetworkDeviceConnect_KnownAP& operator=(const CMsgNetworkDeviceConnect_KnownAP& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNetworkDeviceConnect_KnownAP& operator=(CMsgNetworkDeviceConnect_KnownAP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNetworkDeviceConnect_KnownAP& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNetworkDeviceConnect_KnownAP* internal_default_instance() {
    return reinterpret_cast<const CMsgNetworkDeviceConnect_KnownAP*>(
               &_CMsgNetworkDeviceConnect_KnownAP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgNetworkDeviceConnect_KnownAP& a, CMsgNetworkDeviceConnect_KnownAP& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNetworkDeviceConnect_KnownAP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNetworkDeviceConnect_KnownAP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNetworkDeviceConnect_KnownAP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNetworkDeviceConnect_KnownAP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNetworkDeviceConnect_KnownAP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNetworkDeviceConnect_KnownAP& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNetworkDeviceConnect_KnownAP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNetworkDeviceConnect.KnownAP";
  }
  protected:
  explicit CMsgNetworkDeviceConnect_KnownAP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApIdFieldNumber = 1,
  };
  // optional uint32 ap_id = 1;
  bool has_ap_id() const;
  private:
  bool _internal_has_ap_id() const;
  public:
  void clear_ap_id();
  uint32_t ap_id() const;
  void set_ap_id(uint32_t value);
  private:
  uint32_t _internal_ap_id() const;
  void _internal_set_ap_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNetworkDeviceConnect.KnownAP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t ap_id_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgNetworkDeviceConnect_CustomAP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNetworkDeviceConnect.CustomAP) */ {
 public:
  inline CMsgNetworkDeviceConnect_CustomAP() : CMsgNetworkDeviceConnect_CustomAP(nullptr) {}
  ~CMsgNetworkDeviceConnect_CustomAP() override;
  explicit constexpr CMsgNetworkDeviceConnect_CustomAP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNetworkDeviceConnect_CustomAP(const CMsgNetworkDeviceConnect_CustomAP& from);
  CMsgNetworkDeviceConnect_CustomAP(CMsgNetworkDeviceConnect_CustomAP&& from) noexcept
    : CMsgNetworkDeviceConnect_CustomAP() {
    *this = ::std::move(from);
  }

  inline CMsgNetworkDeviceConnect_CustomAP& operator=(const CMsgNetworkDeviceConnect_CustomAP& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNetworkDeviceConnect_CustomAP& operator=(CMsgNetworkDeviceConnect_CustomAP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNetworkDeviceConnect_CustomAP& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNetworkDeviceConnect_CustomAP* internal_default_instance() {
    return reinterpret_cast<const CMsgNetworkDeviceConnect_CustomAP*>(
               &_CMsgNetworkDeviceConnect_CustomAP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgNetworkDeviceConnect_CustomAP& a, CMsgNetworkDeviceConnect_CustomAP& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNetworkDeviceConnect_CustomAP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNetworkDeviceConnect_CustomAP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNetworkDeviceConnect_CustomAP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNetworkDeviceConnect_CustomAP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNetworkDeviceConnect_CustomAP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNetworkDeviceConnect_CustomAP& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNetworkDeviceConnect_CustomAP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNetworkDeviceConnect.CustomAP";
  }
  protected:
  explicit CMsgNetworkDeviceConnect_CustomAP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kEsecurityFieldNumber = 2,
  };
  // optional string ssid = 1;
  bool has_ssid() const;
  private:
  bool _internal_has_ssid() const;
  public:
  void clear_ssid();
  const std::string& ssid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ssid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ssid();
  PROTOBUF_NODISCARD std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // optional int32 esecurity = 2;
  bool has_esecurity() const;
  private:
  bool _internal_has_esecurity() const;
  public:
  void clear_esecurity();
  int32_t esecurity() const;
  void set_esecurity(int32_t value);
  private:
  int32_t _internal_esecurity() const;
  void _internal_set_esecurity(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNetworkDeviceConnect.CustomAP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  int32_t esecurity_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgNetworkDeviceConnect_Credentials final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNetworkDeviceConnect.Credentials) */ {
 public:
  inline CMsgNetworkDeviceConnect_Credentials() : CMsgNetworkDeviceConnect_Credentials(nullptr) {}
  ~CMsgNetworkDeviceConnect_Credentials() override;
  explicit constexpr CMsgNetworkDeviceConnect_Credentials(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNetworkDeviceConnect_Credentials(const CMsgNetworkDeviceConnect_Credentials& from);
  CMsgNetworkDeviceConnect_Credentials(CMsgNetworkDeviceConnect_Credentials&& from) noexcept
    : CMsgNetworkDeviceConnect_Credentials() {
    *this = ::std::move(from);
  }

  inline CMsgNetworkDeviceConnect_Credentials& operator=(const CMsgNetworkDeviceConnect_Credentials& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNetworkDeviceConnect_Credentials& operator=(CMsgNetworkDeviceConnect_Credentials&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNetworkDeviceConnect_Credentials& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNetworkDeviceConnect_Credentials* internal_default_instance() {
    return reinterpret_cast<const CMsgNetworkDeviceConnect_Credentials*>(
               &_CMsgNetworkDeviceConnect_Credentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgNetworkDeviceConnect_Credentials& a, CMsgNetworkDeviceConnect_Credentials& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNetworkDeviceConnect_Credentials* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNetworkDeviceConnect_Credentials* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNetworkDeviceConnect_Credentials* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNetworkDeviceConnect_Credentials>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNetworkDeviceConnect_Credentials& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNetworkDeviceConnect_Credentials& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNetworkDeviceConnect_Credentials* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNetworkDeviceConnect.Credentials";
  }
  protected:
  explicit CMsgNetworkDeviceConnect_Credentials(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // optional string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:CMsgNetworkDeviceConnect.Credentials)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgNetworkDeviceConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNetworkDeviceConnect) */ {
 public:
  inline CMsgNetworkDeviceConnect() : CMsgNetworkDeviceConnect(nullptr) {}
  ~CMsgNetworkDeviceConnect() override;
  explicit constexpr CMsgNetworkDeviceConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNetworkDeviceConnect(const CMsgNetworkDeviceConnect& from);
  CMsgNetworkDeviceConnect(CMsgNetworkDeviceConnect&& from) noexcept
    : CMsgNetworkDeviceConnect() {
    *this = ::std::move(from);
  }

  inline CMsgNetworkDeviceConnect& operator=(const CMsgNetworkDeviceConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNetworkDeviceConnect& operator=(CMsgNetworkDeviceConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNetworkDeviceConnect& default_instance() {
    return *internal_default_instance();
  }
  enum ApInfoCase {
    kApKnown = 2,
    kApCustom = 3,
    AP_INFO_NOT_SET = 0,
  };

  static inline const CMsgNetworkDeviceConnect* internal_default_instance() {
    return reinterpret_cast<const CMsgNetworkDeviceConnect*>(
               &_CMsgNetworkDeviceConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgNetworkDeviceConnect& a, CMsgNetworkDeviceConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNetworkDeviceConnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNetworkDeviceConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNetworkDeviceConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNetworkDeviceConnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNetworkDeviceConnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgNetworkDeviceConnect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNetworkDeviceConnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNetworkDeviceConnect";
  }
  protected:
  explicit CMsgNetworkDeviceConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgNetworkDeviceConnect_KnownAP KnownAP;
  typedef CMsgNetworkDeviceConnect_CustomAP CustomAP;
  typedef CMsgNetworkDeviceConnect_Credentials Credentials;

  // accessors -------------------------------------------------------

  enum : int {
    kCredentialsFieldNumber = 4,
    kIp4FieldNumber = 5,
    kIp6FieldNumber = 6,
    kDeviceIdFieldNumber = 1,
    kApKnownFieldNumber = 2,
    kApCustomFieldNumber = 3,
  };
  // optional .CMsgNetworkDeviceConnect.Credentials credentials = 4;
  bool has_credentials() const;
  private:
  bool _internal_has_credentials() const;
  public:
  void clear_credentials();
  const ::CMsgNetworkDeviceConnect_Credentials& credentials() const;
  PROTOBUF_NODISCARD ::CMsgNetworkDeviceConnect_Credentials* release_credentials();
  ::CMsgNetworkDeviceConnect_Credentials* mutable_credentials();
  void set_allocated_credentials(::CMsgNetworkDeviceConnect_Credentials* credentials);
  private:
  const ::CMsgNetworkDeviceConnect_Credentials& _internal_credentials() const;
  ::CMsgNetworkDeviceConnect_Credentials* _internal_mutable_credentials();
  public:
  void unsafe_arena_set_allocated_credentials(
      ::CMsgNetworkDeviceConnect_Credentials* credentials);
  ::CMsgNetworkDeviceConnect_Credentials* unsafe_arena_release_credentials();

  // optional .CMsgNetworkDeviceIP4Config ip4 = 5;
  bool has_ip4() const;
  private:
  bool _internal_has_ip4() const;
  public:
  void clear_ip4();
  const ::CMsgNetworkDeviceIP4Config& ip4() const;
  PROTOBUF_NODISCARD ::CMsgNetworkDeviceIP4Config* release_ip4();
  ::CMsgNetworkDeviceIP4Config* mutable_ip4();
  void set_allocated_ip4(::CMsgNetworkDeviceIP4Config* ip4);
  private:
  const ::CMsgNetworkDeviceIP4Config& _internal_ip4() const;
  ::CMsgNetworkDeviceIP4Config* _internal_mutable_ip4();
  public:
  void unsafe_arena_set_allocated_ip4(
      ::CMsgNetworkDeviceIP4Config* ip4);
  ::CMsgNetworkDeviceIP4Config* unsafe_arena_release_ip4();

  // optional .CMsgNetworkDeviceIP6Config ip6 = 6;
  bool has_ip6() const;
  private:
  bool _internal_has_ip6() const;
  public:
  void clear_ip6();
  const ::CMsgNetworkDeviceIP6Config& ip6() const;
  PROTOBUF_NODISCARD ::CMsgNetworkDeviceIP6Config* release_ip6();
  ::CMsgNetworkDeviceIP6Config* mutable_ip6();
  void set_allocated_ip6(::CMsgNetworkDeviceIP6Config* ip6);
  private:
  const ::CMsgNetworkDeviceIP6Config& _internal_ip6() const;
  ::CMsgNetworkDeviceIP6Config* _internal_mutable_ip6();
  public:
  void unsafe_arena_set_allocated_ip6(
      ::CMsgNetworkDeviceIP6Config* ip6);
  ::CMsgNetworkDeviceIP6Config* unsafe_arena_release_ip6();

  // optional uint32 device_id = 1 [default = 0];
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  uint32_t device_id() const;
  void set_device_id(uint32_t value);
  private:
  uint32_t _internal_device_id() const;
  void _internal_set_device_id(uint32_t value);
  public:

  // .CMsgNetworkDeviceConnect.KnownAP ap_known = 2;
  bool has_ap_known() const;
  private:
  bool _internal_has_ap_known() const;
  public:
  void clear_ap_known();
  const ::CMsgNetworkDeviceConnect_KnownAP& ap_known() const;
  PROTOBUF_NODISCARD ::CMsgNetworkDeviceConnect_KnownAP* release_ap_known();
  ::CMsgNetworkDeviceConnect_KnownAP* mutable_ap_known();
  void set_allocated_ap_known(::CMsgNetworkDeviceConnect_KnownAP* ap_known);
  private:
  const ::CMsgNetworkDeviceConnect_KnownAP& _internal_ap_known() const;
  ::CMsgNetworkDeviceConnect_KnownAP* _internal_mutable_ap_known();
  public:
  void unsafe_arena_set_allocated_ap_known(
      ::CMsgNetworkDeviceConnect_KnownAP* ap_known);
  ::CMsgNetworkDeviceConnect_KnownAP* unsafe_arena_release_ap_known();

  // .CMsgNetworkDeviceConnect.CustomAP ap_custom = 3;
  bool has_ap_custom() const;
  private:
  bool _internal_has_ap_custom() const;
  public:
  void clear_ap_custom();
  const ::CMsgNetworkDeviceConnect_CustomAP& ap_custom() const;
  PROTOBUF_NODISCARD ::CMsgNetworkDeviceConnect_CustomAP* release_ap_custom();
  ::CMsgNetworkDeviceConnect_CustomAP* mutable_ap_custom();
  void set_allocated_ap_custom(::CMsgNetworkDeviceConnect_CustomAP* ap_custom);
  private:
  const ::CMsgNetworkDeviceConnect_CustomAP& _internal_ap_custom() const;
  ::CMsgNetworkDeviceConnect_CustomAP* _internal_mutable_ap_custom();
  public:
  void unsafe_arena_set_allocated_ap_custom(
      ::CMsgNetworkDeviceConnect_CustomAP* ap_custom);
  ::CMsgNetworkDeviceConnect_CustomAP* unsafe_arena_release_ap_custom();

  void clear_ap_info();
  ApInfoCase ap_info_case() const;
  // @@protoc_insertion_point(class_scope:CMsgNetworkDeviceConnect)
 private:
  class _Internal;
  void set_has_ap_known();
  void set_has_ap_custom();

  inline bool has_ap_info() const;
  inline void clear_has_ap_info();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgNetworkDeviceConnect_Credentials* credentials_;
  ::CMsgNetworkDeviceIP4Config* ip4_;
  ::CMsgNetworkDeviceIP6Config* ip6_;
  uint32_t device_id_;
  union ApInfoUnion {
    constexpr ApInfoUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::CMsgNetworkDeviceConnect_KnownAP* ap_known_;
    ::CMsgNetworkDeviceConnect_CustomAP* ap_custom_;
  } ap_info_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgStorageDevicesData_Drive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStorageDevicesData.Drive) */ {
 public:
  inline CMsgStorageDevicesData_Drive() : CMsgStorageDevicesData_Drive(nullptr) {}
  ~CMsgStorageDevicesData_Drive() override;
  explicit constexpr CMsgStorageDevicesData_Drive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStorageDevicesData_Drive(const CMsgStorageDevicesData_Drive& from);
  CMsgStorageDevicesData_Drive(CMsgStorageDevicesData_Drive&& from) noexcept
    : CMsgStorageDevicesData_Drive() {
    *this = ::std::move(from);
  }

  inline CMsgStorageDevicesData_Drive& operator=(const CMsgStorageDevicesData_Drive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStorageDevicesData_Drive& operator=(CMsgStorageDevicesData_Drive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgStorageDevicesData_Drive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStorageDevicesData_Drive* internal_default_instance() {
    return reinterpret_cast<const CMsgStorageDevicesData_Drive*>(
               &_CMsgStorageDevicesData_Drive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgStorageDevicesData_Drive& a, CMsgStorageDevicesData_Drive& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStorageDevicesData_Drive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStorageDevicesData_Drive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgStorageDevicesData_Drive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgStorageDevicesData_Drive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgStorageDevicesData_Drive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgStorageDevicesData_Drive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStorageDevicesData_Drive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStorageDevicesData.Drive";
  }
  protected:
  explicit CMsgStorageDevicesData_Drive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 2,
    kVendorFieldNumber = 3,
    kSerialFieldNumber = 4,
    kIdFieldNumber = 1,
    kIsEjectableFieldNumber = 5,
    kSizeBytesFieldNumber = 6,
    kMediaTypeFieldNumber = 7,
  };
  // optional string model = 2;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // optional string vendor = 3;
  bool has_vendor() const;
  private:
  bool _internal_has_vendor() const;
  public:
  void clear_vendor();
  const std::string& vendor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vendor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vendor();
  PROTOBUF_NODISCARD std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // optional string serial = 4;
  bool has_serial() const;
  private:
  bool _internal_has_serial() const;
  public:
  void clear_serial();
  const std::string& serial() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial();
  PROTOBUF_NODISCARD std::string* release_serial();
  void set_allocated_serial(std::string* serial);
  private:
  const std::string& _internal_serial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial(const std::string& value);
  std::string* _internal_mutable_serial();
  public:

  // optional uint32 id = 1 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional bool is_ejectable = 5;
  bool has_is_ejectable() const;
  private:
  bool _internal_has_is_ejectable() const;
  public:
  void clear_is_ejectable();
  bool is_ejectable() const;
  void set_is_ejectable(bool value);
  private:
  bool _internal_is_ejectable() const;
  void _internal_set_is_ejectable(bool value);
  public:

  // optional uint64 size_bytes = 6;
  bool has_size_bytes() const;
  private:
  bool _internal_has_size_bytes() const;
  public:
  void clear_size_bytes();
  uint64_t size_bytes() const;
  void set_size_bytes(uint64_t value);
  private:
  uint64_t _internal_size_bytes() const;
  void _internal_set_size_bytes(uint64_t value);
  public:

  // optional .EStorageDriveMediaType media_type = 7 [default = k_EStorageDriveMediaType_Invalid];
  bool has_media_type() const;
  private:
  bool _internal_has_media_type() const;
  public:
  void clear_media_type();
  ::EStorageDriveMediaType media_type() const;
  void set_media_type(::EStorageDriveMediaType value);
  private:
  ::EStorageDriveMediaType _internal_media_type() const;
  void _internal_set_media_type(::EStorageDriveMediaType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStorageDevicesData.Drive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_;
  uint32_t id_;
  bool is_ejectable_;
  uint64_t size_bytes_;
  int media_type_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgStorageDevicesData_BlockDevice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStorageDevicesData.BlockDevice) */ {
 public:
  inline CMsgStorageDevicesData_BlockDevice() : CMsgStorageDevicesData_BlockDevice(nullptr) {}
  ~CMsgStorageDevicesData_BlockDevice() override;
  explicit constexpr CMsgStorageDevicesData_BlockDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStorageDevicesData_BlockDevice(const CMsgStorageDevicesData_BlockDevice& from);
  CMsgStorageDevicesData_BlockDevice(CMsgStorageDevicesData_BlockDevice&& from) noexcept
    : CMsgStorageDevicesData_BlockDevice() {
    *this = ::std::move(from);
  }

  inline CMsgStorageDevicesData_BlockDevice& operator=(const CMsgStorageDevicesData_BlockDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStorageDevicesData_BlockDevice& operator=(CMsgStorageDevicesData_BlockDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgStorageDevicesData_BlockDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStorageDevicesData_BlockDevice* internal_default_instance() {
    return reinterpret_cast<const CMsgStorageDevicesData_BlockDevice*>(
               &_CMsgStorageDevicesData_BlockDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgStorageDevicesData_BlockDevice& a, CMsgStorageDevicesData_BlockDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStorageDevicesData_BlockDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStorageDevicesData_BlockDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgStorageDevicesData_BlockDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgStorageDevicesData_BlockDevice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgStorageDevicesData_BlockDevice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgStorageDevicesData_BlockDevice& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStorageDevicesData_BlockDevice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStorageDevicesData.BlockDevice";
  }
  protected:
  explicit CMsgStorageDevicesData_BlockDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 3,
    kFriendlyPathFieldNumber = 4,
    kLabelFieldNumber = 5,
    kMountPathFieldNumber = 12,
    kIdFieldNumber = 1,
    kDriveIdFieldNumber = 2,
    kSizeBytesFieldNumber = 6,
    kIsFormattableFieldNumber = 7,
    kIsReadOnlyFieldNumber = 8,
    kIsRootDeviceFieldNumber = 9,
    kContentTypeFieldNumber = 10,
    kFilesystemTypeFieldNumber = 11,
  };
  // optional string path = 3;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string friendly_path = 4;
  bool has_friendly_path() const;
  private:
  bool _internal_has_friendly_path() const;
  public:
  void clear_friendly_path();
  const std::string& friendly_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friendly_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friendly_path();
  PROTOBUF_NODISCARD std::string* release_friendly_path();
  void set_allocated_friendly_path(std::string* friendly_path);
  private:
  const std::string& _internal_friendly_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendly_path(const std::string& value);
  std::string* _internal_mutable_friendly_path();
  public:

  // optional string label = 5;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional string mount_path = 12;
  bool has_mount_path() const;
  private:
  bool _internal_has_mount_path() const;
  public:
  void clear_mount_path();
  const std::string& mount_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mount_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mount_path();
  PROTOBUF_NODISCARD std::string* release_mount_path();
  void set_allocated_mount_path(std::string* mount_path);
  private:
  const std::string& _internal_mount_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mount_path(const std::string& value);
  std::string* _internal_mutable_mount_path();
  public:

  // optional uint32 id = 1 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional uint32 drive_id = 2 [default = 0];
  bool has_drive_id() const;
  private:
  bool _internal_has_drive_id() const;
  public:
  void clear_drive_id();
  uint32_t drive_id() const;
  void set_drive_id(uint32_t value);
  private:
  uint32_t _internal_drive_id() const;
  void _internal_set_drive_id(uint32_t value);
  public:

  // optional uint64 size_bytes = 6;
  bool has_size_bytes() const;
  private:
  bool _internal_has_size_bytes() const;
  public:
  void clear_size_bytes();
  uint64_t size_bytes() const;
  void set_size_bytes(uint64_t value);
  private:
  uint64_t _internal_size_bytes() const;
  void _internal_set_size_bytes(uint64_t value);
  public:

  // optional bool is_formattable = 7;
  bool has_is_formattable() const;
  private:
  bool _internal_has_is_formattable() const;
  public:
  void clear_is_formattable();
  bool is_formattable() const;
  void set_is_formattable(bool value);
  private:
  bool _internal_is_formattable() const;
  void _internal_set_is_formattable(bool value);
  public:

  // optional bool is_read_only = 8;
  bool has_is_read_only() const;
  private:
  bool _internal_has_is_read_only() const;
  public:
  void clear_is_read_only();
  bool is_read_only() const;
  void set_is_read_only(bool value);
  private:
  bool _internal_is_read_only() const;
  void _internal_set_is_read_only(bool value);
  public:

  // optional bool is_root_device = 9;
  bool has_is_root_device() const;
  private:
  bool _internal_has_is_root_device() const;
  public:
  void clear_is_root_device();
  bool is_root_device() const;
  void set_is_root_device(bool value);
  private:
  bool _internal_is_root_device() const;
  void _internal_set_is_root_device(bool value);
  public:

  // optional .EStorageBlockContentType content_type = 10 [default = k_EStorageBlockContentType_Invalid];
  bool has_content_type() const;
  private:
  bool _internal_has_content_type() const;
  public:
  void clear_content_type();
  ::EStorageBlockContentType content_type() const;
  void set_content_type(::EStorageBlockContentType value);
  private:
  ::EStorageBlockContentType _internal_content_type() const;
  void _internal_set_content_type(::EStorageBlockContentType value);
  public:

  // optional .EStorageBlockFileSystemType filesystem_type = 11 [default = k_EStorageBlockFileSystemType_Invalid];
  bool has_filesystem_type() const;
  private:
  bool _internal_has_filesystem_type() const;
  public:
  void clear_filesystem_type();
  ::EStorageBlockFileSystemType filesystem_type() const;
  void set_filesystem_type(::EStorageBlockFileSystemType value);
  private:
  ::EStorageBlockFileSystemType _internal_filesystem_type() const;
  void _internal_set_filesystem_type(::EStorageBlockFileSystemType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStorageDevicesData.BlockDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendly_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mount_path_;
  uint32_t id_;
  uint32_t drive_id_;
  uint64_t size_bytes_;
  bool is_formattable_;
  bool is_read_only_;
  bool is_root_device_;
  int content_type_;
  int filesystem_type_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgStorageDevicesData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStorageDevicesData) */ {
 public:
  inline CMsgStorageDevicesData() : CMsgStorageDevicesData(nullptr) {}
  ~CMsgStorageDevicesData() override;
  explicit constexpr CMsgStorageDevicesData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStorageDevicesData(const CMsgStorageDevicesData& from);
  CMsgStorageDevicesData(CMsgStorageDevicesData&& from) noexcept
    : CMsgStorageDevicesData() {
    *this = ::std::move(from);
  }

  inline CMsgStorageDevicesData& operator=(const CMsgStorageDevicesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStorageDevicesData& operator=(CMsgStorageDevicesData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgStorageDevicesData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStorageDevicesData* internal_default_instance() {
    return reinterpret_cast<const CMsgStorageDevicesData*>(
               &_CMsgStorageDevicesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgStorageDevicesData& a, CMsgStorageDevicesData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStorageDevicesData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStorageDevicesData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgStorageDevicesData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgStorageDevicesData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgStorageDevicesData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgStorageDevicesData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStorageDevicesData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStorageDevicesData";
  }
  protected:
  explicit CMsgStorageDevicesData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgStorageDevicesData_Drive Drive;
  typedef CMsgStorageDevicesData_BlockDevice BlockDevice;

  // accessors -------------------------------------------------------

  enum : int {
    kDrivesFieldNumber = 1,
    kBlockDevicesFieldNumber = 2,
    kIsUnmountSupportedFieldNumber = 3,
    kIsTrimSupportedFieldNumber = 4,
    kIsTrimRunningFieldNumber = 5,
  };
  // repeated .CMsgStorageDevicesData.Drive drives = 1;
  int drives_size() const;
  private:
  int _internal_drives_size() const;
  public:
  void clear_drives();
  ::CMsgStorageDevicesData_Drive* mutable_drives(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStorageDevicesData_Drive >*
      mutable_drives();
  private:
  const ::CMsgStorageDevicesData_Drive& _internal_drives(int index) const;
  ::CMsgStorageDevicesData_Drive* _internal_add_drives();
  public:
  const ::CMsgStorageDevicesData_Drive& drives(int index) const;
  ::CMsgStorageDevicesData_Drive* add_drives();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStorageDevicesData_Drive >&
      drives() const;

  // repeated .CMsgStorageDevicesData.BlockDevice block_devices = 2;
  int block_devices_size() const;
  private:
  int _internal_block_devices_size() const;
  public:
  void clear_block_devices();
  ::CMsgStorageDevicesData_BlockDevice* mutable_block_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStorageDevicesData_BlockDevice >*
      mutable_block_devices();
  private:
  const ::CMsgStorageDevicesData_BlockDevice& _internal_block_devices(int index) const;
  ::CMsgStorageDevicesData_BlockDevice* _internal_add_block_devices();
  public:
  const ::CMsgStorageDevicesData_BlockDevice& block_devices(int index) const;
  ::CMsgStorageDevicesData_BlockDevice* add_block_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStorageDevicesData_BlockDevice >&
      block_devices() const;

  // optional bool is_unmount_supported = 3;
  bool has_is_unmount_supported() const;
  private:
  bool _internal_has_is_unmount_supported() const;
  public:
  void clear_is_unmount_supported();
  bool is_unmount_supported() const;
  void set_is_unmount_supported(bool value);
  private:
  bool _internal_is_unmount_supported() const;
  void _internal_set_is_unmount_supported(bool value);
  public:

  // optional bool is_trim_supported = 4;
  bool has_is_trim_supported() const;
  private:
  bool _internal_has_is_trim_supported() const;
  public:
  void clear_is_trim_supported();
  bool is_trim_supported() const;
  void set_is_trim_supported(bool value);
  private:
  bool _internal_is_trim_supported() const;
  void _internal_set_is_trim_supported(bool value);
  public:

  // optional bool is_trim_running = 5;
  bool has_is_trim_running() const;
  private:
  bool _internal_has_is_trim_running() const;
  public:
  void clear_is_trim_running();
  bool is_trim_running() const;
  void set_is_trim_running(bool value);
  private:
  bool _internal_is_trim_running() const;
  void _internal_set_is_trim_running(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStorageDevicesData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStorageDevicesData_Drive > drives_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStorageDevicesData_BlockDevice > block_devices_;
  bool is_unmount_supported_;
  bool is_trim_supported_;
  bool is_trim_running_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CCloud_PendingRemoteOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_PendingRemoteOperation) */ {
 public:
  inline CCloud_PendingRemoteOperation() : CCloud_PendingRemoteOperation(nullptr) {}
  ~CCloud_PendingRemoteOperation() override;
  explicit constexpr CCloud_PendingRemoteOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_PendingRemoteOperation(const CCloud_PendingRemoteOperation& from);
  CCloud_PendingRemoteOperation(CCloud_PendingRemoteOperation&& from) noexcept
    : CCloud_PendingRemoteOperation() {
    *this = ::std::move(from);
  }

  inline CCloud_PendingRemoteOperation& operator=(const CCloud_PendingRemoteOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_PendingRemoteOperation& operator=(CCloud_PendingRemoteOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCloud_PendingRemoteOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_PendingRemoteOperation* internal_default_instance() {
    return reinterpret_cast<const CCloud_PendingRemoteOperation*>(
               &_CCloud_PendingRemoteOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CCloud_PendingRemoteOperation& a, CCloud_PendingRemoteOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_PendingRemoteOperation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_PendingRemoteOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCloud_PendingRemoteOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCloud_PendingRemoteOperation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCloud_PendingRemoteOperation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCloud_PendingRemoteOperation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_PendingRemoteOperation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_PendingRemoteOperation";
  }
  protected:
  explicit CCloud_PendingRemoteOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineNameFieldNumber = 2,
    kOperationFieldNumber = 1,
    kTimeLastUpdatedFieldNumber = 4,
    kClientIdFieldNumber = 3,
  };
  // optional string machine_name = 2;
  bool has_machine_name() const;
  private:
  bool _internal_has_machine_name() const;
  public:
  void clear_machine_name();
  const std::string& machine_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machine_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machine_name();
  PROTOBUF_NODISCARD std::string* release_machine_name();
  void set_allocated_machine_name(std::string* machine_name);
  private:
  const std::string& _internal_machine_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine_name(const std::string& value);
  std::string* _internal_mutable_machine_name();
  public:

  // optional .ECloudPendingRemoteOperation operation = 1 [default = k_ECloudPendingRemoteOperationNone];
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::ECloudPendingRemoteOperation operation() const;
  void set_operation(::ECloudPendingRemoteOperation value);
  private:
  ::ECloudPendingRemoteOperation _internal_operation() const;
  void _internal_set_operation(::ECloudPendingRemoteOperation value);
  public:

  // optional uint32 time_last_updated = 4;
  bool has_time_last_updated() const;
  private:
  bool _internal_has_time_last_updated() const;
  public:
  void clear_time_last_updated();
  uint32_t time_last_updated() const;
  void set_time_last_updated(uint32_t value);
  private:
  uint32_t _internal_time_last_updated() const;
  void _internal_set_time_last_updated(uint32_t value);
  public:

  // optional uint64 client_id = 3;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  uint64_t client_id() const;
  void set_client_id(uint64_t value);
  private:
  uint64_t _internal_client_id() const;
  void _internal_set_client_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_PendingRemoteOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_name_;
  int operation_;
  uint32_t time_last_updated_;
  uint64_t client_id_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgCloudPendingRemoteOperations final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCloudPendingRemoteOperations) */ {
 public:
  inline CMsgCloudPendingRemoteOperations() : CMsgCloudPendingRemoteOperations(nullptr) {}
  ~CMsgCloudPendingRemoteOperations() override;
  explicit constexpr CMsgCloudPendingRemoteOperations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCloudPendingRemoteOperations(const CMsgCloudPendingRemoteOperations& from);
  CMsgCloudPendingRemoteOperations(CMsgCloudPendingRemoteOperations&& from) noexcept
    : CMsgCloudPendingRemoteOperations() {
    *this = ::std::move(from);
  }

  inline CMsgCloudPendingRemoteOperations& operator=(const CMsgCloudPendingRemoteOperations& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCloudPendingRemoteOperations& operator=(CMsgCloudPendingRemoteOperations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgCloudPendingRemoteOperations& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCloudPendingRemoteOperations* internal_default_instance() {
    return reinterpret_cast<const CMsgCloudPendingRemoteOperations*>(
               &_CMsgCloudPendingRemoteOperations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgCloudPendingRemoteOperations& a, CMsgCloudPendingRemoteOperations& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCloudPendingRemoteOperations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCloudPendingRemoteOperations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgCloudPendingRemoteOperations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgCloudPendingRemoteOperations>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgCloudPendingRemoteOperations& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgCloudPendingRemoteOperations& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCloudPendingRemoteOperations* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCloudPendingRemoteOperations";
  }
  protected:
  explicit CMsgCloudPendingRemoteOperations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 1,
  };
  // repeated .CCloud_PendingRemoteOperation operations = 1;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::CCloud_PendingRemoteOperation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_PendingRemoteOperation >*
      mutable_operations();
  private:
  const ::CCloud_PendingRemoteOperation& _internal_operations(int index) const;
  ::CCloud_PendingRemoteOperation* _internal_add_operations();
  public:
  const ::CCloud_PendingRemoteOperation& operations(int index) const;
  ::CCloud_PendingRemoteOperation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_PendingRemoteOperation >&
      operations() const;

  // @@protoc_insertion_point(class_scope:CMsgCloudPendingRemoteOperations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_PendingRemoteOperation > operations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgBluetoothDevicesData_Adapter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBluetoothDevicesData.Adapter) */ {
 public:
  inline CMsgBluetoothDevicesData_Adapter() : CMsgBluetoothDevicesData_Adapter(nullptr) {}
  ~CMsgBluetoothDevicesData_Adapter() override;
  explicit constexpr CMsgBluetoothDevicesData_Adapter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBluetoothDevicesData_Adapter(const CMsgBluetoothDevicesData_Adapter& from);
  CMsgBluetoothDevicesData_Adapter(CMsgBluetoothDevicesData_Adapter&& from) noexcept
    : CMsgBluetoothDevicesData_Adapter() {
    *this = ::std::move(from);
  }

  inline CMsgBluetoothDevicesData_Adapter& operator=(const CMsgBluetoothDevicesData_Adapter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBluetoothDevicesData_Adapter& operator=(CMsgBluetoothDevicesData_Adapter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBluetoothDevicesData_Adapter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBluetoothDevicesData_Adapter* internal_default_instance() {
    return reinterpret_cast<const CMsgBluetoothDevicesData_Adapter*>(
               &_CMsgBluetoothDevicesData_Adapter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgBluetoothDevicesData_Adapter& a, CMsgBluetoothDevicesData_Adapter& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBluetoothDevicesData_Adapter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBluetoothDevicesData_Adapter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBluetoothDevicesData_Adapter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBluetoothDevicesData_Adapter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBluetoothDevicesData_Adapter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBluetoothDevicesData_Adapter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBluetoothDevicesData_Adapter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBluetoothDevicesData.Adapter";
  }
  protected:
  explicit CMsgBluetoothDevicesData_Adapter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacFieldNumber = 2,
    kNameFieldNumber = 3,
    kIdFieldNumber = 1,
    kIsEnabledFieldNumber = 4,
    kIsDiscoveringFieldNumber = 5,
  };
  // optional string mac = 2;
  bool has_mac() const;
  private:
  bool _internal_has_mac() const;
  public:
  void clear_mac();
  const std::string& mac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac();
  PROTOBUF_NODISCARD std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 id = 1 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional bool is_enabled = 4;
  bool has_is_enabled() const;
  private:
  bool _internal_has_is_enabled() const;
  public:
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);
  private:
  bool _internal_is_enabled() const;
  void _internal_set_is_enabled(bool value);
  public:

  // optional bool is_discovering = 5;
  bool has_is_discovering() const;
  private:
  bool _internal_has_is_discovering() const;
  public:
  void clear_is_discovering();
  bool is_discovering() const;
  void set_is_discovering(bool value);
  private:
  bool _internal_is_discovering() const;
  void _internal_set_is_discovering(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBluetoothDevicesData.Adapter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t id_;
  bool is_enabled_;
  bool is_discovering_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgBluetoothDevicesData_Device final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBluetoothDevicesData.Device) */ {
 public:
  inline CMsgBluetoothDevicesData_Device() : CMsgBluetoothDevicesData_Device(nullptr) {}
  ~CMsgBluetoothDevicesData_Device() override;
  explicit constexpr CMsgBluetoothDevicesData_Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBluetoothDevicesData_Device(const CMsgBluetoothDevicesData_Device& from);
  CMsgBluetoothDevicesData_Device(CMsgBluetoothDevicesData_Device&& from) noexcept
    : CMsgBluetoothDevicesData_Device() {
    *this = ::std::move(from);
  }

  inline CMsgBluetoothDevicesData_Device& operator=(const CMsgBluetoothDevicesData_Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBluetoothDevicesData_Device& operator=(CMsgBluetoothDevicesData_Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBluetoothDevicesData_Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBluetoothDevicesData_Device* internal_default_instance() {
    return reinterpret_cast<const CMsgBluetoothDevicesData_Device*>(
               &_CMsgBluetoothDevicesData_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgBluetoothDevicesData_Device& a, CMsgBluetoothDevicesData_Device& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBluetoothDevicesData_Device* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBluetoothDevicesData_Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBluetoothDevicesData_Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBluetoothDevicesData_Device>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBluetoothDevicesData_Device& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBluetoothDevicesData_Device& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBluetoothDevicesData_Device* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBluetoothDevicesData.Device";
  }
  protected:
  explicit CMsgBluetoothDevicesData_Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacFieldNumber = 4,
    kNameFieldNumber = 5,
    kIdFieldNumber = 1,
    kAdapterIdFieldNumber = 2,
    kEtypeFieldNumber = 3,
    kIsConnectedFieldNumber = 6,
    kIsPairedFieldNumber = 7,
    kStrengthRawFieldNumber = 8,
  };
  // optional string mac = 4;
  bool has_mac() const;
  private:
  bool _internal_has_mac() const;
  public:
  void clear_mac();
  const std::string& mac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac();
  PROTOBUF_NODISCARD std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // optional string name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 id = 1 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional uint32 adapter_id = 2 [default = 0];
  bool has_adapter_id() const;
  private:
  bool _internal_has_adapter_id() const;
  public:
  void clear_adapter_id();
  uint32_t adapter_id() const;
  void set_adapter_id(uint32_t value);
  private:
  uint32_t _internal_adapter_id() const;
  void _internal_set_adapter_id(uint32_t value);
  public:

  // optional .EBluetoothDeviceType etype = 3 [default = k_BluetoothDeviceType_Invalid];
  bool has_etype() const;
  private:
  bool _internal_has_etype() const;
  public:
  void clear_etype();
  ::EBluetoothDeviceType etype() const;
  void set_etype(::EBluetoothDeviceType value);
  private:
  ::EBluetoothDeviceType _internal_etype() const;
  void _internal_set_etype(::EBluetoothDeviceType value);
  public:

  // optional bool is_connected = 6;
  bool has_is_connected() const;
  private:
  bool _internal_has_is_connected() const;
  public:
  void clear_is_connected();
  bool is_connected() const;
  void set_is_connected(bool value);
  private:
  bool _internal_is_connected() const;
  void _internal_set_is_connected(bool value);
  public:

  // optional bool is_paired = 7;
  bool has_is_paired() const;
  private:
  bool _internal_has_is_paired() const;
  public:
  void clear_is_paired();
  bool is_paired() const;
  void set_is_paired(bool value);
  private:
  bool _internal_is_paired() const;
  void _internal_set_is_paired(bool value);
  public:

  // optional int32 strength_raw = 8;
  bool has_strength_raw() const;
  private:
  bool _internal_has_strength_raw() const;
  public:
  void clear_strength_raw();
  int32_t strength_raw() const;
  void set_strength_raw(int32_t value);
  private:
  int32_t _internal_strength_raw() const;
  void _internal_set_strength_raw(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBluetoothDevicesData.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t id_;
  uint32_t adapter_id_;
  int etype_;
  bool is_connected_;
  bool is_paired_;
  int32_t strength_raw_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgBluetoothDevicesData_Manager final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBluetoothDevicesData.Manager) */ {
 public:
  inline CMsgBluetoothDevicesData_Manager() : CMsgBluetoothDevicesData_Manager(nullptr) {}
  ~CMsgBluetoothDevicesData_Manager() override;
  explicit constexpr CMsgBluetoothDevicesData_Manager(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBluetoothDevicesData_Manager(const CMsgBluetoothDevicesData_Manager& from);
  CMsgBluetoothDevicesData_Manager(CMsgBluetoothDevicesData_Manager&& from) noexcept
    : CMsgBluetoothDevicesData_Manager() {
    *this = ::std::move(from);
  }

  inline CMsgBluetoothDevicesData_Manager& operator=(const CMsgBluetoothDevicesData_Manager& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBluetoothDevicesData_Manager& operator=(CMsgBluetoothDevicesData_Manager&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBluetoothDevicesData_Manager& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBluetoothDevicesData_Manager* internal_default_instance() {
    return reinterpret_cast<const CMsgBluetoothDevicesData_Manager*>(
               &_CMsgBluetoothDevicesData_Manager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgBluetoothDevicesData_Manager& a, CMsgBluetoothDevicesData_Manager& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBluetoothDevicesData_Manager* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBluetoothDevicesData_Manager* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBluetoothDevicesData_Manager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBluetoothDevicesData_Manager>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBluetoothDevicesData_Manager& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBluetoothDevicesData_Manager& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBluetoothDevicesData_Manager* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBluetoothDevicesData.Manager";
  }
  protected:
  explicit CMsgBluetoothDevicesData_Manager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsBluetoothEnabledFieldNumber = 1,
  };
  // optional bool is_bluetooth_enabled = 1;
  bool has_is_bluetooth_enabled() const;
  private:
  bool _internal_has_is_bluetooth_enabled() const;
  public:
  void clear_is_bluetooth_enabled();
  bool is_bluetooth_enabled() const;
  void set_is_bluetooth_enabled(bool value);
  private:
  bool _internal_is_bluetooth_enabled() const;
  void _internal_set_is_bluetooth_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBluetoothDevicesData.Manager)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool is_bluetooth_enabled_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgBluetoothDevicesData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBluetoothDevicesData) */ {
 public:
  inline CMsgBluetoothDevicesData() : CMsgBluetoothDevicesData(nullptr) {}
  ~CMsgBluetoothDevicesData() override;
  explicit constexpr CMsgBluetoothDevicesData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBluetoothDevicesData(const CMsgBluetoothDevicesData& from);
  CMsgBluetoothDevicesData(CMsgBluetoothDevicesData&& from) noexcept
    : CMsgBluetoothDevicesData() {
    *this = ::std::move(from);
  }

  inline CMsgBluetoothDevicesData& operator=(const CMsgBluetoothDevicesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBluetoothDevicesData& operator=(CMsgBluetoothDevicesData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgBluetoothDevicesData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBluetoothDevicesData* internal_default_instance() {
    return reinterpret_cast<const CMsgBluetoothDevicesData*>(
               &_CMsgBluetoothDevicesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgBluetoothDevicesData& a, CMsgBluetoothDevicesData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBluetoothDevicesData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBluetoothDevicesData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgBluetoothDevicesData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgBluetoothDevicesData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgBluetoothDevicesData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgBluetoothDevicesData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBluetoothDevicesData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBluetoothDevicesData";
  }
  protected:
  explicit CMsgBluetoothDevicesData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgBluetoothDevicesData_Adapter Adapter;
  typedef CMsgBluetoothDevicesData_Device Device;
  typedef CMsgBluetoothDevicesData_Manager Manager;

  // accessors -------------------------------------------------------

  enum : int {
    kAdaptersFieldNumber = 1,
    kDevicesFieldNumber = 2,
    kManagerFieldNumber = 3,
  };
  // repeated .CMsgBluetoothDevicesData.Adapter adapters = 1;
  int adapters_size() const;
  private:
  int _internal_adapters_size() const;
  public:
  void clear_adapters();
  ::CMsgBluetoothDevicesData_Adapter* mutable_adapters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothDevicesData_Adapter >*
      mutable_adapters();
  private:
  const ::CMsgBluetoothDevicesData_Adapter& _internal_adapters(int index) const;
  ::CMsgBluetoothDevicesData_Adapter* _internal_add_adapters();
  public:
  const ::CMsgBluetoothDevicesData_Adapter& adapters(int index) const;
  ::CMsgBluetoothDevicesData_Adapter* add_adapters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothDevicesData_Adapter >&
      adapters() const;

  // repeated .CMsgBluetoothDevicesData.Device devices = 2;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::CMsgBluetoothDevicesData_Device* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothDevicesData_Device >*
      mutable_devices();
  private:
  const ::CMsgBluetoothDevicesData_Device& _internal_devices(int index) const;
  ::CMsgBluetoothDevicesData_Device* _internal_add_devices();
  public:
  const ::CMsgBluetoothDevicesData_Device& devices(int index) const;
  ::CMsgBluetoothDevicesData_Device* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothDevicesData_Device >&
      devices() const;

  // optional .CMsgBluetoothDevicesData.Manager manager = 3;
  bool has_manager() const;
  private:
  bool _internal_has_manager() const;
  public:
  void clear_manager();
  const ::CMsgBluetoothDevicesData_Manager& manager() const;
  PROTOBUF_NODISCARD ::CMsgBluetoothDevicesData_Manager* release_manager();
  ::CMsgBluetoothDevicesData_Manager* mutable_manager();
  void set_allocated_manager(::CMsgBluetoothDevicesData_Manager* manager);
  private:
  const ::CMsgBluetoothDevicesData_Manager& _internal_manager() const;
  ::CMsgBluetoothDevicesData_Manager* _internal_mutable_manager();
  public:
  void unsafe_arena_set_allocated_manager(
      ::CMsgBluetoothDevicesData_Manager* manager);
  ::CMsgBluetoothDevicesData_Manager* unsafe_arena_release_manager();

  // @@protoc_insertion_point(class_scope:CMsgBluetoothDevicesData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothDevicesData_Adapter > adapters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothDevicesData_Device > devices_;
  ::CMsgBluetoothDevicesData_Manager* manager_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemPerfDiagnosticEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemPerfDiagnosticEntry) */ {
 public:
  inline CMsgSystemPerfDiagnosticEntry() : CMsgSystemPerfDiagnosticEntry(nullptr) {}
  ~CMsgSystemPerfDiagnosticEntry() override;
  explicit constexpr CMsgSystemPerfDiagnosticEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemPerfDiagnosticEntry(const CMsgSystemPerfDiagnosticEntry& from);
  CMsgSystemPerfDiagnosticEntry(CMsgSystemPerfDiagnosticEntry&& from) noexcept
    : CMsgSystemPerfDiagnosticEntry() {
    *this = ::std::move(from);
  }

  inline CMsgSystemPerfDiagnosticEntry& operator=(const CMsgSystemPerfDiagnosticEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemPerfDiagnosticEntry& operator=(CMsgSystemPerfDiagnosticEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemPerfDiagnosticEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemPerfDiagnosticEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemPerfDiagnosticEntry*>(
               &_CMsgSystemPerfDiagnosticEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgSystemPerfDiagnosticEntry& a, CMsgSystemPerfDiagnosticEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemPerfDiagnosticEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemPerfDiagnosticEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemPerfDiagnosticEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemPerfDiagnosticEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemPerfDiagnosticEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemPerfDiagnosticEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemPerfDiagnosticEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemPerfDiagnosticEntry";
  }
  protected:
  explicit CMsgSystemPerfDiagnosticEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemPerfDiagnosticEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemPerfNetworkInterface final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemPerfNetworkInterface) */ {
 public:
  inline CMsgSystemPerfNetworkInterface() : CMsgSystemPerfNetworkInterface(nullptr) {}
  ~CMsgSystemPerfNetworkInterface() override;
  explicit constexpr CMsgSystemPerfNetworkInterface(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemPerfNetworkInterface(const CMsgSystemPerfNetworkInterface& from);
  CMsgSystemPerfNetworkInterface(CMsgSystemPerfNetworkInterface&& from) noexcept
    : CMsgSystemPerfNetworkInterface() {
    *this = ::std::move(from);
  }

  inline CMsgSystemPerfNetworkInterface& operator=(const CMsgSystemPerfNetworkInterface& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemPerfNetworkInterface& operator=(CMsgSystemPerfNetworkInterface&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemPerfNetworkInterface& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemPerfNetworkInterface* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemPerfNetworkInterface*>(
               &_CMsgSystemPerfNetworkInterface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgSystemPerfNetworkInterface& a, CMsgSystemPerfNetworkInterface& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemPerfNetworkInterface* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemPerfNetworkInterface* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemPerfNetworkInterface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemPerfNetworkInterface>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemPerfNetworkInterface& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemPerfNetworkInterface& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemPerfNetworkInterface* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemPerfNetworkInterface";
  }
  protected:
  explicit CMsgSystemPerfNetworkInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTxBytesTotalFieldNumber = 3,
    kRxBytesTotalFieldNumber = 4,
    kTxBytesPerSecFieldNumber = 5,
    kRxBytesPerSecFieldNumber = 6,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional double timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional int64 tx_bytes_total = 3;
  bool has_tx_bytes_total() const;
  private:
  bool _internal_has_tx_bytes_total() const;
  public:
  void clear_tx_bytes_total();
  int64_t tx_bytes_total() const;
  void set_tx_bytes_total(int64_t value);
  private:
  int64_t _internal_tx_bytes_total() const;
  void _internal_set_tx_bytes_total(int64_t value);
  public:

  // optional int64 rx_bytes_total = 4;
  bool has_rx_bytes_total() const;
  private:
  bool _internal_has_rx_bytes_total() const;
  public:
  void clear_rx_bytes_total();
  int64_t rx_bytes_total() const;
  void set_rx_bytes_total(int64_t value);
  private:
  int64_t _internal_rx_bytes_total() const;
  void _internal_set_rx_bytes_total(int64_t value);
  public:

  // optional int32 tx_bytes_per_sec = 5;
  bool has_tx_bytes_per_sec() const;
  private:
  bool _internal_has_tx_bytes_per_sec() const;
  public:
  void clear_tx_bytes_per_sec();
  int32_t tx_bytes_per_sec() const;
  void set_tx_bytes_per_sec(int32_t value);
  private:
  int32_t _internal_tx_bytes_per_sec() const;
  void _internal_set_tx_bytes_per_sec(int32_t value);
  public:

  // optional int32 rx_bytes_per_sec = 6;
  bool has_rx_bytes_per_sec() const;
  private:
  bool _internal_has_rx_bytes_per_sec() const;
  public:
  void clear_rx_bytes_per_sec();
  int32_t rx_bytes_per_sec() const;
  void set_rx_bytes_per_sec(int32_t value);
  private:
  int32_t _internal_rx_bytes_per_sec() const;
  void _internal_set_rx_bytes_per_sec(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemPerfNetworkInterface)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double timestamp_;
  int64_t tx_bytes_total_;
  int64_t rx_bytes_total_;
  int32_t tx_bytes_per_sec_;
  int32_t rx_bytes_per_sec_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemPerfDiagnosticInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemPerfDiagnosticInfo) */ {
 public:
  inline CMsgSystemPerfDiagnosticInfo() : CMsgSystemPerfDiagnosticInfo(nullptr) {}
  ~CMsgSystemPerfDiagnosticInfo() override;
  explicit constexpr CMsgSystemPerfDiagnosticInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemPerfDiagnosticInfo(const CMsgSystemPerfDiagnosticInfo& from);
  CMsgSystemPerfDiagnosticInfo(CMsgSystemPerfDiagnosticInfo&& from) noexcept
    : CMsgSystemPerfDiagnosticInfo() {
    *this = ::std::move(from);
  }

  inline CMsgSystemPerfDiagnosticInfo& operator=(const CMsgSystemPerfDiagnosticInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemPerfDiagnosticInfo& operator=(CMsgSystemPerfDiagnosticInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemPerfDiagnosticInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemPerfDiagnosticInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemPerfDiagnosticInfo*>(
               &_CMsgSystemPerfDiagnosticInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgSystemPerfDiagnosticInfo& a, CMsgSystemPerfDiagnosticInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemPerfDiagnosticInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemPerfDiagnosticInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemPerfDiagnosticInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemPerfDiagnosticInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemPerfDiagnosticInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemPerfDiagnosticInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemPerfDiagnosticInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemPerfDiagnosticInfo";
  }
  protected:
  explicit CMsgSystemPerfDiagnosticInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kInterfacesFieldNumber = 2,
    kBatteryTempCFieldNumber = 3,
  };
  // repeated .CMsgSystemPerfDiagnosticEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::CMsgSystemPerfDiagnosticEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemPerfDiagnosticEntry >*
      mutable_entries();
  private:
  const ::CMsgSystemPerfDiagnosticEntry& _internal_entries(int index) const;
  ::CMsgSystemPerfDiagnosticEntry* _internal_add_entries();
  public:
  const ::CMsgSystemPerfDiagnosticEntry& entries(int index) const;
  ::CMsgSystemPerfDiagnosticEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemPerfDiagnosticEntry >&
      entries() const;

  // repeated .CMsgSystemPerfNetworkInterface interfaces = 2;
  int interfaces_size() const;
  private:
  int _internal_interfaces_size() const;
  public:
  void clear_interfaces();
  ::CMsgSystemPerfNetworkInterface* mutable_interfaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemPerfNetworkInterface >*
      mutable_interfaces();
  private:
  const ::CMsgSystemPerfNetworkInterface& _internal_interfaces(int index) const;
  ::CMsgSystemPerfNetworkInterface* _internal_add_interfaces();
  public:
  const ::CMsgSystemPerfNetworkInterface& interfaces(int index) const;
  ::CMsgSystemPerfNetworkInterface* add_interfaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemPerfNetworkInterface >&
      interfaces() const;

  // optional float battery_temp_c = 3;
  bool has_battery_temp_c() const;
  private:
  bool _internal_has_battery_temp_c() const;
  public:
  void clear_battery_temp_c();
  float battery_temp_c() const;
  void set_battery_temp_c(float value);
  private:
  float _internal_battery_temp_c() const;
  void _internal_set_battery_temp_c(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemPerfDiagnosticInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemPerfDiagnosticEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemPerfNetworkInterface > interfaces_;
  float battery_temp_c_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemPerfLimits final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemPerfLimits) */ {
 public:
  inline CMsgSystemPerfLimits() : CMsgSystemPerfLimits(nullptr) {}
  ~CMsgSystemPerfLimits() override;
  explicit constexpr CMsgSystemPerfLimits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemPerfLimits(const CMsgSystemPerfLimits& from);
  CMsgSystemPerfLimits(CMsgSystemPerfLimits&& from) noexcept
    : CMsgSystemPerfLimits() {
    *this = ::std::move(from);
  }

  inline CMsgSystemPerfLimits& operator=(const CMsgSystemPerfLimits& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemPerfLimits& operator=(CMsgSystemPerfLimits&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemPerfLimits& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemPerfLimits* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemPerfLimits*>(
               &_CMsgSystemPerfLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgSystemPerfLimits& a, CMsgSystemPerfLimits& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemPerfLimits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemPerfLimits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemPerfLimits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemPerfLimits>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemPerfLimits& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemPerfLimits& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemPerfLimits* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemPerfLimits";
  }
  protected:
  explicit CMsgSystemPerfLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpuPerformanceLevelsAvailableFieldNumber = 10,
    kFpsLimitOptionsFieldNumber = 13,
    kFpsLimitOptionsExternalFieldNumber = 21,
    kSplitScalingFiltersAvailableFieldNumber = 26,
    kSplitScalingScalersAvailableFieldNumber = 27,
    kCpuGovernorManualMinMhzFieldNumber = 1,
    kCpuGovernorManualMaxMhzFieldNumber = 2,
    kFsrSharpnessMinFieldNumber = 3,
    kFsrSharpnessMaxFieldNumber = 4,
    kGpuPerformanceManualMinMhzFieldNumber = 5,
    kGpuPerformanceManualMaxMhzFieldNumber = 6,
    kPerfOverlayIsStandaloneFieldNumber = 7,
    kIsDynamicVrsAvailableFieldNumber = 8,
    kIsManualDisplayRefreshRateAvailableFieldNumber = 9,
    kIsNisSupportedFieldNumber = 16,
    kDisplayRefreshManualHzMinFieldNumber = 11,
    kDisplayRefreshManualHzMaxFieldNumber = 12,
    kTdpLimitMinFieldNumber = 14,
    kTdpLimitMaxFieldNumber = 15,
    kNisSharpnessMinFieldNumber = 17,
    kNisSharpnessMaxFieldNumber = 18,
    kDisplayExternalRefreshManualHzMinFieldNumber = 19,
    kDisplayExternalRefreshManualHzMaxFieldNumber = 20,
    kIsTearingSupportedFieldNumber = 22,
    kIsVrrSupportedFieldNumber = 23,
    kIsDynamicRefreshRateInSteamSupportedFieldNumber = 24,
    kIsSplitScalingAndFilteringSupportedFieldNumber = 25,
    kIsHdrSupportedFieldNumber = 28,
    kDisplayRefreshManualHzOcMaxFieldNumber = 29,
  };
  // repeated .EGPUPerformanceLevel gpu_performance_levels_available = 10;
  int gpu_performance_levels_available_size() const;
  private:
  int _internal_gpu_performance_levels_available_size() const;
  public:
  void clear_gpu_performance_levels_available();
  private:
  ::EGPUPerformanceLevel _internal_gpu_performance_levels_available(int index) const;
  void _internal_add_gpu_performance_levels_available(::EGPUPerformanceLevel value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_gpu_performance_levels_available();
  public:
  ::EGPUPerformanceLevel gpu_performance_levels_available(int index) const;
  void set_gpu_performance_levels_available(int index, ::EGPUPerformanceLevel value);
  void add_gpu_performance_levels_available(::EGPUPerformanceLevel value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& gpu_performance_levels_available() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_gpu_performance_levels_available();

  // repeated int32 fps_limit_options = 13;
  int fps_limit_options_size() const;
  private:
  int _internal_fps_limit_options_size() const;
  public:
  void clear_fps_limit_options();
  private:
  int32_t _internal_fps_limit_options(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_fps_limit_options() const;
  void _internal_add_fps_limit_options(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_fps_limit_options();
  public:
  int32_t fps_limit_options(int index) const;
  void set_fps_limit_options(int index, int32_t value);
  void add_fps_limit_options(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      fps_limit_options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_fps_limit_options();

  // repeated int32 fps_limit_options_external = 21;
  int fps_limit_options_external_size() const;
  private:
  int _internal_fps_limit_options_external_size() const;
  public:
  void clear_fps_limit_options_external();
  private:
  int32_t _internal_fps_limit_options_external(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_fps_limit_options_external() const;
  void _internal_add_fps_limit_options_external(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_fps_limit_options_external();
  public:
  int32_t fps_limit_options_external(int index) const;
  void set_fps_limit_options_external(int index, int32_t value);
  void add_fps_limit_options_external(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      fps_limit_options_external() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_fps_limit_options_external();

  // repeated .ESplitScalingFilter split_scaling_filters_available = 26;
  int split_scaling_filters_available_size() const;
  private:
  int _internal_split_scaling_filters_available_size() const;
  public:
  void clear_split_scaling_filters_available();
  private:
  ::ESplitScalingFilter _internal_split_scaling_filters_available(int index) const;
  void _internal_add_split_scaling_filters_available(::ESplitScalingFilter value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_split_scaling_filters_available();
  public:
  ::ESplitScalingFilter split_scaling_filters_available(int index) const;
  void set_split_scaling_filters_available(int index, ::ESplitScalingFilter value);
  void add_split_scaling_filters_available(::ESplitScalingFilter value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& split_scaling_filters_available() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_split_scaling_filters_available();

  // repeated .ESplitScalingScaler split_scaling_scalers_available = 27;
  int split_scaling_scalers_available_size() const;
  private:
  int _internal_split_scaling_scalers_available_size() const;
  public:
  void clear_split_scaling_scalers_available();
  private:
  ::ESplitScalingScaler _internal_split_scaling_scalers_available(int index) const;
  void _internal_add_split_scaling_scalers_available(::ESplitScalingScaler value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_split_scaling_scalers_available();
  public:
  ::ESplitScalingScaler split_scaling_scalers_available(int index) const;
  void set_split_scaling_scalers_available(int index, ::ESplitScalingScaler value);
  void add_split_scaling_scalers_available(::ESplitScalingScaler value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& split_scaling_scalers_available() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_split_scaling_scalers_available();

  // optional int32 cpu_governor_manual_min_mhz = 1;
  bool has_cpu_governor_manual_min_mhz() const;
  private:
  bool _internal_has_cpu_governor_manual_min_mhz() const;
  public:
  void clear_cpu_governor_manual_min_mhz();
  int32_t cpu_governor_manual_min_mhz() const;
  void set_cpu_governor_manual_min_mhz(int32_t value);
  private:
  int32_t _internal_cpu_governor_manual_min_mhz() const;
  void _internal_set_cpu_governor_manual_min_mhz(int32_t value);
  public:

  // optional int32 cpu_governor_manual_max_mhz = 2;
  bool has_cpu_governor_manual_max_mhz() const;
  private:
  bool _internal_has_cpu_governor_manual_max_mhz() const;
  public:
  void clear_cpu_governor_manual_max_mhz();
  int32_t cpu_governor_manual_max_mhz() const;
  void set_cpu_governor_manual_max_mhz(int32_t value);
  private:
  int32_t _internal_cpu_governor_manual_max_mhz() const;
  void _internal_set_cpu_governor_manual_max_mhz(int32_t value);
  public:

  // optional int32 fsr_sharpness_min = 3;
  bool has_fsr_sharpness_min() const;
  private:
  bool _internal_has_fsr_sharpness_min() const;
  public:
  void clear_fsr_sharpness_min();
  int32_t fsr_sharpness_min() const;
  void set_fsr_sharpness_min(int32_t value);
  private:
  int32_t _internal_fsr_sharpness_min() const;
  void _internal_set_fsr_sharpness_min(int32_t value);
  public:

  // optional int32 fsr_sharpness_max = 4;
  bool has_fsr_sharpness_max() const;
  private:
  bool _internal_has_fsr_sharpness_max() const;
  public:
  void clear_fsr_sharpness_max();
  int32_t fsr_sharpness_max() const;
  void set_fsr_sharpness_max(int32_t value);
  private:
  int32_t _internal_fsr_sharpness_max() const;
  void _internal_set_fsr_sharpness_max(int32_t value);
  public:

  // optional int32 gpu_performance_manual_min_mhz = 5;
  bool has_gpu_performance_manual_min_mhz() const;
  private:
  bool _internal_has_gpu_performance_manual_min_mhz() const;
  public:
  void clear_gpu_performance_manual_min_mhz();
  int32_t gpu_performance_manual_min_mhz() const;
  void set_gpu_performance_manual_min_mhz(int32_t value);
  private:
  int32_t _internal_gpu_performance_manual_min_mhz() const;
  void _internal_set_gpu_performance_manual_min_mhz(int32_t value);
  public:

  // optional int32 gpu_performance_manual_max_mhz = 6;
  bool has_gpu_performance_manual_max_mhz() const;
  private:
  bool _internal_has_gpu_performance_manual_max_mhz() const;
  public:
  void clear_gpu_performance_manual_max_mhz();
  int32_t gpu_performance_manual_max_mhz() const;
  void set_gpu_performance_manual_max_mhz(int32_t value);
  private:
  int32_t _internal_gpu_performance_manual_max_mhz() const;
  void _internal_set_gpu_performance_manual_max_mhz(int32_t value);
  public:

  // optional bool perf_overlay_is_standalone = 7;
  bool has_perf_overlay_is_standalone() const;
  private:
  bool _internal_has_perf_overlay_is_standalone() const;
  public:
  void clear_perf_overlay_is_standalone();
  bool perf_overlay_is_standalone() const;
  void set_perf_overlay_is_standalone(bool value);
  private:
  bool _internal_perf_overlay_is_standalone() const;
  void _internal_set_perf_overlay_is_standalone(bool value);
  public:

  // optional bool is_dynamic_vrs_available = 8;
  bool has_is_dynamic_vrs_available() const;
  private:
  bool _internal_has_is_dynamic_vrs_available() const;
  public:
  void clear_is_dynamic_vrs_available();
  bool is_dynamic_vrs_available() const;
  void set_is_dynamic_vrs_available(bool value);
  private:
  bool _internal_is_dynamic_vrs_available() const;
  void _internal_set_is_dynamic_vrs_available(bool value);
  public:

  // optional bool is_manual_display_refresh_rate_available = 9;
  bool has_is_manual_display_refresh_rate_available() const;
  private:
  bool _internal_has_is_manual_display_refresh_rate_available() const;
  public:
  void clear_is_manual_display_refresh_rate_available();
  bool is_manual_display_refresh_rate_available() const;
  void set_is_manual_display_refresh_rate_available(bool value);
  private:
  bool _internal_is_manual_display_refresh_rate_available() const;
  void _internal_set_is_manual_display_refresh_rate_available(bool value);
  public:

  // optional bool is_nis_supported = 16;
  bool has_is_nis_supported() const;
  private:
  bool _internal_has_is_nis_supported() const;
  public:
  void clear_is_nis_supported();
  bool is_nis_supported() const;
  void set_is_nis_supported(bool value);
  private:
  bool _internal_is_nis_supported() const;
  void _internal_set_is_nis_supported(bool value);
  public:

  // optional int32 display_refresh_manual_hz_min = 11;
  bool has_display_refresh_manual_hz_min() const;
  private:
  bool _internal_has_display_refresh_manual_hz_min() const;
  public:
  void clear_display_refresh_manual_hz_min();
  int32_t display_refresh_manual_hz_min() const;
  void set_display_refresh_manual_hz_min(int32_t value);
  private:
  int32_t _internal_display_refresh_manual_hz_min() const;
  void _internal_set_display_refresh_manual_hz_min(int32_t value);
  public:

  // optional int32 display_refresh_manual_hz_max = 12;
  bool has_display_refresh_manual_hz_max() const;
  private:
  bool _internal_has_display_refresh_manual_hz_max() const;
  public:
  void clear_display_refresh_manual_hz_max();
  int32_t display_refresh_manual_hz_max() const;
  void set_display_refresh_manual_hz_max(int32_t value);
  private:
  int32_t _internal_display_refresh_manual_hz_max() const;
  void _internal_set_display_refresh_manual_hz_max(int32_t value);
  public:

  // optional int32 tdp_limit_min = 14;
  bool has_tdp_limit_min() const;
  private:
  bool _internal_has_tdp_limit_min() const;
  public:
  void clear_tdp_limit_min();
  int32_t tdp_limit_min() const;
  void set_tdp_limit_min(int32_t value);
  private:
  int32_t _internal_tdp_limit_min() const;
  void _internal_set_tdp_limit_min(int32_t value);
  public:

  // optional int32 tdp_limit_max = 15;
  bool has_tdp_limit_max() const;
  private:
  bool _internal_has_tdp_limit_max() const;
  public:
  void clear_tdp_limit_max();
  int32_t tdp_limit_max() const;
  void set_tdp_limit_max(int32_t value);
  private:
  int32_t _internal_tdp_limit_max() const;
  void _internal_set_tdp_limit_max(int32_t value);
  public:

  // optional int32 nis_sharpness_min = 17;
  bool has_nis_sharpness_min() const;
  private:
  bool _internal_has_nis_sharpness_min() const;
  public:
  void clear_nis_sharpness_min();
  int32_t nis_sharpness_min() const;
  void set_nis_sharpness_min(int32_t value);
  private:
  int32_t _internal_nis_sharpness_min() const;
  void _internal_set_nis_sharpness_min(int32_t value);
  public:

  // optional int32 nis_sharpness_max = 18;
  bool has_nis_sharpness_max() const;
  private:
  bool _internal_has_nis_sharpness_max() const;
  public:
  void clear_nis_sharpness_max();
  int32_t nis_sharpness_max() const;
  void set_nis_sharpness_max(int32_t value);
  private:
  int32_t _internal_nis_sharpness_max() const;
  void _internal_set_nis_sharpness_max(int32_t value);
  public:

  // optional int32 display_external_refresh_manual_hz_min = 19;
  bool has_display_external_refresh_manual_hz_min() const;
  private:
  bool _internal_has_display_external_refresh_manual_hz_min() const;
  public:
  void clear_display_external_refresh_manual_hz_min();
  int32_t display_external_refresh_manual_hz_min() const;
  void set_display_external_refresh_manual_hz_min(int32_t value);
  private:
  int32_t _internal_display_external_refresh_manual_hz_min() const;
  void _internal_set_display_external_refresh_manual_hz_min(int32_t value);
  public:

  // optional int32 display_external_refresh_manual_hz_max = 20;
  bool has_display_external_refresh_manual_hz_max() const;
  private:
  bool _internal_has_display_external_refresh_manual_hz_max() const;
  public:
  void clear_display_external_refresh_manual_hz_max();
  int32_t display_external_refresh_manual_hz_max() const;
  void set_display_external_refresh_manual_hz_max(int32_t value);
  private:
  int32_t _internal_display_external_refresh_manual_hz_max() const;
  void _internal_set_display_external_refresh_manual_hz_max(int32_t value);
  public:

  // optional bool is_tearing_supported = 22;
  bool has_is_tearing_supported() const;
  private:
  bool _internal_has_is_tearing_supported() const;
  public:
  void clear_is_tearing_supported();
  bool is_tearing_supported() const;
  void set_is_tearing_supported(bool value);
  private:
  bool _internal_is_tearing_supported() const;
  void _internal_set_is_tearing_supported(bool value);
  public:

  // optional bool is_vrr_supported = 23;
  bool has_is_vrr_supported() const;
  private:
  bool _internal_has_is_vrr_supported() const;
  public:
  void clear_is_vrr_supported();
  bool is_vrr_supported() const;
  void set_is_vrr_supported(bool value);
  private:
  bool _internal_is_vrr_supported() const;
  void _internal_set_is_vrr_supported(bool value);
  public:

  // optional bool is_dynamic_refresh_rate_in_steam_supported = 24;
  bool has_is_dynamic_refresh_rate_in_steam_supported() const;
  private:
  bool _internal_has_is_dynamic_refresh_rate_in_steam_supported() const;
  public:
  void clear_is_dynamic_refresh_rate_in_steam_supported();
  bool is_dynamic_refresh_rate_in_steam_supported() const;
  void set_is_dynamic_refresh_rate_in_steam_supported(bool value);
  private:
  bool _internal_is_dynamic_refresh_rate_in_steam_supported() const;
  void _internal_set_is_dynamic_refresh_rate_in_steam_supported(bool value);
  public:

  // optional bool is_split_scaling_and_filtering_supported = 25;
  bool has_is_split_scaling_and_filtering_supported() const;
  private:
  bool _internal_has_is_split_scaling_and_filtering_supported() const;
  public:
  void clear_is_split_scaling_and_filtering_supported();
  bool is_split_scaling_and_filtering_supported() const;
  void set_is_split_scaling_and_filtering_supported(bool value);
  private:
  bool _internal_is_split_scaling_and_filtering_supported() const;
  void _internal_set_is_split_scaling_and_filtering_supported(bool value);
  public:

  // optional bool is_hdr_supported = 28;
  bool has_is_hdr_supported() const;
  private:
  bool _internal_has_is_hdr_supported() const;
  public:
  void clear_is_hdr_supported();
  bool is_hdr_supported() const;
  void set_is_hdr_supported(bool value);
  private:
  bool _internal_is_hdr_supported() const;
  void _internal_set_is_hdr_supported(bool value);
  public:

  // optional int32 display_refresh_manual_hz_oc_max = 29;
  bool has_display_refresh_manual_hz_oc_max() const;
  private:
  bool _internal_has_display_refresh_manual_hz_oc_max() const;
  public:
  void clear_display_refresh_manual_hz_oc_max();
  int32_t display_refresh_manual_hz_oc_max() const;
  void set_display_refresh_manual_hz_oc_max(int32_t value);
  private:
  int32_t _internal_display_refresh_manual_hz_oc_max() const;
  void _internal_set_display_refresh_manual_hz_oc_max(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemPerfLimits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> gpu_performance_levels_available_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > fps_limit_options_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > fps_limit_options_external_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> split_scaling_filters_available_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> split_scaling_scalers_available_;
  int32_t cpu_governor_manual_min_mhz_;
  int32_t cpu_governor_manual_max_mhz_;
  int32_t fsr_sharpness_min_;
  int32_t fsr_sharpness_max_;
  int32_t gpu_performance_manual_min_mhz_;
  int32_t gpu_performance_manual_max_mhz_;
  bool perf_overlay_is_standalone_;
  bool is_dynamic_vrs_available_;
  bool is_manual_display_refresh_rate_available_;
  bool is_nis_supported_;
  int32_t display_refresh_manual_hz_min_;
  int32_t display_refresh_manual_hz_max_;
  int32_t tdp_limit_min_;
  int32_t tdp_limit_max_;
  int32_t nis_sharpness_min_;
  int32_t nis_sharpness_max_;
  int32_t display_external_refresh_manual_hz_min_;
  int32_t display_external_refresh_manual_hz_max_;
  bool is_tearing_supported_;
  bool is_vrr_supported_;
  bool is_dynamic_refresh_rate_in_steam_supported_;
  bool is_split_scaling_and_filtering_supported_;
  bool is_hdr_supported_;
  int32_t display_refresh_manual_hz_oc_max_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemPerfSettingsGlobal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemPerfSettingsGlobal) */ {
 public:
  inline CMsgSystemPerfSettingsGlobal() : CMsgSystemPerfSettingsGlobal(nullptr) {}
  ~CMsgSystemPerfSettingsGlobal() override;
  explicit constexpr CMsgSystemPerfSettingsGlobal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemPerfSettingsGlobal(const CMsgSystemPerfSettingsGlobal& from);
  CMsgSystemPerfSettingsGlobal(CMsgSystemPerfSettingsGlobal&& from) noexcept
    : CMsgSystemPerfSettingsGlobal() {
    *this = ::std::move(from);
  }

  inline CMsgSystemPerfSettingsGlobal& operator=(const CMsgSystemPerfSettingsGlobal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemPerfSettingsGlobal& operator=(CMsgSystemPerfSettingsGlobal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemPerfSettingsGlobal& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemPerfSettingsGlobal* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemPerfSettingsGlobal*>(
               &_CMsgSystemPerfSettingsGlobal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgSystemPerfSettingsGlobal& a, CMsgSystemPerfSettingsGlobal& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemPerfSettingsGlobal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemPerfSettingsGlobal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemPerfSettingsGlobal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemPerfSettingsGlobal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemPerfSettingsGlobal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemPerfSettingsGlobal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemPerfSettingsGlobal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemPerfSettingsGlobal";
  }
  protected:
  explicit CMsgSystemPerfSettingsGlobal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiagnosticUpdateRateFieldNumber = 1,
    kSystemTraceServiceStateFieldNumber = 2,
    kGraphicsProfilingServiceStateFieldNumber = 3,
    kPerfOverlayServiceStateFieldNumber = 4,
    kPerfOverlayLevelFieldNumber = 5,
    kIsShowPerfOverlayOverSteamEnabledFieldNumber = 6,
    kIsAdvancedSettingsEnabledFieldNumber = 7,
    kAllowExternalDisplayRefreshControlFieldNumber = 8,
    kIsHdrEnabledFieldNumber = 9,
    kHdrOnSdrTonemapOperatorFieldNumber = 12,
    kIsHdrDebugHeatmapEnabledFieldNumber = 13,
    kAllowExperimentalHdrFieldNumber = 16,
    kDebugForceHdrSupportFieldNumber = 18,
    kForceHdr10PqOutputDebugFieldNumber = 19,
    kSdrToHdrBrightnessFieldNumber = 17,
    kIsDisplayOcEnabledFieldNumber = 20,
    kIsColorManagementEnabledFieldNumber = 21,
    kForceHdrWideGammutForSdrFieldNumber = 15,
  };
  // optional float diagnostic_update_rate = 1;
  bool has_diagnostic_update_rate() const;
  private:
  bool _internal_has_diagnostic_update_rate() const;
  public:
  void clear_diagnostic_update_rate();
  float diagnostic_update_rate() const;
  void set_diagnostic_update_rate(float value);
  private:
  float _internal_diagnostic_update_rate() const;
  void _internal_set_diagnostic_update_rate(float value);
  public:

  // optional .ESystemServiceState system_trace_service_state = 2 [default = k_ESystemServiceState_Unavailable];
  bool has_system_trace_service_state() const;
  private:
  bool _internal_has_system_trace_service_state() const;
  public:
  void clear_system_trace_service_state();
  ::ESystemServiceState system_trace_service_state() const;
  void set_system_trace_service_state(::ESystemServiceState value);
  private:
  ::ESystemServiceState _internal_system_trace_service_state() const;
  void _internal_set_system_trace_service_state(::ESystemServiceState value);
  public:

  // optional .ESystemServiceState graphics_profiling_service_state = 3 [default = k_ESystemServiceState_Unavailable];
  bool has_graphics_profiling_service_state() const;
  private:
  bool _internal_has_graphics_profiling_service_state() const;
  public:
  void clear_graphics_profiling_service_state();
  ::ESystemServiceState graphics_profiling_service_state() const;
  void set_graphics_profiling_service_state(::ESystemServiceState value);
  private:
  ::ESystemServiceState _internal_graphics_profiling_service_state() const;
  void _internal_set_graphics_profiling_service_state(::ESystemServiceState value);
  public:

  // optional .ESystemServiceState perf_overlay_service_state = 4 [default = k_ESystemServiceState_Unavailable];
  bool has_perf_overlay_service_state() const;
  private:
  bool _internal_has_perf_overlay_service_state() const;
  public:
  void clear_perf_overlay_service_state();
  ::ESystemServiceState perf_overlay_service_state() const;
  void set_perf_overlay_service_state(::ESystemServiceState value);
  private:
  ::ESystemServiceState _internal_perf_overlay_service_state() const;
  void _internal_set_perf_overlay_service_state(::ESystemServiceState value);
  public:

  // optional .EGraphicsPerfOverlayLevel perf_overlay_level = 5 [default = k_EGraphicsPerfOverlayLevel_Hidden];
  bool has_perf_overlay_level() const;
  private:
  bool _internal_has_perf_overlay_level() const;
  public:
  void clear_perf_overlay_level();
  ::EGraphicsPerfOverlayLevel perf_overlay_level() const;
  void set_perf_overlay_level(::EGraphicsPerfOverlayLevel value);
  private:
  ::EGraphicsPerfOverlayLevel _internal_perf_overlay_level() const;
  void _internal_set_perf_overlay_level(::EGraphicsPerfOverlayLevel value);
  public:

  // optional bool is_show_perf_overlay_over_steam_enabled = 6;
  bool has_is_show_perf_overlay_over_steam_enabled() const;
  private:
  bool _internal_has_is_show_perf_overlay_over_steam_enabled() const;
  public:
  void clear_is_show_perf_overlay_over_steam_enabled();
  bool is_show_perf_overlay_over_steam_enabled() const;
  void set_is_show_perf_overlay_over_steam_enabled(bool value);
  private:
  bool _internal_is_show_perf_overlay_over_steam_enabled() const;
  void _internal_set_is_show_perf_overlay_over_steam_enabled(bool value);
  public:

  // optional bool is_advanced_settings_enabled = 7;
  bool has_is_advanced_settings_enabled() const;
  private:
  bool _internal_has_is_advanced_settings_enabled() const;
  public:
  void clear_is_advanced_settings_enabled();
  bool is_advanced_settings_enabled() const;
  void set_is_advanced_settings_enabled(bool value);
  private:
  bool _internal_is_advanced_settings_enabled() const;
  void _internal_set_is_advanced_settings_enabled(bool value);
  public:

  // optional bool allow_external_display_refresh_control = 8;
  bool has_allow_external_display_refresh_control() const;
  private:
  bool _internal_has_allow_external_display_refresh_control() const;
  public:
  void clear_allow_external_display_refresh_control();
  bool allow_external_display_refresh_control() const;
  void set_allow_external_display_refresh_control(bool value);
  private:
  bool _internal_allow_external_display_refresh_control() const;
  void _internal_set_allow_external_display_refresh_control(bool value);
  public:

  // optional bool is_hdr_enabled = 9;
  bool has_is_hdr_enabled() const;
  private:
  bool _internal_has_is_hdr_enabled() const;
  public:
  void clear_is_hdr_enabled();
  bool is_hdr_enabled() const;
  void set_is_hdr_enabled(bool value);
  private:
  bool _internal_is_hdr_enabled() const;
  void _internal_set_is_hdr_enabled(bool value);
  public:

  // optional .EHDRToneMapOperator hdr_on_sdr_tonemap_operator = 12 [default = k_EHDRToneMapOperator_Invalid];
  bool has_hdr_on_sdr_tonemap_operator() const;
  private:
  bool _internal_has_hdr_on_sdr_tonemap_operator() const;
  public:
  void clear_hdr_on_sdr_tonemap_operator();
  ::EHDRToneMapOperator hdr_on_sdr_tonemap_operator() const;
  void set_hdr_on_sdr_tonemap_operator(::EHDRToneMapOperator value);
  private:
  ::EHDRToneMapOperator _internal_hdr_on_sdr_tonemap_operator() const;
  void _internal_set_hdr_on_sdr_tonemap_operator(::EHDRToneMapOperator value);
  public:

  // optional bool is_hdr_debug_heatmap_enabled = 13;
  bool has_is_hdr_debug_heatmap_enabled() const;
  private:
  bool _internal_has_is_hdr_debug_heatmap_enabled() const;
  public:
  void clear_is_hdr_debug_heatmap_enabled();
  bool is_hdr_debug_heatmap_enabled() const;
  void set_is_hdr_debug_heatmap_enabled(bool value);
  private:
  bool _internal_is_hdr_debug_heatmap_enabled() const;
  void _internal_set_is_hdr_debug_heatmap_enabled(bool value);
  public:

  // optional bool allow_experimental_hdr = 16;
  bool has_allow_experimental_hdr() const;
  private:
  bool _internal_has_allow_experimental_hdr() const;
  public:
  void clear_allow_experimental_hdr();
  bool allow_experimental_hdr() const;
  void set_allow_experimental_hdr(bool value);
  private:
  bool _internal_allow_experimental_hdr() const;
  void _internal_set_allow_experimental_hdr(bool value);
  public:

  // optional bool debug_force_hdr_support = 18;
  bool has_debug_force_hdr_support() const;
  private:
  bool _internal_has_debug_force_hdr_support() const;
  public:
  void clear_debug_force_hdr_support();
  bool debug_force_hdr_support() const;
  void set_debug_force_hdr_support(bool value);
  private:
  bool _internal_debug_force_hdr_support() const;
  void _internal_set_debug_force_hdr_support(bool value);
  public:

  // optional bool force_hdr_10pq_output_debug = 19;
  bool has_force_hdr_10pq_output_debug() const;
  private:
  bool _internal_has_force_hdr_10pq_output_debug() const;
  public:
  void clear_force_hdr_10pq_output_debug();
  bool force_hdr_10pq_output_debug() const;
  void set_force_hdr_10pq_output_debug(bool value);
  private:
  bool _internal_force_hdr_10pq_output_debug() const;
  void _internal_set_force_hdr_10pq_output_debug(bool value);
  public:

  // optional float sdr_to_hdr_brightness = 17;
  bool has_sdr_to_hdr_brightness() const;
  private:
  bool _internal_has_sdr_to_hdr_brightness() const;
  public:
  void clear_sdr_to_hdr_brightness();
  float sdr_to_hdr_brightness() const;
  void set_sdr_to_hdr_brightness(float value);
  private:
  float _internal_sdr_to_hdr_brightness() const;
  void _internal_set_sdr_to_hdr_brightness(float value);
  public:

  // optional bool is_display_oc_enabled = 20;
  bool has_is_display_oc_enabled() const;
  private:
  bool _internal_has_is_display_oc_enabled() const;
  public:
  void clear_is_display_oc_enabled();
  bool is_display_oc_enabled() const;
  void set_is_display_oc_enabled(bool value);
  private:
  bool _internal_is_display_oc_enabled() const;
  void _internal_set_is_display_oc_enabled(bool value);
  public:

  // optional bool is_color_management_enabled = 21;
  bool has_is_color_management_enabled() const;
  private:
  bool _internal_has_is_color_management_enabled() const;
  public:
  void clear_is_color_management_enabled();
  bool is_color_management_enabled() const;
  void set_is_color_management_enabled(bool value);
  private:
  bool _internal_is_color_management_enabled() const;
  void _internal_set_is_color_management_enabled(bool value);
  public:

  // optional bool force_hdr_wide_gammut_for_sdr = 15 [default = true];
  bool has_force_hdr_wide_gammut_for_sdr() const;
  private:
  bool _internal_has_force_hdr_wide_gammut_for_sdr() const;
  public:
  void clear_force_hdr_wide_gammut_for_sdr();
  bool force_hdr_wide_gammut_for_sdr() const;
  void set_force_hdr_wide_gammut_for_sdr(bool value);
  private:
  bool _internal_force_hdr_wide_gammut_for_sdr() const;
  void _internal_set_force_hdr_wide_gammut_for_sdr(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemPerfSettingsGlobal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float diagnostic_update_rate_;
  int system_trace_service_state_;
  int graphics_profiling_service_state_;
  int perf_overlay_service_state_;
  int perf_overlay_level_;
  bool is_show_perf_overlay_over_steam_enabled_;
  bool is_advanced_settings_enabled_;
  bool allow_external_display_refresh_control_;
  bool is_hdr_enabled_;
  int hdr_on_sdr_tonemap_operator_;
  bool is_hdr_debug_heatmap_enabled_;
  bool allow_experimental_hdr_;
  bool debug_force_hdr_support_;
  bool force_hdr_10pq_output_debug_;
  float sdr_to_hdr_brightness_;
  bool is_display_oc_enabled_;
  bool is_color_management_enabled_;
  bool force_hdr_wide_gammut_for_sdr_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemPerfSettingsPerApp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemPerfSettingsPerApp) */ {
 public:
  inline CMsgSystemPerfSettingsPerApp() : CMsgSystemPerfSettingsPerApp(nullptr) {}
  ~CMsgSystemPerfSettingsPerApp() override;
  explicit constexpr CMsgSystemPerfSettingsPerApp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemPerfSettingsPerApp(const CMsgSystemPerfSettingsPerApp& from);
  CMsgSystemPerfSettingsPerApp(CMsgSystemPerfSettingsPerApp&& from) noexcept
    : CMsgSystemPerfSettingsPerApp() {
    *this = ::std::move(from);
  }

  inline CMsgSystemPerfSettingsPerApp& operator=(const CMsgSystemPerfSettingsPerApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemPerfSettingsPerApp& operator=(CMsgSystemPerfSettingsPerApp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemPerfSettingsPerApp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemPerfSettingsPerApp* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemPerfSettingsPerApp*>(
               &_CMsgSystemPerfSettingsPerApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgSystemPerfSettingsPerApp& a, CMsgSystemPerfSettingsPerApp& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemPerfSettingsPerApp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemPerfSettingsPerApp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemPerfSettingsPerApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemPerfSettingsPerApp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemPerfSettingsPerApp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemPerfSettingsPerApp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemPerfSettingsPerApp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemPerfSettingsPerApp";
  }
  protected:
  explicit CMsgSystemPerfSettingsPerApp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpuPerformanceManualMhzFieldNumber = 1,
    kFpsLimitFieldNumber = 2,
    kTdpLimitFieldNumber = 5,
    kCpuGovernorFieldNumber = 6,
    kCpuGovernorManualMhzFieldNumber = 7,
    kIsVariableResolutionEnabledFieldNumber = 3,
    kIsDynamicRefreshRateEnabledFieldNumber = 4,
    kIsFpsLimitEnabledFieldNumber = 10,
    kIsTdpLimitEnabledFieldNumber = 11,
    kScalingFilterFieldNumber = 8,
    kFsrSharpnessFieldNumber = 9,
    kDisplayRefreshManualHzFieldNumber = 13,
    kGpuPerformanceLevelFieldNumber = 15,
    kNisSharpnessFieldNumber = 16,
    kIsLowLatencyModeEnabledFieldNumber = 12,
    kIsGamePerfProfileEnabledFieldNumber = 14,
    kIsTearingEnabledFieldNumber = 19,
    kIsVrrEnabledFieldNumber = 20,
    kDisplayExternalRefreshManualHzFieldNumber = 17,
    kFpsLimitExternalFieldNumber = 18,
    kIsCompositeDebugEnabledFieldNumber = 21,
    kForceCompositeFieldNumber = 22,
    kUseDynamicRefreshRateInSteamFieldNumber = 23,
    kSplitScalingFilterFieldNumber = 24,
    kSplitScalingScalerFieldNumber = 25,
  };
  // optional int32 gpu_performance_manual_mhz = 1;
  bool has_gpu_performance_manual_mhz() const;
  private:
  bool _internal_has_gpu_performance_manual_mhz() const;
  public:
  void clear_gpu_performance_manual_mhz();
  int32_t gpu_performance_manual_mhz() const;
  void set_gpu_performance_manual_mhz(int32_t value);
  private:
  int32_t _internal_gpu_performance_manual_mhz() const;
  void _internal_set_gpu_performance_manual_mhz(int32_t value);
  public:

  // optional int32 fps_limit = 2;
  bool has_fps_limit() const;
  private:
  bool _internal_has_fps_limit() const;
  public:
  void clear_fps_limit();
  int32_t fps_limit() const;
  void set_fps_limit(int32_t value);
  private:
  int32_t _internal_fps_limit() const;
  void _internal_set_fps_limit(int32_t value);
  public:

  // optional int32 tdp_limit = 5;
  bool has_tdp_limit() const;
  private:
  bool _internal_has_tdp_limit() const;
  public:
  void clear_tdp_limit();
  int32_t tdp_limit() const;
  void set_tdp_limit(int32_t value);
  private:
  int32_t _internal_tdp_limit() const;
  void _internal_set_tdp_limit(int32_t value);
  public:

  // optional .ECPUGovernor cpu_governor = 6 [default = k_ECPUGovernor_Invalid];
  bool has_cpu_governor() const;
  private:
  bool _internal_has_cpu_governor() const;
  public:
  void clear_cpu_governor();
  ::ECPUGovernor cpu_governor() const;
  void set_cpu_governor(::ECPUGovernor value);
  private:
  ::ECPUGovernor _internal_cpu_governor() const;
  void _internal_set_cpu_governor(::ECPUGovernor value);
  public:

  // optional int32 cpu_governor_manual_mhz = 7;
  bool has_cpu_governor_manual_mhz() const;
  private:
  bool _internal_has_cpu_governor_manual_mhz() const;
  public:
  void clear_cpu_governor_manual_mhz();
  int32_t cpu_governor_manual_mhz() const;
  void set_cpu_governor_manual_mhz(int32_t value);
  private:
  int32_t _internal_cpu_governor_manual_mhz() const;
  void _internal_set_cpu_governor_manual_mhz(int32_t value);
  public:

  // optional bool is_variable_resolution_enabled = 3;
  bool has_is_variable_resolution_enabled() const;
  private:
  bool _internal_has_is_variable_resolution_enabled() const;
  public:
  void clear_is_variable_resolution_enabled();
  bool is_variable_resolution_enabled() const;
  void set_is_variable_resolution_enabled(bool value);
  private:
  bool _internal_is_variable_resolution_enabled() const;
  void _internal_set_is_variable_resolution_enabled(bool value);
  public:

  // optional bool is_dynamic_refresh_rate_enabled = 4;
  bool has_is_dynamic_refresh_rate_enabled() const;
  private:
  bool _internal_has_is_dynamic_refresh_rate_enabled() const;
  public:
  void clear_is_dynamic_refresh_rate_enabled();
  bool is_dynamic_refresh_rate_enabled() const;
  void set_is_dynamic_refresh_rate_enabled(bool value);
  private:
  bool _internal_is_dynamic_refresh_rate_enabled() const;
  void _internal_set_is_dynamic_refresh_rate_enabled(bool value);
  public:

  // optional bool is_fps_limit_enabled = 10;
  bool has_is_fps_limit_enabled() const;
  private:
  bool _internal_has_is_fps_limit_enabled() const;
  public:
  void clear_is_fps_limit_enabled();
  bool is_fps_limit_enabled() const;
  void set_is_fps_limit_enabled(bool value);
  private:
  bool _internal_is_fps_limit_enabled() const;
  void _internal_set_is_fps_limit_enabled(bool value);
  public:

  // optional bool is_tdp_limit_enabled = 11;
  bool has_is_tdp_limit_enabled() const;
  private:
  bool _internal_has_is_tdp_limit_enabled() const;
  public:
  void clear_is_tdp_limit_enabled();
  bool is_tdp_limit_enabled() const;
  void set_is_tdp_limit_enabled(bool value);
  private:
  bool _internal_is_tdp_limit_enabled() const;
  void _internal_set_is_tdp_limit_enabled(bool value);
  public:

  // optional int32 scaling_filter = 8;
  bool has_scaling_filter() const;
  private:
  bool _internal_has_scaling_filter() const;
  public:
  void clear_scaling_filter();
  int32_t scaling_filter() const;
  void set_scaling_filter(int32_t value);
  private:
  int32_t _internal_scaling_filter() const;
  void _internal_set_scaling_filter(int32_t value);
  public:

  // optional int32 fsr_sharpness = 9;
  bool has_fsr_sharpness() const;
  private:
  bool _internal_has_fsr_sharpness() const;
  public:
  void clear_fsr_sharpness();
  int32_t fsr_sharpness() const;
  void set_fsr_sharpness(int32_t value);
  private:
  int32_t _internal_fsr_sharpness() const;
  void _internal_set_fsr_sharpness(int32_t value);
  public:

  // optional int32 display_refresh_manual_hz = 13;
  bool has_display_refresh_manual_hz() const;
  private:
  bool _internal_has_display_refresh_manual_hz() const;
  public:
  void clear_display_refresh_manual_hz();
  int32_t display_refresh_manual_hz() const;
  void set_display_refresh_manual_hz(int32_t value);
  private:
  int32_t _internal_display_refresh_manual_hz() const;
  void _internal_set_display_refresh_manual_hz(int32_t value);
  public:

  // optional .EGPUPerformanceLevel gpu_performance_level = 15 [default = k_EGPUPerformanceLevel_Invalid];
  bool has_gpu_performance_level() const;
  private:
  bool _internal_has_gpu_performance_level() const;
  public:
  void clear_gpu_performance_level();
  ::EGPUPerformanceLevel gpu_performance_level() const;
  void set_gpu_performance_level(::EGPUPerformanceLevel value);
  private:
  ::EGPUPerformanceLevel _internal_gpu_performance_level() const;
  void _internal_set_gpu_performance_level(::EGPUPerformanceLevel value);
  public:

  // optional int32 nis_sharpness = 16;
  bool has_nis_sharpness() const;
  private:
  bool _internal_has_nis_sharpness() const;
  public:
  void clear_nis_sharpness();
  int32_t nis_sharpness() const;
  void set_nis_sharpness(int32_t value);
  private:
  int32_t _internal_nis_sharpness() const;
  void _internal_set_nis_sharpness(int32_t value);
  public:

  // optional bool is_low_latency_mode_enabled = 12;
  bool has_is_low_latency_mode_enabled() const;
  private:
  bool _internal_has_is_low_latency_mode_enabled() const;
  public:
  void clear_is_low_latency_mode_enabled();
  bool is_low_latency_mode_enabled() const;
  void set_is_low_latency_mode_enabled(bool value);
  private:
  bool _internal_is_low_latency_mode_enabled() const;
  void _internal_set_is_low_latency_mode_enabled(bool value);
  public:

  // optional bool is_game_perf_profile_enabled = 14;
  bool has_is_game_perf_profile_enabled() const;
  private:
  bool _internal_has_is_game_perf_profile_enabled() const;
  public:
  void clear_is_game_perf_profile_enabled();
  bool is_game_perf_profile_enabled() const;
  void set_is_game_perf_profile_enabled(bool value);
  private:
  bool _internal_is_game_perf_profile_enabled() const;
  void _internal_set_is_game_perf_profile_enabled(bool value);
  public:

  // optional bool is_tearing_enabled = 19;
  bool has_is_tearing_enabled() const;
  private:
  bool _internal_has_is_tearing_enabled() const;
  public:
  void clear_is_tearing_enabled();
  bool is_tearing_enabled() const;
  void set_is_tearing_enabled(bool value);
  private:
  bool _internal_is_tearing_enabled() const;
  void _internal_set_is_tearing_enabled(bool value);
  public:

  // optional bool is_vrr_enabled = 20;
  bool has_is_vrr_enabled() const;
  private:
  bool _internal_has_is_vrr_enabled() const;
  public:
  void clear_is_vrr_enabled();
  bool is_vrr_enabled() const;
  void set_is_vrr_enabled(bool value);
  private:
  bool _internal_is_vrr_enabled() const;
  void _internal_set_is_vrr_enabled(bool value);
  public:

  // optional int32 display_external_refresh_manual_hz = 17;
  bool has_display_external_refresh_manual_hz() const;
  private:
  bool _internal_has_display_external_refresh_manual_hz() const;
  public:
  void clear_display_external_refresh_manual_hz();
  int32_t display_external_refresh_manual_hz() const;
  void set_display_external_refresh_manual_hz(int32_t value);
  private:
  int32_t _internal_display_external_refresh_manual_hz() const;
  void _internal_set_display_external_refresh_manual_hz(int32_t value);
  public:

  // optional int32 fps_limit_external = 18;
  bool has_fps_limit_external() const;
  private:
  bool _internal_has_fps_limit_external() const;
  public:
  void clear_fps_limit_external();
  int32_t fps_limit_external() const;
  void set_fps_limit_external(int32_t value);
  private:
  int32_t _internal_fps_limit_external() const;
  void _internal_set_fps_limit_external(int32_t value);
  public:

  // optional bool is_composite_debug_enabled = 21;
  bool has_is_composite_debug_enabled() const;
  private:
  bool _internal_has_is_composite_debug_enabled() const;
  public:
  void clear_is_composite_debug_enabled();
  bool is_composite_debug_enabled() const;
  void set_is_composite_debug_enabled(bool value);
  private:
  bool _internal_is_composite_debug_enabled() const;
  void _internal_set_is_composite_debug_enabled(bool value);
  public:

  // optional bool force_composite = 22;
  bool has_force_composite() const;
  private:
  bool _internal_has_force_composite() const;
  public:
  void clear_force_composite();
  bool force_composite() const;
  void set_force_composite(bool value);
  private:
  bool _internal_force_composite() const;
  void _internal_set_force_composite(bool value);
  public:

  // optional bool use_dynamic_refresh_rate_in_steam = 23;
  bool has_use_dynamic_refresh_rate_in_steam() const;
  private:
  bool _internal_has_use_dynamic_refresh_rate_in_steam() const;
  public:
  void clear_use_dynamic_refresh_rate_in_steam();
  bool use_dynamic_refresh_rate_in_steam() const;
  void set_use_dynamic_refresh_rate_in_steam(bool value);
  private:
  bool _internal_use_dynamic_refresh_rate_in_steam() const;
  void _internal_set_use_dynamic_refresh_rate_in_steam(bool value);
  public:

  // optional .ESplitScalingFilter split_scaling_filter = 24 [default = k_ESplitScalingFilter_Invalid];
  bool has_split_scaling_filter() const;
  private:
  bool _internal_has_split_scaling_filter() const;
  public:
  void clear_split_scaling_filter();
  ::ESplitScalingFilter split_scaling_filter() const;
  void set_split_scaling_filter(::ESplitScalingFilter value);
  private:
  ::ESplitScalingFilter _internal_split_scaling_filter() const;
  void _internal_set_split_scaling_filter(::ESplitScalingFilter value);
  public:

  // optional .ESplitScalingScaler split_scaling_scaler = 25 [default = k_ESplitScalingScaler_Invalid];
  bool has_split_scaling_scaler() const;
  private:
  bool _internal_has_split_scaling_scaler() const;
  public:
  void clear_split_scaling_scaler();
  ::ESplitScalingScaler split_scaling_scaler() const;
  void set_split_scaling_scaler(::ESplitScalingScaler value);
  private:
  ::ESplitScalingScaler _internal_split_scaling_scaler() const;
  void _internal_set_split_scaling_scaler(::ESplitScalingScaler value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemPerfSettingsPerApp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t gpu_performance_manual_mhz_;
  int32_t fps_limit_;
  int32_t tdp_limit_;
  int cpu_governor_;
  int32_t cpu_governor_manual_mhz_;
  bool is_variable_resolution_enabled_;
  bool is_dynamic_refresh_rate_enabled_;
  bool is_fps_limit_enabled_;
  bool is_tdp_limit_enabled_;
  int32_t scaling_filter_;
  int32_t fsr_sharpness_;
  int32_t display_refresh_manual_hz_;
  int gpu_performance_level_;
  int32_t nis_sharpness_;
  bool is_low_latency_mode_enabled_;
  bool is_game_perf_profile_enabled_;
  bool is_tearing_enabled_;
  bool is_vrr_enabled_;
  int32_t display_external_refresh_manual_hz_;
  int32_t fps_limit_external_;
  bool is_composite_debug_enabled_;
  bool force_composite_;
  bool use_dynamic_refresh_rate_in_steam_;
  int split_scaling_filter_;
  int split_scaling_scaler_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemPerfSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemPerfSettings) */ {
 public:
  inline CMsgSystemPerfSettings() : CMsgSystemPerfSettings(nullptr) {}
  ~CMsgSystemPerfSettings() override;
  explicit constexpr CMsgSystemPerfSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemPerfSettings(const CMsgSystemPerfSettings& from);
  CMsgSystemPerfSettings(CMsgSystemPerfSettings&& from) noexcept
    : CMsgSystemPerfSettings() {
    *this = ::std::move(from);
  }

  inline CMsgSystemPerfSettings& operator=(const CMsgSystemPerfSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemPerfSettings& operator=(CMsgSystemPerfSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemPerfSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemPerfSettings* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemPerfSettings*>(
               &_CMsgSystemPerfSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgSystemPerfSettings& a, CMsgSystemPerfSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemPerfSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemPerfSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemPerfSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemPerfSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemPerfSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemPerfSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemPerfSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemPerfSettings";
  }
  protected:
  explicit CMsgSystemPerfSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalFieldNumber = 1,
    kPerAppFieldNumber = 2,
  };
  // optional .CMsgSystemPerfSettingsGlobal global = 1;
  bool has_global() const;
  private:
  bool _internal_has_global() const;
  public:
  void clear_global();
  const ::CMsgSystemPerfSettingsGlobal& global() const;
  PROTOBUF_NODISCARD ::CMsgSystemPerfSettingsGlobal* release_global();
  ::CMsgSystemPerfSettingsGlobal* mutable_global();
  void set_allocated_global(::CMsgSystemPerfSettingsGlobal* global);
  private:
  const ::CMsgSystemPerfSettingsGlobal& _internal_global() const;
  ::CMsgSystemPerfSettingsGlobal* _internal_mutable_global();
  public:
  void unsafe_arena_set_allocated_global(
      ::CMsgSystemPerfSettingsGlobal* global);
  ::CMsgSystemPerfSettingsGlobal* unsafe_arena_release_global();

  // optional .CMsgSystemPerfSettingsPerApp per_app = 2;
  bool has_per_app() const;
  private:
  bool _internal_has_per_app() const;
  public:
  void clear_per_app();
  const ::CMsgSystemPerfSettingsPerApp& per_app() const;
  PROTOBUF_NODISCARD ::CMsgSystemPerfSettingsPerApp* release_per_app();
  ::CMsgSystemPerfSettingsPerApp* mutable_per_app();
  void set_allocated_per_app(::CMsgSystemPerfSettingsPerApp* per_app);
  private:
  const ::CMsgSystemPerfSettingsPerApp& _internal_per_app() const;
  ::CMsgSystemPerfSettingsPerApp* _internal_mutable_per_app();
  public:
  void unsafe_arena_set_allocated_per_app(
      ::CMsgSystemPerfSettingsPerApp* per_app);
  ::CMsgSystemPerfSettingsPerApp* unsafe_arena_release_per_app();

  // @@protoc_insertion_point(class_scope:CMsgSystemPerfSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgSystemPerfSettingsGlobal* global_;
  ::CMsgSystemPerfSettingsPerApp* per_app_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemPerfSettingsV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemPerfSettingsV1) */ {
 public:
  inline CMsgSystemPerfSettingsV1() : CMsgSystemPerfSettingsV1(nullptr) {}
  ~CMsgSystemPerfSettingsV1() override;
  explicit constexpr CMsgSystemPerfSettingsV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemPerfSettingsV1(const CMsgSystemPerfSettingsV1& from);
  CMsgSystemPerfSettingsV1(CMsgSystemPerfSettingsV1&& from) noexcept
    : CMsgSystemPerfSettingsV1() {
    *this = ::std::move(from);
  }

  inline CMsgSystemPerfSettingsV1& operator=(const CMsgSystemPerfSettingsV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemPerfSettingsV1& operator=(CMsgSystemPerfSettingsV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemPerfSettingsV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemPerfSettingsV1* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemPerfSettingsV1*>(
               &_CMsgSystemPerfSettingsV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgSystemPerfSettingsV1& a, CMsgSystemPerfSettingsV1& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemPerfSettingsV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemPerfSettingsV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemPerfSettingsV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemPerfSettingsV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemPerfSettingsV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemPerfSettingsV1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemPerfSettingsV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemPerfSettingsV1";
  }
  protected:
  explicit CMsgSystemPerfSettingsV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiagnosticUpdateRateFieldNumber = 1,
    kSystemTraceServiceStateFieldNumber = 2,
    kGraphicsProfilingServiceStateFieldNumber = 3,
    kPerfOverlayServiceStateFieldNumber = 4,
    kPerfOverlayLevelFieldNumber = 5,
    kGpuPerformanceLevelFieldNumber = 6,
    kGpuPerformanceManualMhzFieldNumber = 7,
    kFpsLimitFieldNumber = 8,
    kTdpLimitFieldNumber = 11,
    kCpuGovernorFieldNumber = 12,
    kCpuGovernorManualMhzFieldNumber = 13,
    kIsVariableResolutionEnabledFieldNumber = 9,
    kIsDynamicRefreshRateEnabledFieldNumber = 10,
    kIsFpsLimitEnabledFieldNumber = 16,
    kIsTdpLimitEnabledFieldNumber = 17,
    kScalingFilterFieldNumber = 14,
    kFsrSharpnessFieldNumber = 15,
    kIsShowPerfOverlayOverSteamEnabledFieldNumber = 18,
    kIsLowLatencyModeEnabledFieldNumber = 19,
    kIsGamePerfProfileEnabledFieldNumber = 21,
    kDisplayRefreshManualHzFieldNumber = 20,
  };
  // optional float diagnostic_update_rate = 1;
  bool has_diagnostic_update_rate() const;
  private:
  bool _internal_has_diagnostic_update_rate() const;
  public:
  void clear_diagnostic_update_rate();
  float diagnostic_update_rate() const;
  void set_diagnostic_update_rate(float value);
  private:
  float _internal_diagnostic_update_rate() const;
  void _internal_set_diagnostic_update_rate(float value);
  public:

  // optional .ESystemServiceState system_trace_service_state = 2 [default = k_ESystemServiceState_Unavailable];
  bool has_system_trace_service_state() const;
  private:
  bool _internal_has_system_trace_service_state() const;
  public:
  void clear_system_trace_service_state();
  ::ESystemServiceState system_trace_service_state() const;
  void set_system_trace_service_state(::ESystemServiceState value);
  private:
  ::ESystemServiceState _internal_system_trace_service_state() const;
  void _internal_set_system_trace_service_state(::ESystemServiceState value);
  public:

  // optional .ESystemServiceState graphics_profiling_service_state = 3 [default = k_ESystemServiceState_Unavailable];
  bool has_graphics_profiling_service_state() const;
  private:
  bool _internal_has_graphics_profiling_service_state() const;
  public:
  void clear_graphics_profiling_service_state();
  ::ESystemServiceState graphics_profiling_service_state() const;
  void set_graphics_profiling_service_state(::ESystemServiceState value);
  private:
  ::ESystemServiceState _internal_graphics_profiling_service_state() const;
  void _internal_set_graphics_profiling_service_state(::ESystemServiceState value);
  public:

  // optional .ESystemServiceState perf_overlay_service_state = 4 [default = k_ESystemServiceState_Unavailable];
  bool has_perf_overlay_service_state() const;
  private:
  bool _internal_has_perf_overlay_service_state() const;
  public:
  void clear_perf_overlay_service_state();
  ::ESystemServiceState perf_overlay_service_state() const;
  void set_perf_overlay_service_state(::ESystemServiceState value);
  private:
  ::ESystemServiceState _internal_perf_overlay_service_state() const;
  void _internal_set_perf_overlay_service_state(::ESystemServiceState value);
  public:

  // optional .EGraphicsPerfOverlayLevel perf_overlay_level = 5 [default = k_EGraphicsPerfOverlayLevel_Hidden];
  bool has_perf_overlay_level() const;
  private:
  bool _internal_has_perf_overlay_level() const;
  public:
  void clear_perf_overlay_level();
  ::EGraphicsPerfOverlayLevel perf_overlay_level() const;
  void set_perf_overlay_level(::EGraphicsPerfOverlayLevel value);
  private:
  ::EGraphicsPerfOverlayLevel _internal_perf_overlay_level() const;
  void _internal_set_perf_overlay_level(::EGraphicsPerfOverlayLevel value);
  public:

  // optional .EGPUPerformanceLevel gpu_performance_level = 6 [default = k_EGPUPerformanceLevel_Invalid];
  bool has_gpu_performance_level() const;
  private:
  bool _internal_has_gpu_performance_level() const;
  public:
  void clear_gpu_performance_level();
  ::EGPUPerformanceLevel gpu_performance_level() const;
  void set_gpu_performance_level(::EGPUPerformanceLevel value);
  private:
  ::EGPUPerformanceLevel _internal_gpu_performance_level() const;
  void _internal_set_gpu_performance_level(::EGPUPerformanceLevel value);
  public:

  // optional int32 gpu_performance_manual_mhz = 7;
  bool has_gpu_performance_manual_mhz() const;
  private:
  bool _internal_has_gpu_performance_manual_mhz() const;
  public:
  void clear_gpu_performance_manual_mhz();
  int32_t gpu_performance_manual_mhz() const;
  void set_gpu_performance_manual_mhz(int32_t value);
  private:
  int32_t _internal_gpu_performance_manual_mhz() const;
  void _internal_set_gpu_performance_manual_mhz(int32_t value);
  public:

  // optional int32 fps_limit = 8;
  bool has_fps_limit() const;
  private:
  bool _internal_has_fps_limit() const;
  public:
  void clear_fps_limit();
  int32_t fps_limit() const;
  void set_fps_limit(int32_t value);
  private:
  int32_t _internal_fps_limit() const;
  void _internal_set_fps_limit(int32_t value);
  public:

  // optional int32 tdp_limit = 11;
  bool has_tdp_limit() const;
  private:
  bool _internal_has_tdp_limit() const;
  public:
  void clear_tdp_limit();
  int32_t tdp_limit() const;
  void set_tdp_limit(int32_t value);
  private:
  int32_t _internal_tdp_limit() const;
  void _internal_set_tdp_limit(int32_t value);
  public:

  // optional .ECPUGovernor cpu_governor = 12 [default = k_ECPUGovernor_Invalid];
  bool has_cpu_governor() const;
  private:
  bool _internal_has_cpu_governor() const;
  public:
  void clear_cpu_governor();
  ::ECPUGovernor cpu_governor() const;
  void set_cpu_governor(::ECPUGovernor value);
  private:
  ::ECPUGovernor _internal_cpu_governor() const;
  void _internal_set_cpu_governor(::ECPUGovernor value);
  public:

  // optional int32 cpu_governor_manual_mhz = 13;
  bool has_cpu_governor_manual_mhz() const;
  private:
  bool _internal_has_cpu_governor_manual_mhz() const;
  public:
  void clear_cpu_governor_manual_mhz();
  int32_t cpu_governor_manual_mhz() const;
  void set_cpu_governor_manual_mhz(int32_t value);
  private:
  int32_t _internal_cpu_governor_manual_mhz() const;
  void _internal_set_cpu_governor_manual_mhz(int32_t value);
  public:

  // optional bool is_variable_resolution_enabled = 9;
  bool has_is_variable_resolution_enabled() const;
  private:
  bool _internal_has_is_variable_resolution_enabled() const;
  public:
  void clear_is_variable_resolution_enabled();
  bool is_variable_resolution_enabled() const;
  void set_is_variable_resolution_enabled(bool value);
  private:
  bool _internal_is_variable_resolution_enabled() const;
  void _internal_set_is_variable_resolution_enabled(bool value);
  public:

  // optional bool is_dynamic_refresh_rate_enabled = 10;
  bool has_is_dynamic_refresh_rate_enabled() const;
  private:
  bool _internal_has_is_dynamic_refresh_rate_enabled() const;
  public:
  void clear_is_dynamic_refresh_rate_enabled();
  bool is_dynamic_refresh_rate_enabled() const;
  void set_is_dynamic_refresh_rate_enabled(bool value);
  private:
  bool _internal_is_dynamic_refresh_rate_enabled() const;
  void _internal_set_is_dynamic_refresh_rate_enabled(bool value);
  public:

  // optional bool is_fps_limit_enabled = 16;
  bool has_is_fps_limit_enabled() const;
  private:
  bool _internal_has_is_fps_limit_enabled() const;
  public:
  void clear_is_fps_limit_enabled();
  bool is_fps_limit_enabled() const;
  void set_is_fps_limit_enabled(bool value);
  private:
  bool _internal_is_fps_limit_enabled() const;
  void _internal_set_is_fps_limit_enabled(bool value);
  public:

  // optional bool is_tdp_limit_enabled = 17;
  bool has_is_tdp_limit_enabled() const;
  private:
  bool _internal_has_is_tdp_limit_enabled() const;
  public:
  void clear_is_tdp_limit_enabled();
  bool is_tdp_limit_enabled() const;
  void set_is_tdp_limit_enabled(bool value);
  private:
  bool _internal_is_tdp_limit_enabled() const;
  void _internal_set_is_tdp_limit_enabled(bool value);
  public:

  // optional int32 scaling_filter = 14;
  bool has_scaling_filter() const;
  private:
  bool _internal_has_scaling_filter() const;
  public:
  void clear_scaling_filter();
  int32_t scaling_filter() const;
  void set_scaling_filter(int32_t value);
  private:
  int32_t _internal_scaling_filter() const;
  void _internal_set_scaling_filter(int32_t value);
  public:

  // optional int32 fsr_sharpness = 15;
  bool has_fsr_sharpness() const;
  private:
  bool _internal_has_fsr_sharpness() const;
  public:
  void clear_fsr_sharpness();
  int32_t fsr_sharpness() const;
  void set_fsr_sharpness(int32_t value);
  private:
  int32_t _internal_fsr_sharpness() const;
  void _internal_set_fsr_sharpness(int32_t value);
  public:

  // optional bool is_show_perf_overlay_over_steam_enabled = 18;
  bool has_is_show_perf_overlay_over_steam_enabled() const;
  private:
  bool _internal_has_is_show_perf_overlay_over_steam_enabled() const;
  public:
  void clear_is_show_perf_overlay_over_steam_enabled();
  bool is_show_perf_overlay_over_steam_enabled() const;
  void set_is_show_perf_overlay_over_steam_enabled(bool value);
  private:
  bool _internal_is_show_perf_overlay_over_steam_enabled() const;
  void _internal_set_is_show_perf_overlay_over_steam_enabled(bool value);
  public:

  // optional bool is_low_latency_mode_enabled = 19;
  bool has_is_low_latency_mode_enabled() const;
  private:
  bool _internal_has_is_low_latency_mode_enabled() const;
  public:
  void clear_is_low_latency_mode_enabled();
  bool is_low_latency_mode_enabled() const;
  void set_is_low_latency_mode_enabled(bool value);
  private:
  bool _internal_is_low_latency_mode_enabled() const;
  void _internal_set_is_low_latency_mode_enabled(bool value);
  public:

  // optional bool is_game_perf_profile_enabled = 21;
  bool has_is_game_perf_profile_enabled() const;
  private:
  bool _internal_has_is_game_perf_profile_enabled() const;
  public:
  void clear_is_game_perf_profile_enabled();
  bool is_game_perf_profile_enabled() const;
  void set_is_game_perf_profile_enabled(bool value);
  private:
  bool _internal_is_game_perf_profile_enabled() const;
  void _internal_set_is_game_perf_profile_enabled(bool value);
  public:

  // optional int32 display_refresh_manual_hz = 20;
  bool has_display_refresh_manual_hz() const;
  private:
  bool _internal_has_display_refresh_manual_hz() const;
  public:
  void clear_display_refresh_manual_hz();
  int32_t display_refresh_manual_hz() const;
  void set_display_refresh_manual_hz(int32_t value);
  private:
  int32_t _internal_display_refresh_manual_hz() const;
  void _internal_set_display_refresh_manual_hz(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemPerfSettingsV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float diagnostic_update_rate_;
  int system_trace_service_state_;
  int graphics_profiling_service_state_;
  int perf_overlay_service_state_;
  int perf_overlay_level_;
  int gpu_performance_level_;
  int32_t gpu_performance_manual_mhz_;
  int32_t fps_limit_;
  int32_t tdp_limit_;
  int cpu_governor_;
  int32_t cpu_governor_manual_mhz_;
  bool is_variable_resolution_enabled_;
  bool is_dynamic_refresh_rate_enabled_;
  bool is_fps_limit_enabled_;
  bool is_tdp_limit_enabled_;
  int32_t scaling_filter_;
  int32_t fsr_sharpness_;
  bool is_show_perf_overlay_over_steam_enabled_;
  bool is_low_latency_mode_enabled_;
  bool is_game_perf_profile_enabled_;
  int32_t display_refresh_manual_hz_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemPerfState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemPerfState) */ {
 public:
  inline CMsgSystemPerfState() : CMsgSystemPerfState(nullptr) {}
  ~CMsgSystemPerfState() override;
  explicit constexpr CMsgSystemPerfState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemPerfState(const CMsgSystemPerfState& from);
  CMsgSystemPerfState(CMsgSystemPerfState&& from) noexcept
    : CMsgSystemPerfState() {
    *this = ::std::move(from);
  }

  inline CMsgSystemPerfState& operator=(const CMsgSystemPerfState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemPerfState& operator=(CMsgSystemPerfState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemPerfState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemPerfState* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemPerfState*>(
               &_CMsgSystemPerfState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CMsgSystemPerfState& a, CMsgSystemPerfState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemPerfState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemPerfState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemPerfState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemPerfState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemPerfState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemPerfState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemPerfState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemPerfState";
  }
  protected:
  explicit CMsgSystemPerfState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitsFieldNumber = 1,
    kSettingsFieldNumber = 2,
    kCurrentGameIdFieldNumber = 3,
    kActiveProfileGameIdFieldNumber = 4,
  };
  // optional .CMsgSystemPerfLimits limits = 1;
  bool has_limits() const;
  private:
  bool _internal_has_limits() const;
  public:
  void clear_limits();
  const ::CMsgSystemPerfLimits& limits() const;
  PROTOBUF_NODISCARD ::CMsgSystemPerfLimits* release_limits();
  ::CMsgSystemPerfLimits* mutable_limits();
  void set_allocated_limits(::CMsgSystemPerfLimits* limits);
  private:
  const ::CMsgSystemPerfLimits& _internal_limits() const;
  ::CMsgSystemPerfLimits* _internal_mutable_limits();
  public:
  void unsafe_arena_set_allocated_limits(
      ::CMsgSystemPerfLimits* limits);
  ::CMsgSystemPerfLimits* unsafe_arena_release_limits();

  // optional .CMsgSystemPerfSettings settings = 2;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::CMsgSystemPerfSettings& settings() const;
  PROTOBUF_NODISCARD ::CMsgSystemPerfSettings* release_settings();
  ::CMsgSystemPerfSettings* mutable_settings();
  void set_allocated_settings(::CMsgSystemPerfSettings* settings);
  private:
  const ::CMsgSystemPerfSettings& _internal_settings() const;
  ::CMsgSystemPerfSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::CMsgSystemPerfSettings* settings);
  ::CMsgSystemPerfSettings* unsafe_arena_release_settings();

  // optional uint64 current_game_id = 3;
  bool has_current_game_id() const;
  private:
  bool _internal_has_current_game_id() const;
  public:
  void clear_current_game_id();
  uint64_t current_game_id() const;
  void set_current_game_id(uint64_t value);
  private:
  uint64_t _internal_current_game_id() const;
  void _internal_set_current_game_id(uint64_t value);
  public:

  // optional uint64 active_profile_game_id = 4;
  bool has_active_profile_game_id() const;
  private:
  bool _internal_has_active_profile_game_id() const;
  public:
  void clear_active_profile_game_id();
  uint64_t active_profile_game_id() const;
  void set_active_profile_game_id(uint64_t value);
  private:
  uint64_t _internal_active_profile_game_id() const;
  void _internal_set_active_profile_game_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemPerfState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgSystemPerfLimits* limits_;
  ::CMsgSystemPerfSettings* settings_;
  uint64_t current_game_id_;
  uint64_t active_profile_game_id_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemPerfUpdateSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemPerfUpdateSettings) */ {
 public:
  inline CMsgSystemPerfUpdateSettings() : CMsgSystemPerfUpdateSettings(nullptr) {}
  ~CMsgSystemPerfUpdateSettings() override;
  explicit constexpr CMsgSystemPerfUpdateSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemPerfUpdateSettings(const CMsgSystemPerfUpdateSettings& from);
  CMsgSystemPerfUpdateSettings(CMsgSystemPerfUpdateSettings&& from) noexcept
    : CMsgSystemPerfUpdateSettings() {
    *this = ::std::move(from);
  }

  inline CMsgSystemPerfUpdateSettings& operator=(const CMsgSystemPerfUpdateSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemPerfUpdateSettings& operator=(CMsgSystemPerfUpdateSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemPerfUpdateSettings& default_instance() {
    return *internal_default_instance();
  }
  enum UpdateCase {
    kResetToDefault = 2,
    kSettingsDelta = 3,
    UPDATE_NOT_SET = 0,
  };

  static inline const CMsgSystemPerfUpdateSettings* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemPerfUpdateSettings*>(
               &_CMsgSystemPerfUpdateSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CMsgSystemPerfUpdateSettings& a, CMsgSystemPerfUpdateSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemPerfUpdateSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemPerfUpdateSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemPerfUpdateSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemPerfUpdateSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemPerfUpdateSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemPerfUpdateSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemPerfUpdateSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemPerfUpdateSettings";
  }
  protected:
  explicit CMsgSystemPerfUpdateSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameidFieldNumber = 1,
    kSkipStorageUpdateFieldNumber = 4,
    kResetToDefaultFieldNumber = 2,
    kSettingsDeltaFieldNumber = 3,
  };
  // optional uint64 gameid = 1;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  uint64_t gameid() const;
  void set_gameid(uint64_t value);
  private:
  uint64_t _internal_gameid() const;
  void _internal_set_gameid(uint64_t value);
  public:

  // optional bool skip_storage_update = 4;
  bool has_skip_storage_update() const;
  private:
  bool _internal_has_skip_storage_update() const;
  public:
  void clear_skip_storage_update();
  bool skip_storage_update() const;
  void set_skip_storage_update(bool value);
  private:
  bool _internal_skip_storage_update() const;
  void _internal_set_skip_storage_update(bool value);
  public:

  // bool reset_to_default = 2;
  bool has_reset_to_default() const;
  private:
  bool _internal_has_reset_to_default() const;
  public:
  void clear_reset_to_default();
  bool reset_to_default() const;
  void set_reset_to_default(bool value);
  private:
  bool _internal_reset_to_default() const;
  void _internal_set_reset_to_default(bool value);
  public:

  // .CMsgSystemPerfSettings settings_delta = 3;
  bool has_settings_delta() const;
  private:
  bool _internal_has_settings_delta() const;
  public:
  void clear_settings_delta();
  const ::CMsgSystemPerfSettings& settings_delta() const;
  PROTOBUF_NODISCARD ::CMsgSystemPerfSettings* release_settings_delta();
  ::CMsgSystemPerfSettings* mutable_settings_delta();
  void set_allocated_settings_delta(::CMsgSystemPerfSettings* settings_delta);
  private:
  const ::CMsgSystemPerfSettings& _internal_settings_delta() const;
  ::CMsgSystemPerfSettings* _internal_mutable_settings_delta();
  public:
  void unsafe_arena_set_allocated_settings_delta(
      ::CMsgSystemPerfSettings* settings_delta);
  ::CMsgSystemPerfSettings* unsafe_arena_release_settings_delta();

  void clear_update();
  UpdateCase update_case() const;
  // @@protoc_insertion_point(class_scope:CMsgSystemPerfUpdateSettings)
 private:
  class _Internal;
  void set_has_reset_to_default();
  void set_has_settings_delta();

  inline bool has_update() const;
  inline void clear_has_update();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t gameid_;
  bool skip_storage_update_;
  union UpdateUnion {
    constexpr UpdateUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool reset_to_default_;
    ::CMsgSystemPerfSettings* settings_delta_;
  } update_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemDockUpdateState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemDockUpdateState) */ {
 public:
  inline CMsgSystemDockUpdateState() : CMsgSystemDockUpdateState(nullptr) {}
  ~CMsgSystemDockUpdateState() override;
  explicit constexpr CMsgSystemDockUpdateState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemDockUpdateState(const CMsgSystemDockUpdateState& from);
  CMsgSystemDockUpdateState(CMsgSystemDockUpdateState&& from) noexcept
    : CMsgSystemDockUpdateState() {
    *this = ::std::move(from);
  }

  inline CMsgSystemDockUpdateState& operator=(const CMsgSystemDockUpdateState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemDockUpdateState& operator=(CMsgSystemDockUpdateState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemDockUpdateState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemDockUpdateState* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemDockUpdateState*>(
               &_CMsgSystemDockUpdateState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CMsgSystemDockUpdateState& a, CMsgSystemDockUpdateState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemDockUpdateState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemDockUpdateState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemDockUpdateState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemDockUpdateState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemDockUpdateState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemDockUpdateState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemDockUpdateState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemDockUpdateState";
  }
  protected:
  explicit CMsgSystemDockUpdateState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionCurrentFieldNumber = 3,
    kVersionAvailableFieldNumber = 4,
    kStateFieldNumber = 1,
    kRtimeLastCheckedFieldNumber = 2,
    kStageProgressFieldNumber = 5,
    kRtimeEstimatedCompletionFieldNumber = 6,
    kOldFwWorkaroundFieldNumber = 7,
  };
  // optional string version_current = 3;
  bool has_version_current() const;
  private:
  bool _internal_has_version_current() const;
  public:
  void clear_version_current();
  const std::string& version_current() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_current(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_current();
  PROTOBUF_NODISCARD std::string* release_version_current();
  void set_allocated_version_current(std::string* version_current);
  private:
  const std::string& _internal_version_current() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_current(const std::string& value);
  std::string* _internal_mutable_version_current();
  public:

  // optional string version_available = 4;
  bool has_version_available() const;
  private:
  bool _internal_has_version_available() const;
  public:
  void clear_version_available();
  const std::string& version_available() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_available(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_available();
  PROTOBUF_NODISCARD std::string* release_version_available();
  void set_allocated_version_available(std::string* version_available);
  private:
  const std::string& _internal_version_available() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_available(const std::string& value);
  std::string* _internal_mutable_version_available();
  public:

  // optional .EUpdaterState state = 1 [default = k_EUpdaterState_Invalid];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::EUpdaterState state() const;
  void set_state(::EUpdaterState value);
  private:
  ::EUpdaterState _internal_state() const;
  void _internal_set_state(::EUpdaterState value);
  public:

  // optional fixed32 rtime_last_checked = 2;
  bool has_rtime_last_checked() const;
  private:
  bool _internal_has_rtime_last_checked() const;
  public:
  void clear_rtime_last_checked();
  uint32_t rtime_last_checked() const;
  void set_rtime_last_checked(uint32_t value);
  private:
  uint32_t _internal_rtime_last_checked() const;
  void _internal_set_rtime_last_checked(uint32_t value);
  public:

  // optional float stage_progress = 5;
  bool has_stage_progress() const;
  private:
  bool _internal_has_stage_progress() const;
  public:
  void clear_stage_progress();
  float stage_progress() const;
  void set_stage_progress(float value);
  private:
  float _internal_stage_progress() const;
  void _internal_set_stage_progress(float value);
  public:

  // optional fixed32 rtime_estimated_completion = 6;
  bool has_rtime_estimated_completion() const;
  private:
  bool _internal_has_rtime_estimated_completion() const;
  public:
  void clear_rtime_estimated_completion();
  uint32_t rtime_estimated_completion() const;
  void set_rtime_estimated_completion(uint32_t value);
  private:
  uint32_t _internal_rtime_estimated_completion() const;
  void _internal_set_rtime_estimated_completion(uint32_t value);
  public:

  // optional int32 old_fw_workaround = 7;
  bool has_old_fw_workaround() const;
  private:
  bool _internal_has_old_fw_workaround() const;
  public:
  void clear_old_fw_workaround();
  int32_t old_fw_workaround() const;
  void set_old_fw_workaround(int32_t value);
  private:
  int32_t _internal_old_fw_workaround() const;
  void _internal_set_old_fw_workaround(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemDockUpdateState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_current_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_available_;
  int state_;
  uint32_t rtime_last_checked_;
  float stage_progress_;
  uint32_t rtime_estimated_completion_;
  int32_t old_fw_workaround_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemDockState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemDockState) */ {
 public:
  inline CMsgSystemDockState() : CMsgSystemDockState(nullptr) {}
  ~CMsgSystemDockState() override;
  explicit constexpr CMsgSystemDockState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemDockState(const CMsgSystemDockState& from);
  CMsgSystemDockState(CMsgSystemDockState&& from) noexcept
    : CMsgSystemDockState() {
    *this = ::std::move(from);
  }

  inline CMsgSystemDockState& operator=(const CMsgSystemDockState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemDockState& operator=(CMsgSystemDockState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemDockState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemDockState* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemDockState*>(
               &_CMsgSystemDockState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CMsgSystemDockState& a, CMsgSystemDockState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemDockState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemDockState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemDockState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemDockState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemDockState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemDockState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemDockState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemDockState";
  }
  protected:
  explicit CMsgSystemDockState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateStateFieldNumber = 1,
  };
  // optional .CMsgSystemDockUpdateState update_state = 1;
  bool has_update_state() const;
  private:
  bool _internal_has_update_state() const;
  public:
  void clear_update_state();
  const ::CMsgSystemDockUpdateState& update_state() const;
  PROTOBUF_NODISCARD ::CMsgSystemDockUpdateState* release_update_state();
  ::CMsgSystemDockUpdateState* mutable_update_state();
  void set_allocated_update_state(::CMsgSystemDockUpdateState* update_state);
  private:
  const ::CMsgSystemDockUpdateState& _internal_update_state() const;
  ::CMsgSystemDockUpdateState* _internal_mutable_update_state();
  public:
  void unsafe_arena_set_allocated_update_state(
      ::CMsgSystemDockUpdateState* update_state);
  ::CMsgSystemDockUpdateState* unsafe_arena_release_update_state();

  // @@protoc_insertion_point(class_scope:CMsgSystemDockState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgSystemDockUpdateState* update_state_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemDockUpdateFirmware final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemDockUpdateFirmware) */ {
 public:
  inline CMsgSystemDockUpdateFirmware() : CMsgSystemDockUpdateFirmware(nullptr) {}
  ~CMsgSystemDockUpdateFirmware() override;
  explicit constexpr CMsgSystemDockUpdateFirmware(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemDockUpdateFirmware(const CMsgSystemDockUpdateFirmware& from);
  CMsgSystemDockUpdateFirmware(CMsgSystemDockUpdateFirmware&& from) noexcept
    : CMsgSystemDockUpdateFirmware() {
    *this = ::std::move(from);
  }

  inline CMsgSystemDockUpdateFirmware& operator=(const CMsgSystemDockUpdateFirmware& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemDockUpdateFirmware& operator=(CMsgSystemDockUpdateFirmware&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemDockUpdateFirmware& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemDockUpdateFirmware* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemDockUpdateFirmware*>(
               &_CMsgSystemDockUpdateFirmware_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CMsgSystemDockUpdateFirmware& a, CMsgSystemDockUpdateFirmware& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemDockUpdateFirmware* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemDockUpdateFirmware* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemDockUpdateFirmware* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemDockUpdateFirmware>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemDockUpdateFirmware& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemDockUpdateFirmware& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemDockUpdateFirmware* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemDockUpdateFirmware";
  }
  protected:
  explicit CMsgSystemDockUpdateFirmware(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckOnlyFieldNumber = 1,
  };
  // optional bool check_only = 1;
  bool has_check_only() const;
  private:
  bool _internal_has_check_only() const;
  public:
  void clear_check_only();
  bool check_only() const;
  void set_check_only(bool value);
  private:
  bool _internal_check_only() const;
  void _internal_set_check_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemDockUpdateFirmware)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool check_only_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemAudioVolume_ChannelEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemAudioVolume.ChannelEntry) */ {
 public:
  inline CMsgSystemAudioVolume_ChannelEntry() : CMsgSystemAudioVolume_ChannelEntry(nullptr) {}
  ~CMsgSystemAudioVolume_ChannelEntry() override;
  explicit constexpr CMsgSystemAudioVolume_ChannelEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemAudioVolume_ChannelEntry(const CMsgSystemAudioVolume_ChannelEntry& from);
  CMsgSystemAudioVolume_ChannelEntry(CMsgSystemAudioVolume_ChannelEntry&& from) noexcept
    : CMsgSystemAudioVolume_ChannelEntry() {
    *this = ::std::move(from);
  }

  inline CMsgSystemAudioVolume_ChannelEntry& operator=(const CMsgSystemAudioVolume_ChannelEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemAudioVolume_ChannelEntry& operator=(CMsgSystemAudioVolume_ChannelEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemAudioVolume_ChannelEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemAudioVolume_ChannelEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemAudioVolume_ChannelEntry*>(
               &_CMsgSystemAudioVolume_ChannelEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CMsgSystemAudioVolume_ChannelEntry& a, CMsgSystemAudioVolume_ChannelEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemAudioVolume_ChannelEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemAudioVolume_ChannelEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemAudioVolume_ChannelEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemAudioVolume_ChannelEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemAudioVolume_ChannelEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemAudioVolume_ChannelEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemAudioVolume_ChannelEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemAudioVolume.ChannelEntry";
  }
  protected:
  explicit CMsgSystemAudioVolume_ChannelEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEchannelFieldNumber = 1,
    kVolumeFieldNumber = 2,
  };
  // optional .ESystemAudioChannel echannel = 1 [default = k_SystemAudioChannel_Invalid];
  bool has_echannel() const;
  private:
  bool _internal_has_echannel() const;
  public:
  void clear_echannel();
  ::ESystemAudioChannel echannel() const;
  void set_echannel(::ESystemAudioChannel value);
  private:
  ::ESystemAudioChannel _internal_echannel() const;
  void _internal_set_echannel(::ESystemAudioChannel value);
  public:

  // optional float volume = 2;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  float volume() const;
  void set_volume(float value);
  private:
  float _internal_volume() const;
  void _internal_set_volume(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemAudioVolume.ChannelEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int echannel_;
  float volume_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemAudioVolume final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemAudioVolume) */ {
 public:
  inline CMsgSystemAudioVolume() : CMsgSystemAudioVolume(nullptr) {}
  ~CMsgSystemAudioVolume() override;
  explicit constexpr CMsgSystemAudioVolume(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemAudioVolume(const CMsgSystemAudioVolume& from);
  CMsgSystemAudioVolume(CMsgSystemAudioVolume&& from) noexcept
    : CMsgSystemAudioVolume() {
    *this = ::std::move(from);
  }

  inline CMsgSystemAudioVolume& operator=(const CMsgSystemAudioVolume& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemAudioVolume& operator=(CMsgSystemAudioVolume&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemAudioVolume& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemAudioVolume* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemAudioVolume*>(
               &_CMsgSystemAudioVolume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CMsgSystemAudioVolume& a, CMsgSystemAudioVolume& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemAudioVolume* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemAudioVolume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemAudioVolume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemAudioVolume>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemAudioVolume& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemAudioVolume& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemAudioVolume* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemAudioVolume";
  }
  protected:
  explicit CMsgSystemAudioVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSystemAudioVolume_ChannelEntry ChannelEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kIsMutedFieldNumber = 2,
  };
  // repeated .CMsgSystemAudioVolume.ChannelEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::CMsgSystemAudioVolume_ChannelEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioVolume_ChannelEntry >*
      mutable_entries();
  private:
  const ::CMsgSystemAudioVolume_ChannelEntry& _internal_entries(int index) const;
  ::CMsgSystemAudioVolume_ChannelEntry* _internal_add_entries();
  public:
  const ::CMsgSystemAudioVolume_ChannelEntry& entries(int index) const;
  ::CMsgSystemAudioVolume_ChannelEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioVolume_ChannelEntry >&
      entries() const;

  // optional bool is_muted = 2;
  bool has_is_muted() const;
  private:
  bool _internal_has_is_muted() const;
  public:
  void clear_is_muted();
  bool is_muted() const;
  void set_is_muted(bool value);
  private:
  bool _internal_is_muted() const;
  void _internal_set_is_muted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemAudioVolume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioVolume_ChannelEntry > entries_;
  bool is_muted_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemAudioManagerObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemAudioManagerObject) */ {
 public:
  inline CMsgSystemAudioManagerObject() : CMsgSystemAudioManagerObject(nullptr) {}
  ~CMsgSystemAudioManagerObject() override;
  explicit constexpr CMsgSystemAudioManagerObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemAudioManagerObject(const CMsgSystemAudioManagerObject& from);
  CMsgSystemAudioManagerObject(CMsgSystemAudioManagerObject&& from) noexcept
    : CMsgSystemAudioManagerObject() {
    *this = ::std::move(from);
  }

  inline CMsgSystemAudioManagerObject& operator=(const CMsgSystemAudioManagerObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemAudioManagerObject& operator=(CMsgSystemAudioManagerObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemAudioManagerObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemAudioManagerObject* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemAudioManagerObject*>(
               &_CMsgSystemAudioManagerObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CMsgSystemAudioManagerObject& a, CMsgSystemAudioManagerObject& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemAudioManagerObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemAudioManagerObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemAudioManagerObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemAudioManagerObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemAudioManagerObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemAudioManagerObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemAudioManagerObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemAudioManagerObject";
  }
  protected:
  explicit CMsgSystemAudioManagerObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRtimeLastUpdateFieldNumber = 2,
  };
  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional fixed32 rtime_last_update = 2;
  bool has_rtime_last_update() const;
  private:
  bool _internal_has_rtime_last_update() const;
  public:
  void clear_rtime_last_update();
  uint32_t rtime_last_update() const;
  void set_rtime_last_update(uint32_t value);
  private:
  uint32_t _internal_rtime_last_update() const;
  void _internal_set_rtime_last_update(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemAudioManagerObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t id_;
  uint32_t rtime_last_update_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemAudioManagerDevice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemAudioManagerDevice) */ {
 public:
  inline CMsgSystemAudioManagerDevice() : CMsgSystemAudioManagerDevice(nullptr) {}
  ~CMsgSystemAudioManagerDevice() override;
  explicit constexpr CMsgSystemAudioManagerDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemAudioManagerDevice(const CMsgSystemAudioManagerDevice& from);
  CMsgSystemAudioManagerDevice(CMsgSystemAudioManagerDevice&& from) noexcept
    : CMsgSystemAudioManagerDevice() {
    *this = ::std::move(from);
  }

  inline CMsgSystemAudioManagerDevice& operator=(const CMsgSystemAudioManagerDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemAudioManagerDevice& operator=(CMsgSystemAudioManagerDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemAudioManagerDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemAudioManagerDevice* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemAudioManagerDevice*>(
               &_CMsgSystemAudioManagerDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CMsgSystemAudioManagerDevice& a, CMsgSystemAudioManagerDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemAudioManagerDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemAudioManagerDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemAudioManagerDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemAudioManagerDevice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemAudioManagerDevice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemAudioManagerDevice& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemAudioManagerDevice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemAudioManagerDevice";
  }
  protected:
  explicit CMsgSystemAudioManagerDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kNickFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kApiFieldNumber = 5,
    kBaseFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string nick = 3;
  bool has_nick() const;
  private:
  bool _internal_has_nick() const;
  public:
  void clear_nick();
  const std::string& nick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick();
  PROTOBUF_NODISCARD std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // optional string description = 4;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string api = 5;
  bool has_api() const;
  private:
  bool _internal_has_api() const;
  public:
  void clear_api();
  const std::string& api() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api();
  PROTOBUF_NODISCARD std::string* release_api();
  void set_allocated_api(std::string* api);
  private:
  const std::string& _internal_api() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api(const std::string& value);
  std::string* _internal_mutable_api();
  public:

  // optional .CMsgSystemAudioManagerObject base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::CMsgSystemAudioManagerObject& base() const;
  PROTOBUF_NODISCARD ::CMsgSystemAudioManagerObject* release_base();
  ::CMsgSystemAudioManagerObject* mutable_base();
  void set_allocated_base(::CMsgSystemAudioManagerObject* base);
  private:
  const ::CMsgSystemAudioManagerObject& _internal_base() const;
  ::CMsgSystemAudioManagerObject* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::CMsgSystemAudioManagerObject* base);
  ::CMsgSystemAudioManagerObject* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:CMsgSystemAudioManagerDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_;
  ::CMsgSystemAudioManagerObject* base_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemAudioManagerNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemAudioManagerNode) */ {
 public:
  inline CMsgSystemAudioManagerNode() : CMsgSystemAudioManagerNode(nullptr) {}
  ~CMsgSystemAudioManagerNode() override;
  explicit constexpr CMsgSystemAudioManagerNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemAudioManagerNode(const CMsgSystemAudioManagerNode& from);
  CMsgSystemAudioManagerNode(CMsgSystemAudioManagerNode&& from) noexcept
    : CMsgSystemAudioManagerNode() {
    *this = ::std::move(from);
  }

  inline CMsgSystemAudioManagerNode& operator=(const CMsgSystemAudioManagerNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemAudioManagerNode& operator=(CMsgSystemAudioManagerNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemAudioManagerNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemAudioManagerNode* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemAudioManagerNode*>(
               &_CMsgSystemAudioManagerNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CMsgSystemAudioManagerNode& a, CMsgSystemAudioManagerNode& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemAudioManagerNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemAudioManagerNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemAudioManagerNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemAudioManagerNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemAudioManagerNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemAudioManagerNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemAudioManagerNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemAudioManagerNode";
  }
  protected:
  explicit CMsgSystemAudioManagerNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kNickFieldNumber = 4,
    kDescriptionFieldNumber = 5,
    kBaseFieldNumber = 1,
    kVolumeFieldNumber = 7,
    kDeviceIdFieldNumber = 2,
    kEdirectionFieldNumber = 6,
  };
  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string nick = 4;
  bool has_nick() const;
  private:
  bool _internal_has_nick() const;
  public:
  void clear_nick();
  const std::string& nick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick();
  PROTOBUF_NODISCARD std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // optional string description = 5;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional .CMsgSystemAudioManagerObject base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::CMsgSystemAudioManagerObject& base() const;
  PROTOBUF_NODISCARD ::CMsgSystemAudioManagerObject* release_base();
  ::CMsgSystemAudioManagerObject* mutable_base();
  void set_allocated_base(::CMsgSystemAudioManagerObject* base);
  private:
  const ::CMsgSystemAudioManagerObject& _internal_base() const;
  ::CMsgSystemAudioManagerObject* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::CMsgSystemAudioManagerObject* base);
  ::CMsgSystemAudioManagerObject* unsafe_arena_release_base();

  // optional .CMsgSystemAudioVolume volume = 7;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  const ::CMsgSystemAudioVolume& volume() const;
  PROTOBUF_NODISCARD ::CMsgSystemAudioVolume* release_volume();
  ::CMsgSystemAudioVolume* mutable_volume();
  void set_allocated_volume(::CMsgSystemAudioVolume* volume);
  private:
  const ::CMsgSystemAudioVolume& _internal_volume() const;
  ::CMsgSystemAudioVolume* _internal_mutable_volume();
  public:
  void unsafe_arena_set_allocated_volume(
      ::CMsgSystemAudioVolume* volume);
  ::CMsgSystemAudioVolume* unsafe_arena_release_volume();

  // optional uint32 device_id = 2;
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  uint32_t device_id() const;
  void set_device_id(uint32_t value);
  private:
  uint32_t _internal_device_id() const;
  void _internal_set_device_id(uint32_t value);
  public:

  // optional .ESystemAudioDirection edirection = 6 [default = k_SystemAudioDirection_Invalid];
  bool has_edirection() const;
  private:
  bool _internal_has_edirection() const;
  public:
  void clear_edirection();
  ::ESystemAudioDirection edirection() const;
  void set_edirection(::ESystemAudioDirection value);
  private:
  ::ESystemAudioDirection _internal_edirection() const;
  void _internal_set_edirection(::ESystemAudioDirection value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemAudioManagerNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::CMsgSystemAudioManagerObject* base_;
  ::CMsgSystemAudioVolume* volume_;
  uint32_t device_id_;
  int edirection_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemAudioManagerPort final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemAudioManagerPort) */ {
 public:
  inline CMsgSystemAudioManagerPort() : CMsgSystemAudioManagerPort(nullptr) {}
  ~CMsgSystemAudioManagerPort() override;
  explicit constexpr CMsgSystemAudioManagerPort(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemAudioManagerPort(const CMsgSystemAudioManagerPort& from);
  CMsgSystemAudioManagerPort(CMsgSystemAudioManagerPort&& from) noexcept
    : CMsgSystemAudioManagerPort() {
    *this = ::std::move(from);
  }

  inline CMsgSystemAudioManagerPort& operator=(const CMsgSystemAudioManagerPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemAudioManagerPort& operator=(CMsgSystemAudioManagerPort&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemAudioManagerPort& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemAudioManagerPort* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemAudioManagerPort*>(
               &_CMsgSystemAudioManagerPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CMsgSystemAudioManagerPort& a, CMsgSystemAudioManagerPort& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemAudioManagerPort* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemAudioManagerPort* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemAudioManagerPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemAudioManagerPort>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemAudioManagerPort& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemAudioManagerPort& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemAudioManagerPort* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemAudioManagerPort";
  }
  protected:
  explicit CMsgSystemAudioManagerPort(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kAliasFieldNumber = 5,
    kBaseFieldNumber = 1,
    kNodeIdFieldNumber = 3,
    kEtypeFieldNumber = 6,
    kEdirectionFieldNumber = 7,
    kIsPhysicalFieldNumber = 8,
    kIsTerminalFieldNumber = 9,
    kIsControlFieldNumber = 10,
    kIsMonitorFieldNumber = 11,
  };
  // optional string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string alias = 5;
  bool has_alias() const;
  private:
  bool _internal_has_alias() const;
  public:
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // optional .CMsgSystemAudioManagerObject base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::CMsgSystemAudioManagerObject& base() const;
  PROTOBUF_NODISCARD ::CMsgSystemAudioManagerObject* release_base();
  ::CMsgSystemAudioManagerObject* mutable_base();
  void set_allocated_base(::CMsgSystemAudioManagerObject* base);
  private:
  const ::CMsgSystemAudioManagerObject& _internal_base() const;
  ::CMsgSystemAudioManagerObject* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::CMsgSystemAudioManagerObject* base);
  ::CMsgSystemAudioManagerObject* unsafe_arena_release_base();

  // optional uint32 node_id = 3;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  uint32_t node_id() const;
  void set_node_id(uint32_t value);
  private:
  uint32_t _internal_node_id() const;
  void _internal_set_node_id(uint32_t value);
  public:

  // optional .ESystemAudioPortType etype = 6 [default = k_SystemAudioPortType_Invalid];
  bool has_etype() const;
  private:
  bool _internal_has_etype() const;
  public:
  void clear_etype();
  ::ESystemAudioPortType etype() const;
  void set_etype(::ESystemAudioPortType value);
  private:
  ::ESystemAudioPortType _internal_etype() const;
  void _internal_set_etype(::ESystemAudioPortType value);
  public:

  // optional .ESystemAudioPortDirection edirection = 7 [default = k_SystemAudioPortDirection_Invalid];
  bool has_edirection() const;
  private:
  bool _internal_has_edirection() const;
  public:
  void clear_edirection();
  ::ESystemAudioPortDirection edirection() const;
  void set_edirection(::ESystemAudioPortDirection value);
  private:
  ::ESystemAudioPortDirection _internal_edirection() const;
  void _internal_set_edirection(::ESystemAudioPortDirection value);
  public:

  // optional bool is_physical = 8;
  bool has_is_physical() const;
  private:
  bool _internal_has_is_physical() const;
  public:
  void clear_is_physical();
  bool is_physical() const;
  void set_is_physical(bool value);
  private:
  bool _internal_is_physical() const;
  void _internal_set_is_physical(bool value);
  public:

  // optional bool is_terminal = 9;
  bool has_is_terminal() const;
  private:
  bool _internal_has_is_terminal() const;
  public:
  void clear_is_terminal();
  bool is_terminal() const;
  void set_is_terminal(bool value);
  private:
  bool _internal_is_terminal() const;
  void _internal_set_is_terminal(bool value);
  public:

  // optional bool is_control = 10;
  bool has_is_control() const;
  private:
  bool _internal_has_is_control() const;
  public:
  void clear_is_control();
  bool is_control() const;
  void set_is_control(bool value);
  private:
  bool _internal_is_control() const;
  void _internal_set_is_control(bool value);
  public:

  // optional bool is_monitor = 11;
  bool has_is_monitor() const;
  private:
  bool _internal_has_is_monitor() const;
  public:
  void clear_is_monitor();
  bool is_monitor() const;
  void set_is_monitor(bool value);
  private:
  bool _internal_is_monitor() const;
  void _internal_set_is_monitor(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemAudioManagerPort)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::CMsgSystemAudioManagerObject* base_;
  uint32_t node_id_;
  int etype_;
  int edirection_;
  bool is_physical_;
  bool is_terminal_;
  bool is_control_;
  bool is_monitor_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemAudioManagerLink final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemAudioManagerLink) */ {
 public:
  inline CMsgSystemAudioManagerLink() : CMsgSystemAudioManagerLink(nullptr) {}
  ~CMsgSystemAudioManagerLink() override;
  explicit constexpr CMsgSystemAudioManagerLink(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemAudioManagerLink(const CMsgSystemAudioManagerLink& from);
  CMsgSystemAudioManagerLink(CMsgSystemAudioManagerLink&& from) noexcept
    : CMsgSystemAudioManagerLink() {
    *this = ::std::move(from);
  }

  inline CMsgSystemAudioManagerLink& operator=(const CMsgSystemAudioManagerLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemAudioManagerLink& operator=(CMsgSystemAudioManagerLink&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemAudioManagerLink& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemAudioManagerLink* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemAudioManagerLink*>(
               &_CMsgSystemAudioManagerLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CMsgSystemAudioManagerLink& a, CMsgSystemAudioManagerLink& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemAudioManagerLink* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemAudioManagerLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemAudioManagerLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemAudioManagerLink>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemAudioManagerLink& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemAudioManagerLink& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemAudioManagerLink* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemAudioManagerLink";
  }
  protected:
  explicit CMsgSystemAudioManagerLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kOutputNodeIdFieldNumber = 2,
    kOutputPortIdFieldNumber = 3,
    kInputNodeIdFieldNumber = 4,
    kInputPortIdFieldNumber = 5,
  };
  // optional .CMsgSystemAudioManagerObject base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::CMsgSystemAudioManagerObject& base() const;
  PROTOBUF_NODISCARD ::CMsgSystemAudioManagerObject* release_base();
  ::CMsgSystemAudioManagerObject* mutable_base();
  void set_allocated_base(::CMsgSystemAudioManagerObject* base);
  private:
  const ::CMsgSystemAudioManagerObject& _internal_base() const;
  ::CMsgSystemAudioManagerObject* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::CMsgSystemAudioManagerObject* base);
  ::CMsgSystemAudioManagerObject* unsafe_arena_release_base();

  // optional uint32 output_node_id = 2;
  bool has_output_node_id() const;
  private:
  bool _internal_has_output_node_id() const;
  public:
  void clear_output_node_id();
  uint32_t output_node_id() const;
  void set_output_node_id(uint32_t value);
  private:
  uint32_t _internal_output_node_id() const;
  void _internal_set_output_node_id(uint32_t value);
  public:

  // optional uint32 output_port_id = 3;
  bool has_output_port_id() const;
  private:
  bool _internal_has_output_port_id() const;
  public:
  void clear_output_port_id();
  uint32_t output_port_id() const;
  void set_output_port_id(uint32_t value);
  private:
  uint32_t _internal_output_port_id() const;
  void _internal_set_output_port_id(uint32_t value);
  public:

  // optional uint32 input_node_id = 4;
  bool has_input_node_id() const;
  private:
  bool _internal_has_input_node_id() const;
  public:
  void clear_input_node_id();
  uint32_t input_node_id() const;
  void set_input_node_id(uint32_t value);
  private:
  uint32_t _internal_input_node_id() const;
  void _internal_set_input_node_id(uint32_t value);
  public:

  // optional uint32 input_port_id = 5;
  bool has_input_port_id() const;
  private:
  bool _internal_has_input_port_id() const;
  public:
  void clear_input_port_id();
  uint32_t input_port_id() const;
  void set_input_port_id(uint32_t value);
  private:
  uint32_t _internal_input_port_id() const;
  void _internal_set_input_port_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemAudioManagerLink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgSystemAudioManagerObject* base_;
  uint32_t output_node_id_;
  uint32_t output_port_id_;
  uint32_t input_node_id_;
  uint32_t input_port_id_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemAudioManagerStateHW final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemAudioManagerStateHW) */ {
 public:
  inline CMsgSystemAudioManagerStateHW() : CMsgSystemAudioManagerStateHW(nullptr) {}
  ~CMsgSystemAudioManagerStateHW() override;
  explicit constexpr CMsgSystemAudioManagerStateHW(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemAudioManagerStateHW(const CMsgSystemAudioManagerStateHW& from);
  CMsgSystemAudioManagerStateHW(CMsgSystemAudioManagerStateHW&& from) noexcept
    : CMsgSystemAudioManagerStateHW() {
    *this = ::std::move(from);
  }

  inline CMsgSystemAudioManagerStateHW& operator=(const CMsgSystemAudioManagerStateHW& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemAudioManagerStateHW& operator=(CMsgSystemAudioManagerStateHW&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemAudioManagerStateHW& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemAudioManagerStateHW* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemAudioManagerStateHW*>(
               &_CMsgSystemAudioManagerStateHW_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CMsgSystemAudioManagerStateHW& a, CMsgSystemAudioManagerStateHW& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemAudioManagerStateHW* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemAudioManagerStateHW* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemAudioManagerStateHW* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemAudioManagerStateHW>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemAudioManagerStateHW& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemAudioManagerStateHW& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemAudioManagerStateHW* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemAudioManagerStateHW";
  }
  protected:
  explicit CMsgSystemAudioManagerStateHW(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
    kNodesFieldNumber = 2,
    kPortsFieldNumber = 3,
    kLinksFieldNumber = 4,
  };
  // repeated .CMsgSystemAudioManagerDevice devices = 1;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::CMsgSystemAudioManagerDevice* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerDevice >*
      mutable_devices();
  private:
  const ::CMsgSystemAudioManagerDevice& _internal_devices(int index) const;
  ::CMsgSystemAudioManagerDevice* _internal_add_devices();
  public:
  const ::CMsgSystemAudioManagerDevice& devices(int index) const;
  ::CMsgSystemAudioManagerDevice* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerDevice >&
      devices() const;

  // repeated .CMsgSystemAudioManagerNode nodes = 2;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::CMsgSystemAudioManagerNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerNode >*
      mutable_nodes();
  private:
  const ::CMsgSystemAudioManagerNode& _internal_nodes(int index) const;
  ::CMsgSystemAudioManagerNode* _internal_add_nodes();
  public:
  const ::CMsgSystemAudioManagerNode& nodes(int index) const;
  ::CMsgSystemAudioManagerNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerNode >&
      nodes() const;

  // repeated .CMsgSystemAudioManagerPort ports = 3;
  int ports_size() const;
  private:
  int _internal_ports_size() const;
  public:
  void clear_ports();
  ::CMsgSystemAudioManagerPort* mutable_ports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerPort >*
      mutable_ports();
  private:
  const ::CMsgSystemAudioManagerPort& _internal_ports(int index) const;
  ::CMsgSystemAudioManagerPort* _internal_add_ports();
  public:
  const ::CMsgSystemAudioManagerPort& ports(int index) const;
  ::CMsgSystemAudioManagerPort* add_ports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerPort >&
      ports() const;

  // repeated .CMsgSystemAudioManagerLink links = 4;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  ::CMsgSystemAudioManagerLink* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerLink >*
      mutable_links();
  private:
  const ::CMsgSystemAudioManagerLink& _internal_links(int index) const;
  ::CMsgSystemAudioManagerLink* _internal_add_links();
  public:
  const ::CMsgSystemAudioManagerLink& links(int index) const;
  ::CMsgSystemAudioManagerLink* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerLink >&
      links() const;

  // @@protoc_insertion_point(class_scope:CMsgSystemAudioManagerStateHW)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerDevice > devices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerNode > nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerPort > ports_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerLink > links_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemAudioManagerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemAudioManagerState) */ {
 public:
  inline CMsgSystemAudioManagerState() : CMsgSystemAudioManagerState(nullptr) {}
  ~CMsgSystemAudioManagerState() override;
  explicit constexpr CMsgSystemAudioManagerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemAudioManagerState(const CMsgSystemAudioManagerState& from);
  CMsgSystemAudioManagerState(CMsgSystemAudioManagerState&& from) noexcept
    : CMsgSystemAudioManagerState() {
    *this = ::std::move(from);
  }

  inline CMsgSystemAudioManagerState& operator=(const CMsgSystemAudioManagerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemAudioManagerState& operator=(CMsgSystemAudioManagerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemAudioManagerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemAudioManagerState* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemAudioManagerState*>(
               &_CMsgSystemAudioManagerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CMsgSystemAudioManagerState& a, CMsgSystemAudioManagerState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemAudioManagerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemAudioManagerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemAudioManagerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemAudioManagerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemAudioManagerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemAudioManagerState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemAudioManagerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemAudioManagerState";
  }
  protected:
  explicit CMsgSystemAudioManagerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHwFieldNumber = 3,
    kRtimeFilterFieldNumber = 1,
    kCounterFieldNumber = 2,
  };
  // optional .CMsgSystemAudioManagerStateHW hw = 3;
  bool has_hw() const;
  private:
  bool _internal_has_hw() const;
  public:
  void clear_hw();
  const ::CMsgSystemAudioManagerStateHW& hw() const;
  PROTOBUF_NODISCARD ::CMsgSystemAudioManagerStateHW* release_hw();
  ::CMsgSystemAudioManagerStateHW* mutable_hw();
  void set_allocated_hw(::CMsgSystemAudioManagerStateHW* hw);
  private:
  const ::CMsgSystemAudioManagerStateHW& _internal_hw() const;
  ::CMsgSystemAudioManagerStateHW* _internal_mutable_hw();
  public:
  void unsafe_arena_set_allocated_hw(
      ::CMsgSystemAudioManagerStateHW* hw);
  ::CMsgSystemAudioManagerStateHW* unsafe_arena_release_hw();

  // optional fixed32 rtime_filter = 1;
  bool has_rtime_filter() const;
  private:
  bool _internal_has_rtime_filter() const;
  public:
  void clear_rtime_filter();
  uint32_t rtime_filter() const;
  void set_rtime_filter(uint32_t value);
  private:
  uint32_t _internal_rtime_filter() const;
  void _internal_set_rtime_filter(uint32_t value);
  public:

  // optional int32 counter = 2;
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;
  public:
  void clear_counter();
  int32_t counter() const;
  void set_counter(int32_t value);
  private:
  int32_t _internal_counter() const;
  void _internal_set_counter(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemAudioManagerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgSystemAudioManagerStateHW* hw_;
  uint32_t rtime_filter_;
  int32_t counter_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemAudioManagerUpdateSomething final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemAudioManagerUpdateSomething) */ {
 public:
  inline CMsgSystemAudioManagerUpdateSomething() : CMsgSystemAudioManagerUpdateSomething(nullptr) {}
  ~CMsgSystemAudioManagerUpdateSomething() override;
  explicit constexpr CMsgSystemAudioManagerUpdateSomething(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemAudioManagerUpdateSomething(const CMsgSystemAudioManagerUpdateSomething& from);
  CMsgSystemAudioManagerUpdateSomething(CMsgSystemAudioManagerUpdateSomething&& from) noexcept
    : CMsgSystemAudioManagerUpdateSomething() {
    *this = ::std::move(from);
  }

  inline CMsgSystemAudioManagerUpdateSomething& operator=(const CMsgSystemAudioManagerUpdateSomething& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemAudioManagerUpdateSomething& operator=(CMsgSystemAudioManagerUpdateSomething&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemAudioManagerUpdateSomething& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemAudioManagerUpdateSomething* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemAudioManagerUpdateSomething*>(
               &_CMsgSystemAudioManagerUpdateSomething_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CMsgSystemAudioManagerUpdateSomething& a, CMsgSystemAudioManagerUpdateSomething& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemAudioManagerUpdateSomething* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemAudioManagerUpdateSomething* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemAudioManagerUpdateSomething* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemAudioManagerUpdateSomething>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemAudioManagerUpdateSomething& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemAudioManagerUpdateSomething& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemAudioManagerUpdateSomething* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemAudioManagerUpdateSomething";
  }
  protected:
  explicit CMsgSystemAudioManagerUpdateSomething(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCounterFieldNumber = 1,
  };
  // optional int32 counter = 1;
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;
  public:
  void clear_counter();
  int32_t counter() const;
  void set_counter(int32_t value);
  private:
  int32_t _internal_counter() const;
  void _internal_set_counter(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemAudioManagerUpdateSomething)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t counter_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemDisplayMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemDisplayMode) */ {
 public:
  inline CMsgSystemDisplayMode() : CMsgSystemDisplayMode(nullptr) {}
  ~CMsgSystemDisplayMode() override;
  explicit constexpr CMsgSystemDisplayMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemDisplayMode(const CMsgSystemDisplayMode& from);
  CMsgSystemDisplayMode(CMsgSystemDisplayMode&& from) noexcept
    : CMsgSystemDisplayMode() {
    *this = ::std::move(from);
  }

  inline CMsgSystemDisplayMode& operator=(const CMsgSystemDisplayMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemDisplayMode& operator=(CMsgSystemDisplayMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemDisplayMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemDisplayMode* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemDisplayMode*>(
               &_CMsgSystemDisplayMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CMsgSystemDisplayMode& a, CMsgSystemDisplayMode& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemDisplayMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemDisplayMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemDisplayMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemDisplayMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemDisplayMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemDisplayMode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemDisplayMode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemDisplayMode";
  }
  protected:
  explicit CMsgSystemDisplayMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kRefreshHzFieldNumber = 4,
  };
  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional int32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // optional int32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // optional int32 refresh_hz = 4;
  bool has_refresh_hz() const;
  private:
  bool _internal_has_refresh_hz() const;
  public:
  void clear_refresh_hz();
  int32_t refresh_hz() const;
  void set_refresh_hz(int32_t value);
  private:
  int32_t _internal_refresh_hz() const;
  void _internal_set_refresh_hz(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemDisplayMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t id_;
  int32_t width_;
  int32_t height_;
  int32_t refresh_hz_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemDisplay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemDisplay) */ {
 public:
  inline CMsgSystemDisplay() : CMsgSystemDisplay(nullptr) {}
  ~CMsgSystemDisplay() override;
  explicit constexpr CMsgSystemDisplay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemDisplay(const CMsgSystemDisplay& from);
  CMsgSystemDisplay(CMsgSystemDisplay&& from) noexcept
    : CMsgSystemDisplay() {
    *this = ::std::move(from);
  }

  inline CMsgSystemDisplay& operator=(const CMsgSystemDisplay& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemDisplay& operator=(CMsgSystemDisplay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemDisplay& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemDisplay* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemDisplay*>(
               &_CMsgSystemDisplay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CMsgSystemDisplay& a, CMsgSystemDisplay& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemDisplay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemDisplay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemDisplay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemDisplay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemDisplay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemDisplay& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemDisplay* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemDisplay";
  }
  protected:
  explicit CMsgSystemDisplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModesFieldNumber = 11,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kIdFieldNumber = 1,
    kIsPrimaryFieldNumber = 4,
    kIsEnabledFieldNumber = 5,
    kIsInternalFieldNumber = 6,
    kHasModeOverrideFieldNumber = 7,
    kWidthMmFieldNumber = 8,
    kHeightMmFieldNumber = 9,
    kCurrentModeIdFieldNumber = 10,
    kRefreshRateMinFieldNumber = 12,
    kRefreshRateMaxFieldNumber = 13,
    kIsVrrCapableFieldNumber = 14,
    kIsVrrEnabledFieldNumber = 15,
    kIsHdrCapableFieldNumber = 16,
    kIsHdrEnabledFieldNumber = 17,
  };
  // repeated .CMsgSystemDisplayMode modes = 11;
  int modes_size() const;
  private:
  int _internal_modes_size() const;
  public:
  void clear_modes();
  ::CMsgSystemDisplayMode* mutable_modes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemDisplayMode >*
      mutable_modes();
  private:
  const ::CMsgSystemDisplayMode& _internal_modes(int index) const;
  ::CMsgSystemDisplayMode* _internal_add_modes();
  public:
  const ::CMsgSystemDisplayMode& modes(int index) const;
  ::CMsgSystemDisplayMode* add_modes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemDisplayMode >&
      modes() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional bool is_primary = 4;
  bool has_is_primary() const;
  private:
  bool _internal_has_is_primary() const;
  public:
  void clear_is_primary();
  bool is_primary() const;
  void set_is_primary(bool value);
  private:
  bool _internal_is_primary() const;
  void _internal_set_is_primary(bool value);
  public:

  // optional bool is_enabled = 5;
  bool has_is_enabled() const;
  private:
  bool _internal_has_is_enabled() const;
  public:
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);
  private:
  bool _internal_is_enabled() const;
  void _internal_set_is_enabled(bool value);
  public:

  // optional bool is_internal = 6;
  bool has_is_internal() const;
  private:
  bool _internal_has_is_internal() const;
  public:
  void clear_is_internal();
  bool is_internal() const;
  void set_is_internal(bool value);
  private:
  bool _internal_is_internal() const;
  void _internal_set_is_internal(bool value);
  public:

  // optional bool has_mode_override = 7;
  bool has_has_mode_override() const;
  private:
  bool _internal_has_has_mode_override() const;
  public:
  void clear_has_mode_override();
  bool has_mode_override() const;
  void set_has_mode_override(bool value);
  private:
  bool _internal_has_mode_override() const;
  void _internal_set_has_mode_override(bool value);
  public:

  // optional int32 width_mm = 8;
  bool has_width_mm() const;
  private:
  bool _internal_has_width_mm() const;
  public:
  void clear_width_mm();
  int32_t width_mm() const;
  void set_width_mm(int32_t value);
  private:
  int32_t _internal_width_mm() const;
  void _internal_set_width_mm(int32_t value);
  public:

  // optional int32 height_mm = 9;
  bool has_height_mm() const;
  private:
  bool _internal_has_height_mm() const;
  public:
  void clear_height_mm();
  int32_t height_mm() const;
  void set_height_mm(int32_t value);
  private:
  int32_t _internal_height_mm() const;
  void _internal_set_height_mm(int32_t value);
  public:

  // optional int32 current_mode_id = 10;
  bool has_current_mode_id() const;
  private:
  bool _internal_has_current_mode_id() const;
  public:
  void clear_current_mode_id();
  int32_t current_mode_id() const;
  void set_current_mode_id(int32_t value);
  private:
  int32_t _internal_current_mode_id() const;
  void _internal_set_current_mode_id(int32_t value);
  public:

  // optional int32 refresh_rate_min = 12;
  bool has_refresh_rate_min() const;
  private:
  bool _internal_has_refresh_rate_min() const;
  public:
  void clear_refresh_rate_min();
  int32_t refresh_rate_min() const;
  void set_refresh_rate_min(int32_t value);
  private:
  int32_t _internal_refresh_rate_min() const;
  void _internal_set_refresh_rate_min(int32_t value);
  public:

  // optional int32 refresh_rate_max = 13;
  bool has_refresh_rate_max() const;
  private:
  bool _internal_has_refresh_rate_max() const;
  public:
  void clear_refresh_rate_max();
  int32_t refresh_rate_max() const;
  void set_refresh_rate_max(int32_t value);
  private:
  int32_t _internal_refresh_rate_max() const;
  void _internal_set_refresh_rate_max(int32_t value);
  public:

  // optional bool is_vrr_capable = 14;
  bool has_is_vrr_capable() const;
  private:
  bool _internal_has_is_vrr_capable() const;
  public:
  void clear_is_vrr_capable();
  bool is_vrr_capable() const;
  void set_is_vrr_capable(bool value);
  private:
  bool _internal_is_vrr_capable() const;
  void _internal_set_is_vrr_capable(bool value);
  public:

  // optional bool is_vrr_enabled = 15;
  bool has_is_vrr_enabled() const;
  private:
  bool _internal_has_is_vrr_enabled() const;
  public:
  void clear_is_vrr_enabled();
  bool is_vrr_enabled() const;
  void set_is_vrr_enabled(bool value);
  private:
  bool _internal_is_vrr_enabled() const;
  void _internal_set_is_vrr_enabled(bool value);
  public:

  // optional bool is_hdr_capable = 16;
  bool has_is_hdr_capable() const;
  private:
  bool _internal_has_is_hdr_capable() const;
  public:
  void clear_is_hdr_capable();
  bool is_hdr_capable() const;
  void set_is_hdr_capable(bool value);
  private:
  bool _internal_is_hdr_capable() const;
  void _internal_set_is_hdr_capable(bool value);
  public:

  // optional bool is_hdr_enabled = 17;
  bool has_is_hdr_enabled() const;
  private:
  bool _internal_has_is_hdr_enabled() const;
  public:
  void clear_is_hdr_enabled();
  bool is_hdr_enabled() const;
  void set_is_hdr_enabled(bool value);
  private:
  bool _internal_is_hdr_enabled() const;
  void _internal_set_is_hdr_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemDisplay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemDisplayMode > modes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int32_t id_;
  bool is_primary_;
  bool is_enabled_;
  bool is_internal_;
  bool has_mode_override_;
  int32_t width_mm_;
  int32_t height_mm_;
  int32_t current_mode_id_;
  int32_t refresh_rate_min_;
  int32_t refresh_rate_max_;
  bool is_vrr_capable_;
  bool is_vrr_enabled_;
  bool is_hdr_capable_;
  bool is_hdr_enabled_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemDisplayManagerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemDisplayManagerState) */ {
 public:
  inline CMsgSystemDisplayManagerState() : CMsgSystemDisplayManagerState(nullptr) {}
  ~CMsgSystemDisplayManagerState() override;
  explicit constexpr CMsgSystemDisplayManagerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemDisplayManagerState(const CMsgSystemDisplayManagerState& from);
  CMsgSystemDisplayManagerState(CMsgSystemDisplayManagerState&& from) noexcept
    : CMsgSystemDisplayManagerState() {
    *this = ::std::move(from);
  }

  inline CMsgSystemDisplayManagerState& operator=(const CMsgSystemDisplayManagerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemDisplayManagerState& operator=(CMsgSystemDisplayManagerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemDisplayManagerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemDisplayManagerState* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemDisplayManagerState*>(
               &_CMsgSystemDisplayManagerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CMsgSystemDisplayManagerState& a, CMsgSystemDisplayManagerState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemDisplayManagerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemDisplayManagerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemDisplayManagerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemDisplayManagerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemDisplayManagerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemDisplayManagerState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemDisplayManagerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemDisplayManagerState";
  }
  protected:
  explicit CMsgSystemDisplayManagerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplaysFieldNumber = 1,
    kIsModeSwitchingSupportedFieldNumber = 2,
    kCompatibilityModeFieldNumber = 3,
  };
  // repeated .CMsgSystemDisplay displays = 1;
  int displays_size() const;
  private:
  int _internal_displays_size() const;
  public:
  void clear_displays();
  ::CMsgSystemDisplay* mutable_displays(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemDisplay >*
      mutable_displays();
  private:
  const ::CMsgSystemDisplay& _internal_displays(int index) const;
  ::CMsgSystemDisplay* _internal_add_displays();
  public:
  const ::CMsgSystemDisplay& displays(int index) const;
  ::CMsgSystemDisplay* add_displays();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemDisplay >&
      displays() const;

  // optional bool is_mode_switching_supported = 2;
  bool has_is_mode_switching_supported() const;
  private:
  bool _internal_has_is_mode_switching_supported() const;
  public:
  void clear_is_mode_switching_supported();
  bool is_mode_switching_supported() const;
  void set_is_mode_switching_supported(bool value);
  private:
  bool _internal_is_mode_switching_supported() const;
  void _internal_set_is_mode_switching_supported(bool value);
  public:

  // optional .ESystemDisplayCompatibilityMode compatibility_mode = 3 [default = k_ESystemDisplayCompatibilityMode_Invalid];
  bool has_compatibility_mode() const;
  private:
  bool _internal_has_compatibility_mode() const;
  public:
  void clear_compatibility_mode();
  ::ESystemDisplayCompatibilityMode compatibility_mode() const;
  void set_compatibility_mode(::ESystemDisplayCompatibilityMode value);
  private:
  ::ESystemDisplayCompatibilityMode _internal_compatibility_mode() const;
  void _internal_set_compatibility_mode(::ESystemDisplayCompatibilityMode value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemDisplayManagerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemDisplay > displays_;
  bool is_mode_switching_supported_;
  int compatibility_mode_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemDisplayManagerSetMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemDisplayManagerSetMode) */ {
 public:
  inline CMsgSystemDisplayManagerSetMode() : CMsgSystemDisplayManagerSetMode(nullptr) {}
  ~CMsgSystemDisplayManagerSetMode() override;
  explicit constexpr CMsgSystemDisplayManagerSetMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemDisplayManagerSetMode(const CMsgSystemDisplayManagerSetMode& from);
  CMsgSystemDisplayManagerSetMode(CMsgSystemDisplayManagerSetMode&& from) noexcept
    : CMsgSystemDisplayManagerSetMode() {
    *this = ::std::move(from);
  }

  inline CMsgSystemDisplayManagerSetMode& operator=(const CMsgSystemDisplayManagerSetMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemDisplayManagerSetMode& operator=(CMsgSystemDisplayManagerSetMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemDisplayManagerSetMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemDisplayManagerSetMode* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemDisplayManagerSetMode*>(
               &_CMsgSystemDisplayManagerSetMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CMsgSystemDisplayManagerSetMode& a, CMsgSystemDisplayManagerSetMode& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemDisplayManagerSetMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemDisplayManagerSetMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemDisplayManagerSetMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemDisplayManagerSetMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemDisplayManagerSetMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemDisplayManagerSetMode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemDisplayManagerSetMode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemDisplayManagerSetMode";
  }
  protected:
  explicit CMsgSystemDisplayManagerSetMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayIdFieldNumber = 1,
    kModeIdFieldNumber = 2,
  };
  // optional int32 display_id = 1;
  bool has_display_id() const;
  private:
  bool _internal_has_display_id() const;
  public:
  void clear_display_id();
  int32_t display_id() const;
  void set_display_id(int32_t value);
  private:
  int32_t _internal_display_id() const;
  void _internal_set_display_id(int32_t value);
  public:

  // optional int32 mode_id = 2;
  bool has_mode_id() const;
  private:
  bool _internal_has_mode_id() const;
  public:
  void clear_mode_id();
  int32_t mode_id() const;
  void set_mode_id(int32_t value);
  private:
  int32_t _internal_mode_id() const;
  void _internal_set_mode_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemDisplayManagerSetMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t display_id_;
  int32_t mode_id_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemManagerSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemManagerSettings) */ {
 public:
  inline CMsgSystemManagerSettings() : CMsgSystemManagerSettings(nullptr) {}
  ~CMsgSystemManagerSettings() override;
  explicit constexpr CMsgSystemManagerSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemManagerSettings(const CMsgSystemManagerSettings& from);
  CMsgSystemManagerSettings(CMsgSystemManagerSettings&& from) noexcept
    : CMsgSystemManagerSettings() {
    *this = ::std::move(from);
  }

  inline CMsgSystemManagerSettings& operator=(const CMsgSystemManagerSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemManagerSettings& operator=(CMsgSystemManagerSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemManagerSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemManagerSettings* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemManagerSettings*>(
               &_CMsgSystemManagerSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CMsgSystemManagerSettings& a, CMsgSystemManagerSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemManagerSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemManagerSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemManagerSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemManagerSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemManagerSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemManagerSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemManagerSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemManagerSettings";
  }
  protected:
  explicit CMsgSystemManagerSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdleBacklightDimBatterySecondsFieldNumber = 1,
    kIdleBacklightDimAcSecondsFieldNumber = 2,
    kIdleSuspendBatterySecondsFieldNumber = 3,
    kIdleSuspendAcSecondsFieldNumber = 4,
    kIdleSuspendSupressedFieldNumber = 5,
    kIsAdaptiveBrightnessAvailableFieldNumber = 6,
    kDisplayAdaptiveBrightnessEnabledFieldNumber = 7,
    kDisplayNightmodeEnabledFieldNumber = 10,
    kDisplayNightmodeTintstrengthFieldNumber = 11,
    kDisplayNightmodeMaxhueFieldNumber = 12,
    kDisplayNightmodeMaxsatFieldNumber = 13,
    kDisplayNightmodeUiexpFieldNumber = 14,
    kDisplayNightmodeBlendFieldNumber = 15,
    kDisplayNightmodeScheduleStarttimeFieldNumber = 18,
    kDisplayNightmodeScheduleEndtimeFieldNumber = 19,
    kDisplayNightmodeResetFieldNumber = 16,
    kDisplayNightmodeScheduleEnabledFieldNumber = 17,
    kDisplayDiagnosticsEnabledFieldNumber = 20,
    kIsWifiPowersaveEnabledFieldNumber = 26,
    kAlsLuxLatestFieldNumber = 21,
    kAlsLuxMedianFieldNumber = 22,
    kDisplayBacklightRawFieldNumber = 23,
    kDisplayBrightnessAdaptiveminFieldNumber = 24,
    kDisplayBrightnessAdaptivemaxFieldNumber = 25,
    kFanControlModeFieldNumber = 28,
    kIsFanControlAvailableFieldNumber = 27,
    kIsDisplayBrightnessAvailableFieldNumber = 29,
    kIsDisplayColormanagementAvailableFieldNumber = 31,
    kDisplayColorgamutFieldNumber = 32,
  };
  // optional float idle_backlight_dim_battery_seconds = 1;
  bool has_idle_backlight_dim_battery_seconds() const;
  private:
  bool _internal_has_idle_backlight_dim_battery_seconds() const;
  public:
  void clear_idle_backlight_dim_battery_seconds();
  float idle_backlight_dim_battery_seconds() const;
  void set_idle_backlight_dim_battery_seconds(float value);
  private:
  float _internal_idle_backlight_dim_battery_seconds() const;
  void _internal_set_idle_backlight_dim_battery_seconds(float value);
  public:

  // optional float idle_backlight_dim_ac_seconds = 2;
  bool has_idle_backlight_dim_ac_seconds() const;
  private:
  bool _internal_has_idle_backlight_dim_ac_seconds() const;
  public:
  void clear_idle_backlight_dim_ac_seconds();
  float idle_backlight_dim_ac_seconds() const;
  void set_idle_backlight_dim_ac_seconds(float value);
  private:
  float _internal_idle_backlight_dim_ac_seconds() const;
  void _internal_set_idle_backlight_dim_ac_seconds(float value);
  public:

  // optional float idle_suspend_battery_seconds = 3;
  bool has_idle_suspend_battery_seconds() const;
  private:
  bool _internal_has_idle_suspend_battery_seconds() const;
  public:
  void clear_idle_suspend_battery_seconds();
  float idle_suspend_battery_seconds() const;
  void set_idle_suspend_battery_seconds(float value);
  private:
  float _internal_idle_suspend_battery_seconds() const;
  void _internal_set_idle_suspend_battery_seconds(float value);
  public:

  // optional float idle_suspend_ac_seconds = 4;
  bool has_idle_suspend_ac_seconds() const;
  private:
  bool _internal_has_idle_suspend_ac_seconds() const;
  public:
  void clear_idle_suspend_ac_seconds();
  float idle_suspend_ac_seconds() const;
  void set_idle_suspend_ac_seconds(float value);
  private:
  float _internal_idle_suspend_ac_seconds() const;
  void _internal_set_idle_suspend_ac_seconds(float value);
  public:

  // optional bool idle_suspend_supressed = 5;
  bool has_idle_suspend_supressed() const;
  private:
  bool _internal_has_idle_suspend_supressed() const;
  public:
  void clear_idle_suspend_supressed();
  bool idle_suspend_supressed() const;
  void set_idle_suspend_supressed(bool value);
  private:
  bool _internal_idle_suspend_supressed() const;
  void _internal_set_idle_suspend_supressed(bool value);
  public:

  // optional bool is_adaptive_brightness_available = 6;
  bool has_is_adaptive_brightness_available() const;
  private:
  bool _internal_has_is_adaptive_brightness_available() const;
  public:
  void clear_is_adaptive_brightness_available();
  bool is_adaptive_brightness_available() const;
  void set_is_adaptive_brightness_available(bool value);
  private:
  bool _internal_is_adaptive_brightness_available() const;
  void _internal_set_is_adaptive_brightness_available(bool value);
  public:

  // optional bool display_adaptive_brightness_enabled = 7;
  bool has_display_adaptive_brightness_enabled() const;
  private:
  bool _internal_has_display_adaptive_brightness_enabled() const;
  public:
  void clear_display_adaptive_brightness_enabled();
  bool display_adaptive_brightness_enabled() const;
  void set_display_adaptive_brightness_enabled(bool value);
  private:
  bool _internal_display_adaptive_brightness_enabled() const;
  void _internal_set_display_adaptive_brightness_enabled(bool value);
  public:

  // optional bool display_nightmode_enabled = 10;
  bool has_display_nightmode_enabled() const;
  private:
  bool _internal_has_display_nightmode_enabled() const;
  public:
  void clear_display_nightmode_enabled();
  bool display_nightmode_enabled() const;
  void set_display_nightmode_enabled(bool value);
  private:
  bool _internal_display_nightmode_enabled() const;
  void _internal_set_display_nightmode_enabled(bool value);
  public:

  // optional float display_nightmode_tintstrength = 11;
  bool has_display_nightmode_tintstrength() const;
  private:
  bool _internal_has_display_nightmode_tintstrength() const;
  public:
  void clear_display_nightmode_tintstrength();
  float display_nightmode_tintstrength() const;
  void set_display_nightmode_tintstrength(float value);
  private:
  float _internal_display_nightmode_tintstrength() const;
  void _internal_set_display_nightmode_tintstrength(float value);
  public:

  // optional float display_nightmode_maxhue = 12;
  bool has_display_nightmode_maxhue() const;
  private:
  bool _internal_has_display_nightmode_maxhue() const;
  public:
  void clear_display_nightmode_maxhue();
  float display_nightmode_maxhue() const;
  void set_display_nightmode_maxhue(float value);
  private:
  float _internal_display_nightmode_maxhue() const;
  void _internal_set_display_nightmode_maxhue(float value);
  public:

  // optional float display_nightmode_maxsat = 13;
  bool has_display_nightmode_maxsat() const;
  private:
  bool _internal_has_display_nightmode_maxsat() const;
  public:
  void clear_display_nightmode_maxsat();
  float display_nightmode_maxsat() const;
  void set_display_nightmode_maxsat(float value);
  private:
  float _internal_display_nightmode_maxsat() const;
  void _internal_set_display_nightmode_maxsat(float value);
  public:

  // optional float display_nightmode_uiexp = 14;
  bool has_display_nightmode_uiexp() const;
  private:
  bool _internal_has_display_nightmode_uiexp() const;
  public:
  void clear_display_nightmode_uiexp();
  float display_nightmode_uiexp() const;
  void set_display_nightmode_uiexp(float value);
  private:
  float _internal_display_nightmode_uiexp() const;
  void _internal_set_display_nightmode_uiexp(float value);
  public:

  // optional float display_nightmode_blend = 15;
  bool has_display_nightmode_blend() const;
  private:
  bool _internal_has_display_nightmode_blend() const;
  public:
  void clear_display_nightmode_blend();
  float display_nightmode_blend() const;
  void set_display_nightmode_blend(float value);
  private:
  float _internal_display_nightmode_blend() const;
  void _internal_set_display_nightmode_blend(float value);
  public:

  // optional float display_nightmode_schedule_starttime = 18;
  bool has_display_nightmode_schedule_starttime() const;
  private:
  bool _internal_has_display_nightmode_schedule_starttime() const;
  public:
  void clear_display_nightmode_schedule_starttime();
  float display_nightmode_schedule_starttime() const;
  void set_display_nightmode_schedule_starttime(float value);
  private:
  float _internal_display_nightmode_schedule_starttime() const;
  void _internal_set_display_nightmode_schedule_starttime(float value);
  public:

  // optional float display_nightmode_schedule_endtime = 19;
  bool has_display_nightmode_schedule_endtime() const;
  private:
  bool _internal_has_display_nightmode_schedule_endtime() const;
  public:
  void clear_display_nightmode_schedule_endtime();
  float display_nightmode_schedule_endtime() const;
  void set_display_nightmode_schedule_endtime(float value);
  private:
  float _internal_display_nightmode_schedule_endtime() const;
  void _internal_set_display_nightmode_schedule_endtime(float value);
  public:

  // optional bool display_nightmode_reset = 16;
  bool has_display_nightmode_reset() const;
  private:
  bool _internal_has_display_nightmode_reset() const;
  public:
  void clear_display_nightmode_reset();
  bool display_nightmode_reset() const;
  void set_display_nightmode_reset(bool value);
  private:
  bool _internal_display_nightmode_reset() const;
  void _internal_set_display_nightmode_reset(bool value);
  public:

  // optional bool display_nightmode_schedule_enabled = 17;
  bool has_display_nightmode_schedule_enabled() const;
  private:
  bool _internal_has_display_nightmode_schedule_enabled() const;
  public:
  void clear_display_nightmode_schedule_enabled();
  bool display_nightmode_schedule_enabled() const;
  void set_display_nightmode_schedule_enabled(bool value);
  private:
  bool _internal_display_nightmode_schedule_enabled() const;
  void _internal_set_display_nightmode_schedule_enabled(bool value);
  public:

  // optional bool display_diagnostics_enabled = 20;
  bool has_display_diagnostics_enabled() const;
  private:
  bool _internal_has_display_diagnostics_enabled() const;
  public:
  void clear_display_diagnostics_enabled();
  bool display_diagnostics_enabled() const;
  void set_display_diagnostics_enabled(bool value);
  private:
  bool _internal_display_diagnostics_enabled() const;
  void _internal_set_display_diagnostics_enabled(bool value);
  public:

  // optional bool is_wifi_powersave_enabled = 26;
  bool has_is_wifi_powersave_enabled() const;
  private:
  bool _internal_has_is_wifi_powersave_enabled() const;
  public:
  void clear_is_wifi_powersave_enabled();
  bool is_wifi_powersave_enabled() const;
  void set_is_wifi_powersave_enabled(bool value);
  private:
  bool _internal_is_wifi_powersave_enabled() const;
  void _internal_set_is_wifi_powersave_enabled(bool value);
  public:

  // optional float als_lux_latest = 21;
  bool has_als_lux_latest() const;
  private:
  bool _internal_has_als_lux_latest() const;
  public:
  void clear_als_lux_latest();
  float als_lux_latest() const;
  void set_als_lux_latest(float value);
  private:
  float _internal_als_lux_latest() const;
  void _internal_set_als_lux_latest(float value);
  public:

  // optional float als_lux_median = 22;
  bool has_als_lux_median() const;
  private:
  bool _internal_has_als_lux_median() const;
  public:
  void clear_als_lux_median();
  float als_lux_median() const;
  void set_als_lux_median(float value);
  private:
  float _internal_als_lux_median() const;
  void _internal_set_als_lux_median(float value);
  public:

  // optional float display_backlight_raw = 23;
  bool has_display_backlight_raw() const;
  private:
  bool _internal_has_display_backlight_raw() const;
  public:
  void clear_display_backlight_raw();
  float display_backlight_raw() const;
  void set_display_backlight_raw(float value);
  private:
  float _internal_display_backlight_raw() const;
  void _internal_set_display_backlight_raw(float value);
  public:

  // optional float display_brightness_adaptivemin = 24;
  bool has_display_brightness_adaptivemin() const;
  private:
  bool _internal_has_display_brightness_adaptivemin() const;
  public:
  void clear_display_brightness_adaptivemin();
  float display_brightness_adaptivemin() const;
  void set_display_brightness_adaptivemin(float value);
  private:
  float _internal_display_brightness_adaptivemin() const;
  void _internal_set_display_brightness_adaptivemin(float value);
  public:

  // optional float display_brightness_adaptivemax = 25;
  bool has_display_brightness_adaptivemax() const;
  private:
  bool _internal_has_display_brightness_adaptivemax() const;
  public:
  void clear_display_brightness_adaptivemax();
  float display_brightness_adaptivemax() const;
  void set_display_brightness_adaptivemax(float value);
  private:
  float _internal_display_brightness_adaptivemax() const;
  void _internal_set_display_brightness_adaptivemax(float value);
  public:

  // optional .ESystemFanControlMode fan_control_mode = 28 [default = k_SystemFanControlMode_Invalid];
  bool has_fan_control_mode() const;
  private:
  bool _internal_has_fan_control_mode() const;
  public:
  void clear_fan_control_mode();
  ::ESystemFanControlMode fan_control_mode() const;
  void set_fan_control_mode(::ESystemFanControlMode value);
  private:
  ::ESystemFanControlMode _internal_fan_control_mode() const;
  void _internal_set_fan_control_mode(::ESystemFanControlMode value);
  public:

  // optional bool is_fan_control_available = 27;
  bool has_is_fan_control_available() const;
  private:
  bool _internal_has_is_fan_control_available() const;
  public:
  void clear_is_fan_control_available();
  bool is_fan_control_available() const;
  void set_is_fan_control_available(bool value);
  private:
  bool _internal_is_fan_control_available() const;
  void _internal_set_is_fan_control_available(bool value);
  public:

  // optional bool is_display_brightness_available = 29;
  bool has_is_display_brightness_available() const;
  private:
  bool _internal_has_is_display_brightness_available() const;
  public:
  void clear_is_display_brightness_available();
  bool is_display_brightness_available() const;
  void set_is_display_brightness_available(bool value);
  private:
  bool _internal_is_display_brightness_available() const;
  void _internal_set_is_display_brightness_available(bool value);
  public:

  // optional bool is_display_colormanagement_available = 31;
  bool has_is_display_colormanagement_available() const;
  private:
  bool _internal_has_is_display_colormanagement_available() const;
  public:
  void clear_is_display_colormanagement_available();
  bool is_display_colormanagement_available() const;
  void set_is_display_colormanagement_available(bool value);
  private:
  bool _internal_is_display_colormanagement_available() const;
  void _internal_set_is_display_colormanagement_available(bool value);
  public:

  // optional float display_colorgamut = 32;
  bool has_display_colorgamut() const;
  private:
  bool _internal_has_display_colorgamut() const;
  public:
  void clear_display_colorgamut();
  float display_colorgamut() const;
  void set_display_colorgamut(float value);
  private:
  float _internal_display_colorgamut() const;
  void _internal_set_display_colorgamut(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemManagerSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float idle_backlight_dim_battery_seconds_;
  float idle_backlight_dim_ac_seconds_;
  float idle_suspend_battery_seconds_;
  float idle_suspend_ac_seconds_;
  bool idle_suspend_supressed_;
  bool is_adaptive_brightness_available_;
  bool display_adaptive_brightness_enabled_;
  bool display_nightmode_enabled_;
  float display_nightmode_tintstrength_;
  float display_nightmode_maxhue_;
  float display_nightmode_maxsat_;
  float display_nightmode_uiexp_;
  float display_nightmode_blend_;
  float display_nightmode_schedule_starttime_;
  float display_nightmode_schedule_endtime_;
  bool display_nightmode_reset_;
  bool display_nightmode_schedule_enabled_;
  bool display_diagnostics_enabled_;
  bool is_wifi_powersave_enabled_;
  float als_lux_latest_;
  float als_lux_median_;
  float display_backlight_raw_;
  float display_brightness_adaptivemin_;
  float display_brightness_adaptivemax_;
  int fan_control_mode_;
  bool is_fan_control_available_;
  bool is_display_brightness_available_;
  bool is_display_colormanagement_available_;
  float display_colorgamut_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSelectOSBranchParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSelectOSBranchParams) */ {
 public:
  inline CMsgSelectOSBranchParams() : CMsgSelectOSBranchParams(nullptr) {}
  ~CMsgSelectOSBranchParams() override;
  explicit constexpr CMsgSelectOSBranchParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSelectOSBranchParams(const CMsgSelectOSBranchParams& from);
  CMsgSelectOSBranchParams(CMsgSelectOSBranchParams&& from) noexcept
    : CMsgSelectOSBranchParams() {
    *this = ::std::move(from);
  }

  inline CMsgSelectOSBranchParams& operator=(const CMsgSelectOSBranchParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSelectOSBranchParams& operator=(CMsgSelectOSBranchParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSelectOSBranchParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSelectOSBranchParams* internal_default_instance() {
    return reinterpret_cast<const CMsgSelectOSBranchParams*>(
               &_CMsgSelectOSBranchParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CMsgSelectOSBranchParams& a, CMsgSelectOSBranchParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSelectOSBranchParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSelectOSBranchParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSelectOSBranchParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSelectOSBranchParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSelectOSBranchParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSelectOSBranchParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSelectOSBranchParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSelectOSBranchParams";
  }
  protected:
  explicit CMsgSelectOSBranchParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomBranchFieldNumber = 2,
    kBranchFieldNumber = 1,
  };
  // optional string custom_branch = 2;
  bool has_custom_branch() const;
  private:
  bool _internal_has_custom_branch() const;
  public:
  void clear_custom_branch();
  const std::string& custom_branch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_branch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_branch();
  PROTOBUF_NODISCARD std::string* release_custom_branch();
  void set_allocated_custom_branch(std::string* custom_branch);
  private:
  const std::string& _internal_custom_branch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_branch(const std::string& value);
  std::string* _internal_mutable_custom_branch();
  public:

  // optional .EOSBranch branch = 1 [default = k_EOSBranch_Unknown];
  bool has_branch() const;
  private:
  bool _internal_has_branch() const;
  public:
  void clear_branch();
  ::EOSBranch branch() const;
  void set_branch(::EOSBranch value);
  private:
  ::EOSBranch _internal_branch() const;
  void _internal_set_branch(::EOSBranch value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSelectOSBranchParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_branch_;
  int branch_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemUpdateProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemUpdateProgress) */ {
 public:
  inline CMsgSystemUpdateProgress() : CMsgSystemUpdateProgress(nullptr) {}
  ~CMsgSystemUpdateProgress() override;
  explicit constexpr CMsgSystemUpdateProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemUpdateProgress(const CMsgSystemUpdateProgress& from);
  CMsgSystemUpdateProgress(CMsgSystemUpdateProgress&& from) noexcept
    : CMsgSystemUpdateProgress() {
    *this = ::std::move(from);
  }

  inline CMsgSystemUpdateProgress& operator=(const CMsgSystemUpdateProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemUpdateProgress& operator=(CMsgSystemUpdateProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemUpdateProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemUpdateProgress* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemUpdateProgress*>(
               &_CMsgSystemUpdateProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CMsgSystemUpdateProgress& a, CMsgSystemUpdateProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemUpdateProgress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemUpdateProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemUpdateProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemUpdateProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemUpdateProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemUpdateProgress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemUpdateProgress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemUpdateProgress";
  }
  protected:
  explicit CMsgSystemUpdateProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageSizeBytesFieldNumber = 2,
    kStageProgressFieldNumber = 1,
    kRtimeEstimatedCompletionFieldNumber = 3,
  };
  // optional int64 stage_size_bytes = 2;
  bool has_stage_size_bytes() const;
  private:
  bool _internal_has_stage_size_bytes() const;
  public:
  void clear_stage_size_bytes();
  int64_t stage_size_bytes() const;
  void set_stage_size_bytes(int64_t value);
  private:
  int64_t _internal_stage_size_bytes() const;
  void _internal_set_stage_size_bytes(int64_t value);
  public:

  // optional float stage_progress = 1;
  bool has_stage_progress() const;
  private:
  bool _internal_has_stage_progress() const;
  public:
  void clear_stage_progress();
  float stage_progress() const;
  void set_stage_progress(float value);
  private:
  float _internal_stage_progress() const;
  void _internal_set_stage_progress(float value);
  public:

  // optional fixed32 rtime_estimated_completion = 3;
  bool has_rtime_estimated_completion() const;
  private:
  bool _internal_has_rtime_estimated_completion() const;
  public:
  void clear_rtime_estimated_completion();
  uint32_t rtime_estimated_completion() const;
  void set_rtime_estimated_completion(uint32_t value);
  private:
  uint32_t _internal_rtime_estimated_completion() const;
  void _internal_set_rtime_estimated_completion(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemUpdateProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t stage_size_bytes_;
  float stage_progress_;
  uint32_t rtime_estimated_completion_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemUpdateCheckResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemUpdateCheckResult) */ {
 public:
  inline CMsgSystemUpdateCheckResult() : CMsgSystemUpdateCheckResult(nullptr) {}
  ~CMsgSystemUpdateCheckResult() override;
  explicit constexpr CMsgSystemUpdateCheckResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemUpdateCheckResult(const CMsgSystemUpdateCheckResult& from);
  CMsgSystemUpdateCheckResult(CMsgSystemUpdateCheckResult&& from) noexcept
    : CMsgSystemUpdateCheckResult() {
    *this = ::std::move(from);
  }

  inline CMsgSystemUpdateCheckResult& operator=(const CMsgSystemUpdateCheckResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemUpdateCheckResult& operator=(CMsgSystemUpdateCheckResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemUpdateCheckResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemUpdateCheckResult* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemUpdateCheckResult*>(
               &_CMsgSystemUpdateCheckResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CMsgSystemUpdateCheckResult& a, CMsgSystemUpdateCheckResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemUpdateCheckResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemUpdateCheckResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemUpdateCheckResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemUpdateCheckResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemUpdateCheckResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemUpdateCheckResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemUpdateCheckResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemUpdateCheckResult";
  }
  protected:
  explicit CMsgSystemUpdateCheckResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 5,
    kAutoMessageFieldNumber = 6,
    kTypeFieldNumber = 1,
    kRtimeCheckedFieldNumber = 3,
    kAvailableFieldNumber = 4,
    kEresultFieldNumber = 2,
  };
  // optional string version = 5;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string auto_message = 6;
  bool has_auto_message() const;
  private:
  bool _internal_has_auto_message() const;
  public:
  void clear_auto_message();
  const std::string& auto_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auto_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auto_message();
  PROTOBUF_NODISCARD std::string* release_auto_message();
  void set_allocated_auto_message(std::string* auto_message);
  private:
  const std::string& _internal_auto_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auto_message(const std::string& value);
  std::string* _internal_mutable_auto_message();
  public:

  // optional .EUpdaterType type = 1 [default = k_EUpdaterType_Invalid];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::EUpdaterType type() const;
  void set_type(::EUpdaterType value);
  private:
  ::EUpdaterType _internal_type() const;
  void _internal_set_type(::EUpdaterType value);
  public:

  // optional fixed32 rtime_checked = 3;
  bool has_rtime_checked() const;
  private:
  bool _internal_has_rtime_checked() const;
  public:
  void clear_rtime_checked();
  uint32_t rtime_checked() const;
  void set_rtime_checked(uint32_t value);
  private:
  uint32_t _internal_rtime_checked() const;
  void _internal_set_rtime_checked(uint32_t value);
  public:

  // optional bool available = 4;
  bool has_available() const;
  private:
  bool _internal_has_available() const;
  public:
  void clear_available();
  bool available() const;
  void set_available(bool value);
  private:
  bool _internal_available() const;
  void _internal_set_available(bool value);
  public:

  // optional uint32 eresult = 2 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  uint32_t eresult() const;
  void set_eresult(uint32_t value);
  private:
  uint32_t _internal_eresult() const;
  void _internal_set_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemUpdateCheckResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auto_message_;
  int type_;
  uint32_t rtime_checked_;
  bool available_;
  uint32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemUpdateApplyParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemUpdateApplyParams) */ {
 public:
  inline CMsgSystemUpdateApplyParams() : CMsgSystemUpdateApplyParams(nullptr) {}
  ~CMsgSystemUpdateApplyParams() override;
  explicit constexpr CMsgSystemUpdateApplyParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemUpdateApplyParams(const CMsgSystemUpdateApplyParams& from);
  CMsgSystemUpdateApplyParams(CMsgSystemUpdateApplyParams&& from) noexcept
    : CMsgSystemUpdateApplyParams() {
    *this = ::std::move(from);
  }

  inline CMsgSystemUpdateApplyParams& operator=(const CMsgSystemUpdateApplyParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemUpdateApplyParams& operator=(CMsgSystemUpdateApplyParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemUpdateApplyParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemUpdateApplyParams* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemUpdateApplyParams*>(
               &_CMsgSystemUpdateApplyParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CMsgSystemUpdateApplyParams& a, CMsgSystemUpdateApplyParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemUpdateApplyParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemUpdateApplyParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemUpdateApplyParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemUpdateApplyParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemUpdateApplyParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemUpdateApplyParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemUpdateApplyParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemUpdateApplyParams";
  }
  protected:
  explicit CMsgSystemUpdateApplyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplyTypesFieldNumber = 1,
  };
  // repeated .EUpdaterType apply_types = 1;
  int apply_types_size() const;
  private:
  int _internal_apply_types_size() const;
  public:
  void clear_apply_types();
  private:
  ::EUpdaterType _internal_apply_types(int index) const;
  void _internal_add_apply_types(::EUpdaterType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_apply_types();
  public:
  ::EUpdaterType apply_types(int index) const;
  void set_apply_types(int index, ::EUpdaterType value);
  void add_apply_types(::EUpdaterType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& apply_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_apply_types();

  // @@protoc_insertion_point(class_scope:CMsgSystemUpdateApplyParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> apply_types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemUpdateApplyResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemUpdateApplyResult) */ {
 public:
  inline CMsgSystemUpdateApplyResult() : CMsgSystemUpdateApplyResult(nullptr) {}
  ~CMsgSystemUpdateApplyResult() override;
  explicit constexpr CMsgSystemUpdateApplyResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemUpdateApplyResult(const CMsgSystemUpdateApplyResult& from);
  CMsgSystemUpdateApplyResult(CMsgSystemUpdateApplyResult&& from) noexcept
    : CMsgSystemUpdateApplyResult() {
    *this = ::std::move(from);
  }

  inline CMsgSystemUpdateApplyResult& operator=(const CMsgSystemUpdateApplyResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemUpdateApplyResult& operator=(CMsgSystemUpdateApplyResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemUpdateApplyResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemUpdateApplyResult* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemUpdateApplyResult*>(
               &_CMsgSystemUpdateApplyResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CMsgSystemUpdateApplyResult& a, CMsgSystemUpdateApplyResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemUpdateApplyResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemUpdateApplyResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemUpdateApplyResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemUpdateApplyResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemUpdateApplyResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemUpdateApplyResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemUpdateApplyResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemUpdateApplyResult";
  }
  protected:
  explicit CMsgSystemUpdateApplyResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kRequiresClientRestartFieldNumber = 3,
    kRequiresSystemRestartFieldNumber = 4,
    kEresultFieldNumber = 2,
  };
  // optional .EUpdaterType type = 1 [default = k_EUpdaterType_Invalid];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::EUpdaterType type() const;
  void set_type(::EUpdaterType value);
  private:
  ::EUpdaterType _internal_type() const;
  void _internal_set_type(::EUpdaterType value);
  public:

  // optional bool requires_client_restart = 3 [default = false];
  bool has_requires_client_restart() const;
  private:
  bool _internal_has_requires_client_restart() const;
  public:
  void clear_requires_client_restart();
  bool requires_client_restart() const;
  void set_requires_client_restart(bool value);
  private:
  bool _internal_requires_client_restart() const;
  void _internal_set_requires_client_restart(bool value);
  public:

  // optional bool requires_system_restart = 4 [default = false];
  bool has_requires_system_restart() const;
  private:
  bool _internal_has_requires_system_restart() const;
  public:
  void clear_requires_system_restart();
  bool requires_system_restart() const;
  void set_requires_system_restart(bool value);
  private:
  bool _internal_requires_system_restart() const;
  void _internal_set_requires_system_restart(bool value);
  public:

  // optional uint32 eresult = 2 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  uint32_t eresult() const;
  void set_eresult(uint32_t value);
  private:
  uint32_t _internal_eresult() const;
  void _internal_set_eresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemUpdateApplyResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  bool requires_client_restart_;
  bool requires_system_restart_;
  uint32_t eresult_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgSystemUpdateState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSystemUpdateState) */ {
 public:
  inline CMsgSystemUpdateState() : CMsgSystemUpdateState(nullptr) {}
  ~CMsgSystemUpdateState() override;
  explicit constexpr CMsgSystemUpdateState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSystemUpdateState(const CMsgSystemUpdateState& from);
  CMsgSystemUpdateState(CMsgSystemUpdateState&& from) noexcept
    : CMsgSystemUpdateState() {
    *this = ::std::move(from);
  }

  inline CMsgSystemUpdateState& operator=(const CMsgSystemUpdateState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSystemUpdateState& operator=(CMsgSystemUpdateState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSystemUpdateState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSystemUpdateState* internal_default_instance() {
    return reinterpret_cast<const CMsgSystemUpdateState*>(
               &_CMsgSystemUpdateState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CMsgSystemUpdateState& a, CMsgSystemUpdateState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSystemUpdateState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSystemUpdateState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSystemUpdateState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSystemUpdateState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSystemUpdateState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgSystemUpdateState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSystemUpdateState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSystemUpdateState";
  }
  protected:
  explicit CMsgSystemUpdateState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateCheckResultsFieldNumber = 3,
    kUpdateApplyResultsFieldNumber = 4,
    kProgressFieldNumber = 2,
    kStateFieldNumber = 1,
    kSupportsOsUpdatesFieldNumber = 5,
  };
  // repeated .CMsgSystemUpdateCheckResult update_check_results = 3;
  int update_check_results_size() const;
  private:
  int _internal_update_check_results_size() const;
  public:
  void clear_update_check_results();
  ::CMsgSystemUpdateCheckResult* mutable_update_check_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemUpdateCheckResult >*
      mutable_update_check_results();
  private:
  const ::CMsgSystemUpdateCheckResult& _internal_update_check_results(int index) const;
  ::CMsgSystemUpdateCheckResult* _internal_add_update_check_results();
  public:
  const ::CMsgSystemUpdateCheckResult& update_check_results(int index) const;
  ::CMsgSystemUpdateCheckResult* add_update_check_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemUpdateCheckResult >&
      update_check_results() const;

  // repeated .CMsgSystemUpdateApplyResult update_apply_results = 4;
  int update_apply_results_size() const;
  private:
  int _internal_update_apply_results_size() const;
  public:
  void clear_update_apply_results();
  ::CMsgSystemUpdateApplyResult* mutable_update_apply_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemUpdateApplyResult >*
      mutable_update_apply_results();
  private:
  const ::CMsgSystemUpdateApplyResult& _internal_update_apply_results(int index) const;
  ::CMsgSystemUpdateApplyResult* _internal_add_update_apply_results();
  public:
  const ::CMsgSystemUpdateApplyResult& update_apply_results(int index) const;
  ::CMsgSystemUpdateApplyResult* add_update_apply_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemUpdateApplyResult >&
      update_apply_results() const;

  // optional .CMsgSystemUpdateProgress progress = 2;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  const ::CMsgSystemUpdateProgress& progress() const;
  PROTOBUF_NODISCARD ::CMsgSystemUpdateProgress* release_progress();
  ::CMsgSystemUpdateProgress* mutable_progress();
  void set_allocated_progress(::CMsgSystemUpdateProgress* progress);
  private:
  const ::CMsgSystemUpdateProgress& _internal_progress() const;
  ::CMsgSystemUpdateProgress* _internal_mutable_progress();
  public:
  void unsafe_arena_set_allocated_progress(
      ::CMsgSystemUpdateProgress* progress);
  ::CMsgSystemUpdateProgress* unsafe_arena_release_progress();

  // optional .EUpdaterState state = 1 [default = k_EUpdaterState_Invalid];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::EUpdaterState state() const;
  void set_state(::EUpdaterState value);
  private:
  ::EUpdaterState _internal_state() const;
  void _internal_set_state(::EUpdaterState value);
  public:

  // optional bool supports_os_updates = 5;
  bool has_supports_os_updates() const;
  private:
  bool _internal_has_supports_os_updates() const;
  public:
  void clear_supports_os_updates();
  bool supports_os_updates() const;
  void set_supports_os_updates(bool value);
  private:
  bool _internal_supports_os_updates() const;
  void _internal_set_supports_os_updates(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSystemUpdateState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemUpdateCheckResult > update_check_results_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemUpdateApplyResult > update_apply_results_;
  ::CMsgSystemUpdateProgress* progress_;
  int state_;
  bool supports_os_updates_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgAchievementChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAchievementChange) */ {
 public:
  inline CMsgAchievementChange() : CMsgAchievementChange(nullptr) {}
  ~CMsgAchievementChange() override;
  explicit constexpr CMsgAchievementChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAchievementChange(const CMsgAchievementChange& from);
  CMsgAchievementChange(CMsgAchievementChange&& from) noexcept
    : CMsgAchievementChange() {
    *this = ::std::move(from);
  }

  inline CMsgAchievementChange& operator=(const CMsgAchievementChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAchievementChange& operator=(CMsgAchievementChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAchievementChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAchievementChange* internal_default_instance() {
    return reinterpret_cast<const CMsgAchievementChange*>(
               &_CMsgAchievementChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CMsgAchievementChange& a, CMsgAchievementChange& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAchievementChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAchievementChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAchievementChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAchievementChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAchievementChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgAchievementChange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAchievementChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAchievementChange";
  }
  protected:
  explicit CMsgAchievementChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAchievementChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t appid_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgCellList_Cell final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCellList.Cell) */ {
 public:
  inline CMsgCellList_Cell() : CMsgCellList_Cell(nullptr) {}
  ~CMsgCellList_Cell() override;
  explicit constexpr CMsgCellList_Cell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCellList_Cell(const CMsgCellList_Cell& from);
  CMsgCellList_Cell(CMsgCellList_Cell&& from) noexcept
    : CMsgCellList_Cell() {
    *this = ::std::move(from);
  }

  inline CMsgCellList_Cell& operator=(const CMsgCellList_Cell& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCellList_Cell& operator=(CMsgCellList_Cell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgCellList_Cell& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCellList_Cell* internal_default_instance() {
    return reinterpret_cast<const CMsgCellList_Cell*>(
               &_CMsgCellList_Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CMsgCellList_Cell& a, CMsgCellList_Cell& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCellList_Cell* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCellList_Cell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgCellList_Cell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgCellList_Cell>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgCellList_Cell& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgCellList_Cell& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCellList_Cell* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCellList.Cell";
  }
  protected:
  explicit CMsgCellList_Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocNameFieldNumber = 2,
    kCellIdFieldNumber = 1,
  };
  // optional string loc_name = 2;
  bool has_loc_name() const;
  private:
  bool _internal_has_loc_name() const;
  public:
  void clear_loc_name();
  const std::string& loc_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loc_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loc_name();
  PROTOBUF_NODISCARD std::string* release_loc_name();
  void set_allocated_loc_name(std::string* loc_name);
  private:
  const std::string& _internal_loc_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loc_name(const std::string& value);
  std::string* _internal_mutable_loc_name();
  public:

  // optional uint32 cell_id = 1;
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  uint32_t cell_id() const;
  void set_cell_id(uint32_t value);
  private:
  uint32_t _internal_cell_id() const;
  void _internal_set_cell_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgCellList.Cell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loc_name_;
  uint32_t cell_id_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgCellList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCellList) */ {
 public:
  inline CMsgCellList() : CMsgCellList(nullptr) {}
  ~CMsgCellList() override;
  explicit constexpr CMsgCellList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCellList(const CMsgCellList& from);
  CMsgCellList(CMsgCellList&& from) noexcept
    : CMsgCellList() {
    *this = ::std::move(from);
  }

  inline CMsgCellList& operator=(const CMsgCellList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCellList& operator=(CMsgCellList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgCellList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCellList* internal_default_instance() {
    return reinterpret_cast<const CMsgCellList*>(
               &_CMsgCellList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CMsgCellList& a, CMsgCellList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCellList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCellList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgCellList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgCellList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgCellList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgCellList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCellList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCellList";
  }
  protected:
  explicit CMsgCellList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgCellList_Cell Cell;

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 1,
  };
  // repeated .CMsgCellList.Cell cells = 1;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::CMsgCellList_Cell* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgCellList_Cell >*
      mutable_cells();
  private:
  const ::CMsgCellList_Cell& _internal_cells(int index) const;
  ::CMsgCellList_Cell* _internal_add_cells();
  public:
  const ::CMsgCellList_Cell& cells(int index) const;
  ::CMsgCellList_Cell* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgCellList_Cell >&
      cells() const;

  // @@protoc_insertion_point(class_scope:CMsgCellList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgCellList_Cell > cells_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgShortcutInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShortcutInfo) */ {
 public:
  inline CMsgShortcutInfo() : CMsgShortcutInfo(nullptr) {}
  ~CMsgShortcutInfo() override;
  explicit constexpr CMsgShortcutInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShortcutInfo(const CMsgShortcutInfo& from);
  CMsgShortcutInfo(CMsgShortcutInfo&& from) noexcept
    : CMsgShortcutInfo() {
    *this = ::std::move(from);
  }

  inline CMsgShortcutInfo& operator=(const CMsgShortcutInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShortcutInfo& operator=(CMsgShortcutInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShortcutInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShortcutInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgShortcutInfo*>(
               &_CMsgShortcutInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CMsgShortcutInfo& a, CMsgShortcutInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShortcutInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShortcutInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShortcutInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShortcutInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShortcutInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgShortcutInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShortcutInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShortcutInfo";
  }
  protected:
  explicit CMsgShortcutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 10,
    kExeFieldNumber = 2,
    kStartDirFieldNumber = 3,
    kIconFieldNumber = 4,
    kPathFieldNumber = 5,
    kArgsFieldNumber = 6,
    kAppNameFieldNumber = 7,
    kFlatpakAppidFieldNumber = 9,
    kDevkitGameidFieldNumber = 19,
    kAppidFieldNumber = 1,
    kOverrideAppidFieldNumber = 8,
    kIsRemoteFieldNumber = 11,
    kIsHiddenFieldNumber = 12,
    kIsTemporaryFieldNumber = 13,
    kIsOpenvrFieldNumber = 14,
    kAllowDesktopConfigFieldNumber = 15,
    kAllowOverlayFieldNumber = 16,
    kIsDevkitShortcutFieldNumber = 18,
    kRtLastPlayedTimeFieldNumber = 17,
  };
  // repeated string tags = 10;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // optional string exe = 2;
  bool has_exe() const;
  private:
  bool _internal_has_exe() const;
  public:
  void clear_exe();
  const std::string& exe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exe();
  PROTOBUF_NODISCARD std::string* release_exe();
  void set_allocated_exe(std::string* exe);
  private:
  const std::string& _internal_exe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exe(const std::string& value);
  std::string* _internal_mutable_exe();
  public:

  // optional string start_dir = 3;
  bool has_start_dir() const;
  private:
  bool _internal_has_start_dir() const;
  public:
  void clear_start_dir();
  const std::string& start_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_dir();
  PROTOBUF_NODISCARD std::string* release_start_dir();
  void set_allocated_start_dir(std::string* start_dir);
  private:
  const std::string& _internal_start_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_dir(const std::string& value);
  std::string* _internal_mutable_start_dir();
  public:

  // optional string icon = 4;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // optional string path = 5;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string args = 6;
  bool has_args() const;
  private:
  bool _internal_has_args() const;
  public:
  void clear_args();
  const std::string& args() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_args(ArgT0&& arg0, ArgT... args);
  std::string* mutable_args();
  PROTOBUF_NODISCARD std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // optional string app_name = 7;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional string flatpak_appid = 9;
  bool has_flatpak_appid() const;
  private:
  bool _internal_has_flatpak_appid() const;
  public:
  void clear_flatpak_appid();
  const std::string& flatpak_appid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flatpak_appid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flatpak_appid();
  PROTOBUF_NODISCARD std::string* release_flatpak_appid();
  void set_allocated_flatpak_appid(std::string* flatpak_appid);
  private:
  const std::string& _internal_flatpak_appid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flatpak_appid(const std::string& value);
  std::string* _internal_mutable_flatpak_appid();
  public:

  // optional string devkit_gameid = 19;
  bool has_devkit_gameid() const;
  private:
  bool _internal_has_devkit_gameid() const;
  public:
  void clear_devkit_gameid();
  const std::string& devkit_gameid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devkit_gameid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devkit_gameid();
  PROTOBUF_NODISCARD std::string* release_devkit_gameid();
  void set_allocated_devkit_gameid(std::string* devkit_gameid);
  private:
  const std::string& _internal_devkit_gameid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devkit_gameid(const std::string& value);
  std::string* _internal_mutable_devkit_gameid();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 override_appid = 8;
  bool has_override_appid() const;
  private:
  bool _internal_has_override_appid() const;
  public:
  void clear_override_appid();
  uint32_t override_appid() const;
  void set_override_appid(uint32_t value);
  private:
  uint32_t _internal_override_appid() const;
  void _internal_set_override_appid(uint32_t value);
  public:

  // optional bool is_remote = 11;
  bool has_is_remote() const;
  private:
  bool _internal_has_is_remote() const;
  public:
  void clear_is_remote();
  bool is_remote() const;
  void set_is_remote(bool value);
  private:
  bool _internal_is_remote() const;
  void _internal_set_is_remote(bool value);
  public:

  // optional bool is_hidden = 12;
  bool has_is_hidden() const;
  private:
  bool _internal_has_is_hidden() const;
  public:
  void clear_is_hidden();
  bool is_hidden() const;
  void set_is_hidden(bool value);
  private:
  bool _internal_is_hidden() const;
  void _internal_set_is_hidden(bool value);
  public:

  // optional bool is_temporary = 13;
  bool has_is_temporary() const;
  private:
  bool _internal_has_is_temporary() const;
  public:
  void clear_is_temporary();
  bool is_temporary() const;
  void set_is_temporary(bool value);
  private:
  bool _internal_is_temporary() const;
  void _internal_set_is_temporary(bool value);
  public:

  // optional bool is_openvr = 14;
  bool has_is_openvr() const;
  private:
  bool _internal_has_is_openvr() const;
  public:
  void clear_is_openvr();
  bool is_openvr() const;
  void set_is_openvr(bool value);
  private:
  bool _internal_is_openvr() const;
  void _internal_set_is_openvr(bool value);
  public:

  // optional bool allow_desktop_config = 15;
  bool has_allow_desktop_config() const;
  private:
  bool _internal_has_allow_desktop_config() const;
  public:
  void clear_allow_desktop_config();
  bool allow_desktop_config() const;
  void set_allow_desktop_config(bool value);
  private:
  bool _internal_allow_desktop_config() const;
  void _internal_set_allow_desktop_config(bool value);
  public:

  // optional bool allow_overlay = 16;
  bool has_allow_overlay() const;
  private:
  bool _internal_has_allow_overlay() const;
  public:
  void clear_allow_overlay();
  bool allow_overlay() const;
  void set_allow_overlay(bool value);
  private:
  bool _internal_allow_overlay() const;
  void _internal_set_allow_overlay(bool value);
  public:

  // optional bool is_devkit_shortcut = 18;
  bool has_is_devkit_shortcut() const;
  private:
  bool _internal_has_is_devkit_shortcut() const;
  public:
  void clear_is_devkit_shortcut();
  bool is_devkit_shortcut() const;
  void set_is_devkit_shortcut(bool value);
  private:
  bool _internal_is_devkit_shortcut() const;
  void _internal_set_is_devkit_shortcut(bool value);
  public:

  // optional uint32 rt_last_played_time = 17;
  bool has_rt_last_played_time() const;
  private:
  bool _internal_has_rt_last_played_time() const;
  public:
  void clear_rt_last_played_time();
  uint32_t rt_last_played_time() const;
  void set_rt_last_played_time(uint32_t value);
  private:
  uint32_t _internal_rt_last_played_time() const;
  void _internal_set_rt_last_played_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgShortcutInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flatpak_appid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devkit_gameid_;
  uint32_t appid_;
  uint32_t override_appid_;
  bool is_remote_;
  bool is_hidden_;
  bool is_temporary_;
  bool is_openvr_;
  bool allow_desktop_config_;
  bool allow_overlay_;
  bool is_devkit_shortcut_;
  uint32_t rt_last_played_time_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgShortcutAppIds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgShortcutAppIds) */ {
 public:
  inline CMsgShortcutAppIds() : CMsgShortcutAppIds(nullptr) {}
  ~CMsgShortcutAppIds() override;
  explicit constexpr CMsgShortcutAppIds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgShortcutAppIds(const CMsgShortcutAppIds& from);
  CMsgShortcutAppIds(CMsgShortcutAppIds&& from) noexcept
    : CMsgShortcutAppIds() {
    *this = ::std::move(from);
  }

  inline CMsgShortcutAppIds& operator=(const CMsgShortcutAppIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgShortcutAppIds& operator=(CMsgShortcutAppIds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgShortcutAppIds& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgShortcutAppIds* internal_default_instance() {
    return reinterpret_cast<const CMsgShortcutAppIds*>(
               &_CMsgShortcutAppIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CMsgShortcutAppIds& a, CMsgShortcutAppIds& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgShortcutAppIds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgShortcutAppIds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgShortcutAppIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgShortcutAppIds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgShortcutAppIds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgShortcutAppIds& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgShortcutAppIds* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgShortcutAppIds";
  }
  protected:
  explicit CMsgShortcutAppIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidsFieldNumber = 1,
  };
  // repeated uint32 appids = 1;
  int appids_size() const;
  private:
  int _internal_appids_size() const;
  public:
  void clear_appids();
  private:
  uint32_t _internal_appids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_appids() const;
  void _internal_add_appids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_appids();
  public:
  uint32_t appids(int index) const;
  void set_appids(int index, uint32_t value);
  void add_appids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      appids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_appids();

  // @@protoc_insertion_point(class_scope:CMsgShortcutAppIds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > appids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgMonitorInfo_MonitorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMonitorInfo.MonitorInfo) */ {
 public:
  inline CMsgMonitorInfo_MonitorInfo() : CMsgMonitorInfo_MonitorInfo(nullptr) {}
  ~CMsgMonitorInfo_MonitorInfo() override;
  explicit constexpr CMsgMonitorInfo_MonitorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMonitorInfo_MonitorInfo(const CMsgMonitorInfo_MonitorInfo& from);
  CMsgMonitorInfo_MonitorInfo(CMsgMonitorInfo_MonitorInfo&& from) noexcept
    : CMsgMonitorInfo_MonitorInfo() {
    *this = ::std::move(from);
  }

  inline CMsgMonitorInfo_MonitorInfo& operator=(const CMsgMonitorInfo_MonitorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMonitorInfo_MonitorInfo& operator=(CMsgMonitorInfo_MonitorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMonitorInfo_MonitorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMonitorInfo_MonitorInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgMonitorInfo_MonitorInfo*>(
               &_CMsgMonitorInfo_MonitorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CMsgMonitorInfo_MonitorInfo& a, CMsgMonitorInfo_MonitorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMonitorInfo_MonitorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMonitorInfo_MonitorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMonitorInfo_MonitorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMonitorInfo_MonitorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMonitorInfo_MonitorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgMonitorInfo_MonitorInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMonitorInfo_MonitorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMonitorInfo.MonitorInfo";
  }
  protected:
  explicit CMsgMonitorInfo_MonitorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonitorDeviceNameFieldNumber = 1,
    kMonitorDisplayNameFieldNumber = 2,
  };
  // required string monitor_device_name = 1;
  bool has_monitor_device_name() const;
  private:
  bool _internal_has_monitor_device_name() const;
  public:
  void clear_monitor_device_name();
  const std::string& monitor_device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_monitor_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_monitor_device_name();
  PROTOBUF_NODISCARD std::string* release_monitor_device_name();
  void set_allocated_monitor_device_name(std::string* monitor_device_name);
  private:
  const std::string& _internal_monitor_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_monitor_device_name(const std::string& value);
  std::string* _internal_mutable_monitor_device_name();
  public:

  // required string monitor_display_name = 2;
  bool has_monitor_display_name() const;
  private:
  bool _internal_has_monitor_display_name() const;
  public:
  void clear_monitor_display_name();
  const std::string& monitor_display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_monitor_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_monitor_display_name();
  PROTOBUF_NODISCARD std::string* release_monitor_display_name();
  void set_allocated_monitor_display_name(std::string* monitor_display_name);
  private:
  const std::string& _internal_monitor_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_monitor_display_name(const std::string& value);
  std::string* _internal_mutable_monitor_display_name();
  public:

  // @@protoc_insertion_point(class_scope:CMsgMonitorInfo.MonitorInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr monitor_device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr monitor_display_name_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgMonitorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMonitorInfo) */ {
 public:
  inline CMsgMonitorInfo() : CMsgMonitorInfo(nullptr) {}
  ~CMsgMonitorInfo() override;
  explicit constexpr CMsgMonitorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMonitorInfo(const CMsgMonitorInfo& from);
  CMsgMonitorInfo(CMsgMonitorInfo&& from) noexcept
    : CMsgMonitorInfo() {
    *this = ::std::move(from);
  }

  inline CMsgMonitorInfo& operator=(const CMsgMonitorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMonitorInfo& operator=(CMsgMonitorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMonitorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMonitorInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgMonitorInfo*>(
               &_CMsgMonitorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CMsgMonitorInfo& a, CMsgMonitorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMonitorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMonitorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMonitorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMonitorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMonitorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgMonitorInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMonitorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMonitorInfo";
  }
  protected:
  explicit CMsgMonitorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgMonitorInfo_MonitorInfo MonitorInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kMonitorsFieldNumber = 2,
    kSelectedDisplayNameFieldNumber = 1,
  };
  // repeated .CMsgMonitorInfo.MonitorInfo monitors = 2;
  int monitors_size() const;
  private:
  int _internal_monitors_size() const;
  public:
  void clear_monitors();
  ::CMsgMonitorInfo_MonitorInfo* mutable_monitors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMonitorInfo_MonitorInfo >*
      mutable_monitors();
  private:
  const ::CMsgMonitorInfo_MonitorInfo& _internal_monitors(int index) const;
  ::CMsgMonitorInfo_MonitorInfo* _internal_add_monitors();
  public:
  const ::CMsgMonitorInfo_MonitorInfo& monitors(int index) const;
  ::CMsgMonitorInfo_MonitorInfo* add_monitors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMonitorInfo_MonitorInfo >&
      monitors() const;

  // required string selected_display_name = 1;
  bool has_selected_display_name() const;
  private:
  bool _internal_has_selected_display_name() const;
  public:
  void clear_selected_display_name();
  const std::string& selected_display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selected_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selected_display_name();
  PROTOBUF_NODISCARD std::string* release_selected_display_name();
  void set_allocated_selected_display_name(std::string* selected_display_name);
  private:
  const std::string& _internal_selected_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selected_display_name(const std::string& value);
  std::string* _internal_mutable_selected_display_name();
  public:

  // @@protoc_insertion_point(class_scope:CMsgMonitorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMonitorInfo_MonitorInfo > monitors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selected_display_name_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgGenerateSystemReportReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGenerateSystemReportReply) */ {
 public:
  inline CMsgGenerateSystemReportReply() : CMsgGenerateSystemReportReply(nullptr) {}
  ~CMsgGenerateSystemReportReply() override;
  explicit constexpr CMsgGenerateSystemReportReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGenerateSystemReportReply(const CMsgGenerateSystemReportReply& from);
  CMsgGenerateSystemReportReply(CMsgGenerateSystemReportReply&& from) noexcept
    : CMsgGenerateSystemReportReply() {
    *this = ::std::move(from);
  }

  inline CMsgGenerateSystemReportReply& operator=(const CMsgGenerateSystemReportReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGenerateSystemReportReply& operator=(CMsgGenerateSystemReportReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGenerateSystemReportReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGenerateSystemReportReply* internal_default_instance() {
    return reinterpret_cast<const CMsgGenerateSystemReportReply*>(
               &_CMsgGenerateSystemReportReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CMsgGenerateSystemReportReply& a, CMsgGenerateSystemReportReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGenerateSystemReportReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGenerateSystemReportReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGenerateSystemReportReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGenerateSystemReportReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGenerateSystemReportReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGenerateSystemReportReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGenerateSystemReportReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGenerateSystemReportReply";
  }
  protected:
  explicit CMsgGenerateSystemReportReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportIdFieldNumber = 1,
  };
  // optional string report_id = 1;
  bool has_report_id() const;
  private:
  bool _internal_has_report_id() const;
  public:
  void clear_report_id();
  const std::string& report_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_report_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_report_id();
  PROTOBUF_NODISCARD std::string* release_report_id();
  void set_allocated_report_id(std::string* report_id);
  private:
  const std::string& _internal_report_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_report_id(const std::string& value);
  std::string* _internal_mutable_report_id();
  public:

  // @@protoc_insertion_point(class_scope:CMsgGenerateSystemReportReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_id_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// -------------------------------------------------------------------

class CMsgWebUITransportInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgWebUITransportInfo) */ {
 public:
  inline CMsgWebUITransportInfo() : CMsgWebUITransportInfo(nullptr) {}
  ~CMsgWebUITransportInfo() override;
  explicit constexpr CMsgWebUITransportInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgWebUITransportInfo(const CMsgWebUITransportInfo& from);
  CMsgWebUITransportInfo(CMsgWebUITransportInfo&& from) noexcept
    : CMsgWebUITransportInfo() {
    *this = ::std::move(from);
  }

  inline CMsgWebUITransportInfo& operator=(const CMsgWebUITransportInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgWebUITransportInfo& operator=(CMsgWebUITransportInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgWebUITransportInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgWebUITransportInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgWebUITransportInfo*>(
               &_CMsgWebUITransportInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CMsgWebUITransportInfo& a, CMsgWebUITransportInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgWebUITransportInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgWebUITransportInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgWebUITransportInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgWebUITransportInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgWebUITransportInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgWebUITransportInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgWebUITransportInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgWebUITransportInfo";
  }
  protected:
  explicit CMsgWebUITransportInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthKeyFieldNumber = 2,
    kPortFieldNumber = 1,
  };
  // optional string auth_key = 2;
  bool has_auth_key() const;
  private:
  bool _internal_has_auth_key() const;
  public:
  void clear_auth_key();
  const std::string& auth_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_key();
  PROTOBUF_NODISCARD std::string* release_auth_key();
  void set_allocated_auth_key(std::string* auth_key);
  private:
  const std::string& _internal_auth_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_key(const std::string& value);
  std::string* _internal_mutable_auth_key();
  public:

  // optional uint32 port = 1;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgWebUITransportInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_key_;
  uint32_t port_;
  friend struct ::TableStruct_steammessages_5fclient_5fobjects_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SteamMessagesClientIClientForcedEnumDependencies

// optional .EBluetoothDeviceType a = 1 [default = k_BluetoothDeviceType_Invalid];
inline bool SteamMessagesClientIClientForcedEnumDependencies::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SteamMessagesClientIClientForcedEnumDependencies::has_a() const {
  return _internal_has_a();
}
inline void SteamMessagesClientIClientForcedEnumDependencies::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::EBluetoothDeviceType SteamMessagesClientIClientForcedEnumDependencies::_internal_a() const {
  return static_cast< ::EBluetoothDeviceType >(a_);
}
inline ::EBluetoothDeviceType SteamMessagesClientIClientForcedEnumDependencies::a() const {
  // @@protoc_insertion_point(field_get:SteamMessagesClientIClientForcedEnumDependencies.a)
  return _internal_a();
}
inline void SteamMessagesClientIClientForcedEnumDependencies::_internal_set_a(::EBluetoothDeviceType value) {
  assert(::EBluetoothDeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
}
inline void SteamMessagesClientIClientForcedEnumDependencies::set_a(::EBluetoothDeviceType value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:SteamMessagesClientIClientForcedEnumDependencies.a)
}

// optional .EStorageBlockContentType b = 2 [default = k_EStorageBlockContentType_Invalid];
inline bool SteamMessagesClientIClientForcedEnumDependencies::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SteamMessagesClientIClientForcedEnumDependencies::has_b() const {
  return _internal_has_b();
}
inline void SteamMessagesClientIClientForcedEnumDependencies::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EStorageBlockContentType SteamMessagesClientIClientForcedEnumDependencies::_internal_b() const {
  return static_cast< ::EStorageBlockContentType >(b_);
}
inline ::EStorageBlockContentType SteamMessagesClientIClientForcedEnumDependencies::b() const {
  // @@protoc_insertion_point(field_get:SteamMessagesClientIClientForcedEnumDependencies.b)
  return _internal_b();
}
inline void SteamMessagesClientIClientForcedEnumDependencies::_internal_set_b(::EStorageBlockContentType value) {
  assert(::EStorageBlockContentType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  b_ = value;
}
inline void SteamMessagesClientIClientForcedEnumDependencies::set_b(::EStorageBlockContentType value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:SteamMessagesClientIClientForcedEnumDependencies.b)
}

// optional .EStorageBlockFileSystemType c = 3 [default = k_EStorageBlockFileSystemType_Invalid];
inline bool SteamMessagesClientIClientForcedEnumDependencies::_internal_has_c() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SteamMessagesClientIClientForcedEnumDependencies::has_c() const {
  return _internal_has_c();
}
inline void SteamMessagesClientIClientForcedEnumDependencies::clear_c() {
  c_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EStorageBlockFileSystemType SteamMessagesClientIClientForcedEnumDependencies::_internal_c() const {
  return static_cast< ::EStorageBlockFileSystemType >(c_);
}
inline ::EStorageBlockFileSystemType SteamMessagesClientIClientForcedEnumDependencies::c() const {
  // @@protoc_insertion_point(field_get:SteamMessagesClientIClientForcedEnumDependencies.c)
  return _internal_c();
}
inline void SteamMessagesClientIClientForcedEnumDependencies::_internal_set_c(::EStorageBlockFileSystemType value) {
  assert(::EStorageBlockFileSystemType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  c_ = value;
}
inline void SteamMessagesClientIClientForcedEnumDependencies::set_c(::EStorageBlockFileSystemType value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:SteamMessagesClientIClientForcedEnumDependencies.c)
}

// optional .ESDCardFormatStage d = 4 [default = k_ESDCardFormatStage_Invalid];
inline bool SteamMessagesClientIClientForcedEnumDependencies::_internal_has_d() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SteamMessagesClientIClientForcedEnumDependencies::has_d() const {
  return _internal_has_d();
}
inline void SteamMessagesClientIClientForcedEnumDependencies::clear_d() {
  d_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ESDCardFormatStage SteamMessagesClientIClientForcedEnumDependencies::_internal_d() const {
  return static_cast< ::ESDCardFormatStage >(d_);
}
inline ::ESDCardFormatStage SteamMessagesClientIClientForcedEnumDependencies::d() const {
  // @@protoc_insertion_point(field_get:SteamMessagesClientIClientForcedEnumDependencies.d)
  return _internal_d();
}
inline void SteamMessagesClientIClientForcedEnumDependencies::_internal_set_d(::ESDCardFormatStage value) {
  assert(::ESDCardFormatStage_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  d_ = value;
}
inline void SteamMessagesClientIClientForcedEnumDependencies::set_d(::ESDCardFormatStage value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:SteamMessagesClientIClientForcedEnumDependencies.d)
}

// -------------------------------------------------------------------

// CMsgNetworkDeviceIP4Address

// optional int32 ip = 1 [default = 0];
inline bool CMsgNetworkDeviceIP4Address::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceIP4Address::has_ip() const {
  return _internal_has_ip();
}
inline void CMsgNetworkDeviceIP4Address::clear_ip() {
  ip_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgNetworkDeviceIP4Address::_internal_ip() const {
  return ip_;
}
inline int32_t CMsgNetworkDeviceIP4Address::ip() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceIP4Address.ip)
  return _internal_ip();
}
inline void CMsgNetworkDeviceIP4Address::_internal_set_ip(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ip_ = value;
}
inline void CMsgNetworkDeviceIP4Address::set_ip(int32_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceIP4Address.ip)
}

// optional int32 netmask = 2;
inline bool CMsgNetworkDeviceIP4Address::_internal_has_netmask() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceIP4Address::has_netmask() const {
  return _internal_has_netmask();
}
inline void CMsgNetworkDeviceIP4Address::clear_netmask() {
  netmask_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgNetworkDeviceIP4Address::_internal_netmask() const {
  return netmask_;
}
inline int32_t CMsgNetworkDeviceIP4Address::netmask() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceIP4Address.netmask)
  return _internal_netmask();
}
inline void CMsgNetworkDeviceIP4Address::_internal_set_netmask(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  netmask_ = value;
}
inline void CMsgNetworkDeviceIP4Address::set_netmask(int32_t value) {
  _internal_set_netmask(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceIP4Address.netmask)
}

// -------------------------------------------------------------------

// CMsgNetworkDeviceIP4Config

// repeated .CMsgNetworkDeviceIP4Address addresses = 1;
inline int CMsgNetworkDeviceIP4Config::_internal_addresses_size() const {
  return addresses_.size();
}
inline int CMsgNetworkDeviceIP4Config::addresses_size() const {
  return _internal_addresses_size();
}
inline void CMsgNetworkDeviceIP4Config::clear_addresses() {
  addresses_.Clear();
}
inline ::CMsgNetworkDeviceIP4Address* CMsgNetworkDeviceIP4Config::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDeviceIP4Config.addresses)
  return addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDeviceIP4Address >*
CMsgNetworkDeviceIP4Config::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:CMsgNetworkDeviceIP4Config.addresses)
  return &addresses_;
}
inline const ::CMsgNetworkDeviceIP4Address& CMsgNetworkDeviceIP4Config::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const ::CMsgNetworkDeviceIP4Address& CMsgNetworkDeviceIP4Config::addresses(int index) const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceIP4Config.addresses)
  return _internal_addresses(index);
}
inline ::CMsgNetworkDeviceIP4Address* CMsgNetworkDeviceIP4Config::_internal_add_addresses() {
  return addresses_.Add();
}
inline ::CMsgNetworkDeviceIP4Address* CMsgNetworkDeviceIP4Config::add_addresses() {
  ::CMsgNetworkDeviceIP4Address* _add = _internal_add_addresses();
  // @@protoc_insertion_point(field_add:CMsgNetworkDeviceIP4Config.addresses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDeviceIP4Address >&
CMsgNetworkDeviceIP4Config::addresses() const {
  // @@protoc_insertion_point(field_list:CMsgNetworkDeviceIP4Config.addresses)
  return addresses_;
}

// repeated int32 dns_ip = 2;
inline int CMsgNetworkDeviceIP4Config::_internal_dns_ip_size() const {
  return dns_ip_.size();
}
inline int CMsgNetworkDeviceIP4Config::dns_ip_size() const {
  return _internal_dns_ip_size();
}
inline void CMsgNetworkDeviceIP4Config::clear_dns_ip() {
  dns_ip_.Clear();
}
inline int32_t CMsgNetworkDeviceIP4Config::_internal_dns_ip(int index) const {
  return dns_ip_.Get(index);
}
inline int32_t CMsgNetworkDeviceIP4Config::dns_ip(int index) const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceIP4Config.dns_ip)
  return _internal_dns_ip(index);
}
inline void CMsgNetworkDeviceIP4Config::set_dns_ip(int index, int32_t value) {
  dns_ip_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceIP4Config.dns_ip)
}
inline void CMsgNetworkDeviceIP4Config::_internal_add_dns_ip(int32_t value) {
  dns_ip_.Add(value);
}
inline void CMsgNetworkDeviceIP4Config::add_dns_ip(int32_t value) {
  _internal_add_dns_ip(value);
  // @@protoc_insertion_point(field_add:CMsgNetworkDeviceIP4Config.dns_ip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgNetworkDeviceIP4Config::_internal_dns_ip() const {
  return dns_ip_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgNetworkDeviceIP4Config::dns_ip() const {
  // @@protoc_insertion_point(field_list:CMsgNetworkDeviceIP4Config.dns_ip)
  return _internal_dns_ip();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgNetworkDeviceIP4Config::_internal_mutable_dns_ip() {
  return &dns_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgNetworkDeviceIP4Config::mutable_dns_ip() {
  // @@protoc_insertion_point(field_mutable_list:CMsgNetworkDeviceIP4Config.dns_ip)
  return _internal_mutable_dns_ip();
}

// optional int32 gateway_ip = 3;
inline bool CMsgNetworkDeviceIP4Config::_internal_has_gateway_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceIP4Config::has_gateway_ip() const {
  return _internal_has_gateway_ip();
}
inline void CMsgNetworkDeviceIP4Config::clear_gateway_ip() {
  gateway_ip_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgNetworkDeviceIP4Config::_internal_gateway_ip() const {
  return gateway_ip_;
}
inline int32_t CMsgNetworkDeviceIP4Config::gateway_ip() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceIP4Config.gateway_ip)
  return _internal_gateway_ip();
}
inline void CMsgNetworkDeviceIP4Config::_internal_set_gateway_ip(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  gateway_ip_ = value;
}
inline void CMsgNetworkDeviceIP4Config::set_gateway_ip(int32_t value) {
  _internal_set_gateway_ip(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceIP4Config.gateway_ip)
}

// optional bool is_dhcp_enabled = 4;
inline bool CMsgNetworkDeviceIP4Config::_internal_has_is_dhcp_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceIP4Config::has_is_dhcp_enabled() const {
  return _internal_has_is_dhcp_enabled();
}
inline void CMsgNetworkDeviceIP4Config::clear_is_dhcp_enabled() {
  is_dhcp_enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgNetworkDeviceIP4Config::_internal_is_dhcp_enabled() const {
  return is_dhcp_enabled_;
}
inline bool CMsgNetworkDeviceIP4Config::is_dhcp_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceIP4Config.is_dhcp_enabled)
  return _internal_is_dhcp_enabled();
}
inline void CMsgNetworkDeviceIP4Config::_internal_set_is_dhcp_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_dhcp_enabled_ = value;
}
inline void CMsgNetworkDeviceIP4Config::set_is_dhcp_enabled(bool value) {
  _internal_set_is_dhcp_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceIP4Config.is_dhcp_enabled)
}

// optional bool is_default_route = 5;
inline bool CMsgNetworkDeviceIP4Config::_internal_has_is_default_route() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceIP4Config::has_is_default_route() const {
  return _internal_has_is_default_route();
}
inline void CMsgNetworkDeviceIP4Config::clear_is_default_route() {
  is_default_route_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgNetworkDeviceIP4Config::_internal_is_default_route() const {
  return is_default_route_;
}
inline bool CMsgNetworkDeviceIP4Config::is_default_route() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceIP4Config.is_default_route)
  return _internal_is_default_route();
}
inline void CMsgNetworkDeviceIP4Config::_internal_set_is_default_route(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_default_route_ = value;
}
inline void CMsgNetworkDeviceIP4Config::set_is_default_route(bool value) {
  _internal_set_is_default_route(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceIP4Config.is_default_route)
}

// optional bool is_enabled = 6 [default = false];
inline bool CMsgNetworkDeviceIP4Config::_internal_has_is_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceIP4Config::has_is_enabled() const {
  return _internal_has_is_enabled();
}
inline void CMsgNetworkDeviceIP4Config::clear_is_enabled() {
  is_enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgNetworkDeviceIP4Config::_internal_is_enabled() const {
  return is_enabled_;
}
inline bool CMsgNetworkDeviceIP4Config::is_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceIP4Config.is_enabled)
  return _internal_is_enabled();
}
inline void CMsgNetworkDeviceIP4Config::_internal_set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_enabled_ = value;
}
inline void CMsgNetworkDeviceIP4Config::set_is_enabled(bool value) {
  _internal_set_is_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceIP4Config.is_enabled)
}

// -------------------------------------------------------------------

// CMsgNetworkDeviceIP6Address

// optional string ip = 1;
inline bool CMsgNetworkDeviceIP6Address::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceIP6Address::has_ip() const {
  return _internal_has_ip();
}
inline void CMsgNetworkDeviceIP6Address::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgNetworkDeviceIP6Address::ip() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceIP6Address.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNetworkDeviceIP6Address::set_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceIP6Address.ip)
}
inline std::string* CMsgNetworkDeviceIP6Address::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDeviceIP6Address.ip)
  return _s;
}
inline const std::string& CMsgNetworkDeviceIP6Address::_internal_ip() const {
  return ip_.Get();
}
inline void CMsgNetworkDeviceIP6Address::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDeviceIP6Address::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDeviceIP6Address::release_ip() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDeviceIP6Address.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNetworkDeviceIP6Address::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDeviceIP6Address.ip)
}

// -------------------------------------------------------------------

// CMsgNetworkDeviceIP6Config

// repeated .CMsgNetworkDeviceIP6Address addresses = 1;
inline int CMsgNetworkDeviceIP6Config::_internal_addresses_size() const {
  return addresses_.size();
}
inline int CMsgNetworkDeviceIP6Config::addresses_size() const {
  return _internal_addresses_size();
}
inline void CMsgNetworkDeviceIP6Config::clear_addresses() {
  addresses_.Clear();
}
inline ::CMsgNetworkDeviceIP6Address* CMsgNetworkDeviceIP6Config::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDeviceIP6Config.addresses)
  return addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDeviceIP6Address >*
CMsgNetworkDeviceIP6Config::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:CMsgNetworkDeviceIP6Config.addresses)
  return &addresses_;
}
inline const ::CMsgNetworkDeviceIP6Address& CMsgNetworkDeviceIP6Config::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const ::CMsgNetworkDeviceIP6Address& CMsgNetworkDeviceIP6Config::addresses(int index) const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceIP6Config.addresses)
  return _internal_addresses(index);
}
inline ::CMsgNetworkDeviceIP6Address* CMsgNetworkDeviceIP6Config::_internal_add_addresses() {
  return addresses_.Add();
}
inline ::CMsgNetworkDeviceIP6Address* CMsgNetworkDeviceIP6Config::add_addresses() {
  ::CMsgNetworkDeviceIP6Address* _add = _internal_add_addresses();
  // @@protoc_insertion_point(field_add:CMsgNetworkDeviceIP6Config.addresses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDeviceIP6Address >&
CMsgNetworkDeviceIP6Config::addresses() const {
  // @@protoc_insertion_point(field_list:CMsgNetworkDeviceIP6Config.addresses)
  return addresses_;
}

// repeated string dns_ip = 2;
inline int CMsgNetworkDeviceIP6Config::_internal_dns_ip_size() const {
  return dns_ip_.size();
}
inline int CMsgNetworkDeviceIP6Config::dns_ip_size() const {
  return _internal_dns_ip_size();
}
inline void CMsgNetworkDeviceIP6Config::clear_dns_ip() {
  dns_ip_.Clear();
}
inline std::string* CMsgNetworkDeviceIP6Config::add_dns_ip() {
  std::string* _s = _internal_add_dns_ip();
  // @@protoc_insertion_point(field_add_mutable:CMsgNetworkDeviceIP6Config.dns_ip)
  return _s;
}
inline const std::string& CMsgNetworkDeviceIP6Config::_internal_dns_ip(int index) const {
  return dns_ip_.Get(index);
}
inline const std::string& CMsgNetworkDeviceIP6Config::dns_ip(int index) const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceIP6Config.dns_ip)
  return _internal_dns_ip(index);
}
inline std::string* CMsgNetworkDeviceIP6Config::mutable_dns_ip(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDeviceIP6Config.dns_ip)
  return dns_ip_.Mutable(index);
}
inline void CMsgNetworkDeviceIP6Config::set_dns_ip(int index, const std::string& value) {
  dns_ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceIP6Config.dns_ip)
}
inline void CMsgNetworkDeviceIP6Config::set_dns_ip(int index, std::string&& value) {
  dns_ip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceIP6Config.dns_ip)
}
inline void CMsgNetworkDeviceIP6Config::set_dns_ip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dns_ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgNetworkDeviceIP6Config.dns_ip)
}
inline void CMsgNetworkDeviceIP6Config::set_dns_ip(int index, const char* value, size_t size) {
  dns_ip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgNetworkDeviceIP6Config.dns_ip)
}
inline std::string* CMsgNetworkDeviceIP6Config::_internal_add_dns_ip() {
  return dns_ip_.Add();
}
inline void CMsgNetworkDeviceIP6Config::add_dns_ip(const std::string& value) {
  dns_ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgNetworkDeviceIP6Config.dns_ip)
}
inline void CMsgNetworkDeviceIP6Config::add_dns_ip(std::string&& value) {
  dns_ip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgNetworkDeviceIP6Config.dns_ip)
}
inline void CMsgNetworkDeviceIP6Config::add_dns_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dns_ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgNetworkDeviceIP6Config.dns_ip)
}
inline void CMsgNetworkDeviceIP6Config::add_dns_ip(const char* value, size_t size) {
  dns_ip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgNetworkDeviceIP6Config.dns_ip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgNetworkDeviceIP6Config::dns_ip() const {
  // @@protoc_insertion_point(field_list:CMsgNetworkDeviceIP6Config.dns_ip)
  return dns_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgNetworkDeviceIP6Config::mutable_dns_ip() {
  // @@protoc_insertion_point(field_mutable_list:CMsgNetworkDeviceIP6Config.dns_ip)
  return &dns_ip_;
}

// optional string gateway_ip = 3;
inline bool CMsgNetworkDeviceIP6Config::_internal_has_gateway_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceIP6Config::has_gateway_ip() const {
  return _internal_has_gateway_ip();
}
inline void CMsgNetworkDeviceIP6Config::clear_gateway_ip() {
  gateway_ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgNetworkDeviceIP6Config::gateway_ip() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceIP6Config.gateway_ip)
  return _internal_gateway_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNetworkDeviceIP6Config::set_gateway_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 gateway_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceIP6Config.gateway_ip)
}
inline std::string* CMsgNetworkDeviceIP6Config::mutable_gateway_ip() {
  std::string* _s = _internal_mutable_gateway_ip();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDeviceIP6Config.gateway_ip)
  return _s;
}
inline const std::string& CMsgNetworkDeviceIP6Config::_internal_gateway_ip() const {
  return gateway_ip_.Get();
}
inline void CMsgNetworkDeviceIP6Config::_internal_set_gateway_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gateway_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDeviceIP6Config::_internal_mutable_gateway_ip() {
  _has_bits_[0] |= 0x00000001u;
  return gateway_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDeviceIP6Config::release_gateway_ip() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDeviceIP6Config.gateway_ip)
  if (!_internal_has_gateway_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = gateway_ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gateway_ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gateway_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNetworkDeviceIP6Config::set_allocated_gateway_ip(std::string* gateway_ip) {
  if (gateway_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gateway_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gateway_ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gateway_ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gateway_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDeviceIP6Config.gateway_ip)
}

// optional bool is_dhcp_enabled = 4;
inline bool CMsgNetworkDeviceIP6Config::_internal_has_is_dhcp_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceIP6Config::has_is_dhcp_enabled() const {
  return _internal_has_is_dhcp_enabled();
}
inline void CMsgNetworkDeviceIP6Config::clear_is_dhcp_enabled() {
  is_dhcp_enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgNetworkDeviceIP6Config::_internal_is_dhcp_enabled() const {
  return is_dhcp_enabled_;
}
inline bool CMsgNetworkDeviceIP6Config::is_dhcp_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceIP6Config.is_dhcp_enabled)
  return _internal_is_dhcp_enabled();
}
inline void CMsgNetworkDeviceIP6Config::_internal_set_is_dhcp_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_dhcp_enabled_ = value;
}
inline void CMsgNetworkDeviceIP6Config::set_is_dhcp_enabled(bool value) {
  _internal_set_is_dhcp_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceIP6Config.is_dhcp_enabled)
}

// optional bool is_default_route = 5;
inline bool CMsgNetworkDeviceIP6Config::_internal_has_is_default_route() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceIP6Config::has_is_default_route() const {
  return _internal_has_is_default_route();
}
inline void CMsgNetworkDeviceIP6Config::clear_is_default_route() {
  is_default_route_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgNetworkDeviceIP6Config::_internal_is_default_route() const {
  return is_default_route_;
}
inline bool CMsgNetworkDeviceIP6Config::is_default_route() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceIP6Config.is_default_route)
  return _internal_is_default_route();
}
inline void CMsgNetworkDeviceIP6Config::_internal_set_is_default_route(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_default_route_ = value;
}
inline void CMsgNetworkDeviceIP6Config::set_is_default_route(bool value) {
  _internal_set_is_default_route(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceIP6Config.is_default_route)
}

// optional bool is_enabled = 6 [default = false];
inline bool CMsgNetworkDeviceIP6Config::_internal_has_is_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceIP6Config::has_is_enabled() const {
  return _internal_has_is_enabled();
}
inline void CMsgNetworkDeviceIP6Config::clear_is_enabled() {
  is_enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgNetworkDeviceIP6Config::_internal_is_enabled() const {
  return is_enabled_;
}
inline bool CMsgNetworkDeviceIP6Config::is_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceIP6Config.is_enabled)
  return _internal_is_enabled();
}
inline void CMsgNetworkDeviceIP6Config::_internal_set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_enabled_ = value;
}
inline void CMsgNetworkDeviceIP6Config::set_is_enabled(bool value) {
  _internal_set_is_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceIP6Config.is_enabled)
}

// -------------------------------------------------------------------

// CMsgNetworkDevicesData_Device_Wired

// optional bool is_cable_present = 1 [default = false];
inline bool CMsgNetworkDevicesData_Device_Wired::_internal_has_is_cable_present() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device_Wired::has_is_cable_present() const {
  return _internal_has_is_cable_present();
}
inline void CMsgNetworkDevicesData_Device_Wired::clear_is_cable_present() {
  is_cable_present_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgNetworkDevicesData_Device_Wired::_internal_is_cable_present() const {
  return is_cable_present_;
}
inline bool CMsgNetworkDevicesData_Device_Wired::is_cable_present() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.Wired.is_cable_present)
  return _internal_is_cable_present();
}
inline void CMsgNetworkDevicesData_Device_Wired::_internal_set_is_cable_present(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_cable_present_ = value;
}
inline void CMsgNetworkDevicesData_Device_Wired::set_is_cable_present(bool value) {
  _internal_set_is_cable_present(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.Wired.is_cable_present)
}

// optional uint32 speed_mbit = 2;
inline bool CMsgNetworkDevicesData_Device_Wired::_internal_has_speed_mbit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device_Wired::has_speed_mbit() const {
  return _internal_has_speed_mbit();
}
inline void CMsgNetworkDevicesData_Device_Wired::clear_speed_mbit() {
  speed_mbit_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgNetworkDevicesData_Device_Wired::_internal_speed_mbit() const {
  return speed_mbit_;
}
inline uint32_t CMsgNetworkDevicesData_Device_Wired::speed_mbit() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.Wired.speed_mbit)
  return _internal_speed_mbit();
}
inline void CMsgNetworkDevicesData_Device_Wired::_internal_set_speed_mbit(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  speed_mbit_ = value;
}
inline void CMsgNetworkDevicesData_Device_Wired::set_speed_mbit(uint32_t value) {
  _internal_set_speed_mbit(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.Wired.speed_mbit)
}

// optional string friendly_name = 3;
inline bool CMsgNetworkDevicesData_Device_Wired::_internal_has_friendly_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device_Wired::has_friendly_name() const {
  return _internal_has_friendly_name();
}
inline void CMsgNetworkDevicesData_Device_Wired::clear_friendly_name() {
  friendly_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgNetworkDevicesData_Device_Wired::friendly_name() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.Wired.friendly_name)
  return _internal_friendly_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNetworkDevicesData_Device_Wired::set_friendly_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 friendly_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.Wired.friendly_name)
}
inline std::string* CMsgNetworkDevicesData_Device_Wired::mutable_friendly_name() {
  std::string* _s = _internal_mutable_friendly_name();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDevicesData.Device.Wired.friendly_name)
  return _s;
}
inline const std::string& CMsgNetworkDevicesData_Device_Wired::_internal_friendly_name() const {
  return friendly_name_.Get();
}
inline void CMsgNetworkDevicesData_Device_Wired::_internal_set_friendly_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  friendly_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDevicesData_Device_Wired::_internal_mutable_friendly_name() {
  _has_bits_[0] |= 0x00000001u;
  return friendly_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDevicesData_Device_Wired::release_friendly_name() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDevicesData.Device.Wired.friendly_name)
  if (!_internal_has_friendly_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = friendly_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (friendly_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    friendly_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNetworkDevicesData_Device_Wired::set_allocated_friendly_name(std::string* friendly_name) {
  if (friendly_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  friendly_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friendly_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (friendly_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    friendly_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDevicesData.Device.Wired.friendly_name)
}

// -------------------------------------------------------------------

// CMsgNetworkDevicesData_Device_Wireless_AP

// optional uint32 id = 1 [default = 0];
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::has_id() const {
  return _internal_has_id();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgNetworkDevicesData_Device_Wireless_AP::_internal_id() const {
  return id_;
}
inline uint32_t CMsgNetworkDevicesData_Device_Wireless_AP::id() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.Wireless.AP.id)
  return _internal_id();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.Wireless.AP.id)
}

// optional int32 estrength = 2;
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::_internal_has_estrength() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::has_estrength() const {
  return _internal_has_estrength();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::clear_estrength() {
  estrength_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgNetworkDevicesData_Device_Wireless_AP::_internal_estrength() const {
  return estrength_;
}
inline int32_t CMsgNetworkDevicesData_Device_Wireless_AP::estrength() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.Wireless.AP.estrength)
  return _internal_estrength();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::_internal_set_estrength(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  estrength_ = value;
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::set_estrength(int32_t value) {
  _internal_set_estrength(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.Wireless.AP.estrength)
}

// optional string ssid = 3;
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::_internal_has_ssid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::has_ssid() const {
  return _internal_has_ssid();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::clear_ssid() {
  ssid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgNetworkDevicesData_Device_Wireless_AP::ssid() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.Wireless.AP.ssid)
  return _internal_ssid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNetworkDevicesData_Device_Wireless_AP::set_ssid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.Wireless.AP.ssid)
}
inline std::string* CMsgNetworkDevicesData_Device_Wireless_AP::mutable_ssid() {
  std::string* _s = _internal_mutable_ssid();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDevicesData.Device.Wireless.AP.ssid)
  return _s;
}
inline const std::string& CMsgNetworkDevicesData_Device_Wireless_AP::_internal_ssid() const {
  return ssid_.Get();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::_internal_set_ssid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDevicesData_Device_Wireless_AP::_internal_mutable_ssid() {
  _has_bits_[0] |= 0x00000001u;
  return ssid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDevicesData_Device_Wireless_AP::release_ssid() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDevicesData.Device.Wireless.AP.ssid)
  if (!_internal_has_ssid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = ssid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ssid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ssid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDevicesData.Device.Wireless.AP.ssid)
}

// optional bool is_active = 4;
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::_internal_has_is_active() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::has_is_active() const {
  return _internal_has_is_active();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::clear_is_active() {
  is_active_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::_internal_is_active() const {
  return is_active_;
}
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::is_active() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.Wireless.AP.is_active)
  return _internal_is_active();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::_internal_set_is_active(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_active_ = value;
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.Wireless.AP.is_active)
}

// optional bool is_autoconnect = 5;
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::_internal_has_is_autoconnect() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::has_is_autoconnect() const {
  return _internal_has_is_autoconnect();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::clear_is_autoconnect() {
  is_autoconnect_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::_internal_is_autoconnect() const {
  return is_autoconnect_;
}
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::is_autoconnect() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.Wireless.AP.is_autoconnect)
  return _internal_is_autoconnect();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::_internal_set_is_autoconnect(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_autoconnect_ = value;
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::set_is_autoconnect(bool value) {
  _internal_set_is_autoconnect(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.Wireless.AP.is_autoconnect)
}

// optional int32 esecurity = 6;
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::_internal_has_esecurity() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::has_esecurity() const {
  return _internal_has_esecurity();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::clear_esecurity() {
  esecurity_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t CMsgNetworkDevicesData_Device_Wireless_AP::_internal_esecurity() const {
  return esecurity_;
}
inline int32_t CMsgNetworkDevicesData_Device_Wireless_AP::esecurity() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.Wireless.AP.esecurity)
  return _internal_esecurity();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::_internal_set_esecurity(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  esecurity_ = value;
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::set_esecurity(int32_t value) {
  _internal_set_esecurity(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.Wireless.AP.esecurity)
}

// optional string user_name = 7;
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::_internal_has_user_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::has_user_name() const {
  return _internal_has_user_name();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::clear_user_name() {
  user_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgNetworkDevicesData_Device_Wireless_AP::user_name() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.Wireless.AP.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNetworkDevicesData_Device_Wireless_AP::set_user_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.Wireless.AP.user_name)
}
inline std::string* CMsgNetworkDevicesData_Device_Wireless_AP::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDevicesData.Device.Wireless.AP.user_name)
  return _s;
}
inline const std::string& CMsgNetworkDevicesData_Device_Wireless_AP::_internal_user_name() const {
  return user_name_.Get();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::_internal_set_user_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDevicesData_Device_Wireless_AP::_internal_mutable_user_name() {
  _has_bits_[0] |= 0x00000002u;
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDevicesData_Device_Wireless_AP::release_user_name() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDevicesData.Device.Wireless.AP.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = user_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDevicesData.Device.Wireless.AP.user_name)
}

// optional string password = 8;
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::has_password() const {
  return _internal_has_password();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgNetworkDevicesData_Device_Wireless_AP::password() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.Wireless.AP.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNetworkDevicesData_Device_Wireless_AP::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.Wireless.AP.password)
}
inline std::string* CMsgNetworkDevicesData_Device_Wireless_AP::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDevicesData.Device.Wireless.AP.password)
  return _s;
}
inline const std::string& CMsgNetworkDevicesData_Device_Wireless_AP::_internal_password() const {
  return password_.Get();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDevicesData_Device_Wireless_AP::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000004u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDevicesData_Device_Wireless_AP::release_password() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDevicesData.Device.Wireless.AP.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDevicesData.Device.Wireless.AP.password)
}

// optional int32 strength_raw = 9;
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::_internal_has_strength_raw() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device_Wireless_AP::has_strength_raw() const {
  return _internal_has_strength_raw();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::clear_strength_raw() {
  strength_raw_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t CMsgNetworkDevicesData_Device_Wireless_AP::_internal_strength_raw() const {
  return strength_raw_;
}
inline int32_t CMsgNetworkDevicesData_Device_Wireless_AP::strength_raw() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.Wireless.AP.strength_raw)
  return _internal_strength_raw();
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::_internal_set_strength_raw(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  strength_raw_ = value;
}
inline void CMsgNetworkDevicesData_Device_Wireless_AP::set_strength_raw(int32_t value) {
  _internal_set_strength_raw(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.Wireless.AP.strength_raw)
}

// -------------------------------------------------------------------

// CMsgNetworkDevicesData_Device_Wireless

// repeated .CMsgNetworkDevicesData.Device.Wireless.AP aps = 1;
inline int CMsgNetworkDevicesData_Device_Wireless::_internal_aps_size() const {
  return aps_.size();
}
inline int CMsgNetworkDevicesData_Device_Wireless::aps_size() const {
  return _internal_aps_size();
}
inline void CMsgNetworkDevicesData_Device_Wireless::clear_aps() {
  aps_.Clear();
}
inline ::CMsgNetworkDevicesData_Device_Wireless_AP* CMsgNetworkDevicesData_Device_Wireless::mutable_aps(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDevicesData.Device.Wireless.aps)
  return aps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDevicesData_Device_Wireless_AP >*
CMsgNetworkDevicesData_Device_Wireless::mutable_aps() {
  // @@protoc_insertion_point(field_mutable_list:CMsgNetworkDevicesData.Device.Wireless.aps)
  return &aps_;
}
inline const ::CMsgNetworkDevicesData_Device_Wireless_AP& CMsgNetworkDevicesData_Device_Wireless::_internal_aps(int index) const {
  return aps_.Get(index);
}
inline const ::CMsgNetworkDevicesData_Device_Wireless_AP& CMsgNetworkDevicesData_Device_Wireless::aps(int index) const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.Wireless.aps)
  return _internal_aps(index);
}
inline ::CMsgNetworkDevicesData_Device_Wireless_AP* CMsgNetworkDevicesData_Device_Wireless::_internal_add_aps() {
  return aps_.Add();
}
inline ::CMsgNetworkDevicesData_Device_Wireless_AP* CMsgNetworkDevicesData_Device_Wireless::add_aps() {
  ::CMsgNetworkDevicesData_Device_Wireless_AP* _add = _internal_add_aps();
  // @@protoc_insertion_point(field_add:CMsgNetworkDevicesData.Device.Wireless.aps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDevicesData_Device_Wireless_AP >&
CMsgNetworkDevicesData_Device_Wireless::aps() const {
  // @@protoc_insertion_point(field_list:CMsgNetworkDevicesData.Device.Wireless.aps)
  return aps_;
}

// optional int32 esecurity_supported = 2;
inline bool CMsgNetworkDevicesData_Device_Wireless::_internal_has_esecurity_supported() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device_Wireless::has_esecurity_supported() const {
  return _internal_has_esecurity_supported();
}
inline void CMsgNetworkDevicesData_Device_Wireless::clear_esecurity_supported() {
  esecurity_supported_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgNetworkDevicesData_Device_Wireless::_internal_esecurity_supported() const {
  return esecurity_supported_;
}
inline int32_t CMsgNetworkDevicesData_Device_Wireless::esecurity_supported() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.Wireless.esecurity_supported)
  return _internal_esecurity_supported();
}
inline void CMsgNetworkDevicesData_Device_Wireless::_internal_set_esecurity_supported(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  esecurity_supported_ = value;
}
inline void CMsgNetworkDevicesData_Device_Wireless::set_esecurity_supported(int32_t value) {
  _internal_set_esecurity_supported(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.Wireless.esecurity_supported)
}

// -------------------------------------------------------------------

// CMsgNetworkDevicesData_Device

// optional uint32 id = 1 [default = 0];
inline bool CMsgNetworkDevicesData_Device::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device::has_id() const {
  return _internal_has_id();
}
inline void CMsgNetworkDevicesData_Device::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgNetworkDevicesData_Device::_internal_id() const {
  return id_;
}
inline uint32_t CMsgNetworkDevicesData_Device::id() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.id)
  return _internal_id();
}
inline void CMsgNetworkDevicesData_Device::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  id_ = value;
}
inline void CMsgNetworkDevicesData_Device::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.id)
}

// optional int32 etype = 2;
inline bool CMsgNetworkDevicesData_Device::_internal_has_etype() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device::has_etype() const {
  return _internal_has_etype();
}
inline void CMsgNetworkDevicesData_Device::clear_etype() {
  etype_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t CMsgNetworkDevicesData_Device::_internal_etype() const {
  return etype_;
}
inline int32_t CMsgNetworkDevicesData_Device::etype() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.etype)
  return _internal_etype();
}
inline void CMsgNetworkDevicesData_Device::_internal_set_etype(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  etype_ = value;
}
inline void CMsgNetworkDevicesData_Device::set_etype(int32_t value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.etype)
}

// optional int32 estate = 3;
inline bool CMsgNetworkDevicesData_Device::_internal_has_estate() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device::has_estate() const {
  return _internal_has_estate();
}
inline void CMsgNetworkDevicesData_Device::clear_estate() {
  estate_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t CMsgNetworkDevicesData_Device::_internal_estate() const {
  return estate_;
}
inline int32_t CMsgNetworkDevicesData_Device::estate() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.estate)
  return _internal_estate();
}
inline void CMsgNetworkDevicesData_Device::_internal_set_estate(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  estate_ = value;
}
inline void CMsgNetworkDevicesData_Device::set_estate(int32_t value) {
  _internal_set_estate(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.estate)
}

// optional string mac = 4;
inline bool CMsgNetworkDevicesData_Device::_internal_has_mac() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device::has_mac() const {
  return _internal_has_mac();
}
inline void CMsgNetworkDevicesData_Device::clear_mac() {
  mac_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgNetworkDevicesData_Device::mac() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.mac)
  return _internal_mac();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNetworkDevicesData_Device::set_mac(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.mac)
}
inline std::string* CMsgNetworkDevicesData_Device::mutable_mac() {
  std::string* _s = _internal_mutable_mac();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDevicesData.Device.mac)
  return _s;
}
inline const std::string& CMsgNetworkDevicesData_Device::_internal_mac() const {
  return mac_.Get();
}
inline void CMsgNetworkDevicesData_Device::_internal_set_mac(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDevicesData_Device::_internal_mutable_mac() {
  _has_bits_[0] |= 0x00000001u;
  return mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDevicesData_Device::release_mac() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDevicesData.Device.mac)
  if (!_internal_has_mac()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = mac_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNetworkDevicesData_Device::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDevicesData.Device.mac)
}

// optional string vendor = 5;
inline bool CMsgNetworkDevicesData_Device::_internal_has_vendor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device::has_vendor() const {
  return _internal_has_vendor();
}
inline void CMsgNetworkDevicesData_Device::clear_vendor() {
  vendor_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgNetworkDevicesData_Device::vendor() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.vendor)
  return _internal_vendor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNetworkDevicesData_Device::set_vendor(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.vendor)
}
inline std::string* CMsgNetworkDevicesData_Device::mutable_vendor() {
  std::string* _s = _internal_mutable_vendor();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDevicesData.Device.vendor)
  return _s;
}
inline const std::string& CMsgNetworkDevicesData_Device::_internal_vendor() const {
  return vendor_.Get();
}
inline void CMsgNetworkDevicesData_Device::_internal_set_vendor(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDevicesData_Device::_internal_mutable_vendor() {
  _has_bits_[0] |= 0x00000002u;
  return vendor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDevicesData_Device::release_vendor() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDevicesData.Device.vendor)
  if (!_internal_has_vendor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = vendor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vendor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vendor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNetworkDevicesData_Device::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vendor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vendor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vendor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDevicesData.Device.vendor)
}

// optional string product = 6;
inline bool CMsgNetworkDevicesData_Device::_internal_has_product() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData_Device::has_product() const {
  return _internal_has_product();
}
inline void CMsgNetworkDevicesData_Device::clear_product() {
  product_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgNetworkDevicesData_Device::product() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.product)
  return _internal_product();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNetworkDevicesData_Device::set_product(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.Device.product)
}
inline std::string* CMsgNetworkDevicesData_Device::mutable_product() {
  std::string* _s = _internal_mutable_product();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDevicesData.Device.product)
  return _s;
}
inline const std::string& CMsgNetworkDevicesData_Device::_internal_product() const {
  return product_.Get();
}
inline void CMsgNetworkDevicesData_Device::_internal_set_product(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDevicesData_Device::_internal_mutable_product() {
  _has_bits_[0] |= 0x00000004u;
  return product_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDevicesData_Device::release_product() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDevicesData.Device.product)
  if (!_internal_has_product()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = product_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNetworkDevicesData_Device::set_allocated_product(std::string* product) {
  if (product != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  product_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDevicesData.Device.product)
}

// optional .CMsgNetworkDeviceIP4Config ip4 = 7;
inline bool CMsgNetworkDevicesData_Device::_internal_has_ip4() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || ip4_ != nullptr);
  return value;
}
inline bool CMsgNetworkDevicesData_Device::has_ip4() const {
  return _internal_has_ip4();
}
inline void CMsgNetworkDevicesData_Device::clear_ip4() {
  if (ip4_ != nullptr) ip4_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgNetworkDeviceIP4Config& CMsgNetworkDevicesData_Device::_internal_ip4() const {
  const ::CMsgNetworkDeviceIP4Config* p = ip4_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgNetworkDeviceIP4Config&>(
      ::_CMsgNetworkDeviceIP4Config_default_instance_);
}
inline const ::CMsgNetworkDeviceIP4Config& CMsgNetworkDevicesData_Device::ip4() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.ip4)
  return _internal_ip4();
}
inline void CMsgNetworkDevicesData_Device::unsafe_arena_set_allocated_ip4(
    ::CMsgNetworkDeviceIP4Config* ip4) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip4_);
  }
  ip4_ = ip4;
  if (ip4) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgNetworkDevicesData.Device.ip4)
}
inline ::CMsgNetworkDeviceIP4Config* CMsgNetworkDevicesData_Device::release_ip4() {
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgNetworkDeviceIP4Config* temp = ip4_;
  ip4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgNetworkDeviceIP4Config* CMsgNetworkDevicesData_Device::unsafe_arena_release_ip4() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDevicesData.Device.ip4)
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgNetworkDeviceIP4Config* temp = ip4_;
  ip4_ = nullptr;
  return temp;
}
inline ::CMsgNetworkDeviceIP4Config* CMsgNetworkDevicesData_Device::_internal_mutable_ip4() {
  _has_bits_[0] |= 0x00000008u;
  if (ip4_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgNetworkDeviceIP4Config>(GetArenaForAllocation());
    ip4_ = p;
  }
  return ip4_;
}
inline ::CMsgNetworkDeviceIP4Config* CMsgNetworkDevicesData_Device::mutable_ip4() {
  ::CMsgNetworkDeviceIP4Config* _msg = _internal_mutable_ip4();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDevicesData.Device.ip4)
  return _msg;
}
inline void CMsgNetworkDevicesData_Device::set_allocated_ip4(::CMsgNetworkDeviceIP4Config* ip4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ip4_;
  }
  if (ip4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgNetworkDeviceIP4Config>::GetOwningArena(ip4);
    if (message_arena != submessage_arena) {
      ip4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ip4_ = ip4;
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDevicesData.Device.ip4)
}

// optional .CMsgNetworkDeviceIP6Config ip6 = 8;
inline bool CMsgNetworkDevicesData_Device::_internal_has_ip6() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || ip6_ != nullptr);
  return value;
}
inline bool CMsgNetworkDevicesData_Device::has_ip6() const {
  return _internal_has_ip6();
}
inline void CMsgNetworkDevicesData_Device::clear_ip6() {
  if (ip6_ != nullptr) ip6_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::CMsgNetworkDeviceIP6Config& CMsgNetworkDevicesData_Device::_internal_ip6() const {
  const ::CMsgNetworkDeviceIP6Config* p = ip6_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgNetworkDeviceIP6Config&>(
      ::_CMsgNetworkDeviceIP6Config_default_instance_);
}
inline const ::CMsgNetworkDeviceIP6Config& CMsgNetworkDevicesData_Device::ip6() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.ip6)
  return _internal_ip6();
}
inline void CMsgNetworkDevicesData_Device::unsafe_arena_set_allocated_ip6(
    ::CMsgNetworkDeviceIP6Config* ip6) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip6_);
  }
  ip6_ = ip6;
  if (ip6) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgNetworkDevicesData.Device.ip6)
}
inline ::CMsgNetworkDeviceIP6Config* CMsgNetworkDevicesData_Device::release_ip6() {
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgNetworkDeviceIP6Config* temp = ip6_;
  ip6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgNetworkDeviceIP6Config* CMsgNetworkDevicesData_Device::unsafe_arena_release_ip6() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDevicesData.Device.ip6)
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgNetworkDeviceIP6Config* temp = ip6_;
  ip6_ = nullptr;
  return temp;
}
inline ::CMsgNetworkDeviceIP6Config* CMsgNetworkDevicesData_Device::_internal_mutable_ip6() {
  _has_bits_[0] |= 0x00000010u;
  if (ip6_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgNetworkDeviceIP6Config>(GetArenaForAllocation());
    ip6_ = p;
  }
  return ip6_;
}
inline ::CMsgNetworkDeviceIP6Config* CMsgNetworkDevicesData_Device::mutable_ip6() {
  ::CMsgNetworkDeviceIP6Config* _msg = _internal_mutable_ip6();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDevicesData.Device.ip6)
  return _msg;
}
inline void CMsgNetworkDevicesData_Device::set_allocated_ip6(::CMsgNetworkDeviceIP6Config* ip6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ip6_;
  }
  if (ip6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgNetworkDeviceIP6Config>::GetOwningArena(ip6);
    if (message_arena != submessage_arena) {
      ip6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip6, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ip6_ = ip6;
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDevicesData.Device.ip6)
}

// optional .CMsgNetworkDevicesData.Device.Wired wired = 9;
inline bool CMsgNetworkDevicesData_Device::_internal_has_wired() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || wired_ != nullptr);
  return value;
}
inline bool CMsgNetworkDevicesData_Device::has_wired() const {
  return _internal_has_wired();
}
inline void CMsgNetworkDevicesData_Device::clear_wired() {
  if (wired_ != nullptr) wired_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::CMsgNetworkDevicesData_Device_Wired& CMsgNetworkDevicesData_Device::_internal_wired() const {
  const ::CMsgNetworkDevicesData_Device_Wired* p = wired_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgNetworkDevicesData_Device_Wired&>(
      ::_CMsgNetworkDevicesData_Device_Wired_default_instance_);
}
inline const ::CMsgNetworkDevicesData_Device_Wired& CMsgNetworkDevicesData_Device::wired() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.wired)
  return _internal_wired();
}
inline void CMsgNetworkDevicesData_Device::unsafe_arena_set_allocated_wired(
    ::CMsgNetworkDevicesData_Device_Wired* wired) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wired_);
  }
  wired_ = wired;
  if (wired) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgNetworkDevicesData.Device.wired)
}
inline ::CMsgNetworkDevicesData_Device_Wired* CMsgNetworkDevicesData_Device::release_wired() {
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgNetworkDevicesData_Device_Wired* temp = wired_;
  wired_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgNetworkDevicesData_Device_Wired* CMsgNetworkDevicesData_Device::unsafe_arena_release_wired() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDevicesData.Device.wired)
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgNetworkDevicesData_Device_Wired* temp = wired_;
  wired_ = nullptr;
  return temp;
}
inline ::CMsgNetworkDevicesData_Device_Wired* CMsgNetworkDevicesData_Device::_internal_mutable_wired() {
  _has_bits_[0] |= 0x00000020u;
  if (wired_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgNetworkDevicesData_Device_Wired>(GetArenaForAllocation());
    wired_ = p;
  }
  return wired_;
}
inline ::CMsgNetworkDevicesData_Device_Wired* CMsgNetworkDevicesData_Device::mutable_wired() {
  ::CMsgNetworkDevicesData_Device_Wired* _msg = _internal_mutable_wired();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDevicesData.Device.wired)
  return _msg;
}
inline void CMsgNetworkDevicesData_Device::set_allocated_wired(::CMsgNetworkDevicesData_Device_Wired* wired) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete wired_;
  }
  if (wired) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgNetworkDevicesData_Device_Wired>::GetOwningArena(wired);
    if (message_arena != submessage_arena) {
      wired = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wired, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  wired_ = wired;
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDevicesData.Device.wired)
}

// optional .CMsgNetworkDevicesData.Device.Wireless wireless = 10;
inline bool CMsgNetworkDevicesData_Device::_internal_has_wireless() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || wireless_ != nullptr);
  return value;
}
inline bool CMsgNetworkDevicesData_Device::has_wireless() const {
  return _internal_has_wireless();
}
inline void CMsgNetworkDevicesData_Device::clear_wireless() {
  if (wireless_ != nullptr) wireless_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::CMsgNetworkDevicesData_Device_Wireless& CMsgNetworkDevicesData_Device::_internal_wireless() const {
  const ::CMsgNetworkDevicesData_Device_Wireless* p = wireless_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgNetworkDevicesData_Device_Wireless&>(
      ::_CMsgNetworkDevicesData_Device_Wireless_default_instance_);
}
inline const ::CMsgNetworkDevicesData_Device_Wireless& CMsgNetworkDevicesData_Device::wireless() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.Device.wireless)
  return _internal_wireless();
}
inline void CMsgNetworkDevicesData_Device::unsafe_arena_set_allocated_wireless(
    ::CMsgNetworkDevicesData_Device_Wireless* wireless) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wireless_);
  }
  wireless_ = wireless;
  if (wireless) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgNetworkDevicesData.Device.wireless)
}
inline ::CMsgNetworkDevicesData_Device_Wireless* CMsgNetworkDevicesData_Device::release_wireless() {
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgNetworkDevicesData_Device_Wireless* temp = wireless_;
  wireless_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgNetworkDevicesData_Device_Wireless* CMsgNetworkDevicesData_Device::unsafe_arena_release_wireless() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDevicesData.Device.wireless)
  _has_bits_[0] &= ~0x00000040u;
  ::CMsgNetworkDevicesData_Device_Wireless* temp = wireless_;
  wireless_ = nullptr;
  return temp;
}
inline ::CMsgNetworkDevicesData_Device_Wireless* CMsgNetworkDevicesData_Device::_internal_mutable_wireless() {
  _has_bits_[0] |= 0x00000040u;
  if (wireless_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgNetworkDevicesData_Device_Wireless>(GetArenaForAllocation());
    wireless_ = p;
  }
  return wireless_;
}
inline ::CMsgNetworkDevicesData_Device_Wireless* CMsgNetworkDevicesData_Device::mutable_wireless() {
  ::CMsgNetworkDevicesData_Device_Wireless* _msg = _internal_mutable_wireless();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDevicesData.Device.wireless)
  return _msg;
}
inline void CMsgNetworkDevicesData_Device::set_allocated_wireless(::CMsgNetworkDevicesData_Device_Wireless* wireless) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete wireless_;
  }
  if (wireless) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgNetworkDevicesData_Device_Wireless>::GetOwningArena(wireless);
    if (message_arena != submessage_arena) {
      wireless = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wireless, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  wireless_ = wireless;
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDevicesData.Device.wireless)
}

// -------------------------------------------------------------------

// CMsgNetworkDevicesData

// repeated .CMsgNetworkDevicesData.Device devices = 1;
inline int CMsgNetworkDevicesData::_internal_devices_size() const {
  return devices_.size();
}
inline int CMsgNetworkDevicesData::devices_size() const {
  return _internal_devices_size();
}
inline void CMsgNetworkDevicesData::clear_devices() {
  devices_.Clear();
}
inline ::CMsgNetworkDevicesData_Device* CMsgNetworkDevicesData::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDevicesData.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDevicesData_Device >*
CMsgNetworkDevicesData::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:CMsgNetworkDevicesData.devices)
  return &devices_;
}
inline const ::CMsgNetworkDevicesData_Device& CMsgNetworkDevicesData::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::CMsgNetworkDevicesData_Device& CMsgNetworkDevicesData::devices(int index) const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.devices)
  return _internal_devices(index);
}
inline ::CMsgNetworkDevicesData_Device* CMsgNetworkDevicesData::_internal_add_devices() {
  return devices_.Add();
}
inline ::CMsgNetworkDevicesData_Device* CMsgNetworkDevicesData::add_devices() {
  ::CMsgNetworkDevicesData_Device* _add = _internal_add_devices();
  // @@protoc_insertion_point(field_add:CMsgNetworkDevicesData.devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNetworkDevicesData_Device >&
CMsgNetworkDevicesData::devices() const {
  // @@protoc_insertion_point(field_list:CMsgNetworkDevicesData.devices)
  return devices_;
}

// optional bool is_wifi_enabled = 2;
inline bool CMsgNetworkDevicesData::_internal_has_is_wifi_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData::has_is_wifi_enabled() const {
  return _internal_has_is_wifi_enabled();
}
inline void CMsgNetworkDevicesData::clear_is_wifi_enabled() {
  is_wifi_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgNetworkDevicesData::_internal_is_wifi_enabled() const {
  return is_wifi_enabled_;
}
inline bool CMsgNetworkDevicesData::is_wifi_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.is_wifi_enabled)
  return _internal_is_wifi_enabled();
}
inline void CMsgNetworkDevicesData::_internal_set_is_wifi_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_wifi_enabled_ = value;
}
inline void CMsgNetworkDevicesData::set_is_wifi_enabled(bool value) {
  _internal_set_is_wifi_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.is_wifi_enabled)
}

// optional bool is_wifi_scanning_enabled = 3;
inline bool CMsgNetworkDevicesData::_internal_has_is_wifi_scanning_enabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNetworkDevicesData::has_is_wifi_scanning_enabled() const {
  return _internal_has_is_wifi_scanning_enabled();
}
inline void CMsgNetworkDevicesData::clear_is_wifi_scanning_enabled() {
  is_wifi_scanning_enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgNetworkDevicesData::_internal_is_wifi_scanning_enabled() const {
  return is_wifi_scanning_enabled_;
}
inline bool CMsgNetworkDevicesData::is_wifi_scanning_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDevicesData.is_wifi_scanning_enabled)
  return _internal_is_wifi_scanning_enabled();
}
inline void CMsgNetworkDevicesData::_internal_set_is_wifi_scanning_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_wifi_scanning_enabled_ = value;
}
inline void CMsgNetworkDevicesData::set_is_wifi_scanning_enabled(bool value) {
  _internal_set_is_wifi_scanning_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDevicesData.is_wifi_scanning_enabled)
}

// -------------------------------------------------------------------

// CMsgNetworkDeviceConnect_KnownAP

// optional uint32 ap_id = 1;
inline bool CMsgNetworkDeviceConnect_KnownAP::_internal_has_ap_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceConnect_KnownAP::has_ap_id() const {
  return _internal_has_ap_id();
}
inline void CMsgNetworkDeviceConnect_KnownAP::clear_ap_id() {
  ap_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgNetworkDeviceConnect_KnownAP::_internal_ap_id() const {
  return ap_id_;
}
inline uint32_t CMsgNetworkDeviceConnect_KnownAP::ap_id() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceConnect.KnownAP.ap_id)
  return _internal_ap_id();
}
inline void CMsgNetworkDeviceConnect_KnownAP::_internal_set_ap_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ap_id_ = value;
}
inline void CMsgNetworkDeviceConnect_KnownAP::set_ap_id(uint32_t value) {
  _internal_set_ap_id(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceConnect.KnownAP.ap_id)
}

// -------------------------------------------------------------------

// CMsgNetworkDeviceConnect_CustomAP

// optional string ssid = 1;
inline bool CMsgNetworkDeviceConnect_CustomAP::_internal_has_ssid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceConnect_CustomAP::has_ssid() const {
  return _internal_has_ssid();
}
inline void CMsgNetworkDeviceConnect_CustomAP::clear_ssid() {
  ssid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgNetworkDeviceConnect_CustomAP::ssid() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceConnect.CustomAP.ssid)
  return _internal_ssid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNetworkDeviceConnect_CustomAP::set_ssid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceConnect.CustomAP.ssid)
}
inline std::string* CMsgNetworkDeviceConnect_CustomAP::mutable_ssid() {
  std::string* _s = _internal_mutable_ssid();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDeviceConnect.CustomAP.ssid)
  return _s;
}
inline const std::string& CMsgNetworkDeviceConnect_CustomAP::_internal_ssid() const {
  return ssid_.Get();
}
inline void CMsgNetworkDeviceConnect_CustomAP::_internal_set_ssid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ssid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDeviceConnect_CustomAP::_internal_mutable_ssid() {
  _has_bits_[0] |= 0x00000001u;
  return ssid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDeviceConnect_CustomAP::release_ssid() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDeviceConnect.CustomAP.ssid)
  if (!_internal_has_ssid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = ssid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ssid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNetworkDeviceConnect_CustomAP::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ssid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ssid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDeviceConnect.CustomAP.ssid)
}

// optional int32 esecurity = 2;
inline bool CMsgNetworkDeviceConnect_CustomAP::_internal_has_esecurity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceConnect_CustomAP::has_esecurity() const {
  return _internal_has_esecurity();
}
inline void CMsgNetworkDeviceConnect_CustomAP::clear_esecurity() {
  esecurity_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgNetworkDeviceConnect_CustomAP::_internal_esecurity() const {
  return esecurity_;
}
inline int32_t CMsgNetworkDeviceConnect_CustomAP::esecurity() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceConnect.CustomAP.esecurity)
  return _internal_esecurity();
}
inline void CMsgNetworkDeviceConnect_CustomAP::_internal_set_esecurity(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  esecurity_ = value;
}
inline void CMsgNetworkDeviceConnect_CustomAP::set_esecurity(int32_t value) {
  _internal_set_esecurity(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceConnect.CustomAP.esecurity)
}

// -------------------------------------------------------------------

// CMsgNetworkDeviceConnect_Credentials

// optional string username = 1;
inline bool CMsgNetworkDeviceConnect_Credentials::_internal_has_username() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceConnect_Credentials::has_username() const {
  return _internal_has_username();
}
inline void CMsgNetworkDeviceConnect_Credentials::clear_username() {
  username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgNetworkDeviceConnect_Credentials::username() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceConnect.Credentials.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNetworkDeviceConnect_Credentials::set_username(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceConnect.Credentials.username)
}
inline std::string* CMsgNetworkDeviceConnect_Credentials::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDeviceConnect.Credentials.username)
  return _s;
}
inline const std::string& CMsgNetworkDeviceConnect_Credentials::_internal_username() const {
  return username_.Get();
}
inline void CMsgNetworkDeviceConnect_Credentials::_internal_set_username(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDeviceConnect_Credentials::_internal_mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDeviceConnect_Credentials::release_username() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDeviceConnect.Credentials.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNetworkDeviceConnect_Credentials::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDeviceConnect.Credentials.username)
}

// optional string password = 2;
inline bool CMsgNetworkDeviceConnect_Credentials::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceConnect_Credentials::has_password() const {
  return _internal_has_password();
}
inline void CMsgNetworkDeviceConnect_Credentials::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgNetworkDeviceConnect_Credentials::password() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceConnect.Credentials.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgNetworkDeviceConnect_Credentials::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceConnect.Credentials.password)
}
inline std::string* CMsgNetworkDeviceConnect_Credentials::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDeviceConnect.Credentials.password)
  return _s;
}
inline const std::string& CMsgNetworkDeviceConnect_Credentials::_internal_password() const {
  return password_.Get();
}
inline void CMsgNetworkDeviceConnect_Credentials::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDeviceConnect_Credentials::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgNetworkDeviceConnect_Credentials::release_password() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDeviceConnect.Credentials.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgNetworkDeviceConnect_Credentials::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDeviceConnect.Credentials.password)
}

// -------------------------------------------------------------------

// CMsgNetworkDeviceConnect

// optional uint32 device_id = 1 [default = 0];
inline bool CMsgNetworkDeviceConnect::_internal_has_device_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgNetworkDeviceConnect::has_device_id() const {
  return _internal_has_device_id();
}
inline void CMsgNetworkDeviceConnect::clear_device_id() {
  device_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgNetworkDeviceConnect::_internal_device_id() const {
  return device_id_;
}
inline uint32_t CMsgNetworkDeviceConnect::device_id() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceConnect.device_id)
  return _internal_device_id();
}
inline void CMsgNetworkDeviceConnect::_internal_set_device_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  device_id_ = value;
}
inline void CMsgNetworkDeviceConnect::set_device_id(uint32_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:CMsgNetworkDeviceConnect.device_id)
}

// optional .CMsgNetworkDeviceConnect.Credentials credentials = 4;
inline bool CMsgNetworkDeviceConnect::_internal_has_credentials() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || credentials_ != nullptr);
  return value;
}
inline bool CMsgNetworkDeviceConnect::has_credentials() const {
  return _internal_has_credentials();
}
inline void CMsgNetworkDeviceConnect::clear_credentials() {
  if (credentials_ != nullptr) credentials_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgNetworkDeviceConnect_Credentials& CMsgNetworkDeviceConnect::_internal_credentials() const {
  const ::CMsgNetworkDeviceConnect_Credentials* p = credentials_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgNetworkDeviceConnect_Credentials&>(
      ::_CMsgNetworkDeviceConnect_Credentials_default_instance_);
}
inline const ::CMsgNetworkDeviceConnect_Credentials& CMsgNetworkDeviceConnect::credentials() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceConnect.credentials)
  return _internal_credentials();
}
inline void CMsgNetworkDeviceConnect::unsafe_arena_set_allocated_credentials(
    ::CMsgNetworkDeviceConnect_Credentials* credentials) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(credentials_);
  }
  credentials_ = credentials;
  if (credentials) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgNetworkDeviceConnect.credentials)
}
inline ::CMsgNetworkDeviceConnect_Credentials* CMsgNetworkDeviceConnect::release_credentials() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgNetworkDeviceConnect_Credentials* temp = credentials_;
  credentials_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgNetworkDeviceConnect_Credentials* CMsgNetworkDeviceConnect::unsafe_arena_release_credentials() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDeviceConnect.credentials)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgNetworkDeviceConnect_Credentials* temp = credentials_;
  credentials_ = nullptr;
  return temp;
}
inline ::CMsgNetworkDeviceConnect_Credentials* CMsgNetworkDeviceConnect::_internal_mutable_credentials() {
  _has_bits_[0] |= 0x00000001u;
  if (credentials_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgNetworkDeviceConnect_Credentials>(GetArenaForAllocation());
    credentials_ = p;
  }
  return credentials_;
}
inline ::CMsgNetworkDeviceConnect_Credentials* CMsgNetworkDeviceConnect::mutable_credentials() {
  ::CMsgNetworkDeviceConnect_Credentials* _msg = _internal_mutable_credentials();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDeviceConnect.credentials)
  return _msg;
}
inline void CMsgNetworkDeviceConnect::set_allocated_credentials(::CMsgNetworkDeviceConnect_Credentials* credentials) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete credentials_;
  }
  if (credentials) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgNetworkDeviceConnect_Credentials>::GetOwningArena(credentials);
    if (message_arena != submessage_arena) {
      credentials = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credentials, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  credentials_ = credentials;
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDeviceConnect.credentials)
}

// optional .CMsgNetworkDeviceIP4Config ip4 = 5;
inline bool CMsgNetworkDeviceConnect::_internal_has_ip4() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ip4_ != nullptr);
  return value;
}
inline bool CMsgNetworkDeviceConnect::has_ip4() const {
  return _internal_has_ip4();
}
inline void CMsgNetworkDeviceConnect::clear_ip4() {
  if (ip4_ != nullptr) ip4_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgNetworkDeviceIP4Config& CMsgNetworkDeviceConnect::_internal_ip4() const {
  const ::CMsgNetworkDeviceIP4Config* p = ip4_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgNetworkDeviceIP4Config&>(
      ::_CMsgNetworkDeviceIP4Config_default_instance_);
}
inline const ::CMsgNetworkDeviceIP4Config& CMsgNetworkDeviceConnect::ip4() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceConnect.ip4)
  return _internal_ip4();
}
inline void CMsgNetworkDeviceConnect::unsafe_arena_set_allocated_ip4(
    ::CMsgNetworkDeviceIP4Config* ip4) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip4_);
  }
  ip4_ = ip4;
  if (ip4) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgNetworkDeviceConnect.ip4)
}
inline ::CMsgNetworkDeviceIP4Config* CMsgNetworkDeviceConnect::release_ip4() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgNetworkDeviceIP4Config* temp = ip4_;
  ip4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgNetworkDeviceIP4Config* CMsgNetworkDeviceConnect::unsafe_arena_release_ip4() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDeviceConnect.ip4)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgNetworkDeviceIP4Config* temp = ip4_;
  ip4_ = nullptr;
  return temp;
}
inline ::CMsgNetworkDeviceIP4Config* CMsgNetworkDeviceConnect::_internal_mutable_ip4() {
  _has_bits_[0] |= 0x00000002u;
  if (ip4_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgNetworkDeviceIP4Config>(GetArenaForAllocation());
    ip4_ = p;
  }
  return ip4_;
}
inline ::CMsgNetworkDeviceIP4Config* CMsgNetworkDeviceConnect::mutable_ip4() {
  ::CMsgNetworkDeviceIP4Config* _msg = _internal_mutable_ip4();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDeviceConnect.ip4)
  return _msg;
}
inline void CMsgNetworkDeviceConnect::set_allocated_ip4(::CMsgNetworkDeviceIP4Config* ip4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ip4_;
  }
  if (ip4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgNetworkDeviceIP4Config>::GetOwningArena(ip4);
    if (message_arena != submessage_arena) {
      ip4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip4_ = ip4;
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDeviceConnect.ip4)
}

// optional .CMsgNetworkDeviceIP6Config ip6 = 6;
inline bool CMsgNetworkDeviceConnect::_internal_has_ip6() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ip6_ != nullptr);
  return value;
}
inline bool CMsgNetworkDeviceConnect::has_ip6() const {
  return _internal_has_ip6();
}
inline void CMsgNetworkDeviceConnect::clear_ip6() {
  if (ip6_ != nullptr) ip6_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgNetworkDeviceIP6Config& CMsgNetworkDeviceConnect::_internal_ip6() const {
  const ::CMsgNetworkDeviceIP6Config* p = ip6_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgNetworkDeviceIP6Config&>(
      ::_CMsgNetworkDeviceIP6Config_default_instance_);
}
inline const ::CMsgNetworkDeviceIP6Config& CMsgNetworkDeviceConnect::ip6() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceConnect.ip6)
  return _internal_ip6();
}
inline void CMsgNetworkDeviceConnect::unsafe_arena_set_allocated_ip6(
    ::CMsgNetworkDeviceIP6Config* ip6) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip6_);
  }
  ip6_ = ip6;
  if (ip6) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgNetworkDeviceConnect.ip6)
}
inline ::CMsgNetworkDeviceIP6Config* CMsgNetworkDeviceConnect::release_ip6() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgNetworkDeviceIP6Config* temp = ip6_;
  ip6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgNetworkDeviceIP6Config* CMsgNetworkDeviceConnect::unsafe_arena_release_ip6() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDeviceConnect.ip6)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgNetworkDeviceIP6Config* temp = ip6_;
  ip6_ = nullptr;
  return temp;
}
inline ::CMsgNetworkDeviceIP6Config* CMsgNetworkDeviceConnect::_internal_mutable_ip6() {
  _has_bits_[0] |= 0x00000004u;
  if (ip6_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgNetworkDeviceIP6Config>(GetArenaForAllocation());
    ip6_ = p;
  }
  return ip6_;
}
inline ::CMsgNetworkDeviceIP6Config* CMsgNetworkDeviceConnect::mutable_ip6() {
  ::CMsgNetworkDeviceIP6Config* _msg = _internal_mutable_ip6();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDeviceConnect.ip6)
  return _msg;
}
inline void CMsgNetworkDeviceConnect::set_allocated_ip6(::CMsgNetworkDeviceIP6Config* ip6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ip6_;
  }
  if (ip6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgNetworkDeviceIP6Config>::GetOwningArena(ip6);
    if (message_arena != submessage_arena) {
      ip6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip6, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ip6_ = ip6;
  // @@protoc_insertion_point(field_set_allocated:CMsgNetworkDeviceConnect.ip6)
}

// .CMsgNetworkDeviceConnect.KnownAP ap_known = 2;
inline bool CMsgNetworkDeviceConnect::_internal_has_ap_known() const {
  return ap_info_case() == kApKnown;
}
inline bool CMsgNetworkDeviceConnect::has_ap_known() const {
  return _internal_has_ap_known();
}
inline void CMsgNetworkDeviceConnect::set_has_ap_known() {
  _oneof_case_[0] = kApKnown;
}
inline void CMsgNetworkDeviceConnect::clear_ap_known() {
  if (_internal_has_ap_known()) {
    if (GetArenaForAllocation() == nullptr) {
      delete ap_info_.ap_known_;
    }
    clear_has_ap_info();
  }
}
inline ::CMsgNetworkDeviceConnect_KnownAP* CMsgNetworkDeviceConnect::release_ap_known() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDeviceConnect.ap_known)
  if (_internal_has_ap_known()) {
    clear_has_ap_info();
      ::CMsgNetworkDeviceConnect_KnownAP* temp = ap_info_.ap_known_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ap_info_.ap_known_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgNetworkDeviceConnect_KnownAP& CMsgNetworkDeviceConnect::_internal_ap_known() const {
  return _internal_has_ap_known()
      ? *ap_info_.ap_known_
      : reinterpret_cast< ::CMsgNetworkDeviceConnect_KnownAP&>(::_CMsgNetworkDeviceConnect_KnownAP_default_instance_);
}
inline const ::CMsgNetworkDeviceConnect_KnownAP& CMsgNetworkDeviceConnect::ap_known() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceConnect.ap_known)
  return _internal_ap_known();
}
inline ::CMsgNetworkDeviceConnect_KnownAP* CMsgNetworkDeviceConnect::unsafe_arena_release_ap_known() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgNetworkDeviceConnect.ap_known)
  if (_internal_has_ap_known()) {
    clear_has_ap_info();
    ::CMsgNetworkDeviceConnect_KnownAP* temp = ap_info_.ap_known_;
    ap_info_.ap_known_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgNetworkDeviceConnect::unsafe_arena_set_allocated_ap_known(::CMsgNetworkDeviceConnect_KnownAP* ap_known) {
  clear_ap_info();
  if (ap_known) {
    set_has_ap_known();
    ap_info_.ap_known_ = ap_known;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgNetworkDeviceConnect.ap_known)
}
inline ::CMsgNetworkDeviceConnect_KnownAP* CMsgNetworkDeviceConnect::_internal_mutable_ap_known() {
  if (!_internal_has_ap_known()) {
    clear_ap_info();
    set_has_ap_known();
    ap_info_.ap_known_ = CreateMaybeMessage< ::CMsgNetworkDeviceConnect_KnownAP >(GetArenaForAllocation());
  }
  return ap_info_.ap_known_;
}
inline ::CMsgNetworkDeviceConnect_KnownAP* CMsgNetworkDeviceConnect::mutable_ap_known() {
  ::CMsgNetworkDeviceConnect_KnownAP* _msg = _internal_mutable_ap_known();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDeviceConnect.ap_known)
  return _msg;
}

// .CMsgNetworkDeviceConnect.CustomAP ap_custom = 3;
inline bool CMsgNetworkDeviceConnect::_internal_has_ap_custom() const {
  return ap_info_case() == kApCustom;
}
inline bool CMsgNetworkDeviceConnect::has_ap_custom() const {
  return _internal_has_ap_custom();
}
inline void CMsgNetworkDeviceConnect::set_has_ap_custom() {
  _oneof_case_[0] = kApCustom;
}
inline void CMsgNetworkDeviceConnect::clear_ap_custom() {
  if (_internal_has_ap_custom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete ap_info_.ap_custom_;
    }
    clear_has_ap_info();
  }
}
inline ::CMsgNetworkDeviceConnect_CustomAP* CMsgNetworkDeviceConnect::release_ap_custom() {
  // @@protoc_insertion_point(field_release:CMsgNetworkDeviceConnect.ap_custom)
  if (_internal_has_ap_custom()) {
    clear_has_ap_info();
      ::CMsgNetworkDeviceConnect_CustomAP* temp = ap_info_.ap_custom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ap_info_.ap_custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgNetworkDeviceConnect_CustomAP& CMsgNetworkDeviceConnect::_internal_ap_custom() const {
  return _internal_has_ap_custom()
      ? *ap_info_.ap_custom_
      : reinterpret_cast< ::CMsgNetworkDeviceConnect_CustomAP&>(::_CMsgNetworkDeviceConnect_CustomAP_default_instance_);
}
inline const ::CMsgNetworkDeviceConnect_CustomAP& CMsgNetworkDeviceConnect::ap_custom() const {
  // @@protoc_insertion_point(field_get:CMsgNetworkDeviceConnect.ap_custom)
  return _internal_ap_custom();
}
inline ::CMsgNetworkDeviceConnect_CustomAP* CMsgNetworkDeviceConnect::unsafe_arena_release_ap_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgNetworkDeviceConnect.ap_custom)
  if (_internal_has_ap_custom()) {
    clear_has_ap_info();
    ::CMsgNetworkDeviceConnect_CustomAP* temp = ap_info_.ap_custom_;
    ap_info_.ap_custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgNetworkDeviceConnect::unsafe_arena_set_allocated_ap_custom(::CMsgNetworkDeviceConnect_CustomAP* ap_custom) {
  clear_ap_info();
  if (ap_custom) {
    set_has_ap_custom();
    ap_info_.ap_custom_ = ap_custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgNetworkDeviceConnect.ap_custom)
}
inline ::CMsgNetworkDeviceConnect_CustomAP* CMsgNetworkDeviceConnect::_internal_mutable_ap_custom() {
  if (!_internal_has_ap_custom()) {
    clear_ap_info();
    set_has_ap_custom();
    ap_info_.ap_custom_ = CreateMaybeMessage< ::CMsgNetworkDeviceConnect_CustomAP >(GetArenaForAllocation());
  }
  return ap_info_.ap_custom_;
}
inline ::CMsgNetworkDeviceConnect_CustomAP* CMsgNetworkDeviceConnect::mutable_ap_custom() {
  ::CMsgNetworkDeviceConnect_CustomAP* _msg = _internal_mutable_ap_custom();
  // @@protoc_insertion_point(field_mutable:CMsgNetworkDeviceConnect.ap_custom)
  return _msg;
}

inline bool CMsgNetworkDeviceConnect::has_ap_info() const {
  return ap_info_case() != AP_INFO_NOT_SET;
}
inline void CMsgNetworkDeviceConnect::clear_has_ap_info() {
  _oneof_case_[0] = AP_INFO_NOT_SET;
}
inline CMsgNetworkDeviceConnect::ApInfoCase CMsgNetworkDeviceConnect::ap_info_case() const {
  return CMsgNetworkDeviceConnect::ApInfoCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgStorageDevicesData_Drive

// optional uint32 id = 1 [default = 0];
inline bool CMsgStorageDevicesData_Drive::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_Drive::has_id() const {
  return _internal_has_id();
}
inline void CMsgStorageDevicesData_Drive::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgStorageDevicesData_Drive::_internal_id() const {
  return id_;
}
inline uint32_t CMsgStorageDevicesData_Drive::id() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.Drive.id)
  return _internal_id();
}
inline void CMsgStorageDevicesData_Drive::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void CMsgStorageDevicesData_Drive::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.Drive.id)
}

// optional string model = 2;
inline bool CMsgStorageDevicesData_Drive::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_Drive::has_model() const {
  return _internal_has_model();
}
inline void CMsgStorageDevicesData_Drive::clear_model() {
  model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgStorageDevicesData_Drive::model() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.Drive.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgStorageDevicesData_Drive::set_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.Drive.model)
}
inline std::string* CMsgStorageDevicesData_Drive::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:CMsgStorageDevicesData.Drive.model)
  return _s;
}
inline const std::string& CMsgStorageDevicesData_Drive::_internal_model() const {
  return model_.Get();
}
inline void CMsgStorageDevicesData_Drive::_internal_set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgStorageDevicesData_Drive::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000001u;
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgStorageDevicesData_Drive::release_model() {
  // @@protoc_insertion_point(field_release:CMsgStorageDevicesData.Drive.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = model_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgStorageDevicesData_Drive::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgStorageDevicesData.Drive.model)
}

// optional string vendor = 3;
inline bool CMsgStorageDevicesData_Drive::_internal_has_vendor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_Drive::has_vendor() const {
  return _internal_has_vendor();
}
inline void CMsgStorageDevicesData_Drive::clear_vendor() {
  vendor_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgStorageDevicesData_Drive::vendor() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.Drive.vendor)
  return _internal_vendor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgStorageDevicesData_Drive::set_vendor(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.Drive.vendor)
}
inline std::string* CMsgStorageDevicesData_Drive::mutable_vendor() {
  std::string* _s = _internal_mutable_vendor();
  // @@protoc_insertion_point(field_mutable:CMsgStorageDevicesData.Drive.vendor)
  return _s;
}
inline const std::string& CMsgStorageDevicesData_Drive::_internal_vendor() const {
  return vendor_.Get();
}
inline void CMsgStorageDevicesData_Drive::_internal_set_vendor(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  vendor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgStorageDevicesData_Drive::_internal_mutable_vendor() {
  _has_bits_[0] |= 0x00000002u;
  return vendor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgStorageDevicesData_Drive::release_vendor() {
  // @@protoc_insertion_point(field_release:CMsgStorageDevicesData.Drive.vendor)
  if (!_internal_has_vendor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = vendor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vendor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vendor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgStorageDevicesData_Drive::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vendor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vendor_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vendor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgStorageDevicesData.Drive.vendor)
}

// optional string serial = 4;
inline bool CMsgStorageDevicesData_Drive::_internal_has_serial() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_Drive::has_serial() const {
  return _internal_has_serial();
}
inline void CMsgStorageDevicesData_Drive::clear_serial() {
  serial_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgStorageDevicesData_Drive::serial() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.Drive.serial)
  return _internal_serial();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgStorageDevicesData_Drive::set_serial(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.Drive.serial)
}
inline std::string* CMsgStorageDevicesData_Drive::mutable_serial() {
  std::string* _s = _internal_mutable_serial();
  // @@protoc_insertion_point(field_mutable:CMsgStorageDevicesData.Drive.serial)
  return _s;
}
inline const std::string& CMsgStorageDevicesData_Drive::_internal_serial() const {
  return serial_.Get();
}
inline void CMsgStorageDevicesData_Drive::_internal_set_serial(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgStorageDevicesData_Drive::_internal_mutable_serial() {
  _has_bits_[0] |= 0x00000004u;
  return serial_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgStorageDevicesData_Drive::release_serial() {
  // @@protoc_insertion_point(field_release:CMsgStorageDevicesData.Drive.serial)
  if (!_internal_has_serial()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = serial_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgStorageDevicesData_Drive::set_allocated_serial(std::string* serial) {
  if (serial != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  serial_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgStorageDevicesData.Drive.serial)
}

// optional bool is_ejectable = 5;
inline bool CMsgStorageDevicesData_Drive::_internal_has_is_ejectable() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_Drive::has_is_ejectable() const {
  return _internal_has_is_ejectable();
}
inline void CMsgStorageDevicesData_Drive::clear_is_ejectable() {
  is_ejectable_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgStorageDevicesData_Drive::_internal_is_ejectable() const {
  return is_ejectable_;
}
inline bool CMsgStorageDevicesData_Drive::is_ejectable() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.Drive.is_ejectable)
  return _internal_is_ejectable();
}
inline void CMsgStorageDevicesData_Drive::_internal_set_is_ejectable(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_ejectable_ = value;
}
inline void CMsgStorageDevicesData_Drive::set_is_ejectable(bool value) {
  _internal_set_is_ejectable(value);
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.Drive.is_ejectable)
}

// optional uint64 size_bytes = 6;
inline bool CMsgStorageDevicesData_Drive::_internal_has_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_Drive::has_size_bytes() const {
  return _internal_has_size_bytes();
}
inline void CMsgStorageDevicesData_Drive::clear_size_bytes() {
  size_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CMsgStorageDevicesData_Drive::_internal_size_bytes() const {
  return size_bytes_;
}
inline uint64_t CMsgStorageDevicesData_Drive::size_bytes() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.Drive.size_bytes)
  return _internal_size_bytes();
}
inline void CMsgStorageDevicesData_Drive::_internal_set_size_bytes(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  size_bytes_ = value;
}
inline void CMsgStorageDevicesData_Drive::set_size_bytes(uint64_t value) {
  _internal_set_size_bytes(value);
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.Drive.size_bytes)
}

// optional .EStorageDriveMediaType media_type = 7 [default = k_EStorageDriveMediaType_Invalid];
inline bool CMsgStorageDevicesData_Drive::_internal_has_media_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_Drive::has_media_type() const {
  return _internal_has_media_type();
}
inline void CMsgStorageDevicesData_Drive::clear_media_type() {
  media_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::EStorageDriveMediaType CMsgStorageDevicesData_Drive::_internal_media_type() const {
  return static_cast< ::EStorageDriveMediaType >(media_type_);
}
inline ::EStorageDriveMediaType CMsgStorageDevicesData_Drive::media_type() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.Drive.media_type)
  return _internal_media_type();
}
inline void CMsgStorageDevicesData_Drive::_internal_set_media_type(::EStorageDriveMediaType value) {
  assert(::EStorageDriveMediaType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  media_type_ = value;
}
inline void CMsgStorageDevicesData_Drive::set_media_type(::EStorageDriveMediaType value) {
  _internal_set_media_type(value);
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.Drive.media_type)
}

// -------------------------------------------------------------------

// CMsgStorageDevicesData_BlockDevice

// optional uint32 id = 1 [default = 0];
inline bool CMsgStorageDevicesData_BlockDevice::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_BlockDevice::has_id() const {
  return _internal_has_id();
}
inline void CMsgStorageDevicesData_BlockDevice::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgStorageDevicesData_BlockDevice::_internal_id() const {
  return id_;
}
inline uint32_t CMsgStorageDevicesData_BlockDevice::id() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.BlockDevice.id)
  return _internal_id();
}
inline void CMsgStorageDevicesData_BlockDevice::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void CMsgStorageDevicesData_BlockDevice::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.BlockDevice.id)
}

// optional uint32 drive_id = 2 [default = 0];
inline bool CMsgStorageDevicesData_BlockDevice::_internal_has_drive_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_BlockDevice::has_drive_id() const {
  return _internal_has_drive_id();
}
inline void CMsgStorageDevicesData_BlockDevice::clear_drive_id() {
  drive_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgStorageDevicesData_BlockDevice::_internal_drive_id() const {
  return drive_id_;
}
inline uint32_t CMsgStorageDevicesData_BlockDevice::drive_id() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.BlockDevice.drive_id)
  return _internal_drive_id();
}
inline void CMsgStorageDevicesData_BlockDevice::_internal_set_drive_id(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  drive_id_ = value;
}
inline void CMsgStorageDevicesData_BlockDevice::set_drive_id(uint32_t value) {
  _internal_set_drive_id(value);
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.BlockDevice.drive_id)
}

// optional string path = 3;
inline bool CMsgStorageDevicesData_BlockDevice::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_BlockDevice::has_path() const {
  return _internal_has_path();
}
inline void CMsgStorageDevicesData_BlockDevice::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgStorageDevicesData_BlockDevice::path() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.BlockDevice.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgStorageDevicesData_BlockDevice::set_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.BlockDevice.path)
}
inline std::string* CMsgStorageDevicesData_BlockDevice::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:CMsgStorageDevicesData.BlockDevice.path)
  return _s;
}
inline const std::string& CMsgStorageDevicesData_BlockDevice::_internal_path() const {
  return path_.Get();
}
inline void CMsgStorageDevicesData_BlockDevice::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgStorageDevicesData_BlockDevice::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgStorageDevicesData_BlockDevice::release_path() {
  // @@protoc_insertion_point(field_release:CMsgStorageDevicesData.BlockDevice.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgStorageDevicesData_BlockDevice::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgStorageDevicesData.BlockDevice.path)
}

// optional string friendly_path = 4;
inline bool CMsgStorageDevicesData_BlockDevice::_internal_has_friendly_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_BlockDevice::has_friendly_path() const {
  return _internal_has_friendly_path();
}
inline void CMsgStorageDevicesData_BlockDevice::clear_friendly_path() {
  friendly_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgStorageDevicesData_BlockDevice::friendly_path() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.BlockDevice.friendly_path)
  return _internal_friendly_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgStorageDevicesData_BlockDevice::set_friendly_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 friendly_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.BlockDevice.friendly_path)
}
inline std::string* CMsgStorageDevicesData_BlockDevice::mutable_friendly_path() {
  std::string* _s = _internal_mutable_friendly_path();
  // @@protoc_insertion_point(field_mutable:CMsgStorageDevicesData.BlockDevice.friendly_path)
  return _s;
}
inline const std::string& CMsgStorageDevicesData_BlockDevice::_internal_friendly_path() const {
  return friendly_path_.Get();
}
inline void CMsgStorageDevicesData_BlockDevice::_internal_set_friendly_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  friendly_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgStorageDevicesData_BlockDevice::_internal_mutable_friendly_path() {
  _has_bits_[0] |= 0x00000002u;
  return friendly_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgStorageDevicesData_BlockDevice::release_friendly_path() {
  // @@protoc_insertion_point(field_release:CMsgStorageDevicesData.BlockDevice.friendly_path)
  if (!_internal_has_friendly_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = friendly_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (friendly_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    friendly_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgStorageDevicesData_BlockDevice::set_allocated_friendly_path(std::string* friendly_path) {
  if (friendly_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  friendly_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friendly_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (friendly_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    friendly_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgStorageDevicesData.BlockDevice.friendly_path)
}

// optional string label = 5;
inline bool CMsgStorageDevicesData_BlockDevice::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_BlockDevice::has_label() const {
  return _internal_has_label();
}
inline void CMsgStorageDevicesData_BlockDevice::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgStorageDevicesData_BlockDevice::label() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.BlockDevice.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgStorageDevicesData_BlockDevice::set_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.BlockDevice.label)
}
inline std::string* CMsgStorageDevicesData_BlockDevice::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:CMsgStorageDevicesData.BlockDevice.label)
  return _s;
}
inline const std::string& CMsgStorageDevicesData_BlockDevice::_internal_label() const {
  return label_.Get();
}
inline void CMsgStorageDevicesData_BlockDevice::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgStorageDevicesData_BlockDevice::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000004u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgStorageDevicesData_BlockDevice::release_label() {
  // @@protoc_insertion_point(field_release:CMsgStorageDevicesData.BlockDevice.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgStorageDevicesData_BlockDevice::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgStorageDevicesData.BlockDevice.label)
}

// optional uint64 size_bytes = 6;
inline bool CMsgStorageDevicesData_BlockDevice::_internal_has_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_BlockDevice::has_size_bytes() const {
  return _internal_has_size_bytes();
}
inline void CMsgStorageDevicesData_BlockDevice::clear_size_bytes() {
  size_bytes_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CMsgStorageDevicesData_BlockDevice::_internal_size_bytes() const {
  return size_bytes_;
}
inline uint64_t CMsgStorageDevicesData_BlockDevice::size_bytes() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.BlockDevice.size_bytes)
  return _internal_size_bytes();
}
inline void CMsgStorageDevicesData_BlockDevice::_internal_set_size_bytes(uint64_t value) {
  _has_bits_[0] |= 0x00000040u;
  size_bytes_ = value;
}
inline void CMsgStorageDevicesData_BlockDevice::set_size_bytes(uint64_t value) {
  _internal_set_size_bytes(value);
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.BlockDevice.size_bytes)
}

// optional bool is_formattable = 7;
inline bool CMsgStorageDevicesData_BlockDevice::_internal_has_is_formattable() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_BlockDevice::has_is_formattable() const {
  return _internal_has_is_formattable();
}
inline void CMsgStorageDevicesData_BlockDevice::clear_is_formattable() {
  is_formattable_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgStorageDevicesData_BlockDevice::_internal_is_formattable() const {
  return is_formattable_;
}
inline bool CMsgStorageDevicesData_BlockDevice::is_formattable() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.BlockDevice.is_formattable)
  return _internal_is_formattable();
}
inline void CMsgStorageDevicesData_BlockDevice::_internal_set_is_formattable(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_formattable_ = value;
}
inline void CMsgStorageDevicesData_BlockDevice::set_is_formattable(bool value) {
  _internal_set_is_formattable(value);
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.BlockDevice.is_formattable)
}

// optional bool is_read_only = 8;
inline bool CMsgStorageDevicesData_BlockDevice::_internal_has_is_read_only() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_BlockDevice::has_is_read_only() const {
  return _internal_has_is_read_only();
}
inline void CMsgStorageDevicesData_BlockDevice::clear_is_read_only() {
  is_read_only_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgStorageDevicesData_BlockDevice::_internal_is_read_only() const {
  return is_read_only_;
}
inline bool CMsgStorageDevicesData_BlockDevice::is_read_only() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.BlockDevice.is_read_only)
  return _internal_is_read_only();
}
inline void CMsgStorageDevicesData_BlockDevice::_internal_set_is_read_only(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_read_only_ = value;
}
inline void CMsgStorageDevicesData_BlockDevice::set_is_read_only(bool value) {
  _internal_set_is_read_only(value);
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.BlockDevice.is_read_only)
}

// optional bool is_root_device = 9;
inline bool CMsgStorageDevicesData_BlockDevice::_internal_has_is_root_device() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_BlockDevice::has_is_root_device() const {
  return _internal_has_is_root_device();
}
inline void CMsgStorageDevicesData_BlockDevice::clear_is_root_device() {
  is_root_device_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgStorageDevicesData_BlockDevice::_internal_is_root_device() const {
  return is_root_device_;
}
inline bool CMsgStorageDevicesData_BlockDevice::is_root_device() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.BlockDevice.is_root_device)
  return _internal_is_root_device();
}
inline void CMsgStorageDevicesData_BlockDevice::_internal_set_is_root_device(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_root_device_ = value;
}
inline void CMsgStorageDevicesData_BlockDevice::set_is_root_device(bool value) {
  _internal_set_is_root_device(value);
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.BlockDevice.is_root_device)
}

// optional .EStorageBlockContentType content_type = 10 [default = k_EStorageBlockContentType_Invalid];
inline bool CMsgStorageDevicesData_BlockDevice::_internal_has_content_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_BlockDevice::has_content_type() const {
  return _internal_has_content_type();
}
inline void CMsgStorageDevicesData_BlockDevice::clear_content_type() {
  content_type_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::EStorageBlockContentType CMsgStorageDevicesData_BlockDevice::_internal_content_type() const {
  return static_cast< ::EStorageBlockContentType >(content_type_);
}
inline ::EStorageBlockContentType CMsgStorageDevicesData_BlockDevice::content_type() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.BlockDevice.content_type)
  return _internal_content_type();
}
inline void CMsgStorageDevicesData_BlockDevice::_internal_set_content_type(::EStorageBlockContentType value) {
  assert(::EStorageBlockContentType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  content_type_ = value;
}
inline void CMsgStorageDevicesData_BlockDevice::set_content_type(::EStorageBlockContentType value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.BlockDevice.content_type)
}

// optional .EStorageBlockFileSystemType filesystem_type = 11 [default = k_EStorageBlockFileSystemType_Invalid];
inline bool CMsgStorageDevicesData_BlockDevice::_internal_has_filesystem_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_BlockDevice::has_filesystem_type() const {
  return _internal_has_filesystem_type();
}
inline void CMsgStorageDevicesData_BlockDevice::clear_filesystem_type() {
  filesystem_type_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::EStorageBlockFileSystemType CMsgStorageDevicesData_BlockDevice::_internal_filesystem_type() const {
  return static_cast< ::EStorageBlockFileSystemType >(filesystem_type_);
}
inline ::EStorageBlockFileSystemType CMsgStorageDevicesData_BlockDevice::filesystem_type() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.BlockDevice.filesystem_type)
  return _internal_filesystem_type();
}
inline void CMsgStorageDevicesData_BlockDevice::_internal_set_filesystem_type(::EStorageBlockFileSystemType value) {
  assert(::EStorageBlockFileSystemType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  filesystem_type_ = value;
}
inline void CMsgStorageDevicesData_BlockDevice::set_filesystem_type(::EStorageBlockFileSystemType value) {
  _internal_set_filesystem_type(value);
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.BlockDevice.filesystem_type)
}

// optional string mount_path = 12;
inline bool CMsgStorageDevicesData_BlockDevice::_internal_has_mount_path() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData_BlockDevice::has_mount_path() const {
  return _internal_has_mount_path();
}
inline void CMsgStorageDevicesData_BlockDevice::clear_mount_path() {
  mount_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgStorageDevicesData_BlockDevice::mount_path() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.BlockDevice.mount_path)
  return _internal_mount_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgStorageDevicesData_BlockDevice::set_mount_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 mount_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.BlockDevice.mount_path)
}
inline std::string* CMsgStorageDevicesData_BlockDevice::mutable_mount_path() {
  std::string* _s = _internal_mutable_mount_path();
  // @@protoc_insertion_point(field_mutable:CMsgStorageDevicesData.BlockDevice.mount_path)
  return _s;
}
inline const std::string& CMsgStorageDevicesData_BlockDevice::_internal_mount_path() const {
  return mount_path_.Get();
}
inline void CMsgStorageDevicesData_BlockDevice::_internal_set_mount_path(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  mount_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgStorageDevicesData_BlockDevice::_internal_mutable_mount_path() {
  _has_bits_[0] |= 0x00000008u;
  return mount_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgStorageDevicesData_BlockDevice::release_mount_path() {
  // @@protoc_insertion_point(field_release:CMsgStorageDevicesData.BlockDevice.mount_path)
  if (!_internal_has_mount_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = mount_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mount_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mount_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgStorageDevicesData_BlockDevice::set_allocated_mount_path(std::string* mount_path) {
  if (mount_path != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  mount_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mount_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mount_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mount_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgStorageDevicesData.BlockDevice.mount_path)
}

// -------------------------------------------------------------------

// CMsgStorageDevicesData

// repeated .CMsgStorageDevicesData.Drive drives = 1;
inline int CMsgStorageDevicesData::_internal_drives_size() const {
  return drives_.size();
}
inline int CMsgStorageDevicesData::drives_size() const {
  return _internal_drives_size();
}
inline void CMsgStorageDevicesData::clear_drives() {
  drives_.Clear();
}
inline ::CMsgStorageDevicesData_Drive* CMsgStorageDevicesData::mutable_drives(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgStorageDevicesData.drives)
  return drives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStorageDevicesData_Drive >*
CMsgStorageDevicesData::mutable_drives() {
  // @@protoc_insertion_point(field_mutable_list:CMsgStorageDevicesData.drives)
  return &drives_;
}
inline const ::CMsgStorageDevicesData_Drive& CMsgStorageDevicesData::_internal_drives(int index) const {
  return drives_.Get(index);
}
inline const ::CMsgStorageDevicesData_Drive& CMsgStorageDevicesData::drives(int index) const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.drives)
  return _internal_drives(index);
}
inline ::CMsgStorageDevicesData_Drive* CMsgStorageDevicesData::_internal_add_drives() {
  return drives_.Add();
}
inline ::CMsgStorageDevicesData_Drive* CMsgStorageDevicesData::add_drives() {
  ::CMsgStorageDevicesData_Drive* _add = _internal_add_drives();
  // @@protoc_insertion_point(field_add:CMsgStorageDevicesData.drives)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStorageDevicesData_Drive >&
CMsgStorageDevicesData::drives() const {
  // @@protoc_insertion_point(field_list:CMsgStorageDevicesData.drives)
  return drives_;
}

// repeated .CMsgStorageDevicesData.BlockDevice block_devices = 2;
inline int CMsgStorageDevicesData::_internal_block_devices_size() const {
  return block_devices_.size();
}
inline int CMsgStorageDevicesData::block_devices_size() const {
  return _internal_block_devices_size();
}
inline void CMsgStorageDevicesData::clear_block_devices() {
  block_devices_.Clear();
}
inline ::CMsgStorageDevicesData_BlockDevice* CMsgStorageDevicesData::mutable_block_devices(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgStorageDevicesData.block_devices)
  return block_devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStorageDevicesData_BlockDevice >*
CMsgStorageDevicesData::mutable_block_devices() {
  // @@protoc_insertion_point(field_mutable_list:CMsgStorageDevicesData.block_devices)
  return &block_devices_;
}
inline const ::CMsgStorageDevicesData_BlockDevice& CMsgStorageDevicesData::_internal_block_devices(int index) const {
  return block_devices_.Get(index);
}
inline const ::CMsgStorageDevicesData_BlockDevice& CMsgStorageDevicesData::block_devices(int index) const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.block_devices)
  return _internal_block_devices(index);
}
inline ::CMsgStorageDevicesData_BlockDevice* CMsgStorageDevicesData::_internal_add_block_devices() {
  return block_devices_.Add();
}
inline ::CMsgStorageDevicesData_BlockDevice* CMsgStorageDevicesData::add_block_devices() {
  ::CMsgStorageDevicesData_BlockDevice* _add = _internal_add_block_devices();
  // @@protoc_insertion_point(field_add:CMsgStorageDevicesData.block_devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgStorageDevicesData_BlockDevice >&
CMsgStorageDevicesData::block_devices() const {
  // @@protoc_insertion_point(field_list:CMsgStorageDevicesData.block_devices)
  return block_devices_;
}

// optional bool is_unmount_supported = 3;
inline bool CMsgStorageDevicesData::_internal_has_is_unmount_supported() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData::has_is_unmount_supported() const {
  return _internal_has_is_unmount_supported();
}
inline void CMsgStorageDevicesData::clear_is_unmount_supported() {
  is_unmount_supported_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgStorageDevicesData::_internal_is_unmount_supported() const {
  return is_unmount_supported_;
}
inline bool CMsgStorageDevicesData::is_unmount_supported() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.is_unmount_supported)
  return _internal_is_unmount_supported();
}
inline void CMsgStorageDevicesData::_internal_set_is_unmount_supported(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_unmount_supported_ = value;
}
inline void CMsgStorageDevicesData::set_is_unmount_supported(bool value) {
  _internal_set_is_unmount_supported(value);
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.is_unmount_supported)
}

// optional bool is_trim_supported = 4;
inline bool CMsgStorageDevicesData::_internal_has_is_trim_supported() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData::has_is_trim_supported() const {
  return _internal_has_is_trim_supported();
}
inline void CMsgStorageDevicesData::clear_is_trim_supported() {
  is_trim_supported_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgStorageDevicesData::_internal_is_trim_supported() const {
  return is_trim_supported_;
}
inline bool CMsgStorageDevicesData::is_trim_supported() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.is_trim_supported)
  return _internal_is_trim_supported();
}
inline void CMsgStorageDevicesData::_internal_set_is_trim_supported(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_trim_supported_ = value;
}
inline void CMsgStorageDevicesData::set_is_trim_supported(bool value) {
  _internal_set_is_trim_supported(value);
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.is_trim_supported)
}

// optional bool is_trim_running = 5;
inline bool CMsgStorageDevicesData::_internal_has_is_trim_running() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgStorageDevicesData::has_is_trim_running() const {
  return _internal_has_is_trim_running();
}
inline void CMsgStorageDevicesData::clear_is_trim_running() {
  is_trim_running_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgStorageDevicesData::_internal_is_trim_running() const {
  return is_trim_running_;
}
inline bool CMsgStorageDevicesData::is_trim_running() const {
  // @@protoc_insertion_point(field_get:CMsgStorageDevicesData.is_trim_running)
  return _internal_is_trim_running();
}
inline void CMsgStorageDevicesData::_internal_set_is_trim_running(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_trim_running_ = value;
}
inline void CMsgStorageDevicesData::set_is_trim_running(bool value) {
  _internal_set_is_trim_running(value);
  // @@protoc_insertion_point(field_set:CMsgStorageDevicesData.is_trim_running)
}

// -------------------------------------------------------------------

// CCloud_PendingRemoteOperation

// optional .ECloudPendingRemoteOperation operation = 1 [default = k_ECloudPendingRemoteOperationNone];
inline bool CCloud_PendingRemoteOperation::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_PendingRemoteOperation::has_operation() const {
  return _internal_has_operation();
}
inline void CCloud_PendingRemoteOperation::clear_operation() {
  operation_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ECloudPendingRemoteOperation CCloud_PendingRemoteOperation::_internal_operation() const {
  return static_cast< ::ECloudPendingRemoteOperation >(operation_);
}
inline ::ECloudPendingRemoteOperation CCloud_PendingRemoteOperation::operation() const {
  // @@protoc_insertion_point(field_get:CCloud_PendingRemoteOperation.operation)
  return _internal_operation();
}
inline void CCloud_PendingRemoteOperation::_internal_set_operation(::ECloudPendingRemoteOperation value) {
  assert(::ECloudPendingRemoteOperation_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  operation_ = value;
}
inline void CCloud_PendingRemoteOperation::set_operation(::ECloudPendingRemoteOperation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:CCloud_PendingRemoteOperation.operation)
}

// optional string machine_name = 2;
inline bool CCloud_PendingRemoteOperation::_internal_has_machine_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_PendingRemoteOperation::has_machine_name() const {
  return _internal_has_machine_name();
}
inline void CCloud_PendingRemoteOperation::clear_machine_name() {
  machine_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_PendingRemoteOperation::machine_name() const {
  // @@protoc_insertion_point(field_get:CCloud_PendingRemoteOperation.machine_name)
  return _internal_machine_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCloud_PendingRemoteOperation::set_machine_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCloud_PendingRemoteOperation.machine_name)
}
inline std::string* CCloud_PendingRemoteOperation::mutable_machine_name() {
  std::string* _s = _internal_mutable_machine_name();
  // @@protoc_insertion_point(field_mutable:CCloud_PendingRemoteOperation.machine_name)
  return _s;
}
inline const std::string& CCloud_PendingRemoteOperation::_internal_machine_name() const {
  return machine_name_.Get();
}
inline void CCloud_PendingRemoteOperation::_internal_set_machine_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCloud_PendingRemoteOperation::_internal_mutable_machine_name() {
  _has_bits_[0] |= 0x00000001u;
  return machine_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCloud_PendingRemoteOperation::release_machine_name() {
  // @@protoc_insertion_point(field_release:CCloud_PendingRemoteOperation.machine_name)
  if (!_internal_has_machine_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = machine_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCloud_PendingRemoteOperation::set_allocated_machine_name(std::string* machine_name) {
  if (machine_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  machine_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    machine_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCloud_PendingRemoteOperation.machine_name)
}

// optional uint64 client_id = 3;
inline bool CCloud_PendingRemoteOperation::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_PendingRemoteOperation::has_client_id() const {
  return _internal_has_client_id();
}
inline void CCloud_PendingRemoteOperation::clear_client_id() {
  client_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CCloud_PendingRemoteOperation::_internal_client_id() const {
  return client_id_;
}
inline uint64_t CCloud_PendingRemoteOperation::client_id() const {
  // @@protoc_insertion_point(field_get:CCloud_PendingRemoteOperation.client_id)
  return _internal_client_id();
}
inline void CCloud_PendingRemoteOperation::_internal_set_client_id(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  client_id_ = value;
}
inline void CCloud_PendingRemoteOperation::set_client_id(uint64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:CCloud_PendingRemoteOperation.client_id)
}

// optional uint32 time_last_updated = 4;
inline bool CCloud_PendingRemoteOperation::_internal_has_time_last_updated() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_PendingRemoteOperation::has_time_last_updated() const {
  return _internal_has_time_last_updated();
}
inline void CCloud_PendingRemoteOperation::clear_time_last_updated() {
  time_last_updated_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCloud_PendingRemoteOperation::_internal_time_last_updated() const {
  return time_last_updated_;
}
inline uint32_t CCloud_PendingRemoteOperation::time_last_updated() const {
  // @@protoc_insertion_point(field_get:CCloud_PendingRemoteOperation.time_last_updated)
  return _internal_time_last_updated();
}
inline void CCloud_PendingRemoteOperation::_internal_set_time_last_updated(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  time_last_updated_ = value;
}
inline void CCloud_PendingRemoteOperation::set_time_last_updated(uint32_t value) {
  _internal_set_time_last_updated(value);
  // @@protoc_insertion_point(field_set:CCloud_PendingRemoteOperation.time_last_updated)
}

// -------------------------------------------------------------------

// CMsgCloudPendingRemoteOperations

// repeated .CCloud_PendingRemoteOperation operations = 1;
inline int CMsgCloudPendingRemoteOperations::_internal_operations_size() const {
  return operations_.size();
}
inline int CMsgCloudPendingRemoteOperations::operations_size() const {
  return _internal_operations_size();
}
inline void CMsgCloudPendingRemoteOperations::clear_operations() {
  operations_.Clear();
}
inline ::CCloud_PendingRemoteOperation* CMsgCloudPendingRemoteOperations::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgCloudPendingRemoteOperations.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_PendingRemoteOperation >*
CMsgCloudPendingRemoteOperations::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:CMsgCloudPendingRemoteOperations.operations)
  return &operations_;
}
inline const ::CCloud_PendingRemoteOperation& CMsgCloudPendingRemoteOperations::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::CCloud_PendingRemoteOperation& CMsgCloudPendingRemoteOperations::operations(int index) const {
  // @@protoc_insertion_point(field_get:CMsgCloudPendingRemoteOperations.operations)
  return _internal_operations(index);
}
inline ::CCloud_PendingRemoteOperation* CMsgCloudPendingRemoteOperations::_internal_add_operations() {
  return operations_.Add();
}
inline ::CCloud_PendingRemoteOperation* CMsgCloudPendingRemoteOperations::add_operations() {
  ::CCloud_PendingRemoteOperation* _add = _internal_add_operations();
  // @@protoc_insertion_point(field_add:CMsgCloudPendingRemoteOperations.operations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_PendingRemoteOperation >&
CMsgCloudPendingRemoteOperations::operations() const {
  // @@protoc_insertion_point(field_list:CMsgCloudPendingRemoteOperations.operations)
  return operations_;
}

// -------------------------------------------------------------------

// CMsgBluetoothDevicesData_Adapter

// optional uint32 id = 1 [default = 0];
inline bool CMsgBluetoothDevicesData_Adapter::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBluetoothDevicesData_Adapter::has_id() const {
  return _internal_has_id();
}
inline void CMsgBluetoothDevicesData_Adapter::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgBluetoothDevicesData_Adapter::_internal_id() const {
  return id_;
}
inline uint32_t CMsgBluetoothDevicesData_Adapter::id() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.Adapter.id)
  return _internal_id();
}
inline void CMsgBluetoothDevicesData_Adapter::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void CMsgBluetoothDevicesData_Adapter::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothDevicesData.Adapter.id)
}

// optional string mac = 2;
inline bool CMsgBluetoothDevicesData_Adapter::_internal_has_mac() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBluetoothDevicesData_Adapter::has_mac() const {
  return _internal_has_mac();
}
inline void CMsgBluetoothDevicesData_Adapter::clear_mac() {
  mac_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgBluetoothDevicesData_Adapter::mac() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.Adapter.mac)
  return _internal_mac();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBluetoothDevicesData_Adapter::set_mac(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBluetoothDevicesData.Adapter.mac)
}
inline std::string* CMsgBluetoothDevicesData_Adapter::mutable_mac() {
  std::string* _s = _internal_mutable_mac();
  // @@protoc_insertion_point(field_mutable:CMsgBluetoothDevicesData.Adapter.mac)
  return _s;
}
inline const std::string& CMsgBluetoothDevicesData_Adapter::_internal_mac() const {
  return mac_.Get();
}
inline void CMsgBluetoothDevicesData_Adapter::_internal_set_mac(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBluetoothDevicesData_Adapter::_internal_mutable_mac() {
  _has_bits_[0] |= 0x00000001u;
  return mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBluetoothDevicesData_Adapter::release_mac() {
  // @@protoc_insertion_point(field_release:CMsgBluetoothDevicesData.Adapter.mac)
  if (!_internal_has_mac()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = mac_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBluetoothDevicesData_Adapter::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBluetoothDevicesData.Adapter.mac)
}

// optional string name = 3;
inline bool CMsgBluetoothDevicesData_Adapter::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBluetoothDevicesData_Adapter::has_name() const {
  return _internal_has_name();
}
inline void CMsgBluetoothDevicesData_Adapter::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgBluetoothDevicesData_Adapter::name() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.Adapter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBluetoothDevicesData_Adapter::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBluetoothDevicesData.Adapter.name)
}
inline std::string* CMsgBluetoothDevicesData_Adapter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgBluetoothDevicesData.Adapter.name)
  return _s;
}
inline const std::string& CMsgBluetoothDevicesData_Adapter::_internal_name() const {
  return name_.Get();
}
inline void CMsgBluetoothDevicesData_Adapter::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBluetoothDevicesData_Adapter::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBluetoothDevicesData_Adapter::release_name() {
  // @@protoc_insertion_point(field_release:CMsgBluetoothDevicesData.Adapter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBluetoothDevicesData_Adapter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBluetoothDevicesData.Adapter.name)
}

// optional bool is_enabled = 4;
inline bool CMsgBluetoothDevicesData_Adapter::_internal_has_is_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBluetoothDevicesData_Adapter::has_is_enabled() const {
  return _internal_has_is_enabled();
}
inline void CMsgBluetoothDevicesData_Adapter::clear_is_enabled() {
  is_enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgBluetoothDevicesData_Adapter::_internal_is_enabled() const {
  return is_enabled_;
}
inline bool CMsgBluetoothDevicesData_Adapter::is_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.Adapter.is_enabled)
  return _internal_is_enabled();
}
inline void CMsgBluetoothDevicesData_Adapter::_internal_set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_enabled_ = value;
}
inline void CMsgBluetoothDevicesData_Adapter::set_is_enabled(bool value) {
  _internal_set_is_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothDevicesData.Adapter.is_enabled)
}

// optional bool is_discovering = 5;
inline bool CMsgBluetoothDevicesData_Adapter::_internal_has_is_discovering() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBluetoothDevicesData_Adapter::has_is_discovering() const {
  return _internal_has_is_discovering();
}
inline void CMsgBluetoothDevicesData_Adapter::clear_is_discovering() {
  is_discovering_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgBluetoothDevicesData_Adapter::_internal_is_discovering() const {
  return is_discovering_;
}
inline bool CMsgBluetoothDevicesData_Adapter::is_discovering() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.Adapter.is_discovering)
  return _internal_is_discovering();
}
inline void CMsgBluetoothDevicesData_Adapter::_internal_set_is_discovering(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_discovering_ = value;
}
inline void CMsgBluetoothDevicesData_Adapter::set_is_discovering(bool value) {
  _internal_set_is_discovering(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothDevicesData.Adapter.is_discovering)
}

// -------------------------------------------------------------------

// CMsgBluetoothDevicesData_Device

// optional uint32 id = 1 [default = 0];
inline bool CMsgBluetoothDevicesData_Device::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBluetoothDevicesData_Device::has_id() const {
  return _internal_has_id();
}
inline void CMsgBluetoothDevicesData_Device::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgBluetoothDevicesData_Device::_internal_id() const {
  return id_;
}
inline uint32_t CMsgBluetoothDevicesData_Device::id() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.Device.id)
  return _internal_id();
}
inline void CMsgBluetoothDevicesData_Device::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void CMsgBluetoothDevicesData_Device::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothDevicesData.Device.id)
}

// optional uint32 adapter_id = 2 [default = 0];
inline bool CMsgBluetoothDevicesData_Device::_internal_has_adapter_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBluetoothDevicesData_Device::has_adapter_id() const {
  return _internal_has_adapter_id();
}
inline void CMsgBluetoothDevicesData_Device::clear_adapter_id() {
  adapter_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgBluetoothDevicesData_Device::_internal_adapter_id() const {
  return adapter_id_;
}
inline uint32_t CMsgBluetoothDevicesData_Device::adapter_id() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.Device.adapter_id)
  return _internal_adapter_id();
}
inline void CMsgBluetoothDevicesData_Device::_internal_set_adapter_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  adapter_id_ = value;
}
inline void CMsgBluetoothDevicesData_Device::set_adapter_id(uint32_t value) {
  _internal_set_adapter_id(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothDevicesData.Device.adapter_id)
}

// optional .EBluetoothDeviceType etype = 3 [default = k_BluetoothDeviceType_Invalid];
inline bool CMsgBluetoothDevicesData_Device::_internal_has_etype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBluetoothDevicesData_Device::has_etype() const {
  return _internal_has_etype();
}
inline void CMsgBluetoothDevicesData_Device::clear_etype() {
  etype_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::EBluetoothDeviceType CMsgBluetoothDevicesData_Device::_internal_etype() const {
  return static_cast< ::EBluetoothDeviceType >(etype_);
}
inline ::EBluetoothDeviceType CMsgBluetoothDevicesData_Device::etype() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.Device.etype)
  return _internal_etype();
}
inline void CMsgBluetoothDevicesData_Device::_internal_set_etype(::EBluetoothDeviceType value) {
  assert(::EBluetoothDeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  etype_ = value;
}
inline void CMsgBluetoothDevicesData_Device::set_etype(::EBluetoothDeviceType value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothDevicesData.Device.etype)
}

// optional string mac = 4;
inline bool CMsgBluetoothDevicesData_Device::_internal_has_mac() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBluetoothDevicesData_Device::has_mac() const {
  return _internal_has_mac();
}
inline void CMsgBluetoothDevicesData_Device::clear_mac() {
  mac_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgBluetoothDevicesData_Device::mac() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.Device.mac)
  return _internal_mac();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBluetoothDevicesData_Device::set_mac(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBluetoothDevicesData.Device.mac)
}
inline std::string* CMsgBluetoothDevicesData_Device::mutable_mac() {
  std::string* _s = _internal_mutable_mac();
  // @@protoc_insertion_point(field_mutable:CMsgBluetoothDevicesData.Device.mac)
  return _s;
}
inline const std::string& CMsgBluetoothDevicesData_Device::_internal_mac() const {
  return mac_.Get();
}
inline void CMsgBluetoothDevicesData_Device::_internal_set_mac(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBluetoothDevicesData_Device::_internal_mutable_mac() {
  _has_bits_[0] |= 0x00000001u;
  return mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBluetoothDevicesData_Device::release_mac() {
  // @@protoc_insertion_point(field_release:CMsgBluetoothDevicesData.Device.mac)
  if (!_internal_has_mac()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = mac_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBluetoothDevicesData_Device::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBluetoothDevicesData.Device.mac)
}

// optional string name = 5;
inline bool CMsgBluetoothDevicesData_Device::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBluetoothDevicesData_Device::has_name() const {
  return _internal_has_name();
}
inline void CMsgBluetoothDevicesData_Device::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgBluetoothDevicesData_Device::name() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.Device.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgBluetoothDevicesData_Device::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgBluetoothDevicesData.Device.name)
}
inline std::string* CMsgBluetoothDevicesData_Device::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgBluetoothDevicesData.Device.name)
  return _s;
}
inline const std::string& CMsgBluetoothDevicesData_Device::_internal_name() const {
  return name_.Get();
}
inline void CMsgBluetoothDevicesData_Device::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgBluetoothDevicesData_Device::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgBluetoothDevicesData_Device::release_name() {
  // @@protoc_insertion_point(field_release:CMsgBluetoothDevicesData.Device.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgBluetoothDevicesData_Device::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgBluetoothDevicesData.Device.name)
}

// optional bool is_connected = 6;
inline bool CMsgBluetoothDevicesData_Device::_internal_has_is_connected() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBluetoothDevicesData_Device::has_is_connected() const {
  return _internal_has_is_connected();
}
inline void CMsgBluetoothDevicesData_Device::clear_is_connected() {
  is_connected_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgBluetoothDevicesData_Device::_internal_is_connected() const {
  return is_connected_;
}
inline bool CMsgBluetoothDevicesData_Device::is_connected() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.Device.is_connected)
  return _internal_is_connected();
}
inline void CMsgBluetoothDevicesData_Device::_internal_set_is_connected(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_connected_ = value;
}
inline void CMsgBluetoothDevicesData_Device::set_is_connected(bool value) {
  _internal_set_is_connected(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothDevicesData.Device.is_connected)
}

// optional bool is_paired = 7;
inline bool CMsgBluetoothDevicesData_Device::_internal_has_is_paired() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgBluetoothDevicesData_Device::has_is_paired() const {
  return _internal_has_is_paired();
}
inline void CMsgBluetoothDevicesData_Device::clear_is_paired() {
  is_paired_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgBluetoothDevicesData_Device::_internal_is_paired() const {
  return is_paired_;
}
inline bool CMsgBluetoothDevicesData_Device::is_paired() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.Device.is_paired)
  return _internal_is_paired();
}
inline void CMsgBluetoothDevicesData_Device::_internal_set_is_paired(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_paired_ = value;
}
inline void CMsgBluetoothDevicesData_Device::set_is_paired(bool value) {
  _internal_set_is_paired(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothDevicesData.Device.is_paired)
}

// optional int32 strength_raw = 8;
inline bool CMsgBluetoothDevicesData_Device::_internal_has_strength_raw() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgBluetoothDevicesData_Device::has_strength_raw() const {
  return _internal_has_strength_raw();
}
inline void CMsgBluetoothDevicesData_Device::clear_strength_raw() {
  strength_raw_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t CMsgBluetoothDevicesData_Device::_internal_strength_raw() const {
  return strength_raw_;
}
inline int32_t CMsgBluetoothDevicesData_Device::strength_raw() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.Device.strength_raw)
  return _internal_strength_raw();
}
inline void CMsgBluetoothDevicesData_Device::_internal_set_strength_raw(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  strength_raw_ = value;
}
inline void CMsgBluetoothDevicesData_Device::set_strength_raw(int32_t value) {
  _internal_set_strength_raw(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothDevicesData.Device.strength_raw)
}

// -------------------------------------------------------------------

// CMsgBluetoothDevicesData_Manager

// optional bool is_bluetooth_enabled = 1;
inline bool CMsgBluetoothDevicesData_Manager::_internal_has_is_bluetooth_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBluetoothDevicesData_Manager::has_is_bluetooth_enabled() const {
  return _internal_has_is_bluetooth_enabled();
}
inline void CMsgBluetoothDevicesData_Manager::clear_is_bluetooth_enabled() {
  is_bluetooth_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgBluetoothDevicesData_Manager::_internal_is_bluetooth_enabled() const {
  return is_bluetooth_enabled_;
}
inline bool CMsgBluetoothDevicesData_Manager::is_bluetooth_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.Manager.is_bluetooth_enabled)
  return _internal_is_bluetooth_enabled();
}
inline void CMsgBluetoothDevicesData_Manager::_internal_set_is_bluetooth_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_bluetooth_enabled_ = value;
}
inline void CMsgBluetoothDevicesData_Manager::set_is_bluetooth_enabled(bool value) {
  _internal_set_is_bluetooth_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgBluetoothDevicesData.Manager.is_bluetooth_enabled)
}

// -------------------------------------------------------------------

// CMsgBluetoothDevicesData

// repeated .CMsgBluetoothDevicesData.Adapter adapters = 1;
inline int CMsgBluetoothDevicesData::_internal_adapters_size() const {
  return adapters_.size();
}
inline int CMsgBluetoothDevicesData::adapters_size() const {
  return _internal_adapters_size();
}
inline void CMsgBluetoothDevicesData::clear_adapters() {
  adapters_.Clear();
}
inline ::CMsgBluetoothDevicesData_Adapter* CMsgBluetoothDevicesData::mutable_adapters(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBluetoothDevicesData.adapters)
  return adapters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothDevicesData_Adapter >*
CMsgBluetoothDevicesData::mutable_adapters() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBluetoothDevicesData.adapters)
  return &adapters_;
}
inline const ::CMsgBluetoothDevicesData_Adapter& CMsgBluetoothDevicesData::_internal_adapters(int index) const {
  return adapters_.Get(index);
}
inline const ::CMsgBluetoothDevicesData_Adapter& CMsgBluetoothDevicesData::adapters(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.adapters)
  return _internal_adapters(index);
}
inline ::CMsgBluetoothDevicesData_Adapter* CMsgBluetoothDevicesData::_internal_add_adapters() {
  return adapters_.Add();
}
inline ::CMsgBluetoothDevicesData_Adapter* CMsgBluetoothDevicesData::add_adapters() {
  ::CMsgBluetoothDevicesData_Adapter* _add = _internal_add_adapters();
  // @@protoc_insertion_point(field_add:CMsgBluetoothDevicesData.adapters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothDevicesData_Adapter >&
CMsgBluetoothDevicesData::adapters() const {
  // @@protoc_insertion_point(field_list:CMsgBluetoothDevicesData.adapters)
  return adapters_;
}

// repeated .CMsgBluetoothDevicesData.Device devices = 2;
inline int CMsgBluetoothDevicesData::_internal_devices_size() const {
  return devices_.size();
}
inline int CMsgBluetoothDevicesData::devices_size() const {
  return _internal_devices_size();
}
inline void CMsgBluetoothDevicesData::clear_devices() {
  devices_.Clear();
}
inline ::CMsgBluetoothDevicesData_Device* CMsgBluetoothDevicesData::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgBluetoothDevicesData.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothDevicesData_Device >*
CMsgBluetoothDevicesData::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:CMsgBluetoothDevicesData.devices)
  return &devices_;
}
inline const ::CMsgBluetoothDevicesData_Device& CMsgBluetoothDevicesData::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::CMsgBluetoothDevicesData_Device& CMsgBluetoothDevicesData::devices(int index) const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.devices)
  return _internal_devices(index);
}
inline ::CMsgBluetoothDevicesData_Device* CMsgBluetoothDevicesData::_internal_add_devices() {
  return devices_.Add();
}
inline ::CMsgBluetoothDevicesData_Device* CMsgBluetoothDevicesData::add_devices() {
  ::CMsgBluetoothDevicesData_Device* _add = _internal_add_devices();
  // @@protoc_insertion_point(field_add:CMsgBluetoothDevicesData.devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgBluetoothDevicesData_Device >&
CMsgBluetoothDevicesData::devices() const {
  // @@protoc_insertion_point(field_list:CMsgBluetoothDevicesData.devices)
  return devices_;
}

// optional .CMsgBluetoothDevicesData.Manager manager = 3;
inline bool CMsgBluetoothDevicesData::_internal_has_manager() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || manager_ != nullptr);
  return value;
}
inline bool CMsgBluetoothDevicesData::has_manager() const {
  return _internal_has_manager();
}
inline void CMsgBluetoothDevicesData::clear_manager() {
  if (manager_ != nullptr) manager_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgBluetoothDevicesData_Manager& CMsgBluetoothDevicesData::_internal_manager() const {
  const ::CMsgBluetoothDevicesData_Manager* p = manager_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgBluetoothDevicesData_Manager&>(
      ::_CMsgBluetoothDevicesData_Manager_default_instance_);
}
inline const ::CMsgBluetoothDevicesData_Manager& CMsgBluetoothDevicesData::manager() const {
  // @@protoc_insertion_point(field_get:CMsgBluetoothDevicesData.manager)
  return _internal_manager();
}
inline void CMsgBluetoothDevicesData::unsafe_arena_set_allocated_manager(
    ::CMsgBluetoothDevicesData_Manager* manager) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(manager_);
  }
  manager_ = manager;
  if (manager) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgBluetoothDevicesData.manager)
}
inline ::CMsgBluetoothDevicesData_Manager* CMsgBluetoothDevicesData::release_manager() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgBluetoothDevicesData_Manager* temp = manager_;
  manager_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgBluetoothDevicesData_Manager* CMsgBluetoothDevicesData::unsafe_arena_release_manager() {
  // @@protoc_insertion_point(field_release:CMsgBluetoothDevicesData.manager)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgBluetoothDevicesData_Manager* temp = manager_;
  manager_ = nullptr;
  return temp;
}
inline ::CMsgBluetoothDevicesData_Manager* CMsgBluetoothDevicesData::_internal_mutable_manager() {
  _has_bits_[0] |= 0x00000001u;
  if (manager_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgBluetoothDevicesData_Manager>(GetArenaForAllocation());
    manager_ = p;
  }
  return manager_;
}
inline ::CMsgBluetoothDevicesData_Manager* CMsgBluetoothDevicesData::mutable_manager() {
  ::CMsgBluetoothDevicesData_Manager* _msg = _internal_mutable_manager();
  // @@protoc_insertion_point(field_mutable:CMsgBluetoothDevicesData.manager)
  return _msg;
}
inline void CMsgBluetoothDevicesData::set_allocated_manager(::CMsgBluetoothDevicesData_Manager* manager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete manager_;
  }
  if (manager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgBluetoothDevicesData_Manager>::GetOwningArena(manager);
    if (message_arena != submessage_arena) {
      manager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manager, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  manager_ = manager;
  // @@protoc_insertion_point(field_set_allocated:CMsgBluetoothDevicesData.manager)
}

// -------------------------------------------------------------------

// CMsgSystemPerfDiagnosticEntry

// optional string name = 1;
inline bool CMsgSystemPerfDiagnosticEntry::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemPerfDiagnosticEntry::has_name() const {
  return _internal_has_name();
}
inline void CMsgSystemPerfDiagnosticEntry::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSystemPerfDiagnosticEntry::name() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfDiagnosticEntry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemPerfDiagnosticEntry::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemPerfDiagnosticEntry.name)
}
inline std::string* CMsgSystemPerfDiagnosticEntry::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgSystemPerfDiagnosticEntry.name)
  return _s;
}
inline const std::string& CMsgSystemPerfDiagnosticEntry::_internal_name() const {
  return name_.Get();
}
inline void CMsgSystemPerfDiagnosticEntry::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemPerfDiagnosticEntry::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemPerfDiagnosticEntry::release_name() {
  // @@protoc_insertion_point(field_release:CMsgSystemPerfDiagnosticEntry.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemPerfDiagnosticEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemPerfDiagnosticEntry.name)
}

// optional string value = 2;
inline bool CMsgSystemPerfDiagnosticEntry::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemPerfDiagnosticEntry::has_value() const {
  return _internal_has_value();
}
inline void CMsgSystemPerfDiagnosticEntry::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSystemPerfDiagnosticEntry::value() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfDiagnosticEntry.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemPerfDiagnosticEntry::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemPerfDiagnosticEntry.value)
}
inline std::string* CMsgSystemPerfDiagnosticEntry::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsgSystemPerfDiagnosticEntry.value)
  return _s;
}
inline const std::string& CMsgSystemPerfDiagnosticEntry::_internal_value() const {
  return value_.Get();
}
inline void CMsgSystemPerfDiagnosticEntry::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemPerfDiagnosticEntry::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemPerfDiagnosticEntry::release_value() {
  // @@protoc_insertion_point(field_release:CMsgSystemPerfDiagnosticEntry.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemPerfDiagnosticEntry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemPerfDiagnosticEntry.value)
}

// -------------------------------------------------------------------

// CMsgSystemPerfNetworkInterface

// optional string name = 1;
inline bool CMsgSystemPerfNetworkInterface::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemPerfNetworkInterface::has_name() const {
  return _internal_has_name();
}
inline void CMsgSystemPerfNetworkInterface::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSystemPerfNetworkInterface::name() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfNetworkInterface.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemPerfNetworkInterface::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemPerfNetworkInterface.name)
}
inline std::string* CMsgSystemPerfNetworkInterface::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgSystemPerfNetworkInterface.name)
  return _s;
}
inline const std::string& CMsgSystemPerfNetworkInterface::_internal_name() const {
  return name_.Get();
}
inline void CMsgSystemPerfNetworkInterface::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemPerfNetworkInterface::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemPerfNetworkInterface::release_name() {
  // @@protoc_insertion_point(field_release:CMsgSystemPerfNetworkInterface.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemPerfNetworkInterface::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemPerfNetworkInterface.name)
}

// optional double timestamp = 2;
inline bool CMsgSystemPerfNetworkInterface::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemPerfNetworkInterface::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgSystemPerfNetworkInterface::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double CMsgSystemPerfNetworkInterface::_internal_timestamp() const {
  return timestamp_;
}
inline double CMsgSystemPerfNetworkInterface::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfNetworkInterface.timestamp)
  return _internal_timestamp();
}
inline void CMsgSystemPerfNetworkInterface::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void CMsgSystemPerfNetworkInterface::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfNetworkInterface.timestamp)
}

// optional int64 tx_bytes_total = 3;
inline bool CMsgSystemPerfNetworkInterface::_internal_has_tx_bytes_total() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemPerfNetworkInterface::has_tx_bytes_total() const {
  return _internal_has_tx_bytes_total();
}
inline void CMsgSystemPerfNetworkInterface::clear_tx_bytes_total() {
  tx_bytes_total_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t CMsgSystemPerfNetworkInterface::_internal_tx_bytes_total() const {
  return tx_bytes_total_;
}
inline int64_t CMsgSystemPerfNetworkInterface::tx_bytes_total() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfNetworkInterface.tx_bytes_total)
  return _internal_tx_bytes_total();
}
inline void CMsgSystemPerfNetworkInterface::_internal_set_tx_bytes_total(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  tx_bytes_total_ = value;
}
inline void CMsgSystemPerfNetworkInterface::set_tx_bytes_total(int64_t value) {
  _internal_set_tx_bytes_total(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfNetworkInterface.tx_bytes_total)
}

// optional int64 rx_bytes_total = 4;
inline bool CMsgSystemPerfNetworkInterface::_internal_has_rx_bytes_total() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSystemPerfNetworkInterface::has_rx_bytes_total() const {
  return _internal_has_rx_bytes_total();
}
inline void CMsgSystemPerfNetworkInterface::clear_rx_bytes_total() {
  rx_bytes_total_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t CMsgSystemPerfNetworkInterface::_internal_rx_bytes_total() const {
  return rx_bytes_total_;
}
inline int64_t CMsgSystemPerfNetworkInterface::rx_bytes_total() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfNetworkInterface.rx_bytes_total)
  return _internal_rx_bytes_total();
}
inline void CMsgSystemPerfNetworkInterface::_internal_set_rx_bytes_total(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  rx_bytes_total_ = value;
}
inline void CMsgSystemPerfNetworkInterface::set_rx_bytes_total(int64_t value) {
  _internal_set_rx_bytes_total(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfNetworkInterface.rx_bytes_total)
}

// optional int32 tx_bytes_per_sec = 5;
inline bool CMsgSystemPerfNetworkInterface::_internal_has_tx_bytes_per_sec() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSystemPerfNetworkInterface::has_tx_bytes_per_sec() const {
  return _internal_has_tx_bytes_per_sec();
}
inline void CMsgSystemPerfNetworkInterface::clear_tx_bytes_per_sec() {
  tx_bytes_per_sec_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgSystemPerfNetworkInterface::_internal_tx_bytes_per_sec() const {
  return tx_bytes_per_sec_;
}
inline int32_t CMsgSystemPerfNetworkInterface::tx_bytes_per_sec() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfNetworkInterface.tx_bytes_per_sec)
  return _internal_tx_bytes_per_sec();
}
inline void CMsgSystemPerfNetworkInterface::_internal_set_tx_bytes_per_sec(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  tx_bytes_per_sec_ = value;
}
inline void CMsgSystemPerfNetworkInterface::set_tx_bytes_per_sec(int32_t value) {
  _internal_set_tx_bytes_per_sec(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfNetworkInterface.tx_bytes_per_sec)
}

// optional int32 rx_bytes_per_sec = 6;
inline bool CMsgSystemPerfNetworkInterface::_internal_has_rx_bytes_per_sec() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSystemPerfNetworkInterface::has_rx_bytes_per_sec() const {
  return _internal_has_rx_bytes_per_sec();
}
inline void CMsgSystemPerfNetworkInterface::clear_rx_bytes_per_sec() {
  rx_bytes_per_sec_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgSystemPerfNetworkInterface::_internal_rx_bytes_per_sec() const {
  return rx_bytes_per_sec_;
}
inline int32_t CMsgSystemPerfNetworkInterface::rx_bytes_per_sec() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfNetworkInterface.rx_bytes_per_sec)
  return _internal_rx_bytes_per_sec();
}
inline void CMsgSystemPerfNetworkInterface::_internal_set_rx_bytes_per_sec(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  rx_bytes_per_sec_ = value;
}
inline void CMsgSystemPerfNetworkInterface::set_rx_bytes_per_sec(int32_t value) {
  _internal_set_rx_bytes_per_sec(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfNetworkInterface.rx_bytes_per_sec)
}

// -------------------------------------------------------------------

// CMsgSystemPerfDiagnosticInfo

// repeated .CMsgSystemPerfDiagnosticEntry entries = 1;
inline int CMsgSystemPerfDiagnosticInfo::_internal_entries_size() const {
  return entries_.size();
}
inline int CMsgSystemPerfDiagnosticInfo::entries_size() const {
  return _internal_entries_size();
}
inline void CMsgSystemPerfDiagnosticInfo::clear_entries() {
  entries_.Clear();
}
inline ::CMsgSystemPerfDiagnosticEntry* CMsgSystemPerfDiagnosticInfo::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSystemPerfDiagnosticInfo.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemPerfDiagnosticEntry >*
CMsgSystemPerfDiagnosticInfo::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemPerfDiagnosticInfo.entries)
  return &entries_;
}
inline const ::CMsgSystemPerfDiagnosticEntry& CMsgSystemPerfDiagnosticInfo::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::CMsgSystemPerfDiagnosticEntry& CMsgSystemPerfDiagnosticInfo::entries(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfDiagnosticInfo.entries)
  return _internal_entries(index);
}
inline ::CMsgSystemPerfDiagnosticEntry* CMsgSystemPerfDiagnosticInfo::_internal_add_entries() {
  return entries_.Add();
}
inline ::CMsgSystemPerfDiagnosticEntry* CMsgSystemPerfDiagnosticInfo::add_entries() {
  ::CMsgSystemPerfDiagnosticEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:CMsgSystemPerfDiagnosticInfo.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemPerfDiagnosticEntry >&
CMsgSystemPerfDiagnosticInfo::entries() const {
  // @@protoc_insertion_point(field_list:CMsgSystemPerfDiagnosticInfo.entries)
  return entries_;
}

// repeated .CMsgSystemPerfNetworkInterface interfaces = 2;
inline int CMsgSystemPerfDiagnosticInfo::_internal_interfaces_size() const {
  return interfaces_.size();
}
inline int CMsgSystemPerfDiagnosticInfo::interfaces_size() const {
  return _internal_interfaces_size();
}
inline void CMsgSystemPerfDiagnosticInfo::clear_interfaces() {
  interfaces_.Clear();
}
inline ::CMsgSystemPerfNetworkInterface* CMsgSystemPerfDiagnosticInfo::mutable_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSystemPerfDiagnosticInfo.interfaces)
  return interfaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemPerfNetworkInterface >*
CMsgSystemPerfDiagnosticInfo::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemPerfDiagnosticInfo.interfaces)
  return &interfaces_;
}
inline const ::CMsgSystemPerfNetworkInterface& CMsgSystemPerfDiagnosticInfo::_internal_interfaces(int index) const {
  return interfaces_.Get(index);
}
inline const ::CMsgSystemPerfNetworkInterface& CMsgSystemPerfDiagnosticInfo::interfaces(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfDiagnosticInfo.interfaces)
  return _internal_interfaces(index);
}
inline ::CMsgSystemPerfNetworkInterface* CMsgSystemPerfDiagnosticInfo::_internal_add_interfaces() {
  return interfaces_.Add();
}
inline ::CMsgSystemPerfNetworkInterface* CMsgSystemPerfDiagnosticInfo::add_interfaces() {
  ::CMsgSystemPerfNetworkInterface* _add = _internal_add_interfaces();
  // @@protoc_insertion_point(field_add:CMsgSystemPerfDiagnosticInfo.interfaces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemPerfNetworkInterface >&
CMsgSystemPerfDiagnosticInfo::interfaces() const {
  // @@protoc_insertion_point(field_list:CMsgSystemPerfDiagnosticInfo.interfaces)
  return interfaces_;
}

// optional float battery_temp_c = 3;
inline bool CMsgSystemPerfDiagnosticInfo::_internal_has_battery_temp_c() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemPerfDiagnosticInfo::has_battery_temp_c() const {
  return _internal_has_battery_temp_c();
}
inline void CMsgSystemPerfDiagnosticInfo::clear_battery_temp_c() {
  battery_temp_c_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CMsgSystemPerfDiagnosticInfo::_internal_battery_temp_c() const {
  return battery_temp_c_;
}
inline float CMsgSystemPerfDiagnosticInfo::battery_temp_c() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfDiagnosticInfo.battery_temp_c)
  return _internal_battery_temp_c();
}
inline void CMsgSystemPerfDiagnosticInfo::_internal_set_battery_temp_c(float value) {
  _has_bits_[0] |= 0x00000001u;
  battery_temp_c_ = value;
}
inline void CMsgSystemPerfDiagnosticInfo::set_battery_temp_c(float value) {
  _internal_set_battery_temp_c(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfDiagnosticInfo.battery_temp_c)
}

// -------------------------------------------------------------------

// CMsgSystemPerfLimits

// optional int32 cpu_governor_manual_min_mhz = 1;
inline bool CMsgSystemPerfLimits::_internal_has_cpu_governor_manual_min_mhz() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_cpu_governor_manual_min_mhz() const {
  return _internal_has_cpu_governor_manual_min_mhz();
}
inline void CMsgSystemPerfLimits::clear_cpu_governor_manual_min_mhz() {
  cpu_governor_manual_min_mhz_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgSystemPerfLimits::_internal_cpu_governor_manual_min_mhz() const {
  return cpu_governor_manual_min_mhz_;
}
inline int32_t CMsgSystemPerfLimits::cpu_governor_manual_min_mhz() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.cpu_governor_manual_min_mhz)
  return _internal_cpu_governor_manual_min_mhz();
}
inline void CMsgSystemPerfLimits::_internal_set_cpu_governor_manual_min_mhz(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  cpu_governor_manual_min_mhz_ = value;
}
inline void CMsgSystemPerfLimits::set_cpu_governor_manual_min_mhz(int32_t value) {
  _internal_set_cpu_governor_manual_min_mhz(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.cpu_governor_manual_min_mhz)
}

// optional int32 cpu_governor_manual_max_mhz = 2;
inline bool CMsgSystemPerfLimits::_internal_has_cpu_governor_manual_max_mhz() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_cpu_governor_manual_max_mhz() const {
  return _internal_has_cpu_governor_manual_max_mhz();
}
inline void CMsgSystemPerfLimits::clear_cpu_governor_manual_max_mhz() {
  cpu_governor_manual_max_mhz_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgSystemPerfLimits::_internal_cpu_governor_manual_max_mhz() const {
  return cpu_governor_manual_max_mhz_;
}
inline int32_t CMsgSystemPerfLimits::cpu_governor_manual_max_mhz() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.cpu_governor_manual_max_mhz)
  return _internal_cpu_governor_manual_max_mhz();
}
inline void CMsgSystemPerfLimits::_internal_set_cpu_governor_manual_max_mhz(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  cpu_governor_manual_max_mhz_ = value;
}
inline void CMsgSystemPerfLimits::set_cpu_governor_manual_max_mhz(int32_t value) {
  _internal_set_cpu_governor_manual_max_mhz(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.cpu_governor_manual_max_mhz)
}

// optional int32 fsr_sharpness_min = 3;
inline bool CMsgSystemPerfLimits::_internal_has_fsr_sharpness_min() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_fsr_sharpness_min() const {
  return _internal_has_fsr_sharpness_min();
}
inline void CMsgSystemPerfLimits::clear_fsr_sharpness_min() {
  fsr_sharpness_min_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgSystemPerfLimits::_internal_fsr_sharpness_min() const {
  return fsr_sharpness_min_;
}
inline int32_t CMsgSystemPerfLimits::fsr_sharpness_min() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.fsr_sharpness_min)
  return _internal_fsr_sharpness_min();
}
inline void CMsgSystemPerfLimits::_internal_set_fsr_sharpness_min(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  fsr_sharpness_min_ = value;
}
inline void CMsgSystemPerfLimits::set_fsr_sharpness_min(int32_t value) {
  _internal_set_fsr_sharpness_min(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.fsr_sharpness_min)
}

// optional int32 fsr_sharpness_max = 4;
inline bool CMsgSystemPerfLimits::_internal_has_fsr_sharpness_max() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_fsr_sharpness_max() const {
  return _internal_has_fsr_sharpness_max();
}
inline void CMsgSystemPerfLimits::clear_fsr_sharpness_max() {
  fsr_sharpness_max_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgSystemPerfLimits::_internal_fsr_sharpness_max() const {
  return fsr_sharpness_max_;
}
inline int32_t CMsgSystemPerfLimits::fsr_sharpness_max() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.fsr_sharpness_max)
  return _internal_fsr_sharpness_max();
}
inline void CMsgSystemPerfLimits::_internal_set_fsr_sharpness_max(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  fsr_sharpness_max_ = value;
}
inline void CMsgSystemPerfLimits::set_fsr_sharpness_max(int32_t value) {
  _internal_set_fsr_sharpness_max(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.fsr_sharpness_max)
}

// optional int32 gpu_performance_manual_min_mhz = 5;
inline bool CMsgSystemPerfLimits::_internal_has_gpu_performance_manual_min_mhz() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_gpu_performance_manual_min_mhz() const {
  return _internal_has_gpu_performance_manual_min_mhz();
}
inline void CMsgSystemPerfLimits::clear_gpu_performance_manual_min_mhz() {
  gpu_performance_manual_min_mhz_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgSystemPerfLimits::_internal_gpu_performance_manual_min_mhz() const {
  return gpu_performance_manual_min_mhz_;
}
inline int32_t CMsgSystemPerfLimits::gpu_performance_manual_min_mhz() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.gpu_performance_manual_min_mhz)
  return _internal_gpu_performance_manual_min_mhz();
}
inline void CMsgSystemPerfLimits::_internal_set_gpu_performance_manual_min_mhz(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  gpu_performance_manual_min_mhz_ = value;
}
inline void CMsgSystemPerfLimits::set_gpu_performance_manual_min_mhz(int32_t value) {
  _internal_set_gpu_performance_manual_min_mhz(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.gpu_performance_manual_min_mhz)
}

// optional int32 gpu_performance_manual_max_mhz = 6;
inline bool CMsgSystemPerfLimits::_internal_has_gpu_performance_manual_max_mhz() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_gpu_performance_manual_max_mhz() const {
  return _internal_has_gpu_performance_manual_max_mhz();
}
inline void CMsgSystemPerfLimits::clear_gpu_performance_manual_max_mhz() {
  gpu_performance_manual_max_mhz_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgSystemPerfLimits::_internal_gpu_performance_manual_max_mhz() const {
  return gpu_performance_manual_max_mhz_;
}
inline int32_t CMsgSystemPerfLimits::gpu_performance_manual_max_mhz() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.gpu_performance_manual_max_mhz)
  return _internal_gpu_performance_manual_max_mhz();
}
inline void CMsgSystemPerfLimits::_internal_set_gpu_performance_manual_max_mhz(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  gpu_performance_manual_max_mhz_ = value;
}
inline void CMsgSystemPerfLimits::set_gpu_performance_manual_max_mhz(int32_t value) {
  _internal_set_gpu_performance_manual_max_mhz(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.gpu_performance_manual_max_mhz)
}

// optional bool perf_overlay_is_standalone = 7;
inline bool CMsgSystemPerfLimits::_internal_has_perf_overlay_is_standalone() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_perf_overlay_is_standalone() const {
  return _internal_has_perf_overlay_is_standalone();
}
inline void CMsgSystemPerfLimits::clear_perf_overlay_is_standalone() {
  perf_overlay_is_standalone_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgSystemPerfLimits::_internal_perf_overlay_is_standalone() const {
  return perf_overlay_is_standalone_;
}
inline bool CMsgSystemPerfLimits::perf_overlay_is_standalone() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.perf_overlay_is_standalone)
  return _internal_perf_overlay_is_standalone();
}
inline void CMsgSystemPerfLimits::_internal_set_perf_overlay_is_standalone(bool value) {
  _has_bits_[0] |= 0x00000040u;
  perf_overlay_is_standalone_ = value;
}
inline void CMsgSystemPerfLimits::set_perf_overlay_is_standalone(bool value) {
  _internal_set_perf_overlay_is_standalone(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.perf_overlay_is_standalone)
}

// optional bool is_dynamic_vrs_available = 8;
inline bool CMsgSystemPerfLimits::_internal_has_is_dynamic_vrs_available() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_is_dynamic_vrs_available() const {
  return _internal_has_is_dynamic_vrs_available();
}
inline void CMsgSystemPerfLimits::clear_is_dynamic_vrs_available() {
  is_dynamic_vrs_available_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgSystemPerfLimits::_internal_is_dynamic_vrs_available() const {
  return is_dynamic_vrs_available_;
}
inline bool CMsgSystemPerfLimits::is_dynamic_vrs_available() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.is_dynamic_vrs_available)
  return _internal_is_dynamic_vrs_available();
}
inline void CMsgSystemPerfLimits::_internal_set_is_dynamic_vrs_available(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_dynamic_vrs_available_ = value;
}
inline void CMsgSystemPerfLimits::set_is_dynamic_vrs_available(bool value) {
  _internal_set_is_dynamic_vrs_available(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.is_dynamic_vrs_available)
}

// optional bool is_manual_display_refresh_rate_available = 9;
inline bool CMsgSystemPerfLimits::_internal_has_is_manual_display_refresh_rate_available() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_is_manual_display_refresh_rate_available() const {
  return _internal_has_is_manual_display_refresh_rate_available();
}
inline void CMsgSystemPerfLimits::clear_is_manual_display_refresh_rate_available() {
  is_manual_display_refresh_rate_available_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgSystemPerfLimits::_internal_is_manual_display_refresh_rate_available() const {
  return is_manual_display_refresh_rate_available_;
}
inline bool CMsgSystemPerfLimits::is_manual_display_refresh_rate_available() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.is_manual_display_refresh_rate_available)
  return _internal_is_manual_display_refresh_rate_available();
}
inline void CMsgSystemPerfLimits::_internal_set_is_manual_display_refresh_rate_available(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_manual_display_refresh_rate_available_ = value;
}
inline void CMsgSystemPerfLimits::set_is_manual_display_refresh_rate_available(bool value) {
  _internal_set_is_manual_display_refresh_rate_available(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.is_manual_display_refresh_rate_available)
}

// repeated .EGPUPerformanceLevel gpu_performance_levels_available = 10;
inline int CMsgSystemPerfLimits::_internal_gpu_performance_levels_available_size() const {
  return gpu_performance_levels_available_.size();
}
inline int CMsgSystemPerfLimits::gpu_performance_levels_available_size() const {
  return _internal_gpu_performance_levels_available_size();
}
inline void CMsgSystemPerfLimits::clear_gpu_performance_levels_available() {
  gpu_performance_levels_available_.Clear();
}
inline ::EGPUPerformanceLevel CMsgSystemPerfLimits::_internal_gpu_performance_levels_available(int index) const {
  return static_cast< ::EGPUPerformanceLevel >(gpu_performance_levels_available_.Get(index));
}
inline ::EGPUPerformanceLevel CMsgSystemPerfLimits::gpu_performance_levels_available(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.gpu_performance_levels_available)
  return _internal_gpu_performance_levels_available(index);
}
inline void CMsgSystemPerfLimits::set_gpu_performance_levels_available(int index, ::EGPUPerformanceLevel value) {
  assert(::EGPUPerformanceLevel_IsValid(value));
  gpu_performance_levels_available_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.gpu_performance_levels_available)
}
inline void CMsgSystemPerfLimits::_internal_add_gpu_performance_levels_available(::EGPUPerformanceLevel value) {
  assert(::EGPUPerformanceLevel_IsValid(value));
  gpu_performance_levels_available_.Add(value);
}
inline void CMsgSystemPerfLimits::add_gpu_performance_levels_available(::EGPUPerformanceLevel value) {
  _internal_add_gpu_performance_levels_available(value);
  // @@protoc_insertion_point(field_add:CMsgSystemPerfLimits.gpu_performance_levels_available)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CMsgSystemPerfLimits::gpu_performance_levels_available() const {
  // @@protoc_insertion_point(field_list:CMsgSystemPerfLimits.gpu_performance_levels_available)
  return gpu_performance_levels_available_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgSystemPerfLimits::_internal_mutable_gpu_performance_levels_available() {
  return &gpu_performance_levels_available_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgSystemPerfLimits::mutable_gpu_performance_levels_available() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemPerfLimits.gpu_performance_levels_available)
  return _internal_mutable_gpu_performance_levels_available();
}

// optional int32 display_refresh_manual_hz_min = 11;
inline bool CMsgSystemPerfLimits::_internal_has_display_refresh_manual_hz_min() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_display_refresh_manual_hz_min() const {
  return _internal_has_display_refresh_manual_hz_min();
}
inline void CMsgSystemPerfLimits::clear_display_refresh_manual_hz_min() {
  display_refresh_manual_hz_min_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t CMsgSystemPerfLimits::_internal_display_refresh_manual_hz_min() const {
  return display_refresh_manual_hz_min_;
}
inline int32_t CMsgSystemPerfLimits::display_refresh_manual_hz_min() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.display_refresh_manual_hz_min)
  return _internal_display_refresh_manual_hz_min();
}
inline void CMsgSystemPerfLimits::_internal_set_display_refresh_manual_hz_min(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  display_refresh_manual_hz_min_ = value;
}
inline void CMsgSystemPerfLimits::set_display_refresh_manual_hz_min(int32_t value) {
  _internal_set_display_refresh_manual_hz_min(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.display_refresh_manual_hz_min)
}

// optional int32 display_refresh_manual_hz_max = 12;
inline bool CMsgSystemPerfLimits::_internal_has_display_refresh_manual_hz_max() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_display_refresh_manual_hz_max() const {
  return _internal_has_display_refresh_manual_hz_max();
}
inline void CMsgSystemPerfLimits::clear_display_refresh_manual_hz_max() {
  display_refresh_manual_hz_max_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline int32_t CMsgSystemPerfLimits::_internal_display_refresh_manual_hz_max() const {
  return display_refresh_manual_hz_max_;
}
inline int32_t CMsgSystemPerfLimits::display_refresh_manual_hz_max() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.display_refresh_manual_hz_max)
  return _internal_display_refresh_manual_hz_max();
}
inline void CMsgSystemPerfLimits::_internal_set_display_refresh_manual_hz_max(int32_t value) {
  _has_bits_[0] |= 0x00000800u;
  display_refresh_manual_hz_max_ = value;
}
inline void CMsgSystemPerfLimits::set_display_refresh_manual_hz_max(int32_t value) {
  _internal_set_display_refresh_manual_hz_max(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.display_refresh_manual_hz_max)
}

// repeated int32 fps_limit_options = 13;
inline int CMsgSystemPerfLimits::_internal_fps_limit_options_size() const {
  return fps_limit_options_.size();
}
inline int CMsgSystemPerfLimits::fps_limit_options_size() const {
  return _internal_fps_limit_options_size();
}
inline void CMsgSystemPerfLimits::clear_fps_limit_options() {
  fps_limit_options_.Clear();
}
inline int32_t CMsgSystemPerfLimits::_internal_fps_limit_options(int index) const {
  return fps_limit_options_.Get(index);
}
inline int32_t CMsgSystemPerfLimits::fps_limit_options(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.fps_limit_options)
  return _internal_fps_limit_options(index);
}
inline void CMsgSystemPerfLimits::set_fps_limit_options(int index, int32_t value) {
  fps_limit_options_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.fps_limit_options)
}
inline void CMsgSystemPerfLimits::_internal_add_fps_limit_options(int32_t value) {
  fps_limit_options_.Add(value);
}
inline void CMsgSystemPerfLimits::add_fps_limit_options(int32_t value) {
  _internal_add_fps_limit_options(value);
  // @@protoc_insertion_point(field_add:CMsgSystemPerfLimits.fps_limit_options)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgSystemPerfLimits::_internal_fps_limit_options() const {
  return fps_limit_options_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgSystemPerfLimits::fps_limit_options() const {
  // @@protoc_insertion_point(field_list:CMsgSystemPerfLimits.fps_limit_options)
  return _internal_fps_limit_options();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgSystemPerfLimits::_internal_mutable_fps_limit_options() {
  return &fps_limit_options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgSystemPerfLimits::mutable_fps_limit_options() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemPerfLimits.fps_limit_options)
  return _internal_mutable_fps_limit_options();
}

// optional int32 tdp_limit_min = 14;
inline bool CMsgSystemPerfLimits::_internal_has_tdp_limit_min() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_tdp_limit_min() const {
  return _internal_has_tdp_limit_min();
}
inline void CMsgSystemPerfLimits::clear_tdp_limit_min() {
  tdp_limit_min_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t CMsgSystemPerfLimits::_internal_tdp_limit_min() const {
  return tdp_limit_min_;
}
inline int32_t CMsgSystemPerfLimits::tdp_limit_min() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.tdp_limit_min)
  return _internal_tdp_limit_min();
}
inline void CMsgSystemPerfLimits::_internal_set_tdp_limit_min(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  tdp_limit_min_ = value;
}
inline void CMsgSystemPerfLimits::set_tdp_limit_min(int32_t value) {
  _internal_set_tdp_limit_min(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.tdp_limit_min)
}

// optional int32 tdp_limit_max = 15;
inline bool CMsgSystemPerfLimits::_internal_has_tdp_limit_max() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_tdp_limit_max() const {
  return _internal_has_tdp_limit_max();
}
inline void CMsgSystemPerfLimits::clear_tdp_limit_max() {
  tdp_limit_max_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline int32_t CMsgSystemPerfLimits::_internal_tdp_limit_max() const {
  return tdp_limit_max_;
}
inline int32_t CMsgSystemPerfLimits::tdp_limit_max() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.tdp_limit_max)
  return _internal_tdp_limit_max();
}
inline void CMsgSystemPerfLimits::_internal_set_tdp_limit_max(int32_t value) {
  _has_bits_[0] |= 0x00002000u;
  tdp_limit_max_ = value;
}
inline void CMsgSystemPerfLimits::set_tdp_limit_max(int32_t value) {
  _internal_set_tdp_limit_max(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.tdp_limit_max)
}

// optional bool is_nis_supported = 16;
inline bool CMsgSystemPerfLimits::_internal_has_is_nis_supported() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_is_nis_supported() const {
  return _internal_has_is_nis_supported();
}
inline void CMsgSystemPerfLimits::clear_is_nis_supported() {
  is_nis_supported_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgSystemPerfLimits::_internal_is_nis_supported() const {
  return is_nis_supported_;
}
inline bool CMsgSystemPerfLimits::is_nis_supported() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.is_nis_supported)
  return _internal_is_nis_supported();
}
inline void CMsgSystemPerfLimits::_internal_set_is_nis_supported(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_nis_supported_ = value;
}
inline void CMsgSystemPerfLimits::set_is_nis_supported(bool value) {
  _internal_set_is_nis_supported(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.is_nis_supported)
}

// optional int32 nis_sharpness_min = 17;
inline bool CMsgSystemPerfLimits::_internal_has_nis_sharpness_min() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_nis_sharpness_min() const {
  return _internal_has_nis_sharpness_min();
}
inline void CMsgSystemPerfLimits::clear_nis_sharpness_min() {
  nis_sharpness_min_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline int32_t CMsgSystemPerfLimits::_internal_nis_sharpness_min() const {
  return nis_sharpness_min_;
}
inline int32_t CMsgSystemPerfLimits::nis_sharpness_min() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.nis_sharpness_min)
  return _internal_nis_sharpness_min();
}
inline void CMsgSystemPerfLimits::_internal_set_nis_sharpness_min(int32_t value) {
  _has_bits_[0] |= 0x00004000u;
  nis_sharpness_min_ = value;
}
inline void CMsgSystemPerfLimits::set_nis_sharpness_min(int32_t value) {
  _internal_set_nis_sharpness_min(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.nis_sharpness_min)
}

// optional int32 nis_sharpness_max = 18;
inline bool CMsgSystemPerfLimits::_internal_has_nis_sharpness_max() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_nis_sharpness_max() const {
  return _internal_has_nis_sharpness_max();
}
inline void CMsgSystemPerfLimits::clear_nis_sharpness_max() {
  nis_sharpness_max_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline int32_t CMsgSystemPerfLimits::_internal_nis_sharpness_max() const {
  return nis_sharpness_max_;
}
inline int32_t CMsgSystemPerfLimits::nis_sharpness_max() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.nis_sharpness_max)
  return _internal_nis_sharpness_max();
}
inline void CMsgSystemPerfLimits::_internal_set_nis_sharpness_max(int32_t value) {
  _has_bits_[0] |= 0x00008000u;
  nis_sharpness_max_ = value;
}
inline void CMsgSystemPerfLimits::set_nis_sharpness_max(int32_t value) {
  _internal_set_nis_sharpness_max(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.nis_sharpness_max)
}

// optional int32 display_external_refresh_manual_hz_min = 19;
inline bool CMsgSystemPerfLimits::_internal_has_display_external_refresh_manual_hz_min() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_display_external_refresh_manual_hz_min() const {
  return _internal_has_display_external_refresh_manual_hz_min();
}
inline void CMsgSystemPerfLimits::clear_display_external_refresh_manual_hz_min() {
  display_external_refresh_manual_hz_min_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline int32_t CMsgSystemPerfLimits::_internal_display_external_refresh_manual_hz_min() const {
  return display_external_refresh_manual_hz_min_;
}
inline int32_t CMsgSystemPerfLimits::display_external_refresh_manual_hz_min() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.display_external_refresh_manual_hz_min)
  return _internal_display_external_refresh_manual_hz_min();
}
inline void CMsgSystemPerfLimits::_internal_set_display_external_refresh_manual_hz_min(int32_t value) {
  _has_bits_[0] |= 0x00010000u;
  display_external_refresh_manual_hz_min_ = value;
}
inline void CMsgSystemPerfLimits::set_display_external_refresh_manual_hz_min(int32_t value) {
  _internal_set_display_external_refresh_manual_hz_min(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.display_external_refresh_manual_hz_min)
}

// optional int32 display_external_refresh_manual_hz_max = 20;
inline bool CMsgSystemPerfLimits::_internal_has_display_external_refresh_manual_hz_max() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_display_external_refresh_manual_hz_max() const {
  return _internal_has_display_external_refresh_manual_hz_max();
}
inline void CMsgSystemPerfLimits::clear_display_external_refresh_manual_hz_max() {
  display_external_refresh_manual_hz_max_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline int32_t CMsgSystemPerfLimits::_internal_display_external_refresh_manual_hz_max() const {
  return display_external_refresh_manual_hz_max_;
}
inline int32_t CMsgSystemPerfLimits::display_external_refresh_manual_hz_max() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.display_external_refresh_manual_hz_max)
  return _internal_display_external_refresh_manual_hz_max();
}
inline void CMsgSystemPerfLimits::_internal_set_display_external_refresh_manual_hz_max(int32_t value) {
  _has_bits_[0] |= 0x00020000u;
  display_external_refresh_manual_hz_max_ = value;
}
inline void CMsgSystemPerfLimits::set_display_external_refresh_manual_hz_max(int32_t value) {
  _internal_set_display_external_refresh_manual_hz_max(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.display_external_refresh_manual_hz_max)
}

// repeated int32 fps_limit_options_external = 21;
inline int CMsgSystemPerfLimits::_internal_fps_limit_options_external_size() const {
  return fps_limit_options_external_.size();
}
inline int CMsgSystemPerfLimits::fps_limit_options_external_size() const {
  return _internal_fps_limit_options_external_size();
}
inline void CMsgSystemPerfLimits::clear_fps_limit_options_external() {
  fps_limit_options_external_.Clear();
}
inline int32_t CMsgSystemPerfLimits::_internal_fps_limit_options_external(int index) const {
  return fps_limit_options_external_.Get(index);
}
inline int32_t CMsgSystemPerfLimits::fps_limit_options_external(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.fps_limit_options_external)
  return _internal_fps_limit_options_external(index);
}
inline void CMsgSystemPerfLimits::set_fps_limit_options_external(int index, int32_t value) {
  fps_limit_options_external_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.fps_limit_options_external)
}
inline void CMsgSystemPerfLimits::_internal_add_fps_limit_options_external(int32_t value) {
  fps_limit_options_external_.Add(value);
}
inline void CMsgSystemPerfLimits::add_fps_limit_options_external(int32_t value) {
  _internal_add_fps_limit_options_external(value);
  // @@protoc_insertion_point(field_add:CMsgSystemPerfLimits.fps_limit_options_external)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgSystemPerfLimits::_internal_fps_limit_options_external() const {
  return fps_limit_options_external_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgSystemPerfLimits::fps_limit_options_external() const {
  // @@protoc_insertion_point(field_list:CMsgSystemPerfLimits.fps_limit_options_external)
  return _internal_fps_limit_options_external();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgSystemPerfLimits::_internal_mutable_fps_limit_options_external() {
  return &fps_limit_options_external_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgSystemPerfLimits::mutable_fps_limit_options_external() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemPerfLimits.fps_limit_options_external)
  return _internal_mutable_fps_limit_options_external();
}

// optional bool is_tearing_supported = 22;
inline bool CMsgSystemPerfLimits::_internal_has_is_tearing_supported() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_is_tearing_supported() const {
  return _internal_has_is_tearing_supported();
}
inline void CMsgSystemPerfLimits::clear_is_tearing_supported() {
  is_tearing_supported_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CMsgSystemPerfLimits::_internal_is_tearing_supported() const {
  return is_tearing_supported_;
}
inline bool CMsgSystemPerfLimits::is_tearing_supported() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.is_tearing_supported)
  return _internal_is_tearing_supported();
}
inline void CMsgSystemPerfLimits::_internal_set_is_tearing_supported(bool value) {
  _has_bits_[0] |= 0x00040000u;
  is_tearing_supported_ = value;
}
inline void CMsgSystemPerfLimits::set_is_tearing_supported(bool value) {
  _internal_set_is_tearing_supported(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.is_tearing_supported)
}

// optional bool is_vrr_supported = 23;
inline bool CMsgSystemPerfLimits::_internal_has_is_vrr_supported() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_is_vrr_supported() const {
  return _internal_has_is_vrr_supported();
}
inline void CMsgSystemPerfLimits::clear_is_vrr_supported() {
  is_vrr_supported_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool CMsgSystemPerfLimits::_internal_is_vrr_supported() const {
  return is_vrr_supported_;
}
inline bool CMsgSystemPerfLimits::is_vrr_supported() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.is_vrr_supported)
  return _internal_is_vrr_supported();
}
inline void CMsgSystemPerfLimits::_internal_set_is_vrr_supported(bool value) {
  _has_bits_[0] |= 0x00080000u;
  is_vrr_supported_ = value;
}
inline void CMsgSystemPerfLimits::set_is_vrr_supported(bool value) {
  _internal_set_is_vrr_supported(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.is_vrr_supported)
}

// optional bool is_dynamic_refresh_rate_in_steam_supported = 24;
inline bool CMsgSystemPerfLimits::_internal_has_is_dynamic_refresh_rate_in_steam_supported() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_is_dynamic_refresh_rate_in_steam_supported() const {
  return _internal_has_is_dynamic_refresh_rate_in_steam_supported();
}
inline void CMsgSystemPerfLimits::clear_is_dynamic_refresh_rate_in_steam_supported() {
  is_dynamic_refresh_rate_in_steam_supported_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool CMsgSystemPerfLimits::_internal_is_dynamic_refresh_rate_in_steam_supported() const {
  return is_dynamic_refresh_rate_in_steam_supported_;
}
inline bool CMsgSystemPerfLimits::is_dynamic_refresh_rate_in_steam_supported() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.is_dynamic_refresh_rate_in_steam_supported)
  return _internal_is_dynamic_refresh_rate_in_steam_supported();
}
inline void CMsgSystemPerfLimits::_internal_set_is_dynamic_refresh_rate_in_steam_supported(bool value) {
  _has_bits_[0] |= 0x00100000u;
  is_dynamic_refresh_rate_in_steam_supported_ = value;
}
inline void CMsgSystemPerfLimits::set_is_dynamic_refresh_rate_in_steam_supported(bool value) {
  _internal_set_is_dynamic_refresh_rate_in_steam_supported(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.is_dynamic_refresh_rate_in_steam_supported)
}

// optional bool is_split_scaling_and_filtering_supported = 25;
inline bool CMsgSystemPerfLimits::_internal_has_is_split_scaling_and_filtering_supported() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_is_split_scaling_and_filtering_supported() const {
  return _internal_has_is_split_scaling_and_filtering_supported();
}
inline void CMsgSystemPerfLimits::clear_is_split_scaling_and_filtering_supported() {
  is_split_scaling_and_filtering_supported_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool CMsgSystemPerfLimits::_internal_is_split_scaling_and_filtering_supported() const {
  return is_split_scaling_and_filtering_supported_;
}
inline bool CMsgSystemPerfLimits::is_split_scaling_and_filtering_supported() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.is_split_scaling_and_filtering_supported)
  return _internal_is_split_scaling_and_filtering_supported();
}
inline void CMsgSystemPerfLimits::_internal_set_is_split_scaling_and_filtering_supported(bool value) {
  _has_bits_[0] |= 0x00200000u;
  is_split_scaling_and_filtering_supported_ = value;
}
inline void CMsgSystemPerfLimits::set_is_split_scaling_and_filtering_supported(bool value) {
  _internal_set_is_split_scaling_and_filtering_supported(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.is_split_scaling_and_filtering_supported)
}

// repeated .ESplitScalingFilter split_scaling_filters_available = 26;
inline int CMsgSystemPerfLimits::_internal_split_scaling_filters_available_size() const {
  return split_scaling_filters_available_.size();
}
inline int CMsgSystemPerfLimits::split_scaling_filters_available_size() const {
  return _internal_split_scaling_filters_available_size();
}
inline void CMsgSystemPerfLimits::clear_split_scaling_filters_available() {
  split_scaling_filters_available_.Clear();
}
inline ::ESplitScalingFilter CMsgSystemPerfLimits::_internal_split_scaling_filters_available(int index) const {
  return static_cast< ::ESplitScalingFilter >(split_scaling_filters_available_.Get(index));
}
inline ::ESplitScalingFilter CMsgSystemPerfLimits::split_scaling_filters_available(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.split_scaling_filters_available)
  return _internal_split_scaling_filters_available(index);
}
inline void CMsgSystemPerfLimits::set_split_scaling_filters_available(int index, ::ESplitScalingFilter value) {
  assert(::ESplitScalingFilter_IsValid(value));
  split_scaling_filters_available_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.split_scaling_filters_available)
}
inline void CMsgSystemPerfLimits::_internal_add_split_scaling_filters_available(::ESplitScalingFilter value) {
  assert(::ESplitScalingFilter_IsValid(value));
  split_scaling_filters_available_.Add(value);
}
inline void CMsgSystemPerfLimits::add_split_scaling_filters_available(::ESplitScalingFilter value) {
  _internal_add_split_scaling_filters_available(value);
  // @@protoc_insertion_point(field_add:CMsgSystemPerfLimits.split_scaling_filters_available)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CMsgSystemPerfLimits::split_scaling_filters_available() const {
  // @@protoc_insertion_point(field_list:CMsgSystemPerfLimits.split_scaling_filters_available)
  return split_scaling_filters_available_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgSystemPerfLimits::_internal_mutable_split_scaling_filters_available() {
  return &split_scaling_filters_available_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgSystemPerfLimits::mutable_split_scaling_filters_available() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemPerfLimits.split_scaling_filters_available)
  return _internal_mutable_split_scaling_filters_available();
}

// repeated .ESplitScalingScaler split_scaling_scalers_available = 27;
inline int CMsgSystemPerfLimits::_internal_split_scaling_scalers_available_size() const {
  return split_scaling_scalers_available_.size();
}
inline int CMsgSystemPerfLimits::split_scaling_scalers_available_size() const {
  return _internal_split_scaling_scalers_available_size();
}
inline void CMsgSystemPerfLimits::clear_split_scaling_scalers_available() {
  split_scaling_scalers_available_.Clear();
}
inline ::ESplitScalingScaler CMsgSystemPerfLimits::_internal_split_scaling_scalers_available(int index) const {
  return static_cast< ::ESplitScalingScaler >(split_scaling_scalers_available_.Get(index));
}
inline ::ESplitScalingScaler CMsgSystemPerfLimits::split_scaling_scalers_available(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.split_scaling_scalers_available)
  return _internal_split_scaling_scalers_available(index);
}
inline void CMsgSystemPerfLimits::set_split_scaling_scalers_available(int index, ::ESplitScalingScaler value) {
  assert(::ESplitScalingScaler_IsValid(value));
  split_scaling_scalers_available_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.split_scaling_scalers_available)
}
inline void CMsgSystemPerfLimits::_internal_add_split_scaling_scalers_available(::ESplitScalingScaler value) {
  assert(::ESplitScalingScaler_IsValid(value));
  split_scaling_scalers_available_.Add(value);
}
inline void CMsgSystemPerfLimits::add_split_scaling_scalers_available(::ESplitScalingScaler value) {
  _internal_add_split_scaling_scalers_available(value);
  // @@protoc_insertion_point(field_add:CMsgSystemPerfLimits.split_scaling_scalers_available)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CMsgSystemPerfLimits::split_scaling_scalers_available() const {
  // @@protoc_insertion_point(field_list:CMsgSystemPerfLimits.split_scaling_scalers_available)
  return split_scaling_scalers_available_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgSystemPerfLimits::_internal_mutable_split_scaling_scalers_available() {
  return &split_scaling_scalers_available_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgSystemPerfLimits::mutable_split_scaling_scalers_available() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemPerfLimits.split_scaling_scalers_available)
  return _internal_mutable_split_scaling_scalers_available();
}

// optional bool is_hdr_supported = 28;
inline bool CMsgSystemPerfLimits::_internal_has_is_hdr_supported() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_is_hdr_supported() const {
  return _internal_has_is_hdr_supported();
}
inline void CMsgSystemPerfLimits::clear_is_hdr_supported() {
  is_hdr_supported_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool CMsgSystemPerfLimits::_internal_is_hdr_supported() const {
  return is_hdr_supported_;
}
inline bool CMsgSystemPerfLimits::is_hdr_supported() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.is_hdr_supported)
  return _internal_is_hdr_supported();
}
inline void CMsgSystemPerfLimits::_internal_set_is_hdr_supported(bool value) {
  _has_bits_[0] |= 0x00400000u;
  is_hdr_supported_ = value;
}
inline void CMsgSystemPerfLimits::set_is_hdr_supported(bool value) {
  _internal_set_is_hdr_supported(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.is_hdr_supported)
}

// optional int32 display_refresh_manual_hz_oc_max = 29;
inline bool CMsgSystemPerfLimits::_internal_has_display_refresh_manual_hz_oc_max() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgSystemPerfLimits::has_display_refresh_manual_hz_oc_max() const {
  return _internal_has_display_refresh_manual_hz_oc_max();
}
inline void CMsgSystemPerfLimits::clear_display_refresh_manual_hz_oc_max() {
  display_refresh_manual_hz_oc_max_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline int32_t CMsgSystemPerfLimits::_internal_display_refresh_manual_hz_oc_max() const {
  return display_refresh_manual_hz_oc_max_;
}
inline int32_t CMsgSystemPerfLimits::display_refresh_manual_hz_oc_max() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfLimits.display_refresh_manual_hz_oc_max)
  return _internal_display_refresh_manual_hz_oc_max();
}
inline void CMsgSystemPerfLimits::_internal_set_display_refresh_manual_hz_oc_max(int32_t value) {
  _has_bits_[0] |= 0x00800000u;
  display_refresh_manual_hz_oc_max_ = value;
}
inline void CMsgSystemPerfLimits::set_display_refresh_manual_hz_oc_max(int32_t value) {
  _internal_set_display_refresh_manual_hz_oc_max(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfLimits.display_refresh_manual_hz_oc_max)
}

// -------------------------------------------------------------------

// CMsgSystemPerfSettingsGlobal

// optional float diagnostic_update_rate = 1;
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_diagnostic_update_rate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_diagnostic_update_rate() const {
  return _internal_has_diagnostic_update_rate();
}
inline void CMsgSystemPerfSettingsGlobal::clear_diagnostic_update_rate() {
  diagnostic_update_rate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CMsgSystemPerfSettingsGlobal::_internal_diagnostic_update_rate() const {
  return diagnostic_update_rate_;
}
inline float CMsgSystemPerfSettingsGlobal::diagnostic_update_rate() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.diagnostic_update_rate)
  return _internal_diagnostic_update_rate();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_diagnostic_update_rate(float value) {
  _has_bits_[0] |= 0x00000001u;
  diagnostic_update_rate_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_diagnostic_update_rate(float value) {
  _internal_set_diagnostic_update_rate(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.diagnostic_update_rate)
}

// optional .ESystemServiceState system_trace_service_state = 2 [default = k_ESystemServiceState_Unavailable];
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_system_trace_service_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_system_trace_service_state() const {
  return _internal_has_system_trace_service_state();
}
inline void CMsgSystemPerfSettingsGlobal::clear_system_trace_service_state() {
  system_trace_service_state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ESystemServiceState CMsgSystemPerfSettingsGlobal::_internal_system_trace_service_state() const {
  return static_cast< ::ESystemServiceState >(system_trace_service_state_);
}
inline ::ESystemServiceState CMsgSystemPerfSettingsGlobal::system_trace_service_state() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.system_trace_service_state)
  return _internal_system_trace_service_state();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_system_trace_service_state(::ESystemServiceState value) {
  assert(::ESystemServiceState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  system_trace_service_state_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_system_trace_service_state(::ESystemServiceState value) {
  _internal_set_system_trace_service_state(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.system_trace_service_state)
}

// optional .ESystemServiceState graphics_profiling_service_state = 3 [default = k_ESystemServiceState_Unavailable];
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_graphics_profiling_service_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_graphics_profiling_service_state() const {
  return _internal_has_graphics_profiling_service_state();
}
inline void CMsgSystemPerfSettingsGlobal::clear_graphics_profiling_service_state() {
  graphics_profiling_service_state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ESystemServiceState CMsgSystemPerfSettingsGlobal::_internal_graphics_profiling_service_state() const {
  return static_cast< ::ESystemServiceState >(graphics_profiling_service_state_);
}
inline ::ESystemServiceState CMsgSystemPerfSettingsGlobal::graphics_profiling_service_state() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.graphics_profiling_service_state)
  return _internal_graphics_profiling_service_state();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_graphics_profiling_service_state(::ESystemServiceState value) {
  assert(::ESystemServiceState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  graphics_profiling_service_state_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_graphics_profiling_service_state(::ESystemServiceState value) {
  _internal_set_graphics_profiling_service_state(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.graphics_profiling_service_state)
}

// optional .ESystemServiceState perf_overlay_service_state = 4 [default = k_ESystemServiceState_Unavailable];
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_perf_overlay_service_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_perf_overlay_service_state() const {
  return _internal_has_perf_overlay_service_state();
}
inline void CMsgSystemPerfSettingsGlobal::clear_perf_overlay_service_state() {
  perf_overlay_service_state_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ESystemServiceState CMsgSystemPerfSettingsGlobal::_internal_perf_overlay_service_state() const {
  return static_cast< ::ESystemServiceState >(perf_overlay_service_state_);
}
inline ::ESystemServiceState CMsgSystemPerfSettingsGlobal::perf_overlay_service_state() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.perf_overlay_service_state)
  return _internal_perf_overlay_service_state();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_perf_overlay_service_state(::ESystemServiceState value) {
  assert(::ESystemServiceState_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  perf_overlay_service_state_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_perf_overlay_service_state(::ESystemServiceState value) {
  _internal_set_perf_overlay_service_state(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.perf_overlay_service_state)
}

// optional .EGraphicsPerfOverlayLevel perf_overlay_level = 5 [default = k_EGraphicsPerfOverlayLevel_Hidden];
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_perf_overlay_level() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_perf_overlay_level() const {
  return _internal_has_perf_overlay_level();
}
inline void CMsgSystemPerfSettingsGlobal::clear_perf_overlay_level() {
  perf_overlay_level_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::EGraphicsPerfOverlayLevel CMsgSystemPerfSettingsGlobal::_internal_perf_overlay_level() const {
  return static_cast< ::EGraphicsPerfOverlayLevel >(perf_overlay_level_);
}
inline ::EGraphicsPerfOverlayLevel CMsgSystemPerfSettingsGlobal::perf_overlay_level() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.perf_overlay_level)
  return _internal_perf_overlay_level();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_perf_overlay_level(::EGraphicsPerfOverlayLevel value) {
  assert(::EGraphicsPerfOverlayLevel_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  perf_overlay_level_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_perf_overlay_level(::EGraphicsPerfOverlayLevel value) {
  _internal_set_perf_overlay_level(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.perf_overlay_level)
}

// optional bool is_show_perf_overlay_over_steam_enabled = 6;
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_is_show_perf_overlay_over_steam_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_is_show_perf_overlay_over_steam_enabled() const {
  return _internal_has_is_show_perf_overlay_over_steam_enabled();
}
inline void CMsgSystemPerfSettingsGlobal::clear_is_show_perf_overlay_over_steam_enabled() {
  is_show_perf_overlay_over_steam_enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgSystemPerfSettingsGlobal::_internal_is_show_perf_overlay_over_steam_enabled() const {
  return is_show_perf_overlay_over_steam_enabled_;
}
inline bool CMsgSystemPerfSettingsGlobal::is_show_perf_overlay_over_steam_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.is_show_perf_overlay_over_steam_enabled)
  return _internal_is_show_perf_overlay_over_steam_enabled();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_is_show_perf_overlay_over_steam_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_show_perf_overlay_over_steam_enabled_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_is_show_perf_overlay_over_steam_enabled(bool value) {
  _internal_set_is_show_perf_overlay_over_steam_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.is_show_perf_overlay_over_steam_enabled)
}

// optional bool is_advanced_settings_enabled = 7;
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_is_advanced_settings_enabled() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_is_advanced_settings_enabled() const {
  return _internal_has_is_advanced_settings_enabled();
}
inline void CMsgSystemPerfSettingsGlobal::clear_is_advanced_settings_enabled() {
  is_advanced_settings_enabled_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgSystemPerfSettingsGlobal::_internal_is_advanced_settings_enabled() const {
  return is_advanced_settings_enabled_;
}
inline bool CMsgSystemPerfSettingsGlobal::is_advanced_settings_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.is_advanced_settings_enabled)
  return _internal_is_advanced_settings_enabled();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_is_advanced_settings_enabled(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_advanced_settings_enabled_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_is_advanced_settings_enabled(bool value) {
  _internal_set_is_advanced_settings_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.is_advanced_settings_enabled)
}

// optional bool allow_external_display_refresh_control = 8;
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_allow_external_display_refresh_control() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_allow_external_display_refresh_control() const {
  return _internal_has_allow_external_display_refresh_control();
}
inline void CMsgSystemPerfSettingsGlobal::clear_allow_external_display_refresh_control() {
  allow_external_display_refresh_control_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgSystemPerfSettingsGlobal::_internal_allow_external_display_refresh_control() const {
  return allow_external_display_refresh_control_;
}
inline bool CMsgSystemPerfSettingsGlobal::allow_external_display_refresh_control() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.allow_external_display_refresh_control)
  return _internal_allow_external_display_refresh_control();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_allow_external_display_refresh_control(bool value) {
  _has_bits_[0] |= 0x00000080u;
  allow_external_display_refresh_control_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_allow_external_display_refresh_control(bool value) {
  _internal_set_allow_external_display_refresh_control(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.allow_external_display_refresh_control)
}

// optional bool is_hdr_enabled = 9;
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_is_hdr_enabled() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_is_hdr_enabled() const {
  return _internal_has_is_hdr_enabled();
}
inline void CMsgSystemPerfSettingsGlobal::clear_is_hdr_enabled() {
  is_hdr_enabled_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgSystemPerfSettingsGlobal::_internal_is_hdr_enabled() const {
  return is_hdr_enabled_;
}
inline bool CMsgSystemPerfSettingsGlobal::is_hdr_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.is_hdr_enabled)
  return _internal_is_hdr_enabled();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_is_hdr_enabled(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_hdr_enabled_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_is_hdr_enabled(bool value) {
  _internal_set_is_hdr_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.is_hdr_enabled)
}

// optional .EHDRToneMapOperator hdr_on_sdr_tonemap_operator = 12 [default = k_EHDRToneMapOperator_Invalid];
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_hdr_on_sdr_tonemap_operator() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_hdr_on_sdr_tonemap_operator() const {
  return _internal_has_hdr_on_sdr_tonemap_operator();
}
inline void CMsgSystemPerfSettingsGlobal::clear_hdr_on_sdr_tonemap_operator() {
  hdr_on_sdr_tonemap_operator_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::EHDRToneMapOperator CMsgSystemPerfSettingsGlobal::_internal_hdr_on_sdr_tonemap_operator() const {
  return static_cast< ::EHDRToneMapOperator >(hdr_on_sdr_tonemap_operator_);
}
inline ::EHDRToneMapOperator CMsgSystemPerfSettingsGlobal::hdr_on_sdr_tonemap_operator() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.hdr_on_sdr_tonemap_operator)
  return _internal_hdr_on_sdr_tonemap_operator();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_hdr_on_sdr_tonemap_operator(::EHDRToneMapOperator value) {
  assert(::EHDRToneMapOperator_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  hdr_on_sdr_tonemap_operator_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_hdr_on_sdr_tonemap_operator(::EHDRToneMapOperator value) {
  _internal_set_hdr_on_sdr_tonemap_operator(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.hdr_on_sdr_tonemap_operator)
}

// optional bool is_hdr_debug_heatmap_enabled = 13;
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_is_hdr_debug_heatmap_enabled() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_is_hdr_debug_heatmap_enabled() const {
  return _internal_has_is_hdr_debug_heatmap_enabled();
}
inline void CMsgSystemPerfSettingsGlobal::clear_is_hdr_debug_heatmap_enabled() {
  is_hdr_debug_heatmap_enabled_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgSystemPerfSettingsGlobal::_internal_is_hdr_debug_heatmap_enabled() const {
  return is_hdr_debug_heatmap_enabled_;
}
inline bool CMsgSystemPerfSettingsGlobal::is_hdr_debug_heatmap_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.is_hdr_debug_heatmap_enabled)
  return _internal_is_hdr_debug_heatmap_enabled();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_is_hdr_debug_heatmap_enabled(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_hdr_debug_heatmap_enabled_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_is_hdr_debug_heatmap_enabled(bool value) {
  _internal_set_is_hdr_debug_heatmap_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.is_hdr_debug_heatmap_enabled)
}

// optional bool force_hdr_wide_gammut_for_sdr = 15 [default = true];
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_force_hdr_wide_gammut_for_sdr() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_force_hdr_wide_gammut_for_sdr() const {
  return _internal_has_force_hdr_wide_gammut_for_sdr();
}
inline void CMsgSystemPerfSettingsGlobal::clear_force_hdr_wide_gammut_for_sdr() {
  force_hdr_wide_gammut_for_sdr_ = true;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CMsgSystemPerfSettingsGlobal::_internal_force_hdr_wide_gammut_for_sdr() const {
  return force_hdr_wide_gammut_for_sdr_;
}
inline bool CMsgSystemPerfSettingsGlobal::force_hdr_wide_gammut_for_sdr() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.force_hdr_wide_gammut_for_sdr)
  return _internal_force_hdr_wide_gammut_for_sdr();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_force_hdr_wide_gammut_for_sdr(bool value) {
  _has_bits_[0] |= 0x00020000u;
  force_hdr_wide_gammut_for_sdr_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_force_hdr_wide_gammut_for_sdr(bool value) {
  _internal_set_force_hdr_wide_gammut_for_sdr(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.force_hdr_wide_gammut_for_sdr)
}

// optional bool allow_experimental_hdr = 16;
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_allow_experimental_hdr() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_allow_experimental_hdr() const {
  return _internal_has_allow_experimental_hdr();
}
inline void CMsgSystemPerfSettingsGlobal::clear_allow_experimental_hdr() {
  allow_experimental_hdr_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgSystemPerfSettingsGlobal::_internal_allow_experimental_hdr() const {
  return allow_experimental_hdr_;
}
inline bool CMsgSystemPerfSettingsGlobal::allow_experimental_hdr() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.allow_experimental_hdr)
  return _internal_allow_experimental_hdr();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_allow_experimental_hdr(bool value) {
  _has_bits_[0] |= 0x00000800u;
  allow_experimental_hdr_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_allow_experimental_hdr(bool value) {
  _internal_set_allow_experimental_hdr(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.allow_experimental_hdr)
}

// optional float sdr_to_hdr_brightness = 17;
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_sdr_to_hdr_brightness() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_sdr_to_hdr_brightness() const {
  return _internal_has_sdr_to_hdr_brightness();
}
inline void CMsgSystemPerfSettingsGlobal::clear_sdr_to_hdr_brightness() {
  sdr_to_hdr_brightness_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float CMsgSystemPerfSettingsGlobal::_internal_sdr_to_hdr_brightness() const {
  return sdr_to_hdr_brightness_;
}
inline float CMsgSystemPerfSettingsGlobal::sdr_to_hdr_brightness() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.sdr_to_hdr_brightness)
  return _internal_sdr_to_hdr_brightness();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_sdr_to_hdr_brightness(float value) {
  _has_bits_[0] |= 0x00004000u;
  sdr_to_hdr_brightness_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_sdr_to_hdr_brightness(float value) {
  _internal_set_sdr_to_hdr_brightness(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.sdr_to_hdr_brightness)
}

// optional bool debug_force_hdr_support = 18;
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_debug_force_hdr_support() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_debug_force_hdr_support() const {
  return _internal_has_debug_force_hdr_support();
}
inline void CMsgSystemPerfSettingsGlobal::clear_debug_force_hdr_support() {
  debug_force_hdr_support_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgSystemPerfSettingsGlobal::_internal_debug_force_hdr_support() const {
  return debug_force_hdr_support_;
}
inline bool CMsgSystemPerfSettingsGlobal::debug_force_hdr_support() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.debug_force_hdr_support)
  return _internal_debug_force_hdr_support();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_debug_force_hdr_support(bool value) {
  _has_bits_[0] |= 0x00001000u;
  debug_force_hdr_support_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_debug_force_hdr_support(bool value) {
  _internal_set_debug_force_hdr_support(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.debug_force_hdr_support)
}

// optional bool force_hdr_10pq_output_debug = 19;
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_force_hdr_10pq_output_debug() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_force_hdr_10pq_output_debug() const {
  return _internal_has_force_hdr_10pq_output_debug();
}
inline void CMsgSystemPerfSettingsGlobal::clear_force_hdr_10pq_output_debug() {
  force_hdr_10pq_output_debug_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CMsgSystemPerfSettingsGlobal::_internal_force_hdr_10pq_output_debug() const {
  return force_hdr_10pq_output_debug_;
}
inline bool CMsgSystemPerfSettingsGlobal::force_hdr_10pq_output_debug() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.force_hdr_10pq_output_debug)
  return _internal_force_hdr_10pq_output_debug();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_force_hdr_10pq_output_debug(bool value) {
  _has_bits_[0] |= 0x00002000u;
  force_hdr_10pq_output_debug_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_force_hdr_10pq_output_debug(bool value) {
  _internal_set_force_hdr_10pq_output_debug(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.force_hdr_10pq_output_debug)
}

// optional bool is_display_oc_enabled = 20;
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_is_display_oc_enabled() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_is_display_oc_enabled() const {
  return _internal_has_is_display_oc_enabled();
}
inline void CMsgSystemPerfSettingsGlobal::clear_is_display_oc_enabled() {
  is_display_oc_enabled_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CMsgSystemPerfSettingsGlobal::_internal_is_display_oc_enabled() const {
  return is_display_oc_enabled_;
}
inline bool CMsgSystemPerfSettingsGlobal::is_display_oc_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.is_display_oc_enabled)
  return _internal_is_display_oc_enabled();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_is_display_oc_enabled(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_display_oc_enabled_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_is_display_oc_enabled(bool value) {
  _internal_set_is_display_oc_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.is_display_oc_enabled)
}

// optional bool is_color_management_enabled = 21;
inline bool CMsgSystemPerfSettingsGlobal::_internal_has_is_color_management_enabled() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsGlobal::has_is_color_management_enabled() const {
  return _internal_has_is_color_management_enabled();
}
inline void CMsgSystemPerfSettingsGlobal::clear_is_color_management_enabled() {
  is_color_management_enabled_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CMsgSystemPerfSettingsGlobal::_internal_is_color_management_enabled() const {
  return is_color_management_enabled_;
}
inline bool CMsgSystemPerfSettingsGlobal::is_color_management_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsGlobal.is_color_management_enabled)
  return _internal_is_color_management_enabled();
}
inline void CMsgSystemPerfSettingsGlobal::_internal_set_is_color_management_enabled(bool value) {
  _has_bits_[0] |= 0x00010000u;
  is_color_management_enabled_ = value;
}
inline void CMsgSystemPerfSettingsGlobal::set_is_color_management_enabled(bool value) {
  _internal_set_is_color_management_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsGlobal.is_color_management_enabled)
}

// -------------------------------------------------------------------

// CMsgSystemPerfSettingsPerApp

// optional int32 gpu_performance_manual_mhz = 1;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_gpu_performance_manual_mhz() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_gpu_performance_manual_mhz() const {
  return _internal_has_gpu_performance_manual_mhz();
}
inline void CMsgSystemPerfSettingsPerApp::clear_gpu_performance_manual_mhz() {
  gpu_performance_manual_mhz_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgSystemPerfSettingsPerApp::_internal_gpu_performance_manual_mhz() const {
  return gpu_performance_manual_mhz_;
}
inline int32_t CMsgSystemPerfSettingsPerApp::gpu_performance_manual_mhz() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.gpu_performance_manual_mhz)
  return _internal_gpu_performance_manual_mhz();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_gpu_performance_manual_mhz(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  gpu_performance_manual_mhz_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_gpu_performance_manual_mhz(int32_t value) {
  _internal_set_gpu_performance_manual_mhz(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.gpu_performance_manual_mhz)
}

// optional int32 fps_limit = 2;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_fps_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_fps_limit() const {
  return _internal_has_fps_limit();
}
inline void CMsgSystemPerfSettingsPerApp::clear_fps_limit() {
  fps_limit_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgSystemPerfSettingsPerApp::_internal_fps_limit() const {
  return fps_limit_;
}
inline int32_t CMsgSystemPerfSettingsPerApp::fps_limit() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.fps_limit)
  return _internal_fps_limit();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_fps_limit(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  fps_limit_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_fps_limit(int32_t value) {
  _internal_set_fps_limit(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.fps_limit)
}

// optional bool is_variable_resolution_enabled = 3;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_is_variable_resolution_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_is_variable_resolution_enabled() const {
  return _internal_has_is_variable_resolution_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::clear_is_variable_resolution_enabled() {
  is_variable_resolution_enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgSystemPerfSettingsPerApp::_internal_is_variable_resolution_enabled() const {
  return is_variable_resolution_enabled_;
}
inline bool CMsgSystemPerfSettingsPerApp::is_variable_resolution_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.is_variable_resolution_enabled)
  return _internal_is_variable_resolution_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_is_variable_resolution_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_variable_resolution_enabled_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_is_variable_resolution_enabled(bool value) {
  _internal_set_is_variable_resolution_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.is_variable_resolution_enabled)
}

// optional bool is_dynamic_refresh_rate_enabled = 4;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_is_dynamic_refresh_rate_enabled() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_is_dynamic_refresh_rate_enabled() const {
  return _internal_has_is_dynamic_refresh_rate_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::clear_is_dynamic_refresh_rate_enabled() {
  is_dynamic_refresh_rate_enabled_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgSystemPerfSettingsPerApp::_internal_is_dynamic_refresh_rate_enabled() const {
  return is_dynamic_refresh_rate_enabled_;
}
inline bool CMsgSystemPerfSettingsPerApp::is_dynamic_refresh_rate_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.is_dynamic_refresh_rate_enabled)
  return _internal_is_dynamic_refresh_rate_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_is_dynamic_refresh_rate_enabled(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_dynamic_refresh_rate_enabled_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_is_dynamic_refresh_rate_enabled(bool value) {
  _internal_set_is_dynamic_refresh_rate_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.is_dynamic_refresh_rate_enabled)
}

// optional int32 tdp_limit = 5;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_tdp_limit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_tdp_limit() const {
  return _internal_has_tdp_limit();
}
inline void CMsgSystemPerfSettingsPerApp::clear_tdp_limit() {
  tdp_limit_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgSystemPerfSettingsPerApp::_internal_tdp_limit() const {
  return tdp_limit_;
}
inline int32_t CMsgSystemPerfSettingsPerApp::tdp_limit() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.tdp_limit)
  return _internal_tdp_limit();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_tdp_limit(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  tdp_limit_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_tdp_limit(int32_t value) {
  _internal_set_tdp_limit(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.tdp_limit)
}

// optional .ECPUGovernor cpu_governor = 6 [default = k_ECPUGovernor_Invalid];
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_cpu_governor() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_cpu_governor() const {
  return _internal_has_cpu_governor();
}
inline void CMsgSystemPerfSettingsPerApp::clear_cpu_governor() {
  cpu_governor_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ECPUGovernor CMsgSystemPerfSettingsPerApp::_internal_cpu_governor() const {
  return static_cast< ::ECPUGovernor >(cpu_governor_);
}
inline ::ECPUGovernor CMsgSystemPerfSettingsPerApp::cpu_governor() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.cpu_governor)
  return _internal_cpu_governor();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_cpu_governor(::ECPUGovernor value) {
  assert(::ECPUGovernor_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  cpu_governor_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_cpu_governor(::ECPUGovernor value) {
  _internal_set_cpu_governor(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.cpu_governor)
}

// optional int32 cpu_governor_manual_mhz = 7;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_cpu_governor_manual_mhz() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_cpu_governor_manual_mhz() const {
  return _internal_has_cpu_governor_manual_mhz();
}
inline void CMsgSystemPerfSettingsPerApp::clear_cpu_governor_manual_mhz() {
  cpu_governor_manual_mhz_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgSystemPerfSettingsPerApp::_internal_cpu_governor_manual_mhz() const {
  return cpu_governor_manual_mhz_;
}
inline int32_t CMsgSystemPerfSettingsPerApp::cpu_governor_manual_mhz() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.cpu_governor_manual_mhz)
  return _internal_cpu_governor_manual_mhz();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_cpu_governor_manual_mhz(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  cpu_governor_manual_mhz_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_cpu_governor_manual_mhz(int32_t value) {
  _internal_set_cpu_governor_manual_mhz(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.cpu_governor_manual_mhz)
}

// optional int32 scaling_filter = 8;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_scaling_filter() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_scaling_filter() const {
  return _internal_has_scaling_filter();
}
inline void CMsgSystemPerfSettingsPerApp::clear_scaling_filter() {
  scaling_filter_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t CMsgSystemPerfSettingsPerApp::_internal_scaling_filter() const {
  return scaling_filter_;
}
inline int32_t CMsgSystemPerfSettingsPerApp::scaling_filter() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.scaling_filter)
  return _internal_scaling_filter();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_scaling_filter(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  scaling_filter_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_scaling_filter(int32_t value) {
  _internal_set_scaling_filter(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.scaling_filter)
}

// optional int32 fsr_sharpness = 9;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_fsr_sharpness() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_fsr_sharpness() const {
  return _internal_has_fsr_sharpness();
}
inline void CMsgSystemPerfSettingsPerApp::clear_fsr_sharpness() {
  fsr_sharpness_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t CMsgSystemPerfSettingsPerApp::_internal_fsr_sharpness() const {
  return fsr_sharpness_;
}
inline int32_t CMsgSystemPerfSettingsPerApp::fsr_sharpness() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.fsr_sharpness)
  return _internal_fsr_sharpness();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_fsr_sharpness(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  fsr_sharpness_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_fsr_sharpness(int32_t value) {
  _internal_set_fsr_sharpness(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.fsr_sharpness)
}

// optional bool is_fps_limit_enabled = 10;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_is_fps_limit_enabled() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_is_fps_limit_enabled() const {
  return _internal_has_is_fps_limit_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::clear_is_fps_limit_enabled() {
  is_fps_limit_enabled_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgSystemPerfSettingsPerApp::_internal_is_fps_limit_enabled() const {
  return is_fps_limit_enabled_;
}
inline bool CMsgSystemPerfSettingsPerApp::is_fps_limit_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.is_fps_limit_enabled)
  return _internal_is_fps_limit_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_is_fps_limit_enabled(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_fps_limit_enabled_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_is_fps_limit_enabled(bool value) {
  _internal_set_is_fps_limit_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.is_fps_limit_enabled)
}

// optional bool is_tdp_limit_enabled = 11;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_is_tdp_limit_enabled() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_is_tdp_limit_enabled() const {
  return _internal_has_is_tdp_limit_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::clear_is_tdp_limit_enabled() {
  is_tdp_limit_enabled_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgSystemPerfSettingsPerApp::_internal_is_tdp_limit_enabled() const {
  return is_tdp_limit_enabled_;
}
inline bool CMsgSystemPerfSettingsPerApp::is_tdp_limit_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.is_tdp_limit_enabled)
  return _internal_is_tdp_limit_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_is_tdp_limit_enabled(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_tdp_limit_enabled_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_is_tdp_limit_enabled(bool value) {
  _internal_set_is_tdp_limit_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.is_tdp_limit_enabled)
}

// optional bool is_low_latency_mode_enabled = 12;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_is_low_latency_mode_enabled() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_is_low_latency_mode_enabled() const {
  return _internal_has_is_low_latency_mode_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::clear_is_low_latency_mode_enabled() {
  is_low_latency_mode_enabled_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CMsgSystemPerfSettingsPerApp::_internal_is_low_latency_mode_enabled() const {
  return is_low_latency_mode_enabled_;
}
inline bool CMsgSystemPerfSettingsPerApp::is_low_latency_mode_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.is_low_latency_mode_enabled)
  return _internal_is_low_latency_mode_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_is_low_latency_mode_enabled(bool value) {
  _has_bits_[0] |= 0x00004000u;
  is_low_latency_mode_enabled_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_is_low_latency_mode_enabled(bool value) {
  _internal_set_is_low_latency_mode_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.is_low_latency_mode_enabled)
}

// optional int32 display_refresh_manual_hz = 13;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_display_refresh_manual_hz() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_display_refresh_manual_hz() const {
  return _internal_has_display_refresh_manual_hz();
}
inline void CMsgSystemPerfSettingsPerApp::clear_display_refresh_manual_hz() {
  display_refresh_manual_hz_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline int32_t CMsgSystemPerfSettingsPerApp::_internal_display_refresh_manual_hz() const {
  return display_refresh_manual_hz_;
}
inline int32_t CMsgSystemPerfSettingsPerApp::display_refresh_manual_hz() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.display_refresh_manual_hz)
  return _internal_display_refresh_manual_hz();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_display_refresh_manual_hz(int32_t value) {
  _has_bits_[0] |= 0x00000800u;
  display_refresh_manual_hz_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_display_refresh_manual_hz(int32_t value) {
  _internal_set_display_refresh_manual_hz(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.display_refresh_manual_hz)
}

// optional bool is_game_perf_profile_enabled = 14;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_is_game_perf_profile_enabled() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_is_game_perf_profile_enabled() const {
  return _internal_has_is_game_perf_profile_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::clear_is_game_perf_profile_enabled() {
  is_game_perf_profile_enabled_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CMsgSystemPerfSettingsPerApp::_internal_is_game_perf_profile_enabled() const {
  return is_game_perf_profile_enabled_;
}
inline bool CMsgSystemPerfSettingsPerApp::is_game_perf_profile_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.is_game_perf_profile_enabled)
  return _internal_is_game_perf_profile_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_is_game_perf_profile_enabled(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_game_perf_profile_enabled_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_is_game_perf_profile_enabled(bool value) {
  _internal_set_is_game_perf_profile_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.is_game_perf_profile_enabled)
}

// optional .EGPUPerformanceLevel gpu_performance_level = 15 [default = k_EGPUPerformanceLevel_Invalid];
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_gpu_performance_level() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_gpu_performance_level() const {
  return _internal_has_gpu_performance_level();
}
inline void CMsgSystemPerfSettingsPerApp::clear_gpu_performance_level() {
  gpu_performance_level_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::EGPUPerformanceLevel CMsgSystemPerfSettingsPerApp::_internal_gpu_performance_level() const {
  return static_cast< ::EGPUPerformanceLevel >(gpu_performance_level_);
}
inline ::EGPUPerformanceLevel CMsgSystemPerfSettingsPerApp::gpu_performance_level() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.gpu_performance_level)
  return _internal_gpu_performance_level();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_gpu_performance_level(::EGPUPerformanceLevel value) {
  assert(::EGPUPerformanceLevel_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  gpu_performance_level_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_gpu_performance_level(::EGPUPerformanceLevel value) {
  _internal_set_gpu_performance_level(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.gpu_performance_level)
}

// optional int32 nis_sharpness = 16;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_nis_sharpness() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_nis_sharpness() const {
  return _internal_has_nis_sharpness();
}
inline void CMsgSystemPerfSettingsPerApp::clear_nis_sharpness() {
  nis_sharpness_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline int32_t CMsgSystemPerfSettingsPerApp::_internal_nis_sharpness() const {
  return nis_sharpness_;
}
inline int32_t CMsgSystemPerfSettingsPerApp::nis_sharpness() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.nis_sharpness)
  return _internal_nis_sharpness();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_nis_sharpness(int32_t value) {
  _has_bits_[0] |= 0x00002000u;
  nis_sharpness_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_nis_sharpness(int32_t value) {
  _internal_set_nis_sharpness(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.nis_sharpness)
}

// optional int32 display_external_refresh_manual_hz = 17;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_display_external_refresh_manual_hz() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_display_external_refresh_manual_hz() const {
  return _internal_has_display_external_refresh_manual_hz();
}
inline void CMsgSystemPerfSettingsPerApp::clear_display_external_refresh_manual_hz() {
  display_external_refresh_manual_hz_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline int32_t CMsgSystemPerfSettingsPerApp::_internal_display_external_refresh_manual_hz() const {
  return display_external_refresh_manual_hz_;
}
inline int32_t CMsgSystemPerfSettingsPerApp::display_external_refresh_manual_hz() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.display_external_refresh_manual_hz)
  return _internal_display_external_refresh_manual_hz();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_display_external_refresh_manual_hz(int32_t value) {
  _has_bits_[0] |= 0x00040000u;
  display_external_refresh_manual_hz_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_display_external_refresh_manual_hz(int32_t value) {
  _internal_set_display_external_refresh_manual_hz(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.display_external_refresh_manual_hz)
}

// optional int32 fps_limit_external = 18;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_fps_limit_external() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_fps_limit_external() const {
  return _internal_has_fps_limit_external();
}
inline void CMsgSystemPerfSettingsPerApp::clear_fps_limit_external() {
  fps_limit_external_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline int32_t CMsgSystemPerfSettingsPerApp::_internal_fps_limit_external() const {
  return fps_limit_external_;
}
inline int32_t CMsgSystemPerfSettingsPerApp::fps_limit_external() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.fps_limit_external)
  return _internal_fps_limit_external();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_fps_limit_external(int32_t value) {
  _has_bits_[0] |= 0x00080000u;
  fps_limit_external_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_fps_limit_external(int32_t value) {
  _internal_set_fps_limit_external(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.fps_limit_external)
}

// optional bool is_tearing_enabled = 19;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_is_tearing_enabled() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_is_tearing_enabled() const {
  return _internal_has_is_tearing_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::clear_is_tearing_enabled() {
  is_tearing_enabled_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CMsgSystemPerfSettingsPerApp::_internal_is_tearing_enabled() const {
  return is_tearing_enabled_;
}
inline bool CMsgSystemPerfSettingsPerApp::is_tearing_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.is_tearing_enabled)
  return _internal_is_tearing_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_is_tearing_enabled(bool value) {
  _has_bits_[0] |= 0x00010000u;
  is_tearing_enabled_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_is_tearing_enabled(bool value) {
  _internal_set_is_tearing_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.is_tearing_enabled)
}

// optional bool is_vrr_enabled = 20;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_is_vrr_enabled() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_is_vrr_enabled() const {
  return _internal_has_is_vrr_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::clear_is_vrr_enabled() {
  is_vrr_enabled_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CMsgSystemPerfSettingsPerApp::_internal_is_vrr_enabled() const {
  return is_vrr_enabled_;
}
inline bool CMsgSystemPerfSettingsPerApp::is_vrr_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.is_vrr_enabled)
  return _internal_is_vrr_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_is_vrr_enabled(bool value) {
  _has_bits_[0] |= 0x00020000u;
  is_vrr_enabled_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_is_vrr_enabled(bool value) {
  _internal_set_is_vrr_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.is_vrr_enabled)
}

// optional bool is_composite_debug_enabled = 21;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_is_composite_debug_enabled() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_is_composite_debug_enabled() const {
  return _internal_has_is_composite_debug_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::clear_is_composite_debug_enabled() {
  is_composite_debug_enabled_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool CMsgSystemPerfSettingsPerApp::_internal_is_composite_debug_enabled() const {
  return is_composite_debug_enabled_;
}
inline bool CMsgSystemPerfSettingsPerApp::is_composite_debug_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.is_composite_debug_enabled)
  return _internal_is_composite_debug_enabled();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_is_composite_debug_enabled(bool value) {
  _has_bits_[0] |= 0x00100000u;
  is_composite_debug_enabled_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_is_composite_debug_enabled(bool value) {
  _internal_set_is_composite_debug_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.is_composite_debug_enabled)
}

// optional bool force_composite = 22;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_force_composite() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_force_composite() const {
  return _internal_has_force_composite();
}
inline void CMsgSystemPerfSettingsPerApp::clear_force_composite() {
  force_composite_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool CMsgSystemPerfSettingsPerApp::_internal_force_composite() const {
  return force_composite_;
}
inline bool CMsgSystemPerfSettingsPerApp::force_composite() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.force_composite)
  return _internal_force_composite();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_force_composite(bool value) {
  _has_bits_[0] |= 0x00200000u;
  force_composite_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_force_composite(bool value) {
  _internal_set_force_composite(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.force_composite)
}

// optional bool use_dynamic_refresh_rate_in_steam = 23;
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_use_dynamic_refresh_rate_in_steam() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_use_dynamic_refresh_rate_in_steam() const {
  return _internal_has_use_dynamic_refresh_rate_in_steam();
}
inline void CMsgSystemPerfSettingsPerApp::clear_use_dynamic_refresh_rate_in_steam() {
  use_dynamic_refresh_rate_in_steam_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool CMsgSystemPerfSettingsPerApp::_internal_use_dynamic_refresh_rate_in_steam() const {
  return use_dynamic_refresh_rate_in_steam_;
}
inline bool CMsgSystemPerfSettingsPerApp::use_dynamic_refresh_rate_in_steam() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.use_dynamic_refresh_rate_in_steam)
  return _internal_use_dynamic_refresh_rate_in_steam();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_use_dynamic_refresh_rate_in_steam(bool value) {
  _has_bits_[0] |= 0x00400000u;
  use_dynamic_refresh_rate_in_steam_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_use_dynamic_refresh_rate_in_steam(bool value) {
  _internal_set_use_dynamic_refresh_rate_in_steam(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.use_dynamic_refresh_rate_in_steam)
}

// optional .ESplitScalingFilter split_scaling_filter = 24 [default = k_ESplitScalingFilter_Invalid];
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_split_scaling_filter() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_split_scaling_filter() const {
  return _internal_has_split_scaling_filter();
}
inline void CMsgSystemPerfSettingsPerApp::clear_split_scaling_filter() {
  split_scaling_filter_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::ESplitScalingFilter CMsgSystemPerfSettingsPerApp::_internal_split_scaling_filter() const {
  return static_cast< ::ESplitScalingFilter >(split_scaling_filter_);
}
inline ::ESplitScalingFilter CMsgSystemPerfSettingsPerApp::split_scaling_filter() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.split_scaling_filter)
  return _internal_split_scaling_filter();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_split_scaling_filter(::ESplitScalingFilter value) {
  assert(::ESplitScalingFilter_IsValid(value));
  _has_bits_[0] |= 0x00800000u;
  split_scaling_filter_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_split_scaling_filter(::ESplitScalingFilter value) {
  _internal_set_split_scaling_filter(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.split_scaling_filter)
}

// optional .ESplitScalingScaler split_scaling_scaler = 25 [default = k_ESplitScalingScaler_Invalid];
inline bool CMsgSystemPerfSettingsPerApp::_internal_has_split_scaling_scaler() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsPerApp::has_split_scaling_scaler() const {
  return _internal_has_split_scaling_scaler();
}
inline void CMsgSystemPerfSettingsPerApp::clear_split_scaling_scaler() {
  split_scaling_scaler_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::ESplitScalingScaler CMsgSystemPerfSettingsPerApp::_internal_split_scaling_scaler() const {
  return static_cast< ::ESplitScalingScaler >(split_scaling_scaler_);
}
inline ::ESplitScalingScaler CMsgSystemPerfSettingsPerApp::split_scaling_scaler() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsPerApp.split_scaling_scaler)
  return _internal_split_scaling_scaler();
}
inline void CMsgSystemPerfSettingsPerApp::_internal_set_split_scaling_scaler(::ESplitScalingScaler value) {
  assert(::ESplitScalingScaler_IsValid(value));
  _has_bits_[0] |= 0x01000000u;
  split_scaling_scaler_ = value;
}
inline void CMsgSystemPerfSettingsPerApp::set_split_scaling_scaler(::ESplitScalingScaler value) {
  _internal_set_split_scaling_scaler(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsPerApp.split_scaling_scaler)
}

// -------------------------------------------------------------------

// CMsgSystemPerfSettings

// optional .CMsgSystemPerfSettingsGlobal global = 1;
inline bool CMsgSystemPerfSettings::_internal_has_global() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || global_ != nullptr);
  return value;
}
inline bool CMsgSystemPerfSettings::has_global() const {
  return _internal_has_global();
}
inline void CMsgSystemPerfSettings::clear_global() {
  if (global_ != nullptr) global_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSystemPerfSettingsGlobal& CMsgSystemPerfSettings::_internal_global() const {
  const ::CMsgSystemPerfSettingsGlobal* p = global_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSystemPerfSettingsGlobal&>(
      ::_CMsgSystemPerfSettingsGlobal_default_instance_);
}
inline const ::CMsgSystemPerfSettingsGlobal& CMsgSystemPerfSettings::global() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettings.global)
  return _internal_global();
}
inline void CMsgSystemPerfSettings::unsafe_arena_set_allocated_global(
    ::CMsgSystemPerfSettingsGlobal* global) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(global_);
  }
  global_ = global;
  if (global) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSystemPerfSettings.global)
}
inline ::CMsgSystemPerfSettingsGlobal* CMsgSystemPerfSettings::release_global() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSystemPerfSettingsGlobal* temp = global_;
  global_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSystemPerfSettingsGlobal* CMsgSystemPerfSettings::unsafe_arena_release_global() {
  // @@protoc_insertion_point(field_release:CMsgSystemPerfSettings.global)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSystemPerfSettingsGlobal* temp = global_;
  global_ = nullptr;
  return temp;
}
inline ::CMsgSystemPerfSettingsGlobal* CMsgSystemPerfSettings::_internal_mutable_global() {
  _has_bits_[0] |= 0x00000001u;
  if (global_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSystemPerfSettingsGlobal>(GetArenaForAllocation());
    global_ = p;
  }
  return global_;
}
inline ::CMsgSystemPerfSettingsGlobal* CMsgSystemPerfSettings::mutable_global() {
  ::CMsgSystemPerfSettingsGlobal* _msg = _internal_mutable_global();
  // @@protoc_insertion_point(field_mutable:CMsgSystemPerfSettings.global)
  return _msg;
}
inline void CMsgSystemPerfSettings::set_allocated_global(::CMsgSystemPerfSettingsGlobal* global) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete global_;
  }
  if (global) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSystemPerfSettingsGlobal>::GetOwningArena(global);
    if (message_arena != submessage_arena) {
      global = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  global_ = global;
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemPerfSettings.global)
}

// optional .CMsgSystemPerfSettingsPerApp per_app = 2;
inline bool CMsgSystemPerfSettings::_internal_has_per_app() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || per_app_ != nullptr);
  return value;
}
inline bool CMsgSystemPerfSettings::has_per_app() const {
  return _internal_has_per_app();
}
inline void CMsgSystemPerfSettings::clear_per_app() {
  if (per_app_ != nullptr) per_app_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgSystemPerfSettingsPerApp& CMsgSystemPerfSettings::_internal_per_app() const {
  const ::CMsgSystemPerfSettingsPerApp* p = per_app_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSystemPerfSettingsPerApp&>(
      ::_CMsgSystemPerfSettingsPerApp_default_instance_);
}
inline const ::CMsgSystemPerfSettingsPerApp& CMsgSystemPerfSettings::per_app() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettings.per_app)
  return _internal_per_app();
}
inline void CMsgSystemPerfSettings::unsafe_arena_set_allocated_per_app(
    ::CMsgSystemPerfSettingsPerApp* per_app) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(per_app_);
  }
  per_app_ = per_app;
  if (per_app) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSystemPerfSettings.per_app)
}
inline ::CMsgSystemPerfSettingsPerApp* CMsgSystemPerfSettings::release_per_app() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgSystemPerfSettingsPerApp* temp = per_app_;
  per_app_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSystemPerfSettingsPerApp* CMsgSystemPerfSettings::unsafe_arena_release_per_app() {
  // @@protoc_insertion_point(field_release:CMsgSystemPerfSettings.per_app)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgSystemPerfSettingsPerApp* temp = per_app_;
  per_app_ = nullptr;
  return temp;
}
inline ::CMsgSystemPerfSettingsPerApp* CMsgSystemPerfSettings::_internal_mutable_per_app() {
  _has_bits_[0] |= 0x00000002u;
  if (per_app_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSystemPerfSettingsPerApp>(GetArenaForAllocation());
    per_app_ = p;
  }
  return per_app_;
}
inline ::CMsgSystemPerfSettingsPerApp* CMsgSystemPerfSettings::mutable_per_app() {
  ::CMsgSystemPerfSettingsPerApp* _msg = _internal_mutable_per_app();
  // @@protoc_insertion_point(field_mutable:CMsgSystemPerfSettings.per_app)
  return _msg;
}
inline void CMsgSystemPerfSettings::set_allocated_per_app(::CMsgSystemPerfSettingsPerApp* per_app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete per_app_;
  }
  if (per_app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSystemPerfSettingsPerApp>::GetOwningArena(per_app);
    if (message_arena != submessage_arena) {
      per_app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, per_app, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  per_app_ = per_app;
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemPerfSettings.per_app)
}

// -------------------------------------------------------------------

// CMsgSystemPerfSettingsV1

// optional float diagnostic_update_rate = 1;
inline bool CMsgSystemPerfSettingsV1::_internal_has_diagnostic_update_rate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_diagnostic_update_rate() const {
  return _internal_has_diagnostic_update_rate();
}
inline void CMsgSystemPerfSettingsV1::clear_diagnostic_update_rate() {
  diagnostic_update_rate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CMsgSystemPerfSettingsV1::_internal_diagnostic_update_rate() const {
  return diagnostic_update_rate_;
}
inline float CMsgSystemPerfSettingsV1::diagnostic_update_rate() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.diagnostic_update_rate)
  return _internal_diagnostic_update_rate();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_diagnostic_update_rate(float value) {
  _has_bits_[0] |= 0x00000001u;
  diagnostic_update_rate_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_diagnostic_update_rate(float value) {
  _internal_set_diagnostic_update_rate(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.diagnostic_update_rate)
}

// optional .ESystemServiceState system_trace_service_state = 2 [default = k_ESystemServiceState_Unavailable];
inline bool CMsgSystemPerfSettingsV1::_internal_has_system_trace_service_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_system_trace_service_state() const {
  return _internal_has_system_trace_service_state();
}
inline void CMsgSystemPerfSettingsV1::clear_system_trace_service_state() {
  system_trace_service_state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ESystemServiceState CMsgSystemPerfSettingsV1::_internal_system_trace_service_state() const {
  return static_cast< ::ESystemServiceState >(system_trace_service_state_);
}
inline ::ESystemServiceState CMsgSystemPerfSettingsV1::system_trace_service_state() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.system_trace_service_state)
  return _internal_system_trace_service_state();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_system_trace_service_state(::ESystemServiceState value) {
  assert(::ESystemServiceState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  system_trace_service_state_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_system_trace_service_state(::ESystemServiceState value) {
  _internal_set_system_trace_service_state(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.system_trace_service_state)
}

// optional .ESystemServiceState graphics_profiling_service_state = 3 [default = k_ESystemServiceState_Unavailable];
inline bool CMsgSystemPerfSettingsV1::_internal_has_graphics_profiling_service_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_graphics_profiling_service_state() const {
  return _internal_has_graphics_profiling_service_state();
}
inline void CMsgSystemPerfSettingsV1::clear_graphics_profiling_service_state() {
  graphics_profiling_service_state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ESystemServiceState CMsgSystemPerfSettingsV1::_internal_graphics_profiling_service_state() const {
  return static_cast< ::ESystemServiceState >(graphics_profiling_service_state_);
}
inline ::ESystemServiceState CMsgSystemPerfSettingsV1::graphics_profiling_service_state() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.graphics_profiling_service_state)
  return _internal_graphics_profiling_service_state();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_graphics_profiling_service_state(::ESystemServiceState value) {
  assert(::ESystemServiceState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  graphics_profiling_service_state_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_graphics_profiling_service_state(::ESystemServiceState value) {
  _internal_set_graphics_profiling_service_state(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.graphics_profiling_service_state)
}

// optional .ESystemServiceState perf_overlay_service_state = 4 [default = k_ESystemServiceState_Unavailable];
inline bool CMsgSystemPerfSettingsV1::_internal_has_perf_overlay_service_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_perf_overlay_service_state() const {
  return _internal_has_perf_overlay_service_state();
}
inline void CMsgSystemPerfSettingsV1::clear_perf_overlay_service_state() {
  perf_overlay_service_state_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ESystemServiceState CMsgSystemPerfSettingsV1::_internal_perf_overlay_service_state() const {
  return static_cast< ::ESystemServiceState >(perf_overlay_service_state_);
}
inline ::ESystemServiceState CMsgSystemPerfSettingsV1::perf_overlay_service_state() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.perf_overlay_service_state)
  return _internal_perf_overlay_service_state();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_perf_overlay_service_state(::ESystemServiceState value) {
  assert(::ESystemServiceState_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  perf_overlay_service_state_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_perf_overlay_service_state(::ESystemServiceState value) {
  _internal_set_perf_overlay_service_state(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.perf_overlay_service_state)
}

// optional .EGraphicsPerfOverlayLevel perf_overlay_level = 5 [default = k_EGraphicsPerfOverlayLevel_Hidden];
inline bool CMsgSystemPerfSettingsV1::_internal_has_perf_overlay_level() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_perf_overlay_level() const {
  return _internal_has_perf_overlay_level();
}
inline void CMsgSystemPerfSettingsV1::clear_perf_overlay_level() {
  perf_overlay_level_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::EGraphicsPerfOverlayLevel CMsgSystemPerfSettingsV1::_internal_perf_overlay_level() const {
  return static_cast< ::EGraphicsPerfOverlayLevel >(perf_overlay_level_);
}
inline ::EGraphicsPerfOverlayLevel CMsgSystemPerfSettingsV1::perf_overlay_level() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.perf_overlay_level)
  return _internal_perf_overlay_level();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_perf_overlay_level(::EGraphicsPerfOverlayLevel value) {
  assert(::EGraphicsPerfOverlayLevel_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  perf_overlay_level_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_perf_overlay_level(::EGraphicsPerfOverlayLevel value) {
  _internal_set_perf_overlay_level(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.perf_overlay_level)
}

// optional .EGPUPerformanceLevel gpu_performance_level = 6 [default = k_EGPUPerformanceLevel_Invalid];
inline bool CMsgSystemPerfSettingsV1::_internal_has_gpu_performance_level() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_gpu_performance_level() const {
  return _internal_has_gpu_performance_level();
}
inline void CMsgSystemPerfSettingsV1::clear_gpu_performance_level() {
  gpu_performance_level_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::EGPUPerformanceLevel CMsgSystemPerfSettingsV1::_internal_gpu_performance_level() const {
  return static_cast< ::EGPUPerformanceLevel >(gpu_performance_level_);
}
inline ::EGPUPerformanceLevel CMsgSystemPerfSettingsV1::gpu_performance_level() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.gpu_performance_level)
  return _internal_gpu_performance_level();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_gpu_performance_level(::EGPUPerformanceLevel value) {
  assert(::EGPUPerformanceLevel_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  gpu_performance_level_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_gpu_performance_level(::EGPUPerformanceLevel value) {
  _internal_set_gpu_performance_level(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.gpu_performance_level)
}

// optional int32 gpu_performance_manual_mhz = 7;
inline bool CMsgSystemPerfSettingsV1::_internal_has_gpu_performance_manual_mhz() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_gpu_performance_manual_mhz() const {
  return _internal_has_gpu_performance_manual_mhz();
}
inline void CMsgSystemPerfSettingsV1::clear_gpu_performance_manual_mhz() {
  gpu_performance_manual_mhz_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t CMsgSystemPerfSettingsV1::_internal_gpu_performance_manual_mhz() const {
  return gpu_performance_manual_mhz_;
}
inline int32_t CMsgSystemPerfSettingsV1::gpu_performance_manual_mhz() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.gpu_performance_manual_mhz)
  return _internal_gpu_performance_manual_mhz();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_gpu_performance_manual_mhz(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  gpu_performance_manual_mhz_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_gpu_performance_manual_mhz(int32_t value) {
  _internal_set_gpu_performance_manual_mhz(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.gpu_performance_manual_mhz)
}

// optional int32 fps_limit = 8;
inline bool CMsgSystemPerfSettingsV1::_internal_has_fps_limit() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_fps_limit() const {
  return _internal_has_fps_limit();
}
inline void CMsgSystemPerfSettingsV1::clear_fps_limit() {
  fps_limit_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t CMsgSystemPerfSettingsV1::_internal_fps_limit() const {
  return fps_limit_;
}
inline int32_t CMsgSystemPerfSettingsV1::fps_limit() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.fps_limit)
  return _internal_fps_limit();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_fps_limit(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  fps_limit_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_fps_limit(int32_t value) {
  _internal_set_fps_limit(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.fps_limit)
}

// optional bool is_variable_resolution_enabled = 9;
inline bool CMsgSystemPerfSettingsV1::_internal_has_is_variable_resolution_enabled() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_is_variable_resolution_enabled() const {
  return _internal_has_is_variable_resolution_enabled();
}
inline void CMsgSystemPerfSettingsV1::clear_is_variable_resolution_enabled() {
  is_variable_resolution_enabled_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgSystemPerfSettingsV1::_internal_is_variable_resolution_enabled() const {
  return is_variable_resolution_enabled_;
}
inline bool CMsgSystemPerfSettingsV1::is_variable_resolution_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.is_variable_resolution_enabled)
  return _internal_is_variable_resolution_enabled();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_is_variable_resolution_enabled(bool value) {
  _has_bits_[0] |= 0x00000800u;
  is_variable_resolution_enabled_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_is_variable_resolution_enabled(bool value) {
  _internal_set_is_variable_resolution_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.is_variable_resolution_enabled)
}

// optional bool is_dynamic_refresh_rate_enabled = 10;
inline bool CMsgSystemPerfSettingsV1::_internal_has_is_dynamic_refresh_rate_enabled() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_is_dynamic_refresh_rate_enabled() const {
  return _internal_has_is_dynamic_refresh_rate_enabled();
}
inline void CMsgSystemPerfSettingsV1::clear_is_dynamic_refresh_rate_enabled() {
  is_dynamic_refresh_rate_enabled_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgSystemPerfSettingsV1::_internal_is_dynamic_refresh_rate_enabled() const {
  return is_dynamic_refresh_rate_enabled_;
}
inline bool CMsgSystemPerfSettingsV1::is_dynamic_refresh_rate_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.is_dynamic_refresh_rate_enabled)
  return _internal_is_dynamic_refresh_rate_enabled();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_is_dynamic_refresh_rate_enabled(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_dynamic_refresh_rate_enabled_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_is_dynamic_refresh_rate_enabled(bool value) {
  _internal_set_is_dynamic_refresh_rate_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.is_dynamic_refresh_rate_enabled)
}

// optional int32 tdp_limit = 11;
inline bool CMsgSystemPerfSettingsV1::_internal_has_tdp_limit() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_tdp_limit() const {
  return _internal_has_tdp_limit();
}
inline void CMsgSystemPerfSettingsV1::clear_tdp_limit() {
  tdp_limit_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t CMsgSystemPerfSettingsV1::_internal_tdp_limit() const {
  return tdp_limit_;
}
inline int32_t CMsgSystemPerfSettingsV1::tdp_limit() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.tdp_limit)
  return _internal_tdp_limit();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_tdp_limit(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  tdp_limit_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_tdp_limit(int32_t value) {
  _internal_set_tdp_limit(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.tdp_limit)
}

// optional .ECPUGovernor cpu_governor = 12 [default = k_ECPUGovernor_Invalid];
inline bool CMsgSystemPerfSettingsV1::_internal_has_cpu_governor() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_cpu_governor() const {
  return _internal_has_cpu_governor();
}
inline void CMsgSystemPerfSettingsV1::clear_cpu_governor() {
  cpu_governor_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::ECPUGovernor CMsgSystemPerfSettingsV1::_internal_cpu_governor() const {
  return static_cast< ::ECPUGovernor >(cpu_governor_);
}
inline ::ECPUGovernor CMsgSystemPerfSettingsV1::cpu_governor() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.cpu_governor)
  return _internal_cpu_governor();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_cpu_governor(::ECPUGovernor value) {
  assert(::ECPUGovernor_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  cpu_governor_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_cpu_governor(::ECPUGovernor value) {
  _internal_set_cpu_governor(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.cpu_governor)
}

// optional int32 cpu_governor_manual_mhz = 13;
inline bool CMsgSystemPerfSettingsV1::_internal_has_cpu_governor_manual_mhz() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_cpu_governor_manual_mhz() const {
  return _internal_has_cpu_governor_manual_mhz();
}
inline void CMsgSystemPerfSettingsV1::clear_cpu_governor_manual_mhz() {
  cpu_governor_manual_mhz_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t CMsgSystemPerfSettingsV1::_internal_cpu_governor_manual_mhz() const {
  return cpu_governor_manual_mhz_;
}
inline int32_t CMsgSystemPerfSettingsV1::cpu_governor_manual_mhz() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.cpu_governor_manual_mhz)
  return _internal_cpu_governor_manual_mhz();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_cpu_governor_manual_mhz(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  cpu_governor_manual_mhz_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_cpu_governor_manual_mhz(int32_t value) {
  _internal_set_cpu_governor_manual_mhz(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.cpu_governor_manual_mhz)
}

// optional int32 scaling_filter = 14;
inline bool CMsgSystemPerfSettingsV1::_internal_has_scaling_filter() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_scaling_filter() const {
  return _internal_has_scaling_filter();
}
inline void CMsgSystemPerfSettingsV1::clear_scaling_filter() {
  scaling_filter_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline int32_t CMsgSystemPerfSettingsV1::_internal_scaling_filter() const {
  return scaling_filter_;
}
inline int32_t CMsgSystemPerfSettingsV1::scaling_filter() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.scaling_filter)
  return _internal_scaling_filter();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_scaling_filter(int32_t value) {
  _has_bits_[0] |= 0x00008000u;
  scaling_filter_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_scaling_filter(int32_t value) {
  _internal_set_scaling_filter(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.scaling_filter)
}

// optional int32 fsr_sharpness = 15;
inline bool CMsgSystemPerfSettingsV1::_internal_has_fsr_sharpness() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_fsr_sharpness() const {
  return _internal_has_fsr_sharpness();
}
inline void CMsgSystemPerfSettingsV1::clear_fsr_sharpness() {
  fsr_sharpness_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline int32_t CMsgSystemPerfSettingsV1::_internal_fsr_sharpness() const {
  return fsr_sharpness_;
}
inline int32_t CMsgSystemPerfSettingsV1::fsr_sharpness() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.fsr_sharpness)
  return _internal_fsr_sharpness();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_fsr_sharpness(int32_t value) {
  _has_bits_[0] |= 0x00010000u;
  fsr_sharpness_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_fsr_sharpness(int32_t value) {
  _internal_set_fsr_sharpness(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.fsr_sharpness)
}

// optional bool is_fps_limit_enabled = 16;
inline bool CMsgSystemPerfSettingsV1::_internal_has_is_fps_limit_enabled() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_is_fps_limit_enabled() const {
  return _internal_has_is_fps_limit_enabled();
}
inline void CMsgSystemPerfSettingsV1::clear_is_fps_limit_enabled() {
  is_fps_limit_enabled_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CMsgSystemPerfSettingsV1::_internal_is_fps_limit_enabled() const {
  return is_fps_limit_enabled_;
}
inline bool CMsgSystemPerfSettingsV1::is_fps_limit_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.is_fps_limit_enabled)
  return _internal_is_fps_limit_enabled();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_is_fps_limit_enabled(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_fps_limit_enabled_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_is_fps_limit_enabled(bool value) {
  _internal_set_is_fps_limit_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.is_fps_limit_enabled)
}

// optional bool is_tdp_limit_enabled = 17;
inline bool CMsgSystemPerfSettingsV1::_internal_has_is_tdp_limit_enabled() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_is_tdp_limit_enabled() const {
  return _internal_has_is_tdp_limit_enabled();
}
inline void CMsgSystemPerfSettingsV1::clear_is_tdp_limit_enabled() {
  is_tdp_limit_enabled_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CMsgSystemPerfSettingsV1::_internal_is_tdp_limit_enabled() const {
  return is_tdp_limit_enabled_;
}
inline bool CMsgSystemPerfSettingsV1::is_tdp_limit_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.is_tdp_limit_enabled)
  return _internal_is_tdp_limit_enabled();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_is_tdp_limit_enabled(bool value) {
  _has_bits_[0] |= 0x00004000u;
  is_tdp_limit_enabled_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_is_tdp_limit_enabled(bool value) {
  _internal_set_is_tdp_limit_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.is_tdp_limit_enabled)
}

// optional bool is_show_perf_overlay_over_steam_enabled = 18;
inline bool CMsgSystemPerfSettingsV1::_internal_has_is_show_perf_overlay_over_steam_enabled() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_is_show_perf_overlay_over_steam_enabled() const {
  return _internal_has_is_show_perf_overlay_over_steam_enabled();
}
inline void CMsgSystemPerfSettingsV1::clear_is_show_perf_overlay_over_steam_enabled() {
  is_show_perf_overlay_over_steam_enabled_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CMsgSystemPerfSettingsV1::_internal_is_show_perf_overlay_over_steam_enabled() const {
  return is_show_perf_overlay_over_steam_enabled_;
}
inline bool CMsgSystemPerfSettingsV1::is_show_perf_overlay_over_steam_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.is_show_perf_overlay_over_steam_enabled)
  return _internal_is_show_perf_overlay_over_steam_enabled();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_is_show_perf_overlay_over_steam_enabled(bool value) {
  _has_bits_[0] |= 0x00020000u;
  is_show_perf_overlay_over_steam_enabled_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_is_show_perf_overlay_over_steam_enabled(bool value) {
  _internal_set_is_show_perf_overlay_over_steam_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.is_show_perf_overlay_over_steam_enabled)
}

// optional bool is_low_latency_mode_enabled = 19;
inline bool CMsgSystemPerfSettingsV1::_internal_has_is_low_latency_mode_enabled() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_is_low_latency_mode_enabled() const {
  return _internal_has_is_low_latency_mode_enabled();
}
inline void CMsgSystemPerfSettingsV1::clear_is_low_latency_mode_enabled() {
  is_low_latency_mode_enabled_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CMsgSystemPerfSettingsV1::_internal_is_low_latency_mode_enabled() const {
  return is_low_latency_mode_enabled_;
}
inline bool CMsgSystemPerfSettingsV1::is_low_latency_mode_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.is_low_latency_mode_enabled)
  return _internal_is_low_latency_mode_enabled();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_is_low_latency_mode_enabled(bool value) {
  _has_bits_[0] |= 0x00040000u;
  is_low_latency_mode_enabled_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_is_low_latency_mode_enabled(bool value) {
  _internal_set_is_low_latency_mode_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.is_low_latency_mode_enabled)
}

// optional int32 display_refresh_manual_hz = 20;
inline bool CMsgSystemPerfSettingsV1::_internal_has_display_refresh_manual_hz() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_display_refresh_manual_hz() const {
  return _internal_has_display_refresh_manual_hz();
}
inline void CMsgSystemPerfSettingsV1::clear_display_refresh_manual_hz() {
  display_refresh_manual_hz_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline int32_t CMsgSystemPerfSettingsV1::_internal_display_refresh_manual_hz() const {
  return display_refresh_manual_hz_;
}
inline int32_t CMsgSystemPerfSettingsV1::display_refresh_manual_hz() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.display_refresh_manual_hz)
  return _internal_display_refresh_manual_hz();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_display_refresh_manual_hz(int32_t value) {
  _has_bits_[0] |= 0x00100000u;
  display_refresh_manual_hz_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_display_refresh_manual_hz(int32_t value) {
  _internal_set_display_refresh_manual_hz(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.display_refresh_manual_hz)
}

// optional bool is_game_perf_profile_enabled = 21;
inline bool CMsgSystemPerfSettingsV1::_internal_has_is_game_perf_profile_enabled() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgSystemPerfSettingsV1::has_is_game_perf_profile_enabled() const {
  return _internal_has_is_game_perf_profile_enabled();
}
inline void CMsgSystemPerfSettingsV1::clear_is_game_perf_profile_enabled() {
  is_game_perf_profile_enabled_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool CMsgSystemPerfSettingsV1::_internal_is_game_perf_profile_enabled() const {
  return is_game_perf_profile_enabled_;
}
inline bool CMsgSystemPerfSettingsV1::is_game_perf_profile_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfSettingsV1.is_game_perf_profile_enabled)
  return _internal_is_game_perf_profile_enabled();
}
inline void CMsgSystemPerfSettingsV1::_internal_set_is_game_perf_profile_enabled(bool value) {
  _has_bits_[0] |= 0x00080000u;
  is_game_perf_profile_enabled_ = value;
}
inline void CMsgSystemPerfSettingsV1::set_is_game_perf_profile_enabled(bool value) {
  _internal_set_is_game_perf_profile_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfSettingsV1.is_game_perf_profile_enabled)
}

// -------------------------------------------------------------------

// CMsgSystemPerfState

// optional .CMsgSystemPerfLimits limits = 1;
inline bool CMsgSystemPerfState::_internal_has_limits() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || limits_ != nullptr);
  return value;
}
inline bool CMsgSystemPerfState::has_limits() const {
  return _internal_has_limits();
}
inline void CMsgSystemPerfState::clear_limits() {
  if (limits_ != nullptr) limits_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSystemPerfLimits& CMsgSystemPerfState::_internal_limits() const {
  const ::CMsgSystemPerfLimits* p = limits_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSystemPerfLimits&>(
      ::_CMsgSystemPerfLimits_default_instance_);
}
inline const ::CMsgSystemPerfLimits& CMsgSystemPerfState::limits() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfState.limits)
  return _internal_limits();
}
inline void CMsgSystemPerfState::unsafe_arena_set_allocated_limits(
    ::CMsgSystemPerfLimits* limits) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limits_);
  }
  limits_ = limits;
  if (limits) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSystemPerfState.limits)
}
inline ::CMsgSystemPerfLimits* CMsgSystemPerfState::release_limits() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSystemPerfLimits* temp = limits_;
  limits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSystemPerfLimits* CMsgSystemPerfState::unsafe_arena_release_limits() {
  // @@protoc_insertion_point(field_release:CMsgSystemPerfState.limits)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSystemPerfLimits* temp = limits_;
  limits_ = nullptr;
  return temp;
}
inline ::CMsgSystemPerfLimits* CMsgSystemPerfState::_internal_mutable_limits() {
  _has_bits_[0] |= 0x00000001u;
  if (limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSystemPerfLimits>(GetArenaForAllocation());
    limits_ = p;
  }
  return limits_;
}
inline ::CMsgSystemPerfLimits* CMsgSystemPerfState::mutable_limits() {
  ::CMsgSystemPerfLimits* _msg = _internal_mutable_limits();
  // @@protoc_insertion_point(field_mutable:CMsgSystemPerfState.limits)
  return _msg;
}
inline void CMsgSystemPerfState::set_allocated_limits(::CMsgSystemPerfLimits* limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete limits_;
  }
  if (limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSystemPerfLimits>::GetOwningArena(limits);
    if (message_arena != submessage_arena) {
      limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limits, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  limits_ = limits;
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemPerfState.limits)
}

// optional .CMsgSystemPerfSettings settings = 2;
inline bool CMsgSystemPerfState::_internal_has_settings() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || settings_ != nullptr);
  return value;
}
inline bool CMsgSystemPerfState::has_settings() const {
  return _internal_has_settings();
}
inline void CMsgSystemPerfState::clear_settings() {
  if (settings_ != nullptr) settings_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgSystemPerfSettings& CMsgSystemPerfState::_internal_settings() const {
  const ::CMsgSystemPerfSettings* p = settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSystemPerfSettings&>(
      ::_CMsgSystemPerfSettings_default_instance_);
}
inline const ::CMsgSystemPerfSettings& CMsgSystemPerfState::settings() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfState.settings)
  return _internal_settings();
}
inline void CMsgSystemPerfState::unsafe_arena_set_allocated_settings(
    ::CMsgSystemPerfSettings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSystemPerfState.settings)
}
inline ::CMsgSystemPerfSettings* CMsgSystemPerfState::release_settings() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgSystemPerfSettings* temp = settings_;
  settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSystemPerfSettings* CMsgSystemPerfState::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:CMsgSystemPerfState.settings)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgSystemPerfSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::CMsgSystemPerfSettings* CMsgSystemPerfState::_internal_mutable_settings() {
  _has_bits_[0] |= 0x00000002u;
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSystemPerfSettings>(GetArenaForAllocation());
    settings_ = p;
  }
  return settings_;
}
inline ::CMsgSystemPerfSettings* CMsgSystemPerfState::mutable_settings() {
  ::CMsgSystemPerfSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:CMsgSystemPerfState.settings)
  return _msg;
}
inline void CMsgSystemPerfState::set_allocated_settings(::CMsgSystemPerfSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSystemPerfSettings>::GetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemPerfState.settings)
}

// optional uint64 current_game_id = 3;
inline bool CMsgSystemPerfState::_internal_has_current_game_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemPerfState::has_current_game_id() const {
  return _internal_has_current_game_id();
}
inline void CMsgSystemPerfState::clear_current_game_id() {
  current_game_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgSystemPerfState::_internal_current_game_id() const {
  return current_game_id_;
}
inline uint64_t CMsgSystemPerfState::current_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfState.current_game_id)
  return _internal_current_game_id();
}
inline void CMsgSystemPerfState::_internal_set_current_game_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  current_game_id_ = value;
}
inline void CMsgSystemPerfState::set_current_game_id(uint64_t value) {
  _internal_set_current_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfState.current_game_id)
}

// optional uint64 active_profile_game_id = 4;
inline bool CMsgSystemPerfState::_internal_has_active_profile_game_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSystemPerfState::has_active_profile_game_id() const {
  return _internal_has_active_profile_game_id();
}
inline void CMsgSystemPerfState::clear_active_profile_game_id() {
  active_profile_game_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CMsgSystemPerfState::_internal_active_profile_game_id() const {
  return active_profile_game_id_;
}
inline uint64_t CMsgSystemPerfState::active_profile_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfState.active_profile_game_id)
  return _internal_active_profile_game_id();
}
inline void CMsgSystemPerfState::_internal_set_active_profile_game_id(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  active_profile_game_id_ = value;
}
inline void CMsgSystemPerfState::set_active_profile_game_id(uint64_t value) {
  _internal_set_active_profile_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfState.active_profile_game_id)
}

// -------------------------------------------------------------------

// CMsgSystemPerfUpdateSettings

// optional uint64 gameid = 1;
inline bool CMsgSystemPerfUpdateSettings::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemPerfUpdateSettings::has_gameid() const {
  return _internal_has_gameid();
}
inline void CMsgSystemPerfUpdateSettings::clear_gameid() {
  gameid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgSystemPerfUpdateSettings::_internal_gameid() const {
  return gameid_;
}
inline uint64_t CMsgSystemPerfUpdateSettings::gameid() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfUpdateSettings.gameid)
  return _internal_gameid();
}
inline void CMsgSystemPerfUpdateSettings::_internal_set_gameid(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  gameid_ = value;
}
inline void CMsgSystemPerfUpdateSettings::set_gameid(uint64_t value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfUpdateSettings.gameid)
}

// optional bool skip_storage_update = 4;
inline bool CMsgSystemPerfUpdateSettings::_internal_has_skip_storage_update() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemPerfUpdateSettings::has_skip_storage_update() const {
  return _internal_has_skip_storage_update();
}
inline void CMsgSystemPerfUpdateSettings::clear_skip_storage_update() {
  skip_storage_update_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgSystemPerfUpdateSettings::_internal_skip_storage_update() const {
  return skip_storage_update_;
}
inline bool CMsgSystemPerfUpdateSettings::skip_storage_update() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfUpdateSettings.skip_storage_update)
  return _internal_skip_storage_update();
}
inline void CMsgSystemPerfUpdateSettings::_internal_set_skip_storage_update(bool value) {
  _has_bits_[0] |= 0x00000002u;
  skip_storage_update_ = value;
}
inline void CMsgSystemPerfUpdateSettings::set_skip_storage_update(bool value) {
  _internal_set_skip_storage_update(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfUpdateSettings.skip_storage_update)
}

// bool reset_to_default = 2;
inline bool CMsgSystemPerfUpdateSettings::_internal_has_reset_to_default() const {
  return update_case() == kResetToDefault;
}
inline bool CMsgSystemPerfUpdateSettings::has_reset_to_default() const {
  return _internal_has_reset_to_default();
}
inline void CMsgSystemPerfUpdateSettings::set_has_reset_to_default() {
  _oneof_case_[0] = kResetToDefault;
}
inline void CMsgSystemPerfUpdateSettings::clear_reset_to_default() {
  if (_internal_has_reset_to_default()) {
    update_.reset_to_default_ = false;
    clear_has_update();
  }
}
inline bool CMsgSystemPerfUpdateSettings::_internal_reset_to_default() const {
  if (_internal_has_reset_to_default()) {
    return update_.reset_to_default_;
  }
  return false;
}
inline void CMsgSystemPerfUpdateSettings::_internal_set_reset_to_default(bool value) {
  if (!_internal_has_reset_to_default()) {
    clear_update();
    set_has_reset_to_default();
  }
  update_.reset_to_default_ = value;
}
inline bool CMsgSystemPerfUpdateSettings::reset_to_default() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfUpdateSettings.reset_to_default)
  return _internal_reset_to_default();
}
inline void CMsgSystemPerfUpdateSettings::set_reset_to_default(bool value) {
  _internal_set_reset_to_default(value);
  // @@protoc_insertion_point(field_set:CMsgSystemPerfUpdateSettings.reset_to_default)
}

// .CMsgSystemPerfSettings settings_delta = 3;
inline bool CMsgSystemPerfUpdateSettings::_internal_has_settings_delta() const {
  return update_case() == kSettingsDelta;
}
inline bool CMsgSystemPerfUpdateSettings::has_settings_delta() const {
  return _internal_has_settings_delta();
}
inline void CMsgSystemPerfUpdateSettings::set_has_settings_delta() {
  _oneof_case_[0] = kSettingsDelta;
}
inline void CMsgSystemPerfUpdateSettings::clear_settings_delta() {
  if (_internal_has_settings_delta()) {
    if (GetArenaForAllocation() == nullptr) {
      delete update_.settings_delta_;
    }
    clear_has_update();
  }
}
inline ::CMsgSystemPerfSettings* CMsgSystemPerfUpdateSettings::release_settings_delta() {
  // @@protoc_insertion_point(field_release:CMsgSystemPerfUpdateSettings.settings_delta)
  if (_internal_has_settings_delta()) {
    clear_has_update();
      ::CMsgSystemPerfSettings* temp = update_.settings_delta_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    update_.settings_delta_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CMsgSystemPerfSettings& CMsgSystemPerfUpdateSettings::_internal_settings_delta() const {
  return _internal_has_settings_delta()
      ? *update_.settings_delta_
      : reinterpret_cast< ::CMsgSystemPerfSettings&>(::_CMsgSystemPerfSettings_default_instance_);
}
inline const ::CMsgSystemPerfSettings& CMsgSystemPerfUpdateSettings::settings_delta() const {
  // @@protoc_insertion_point(field_get:CMsgSystemPerfUpdateSettings.settings_delta)
  return _internal_settings_delta();
}
inline ::CMsgSystemPerfSettings* CMsgSystemPerfUpdateSettings::unsafe_arena_release_settings_delta() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CMsgSystemPerfUpdateSettings.settings_delta)
  if (_internal_has_settings_delta()) {
    clear_has_update();
    ::CMsgSystemPerfSettings* temp = update_.settings_delta_;
    update_.settings_delta_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CMsgSystemPerfUpdateSettings::unsafe_arena_set_allocated_settings_delta(::CMsgSystemPerfSettings* settings_delta) {
  clear_update();
  if (settings_delta) {
    set_has_settings_delta();
    update_.settings_delta_ = settings_delta;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSystemPerfUpdateSettings.settings_delta)
}
inline ::CMsgSystemPerfSettings* CMsgSystemPerfUpdateSettings::_internal_mutable_settings_delta() {
  if (!_internal_has_settings_delta()) {
    clear_update();
    set_has_settings_delta();
    update_.settings_delta_ = CreateMaybeMessage< ::CMsgSystemPerfSettings >(GetArenaForAllocation());
  }
  return update_.settings_delta_;
}
inline ::CMsgSystemPerfSettings* CMsgSystemPerfUpdateSettings::mutable_settings_delta() {
  ::CMsgSystemPerfSettings* _msg = _internal_mutable_settings_delta();
  // @@protoc_insertion_point(field_mutable:CMsgSystemPerfUpdateSettings.settings_delta)
  return _msg;
}

inline bool CMsgSystemPerfUpdateSettings::has_update() const {
  return update_case() != UPDATE_NOT_SET;
}
inline void CMsgSystemPerfUpdateSettings::clear_has_update() {
  _oneof_case_[0] = UPDATE_NOT_SET;
}
inline CMsgSystemPerfUpdateSettings::UpdateCase CMsgSystemPerfUpdateSettings::update_case() const {
  return CMsgSystemPerfUpdateSettings::UpdateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CMsgSystemDockUpdateState

// optional .EUpdaterState state = 1 [default = k_EUpdaterState_Invalid];
inline bool CMsgSystemDockUpdateState::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemDockUpdateState::has_state() const {
  return _internal_has_state();
}
inline void CMsgSystemDockUpdateState::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EUpdaterState CMsgSystemDockUpdateState::_internal_state() const {
  return static_cast< ::EUpdaterState >(state_);
}
inline ::EUpdaterState CMsgSystemDockUpdateState::state() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDockUpdateState.state)
  return _internal_state();
}
inline void CMsgSystemDockUpdateState::_internal_set_state(::EUpdaterState value) {
  assert(::EUpdaterState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void CMsgSystemDockUpdateState::set_state(::EUpdaterState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDockUpdateState.state)
}

// optional fixed32 rtime_last_checked = 2;
inline bool CMsgSystemDockUpdateState::_internal_has_rtime_last_checked() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSystemDockUpdateState::has_rtime_last_checked() const {
  return _internal_has_rtime_last_checked();
}
inline void CMsgSystemDockUpdateState::clear_rtime_last_checked() {
  rtime_last_checked_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSystemDockUpdateState::_internal_rtime_last_checked() const {
  return rtime_last_checked_;
}
inline uint32_t CMsgSystemDockUpdateState::rtime_last_checked() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDockUpdateState.rtime_last_checked)
  return _internal_rtime_last_checked();
}
inline void CMsgSystemDockUpdateState::_internal_set_rtime_last_checked(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  rtime_last_checked_ = value;
}
inline void CMsgSystemDockUpdateState::set_rtime_last_checked(uint32_t value) {
  _internal_set_rtime_last_checked(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDockUpdateState.rtime_last_checked)
}

// optional string version_current = 3;
inline bool CMsgSystemDockUpdateState::_internal_has_version_current() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemDockUpdateState::has_version_current() const {
  return _internal_has_version_current();
}
inline void CMsgSystemDockUpdateState::clear_version_current() {
  version_current_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSystemDockUpdateState::version_current() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDockUpdateState.version_current)
  return _internal_version_current();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemDockUpdateState::set_version_current(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 version_current_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemDockUpdateState.version_current)
}
inline std::string* CMsgSystemDockUpdateState::mutable_version_current() {
  std::string* _s = _internal_mutable_version_current();
  // @@protoc_insertion_point(field_mutable:CMsgSystemDockUpdateState.version_current)
  return _s;
}
inline const std::string& CMsgSystemDockUpdateState::_internal_version_current() const {
  return version_current_.Get();
}
inline void CMsgSystemDockUpdateState::_internal_set_version_current(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_current_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemDockUpdateState::_internal_mutable_version_current() {
  _has_bits_[0] |= 0x00000001u;
  return version_current_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemDockUpdateState::release_version_current() {
  // @@protoc_insertion_point(field_release:CMsgSystemDockUpdateState.version_current)
  if (!_internal_has_version_current()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = version_current_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_current_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_current_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemDockUpdateState::set_allocated_version_current(std::string* version_current) {
  if (version_current != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_current_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_current,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_current_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_current_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemDockUpdateState.version_current)
}

// optional string version_available = 4;
inline bool CMsgSystemDockUpdateState::_internal_has_version_available() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemDockUpdateState::has_version_available() const {
  return _internal_has_version_available();
}
inline void CMsgSystemDockUpdateState::clear_version_available() {
  version_available_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSystemDockUpdateState::version_available() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDockUpdateState.version_available)
  return _internal_version_available();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemDockUpdateState::set_version_available(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 version_available_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemDockUpdateState.version_available)
}
inline std::string* CMsgSystemDockUpdateState::mutable_version_available() {
  std::string* _s = _internal_mutable_version_available();
  // @@protoc_insertion_point(field_mutable:CMsgSystemDockUpdateState.version_available)
  return _s;
}
inline const std::string& CMsgSystemDockUpdateState::_internal_version_available() const {
  return version_available_.Get();
}
inline void CMsgSystemDockUpdateState::_internal_set_version_available(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_available_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemDockUpdateState::_internal_mutable_version_available() {
  _has_bits_[0] |= 0x00000002u;
  return version_available_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemDockUpdateState::release_version_available() {
  // @@protoc_insertion_point(field_release:CMsgSystemDockUpdateState.version_available)
  if (!_internal_has_version_available()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = version_available_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_available_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_available_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemDockUpdateState::set_allocated_version_available(std::string* version_available) {
  if (version_available != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_available_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_available,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_available_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_available_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemDockUpdateState.version_available)
}

// optional float stage_progress = 5;
inline bool CMsgSystemDockUpdateState::_internal_has_stage_progress() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSystemDockUpdateState::has_stage_progress() const {
  return _internal_has_stage_progress();
}
inline void CMsgSystemDockUpdateState::clear_stage_progress() {
  stage_progress_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CMsgSystemDockUpdateState::_internal_stage_progress() const {
  return stage_progress_;
}
inline float CMsgSystemDockUpdateState::stage_progress() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDockUpdateState.stage_progress)
  return _internal_stage_progress();
}
inline void CMsgSystemDockUpdateState::_internal_set_stage_progress(float value) {
  _has_bits_[0] |= 0x00000010u;
  stage_progress_ = value;
}
inline void CMsgSystemDockUpdateState::set_stage_progress(float value) {
  _internal_set_stage_progress(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDockUpdateState.stage_progress)
}

// optional fixed32 rtime_estimated_completion = 6;
inline bool CMsgSystemDockUpdateState::_internal_has_rtime_estimated_completion() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSystemDockUpdateState::has_rtime_estimated_completion() const {
  return _internal_has_rtime_estimated_completion();
}
inline void CMsgSystemDockUpdateState::clear_rtime_estimated_completion() {
  rtime_estimated_completion_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgSystemDockUpdateState::_internal_rtime_estimated_completion() const {
  return rtime_estimated_completion_;
}
inline uint32_t CMsgSystemDockUpdateState::rtime_estimated_completion() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDockUpdateState.rtime_estimated_completion)
  return _internal_rtime_estimated_completion();
}
inline void CMsgSystemDockUpdateState::_internal_set_rtime_estimated_completion(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  rtime_estimated_completion_ = value;
}
inline void CMsgSystemDockUpdateState::set_rtime_estimated_completion(uint32_t value) {
  _internal_set_rtime_estimated_completion(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDockUpdateState.rtime_estimated_completion)
}

// optional int32 old_fw_workaround = 7;
inline bool CMsgSystemDockUpdateState::_internal_has_old_fw_workaround() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSystemDockUpdateState::has_old_fw_workaround() const {
  return _internal_has_old_fw_workaround();
}
inline void CMsgSystemDockUpdateState::clear_old_fw_workaround() {
  old_fw_workaround_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t CMsgSystemDockUpdateState::_internal_old_fw_workaround() const {
  return old_fw_workaround_;
}
inline int32_t CMsgSystemDockUpdateState::old_fw_workaround() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDockUpdateState.old_fw_workaround)
  return _internal_old_fw_workaround();
}
inline void CMsgSystemDockUpdateState::_internal_set_old_fw_workaround(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  old_fw_workaround_ = value;
}
inline void CMsgSystemDockUpdateState::set_old_fw_workaround(int32_t value) {
  _internal_set_old_fw_workaround(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDockUpdateState.old_fw_workaround)
}

// -------------------------------------------------------------------

// CMsgSystemDockState

// optional .CMsgSystemDockUpdateState update_state = 1;
inline bool CMsgSystemDockState::_internal_has_update_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || update_state_ != nullptr);
  return value;
}
inline bool CMsgSystemDockState::has_update_state() const {
  return _internal_has_update_state();
}
inline void CMsgSystemDockState::clear_update_state() {
  if (update_state_ != nullptr) update_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSystemDockUpdateState& CMsgSystemDockState::_internal_update_state() const {
  const ::CMsgSystemDockUpdateState* p = update_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSystemDockUpdateState&>(
      ::_CMsgSystemDockUpdateState_default_instance_);
}
inline const ::CMsgSystemDockUpdateState& CMsgSystemDockState::update_state() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDockState.update_state)
  return _internal_update_state();
}
inline void CMsgSystemDockState::unsafe_arena_set_allocated_update_state(
    ::CMsgSystemDockUpdateState* update_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_state_);
  }
  update_state_ = update_state;
  if (update_state) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSystemDockState.update_state)
}
inline ::CMsgSystemDockUpdateState* CMsgSystemDockState::release_update_state() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSystemDockUpdateState* temp = update_state_;
  update_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSystemDockUpdateState* CMsgSystemDockState::unsafe_arena_release_update_state() {
  // @@protoc_insertion_point(field_release:CMsgSystemDockState.update_state)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSystemDockUpdateState* temp = update_state_;
  update_state_ = nullptr;
  return temp;
}
inline ::CMsgSystemDockUpdateState* CMsgSystemDockState::_internal_mutable_update_state() {
  _has_bits_[0] |= 0x00000001u;
  if (update_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSystemDockUpdateState>(GetArenaForAllocation());
    update_state_ = p;
  }
  return update_state_;
}
inline ::CMsgSystemDockUpdateState* CMsgSystemDockState::mutable_update_state() {
  ::CMsgSystemDockUpdateState* _msg = _internal_mutable_update_state();
  // @@protoc_insertion_point(field_mutable:CMsgSystemDockState.update_state)
  return _msg;
}
inline void CMsgSystemDockState::set_allocated_update_state(::CMsgSystemDockUpdateState* update_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete update_state_;
  }
  if (update_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSystemDockUpdateState>::GetOwningArena(update_state);
    if (message_arena != submessage_arena) {
      update_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  update_state_ = update_state;
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemDockState.update_state)
}

// -------------------------------------------------------------------

// CMsgSystemDockUpdateFirmware

// optional bool check_only = 1;
inline bool CMsgSystemDockUpdateFirmware::_internal_has_check_only() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemDockUpdateFirmware::has_check_only() const {
  return _internal_has_check_only();
}
inline void CMsgSystemDockUpdateFirmware::clear_check_only() {
  check_only_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgSystemDockUpdateFirmware::_internal_check_only() const {
  return check_only_;
}
inline bool CMsgSystemDockUpdateFirmware::check_only() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDockUpdateFirmware.check_only)
  return _internal_check_only();
}
inline void CMsgSystemDockUpdateFirmware::_internal_set_check_only(bool value) {
  _has_bits_[0] |= 0x00000001u;
  check_only_ = value;
}
inline void CMsgSystemDockUpdateFirmware::set_check_only(bool value) {
  _internal_set_check_only(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDockUpdateFirmware.check_only)
}

// -------------------------------------------------------------------

// CMsgSystemAudioVolume_ChannelEntry

// optional .ESystemAudioChannel echannel = 1 [default = k_SystemAudioChannel_Invalid];
inline bool CMsgSystemAudioVolume_ChannelEntry::_internal_has_echannel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemAudioVolume_ChannelEntry::has_echannel() const {
  return _internal_has_echannel();
}
inline void CMsgSystemAudioVolume_ChannelEntry::clear_echannel() {
  echannel_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ESystemAudioChannel CMsgSystemAudioVolume_ChannelEntry::_internal_echannel() const {
  return static_cast< ::ESystemAudioChannel >(echannel_);
}
inline ::ESystemAudioChannel CMsgSystemAudioVolume_ChannelEntry::echannel() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioVolume.ChannelEntry.echannel)
  return _internal_echannel();
}
inline void CMsgSystemAudioVolume_ChannelEntry::_internal_set_echannel(::ESystemAudioChannel value) {
  assert(::ESystemAudioChannel_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  echannel_ = value;
}
inline void CMsgSystemAudioVolume_ChannelEntry::set_echannel(::ESystemAudioChannel value) {
  _internal_set_echannel(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioVolume.ChannelEntry.echannel)
}

// optional float volume = 2;
inline bool CMsgSystemAudioVolume_ChannelEntry::_internal_has_volume() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemAudioVolume_ChannelEntry::has_volume() const {
  return _internal_has_volume();
}
inline void CMsgSystemAudioVolume_ChannelEntry::clear_volume() {
  volume_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgSystemAudioVolume_ChannelEntry::_internal_volume() const {
  return volume_;
}
inline float CMsgSystemAudioVolume_ChannelEntry::volume() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioVolume.ChannelEntry.volume)
  return _internal_volume();
}
inline void CMsgSystemAudioVolume_ChannelEntry::_internal_set_volume(float value) {
  _has_bits_[0] |= 0x00000002u;
  volume_ = value;
}
inline void CMsgSystemAudioVolume_ChannelEntry::set_volume(float value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioVolume.ChannelEntry.volume)
}

// -------------------------------------------------------------------

// CMsgSystemAudioVolume

// repeated .CMsgSystemAudioVolume.ChannelEntry entries = 1;
inline int CMsgSystemAudioVolume::_internal_entries_size() const {
  return entries_.size();
}
inline int CMsgSystemAudioVolume::entries_size() const {
  return _internal_entries_size();
}
inline void CMsgSystemAudioVolume::clear_entries() {
  entries_.Clear();
}
inline ::CMsgSystemAudioVolume_ChannelEntry* CMsgSystemAudioVolume::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioVolume.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioVolume_ChannelEntry >*
CMsgSystemAudioVolume::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemAudioVolume.entries)
  return &entries_;
}
inline const ::CMsgSystemAudioVolume_ChannelEntry& CMsgSystemAudioVolume::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::CMsgSystemAudioVolume_ChannelEntry& CMsgSystemAudioVolume::entries(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioVolume.entries)
  return _internal_entries(index);
}
inline ::CMsgSystemAudioVolume_ChannelEntry* CMsgSystemAudioVolume::_internal_add_entries() {
  return entries_.Add();
}
inline ::CMsgSystemAudioVolume_ChannelEntry* CMsgSystemAudioVolume::add_entries() {
  ::CMsgSystemAudioVolume_ChannelEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:CMsgSystemAudioVolume.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioVolume_ChannelEntry >&
CMsgSystemAudioVolume::entries() const {
  // @@protoc_insertion_point(field_list:CMsgSystemAudioVolume.entries)
  return entries_;
}

// optional bool is_muted = 2;
inline bool CMsgSystemAudioVolume::_internal_has_is_muted() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemAudioVolume::has_is_muted() const {
  return _internal_has_is_muted();
}
inline void CMsgSystemAudioVolume::clear_is_muted() {
  is_muted_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgSystemAudioVolume::_internal_is_muted() const {
  return is_muted_;
}
inline bool CMsgSystemAudioVolume::is_muted() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioVolume.is_muted)
  return _internal_is_muted();
}
inline void CMsgSystemAudioVolume::_internal_set_is_muted(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_muted_ = value;
}
inline void CMsgSystemAudioVolume::set_is_muted(bool value) {
  _internal_set_is_muted(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioVolume.is_muted)
}

// -------------------------------------------------------------------

// CMsgSystemAudioManagerObject

// optional uint32 id = 1;
inline bool CMsgSystemAudioManagerObject::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerObject::has_id() const {
  return _internal_has_id();
}
inline void CMsgSystemAudioManagerObject::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSystemAudioManagerObject::_internal_id() const {
  return id_;
}
inline uint32_t CMsgSystemAudioManagerObject::id() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerObject.id)
  return _internal_id();
}
inline void CMsgSystemAudioManagerObject::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void CMsgSystemAudioManagerObject::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerObject.id)
}

// optional fixed32 rtime_last_update = 2;
inline bool CMsgSystemAudioManagerObject::_internal_has_rtime_last_update() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerObject::has_rtime_last_update() const {
  return _internal_has_rtime_last_update();
}
inline void CMsgSystemAudioManagerObject::clear_rtime_last_update() {
  rtime_last_update_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSystemAudioManagerObject::_internal_rtime_last_update() const {
  return rtime_last_update_;
}
inline uint32_t CMsgSystemAudioManagerObject::rtime_last_update() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerObject.rtime_last_update)
  return _internal_rtime_last_update();
}
inline void CMsgSystemAudioManagerObject::_internal_set_rtime_last_update(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  rtime_last_update_ = value;
}
inline void CMsgSystemAudioManagerObject::set_rtime_last_update(uint32_t value) {
  _internal_set_rtime_last_update(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerObject.rtime_last_update)
}

// -------------------------------------------------------------------

// CMsgSystemAudioManagerDevice

// optional .CMsgSystemAudioManagerObject base = 1;
inline bool CMsgSystemAudioManagerDevice::_internal_has_base() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || base_ != nullptr);
  return value;
}
inline bool CMsgSystemAudioManagerDevice::has_base() const {
  return _internal_has_base();
}
inline void CMsgSystemAudioManagerDevice::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::CMsgSystemAudioManagerObject& CMsgSystemAudioManagerDevice::_internal_base() const {
  const ::CMsgSystemAudioManagerObject* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSystemAudioManagerObject&>(
      ::_CMsgSystemAudioManagerObject_default_instance_);
}
inline const ::CMsgSystemAudioManagerObject& CMsgSystemAudioManagerDevice::base() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerDevice.base)
  return _internal_base();
}
inline void CMsgSystemAudioManagerDevice::unsafe_arena_set_allocated_base(
    ::CMsgSystemAudioManagerObject* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSystemAudioManagerDevice.base)
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerDevice::release_base() {
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgSystemAudioManagerObject* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerDevice::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:CMsgSystemAudioManagerDevice.base)
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgSystemAudioManagerObject* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerDevice::_internal_mutable_base() {
  _has_bits_[0] |= 0x00000010u;
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSystemAudioManagerObject>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerDevice::mutable_base() {
  ::CMsgSystemAudioManagerObject* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerDevice.base)
  return _msg;
}
inline void CMsgSystemAudioManagerDevice::set_allocated_base(::CMsgSystemAudioManagerObject* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSystemAudioManagerObject>::GetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemAudioManagerDevice.base)
}

// optional string name = 2;
inline bool CMsgSystemAudioManagerDevice::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerDevice::has_name() const {
  return _internal_has_name();
}
inline void CMsgSystemAudioManagerDevice::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSystemAudioManagerDevice::name() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerDevice.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemAudioManagerDevice::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerDevice.name)
}
inline std::string* CMsgSystemAudioManagerDevice::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerDevice.name)
  return _s;
}
inline const std::string& CMsgSystemAudioManagerDevice::_internal_name() const {
  return name_.Get();
}
inline void CMsgSystemAudioManagerDevice::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerDevice::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerDevice::release_name() {
  // @@protoc_insertion_point(field_release:CMsgSystemAudioManagerDevice.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemAudioManagerDevice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemAudioManagerDevice.name)
}

// optional string nick = 3;
inline bool CMsgSystemAudioManagerDevice::_internal_has_nick() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerDevice::has_nick() const {
  return _internal_has_nick();
}
inline void CMsgSystemAudioManagerDevice::clear_nick() {
  nick_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSystemAudioManagerDevice::nick() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerDevice.nick)
  return _internal_nick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemAudioManagerDevice::set_nick(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerDevice.nick)
}
inline std::string* CMsgSystemAudioManagerDevice::mutable_nick() {
  std::string* _s = _internal_mutable_nick();
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerDevice.nick)
  return _s;
}
inline const std::string& CMsgSystemAudioManagerDevice::_internal_nick() const {
  return nick_.Get();
}
inline void CMsgSystemAudioManagerDevice::_internal_set_nick(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerDevice::_internal_mutable_nick() {
  _has_bits_[0] |= 0x00000002u;
  return nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerDevice::release_nick() {
  // @@protoc_insertion_point(field_release:CMsgSystemAudioManagerDevice.nick)
  if (!_internal_has_nick()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = nick_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nick_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemAudioManagerDevice::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nick_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemAudioManagerDevice.nick)
}

// optional string description = 4;
inline bool CMsgSystemAudioManagerDevice::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerDevice::has_description() const {
  return _internal_has_description();
}
inline void CMsgSystemAudioManagerDevice::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgSystemAudioManagerDevice::description() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerDevice.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemAudioManagerDevice::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerDevice.description)
}
inline std::string* CMsgSystemAudioManagerDevice::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerDevice.description)
  return _s;
}
inline const std::string& CMsgSystemAudioManagerDevice::_internal_description() const {
  return description_.Get();
}
inline void CMsgSystemAudioManagerDevice::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerDevice::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerDevice::release_description() {
  // @@protoc_insertion_point(field_release:CMsgSystemAudioManagerDevice.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemAudioManagerDevice::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemAudioManagerDevice.description)
}

// optional string api = 5;
inline bool CMsgSystemAudioManagerDevice::_internal_has_api() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerDevice::has_api() const {
  return _internal_has_api();
}
inline void CMsgSystemAudioManagerDevice::clear_api() {
  api_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgSystemAudioManagerDevice::api() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerDevice.api)
  return _internal_api();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemAudioManagerDevice::set_api(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 api_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerDevice.api)
}
inline std::string* CMsgSystemAudioManagerDevice::mutable_api() {
  std::string* _s = _internal_mutable_api();
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerDevice.api)
  return _s;
}
inline const std::string& CMsgSystemAudioManagerDevice::_internal_api() const {
  return api_.Get();
}
inline void CMsgSystemAudioManagerDevice::_internal_set_api(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  api_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerDevice::_internal_mutable_api() {
  _has_bits_[0] |= 0x00000008u;
  return api_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerDevice::release_api() {
  // @@protoc_insertion_point(field_release:CMsgSystemAudioManagerDevice.api)
  if (!_internal_has_api()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = api_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (api_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    api_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemAudioManagerDevice::set_allocated_api(std::string* api) {
  if (api != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  api_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (api_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    api_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemAudioManagerDevice.api)
}

// -------------------------------------------------------------------

// CMsgSystemAudioManagerNode

// optional .CMsgSystemAudioManagerObject base = 1;
inline bool CMsgSystemAudioManagerNode::_internal_has_base() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || base_ != nullptr);
  return value;
}
inline bool CMsgSystemAudioManagerNode::has_base() const {
  return _internal_has_base();
}
inline void CMsgSystemAudioManagerNode::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgSystemAudioManagerObject& CMsgSystemAudioManagerNode::_internal_base() const {
  const ::CMsgSystemAudioManagerObject* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSystemAudioManagerObject&>(
      ::_CMsgSystemAudioManagerObject_default_instance_);
}
inline const ::CMsgSystemAudioManagerObject& CMsgSystemAudioManagerNode::base() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerNode.base)
  return _internal_base();
}
inline void CMsgSystemAudioManagerNode::unsafe_arena_set_allocated_base(
    ::CMsgSystemAudioManagerObject* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSystemAudioManagerNode.base)
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerNode::release_base() {
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgSystemAudioManagerObject* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerNode::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:CMsgSystemAudioManagerNode.base)
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgSystemAudioManagerObject* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerNode::_internal_mutable_base() {
  _has_bits_[0] |= 0x00000008u;
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSystemAudioManagerObject>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerNode::mutable_base() {
  ::CMsgSystemAudioManagerObject* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerNode.base)
  return _msg;
}
inline void CMsgSystemAudioManagerNode::set_allocated_base(::CMsgSystemAudioManagerObject* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSystemAudioManagerObject>::GetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemAudioManagerNode.base)
}

// optional uint32 device_id = 2;
inline bool CMsgSystemAudioManagerNode::_internal_has_device_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerNode::has_device_id() const {
  return _internal_has_device_id();
}
inline void CMsgSystemAudioManagerNode::clear_device_id() {
  device_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgSystemAudioManagerNode::_internal_device_id() const {
  return device_id_;
}
inline uint32_t CMsgSystemAudioManagerNode::device_id() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerNode.device_id)
  return _internal_device_id();
}
inline void CMsgSystemAudioManagerNode::_internal_set_device_id(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  device_id_ = value;
}
inline void CMsgSystemAudioManagerNode::set_device_id(uint32_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerNode.device_id)
}

// optional string name = 3;
inline bool CMsgSystemAudioManagerNode::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerNode::has_name() const {
  return _internal_has_name();
}
inline void CMsgSystemAudioManagerNode::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSystemAudioManagerNode::name() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerNode.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemAudioManagerNode::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerNode.name)
}
inline std::string* CMsgSystemAudioManagerNode::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerNode.name)
  return _s;
}
inline const std::string& CMsgSystemAudioManagerNode::_internal_name() const {
  return name_.Get();
}
inline void CMsgSystemAudioManagerNode::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerNode::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerNode::release_name() {
  // @@protoc_insertion_point(field_release:CMsgSystemAudioManagerNode.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemAudioManagerNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemAudioManagerNode.name)
}

// optional string nick = 4;
inline bool CMsgSystemAudioManagerNode::_internal_has_nick() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerNode::has_nick() const {
  return _internal_has_nick();
}
inline void CMsgSystemAudioManagerNode::clear_nick() {
  nick_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSystemAudioManagerNode::nick() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerNode.nick)
  return _internal_nick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemAudioManagerNode::set_nick(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerNode.nick)
}
inline std::string* CMsgSystemAudioManagerNode::mutable_nick() {
  std::string* _s = _internal_mutable_nick();
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerNode.nick)
  return _s;
}
inline const std::string& CMsgSystemAudioManagerNode::_internal_nick() const {
  return nick_.Get();
}
inline void CMsgSystemAudioManagerNode::_internal_set_nick(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerNode::_internal_mutable_nick() {
  _has_bits_[0] |= 0x00000002u;
  return nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerNode::release_nick() {
  // @@protoc_insertion_point(field_release:CMsgSystemAudioManagerNode.nick)
  if (!_internal_has_nick()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = nick_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nick_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemAudioManagerNode::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nick_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nick_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemAudioManagerNode.nick)
}

// optional string description = 5;
inline bool CMsgSystemAudioManagerNode::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerNode::has_description() const {
  return _internal_has_description();
}
inline void CMsgSystemAudioManagerNode::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgSystemAudioManagerNode::description() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerNode.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemAudioManagerNode::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerNode.description)
}
inline std::string* CMsgSystemAudioManagerNode::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerNode.description)
  return _s;
}
inline const std::string& CMsgSystemAudioManagerNode::_internal_description() const {
  return description_.Get();
}
inline void CMsgSystemAudioManagerNode::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerNode::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerNode::release_description() {
  // @@protoc_insertion_point(field_release:CMsgSystemAudioManagerNode.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemAudioManagerNode::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemAudioManagerNode.description)
}

// optional .ESystemAudioDirection edirection = 6 [default = k_SystemAudioDirection_Invalid];
inline bool CMsgSystemAudioManagerNode::_internal_has_edirection() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerNode::has_edirection() const {
  return _internal_has_edirection();
}
inline void CMsgSystemAudioManagerNode::clear_edirection() {
  edirection_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::ESystemAudioDirection CMsgSystemAudioManagerNode::_internal_edirection() const {
  return static_cast< ::ESystemAudioDirection >(edirection_);
}
inline ::ESystemAudioDirection CMsgSystemAudioManagerNode::edirection() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerNode.edirection)
  return _internal_edirection();
}
inline void CMsgSystemAudioManagerNode::_internal_set_edirection(::ESystemAudioDirection value) {
  assert(::ESystemAudioDirection_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  edirection_ = value;
}
inline void CMsgSystemAudioManagerNode::set_edirection(::ESystemAudioDirection value) {
  _internal_set_edirection(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerNode.edirection)
}

// optional .CMsgSystemAudioVolume volume = 7;
inline bool CMsgSystemAudioManagerNode::_internal_has_volume() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || volume_ != nullptr);
  return value;
}
inline bool CMsgSystemAudioManagerNode::has_volume() const {
  return _internal_has_volume();
}
inline void CMsgSystemAudioManagerNode::clear_volume() {
  if (volume_ != nullptr) volume_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::CMsgSystemAudioVolume& CMsgSystemAudioManagerNode::_internal_volume() const {
  const ::CMsgSystemAudioVolume* p = volume_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSystemAudioVolume&>(
      ::_CMsgSystemAudioVolume_default_instance_);
}
inline const ::CMsgSystemAudioVolume& CMsgSystemAudioManagerNode::volume() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerNode.volume)
  return _internal_volume();
}
inline void CMsgSystemAudioManagerNode::unsafe_arena_set_allocated_volume(
    ::CMsgSystemAudioVolume* volume) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(volume_);
  }
  volume_ = volume;
  if (volume) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSystemAudioManagerNode.volume)
}
inline ::CMsgSystemAudioVolume* CMsgSystemAudioManagerNode::release_volume() {
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgSystemAudioVolume* temp = volume_;
  volume_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSystemAudioVolume* CMsgSystemAudioManagerNode::unsafe_arena_release_volume() {
  // @@protoc_insertion_point(field_release:CMsgSystemAudioManagerNode.volume)
  _has_bits_[0] &= ~0x00000010u;
  ::CMsgSystemAudioVolume* temp = volume_;
  volume_ = nullptr;
  return temp;
}
inline ::CMsgSystemAudioVolume* CMsgSystemAudioManagerNode::_internal_mutable_volume() {
  _has_bits_[0] |= 0x00000010u;
  if (volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSystemAudioVolume>(GetArenaForAllocation());
    volume_ = p;
  }
  return volume_;
}
inline ::CMsgSystemAudioVolume* CMsgSystemAudioManagerNode::mutable_volume() {
  ::CMsgSystemAudioVolume* _msg = _internal_mutable_volume();
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerNode.volume)
  return _msg;
}
inline void CMsgSystemAudioManagerNode::set_allocated_volume(::CMsgSystemAudioVolume* volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete volume_;
  }
  if (volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSystemAudioVolume>::GetOwningArena(volume);
    if (message_arena != submessage_arena) {
      volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  volume_ = volume;
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemAudioManagerNode.volume)
}

// -------------------------------------------------------------------

// CMsgSystemAudioManagerPort

// optional .CMsgSystemAudioManagerObject base = 1;
inline bool CMsgSystemAudioManagerPort::_internal_has_base() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || base_ != nullptr);
  return value;
}
inline bool CMsgSystemAudioManagerPort::has_base() const {
  return _internal_has_base();
}
inline void CMsgSystemAudioManagerPort::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgSystemAudioManagerObject& CMsgSystemAudioManagerPort::_internal_base() const {
  const ::CMsgSystemAudioManagerObject* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSystemAudioManagerObject&>(
      ::_CMsgSystemAudioManagerObject_default_instance_);
}
inline const ::CMsgSystemAudioManagerObject& CMsgSystemAudioManagerPort::base() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerPort.base)
  return _internal_base();
}
inline void CMsgSystemAudioManagerPort::unsafe_arena_set_allocated_base(
    ::CMsgSystemAudioManagerObject* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSystemAudioManagerPort.base)
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerPort::release_base() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgSystemAudioManagerObject* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerPort::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:CMsgSystemAudioManagerPort.base)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgSystemAudioManagerObject* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerPort::_internal_mutable_base() {
  _has_bits_[0] |= 0x00000004u;
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSystemAudioManagerObject>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerPort::mutable_base() {
  ::CMsgSystemAudioManagerObject* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerPort.base)
  return _msg;
}
inline void CMsgSystemAudioManagerPort::set_allocated_base(::CMsgSystemAudioManagerObject* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSystemAudioManagerObject>::GetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemAudioManagerPort.base)
}

// optional uint32 node_id = 3;
inline bool CMsgSystemAudioManagerPort::_internal_has_node_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerPort::has_node_id() const {
  return _internal_has_node_id();
}
inline void CMsgSystemAudioManagerPort::clear_node_id() {
  node_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSystemAudioManagerPort::_internal_node_id() const {
  return node_id_;
}
inline uint32_t CMsgSystemAudioManagerPort::node_id() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerPort.node_id)
  return _internal_node_id();
}
inline void CMsgSystemAudioManagerPort::_internal_set_node_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  node_id_ = value;
}
inline void CMsgSystemAudioManagerPort::set_node_id(uint32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerPort.node_id)
}

// optional string name = 4;
inline bool CMsgSystemAudioManagerPort::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerPort::has_name() const {
  return _internal_has_name();
}
inline void CMsgSystemAudioManagerPort::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSystemAudioManagerPort::name() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerPort.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemAudioManagerPort::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerPort.name)
}
inline std::string* CMsgSystemAudioManagerPort::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerPort.name)
  return _s;
}
inline const std::string& CMsgSystemAudioManagerPort::_internal_name() const {
  return name_.Get();
}
inline void CMsgSystemAudioManagerPort::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerPort::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerPort::release_name() {
  // @@protoc_insertion_point(field_release:CMsgSystemAudioManagerPort.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemAudioManagerPort::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemAudioManagerPort.name)
}

// optional string alias = 5;
inline bool CMsgSystemAudioManagerPort::_internal_has_alias() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerPort::has_alias() const {
  return _internal_has_alias();
}
inline void CMsgSystemAudioManagerPort::clear_alias() {
  alias_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSystemAudioManagerPort::alias() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerPort.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemAudioManagerPort::set_alias(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerPort.alias)
}
inline std::string* CMsgSystemAudioManagerPort::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerPort.alias)
  return _s;
}
inline const std::string& CMsgSystemAudioManagerPort::_internal_alias() const {
  return alias_.Get();
}
inline void CMsgSystemAudioManagerPort::_internal_set_alias(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerPort::_internal_mutable_alias() {
  _has_bits_[0] |= 0x00000002u;
  return alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemAudioManagerPort::release_alias() {
  // @@protoc_insertion_point(field_release:CMsgSystemAudioManagerPort.alias)
  if (!_internal_has_alias()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = alias_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (alias_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemAudioManagerPort::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (alias_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemAudioManagerPort.alias)
}

// optional .ESystemAudioPortType etype = 6 [default = k_SystemAudioPortType_Invalid];
inline bool CMsgSystemAudioManagerPort::_internal_has_etype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerPort::has_etype() const {
  return _internal_has_etype();
}
inline void CMsgSystemAudioManagerPort::clear_etype() {
  etype_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::ESystemAudioPortType CMsgSystemAudioManagerPort::_internal_etype() const {
  return static_cast< ::ESystemAudioPortType >(etype_);
}
inline ::ESystemAudioPortType CMsgSystemAudioManagerPort::etype() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerPort.etype)
  return _internal_etype();
}
inline void CMsgSystemAudioManagerPort::_internal_set_etype(::ESystemAudioPortType value) {
  assert(::ESystemAudioPortType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  etype_ = value;
}
inline void CMsgSystemAudioManagerPort::set_etype(::ESystemAudioPortType value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerPort.etype)
}

// optional .ESystemAudioPortDirection edirection = 7 [default = k_SystemAudioPortDirection_Invalid];
inline bool CMsgSystemAudioManagerPort::_internal_has_edirection() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerPort::has_edirection() const {
  return _internal_has_edirection();
}
inline void CMsgSystemAudioManagerPort::clear_edirection() {
  edirection_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::ESystemAudioPortDirection CMsgSystemAudioManagerPort::_internal_edirection() const {
  return static_cast< ::ESystemAudioPortDirection >(edirection_);
}
inline ::ESystemAudioPortDirection CMsgSystemAudioManagerPort::edirection() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerPort.edirection)
  return _internal_edirection();
}
inline void CMsgSystemAudioManagerPort::_internal_set_edirection(::ESystemAudioPortDirection value) {
  assert(::ESystemAudioPortDirection_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  edirection_ = value;
}
inline void CMsgSystemAudioManagerPort::set_edirection(::ESystemAudioPortDirection value) {
  _internal_set_edirection(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerPort.edirection)
}

// optional bool is_physical = 8;
inline bool CMsgSystemAudioManagerPort::_internal_has_is_physical() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerPort::has_is_physical() const {
  return _internal_has_is_physical();
}
inline void CMsgSystemAudioManagerPort::clear_is_physical() {
  is_physical_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgSystemAudioManagerPort::_internal_is_physical() const {
  return is_physical_;
}
inline bool CMsgSystemAudioManagerPort::is_physical() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerPort.is_physical)
  return _internal_is_physical();
}
inline void CMsgSystemAudioManagerPort::_internal_set_is_physical(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_physical_ = value;
}
inline void CMsgSystemAudioManagerPort::set_is_physical(bool value) {
  _internal_set_is_physical(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerPort.is_physical)
}

// optional bool is_terminal = 9;
inline bool CMsgSystemAudioManagerPort::_internal_has_is_terminal() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerPort::has_is_terminal() const {
  return _internal_has_is_terminal();
}
inline void CMsgSystemAudioManagerPort::clear_is_terminal() {
  is_terminal_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgSystemAudioManagerPort::_internal_is_terminal() const {
  return is_terminal_;
}
inline bool CMsgSystemAudioManagerPort::is_terminal() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerPort.is_terminal)
  return _internal_is_terminal();
}
inline void CMsgSystemAudioManagerPort::_internal_set_is_terminal(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_terminal_ = value;
}
inline void CMsgSystemAudioManagerPort::set_is_terminal(bool value) {
  _internal_set_is_terminal(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerPort.is_terminal)
}

// optional bool is_control = 10;
inline bool CMsgSystemAudioManagerPort::_internal_has_is_control() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerPort::has_is_control() const {
  return _internal_has_is_control();
}
inline void CMsgSystemAudioManagerPort::clear_is_control() {
  is_control_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgSystemAudioManagerPort::_internal_is_control() const {
  return is_control_;
}
inline bool CMsgSystemAudioManagerPort::is_control() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerPort.is_control)
  return _internal_is_control();
}
inline void CMsgSystemAudioManagerPort::_internal_set_is_control(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_control_ = value;
}
inline void CMsgSystemAudioManagerPort::set_is_control(bool value) {
  _internal_set_is_control(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerPort.is_control)
}

// optional bool is_monitor = 11;
inline bool CMsgSystemAudioManagerPort::_internal_has_is_monitor() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerPort::has_is_monitor() const {
  return _internal_has_is_monitor();
}
inline void CMsgSystemAudioManagerPort::clear_is_monitor() {
  is_monitor_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgSystemAudioManagerPort::_internal_is_monitor() const {
  return is_monitor_;
}
inline bool CMsgSystemAudioManagerPort::is_monitor() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerPort.is_monitor)
  return _internal_is_monitor();
}
inline void CMsgSystemAudioManagerPort::_internal_set_is_monitor(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_monitor_ = value;
}
inline void CMsgSystemAudioManagerPort::set_is_monitor(bool value) {
  _internal_set_is_monitor(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerPort.is_monitor)
}

// -------------------------------------------------------------------

// CMsgSystemAudioManagerLink

// optional .CMsgSystemAudioManagerObject base = 1;
inline bool CMsgSystemAudioManagerLink::_internal_has_base() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || base_ != nullptr);
  return value;
}
inline bool CMsgSystemAudioManagerLink::has_base() const {
  return _internal_has_base();
}
inline void CMsgSystemAudioManagerLink::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSystemAudioManagerObject& CMsgSystemAudioManagerLink::_internal_base() const {
  const ::CMsgSystemAudioManagerObject* p = base_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSystemAudioManagerObject&>(
      ::_CMsgSystemAudioManagerObject_default_instance_);
}
inline const ::CMsgSystemAudioManagerObject& CMsgSystemAudioManagerLink::base() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerLink.base)
  return _internal_base();
}
inline void CMsgSystemAudioManagerLink::unsafe_arena_set_allocated_base(
    ::CMsgSystemAudioManagerObject* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  base_ = base;
  if (base) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSystemAudioManagerLink.base)
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerLink::release_base() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSystemAudioManagerObject* temp = base_;
  base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerLink::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:CMsgSystemAudioManagerLink.base)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSystemAudioManagerObject* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerLink::_internal_mutable_base() {
  _has_bits_[0] |= 0x00000001u;
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSystemAudioManagerObject>(GetArenaForAllocation());
    base_ = p;
  }
  return base_;
}
inline ::CMsgSystemAudioManagerObject* CMsgSystemAudioManagerLink::mutable_base() {
  ::CMsgSystemAudioManagerObject* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerLink.base)
  return _msg;
}
inline void CMsgSystemAudioManagerLink::set_allocated_base(::CMsgSystemAudioManagerObject* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSystemAudioManagerObject>::GetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemAudioManagerLink.base)
}

// optional uint32 output_node_id = 2;
inline bool CMsgSystemAudioManagerLink::_internal_has_output_node_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerLink::has_output_node_id() const {
  return _internal_has_output_node_id();
}
inline void CMsgSystemAudioManagerLink::clear_output_node_id() {
  output_node_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSystemAudioManagerLink::_internal_output_node_id() const {
  return output_node_id_;
}
inline uint32_t CMsgSystemAudioManagerLink::output_node_id() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerLink.output_node_id)
  return _internal_output_node_id();
}
inline void CMsgSystemAudioManagerLink::_internal_set_output_node_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  output_node_id_ = value;
}
inline void CMsgSystemAudioManagerLink::set_output_node_id(uint32_t value) {
  _internal_set_output_node_id(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerLink.output_node_id)
}

// optional uint32 output_port_id = 3;
inline bool CMsgSystemAudioManagerLink::_internal_has_output_port_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerLink::has_output_port_id() const {
  return _internal_has_output_port_id();
}
inline void CMsgSystemAudioManagerLink::clear_output_port_id() {
  output_port_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSystemAudioManagerLink::_internal_output_port_id() const {
  return output_port_id_;
}
inline uint32_t CMsgSystemAudioManagerLink::output_port_id() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerLink.output_port_id)
  return _internal_output_port_id();
}
inline void CMsgSystemAudioManagerLink::_internal_set_output_port_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  output_port_id_ = value;
}
inline void CMsgSystemAudioManagerLink::set_output_port_id(uint32_t value) {
  _internal_set_output_port_id(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerLink.output_port_id)
}

// optional uint32 input_node_id = 4;
inline bool CMsgSystemAudioManagerLink::_internal_has_input_node_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerLink::has_input_node_id() const {
  return _internal_has_input_node_id();
}
inline void CMsgSystemAudioManagerLink::clear_input_node_id() {
  input_node_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSystemAudioManagerLink::_internal_input_node_id() const {
  return input_node_id_;
}
inline uint32_t CMsgSystemAudioManagerLink::input_node_id() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerLink.input_node_id)
  return _internal_input_node_id();
}
inline void CMsgSystemAudioManagerLink::_internal_set_input_node_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  input_node_id_ = value;
}
inline void CMsgSystemAudioManagerLink::set_input_node_id(uint32_t value) {
  _internal_set_input_node_id(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerLink.input_node_id)
}

// optional uint32 input_port_id = 5;
inline bool CMsgSystemAudioManagerLink::_internal_has_input_port_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerLink::has_input_port_id() const {
  return _internal_has_input_port_id();
}
inline void CMsgSystemAudioManagerLink::clear_input_port_id() {
  input_port_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSystemAudioManagerLink::_internal_input_port_id() const {
  return input_port_id_;
}
inline uint32_t CMsgSystemAudioManagerLink::input_port_id() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerLink.input_port_id)
  return _internal_input_port_id();
}
inline void CMsgSystemAudioManagerLink::_internal_set_input_port_id(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  input_port_id_ = value;
}
inline void CMsgSystemAudioManagerLink::set_input_port_id(uint32_t value) {
  _internal_set_input_port_id(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerLink.input_port_id)
}

// -------------------------------------------------------------------

// CMsgSystemAudioManagerStateHW

// repeated .CMsgSystemAudioManagerDevice devices = 1;
inline int CMsgSystemAudioManagerStateHW::_internal_devices_size() const {
  return devices_.size();
}
inline int CMsgSystemAudioManagerStateHW::devices_size() const {
  return _internal_devices_size();
}
inline void CMsgSystemAudioManagerStateHW::clear_devices() {
  devices_.Clear();
}
inline ::CMsgSystemAudioManagerDevice* CMsgSystemAudioManagerStateHW::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerStateHW.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerDevice >*
CMsgSystemAudioManagerStateHW::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemAudioManagerStateHW.devices)
  return &devices_;
}
inline const ::CMsgSystemAudioManagerDevice& CMsgSystemAudioManagerStateHW::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::CMsgSystemAudioManagerDevice& CMsgSystemAudioManagerStateHW::devices(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerStateHW.devices)
  return _internal_devices(index);
}
inline ::CMsgSystemAudioManagerDevice* CMsgSystemAudioManagerStateHW::_internal_add_devices() {
  return devices_.Add();
}
inline ::CMsgSystemAudioManagerDevice* CMsgSystemAudioManagerStateHW::add_devices() {
  ::CMsgSystemAudioManagerDevice* _add = _internal_add_devices();
  // @@protoc_insertion_point(field_add:CMsgSystemAudioManagerStateHW.devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerDevice >&
CMsgSystemAudioManagerStateHW::devices() const {
  // @@protoc_insertion_point(field_list:CMsgSystemAudioManagerStateHW.devices)
  return devices_;
}

// repeated .CMsgSystemAudioManagerNode nodes = 2;
inline int CMsgSystemAudioManagerStateHW::_internal_nodes_size() const {
  return nodes_.size();
}
inline int CMsgSystemAudioManagerStateHW::nodes_size() const {
  return _internal_nodes_size();
}
inline void CMsgSystemAudioManagerStateHW::clear_nodes() {
  nodes_.Clear();
}
inline ::CMsgSystemAudioManagerNode* CMsgSystemAudioManagerStateHW::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerStateHW.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerNode >*
CMsgSystemAudioManagerStateHW::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemAudioManagerStateHW.nodes)
  return &nodes_;
}
inline const ::CMsgSystemAudioManagerNode& CMsgSystemAudioManagerStateHW::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::CMsgSystemAudioManagerNode& CMsgSystemAudioManagerStateHW::nodes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerStateHW.nodes)
  return _internal_nodes(index);
}
inline ::CMsgSystemAudioManagerNode* CMsgSystemAudioManagerStateHW::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::CMsgSystemAudioManagerNode* CMsgSystemAudioManagerStateHW::add_nodes() {
  ::CMsgSystemAudioManagerNode* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:CMsgSystemAudioManagerStateHW.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerNode >&
CMsgSystemAudioManagerStateHW::nodes() const {
  // @@protoc_insertion_point(field_list:CMsgSystemAudioManagerStateHW.nodes)
  return nodes_;
}

// repeated .CMsgSystemAudioManagerPort ports = 3;
inline int CMsgSystemAudioManagerStateHW::_internal_ports_size() const {
  return ports_.size();
}
inline int CMsgSystemAudioManagerStateHW::ports_size() const {
  return _internal_ports_size();
}
inline void CMsgSystemAudioManagerStateHW::clear_ports() {
  ports_.Clear();
}
inline ::CMsgSystemAudioManagerPort* CMsgSystemAudioManagerStateHW::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerStateHW.ports)
  return ports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerPort >*
CMsgSystemAudioManagerStateHW::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemAudioManagerStateHW.ports)
  return &ports_;
}
inline const ::CMsgSystemAudioManagerPort& CMsgSystemAudioManagerStateHW::_internal_ports(int index) const {
  return ports_.Get(index);
}
inline const ::CMsgSystemAudioManagerPort& CMsgSystemAudioManagerStateHW::ports(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerStateHW.ports)
  return _internal_ports(index);
}
inline ::CMsgSystemAudioManagerPort* CMsgSystemAudioManagerStateHW::_internal_add_ports() {
  return ports_.Add();
}
inline ::CMsgSystemAudioManagerPort* CMsgSystemAudioManagerStateHW::add_ports() {
  ::CMsgSystemAudioManagerPort* _add = _internal_add_ports();
  // @@protoc_insertion_point(field_add:CMsgSystemAudioManagerStateHW.ports)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerPort >&
CMsgSystemAudioManagerStateHW::ports() const {
  // @@protoc_insertion_point(field_list:CMsgSystemAudioManagerStateHW.ports)
  return ports_;
}

// repeated .CMsgSystemAudioManagerLink links = 4;
inline int CMsgSystemAudioManagerStateHW::_internal_links_size() const {
  return links_.size();
}
inline int CMsgSystemAudioManagerStateHW::links_size() const {
  return _internal_links_size();
}
inline void CMsgSystemAudioManagerStateHW::clear_links() {
  links_.Clear();
}
inline ::CMsgSystemAudioManagerLink* CMsgSystemAudioManagerStateHW::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerStateHW.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerLink >*
CMsgSystemAudioManagerStateHW::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemAudioManagerStateHW.links)
  return &links_;
}
inline const ::CMsgSystemAudioManagerLink& CMsgSystemAudioManagerStateHW::_internal_links(int index) const {
  return links_.Get(index);
}
inline const ::CMsgSystemAudioManagerLink& CMsgSystemAudioManagerStateHW::links(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerStateHW.links)
  return _internal_links(index);
}
inline ::CMsgSystemAudioManagerLink* CMsgSystemAudioManagerStateHW::_internal_add_links() {
  return links_.Add();
}
inline ::CMsgSystemAudioManagerLink* CMsgSystemAudioManagerStateHW::add_links() {
  ::CMsgSystemAudioManagerLink* _add = _internal_add_links();
  // @@protoc_insertion_point(field_add:CMsgSystemAudioManagerStateHW.links)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemAudioManagerLink >&
CMsgSystemAudioManagerStateHW::links() const {
  // @@protoc_insertion_point(field_list:CMsgSystemAudioManagerStateHW.links)
  return links_;
}

// -------------------------------------------------------------------

// CMsgSystemAudioManagerState

// optional fixed32 rtime_filter = 1;
inline bool CMsgSystemAudioManagerState::_internal_has_rtime_filter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerState::has_rtime_filter() const {
  return _internal_has_rtime_filter();
}
inline void CMsgSystemAudioManagerState::clear_rtime_filter() {
  rtime_filter_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSystemAudioManagerState::_internal_rtime_filter() const {
  return rtime_filter_;
}
inline uint32_t CMsgSystemAudioManagerState::rtime_filter() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerState.rtime_filter)
  return _internal_rtime_filter();
}
inline void CMsgSystemAudioManagerState::_internal_set_rtime_filter(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  rtime_filter_ = value;
}
inline void CMsgSystemAudioManagerState::set_rtime_filter(uint32_t value) {
  _internal_set_rtime_filter(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerState.rtime_filter)
}

// optional int32 counter = 2;
inline bool CMsgSystemAudioManagerState::_internal_has_counter() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerState::has_counter() const {
  return _internal_has_counter();
}
inline void CMsgSystemAudioManagerState::clear_counter() {
  counter_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgSystemAudioManagerState::_internal_counter() const {
  return counter_;
}
inline int32_t CMsgSystemAudioManagerState::counter() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerState.counter)
  return _internal_counter();
}
inline void CMsgSystemAudioManagerState::_internal_set_counter(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  counter_ = value;
}
inline void CMsgSystemAudioManagerState::set_counter(int32_t value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerState.counter)
}

// optional .CMsgSystemAudioManagerStateHW hw = 3;
inline bool CMsgSystemAudioManagerState::_internal_has_hw() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || hw_ != nullptr);
  return value;
}
inline bool CMsgSystemAudioManagerState::has_hw() const {
  return _internal_has_hw();
}
inline void CMsgSystemAudioManagerState::clear_hw() {
  if (hw_ != nullptr) hw_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSystemAudioManagerStateHW& CMsgSystemAudioManagerState::_internal_hw() const {
  const ::CMsgSystemAudioManagerStateHW* p = hw_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSystemAudioManagerStateHW&>(
      ::_CMsgSystemAudioManagerStateHW_default_instance_);
}
inline const ::CMsgSystemAudioManagerStateHW& CMsgSystemAudioManagerState::hw() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerState.hw)
  return _internal_hw();
}
inline void CMsgSystemAudioManagerState::unsafe_arena_set_allocated_hw(
    ::CMsgSystemAudioManagerStateHW* hw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hw_);
  }
  hw_ = hw;
  if (hw) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSystemAudioManagerState.hw)
}
inline ::CMsgSystemAudioManagerStateHW* CMsgSystemAudioManagerState::release_hw() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSystemAudioManagerStateHW* temp = hw_;
  hw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSystemAudioManagerStateHW* CMsgSystemAudioManagerState::unsafe_arena_release_hw() {
  // @@protoc_insertion_point(field_release:CMsgSystemAudioManagerState.hw)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSystemAudioManagerStateHW* temp = hw_;
  hw_ = nullptr;
  return temp;
}
inline ::CMsgSystemAudioManagerStateHW* CMsgSystemAudioManagerState::_internal_mutable_hw() {
  _has_bits_[0] |= 0x00000001u;
  if (hw_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSystemAudioManagerStateHW>(GetArenaForAllocation());
    hw_ = p;
  }
  return hw_;
}
inline ::CMsgSystemAudioManagerStateHW* CMsgSystemAudioManagerState::mutable_hw() {
  ::CMsgSystemAudioManagerStateHW* _msg = _internal_mutable_hw();
  // @@protoc_insertion_point(field_mutable:CMsgSystemAudioManagerState.hw)
  return _msg;
}
inline void CMsgSystemAudioManagerState::set_allocated_hw(::CMsgSystemAudioManagerStateHW* hw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete hw_;
  }
  if (hw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSystemAudioManagerStateHW>::GetOwningArena(hw);
    if (message_arena != submessage_arena) {
      hw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hw, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hw_ = hw;
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemAudioManagerState.hw)
}

// -------------------------------------------------------------------

// CMsgSystemAudioManagerUpdateSomething

// optional int32 counter = 1;
inline bool CMsgSystemAudioManagerUpdateSomething::_internal_has_counter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemAudioManagerUpdateSomething::has_counter() const {
  return _internal_has_counter();
}
inline void CMsgSystemAudioManagerUpdateSomething::clear_counter() {
  counter_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgSystemAudioManagerUpdateSomething::_internal_counter() const {
  return counter_;
}
inline int32_t CMsgSystemAudioManagerUpdateSomething::counter() const {
  // @@protoc_insertion_point(field_get:CMsgSystemAudioManagerUpdateSomething.counter)
  return _internal_counter();
}
inline void CMsgSystemAudioManagerUpdateSomething::_internal_set_counter(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  counter_ = value;
}
inline void CMsgSystemAudioManagerUpdateSomething::set_counter(int32_t value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:CMsgSystemAudioManagerUpdateSomething.counter)
}

// -------------------------------------------------------------------

// CMsgSystemDisplayMode

// optional int32 id = 1;
inline bool CMsgSystemDisplayMode::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemDisplayMode::has_id() const {
  return _internal_has_id();
}
inline void CMsgSystemDisplayMode::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgSystemDisplayMode::_internal_id() const {
  return id_;
}
inline int32_t CMsgSystemDisplayMode::id() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplayMode.id)
  return _internal_id();
}
inline void CMsgSystemDisplayMode::_internal_set_id(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void CMsgSystemDisplayMode::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplayMode.id)
}

// optional int32 width = 2;
inline bool CMsgSystemDisplayMode::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemDisplayMode::has_width() const {
  return _internal_has_width();
}
inline void CMsgSystemDisplayMode::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgSystemDisplayMode::_internal_width() const {
  return width_;
}
inline int32_t CMsgSystemDisplayMode::width() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplayMode.width)
  return _internal_width();
}
inline void CMsgSystemDisplayMode::_internal_set_width(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void CMsgSystemDisplayMode::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplayMode.width)
}

// optional int32 height = 3;
inline bool CMsgSystemDisplayMode::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemDisplayMode::has_height() const {
  return _internal_has_height();
}
inline void CMsgSystemDisplayMode::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgSystemDisplayMode::_internal_height() const {
  return height_;
}
inline int32_t CMsgSystemDisplayMode::height() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplayMode.height)
  return _internal_height();
}
inline void CMsgSystemDisplayMode::_internal_set_height(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void CMsgSystemDisplayMode::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplayMode.height)
}

// optional int32 refresh_hz = 4;
inline bool CMsgSystemDisplayMode::_internal_has_refresh_hz() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSystemDisplayMode::has_refresh_hz() const {
  return _internal_has_refresh_hz();
}
inline void CMsgSystemDisplayMode::clear_refresh_hz() {
  refresh_hz_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgSystemDisplayMode::_internal_refresh_hz() const {
  return refresh_hz_;
}
inline int32_t CMsgSystemDisplayMode::refresh_hz() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplayMode.refresh_hz)
  return _internal_refresh_hz();
}
inline void CMsgSystemDisplayMode::_internal_set_refresh_hz(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  refresh_hz_ = value;
}
inline void CMsgSystemDisplayMode::set_refresh_hz(int32_t value) {
  _internal_set_refresh_hz(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplayMode.refresh_hz)
}

// -------------------------------------------------------------------

// CMsgSystemDisplay

// optional int32 id = 1;
inline bool CMsgSystemDisplay::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_id() const {
  return _internal_has_id();
}
inline void CMsgSystemDisplay::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgSystemDisplay::_internal_id() const {
  return id_;
}
inline int32_t CMsgSystemDisplay::id() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.id)
  return _internal_id();
}
inline void CMsgSystemDisplay::_internal_set_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void CMsgSystemDisplay::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.id)
}

// optional string name = 2;
inline bool CMsgSystemDisplay::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_name() const {
  return _internal_has_name();
}
inline void CMsgSystemDisplay::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSystemDisplay::name() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemDisplay::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.name)
}
inline std::string* CMsgSystemDisplay::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgSystemDisplay.name)
  return _s;
}
inline const std::string& CMsgSystemDisplay::_internal_name() const {
  return name_.Get();
}
inline void CMsgSystemDisplay::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemDisplay::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemDisplay::release_name() {
  // @@protoc_insertion_point(field_release:CMsgSystemDisplay.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemDisplay::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemDisplay.name)
}

// optional string description = 3;
inline bool CMsgSystemDisplay::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_description() const {
  return _internal_has_description();
}
inline void CMsgSystemDisplay::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSystemDisplay::description() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemDisplay::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.description)
}
inline std::string* CMsgSystemDisplay::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:CMsgSystemDisplay.description)
  return _s;
}
inline const std::string& CMsgSystemDisplay::_internal_description() const {
  return description_.Get();
}
inline void CMsgSystemDisplay::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemDisplay::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemDisplay::release_description() {
  // @@protoc_insertion_point(field_release:CMsgSystemDisplay.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemDisplay::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemDisplay.description)
}

// optional bool is_primary = 4;
inline bool CMsgSystemDisplay::_internal_has_is_primary() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_is_primary() const {
  return _internal_has_is_primary();
}
inline void CMsgSystemDisplay::clear_is_primary() {
  is_primary_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgSystemDisplay::_internal_is_primary() const {
  return is_primary_;
}
inline bool CMsgSystemDisplay::is_primary() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.is_primary)
  return _internal_is_primary();
}
inline void CMsgSystemDisplay::_internal_set_is_primary(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_primary_ = value;
}
inline void CMsgSystemDisplay::set_is_primary(bool value) {
  _internal_set_is_primary(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.is_primary)
}

// optional bool is_enabled = 5;
inline bool CMsgSystemDisplay::_internal_has_is_enabled() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_is_enabled() const {
  return _internal_has_is_enabled();
}
inline void CMsgSystemDisplay::clear_is_enabled() {
  is_enabled_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgSystemDisplay::_internal_is_enabled() const {
  return is_enabled_;
}
inline bool CMsgSystemDisplay::is_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.is_enabled)
  return _internal_is_enabled();
}
inline void CMsgSystemDisplay::_internal_set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_enabled_ = value;
}
inline void CMsgSystemDisplay::set_is_enabled(bool value) {
  _internal_set_is_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.is_enabled)
}

// optional bool is_internal = 6;
inline bool CMsgSystemDisplay::_internal_has_is_internal() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_is_internal() const {
  return _internal_has_is_internal();
}
inline void CMsgSystemDisplay::clear_is_internal() {
  is_internal_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgSystemDisplay::_internal_is_internal() const {
  return is_internal_;
}
inline bool CMsgSystemDisplay::is_internal() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.is_internal)
  return _internal_is_internal();
}
inline void CMsgSystemDisplay::_internal_set_is_internal(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_internal_ = value;
}
inline void CMsgSystemDisplay::set_is_internal(bool value) {
  _internal_set_is_internal(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.is_internal)
}

// optional bool has_mode_override = 7;
inline bool CMsgSystemDisplay::_internal_has_has_mode_override() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_has_mode_override() const {
  return _internal_has_has_mode_override();
}
inline void CMsgSystemDisplay::clear_has_mode_override() {
  has_mode_override_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgSystemDisplay::_internal_has_mode_override() const {
  return has_mode_override_;
}
inline bool CMsgSystemDisplay::has_mode_override() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.has_mode_override)
  return _internal_has_mode_override();
}
inline void CMsgSystemDisplay::_internal_set_has_mode_override(bool value) {
  _has_bits_[0] |= 0x00000040u;
  has_mode_override_ = value;
}
inline void CMsgSystemDisplay::set_has_mode_override(bool value) {
  _internal_set_has_mode_override(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.has_mode_override)
}

// optional int32 width_mm = 8;
inline bool CMsgSystemDisplay::_internal_has_width_mm() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_width_mm() const {
  return _internal_has_width_mm();
}
inline void CMsgSystemDisplay::clear_width_mm() {
  width_mm_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t CMsgSystemDisplay::_internal_width_mm() const {
  return width_mm_;
}
inline int32_t CMsgSystemDisplay::width_mm() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.width_mm)
  return _internal_width_mm();
}
inline void CMsgSystemDisplay::_internal_set_width_mm(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  width_mm_ = value;
}
inline void CMsgSystemDisplay::set_width_mm(int32_t value) {
  _internal_set_width_mm(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.width_mm)
}

// optional int32 height_mm = 9;
inline bool CMsgSystemDisplay::_internal_has_height_mm() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_height_mm() const {
  return _internal_has_height_mm();
}
inline void CMsgSystemDisplay::clear_height_mm() {
  height_mm_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t CMsgSystemDisplay::_internal_height_mm() const {
  return height_mm_;
}
inline int32_t CMsgSystemDisplay::height_mm() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.height_mm)
  return _internal_height_mm();
}
inline void CMsgSystemDisplay::_internal_set_height_mm(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  height_mm_ = value;
}
inline void CMsgSystemDisplay::set_height_mm(int32_t value) {
  _internal_set_height_mm(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.height_mm)
}

// optional int32 current_mode_id = 10;
inline bool CMsgSystemDisplay::_internal_has_current_mode_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_current_mode_id() const {
  return _internal_has_current_mode_id();
}
inline void CMsgSystemDisplay::clear_current_mode_id() {
  current_mode_id_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t CMsgSystemDisplay::_internal_current_mode_id() const {
  return current_mode_id_;
}
inline int32_t CMsgSystemDisplay::current_mode_id() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.current_mode_id)
  return _internal_current_mode_id();
}
inline void CMsgSystemDisplay::_internal_set_current_mode_id(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  current_mode_id_ = value;
}
inline void CMsgSystemDisplay::set_current_mode_id(int32_t value) {
  _internal_set_current_mode_id(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.current_mode_id)
}

// repeated .CMsgSystemDisplayMode modes = 11;
inline int CMsgSystemDisplay::_internal_modes_size() const {
  return modes_.size();
}
inline int CMsgSystemDisplay::modes_size() const {
  return _internal_modes_size();
}
inline void CMsgSystemDisplay::clear_modes() {
  modes_.Clear();
}
inline ::CMsgSystemDisplayMode* CMsgSystemDisplay::mutable_modes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSystemDisplay.modes)
  return modes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemDisplayMode >*
CMsgSystemDisplay::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemDisplay.modes)
  return &modes_;
}
inline const ::CMsgSystemDisplayMode& CMsgSystemDisplay::_internal_modes(int index) const {
  return modes_.Get(index);
}
inline const ::CMsgSystemDisplayMode& CMsgSystemDisplay::modes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.modes)
  return _internal_modes(index);
}
inline ::CMsgSystemDisplayMode* CMsgSystemDisplay::_internal_add_modes() {
  return modes_.Add();
}
inline ::CMsgSystemDisplayMode* CMsgSystemDisplay::add_modes() {
  ::CMsgSystemDisplayMode* _add = _internal_add_modes();
  // @@protoc_insertion_point(field_add:CMsgSystemDisplay.modes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemDisplayMode >&
CMsgSystemDisplay::modes() const {
  // @@protoc_insertion_point(field_list:CMsgSystemDisplay.modes)
  return modes_;
}

// optional int32 refresh_rate_min = 12;
inline bool CMsgSystemDisplay::_internal_has_refresh_rate_min() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_refresh_rate_min() const {
  return _internal_has_refresh_rate_min();
}
inline void CMsgSystemDisplay::clear_refresh_rate_min() {
  refresh_rate_min_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t CMsgSystemDisplay::_internal_refresh_rate_min() const {
  return refresh_rate_min_;
}
inline int32_t CMsgSystemDisplay::refresh_rate_min() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.refresh_rate_min)
  return _internal_refresh_rate_min();
}
inline void CMsgSystemDisplay::_internal_set_refresh_rate_min(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  refresh_rate_min_ = value;
}
inline void CMsgSystemDisplay::set_refresh_rate_min(int32_t value) {
  _internal_set_refresh_rate_min(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.refresh_rate_min)
}

// optional int32 refresh_rate_max = 13;
inline bool CMsgSystemDisplay::_internal_has_refresh_rate_max() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_refresh_rate_max() const {
  return _internal_has_refresh_rate_max();
}
inline void CMsgSystemDisplay::clear_refresh_rate_max() {
  refresh_rate_max_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline int32_t CMsgSystemDisplay::_internal_refresh_rate_max() const {
  return refresh_rate_max_;
}
inline int32_t CMsgSystemDisplay::refresh_rate_max() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.refresh_rate_max)
  return _internal_refresh_rate_max();
}
inline void CMsgSystemDisplay::_internal_set_refresh_rate_max(int32_t value) {
  _has_bits_[0] |= 0x00000800u;
  refresh_rate_max_ = value;
}
inline void CMsgSystemDisplay::set_refresh_rate_max(int32_t value) {
  _internal_set_refresh_rate_max(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.refresh_rate_max)
}

// optional bool is_vrr_capable = 14;
inline bool CMsgSystemDisplay::_internal_has_is_vrr_capable() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_is_vrr_capable() const {
  return _internal_has_is_vrr_capable();
}
inline void CMsgSystemDisplay::clear_is_vrr_capable() {
  is_vrr_capable_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgSystemDisplay::_internal_is_vrr_capable() const {
  return is_vrr_capable_;
}
inline bool CMsgSystemDisplay::is_vrr_capable() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.is_vrr_capable)
  return _internal_is_vrr_capable();
}
inline void CMsgSystemDisplay::_internal_set_is_vrr_capable(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_vrr_capable_ = value;
}
inline void CMsgSystemDisplay::set_is_vrr_capable(bool value) {
  _internal_set_is_vrr_capable(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.is_vrr_capable)
}

// optional bool is_vrr_enabled = 15;
inline bool CMsgSystemDisplay::_internal_has_is_vrr_enabled() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_is_vrr_enabled() const {
  return _internal_has_is_vrr_enabled();
}
inline void CMsgSystemDisplay::clear_is_vrr_enabled() {
  is_vrr_enabled_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CMsgSystemDisplay::_internal_is_vrr_enabled() const {
  return is_vrr_enabled_;
}
inline bool CMsgSystemDisplay::is_vrr_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.is_vrr_enabled)
  return _internal_is_vrr_enabled();
}
inline void CMsgSystemDisplay::_internal_set_is_vrr_enabled(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_vrr_enabled_ = value;
}
inline void CMsgSystemDisplay::set_is_vrr_enabled(bool value) {
  _internal_set_is_vrr_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.is_vrr_enabled)
}

// optional bool is_hdr_capable = 16;
inline bool CMsgSystemDisplay::_internal_has_is_hdr_capable() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_is_hdr_capable() const {
  return _internal_has_is_hdr_capable();
}
inline void CMsgSystemDisplay::clear_is_hdr_capable() {
  is_hdr_capable_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CMsgSystemDisplay::_internal_is_hdr_capable() const {
  return is_hdr_capable_;
}
inline bool CMsgSystemDisplay::is_hdr_capable() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.is_hdr_capable)
  return _internal_is_hdr_capable();
}
inline void CMsgSystemDisplay::_internal_set_is_hdr_capable(bool value) {
  _has_bits_[0] |= 0x00004000u;
  is_hdr_capable_ = value;
}
inline void CMsgSystemDisplay::set_is_hdr_capable(bool value) {
  _internal_set_is_hdr_capable(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.is_hdr_capable)
}

// optional bool is_hdr_enabled = 17;
inline bool CMsgSystemDisplay::_internal_has_is_hdr_enabled() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgSystemDisplay::has_is_hdr_enabled() const {
  return _internal_has_is_hdr_enabled();
}
inline void CMsgSystemDisplay::clear_is_hdr_enabled() {
  is_hdr_enabled_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CMsgSystemDisplay::_internal_is_hdr_enabled() const {
  return is_hdr_enabled_;
}
inline bool CMsgSystemDisplay::is_hdr_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplay.is_hdr_enabled)
  return _internal_is_hdr_enabled();
}
inline void CMsgSystemDisplay::_internal_set_is_hdr_enabled(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_hdr_enabled_ = value;
}
inline void CMsgSystemDisplay::set_is_hdr_enabled(bool value) {
  _internal_set_is_hdr_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplay.is_hdr_enabled)
}

// -------------------------------------------------------------------

// CMsgSystemDisplayManagerState

// repeated .CMsgSystemDisplay displays = 1;
inline int CMsgSystemDisplayManagerState::_internal_displays_size() const {
  return displays_.size();
}
inline int CMsgSystemDisplayManagerState::displays_size() const {
  return _internal_displays_size();
}
inline void CMsgSystemDisplayManagerState::clear_displays() {
  displays_.Clear();
}
inline ::CMsgSystemDisplay* CMsgSystemDisplayManagerState::mutable_displays(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSystemDisplayManagerState.displays)
  return displays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemDisplay >*
CMsgSystemDisplayManagerState::mutable_displays() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemDisplayManagerState.displays)
  return &displays_;
}
inline const ::CMsgSystemDisplay& CMsgSystemDisplayManagerState::_internal_displays(int index) const {
  return displays_.Get(index);
}
inline const ::CMsgSystemDisplay& CMsgSystemDisplayManagerState::displays(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplayManagerState.displays)
  return _internal_displays(index);
}
inline ::CMsgSystemDisplay* CMsgSystemDisplayManagerState::_internal_add_displays() {
  return displays_.Add();
}
inline ::CMsgSystemDisplay* CMsgSystemDisplayManagerState::add_displays() {
  ::CMsgSystemDisplay* _add = _internal_add_displays();
  // @@protoc_insertion_point(field_add:CMsgSystemDisplayManagerState.displays)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemDisplay >&
CMsgSystemDisplayManagerState::displays() const {
  // @@protoc_insertion_point(field_list:CMsgSystemDisplayManagerState.displays)
  return displays_;
}

// optional bool is_mode_switching_supported = 2;
inline bool CMsgSystemDisplayManagerState::_internal_has_is_mode_switching_supported() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemDisplayManagerState::has_is_mode_switching_supported() const {
  return _internal_has_is_mode_switching_supported();
}
inline void CMsgSystemDisplayManagerState::clear_is_mode_switching_supported() {
  is_mode_switching_supported_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgSystemDisplayManagerState::_internal_is_mode_switching_supported() const {
  return is_mode_switching_supported_;
}
inline bool CMsgSystemDisplayManagerState::is_mode_switching_supported() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplayManagerState.is_mode_switching_supported)
  return _internal_is_mode_switching_supported();
}
inline void CMsgSystemDisplayManagerState::_internal_set_is_mode_switching_supported(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_mode_switching_supported_ = value;
}
inline void CMsgSystemDisplayManagerState::set_is_mode_switching_supported(bool value) {
  _internal_set_is_mode_switching_supported(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplayManagerState.is_mode_switching_supported)
}

// optional .ESystemDisplayCompatibilityMode compatibility_mode = 3 [default = k_ESystemDisplayCompatibilityMode_Invalid];
inline bool CMsgSystemDisplayManagerState::_internal_has_compatibility_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemDisplayManagerState::has_compatibility_mode() const {
  return _internal_has_compatibility_mode();
}
inline void CMsgSystemDisplayManagerState::clear_compatibility_mode() {
  compatibility_mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ESystemDisplayCompatibilityMode CMsgSystemDisplayManagerState::_internal_compatibility_mode() const {
  return static_cast< ::ESystemDisplayCompatibilityMode >(compatibility_mode_);
}
inline ::ESystemDisplayCompatibilityMode CMsgSystemDisplayManagerState::compatibility_mode() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplayManagerState.compatibility_mode)
  return _internal_compatibility_mode();
}
inline void CMsgSystemDisplayManagerState::_internal_set_compatibility_mode(::ESystemDisplayCompatibilityMode value) {
  assert(::ESystemDisplayCompatibilityMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  compatibility_mode_ = value;
}
inline void CMsgSystemDisplayManagerState::set_compatibility_mode(::ESystemDisplayCompatibilityMode value) {
  _internal_set_compatibility_mode(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplayManagerState.compatibility_mode)
}

// -------------------------------------------------------------------

// CMsgSystemDisplayManagerSetMode

// optional int32 display_id = 1;
inline bool CMsgSystemDisplayManagerSetMode::_internal_has_display_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemDisplayManagerSetMode::has_display_id() const {
  return _internal_has_display_id();
}
inline void CMsgSystemDisplayManagerSetMode::clear_display_id() {
  display_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgSystemDisplayManagerSetMode::_internal_display_id() const {
  return display_id_;
}
inline int32_t CMsgSystemDisplayManagerSetMode::display_id() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplayManagerSetMode.display_id)
  return _internal_display_id();
}
inline void CMsgSystemDisplayManagerSetMode::_internal_set_display_id(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  display_id_ = value;
}
inline void CMsgSystemDisplayManagerSetMode::set_display_id(int32_t value) {
  _internal_set_display_id(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplayManagerSetMode.display_id)
}

// optional int32 mode_id = 2;
inline bool CMsgSystemDisplayManagerSetMode::_internal_has_mode_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemDisplayManagerSetMode::has_mode_id() const {
  return _internal_has_mode_id();
}
inline void CMsgSystemDisplayManagerSetMode::clear_mode_id() {
  mode_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgSystemDisplayManagerSetMode::_internal_mode_id() const {
  return mode_id_;
}
inline int32_t CMsgSystemDisplayManagerSetMode::mode_id() const {
  // @@protoc_insertion_point(field_get:CMsgSystemDisplayManagerSetMode.mode_id)
  return _internal_mode_id();
}
inline void CMsgSystemDisplayManagerSetMode::_internal_set_mode_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  mode_id_ = value;
}
inline void CMsgSystemDisplayManagerSetMode::set_mode_id(int32_t value) {
  _internal_set_mode_id(value);
  // @@protoc_insertion_point(field_set:CMsgSystemDisplayManagerSetMode.mode_id)
}

// -------------------------------------------------------------------

// CMsgSystemManagerSettings

// optional float idle_backlight_dim_battery_seconds = 1;
inline bool CMsgSystemManagerSettings::_internal_has_idle_backlight_dim_battery_seconds() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_idle_backlight_dim_battery_seconds() const {
  return _internal_has_idle_backlight_dim_battery_seconds();
}
inline void CMsgSystemManagerSettings::clear_idle_backlight_dim_battery_seconds() {
  idle_backlight_dim_battery_seconds_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CMsgSystemManagerSettings::_internal_idle_backlight_dim_battery_seconds() const {
  return idle_backlight_dim_battery_seconds_;
}
inline float CMsgSystemManagerSettings::idle_backlight_dim_battery_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.idle_backlight_dim_battery_seconds)
  return _internal_idle_backlight_dim_battery_seconds();
}
inline void CMsgSystemManagerSettings::_internal_set_idle_backlight_dim_battery_seconds(float value) {
  _has_bits_[0] |= 0x00000001u;
  idle_backlight_dim_battery_seconds_ = value;
}
inline void CMsgSystemManagerSettings::set_idle_backlight_dim_battery_seconds(float value) {
  _internal_set_idle_backlight_dim_battery_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.idle_backlight_dim_battery_seconds)
}

// optional float idle_backlight_dim_ac_seconds = 2;
inline bool CMsgSystemManagerSettings::_internal_has_idle_backlight_dim_ac_seconds() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_idle_backlight_dim_ac_seconds() const {
  return _internal_has_idle_backlight_dim_ac_seconds();
}
inline void CMsgSystemManagerSettings::clear_idle_backlight_dim_ac_seconds() {
  idle_backlight_dim_ac_seconds_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgSystemManagerSettings::_internal_idle_backlight_dim_ac_seconds() const {
  return idle_backlight_dim_ac_seconds_;
}
inline float CMsgSystemManagerSettings::idle_backlight_dim_ac_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.idle_backlight_dim_ac_seconds)
  return _internal_idle_backlight_dim_ac_seconds();
}
inline void CMsgSystemManagerSettings::_internal_set_idle_backlight_dim_ac_seconds(float value) {
  _has_bits_[0] |= 0x00000002u;
  idle_backlight_dim_ac_seconds_ = value;
}
inline void CMsgSystemManagerSettings::set_idle_backlight_dim_ac_seconds(float value) {
  _internal_set_idle_backlight_dim_ac_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.idle_backlight_dim_ac_seconds)
}

// optional float idle_suspend_battery_seconds = 3;
inline bool CMsgSystemManagerSettings::_internal_has_idle_suspend_battery_seconds() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_idle_suspend_battery_seconds() const {
  return _internal_has_idle_suspend_battery_seconds();
}
inline void CMsgSystemManagerSettings::clear_idle_suspend_battery_seconds() {
  idle_suspend_battery_seconds_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CMsgSystemManagerSettings::_internal_idle_suspend_battery_seconds() const {
  return idle_suspend_battery_seconds_;
}
inline float CMsgSystemManagerSettings::idle_suspend_battery_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.idle_suspend_battery_seconds)
  return _internal_idle_suspend_battery_seconds();
}
inline void CMsgSystemManagerSettings::_internal_set_idle_suspend_battery_seconds(float value) {
  _has_bits_[0] |= 0x00000004u;
  idle_suspend_battery_seconds_ = value;
}
inline void CMsgSystemManagerSettings::set_idle_suspend_battery_seconds(float value) {
  _internal_set_idle_suspend_battery_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.idle_suspend_battery_seconds)
}

// optional float idle_suspend_ac_seconds = 4;
inline bool CMsgSystemManagerSettings::_internal_has_idle_suspend_ac_seconds() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_idle_suspend_ac_seconds() const {
  return _internal_has_idle_suspend_ac_seconds();
}
inline void CMsgSystemManagerSettings::clear_idle_suspend_ac_seconds() {
  idle_suspend_ac_seconds_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgSystemManagerSettings::_internal_idle_suspend_ac_seconds() const {
  return idle_suspend_ac_seconds_;
}
inline float CMsgSystemManagerSettings::idle_suspend_ac_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.idle_suspend_ac_seconds)
  return _internal_idle_suspend_ac_seconds();
}
inline void CMsgSystemManagerSettings::_internal_set_idle_suspend_ac_seconds(float value) {
  _has_bits_[0] |= 0x00000008u;
  idle_suspend_ac_seconds_ = value;
}
inline void CMsgSystemManagerSettings::set_idle_suspend_ac_seconds(float value) {
  _internal_set_idle_suspend_ac_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.idle_suspend_ac_seconds)
}

// optional bool idle_suspend_supressed = 5;
inline bool CMsgSystemManagerSettings::_internal_has_idle_suspend_supressed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_idle_suspend_supressed() const {
  return _internal_has_idle_suspend_supressed();
}
inline void CMsgSystemManagerSettings::clear_idle_suspend_supressed() {
  idle_suspend_supressed_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgSystemManagerSettings::_internal_idle_suspend_supressed() const {
  return idle_suspend_supressed_;
}
inline bool CMsgSystemManagerSettings::idle_suspend_supressed() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.idle_suspend_supressed)
  return _internal_idle_suspend_supressed();
}
inline void CMsgSystemManagerSettings::_internal_set_idle_suspend_supressed(bool value) {
  _has_bits_[0] |= 0x00000010u;
  idle_suspend_supressed_ = value;
}
inline void CMsgSystemManagerSettings::set_idle_suspend_supressed(bool value) {
  _internal_set_idle_suspend_supressed(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.idle_suspend_supressed)
}

// optional bool is_adaptive_brightness_available = 6;
inline bool CMsgSystemManagerSettings::_internal_has_is_adaptive_brightness_available() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_is_adaptive_brightness_available() const {
  return _internal_has_is_adaptive_brightness_available();
}
inline void CMsgSystemManagerSettings::clear_is_adaptive_brightness_available() {
  is_adaptive_brightness_available_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgSystemManagerSettings::_internal_is_adaptive_brightness_available() const {
  return is_adaptive_brightness_available_;
}
inline bool CMsgSystemManagerSettings::is_adaptive_brightness_available() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.is_adaptive_brightness_available)
  return _internal_is_adaptive_brightness_available();
}
inline void CMsgSystemManagerSettings::_internal_set_is_adaptive_brightness_available(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_adaptive_brightness_available_ = value;
}
inline void CMsgSystemManagerSettings::set_is_adaptive_brightness_available(bool value) {
  _internal_set_is_adaptive_brightness_available(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.is_adaptive_brightness_available)
}

// optional bool display_adaptive_brightness_enabled = 7;
inline bool CMsgSystemManagerSettings::_internal_has_display_adaptive_brightness_enabled() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_adaptive_brightness_enabled() const {
  return _internal_has_display_adaptive_brightness_enabled();
}
inline void CMsgSystemManagerSettings::clear_display_adaptive_brightness_enabled() {
  display_adaptive_brightness_enabled_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgSystemManagerSettings::_internal_display_adaptive_brightness_enabled() const {
  return display_adaptive_brightness_enabled_;
}
inline bool CMsgSystemManagerSettings::display_adaptive_brightness_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_adaptive_brightness_enabled)
  return _internal_display_adaptive_brightness_enabled();
}
inline void CMsgSystemManagerSettings::_internal_set_display_adaptive_brightness_enabled(bool value) {
  _has_bits_[0] |= 0x00000040u;
  display_adaptive_brightness_enabled_ = value;
}
inline void CMsgSystemManagerSettings::set_display_adaptive_brightness_enabled(bool value) {
  _internal_set_display_adaptive_brightness_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_adaptive_brightness_enabled)
}

// optional bool display_nightmode_enabled = 10;
inline bool CMsgSystemManagerSettings::_internal_has_display_nightmode_enabled() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_nightmode_enabled() const {
  return _internal_has_display_nightmode_enabled();
}
inline void CMsgSystemManagerSettings::clear_display_nightmode_enabled() {
  display_nightmode_enabled_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgSystemManagerSettings::_internal_display_nightmode_enabled() const {
  return display_nightmode_enabled_;
}
inline bool CMsgSystemManagerSettings::display_nightmode_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_nightmode_enabled)
  return _internal_display_nightmode_enabled();
}
inline void CMsgSystemManagerSettings::_internal_set_display_nightmode_enabled(bool value) {
  _has_bits_[0] |= 0x00000080u;
  display_nightmode_enabled_ = value;
}
inline void CMsgSystemManagerSettings::set_display_nightmode_enabled(bool value) {
  _internal_set_display_nightmode_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_nightmode_enabled)
}

// optional float display_nightmode_tintstrength = 11;
inline bool CMsgSystemManagerSettings::_internal_has_display_nightmode_tintstrength() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_nightmode_tintstrength() const {
  return _internal_has_display_nightmode_tintstrength();
}
inline void CMsgSystemManagerSettings::clear_display_nightmode_tintstrength() {
  display_nightmode_tintstrength_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float CMsgSystemManagerSettings::_internal_display_nightmode_tintstrength() const {
  return display_nightmode_tintstrength_;
}
inline float CMsgSystemManagerSettings::display_nightmode_tintstrength() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_nightmode_tintstrength)
  return _internal_display_nightmode_tintstrength();
}
inline void CMsgSystemManagerSettings::_internal_set_display_nightmode_tintstrength(float value) {
  _has_bits_[0] |= 0x00000100u;
  display_nightmode_tintstrength_ = value;
}
inline void CMsgSystemManagerSettings::set_display_nightmode_tintstrength(float value) {
  _internal_set_display_nightmode_tintstrength(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_nightmode_tintstrength)
}

// optional float display_nightmode_maxhue = 12;
inline bool CMsgSystemManagerSettings::_internal_has_display_nightmode_maxhue() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_nightmode_maxhue() const {
  return _internal_has_display_nightmode_maxhue();
}
inline void CMsgSystemManagerSettings::clear_display_nightmode_maxhue() {
  display_nightmode_maxhue_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float CMsgSystemManagerSettings::_internal_display_nightmode_maxhue() const {
  return display_nightmode_maxhue_;
}
inline float CMsgSystemManagerSettings::display_nightmode_maxhue() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_nightmode_maxhue)
  return _internal_display_nightmode_maxhue();
}
inline void CMsgSystemManagerSettings::_internal_set_display_nightmode_maxhue(float value) {
  _has_bits_[0] |= 0x00000200u;
  display_nightmode_maxhue_ = value;
}
inline void CMsgSystemManagerSettings::set_display_nightmode_maxhue(float value) {
  _internal_set_display_nightmode_maxhue(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_nightmode_maxhue)
}

// optional float display_nightmode_maxsat = 13;
inline bool CMsgSystemManagerSettings::_internal_has_display_nightmode_maxsat() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_nightmode_maxsat() const {
  return _internal_has_display_nightmode_maxsat();
}
inline void CMsgSystemManagerSettings::clear_display_nightmode_maxsat() {
  display_nightmode_maxsat_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float CMsgSystemManagerSettings::_internal_display_nightmode_maxsat() const {
  return display_nightmode_maxsat_;
}
inline float CMsgSystemManagerSettings::display_nightmode_maxsat() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_nightmode_maxsat)
  return _internal_display_nightmode_maxsat();
}
inline void CMsgSystemManagerSettings::_internal_set_display_nightmode_maxsat(float value) {
  _has_bits_[0] |= 0x00000400u;
  display_nightmode_maxsat_ = value;
}
inline void CMsgSystemManagerSettings::set_display_nightmode_maxsat(float value) {
  _internal_set_display_nightmode_maxsat(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_nightmode_maxsat)
}

// optional float display_nightmode_uiexp = 14;
inline bool CMsgSystemManagerSettings::_internal_has_display_nightmode_uiexp() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_nightmode_uiexp() const {
  return _internal_has_display_nightmode_uiexp();
}
inline void CMsgSystemManagerSettings::clear_display_nightmode_uiexp() {
  display_nightmode_uiexp_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float CMsgSystemManagerSettings::_internal_display_nightmode_uiexp() const {
  return display_nightmode_uiexp_;
}
inline float CMsgSystemManagerSettings::display_nightmode_uiexp() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_nightmode_uiexp)
  return _internal_display_nightmode_uiexp();
}
inline void CMsgSystemManagerSettings::_internal_set_display_nightmode_uiexp(float value) {
  _has_bits_[0] |= 0x00000800u;
  display_nightmode_uiexp_ = value;
}
inline void CMsgSystemManagerSettings::set_display_nightmode_uiexp(float value) {
  _internal_set_display_nightmode_uiexp(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_nightmode_uiexp)
}

// optional float display_nightmode_blend = 15;
inline bool CMsgSystemManagerSettings::_internal_has_display_nightmode_blend() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_nightmode_blend() const {
  return _internal_has_display_nightmode_blend();
}
inline void CMsgSystemManagerSettings::clear_display_nightmode_blend() {
  display_nightmode_blend_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float CMsgSystemManagerSettings::_internal_display_nightmode_blend() const {
  return display_nightmode_blend_;
}
inline float CMsgSystemManagerSettings::display_nightmode_blend() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_nightmode_blend)
  return _internal_display_nightmode_blend();
}
inline void CMsgSystemManagerSettings::_internal_set_display_nightmode_blend(float value) {
  _has_bits_[0] |= 0x00001000u;
  display_nightmode_blend_ = value;
}
inline void CMsgSystemManagerSettings::set_display_nightmode_blend(float value) {
  _internal_set_display_nightmode_blend(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_nightmode_blend)
}

// optional bool display_nightmode_reset = 16;
inline bool CMsgSystemManagerSettings::_internal_has_display_nightmode_reset() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_nightmode_reset() const {
  return _internal_has_display_nightmode_reset();
}
inline void CMsgSystemManagerSettings::clear_display_nightmode_reset() {
  display_nightmode_reset_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CMsgSystemManagerSettings::_internal_display_nightmode_reset() const {
  return display_nightmode_reset_;
}
inline bool CMsgSystemManagerSettings::display_nightmode_reset() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_nightmode_reset)
  return _internal_display_nightmode_reset();
}
inline void CMsgSystemManagerSettings::_internal_set_display_nightmode_reset(bool value) {
  _has_bits_[0] |= 0x00008000u;
  display_nightmode_reset_ = value;
}
inline void CMsgSystemManagerSettings::set_display_nightmode_reset(bool value) {
  _internal_set_display_nightmode_reset(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_nightmode_reset)
}

// optional bool display_nightmode_schedule_enabled = 17;
inline bool CMsgSystemManagerSettings::_internal_has_display_nightmode_schedule_enabled() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_nightmode_schedule_enabled() const {
  return _internal_has_display_nightmode_schedule_enabled();
}
inline void CMsgSystemManagerSettings::clear_display_nightmode_schedule_enabled() {
  display_nightmode_schedule_enabled_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CMsgSystemManagerSettings::_internal_display_nightmode_schedule_enabled() const {
  return display_nightmode_schedule_enabled_;
}
inline bool CMsgSystemManagerSettings::display_nightmode_schedule_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_nightmode_schedule_enabled)
  return _internal_display_nightmode_schedule_enabled();
}
inline void CMsgSystemManagerSettings::_internal_set_display_nightmode_schedule_enabled(bool value) {
  _has_bits_[0] |= 0x00010000u;
  display_nightmode_schedule_enabled_ = value;
}
inline void CMsgSystemManagerSettings::set_display_nightmode_schedule_enabled(bool value) {
  _internal_set_display_nightmode_schedule_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_nightmode_schedule_enabled)
}

// optional float display_nightmode_schedule_starttime = 18;
inline bool CMsgSystemManagerSettings::_internal_has_display_nightmode_schedule_starttime() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_nightmode_schedule_starttime() const {
  return _internal_has_display_nightmode_schedule_starttime();
}
inline void CMsgSystemManagerSettings::clear_display_nightmode_schedule_starttime() {
  display_nightmode_schedule_starttime_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float CMsgSystemManagerSettings::_internal_display_nightmode_schedule_starttime() const {
  return display_nightmode_schedule_starttime_;
}
inline float CMsgSystemManagerSettings::display_nightmode_schedule_starttime() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_nightmode_schedule_starttime)
  return _internal_display_nightmode_schedule_starttime();
}
inline void CMsgSystemManagerSettings::_internal_set_display_nightmode_schedule_starttime(float value) {
  _has_bits_[0] |= 0x00002000u;
  display_nightmode_schedule_starttime_ = value;
}
inline void CMsgSystemManagerSettings::set_display_nightmode_schedule_starttime(float value) {
  _internal_set_display_nightmode_schedule_starttime(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_nightmode_schedule_starttime)
}

// optional float display_nightmode_schedule_endtime = 19;
inline bool CMsgSystemManagerSettings::_internal_has_display_nightmode_schedule_endtime() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_nightmode_schedule_endtime() const {
  return _internal_has_display_nightmode_schedule_endtime();
}
inline void CMsgSystemManagerSettings::clear_display_nightmode_schedule_endtime() {
  display_nightmode_schedule_endtime_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float CMsgSystemManagerSettings::_internal_display_nightmode_schedule_endtime() const {
  return display_nightmode_schedule_endtime_;
}
inline float CMsgSystemManagerSettings::display_nightmode_schedule_endtime() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_nightmode_schedule_endtime)
  return _internal_display_nightmode_schedule_endtime();
}
inline void CMsgSystemManagerSettings::_internal_set_display_nightmode_schedule_endtime(float value) {
  _has_bits_[0] |= 0x00004000u;
  display_nightmode_schedule_endtime_ = value;
}
inline void CMsgSystemManagerSettings::set_display_nightmode_schedule_endtime(float value) {
  _internal_set_display_nightmode_schedule_endtime(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_nightmode_schedule_endtime)
}

// optional bool display_diagnostics_enabled = 20;
inline bool CMsgSystemManagerSettings::_internal_has_display_diagnostics_enabled() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_diagnostics_enabled() const {
  return _internal_has_display_diagnostics_enabled();
}
inline void CMsgSystemManagerSettings::clear_display_diagnostics_enabled() {
  display_diagnostics_enabled_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CMsgSystemManagerSettings::_internal_display_diagnostics_enabled() const {
  return display_diagnostics_enabled_;
}
inline bool CMsgSystemManagerSettings::display_diagnostics_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_diagnostics_enabled)
  return _internal_display_diagnostics_enabled();
}
inline void CMsgSystemManagerSettings::_internal_set_display_diagnostics_enabled(bool value) {
  _has_bits_[0] |= 0x00020000u;
  display_diagnostics_enabled_ = value;
}
inline void CMsgSystemManagerSettings::set_display_diagnostics_enabled(bool value) {
  _internal_set_display_diagnostics_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_diagnostics_enabled)
}

// optional float als_lux_latest = 21;
inline bool CMsgSystemManagerSettings::_internal_has_als_lux_latest() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_als_lux_latest() const {
  return _internal_has_als_lux_latest();
}
inline void CMsgSystemManagerSettings::clear_als_lux_latest() {
  als_lux_latest_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float CMsgSystemManagerSettings::_internal_als_lux_latest() const {
  return als_lux_latest_;
}
inline float CMsgSystemManagerSettings::als_lux_latest() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.als_lux_latest)
  return _internal_als_lux_latest();
}
inline void CMsgSystemManagerSettings::_internal_set_als_lux_latest(float value) {
  _has_bits_[0] |= 0x00080000u;
  als_lux_latest_ = value;
}
inline void CMsgSystemManagerSettings::set_als_lux_latest(float value) {
  _internal_set_als_lux_latest(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.als_lux_latest)
}

// optional float als_lux_median = 22;
inline bool CMsgSystemManagerSettings::_internal_has_als_lux_median() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_als_lux_median() const {
  return _internal_has_als_lux_median();
}
inline void CMsgSystemManagerSettings::clear_als_lux_median() {
  als_lux_median_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float CMsgSystemManagerSettings::_internal_als_lux_median() const {
  return als_lux_median_;
}
inline float CMsgSystemManagerSettings::als_lux_median() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.als_lux_median)
  return _internal_als_lux_median();
}
inline void CMsgSystemManagerSettings::_internal_set_als_lux_median(float value) {
  _has_bits_[0] |= 0x00100000u;
  als_lux_median_ = value;
}
inline void CMsgSystemManagerSettings::set_als_lux_median(float value) {
  _internal_set_als_lux_median(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.als_lux_median)
}

// optional float display_backlight_raw = 23;
inline bool CMsgSystemManagerSettings::_internal_has_display_backlight_raw() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_backlight_raw() const {
  return _internal_has_display_backlight_raw();
}
inline void CMsgSystemManagerSettings::clear_display_backlight_raw() {
  display_backlight_raw_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float CMsgSystemManagerSettings::_internal_display_backlight_raw() const {
  return display_backlight_raw_;
}
inline float CMsgSystemManagerSettings::display_backlight_raw() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_backlight_raw)
  return _internal_display_backlight_raw();
}
inline void CMsgSystemManagerSettings::_internal_set_display_backlight_raw(float value) {
  _has_bits_[0] |= 0x00200000u;
  display_backlight_raw_ = value;
}
inline void CMsgSystemManagerSettings::set_display_backlight_raw(float value) {
  _internal_set_display_backlight_raw(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_backlight_raw)
}

// optional float display_brightness_adaptivemin = 24;
inline bool CMsgSystemManagerSettings::_internal_has_display_brightness_adaptivemin() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_brightness_adaptivemin() const {
  return _internal_has_display_brightness_adaptivemin();
}
inline void CMsgSystemManagerSettings::clear_display_brightness_adaptivemin() {
  display_brightness_adaptivemin_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float CMsgSystemManagerSettings::_internal_display_brightness_adaptivemin() const {
  return display_brightness_adaptivemin_;
}
inline float CMsgSystemManagerSettings::display_brightness_adaptivemin() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_brightness_adaptivemin)
  return _internal_display_brightness_adaptivemin();
}
inline void CMsgSystemManagerSettings::_internal_set_display_brightness_adaptivemin(float value) {
  _has_bits_[0] |= 0x00400000u;
  display_brightness_adaptivemin_ = value;
}
inline void CMsgSystemManagerSettings::set_display_brightness_adaptivemin(float value) {
  _internal_set_display_brightness_adaptivemin(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_brightness_adaptivemin)
}

// optional float display_brightness_adaptivemax = 25;
inline bool CMsgSystemManagerSettings::_internal_has_display_brightness_adaptivemax() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_brightness_adaptivemax() const {
  return _internal_has_display_brightness_adaptivemax();
}
inline void CMsgSystemManagerSettings::clear_display_brightness_adaptivemax() {
  display_brightness_adaptivemax_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float CMsgSystemManagerSettings::_internal_display_brightness_adaptivemax() const {
  return display_brightness_adaptivemax_;
}
inline float CMsgSystemManagerSettings::display_brightness_adaptivemax() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_brightness_adaptivemax)
  return _internal_display_brightness_adaptivemax();
}
inline void CMsgSystemManagerSettings::_internal_set_display_brightness_adaptivemax(float value) {
  _has_bits_[0] |= 0x00800000u;
  display_brightness_adaptivemax_ = value;
}
inline void CMsgSystemManagerSettings::set_display_brightness_adaptivemax(float value) {
  _internal_set_display_brightness_adaptivemax(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_brightness_adaptivemax)
}

// optional bool is_wifi_powersave_enabled = 26;
inline bool CMsgSystemManagerSettings::_internal_has_is_wifi_powersave_enabled() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_is_wifi_powersave_enabled() const {
  return _internal_has_is_wifi_powersave_enabled();
}
inline void CMsgSystemManagerSettings::clear_is_wifi_powersave_enabled() {
  is_wifi_powersave_enabled_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CMsgSystemManagerSettings::_internal_is_wifi_powersave_enabled() const {
  return is_wifi_powersave_enabled_;
}
inline bool CMsgSystemManagerSettings::is_wifi_powersave_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.is_wifi_powersave_enabled)
  return _internal_is_wifi_powersave_enabled();
}
inline void CMsgSystemManagerSettings::_internal_set_is_wifi_powersave_enabled(bool value) {
  _has_bits_[0] |= 0x00040000u;
  is_wifi_powersave_enabled_ = value;
}
inline void CMsgSystemManagerSettings::set_is_wifi_powersave_enabled(bool value) {
  _internal_set_is_wifi_powersave_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.is_wifi_powersave_enabled)
}

// optional bool is_fan_control_available = 27;
inline bool CMsgSystemManagerSettings::_internal_has_is_fan_control_available() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_is_fan_control_available() const {
  return _internal_has_is_fan_control_available();
}
inline void CMsgSystemManagerSettings::clear_is_fan_control_available() {
  is_fan_control_available_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool CMsgSystemManagerSettings::_internal_is_fan_control_available() const {
  return is_fan_control_available_;
}
inline bool CMsgSystemManagerSettings::is_fan_control_available() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.is_fan_control_available)
  return _internal_is_fan_control_available();
}
inline void CMsgSystemManagerSettings::_internal_set_is_fan_control_available(bool value) {
  _has_bits_[0] |= 0x02000000u;
  is_fan_control_available_ = value;
}
inline void CMsgSystemManagerSettings::set_is_fan_control_available(bool value) {
  _internal_set_is_fan_control_available(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.is_fan_control_available)
}

// optional .ESystemFanControlMode fan_control_mode = 28 [default = k_SystemFanControlMode_Invalid];
inline bool CMsgSystemManagerSettings::_internal_has_fan_control_mode() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_fan_control_mode() const {
  return _internal_has_fan_control_mode();
}
inline void CMsgSystemManagerSettings::clear_fan_control_mode() {
  fan_control_mode_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::ESystemFanControlMode CMsgSystemManagerSettings::_internal_fan_control_mode() const {
  return static_cast< ::ESystemFanControlMode >(fan_control_mode_);
}
inline ::ESystemFanControlMode CMsgSystemManagerSettings::fan_control_mode() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.fan_control_mode)
  return _internal_fan_control_mode();
}
inline void CMsgSystemManagerSettings::_internal_set_fan_control_mode(::ESystemFanControlMode value) {
  assert(::ESystemFanControlMode_IsValid(value));
  _has_bits_[0] |= 0x01000000u;
  fan_control_mode_ = value;
}
inline void CMsgSystemManagerSettings::set_fan_control_mode(::ESystemFanControlMode value) {
  _internal_set_fan_control_mode(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.fan_control_mode)
}

// optional bool is_display_brightness_available = 29;
inline bool CMsgSystemManagerSettings::_internal_has_is_display_brightness_available() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_is_display_brightness_available() const {
  return _internal_has_is_display_brightness_available();
}
inline void CMsgSystemManagerSettings::clear_is_display_brightness_available() {
  is_display_brightness_available_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool CMsgSystemManagerSettings::_internal_is_display_brightness_available() const {
  return is_display_brightness_available_;
}
inline bool CMsgSystemManagerSettings::is_display_brightness_available() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.is_display_brightness_available)
  return _internal_is_display_brightness_available();
}
inline void CMsgSystemManagerSettings::_internal_set_is_display_brightness_available(bool value) {
  _has_bits_[0] |= 0x04000000u;
  is_display_brightness_available_ = value;
}
inline void CMsgSystemManagerSettings::set_is_display_brightness_available(bool value) {
  _internal_set_is_display_brightness_available(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.is_display_brightness_available)
}

// optional bool is_display_colormanagement_available = 31;
inline bool CMsgSystemManagerSettings::_internal_has_is_display_colormanagement_available() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_is_display_colormanagement_available() const {
  return _internal_has_is_display_colormanagement_available();
}
inline void CMsgSystemManagerSettings::clear_is_display_colormanagement_available() {
  is_display_colormanagement_available_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool CMsgSystemManagerSettings::_internal_is_display_colormanagement_available() const {
  return is_display_colormanagement_available_;
}
inline bool CMsgSystemManagerSettings::is_display_colormanagement_available() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.is_display_colormanagement_available)
  return _internal_is_display_colormanagement_available();
}
inline void CMsgSystemManagerSettings::_internal_set_is_display_colormanagement_available(bool value) {
  _has_bits_[0] |= 0x08000000u;
  is_display_colormanagement_available_ = value;
}
inline void CMsgSystemManagerSettings::set_is_display_colormanagement_available(bool value) {
  _internal_set_is_display_colormanagement_available(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.is_display_colormanagement_available)
}

// optional float display_colorgamut = 32;
inline bool CMsgSystemManagerSettings::_internal_has_display_colorgamut() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgSystemManagerSettings::has_display_colorgamut() const {
  return _internal_has_display_colorgamut();
}
inline void CMsgSystemManagerSettings::clear_display_colorgamut() {
  display_colorgamut_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline float CMsgSystemManagerSettings::_internal_display_colorgamut() const {
  return display_colorgamut_;
}
inline float CMsgSystemManagerSettings::display_colorgamut() const {
  // @@protoc_insertion_point(field_get:CMsgSystemManagerSettings.display_colorgamut)
  return _internal_display_colorgamut();
}
inline void CMsgSystemManagerSettings::_internal_set_display_colorgamut(float value) {
  _has_bits_[0] |= 0x10000000u;
  display_colorgamut_ = value;
}
inline void CMsgSystemManagerSettings::set_display_colorgamut(float value) {
  _internal_set_display_colorgamut(value);
  // @@protoc_insertion_point(field_set:CMsgSystemManagerSettings.display_colorgamut)
}

// -------------------------------------------------------------------

// CMsgSelectOSBranchParams

// optional .EOSBranch branch = 1 [default = k_EOSBranch_Unknown];
inline bool CMsgSelectOSBranchParams::_internal_has_branch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSelectOSBranchParams::has_branch() const {
  return _internal_has_branch();
}
inline void CMsgSelectOSBranchParams::clear_branch() {
  branch_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EOSBranch CMsgSelectOSBranchParams::_internal_branch() const {
  return static_cast< ::EOSBranch >(branch_);
}
inline ::EOSBranch CMsgSelectOSBranchParams::branch() const {
  // @@protoc_insertion_point(field_get:CMsgSelectOSBranchParams.branch)
  return _internal_branch();
}
inline void CMsgSelectOSBranchParams::_internal_set_branch(::EOSBranch value) {
  assert(::EOSBranch_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  branch_ = value;
}
inline void CMsgSelectOSBranchParams::set_branch(::EOSBranch value) {
  _internal_set_branch(value);
  // @@protoc_insertion_point(field_set:CMsgSelectOSBranchParams.branch)
}

// optional string custom_branch = 2;
inline bool CMsgSelectOSBranchParams::_internal_has_custom_branch() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSelectOSBranchParams::has_custom_branch() const {
  return _internal_has_custom_branch();
}
inline void CMsgSelectOSBranchParams::clear_custom_branch() {
  custom_branch_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSelectOSBranchParams::custom_branch() const {
  // @@protoc_insertion_point(field_get:CMsgSelectOSBranchParams.custom_branch)
  return _internal_custom_branch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSelectOSBranchParams::set_custom_branch(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 custom_branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSelectOSBranchParams.custom_branch)
}
inline std::string* CMsgSelectOSBranchParams::mutable_custom_branch() {
  std::string* _s = _internal_mutable_custom_branch();
  // @@protoc_insertion_point(field_mutable:CMsgSelectOSBranchParams.custom_branch)
  return _s;
}
inline const std::string& CMsgSelectOSBranchParams::_internal_custom_branch() const {
  return custom_branch_.Get();
}
inline void CMsgSelectOSBranchParams::_internal_set_custom_branch(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  custom_branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSelectOSBranchParams::_internal_mutable_custom_branch() {
  _has_bits_[0] |= 0x00000001u;
  return custom_branch_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSelectOSBranchParams::release_custom_branch() {
  // @@protoc_insertion_point(field_release:CMsgSelectOSBranchParams.custom_branch)
  if (!_internal_has_custom_branch()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = custom_branch_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (custom_branch_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    custom_branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSelectOSBranchParams::set_allocated_custom_branch(std::string* custom_branch) {
  if (custom_branch != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  custom_branch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_branch,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (custom_branch_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    custom_branch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSelectOSBranchParams.custom_branch)
}

// -------------------------------------------------------------------

// CMsgSystemUpdateProgress

// optional float stage_progress = 1;
inline bool CMsgSystemUpdateProgress::_internal_has_stage_progress() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemUpdateProgress::has_stage_progress() const {
  return _internal_has_stage_progress();
}
inline void CMsgSystemUpdateProgress::clear_stage_progress() {
  stage_progress_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgSystemUpdateProgress::_internal_stage_progress() const {
  return stage_progress_;
}
inline float CMsgSystemUpdateProgress::stage_progress() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateProgress.stage_progress)
  return _internal_stage_progress();
}
inline void CMsgSystemUpdateProgress::_internal_set_stage_progress(float value) {
  _has_bits_[0] |= 0x00000002u;
  stage_progress_ = value;
}
inline void CMsgSystemUpdateProgress::set_stage_progress(float value) {
  _internal_set_stage_progress(value);
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateProgress.stage_progress)
}

// optional int64 stage_size_bytes = 2;
inline bool CMsgSystemUpdateProgress::_internal_has_stage_size_bytes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemUpdateProgress::has_stage_size_bytes() const {
  return _internal_has_stage_size_bytes();
}
inline void CMsgSystemUpdateProgress::clear_stage_size_bytes() {
  stage_size_bytes_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t CMsgSystemUpdateProgress::_internal_stage_size_bytes() const {
  return stage_size_bytes_;
}
inline int64_t CMsgSystemUpdateProgress::stage_size_bytes() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateProgress.stage_size_bytes)
  return _internal_stage_size_bytes();
}
inline void CMsgSystemUpdateProgress::_internal_set_stage_size_bytes(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  stage_size_bytes_ = value;
}
inline void CMsgSystemUpdateProgress::set_stage_size_bytes(int64_t value) {
  _internal_set_stage_size_bytes(value);
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateProgress.stage_size_bytes)
}

// optional fixed32 rtime_estimated_completion = 3;
inline bool CMsgSystemUpdateProgress::_internal_has_rtime_estimated_completion() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemUpdateProgress::has_rtime_estimated_completion() const {
  return _internal_has_rtime_estimated_completion();
}
inline void CMsgSystemUpdateProgress::clear_rtime_estimated_completion() {
  rtime_estimated_completion_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSystemUpdateProgress::_internal_rtime_estimated_completion() const {
  return rtime_estimated_completion_;
}
inline uint32_t CMsgSystemUpdateProgress::rtime_estimated_completion() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateProgress.rtime_estimated_completion)
  return _internal_rtime_estimated_completion();
}
inline void CMsgSystemUpdateProgress::_internal_set_rtime_estimated_completion(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  rtime_estimated_completion_ = value;
}
inline void CMsgSystemUpdateProgress::set_rtime_estimated_completion(uint32_t value) {
  _internal_set_rtime_estimated_completion(value);
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateProgress.rtime_estimated_completion)
}

// -------------------------------------------------------------------

// CMsgSystemUpdateCheckResult

// optional .EUpdaterType type = 1 [default = k_EUpdaterType_Invalid];
inline bool CMsgSystemUpdateCheckResult::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemUpdateCheckResult::has_type() const {
  return _internal_has_type();
}
inline void CMsgSystemUpdateCheckResult::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EUpdaterType CMsgSystemUpdateCheckResult::_internal_type() const {
  return static_cast< ::EUpdaterType >(type_);
}
inline ::EUpdaterType CMsgSystemUpdateCheckResult::type() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateCheckResult.type)
  return _internal_type();
}
inline void CMsgSystemUpdateCheckResult::_internal_set_type(::EUpdaterType value) {
  assert(::EUpdaterType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void CMsgSystemUpdateCheckResult::set_type(::EUpdaterType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateCheckResult.type)
}

// optional uint32 eresult = 2 [default = 2];
inline bool CMsgSystemUpdateCheckResult::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSystemUpdateCheckResult::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgSystemUpdateCheckResult::clear_eresult() {
  eresult_ = 2u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgSystemUpdateCheckResult::_internal_eresult() const {
  return eresult_;
}
inline uint32_t CMsgSystemUpdateCheckResult::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateCheckResult.eresult)
  return _internal_eresult();
}
inline void CMsgSystemUpdateCheckResult::_internal_set_eresult(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  eresult_ = value;
}
inline void CMsgSystemUpdateCheckResult::set_eresult(uint32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateCheckResult.eresult)
}

// optional fixed32 rtime_checked = 3;
inline bool CMsgSystemUpdateCheckResult::_internal_has_rtime_checked() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSystemUpdateCheckResult::has_rtime_checked() const {
  return _internal_has_rtime_checked();
}
inline void CMsgSystemUpdateCheckResult::clear_rtime_checked() {
  rtime_checked_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSystemUpdateCheckResult::_internal_rtime_checked() const {
  return rtime_checked_;
}
inline uint32_t CMsgSystemUpdateCheckResult::rtime_checked() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateCheckResult.rtime_checked)
  return _internal_rtime_checked();
}
inline void CMsgSystemUpdateCheckResult::_internal_set_rtime_checked(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  rtime_checked_ = value;
}
inline void CMsgSystemUpdateCheckResult::set_rtime_checked(uint32_t value) {
  _internal_set_rtime_checked(value);
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateCheckResult.rtime_checked)
}

// optional bool available = 4;
inline bool CMsgSystemUpdateCheckResult::_internal_has_available() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSystemUpdateCheckResult::has_available() const {
  return _internal_has_available();
}
inline void CMsgSystemUpdateCheckResult::clear_available() {
  available_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgSystemUpdateCheckResult::_internal_available() const {
  return available_;
}
inline bool CMsgSystemUpdateCheckResult::available() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateCheckResult.available)
  return _internal_available();
}
inline void CMsgSystemUpdateCheckResult::_internal_set_available(bool value) {
  _has_bits_[0] |= 0x00000010u;
  available_ = value;
}
inline void CMsgSystemUpdateCheckResult::set_available(bool value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateCheckResult.available)
}

// optional string version = 5;
inline bool CMsgSystemUpdateCheckResult::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemUpdateCheckResult::has_version() const {
  return _internal_has_version();
}
inline void CMsgSystemUpdateCheckResult::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSystemUpdateCheckResult::version() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateCheckResult.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemUpdateCheckResult::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateCheckResult.version)
}
inline std::string* CMsgSystemUpdateCheckResult::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:CMsgSystemUpdateCheckResult.version)
  return _s;
}
inline const std::string& CMsgSystemUpdateCheckResult::_internal_version() const {
  return version_.Get();
}
inline void CMsgSystemUpdateCheckResult::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemUpdateCheckResult::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemUpdateCheckResult::release_version() {
  // @@protoc_insertion_point(field_release:CMsgSystemUpdateCheckResult.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemUpdateCheckResult::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemUpdateCheckResult.version)
}

// optional string auto_message = 6;
inline bool CMsgSystemUpdateCheckResult::_internal_has_auto_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemUpdateCheckResult::has_auto_message() const {
  return _internal_has_auto_message();
}
inline void CMsgSystemUpdateCheckResult::clear_auto_message() {
  auto_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSystemUpdateCheckResult::auto_message() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateCheckResult.auto_message)
  return _internal_auto_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSystemUpdateCheckResult::set_auto_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 auto_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateCheckResult.auto_message)
}
inline std::string* CMsgSystemUpdateCheckResult::mutable_auto_message() {
  std::string* _s = _internal_mutable_auto_message();
  // @@protoc_insertion_point(field_mutable:CMsgSystemUpdateCheckResult.auto_message)
  return _s;
}
inline const std::string& CMsgSystemUpdateCheckResult::_internal_auto_message() const {
  return auto_message_.Get();
}
inline void CMsgSystemUpdateCheckResult::_internal_set_auto_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  auto_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgSystemUpdateCheckResult::_internal_mutable_auto_message() {
  _has_bits_[0] |= 0x00000002u;
  return auto_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgSystemUpdateCheckResult::release_auto_message() {
  // @@protoc_insertion_point(field_release:CMsgSystemUpdateCheckResult.auto_message)
  if (!_internal_has_auto_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = auto_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auto_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auto_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSystemUpdateCheckResult::set_allocated_auto_message(std::string* auto_message) {
  if (auto_message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  auto_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auto_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auto_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auto_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemUpdateCheckResult.auto_message)
}

// -------------------------------------------------------------------

// CMsgSystemUpdateApplyParams

// repeated .EUpdaterType apply_types = 1;
inline int CMsgSystemUpdateApplyParams::_internal_apply_types_size() const {
  return apply_types_.size();
}
inline int CMsgSystemUpdateApplyParams::apply_types_size() const {
  return _internal_apply_types_size();
}
inline void CMsgSystemUpdateApplyParams::clear_apply_types() {
  apply_types_.Clear();
}
inline ::EUpdaterType CMsgSystemUpdateApplyParams::_internal_apply_types(int index) const {
  return static_cast< ::EUpdaterType >(apply_types_.Get(index));
}
inline ::EUpdaterType CMsgSystemUpdateApplyParams::apply_types(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateApplyParams.apply_types)
  return _internal_apply_types(index);
}
inline void CMsgSystemUpdateApplyParams::set_apply_types(int index, ::EUpdaterType value) {
  assert(::EUpdaterType_IsValid(value));
  apply_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateApplyParams.apply_types)
}
inline void CMsgSystemUpdateApplyParams::_internal_add_apply_types(::EUpdaterType value) {
  assert(::EUpdaterType_IsValid(value));
  apply_types_.Add(value);
}
inline void CMsgSystemUpdateApplyParams::add_apply_types(::EUpdaterType value) {
  _internal_add_apply_types(value);
  // @@protoc_insertion_point(field_add:CMsgSystemUpdateApplyParams.apply_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CMsgSystemUpdateApplyParams::apply_types() const {
  // @@protoc_insertion_point(field_list:CMsgSystemUpdateApplyParams.apply_types)
  return apply_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgSystemUpdateApplyParams::_internal_mutable_apply_types() {
  return &apply_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CMsgSystemUpdateApplyParams::mutable_apply_types() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemUpdateApplyParams.apply_types)
  return _internal_mutable_apply_types();
}

// -------------------------------------------------------------------

// CMsgSystemUpdateApplyResult

// optional .EUpdaterType type = 1 [default = k_EUpdaterType_Invalid];
inline bool CMsgSystemUpdateApplyResult::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSystemUpdateApplyResult::has_type() const {
  return _internal_has_type();
}
inline void CMsgSystemUpdateApplyResult::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::EUpdaterType CMsgSystemUpdateApplyResult::_internal_type() const {
  return static_cast< ::EUpdaterType >(type_);
}
inline ::EUpdaterType CMsgSystemUpdateApplyResult::type() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateApplyResult.type)
  return _internal_type();
}
inline void CMsgSystemUpdateApplyResult::_internal_set_type(::EUpdaterType value) {
  assert(::EUpdaterType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void CMsgSystemUpdateApplyResult::set_type(::EUpdaterType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateApplyResult.type)
}

// optional uint32 eresult = 2 [default = 2];
inline bool CMsgSystemUpdateApplyResult::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSystemUpdateApplyResult::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgSystemUpdateApplyResult::clear_eresult() {
  eresult_ = 2u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSystemUpdateApplyResult::_internal_eresult() const {
  return eresult_;
}
inline uint32_t CMsgSystemUpdateApplyResult::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateApplyResult.eresult)
  return _internal_eresult();
}
inline void CMsgSystemUpdateApplyResult::_internal_set_eresult(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  eresult_ = value;
}
inline void CMsgSystemUpdateApplyResult::set_eresult(uint32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateApplyResult.eresult)
}

// optional bool requires_client_restart = 3 [default = false];
inline bool CMsgSystemUpdateApplyResult::_internal_has_requires_client_restart() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemUpdateApplyResult::has_requires_client_restart() const {
  return _internal_has_requires_client_restart();
}
inline void CMsgSystemUpdateApplyResult::clear_requires_client_restart() {
  requires_client_restart_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgSystemUpdateApplyResult::_internal_requires_client_restart() const {
  return requires_client_restart_;
}
inline bool CMsgSystemUpdateApplyResult::requires_client_restart() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateApplyResult.requires_client_restart)
  return _internal_requires_client_restart();
}
inline void CMsgSystemUpdateApplyResult::_internal_set_requires_client_restart(bool value) {
  _has_bits_[0] |= 0x00000002u;
  requires_client_restart_ = value;
}
inline void CMsgSystemUpdateApplyResult::set_requires_client_restart(bool value) {
  _internal_set_requires_client_restart(value);
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateApplyResult.requires_client_restart)
}

// optional bool requires_system_restart = 4 [default = false];
inline bool CMsgSystemUpdateApplyResult::_internal_has_requires_system_restart() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemUpdateApplyResult::has_requires_system_restart() const {
  return _internal_has_requires_system_restart();
}
inline void CMsgSystemUpdateApplyResult::clear_requires_system_restart() {
  requires_system_restart_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgSystemUpdateApplyResult::_internal_requires_system_restart() const {
  return requires_system_restart_;
}
inline bool CMsgSystemUpdateApplyResult::requires_system_restart() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateApplyResult.requires_system_restart)
  return _internal_requires_system_restart();
}
inline void CMsgSystemUpdateApplyResult::_internal_set_requires_system_restart(bool value) {
  _has_bits_[0] |= 0x00000004u;
  requires_system_restart_ = value;
}
inline void CMsgSystemUpdateApplyResult::set_requires_system_restart(bool value) {
  _internal_set_requires_system_restart(value);
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateApplyResult.requires_system_restart)
}

// -------------------------------------------------------------------

// CMsgSystemUpdateState

// optional .EUpdaterState state = 1 [default = k_EUpdaterState_Invalid];
inline bool CMsgSystemUpdateState::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSystemUpdateState::has_state() const {
  return _internal_has_state();
}
inline void CMsgSystemUpdateState::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EUpdaterState CMsgSystemUpdateState::_internal_state() const {
  return static_cast< ::EUpdaterState >(state_);
}
inline ::EUpdaterState CMsgSystemUpdateState::state() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateState.state)
  return _internal_state();
}
inline void CMsgSystemUpdateState::_internal_set_state(::EUpdaterState value) {
  assert(::EUpdaterState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  state_ = value;
}
inline void CMsgSystemUpdateState::set_state(::EUpdaterState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateState.state)
}

// optional .CMsgSystemUpdateProgress progress = 2;
inline bool CMsgSystemUpdateState::_internal_has_progress() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || progress_ != nullptr);
  return value;
}
inline bool CMsgSystemUpdateState::has_progress() const {
  return _internal_has_progress();
}
inline void CMsgSystemUpdateState::clear_progress() {
  if (progress_ != nullptr) progress_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSystemUpdateProgress& CMsgSystemUpdateState::_internal_progress() const {
  const ::CMsgSystemUpdateProgress* p = progress_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSystemUpdateProgress&>(
      ::_CMsgSystemUpdateProgress_default_instance_);
}
inline const ::CMsgSystemUpdateProgress& CMsgSystemUpdateState::progress() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateState.progress)
  return _internal_progress();
}
inline void CMsgSystemUpdateState::unsafe_arena_set_allocated_progress(
    ::CMsgSystemUpdateProgress* progress) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_);
  }
  progress_ = progress;
  if (progress) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSystemUpdateState.progress)
}
inline ::CMsgSystemUpdateProgress* CMsgSystemUpdateState::release_progress() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSystemUpdateProgress* temp = progress_;
  progress_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSystemUpdateProgress* CMsgSystemUpdateState::unsafe_arena_release_progress() {
  // @@protoc_insertion_point(field_release:CMsgSystemUpdateState.progress)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSystemUpdateProgress* temp = progress_;
  progress_ = nullptr;
  return temp;
}
inline ::CMsgSystemUpdateProgress* CMsgSystemUpdateState::_internal_mutable_progress() {
  _has_bits_[0] |= 0x00000001u;
  if (progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSystemUpdateProgress>(GetArenaForAllocation());
    progress_ = p;
  }
  return progress_;
}
inline ::CMsgSystemUpdateProgress* CMsgSystemUpdateState::mutable_progress() {
  ::CMsgSystemUpdateProgress* _msg = _internal_mutable_progress();
  // @@protoc_insertion_point(field_mutable:CMsgSystemUpdateState.progress)
  return _msg;
}
inline void CMsgSystemUpdateState::set_allocated_progress(::CMsgSystemUpdateProgress* progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete progress_;
  }
  if (progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgSystemUpdateProgress>::GetOwningArena(progress);
    if (message_arena != submessage_arena) {
      progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:CMsgSystemUpdateState.progress)
}

// repeated .CMsgSystemUpdateCheckResult update_check_results = 3;
inline int CMsgSystemUpdateState::_internal_update_check_results_size() const {
  return update_check_results_.size();
}
inline int CMsgSystemUpdateState::update_check_results_size() const {
  return _internal_update_check_results_size();
}
inline void CMsgSystemUpdateState::clear_update_check_results() {
  update_check_results_.Clear();
}
inline ::CMsgSystemUpdateCheckResult* CMsgSystemUpdateState::mutable_update_check_results(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSystemUpdateState.update_check_results)
  return update_check_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemUpdateCheckResult >*
CMsgSystemUpdateState::mutable_update_check_results() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemUpdateState.update_check_results)
  return &update_check_results_;
}
inline const ::CMsgSystemUpdateCheckResult& CMsgSystemUpdateState::_internal_update_check_results(int index) const {
  return update_check_results_.Get(index);
}
inline const ::CMsgSystemUpdateCheckResult& CMsgSystemUpdateState::update_check_results(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateState.update_check_results)
  return _internal_update_check_results(index);
}
inline ::CMsgSystemUpdateCheckResult* CMsgSystemUpdateState::_internal_add_update_check_results() {
  return update_check_results_.Add();
}
inline ::CMsgSystemUpdateCheckResult* CMsgSystemUpdateState::add_update_check_results() {
  ::CMsgSystemUpdateCheckResult* _add = _internal_add_update_check_results();
  // @@protoc_insertion_point(field_add:CMsgSystemUpdateState.update_check_results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemUpdateCheckResult >&
CMsgSystemUpdateState::update_check_results() const {
  // @@protoc_insertion_point(field_list:CMsgSystemUpdateState.update_check_results)
  return update_check_results_;
}

// repeated .CMsgSystemUpdateApplyResult update_apply_results = 4;
inline int CMsgSystemUpdateState::_internal_update_apply_results_size() const {
  return update_apply_results_.size();
}
inline int CMsgSystemUpdateState::update_apply_results_size() const {
  return _internal_update_apply_results_size();
}
inline void CMsgSystemUpdateState::clear_update_apply_results() {
  update_apply_results_.Clear();
}
inline ::CMsgSystemUpdateApplyResult* CMsgSystemUpdateState::mutable_update_apply_results(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSystemUpdateState.update_apply_results)
  return update_apply_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemUpdateApplyResult >*
CMsgSystemUpdateState::mutable_update_apply_results() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSystemUpdateState.update_apply_results)
  return &update_apply_results_;
}
inline const ::CMsgSystemUpdateApplyResult& CMsgSystemUpdateState::_internal_update_apply_results(int index) const {
  return update_apply_results_.Get(index);
}
inline const ::CMsgSystemUpdateApplyResult& CMsgSystemUpdateState::update_apply_results(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateState.update_apply_results)
  return _internal_update_apply_results(index);
}
inline ::CMsgSystemUpdateApplyResult* CMsgSystemUpdateState::_internal_add_update_apply_results() {
  return update_apply_results_.Add();
}
inline ::CMsgSystemUpdateApplyResult* CMsgSystemUpdateState::add_update_apply_results() {
  ::CMsgSystemUpdateApplyResult* _add = _internal_add_update_apply_results();
  // @@protoc_insertion_point(field_add:CMsgSystemUpdateState.update_apply_results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSystemUpdateApplyResult >&
CMsgSystemUpdateState::update_apply_results() const {
  // @@protoc_insertion_point(field_list:CMsgSystemUpdateState.update_apply_results)
  return update_apply_results_;
}

// optional bool supports_os_updates = 5;
inline bool CMsgSystemUpdateState::_internal_has_supports_os_updates() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSystemUpdateState::has_supports_os_updates() const {
  return _internal_has_supports_os_updates();
}
inline void CMsgSystemUpdateState::clear_supports_os_updates() {
  supports_os_updates_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgSystemUpdateState::_internal_supports_os_updates() const {
  return supports_os_updates_;
}
inline bool CMsgSystemUpdateState::supports_os_updates() const {
  // @@protoc_insertion_point(field_get:CMsgSystemUpdateState.supports_os_updates)
  return _internal_supports_os_updates();
}
inline void CMsgSystemUpdateState::_internal_set_supports_os_updates(bool value) {
  _has_bits_[0] |= 0x00000004u;
  supports_os_updates_ = value;
}
inline void CMsgSystemUpdateState::set_supports_os_updates(bool value) {
  _internal_set_supports_os_updates(value);
  // @@protoc_insertion_point(field_set:CMsgSystemUpdateState.supports_os_updates)
}

// -------------------------------------------------------------------

// CMsgAchievementChange

// optional uint32 appid = 1;
inline bool CMsgAchievementChange::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAchievementChange::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgAchievementChange::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgAchievementChange::_internal_appid() const {
  return appid_;
}
inline uint32_t CMsgAchievementChange::appid() const {
  // @@protoc_insertion_point(field_get:CMsgAchievementChange.appid)
  return _internal_appid();
}
inline void CMsgAchievementChange::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CMsgAchievementChange::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgAchievementChange.appid)
}

// -------------------------------------------------------------------

// CMsgCellList_Cell

// optional uint32 cell_id = 1;
inline bool CMsgCellList_Cell::_internal_has_cell_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgCellList_Cell::has_cell_id() const {
  return _internal_has_cell_id();
}
inline void CMsgCellList_Cell::clear_cell_id() {
  cell_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgCellList_Cell::_internal_cell_id() const {
  return cell_id_;
}
inline uint32_t CMsgCellList_Cell::cell_id() const {
  // @@protoc_insertion_point(field_get:CMsgCellList.Cell.cell_id)
  return _internal_cell_id();
}
inline void CMsgCellList_Cell::_internal_set_cell_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  cell_id_ = value;
}
inline void CMsgCellList_Cell::set_cell_id(uint32_t value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:CMsgCellList.Cell.cell_id)
}

// optional string loc_name = 2;
inline bool CMsgCellList_Cell::_internal_has_loc_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgCellList_Cell::has_loc_name() const {
  return _internal_has_loc_name();
}
inline void CMsgCellList_Cell::clear_loc_name() {
  loc_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgCellList_Cell::loc_name() const {
  // @@protoc_insertion_point(field_get:CMsgCellList.Cell.loc_name)
  return _internal_loc_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgCellList_Cell::set_loc_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 loc_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgCellList.Cell.loc_name)
}
inline std::string* CMsgCellList_Cell::mutable_loc_name() {
  std::string* _s = _internal_mutable_loc_name();
  // @@protoc_insertion_point(field_mutable:CMsgCellList.Cell.loc_name)
  return _s;
}
inline const std::string& CMsgCellList_Cell::_internal_loc_name() const {
  return loc_name_.Get();
}
inline void CMsgCellList_Cell::_internal_set_loc_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  loc_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgCellList_Cell::_internal_mutable_loc_name() {
  _has_bits_[0] |= 0x00000001u;
  return loc_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgCellList_Cell::release_loc_name() {
  // @@protoc_insertion_point(field_release:CMsgCellList.Cell.loc_name)
  if (!_internal_has_loc_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = loc_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (loc_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    loc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgCellList_Cell::set_allocated_loc_name(std::string* loc_name) {
  if (loc_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  loc_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loc_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (loc_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    loc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgCellList.Cell.loc_name)
}

// -------------------------------------------------------------------

// CMsgCellList

// repeated .CMsgCellList.Cell cells = 1;
inline int CMsgCellList::_internal_cells_size() const {
  return cells_.size();
}
inline int CMsgCellList::cells_size() const {
  return _internal_cells_size();
}
inline void CMsgCellList::clear_cells() {
  cells_.Clear();
}
inline ::CMsgCellList_Cell* CMsgCellList::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgCellList.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgCellList_Cell >*
CMsgCellList::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:CMsgCellList.cells)
  return &cells_;
}
inline const ::CMsgCellList_Cell& CMsgCellList::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::CMsgCellList_Cell& CMsgCellList::cells(int index) const {
  // @@protoc_insertion_point(field_get:CMsgCellList.cells)
  return _internal_cells(index);
}
inline ::CMsgCellList_Cell* CMsgCellList::_internal_add_cells() {
  return cells_.Add();
}
inline ::CMsgCellList_Cell* CMsgCellList::add_cells() {
  ::CMsgCellList_Cell* _add = _internal_add_cells();
  // @@protoc_insertion_point(field_add:CMsgCellList.cells)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgCellList_Cell >&
CMsgCellList::cells() const {
  // @@protoc_insertion_point(field_list:CMsgCellList.cells)
  return cells_;
}

// -------------------------------------------------------------------

// CMsgShortcutInfo

// optional uint32 appid = 1;
inline bool CMsgShortcutInfo::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgShortcutInfo::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgShortcutInfo::_internal_appid() const {
  return appid_;
}
inline uint32_t CMsgShortcutInfo::appid() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.appid)
  return _internal_appid();
}
inline void CMsgShortcutInfo::_internal_set_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  appid_ = value;
}
inline void CMsgShortcutInfo::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.appid)
}

// optional string exe = 2;
inline bool CMsgShortcutInfo::_internal_has_exe() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_exe() const {
  return _internal_has_exe();
}
inline void CMsgShortcutInfo::clear_exe() {
  exe_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgShortcutInfo::exe() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.exe)
  return _internal_exe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShortcutInfo::set_exe(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 exe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.exe)
}
inline std::string* CMsgShortcutInfo::mutable_exe() {
  std::string* _s = _internal_mutable_exe();
  // @@protoc_insertion_point(field_mutable:CMsgShortcutInfo.exe)
  return _s;
}
inline const std::string& CMsgShortcutInfo::_internal_exe() const {
  return exe_.Get();
}
inline void CMsgShortcutInfo::_internal_set_exe(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  exe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::_internal_mutable_exe() {
  _has_bits_[0] |= 0x00000001u;
  return exe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::release_exe() {
  // @@protoc_insertion_point(field_release:CMsgShortcutInfo.exe)
  if (!_internal_has_exe()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = exe_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exe_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exe_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShortcutInfo::set_allocated_exe(std::string* exe) {
  if (exe != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  exe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exe,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (exe_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    exe_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShortcutInfo.exe)
}

// optional string start_dir = 3;
inline bool CMsgShortcutInfo::_internal_has_start_dir() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_start_dir() const {
  return _internal_has_start_dir();
}
inline void CMsgShortcutInfo::clear_start_dir() {
  start_dir_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgShortcutInfo::start_dir() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.start_dir)
  return _internal_start_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShortcutInfo::set_start_dir(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 start_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.start_dir)
}
inline std::string* CMsgShortcutInfo::mutable_start_dir() {
  std::string* _s = _internal_mutable_start_dir();
  // @@protoc_insertion_point(field_mutable:CMsgShortcutInfo.start_dir)
  return _s;
}
inline const std::string& CMsgShortcutInfo::_internal_start_dir() const {
  return start_dir_.Get();
}
inline void CMsgShortcutInfo::_internal_set_start_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  start_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::_internal_mutable_start_dir() {
  _has_bits_[0] |= 0x00000002u;
  return start_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::release_start_dir() {
  // @@protoc_insertion_point(field_release:CMsgShortcutInfo.start_dir)
  if (!_internal_has_start_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = start_dir_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (start_dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    start_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShortcutInfo::set_allocated_start_dir(std::string* start_dir) {
  if (start_dir != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (start_dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    start_dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShortcutInfo.start_dir)
}

// optional string icon = 4;
inline bool CMsgShortcutInfo::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_icon() const {
  return _internal_has_icon();
}
inline void CMsgShortcutInfo::clear_icon() {
  icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgShortcutInfo::icon() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShortcutInfo::set_icon(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.icon)
}
inline std::string* CMsgShortcutInfo::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:CMsgShortcutInfo.icon)
  return _s;
}
inline const std::string& CMsgShortcutInfo::_internal_icon() const {
  return icon_.Get();
}
inline void CMsgShortcutInfo::_internal_set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000004u;
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::release_icon() {
  // @@protoc_insertion_point(field_release:CMsgShortcutInfo.icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = icon_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShortcutInfo::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShortcutInfo.icon)
}

// optional string path = 5;
inline bool CMsgShortcutInfo::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_path() const {
  return _internal_has_path();
}
inline void CMsgShortcutInfo::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgShortcutInfo::path() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShortcutInfo::set_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.path)
}
inline std::string* CMsgShortcutInfo::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:CMsgShortcutInfo.path)
  return _s;
}
inline const std::string& CMsgShortcutInfo::_internal_path() const {
  return path_.Get();
}
inline void CMsgShortcutInfo::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000008u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::release_path() {
  // @@protoc_insertion_point(field_release:CMsgShortcutInfo.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShortcutInfo::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShortcutInfo.path)
}

// optional string args = 6;
inline bool CMsgShortcutInfo::_internal_has_args() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_args() const {
  return _internal_has_args();
}
inline void CMsgShortcutInfo::clear_args() {
  args_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgShortcutInfo::args() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.args)
  return _internal_args();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShortcutInfo::set_args(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.args)
}
inline std::string* CMsgShortcutInfo::mutable_args() {
  std::string* _s = _internal_mutable_args();
  // @@protoc_insertion_point(field_mutable:CMsgShortcutInfo.args)
  return _s;
}
inline const std::string& CMsgShortcutInfo::_internal_args() const {
  return args_.Get();
}
inline void CMsgShortcutInfo::_internal_set_args(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::_internal_mutable_args() {
  _has_bits_[0] |= 0x00000010u;
  return args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::release_args() {
  // @@protoc_insertion_point(field_release:CMsgShortcutInfo.args)
  if (!_internal_has_args()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = args_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (args_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShortcutInfo::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (args_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShortcutInfo.args)
}

// optional string app_name = 7;
inline bool CMsgShortcutInfo::_internal_has_app_name() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_app_name() const {
  return _internal_has_app_name();
}
inline void CMsgShortcutInfo::clear_app_name() {
  app_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CMsgShortcutInfo::app_name() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShortcutInfo::set_app_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.app_name)
}
inline std::string* CMsgShortcutInfo::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:CMsgShortcutInfo.app_name)
  return _s;
}
inline const std::string& CMsgShortcutInfo::_internal_app_name() const {
  return app_name_.Get();
}
inline void CMsgShortcutInfo::_internal_set_app_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::_internal_mutable_app_name() {
  _has_bits_[0] |= 0x00000020u;
  return app_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::release_app_name() {
  // @@protoc_insertion_point(field_release:CMsgShortcutInfo.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = app_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShortcutInfo::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  app_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShortcutInfo.app_name)
}

// optional uint32 override_appid = 8;
inline bool CMsgShortcutInfo::_internal_has_override_appid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_override_appid() const {
  return _internal_has_override_appid();
}
inline void CMsgShortcutInfo::clear_override_appid() {
  override_appid_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgShortcutInfo::_internal_override_appid() const {
  return override_appid_;
}
inline uint32_t CMsgShortcutInfo::override_appid() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.override_appid)
  return _internal_override_appid();
}
inline void CMsgShortcutInfo::_internal_set_override_appid(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  override_appid_ = value;
}
inline void CMsgShortcutInfo::set_override_appid(uint32_t value) {
  _internal_set_override_appid(value);
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.override_appid)
}

// optional string flatpak_appid = 9;
inline bool CMsgShortcutInfo::_internal_has_flatpak_appid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_flatpak_appid() const {
  return _internal_has_flatpak_appid();
}
inline void CMsgShortcutInfo::clear_flatpak_appid() {
  flatpak_appid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CMsgShortcutInfo::flatpak_appid() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.flatpak_appid)
  return _internal_flatpak_appid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShortcutInfo::set_flatpak_appid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 flatpak_appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.flatpak_appid)
}
inline std::string* CMsgShortcutInfo::mutable_flatpak_appid() {
  std::string* _s = _internal_mutable_flatpak_appid();
  // @@protoc_insertion_point(field_mutable:CMsgShortcutInfo.flatpak_appid)
  return _s;
}
inline const std::string& CMsgShortcutInfo::_internal_flatpak_appid() const {
  return flatpak_appid_.Get();
}
inline void CMsgShortcutInfo::_internal_set_flatpak_appid(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  flatpak_appid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::_internal_mutable_flatpak_appid() {
  _has_bits_[0] |= 0x00000040u;
  return flatpak_appid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::release_flatpak_appid() {
  // @@protoc_insertion_point(field_release:CMsgShortcutInfo.flatpak_appid)
  if (!_internal_has_flatpak_appid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = flatpak_appid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flatpak_appid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flatpak_appid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShortcutInfo::set_allocated_flatpak_appid(std::string* flatpak_appid) {
  if (flatpak_appid != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  flatpak_appid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flatpak_appid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (flatpak_appid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    flatpak_appid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShortcutInfo.flatpak_appid)
}

// repeated string tags = 10;
inline int CMsgShortcutInfo::_internal_tags_size() const {
  return tags_.size();
}
inline int CMsgShortcutInfo::tags_size() const {
  return _internal_tags_size();
}
inline void CMsgShortcutInfo::clear_tags() {
  tags_.Clear();
}
inline std::string* CMsgShortcutInfo::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:CMsgShortcutInfo.tags)
  return _s;
}
inline const std::string& CMsgShortcutInfo::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& CMsgShortcutInfo::tags(int index) const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.tags)
  return _internal_tags(index);
}
inline std::string* CMsgShortcutInfo::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgShortcutInfo.tags)
  return tags_.Mutable(index);
}
inline void CMsgShortcutInfo::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.tags)
}
inline void CMsgShortcutInfo::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.tags)
}
inline void CMsgShortcutInfo::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgShortcutInfo.tags)
}
inline void CMsgShortcutInfo::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgShortcutInfo.tags)
}
inline std::string* CMsgShortcutInfo::_internal_add_tags() {
  return tags_.Add();
}
inline void CMsgShortcutInfo::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgShortcutInfo.tags)
}
inline void CMsgShortcutInfo::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgShortcutInfo.tags)
}
inline void CMsgShortcutInfo::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgShortcutInfo.tags)
}
inline void CMsgShortcutInfo::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgShortcutInfo.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgShortcutInfo::tags() const {
  // @@protoc_insertion_point(field_list:CMsgShortcutInfo.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgShortcutInfo::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CMsgShortcutInfo.tags)
  return &tags_;
}

// optional bool is_remote = 11;
inline bool CMsgShortcutInfo::_internal_has_is_remote() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_is_remote() const {
  return _internal_has_is_remote();
}
inline void CMsgShortcutInfo::clear_is_remote() {
  is_remote_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgShortcutInfo::_internal_is_remote() const {
  return is_remote_;
}
inline bool CMsgShortcutInfo::is_remote() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.is_remote)
  return _internal_is_remote();
}
inline void CMsgShortcutInfo::_internal_set_is_remote(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_remote_ = value;
}
inline void CMsgShortcutInfo::set_is_remote(bool value) {
  _internal_set_is_remote(value);
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.is_remote)
}

// optional bool is_hidden = 12;
inline bool CMsgShortcutInfo::_internal_has_is_hidden() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_is_hidden() const {
  return _internal_has_is_hidden();
}
inline void CMsgShortcutInfo::clear_is_hidden() {
  is_hidden_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgShortcutInfo::_internal_is_hidden() const {
  return is_hidden_;
}
inline bool CMsgShortcutInfo::is_hidden() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.is_hidden)
  return _internal_is_hidden();
}
inline void CMsgShortcutInfo::_internal_set_is_hidden(bool value) {
  _has_bits_[0] |= 0x00000800u;
  is_hidden_ = value;
}
inline void CMsgShortcutInfo::set_is_hidden(bool value) {
  _internal_set_is_hidden(value);
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.is_hidden)
}

// optional bool is_temporary = 13;
inline bool CMsgShortcutInfo::_internal_has_is_temporary() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_is_temporary() const {
  return _internal_has_is_temporary();
}
inline void CMsgShortcutInfo::clear_is_temporary() {
  is_temporary_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgShortcutInfo::_internal_is_temporary() const {
  return is_temporary_;
}
inline bool CMsgShortcutInfo::is_temporary() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.is_temporary)
  return _internal_is_temporary();
}
inline void CMsgShortcutInfo::_internal_set_is_temporary(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_temporary_ = value;
}
inline void CMsgShortcutInfo::set_is_temporary(bool value) {
  _internal_set_is_temporary(value);
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.is_temporary)
}

// optional bool is_openvr = 14;
inline bool CMsgShortcutInfo::_internal_has_is_openvr() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_is_openvr() const {
  return _internal_has_is_openvr();
}
inline void CMsgShortcutInfo::clear_is_openvr() {
  is_openvr_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CMsgShortcutInfo::_internal_is_openvr() const {
  return is_openvr_;
}
inline bool CMsgShortcutInfo::is_openvr() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.is_openvr)
  return _internal_is_openvr();
}
inline void CMsgShortcutInfo::_internal_set_is_openvr(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_openvr_ = value;
}
inline void CMsgShortcutInfo::set_is_openvr(bool value) {
  _internal_set_is_openvr(value);
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.is_openvr)
}

// optional bool allow_desktop_config = 15;
inline bool CMsgShortcutInfo::_internal_has_allow_desktop_config() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_allow_desktop_config() const {
  return _internal_has_allow_desktop_config();
}
inline void CMsgShortcutInfo::clear_allow_desktop_config() {
  allow_desktop_config_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CMsgShortcutInfo::_internal_allow_desktop_config() const {
  return allow_desktop_config_;
}
inline bool CMsgShortcutInfo::allow_desktop_config() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.allow_desktop_config)
  return _internal_allow_desktop_config();
}
inline void CMsgShortcutInfo::_internal_set_allow_desktop_config(bool value) {
  _has_bits_[0] |= 0x00004000u;
  allow_desktop_config_ = value;
}
inline void CMsgShortcutInfo::set_allow_desktop_config(bool value) {
  _internal_set_allow_desktop_config(value);
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.allow_desktop_config)
}

// optional bool allow_overlay = 16;
inline bool CMsgShortcutInfo::_internal_has_allow_overlay() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_allow_overlay() const {
  return _internal_has_allow_overlay();
}
inline void CMsgShortcutInfo::clear_allow_overlay() {
  allow_overlay_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CMsgShortcutInfo::_internal_allow_overlay() const {
  return allow_overlay_;
}
inline bool CMsgShortcutInfo::allow_overlay() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.allow_overlay)
  return _internal_allow_overlay();
}
inline void CMsgShortcutInfo::_internal_set_allow_overlay(bool value) {
  _has_bits_[0] |= 0x00008000u;
  allow_overlay_ = value;
}
inline void CMsgShortcutInfo::set_allow_overlay(bool value) {
  _internal_set_allow_overlay(value);
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.allow_overlay)
}

// optional uint32 rt_last_played_time = 17;
inline bool CMsgShortcutInfo::_internal_has_rt_last_played_time() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_rt_last_played_time() const {
  return _internal_has_rt_last_played_time();
}
inline void CMsgShortcutInfo::clear_rt_last_played_time() {
  rt_last_played_time_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgShortcutInfo::_internal_rt_last_played_time() const {
  return rt_last_played_time_;
}
inline uint32_t CMsgShortcutInfo::rt_last_played_time() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.rt_last_played_time)
  return _internal_rt_last_played_time();
}
inline void CMsgShortcutInfo::_internal_set_rt_last_played_time(uint32_t value) {
  _has_bits_[0] |= 0x00020000u;
  rt_last_played_time_ = value;
}
inline void CMsgShortcutInfo::set_rt_last_played_time(uint32_t value) {
  _internal_set_rt_last_played_time(value);
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.rt_last_played_time)
}

// optional bool is_devkit_shortcut = 18;
inline bool CMsgShortcutInfo::_internal_has_is_devkit_shortcut() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_is_devkit_shortcut() const {
  return _internal_has_is_devkit_shortcut();
}
inline void CMsgShortcutInfo::clear_is_devkit_shortcut() {
  is_devkit_shortcut_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CMsgShortcutInfo::_internal_is_devkit_shortcut() const {
  return is_devkit_shortcut_;
}
inline bool CMsgShortcutInfo::is_devkit_shortcut() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.is_devkit_shortcut)
  return _internal_is_devkit_shortcut();
}
inline void CMsgShortcutInfo::_internal_set_is_devkit_shortcut(bool value) {
  _has_bits_[0] |= 0x00010000u;
  is_devkit_shortcut_ = value;
}
inline void CMsgShortcutInfo::set_is_devkit_shortcut(bool value) {
  _internal_set_is_devkit_shortcut(value);
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.is_devkit_shortcut)
}

// optional string devkit_gameid = 19;
inline bool CMsgShortcutInfo::_internal_has_devkit_gameid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgShortcutInfo::has_devkit_gameid() const {
  return _internal_has_devkit_gameid();
}
inline void CMsgShortcutInfo::clear_devkit_gameid() {
  devkit_gameid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CMsgShortcutInfo::devkit_gameid() const {
  // @@protoc_insertion_point(field_get:CMsgShortcutInfo.devkit_gameid)
  return _internal_devkit_gameid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgShortcutInfo::set_devkit_gameid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 devkit_gameid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgShortcutInfo.devkit_gameid)
}
inline std::string* CMsgShortcutInfo::mutable_devkit_gameid() {
  std::string* _s = _internal_mutable_devkit_gameid();
  // @@protoc_insertion_point(field_mutable:CMsgShortcutInfo.devkit_gameid)
  return _s;
}
inline const std::string& CMsgShortcutInfo::_internal_devkit_gameid() const {
  return devkit_gameid_.Get();
}
inline void CMsgShortcutInfo::_internal_set_devkit_gameid(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  devkit_gameid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::_internal_mutable_devkit_gameid() {
  _has_bits_[0] |= 0x00000080u;
  return devkit_gameid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgShortcutInfo::release_devkit_gameid() {
  // @@protoc_insertion_point(field_release:CMsgShortcutInfo.devkit_gameid)
  if (!_internal_has_devkit_gameid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = devkit_gameid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (devkit_gameid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    devkit_gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgShortcutInfo::set_allocated_devkit_gameid(std::string* devkit_gameid) {
  if (devkit_gameid != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  devkit_gameid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devkit_gameid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (devkit_gameid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    devkit_gameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgShortcutInfo.devkit_gameid)
}

// -------------------------------------------------------------------

// CMsgShortcutAppIds

// repeated uint32 appids = 1;
inline int CMsgShortcutAppIds::_internal_appids_size() const {
  return appids_.size();
}
inline int CMsgShortcutAppIds::appids_size() const {
  return _internal_appids_size();
}
inline void CMsgShortcutAppIds::clear_appids() {
  appids_.Clear();
}
inline uint32_t CMsgShortcutAppIds::_internal_appids(int index) const {
  return appids_.Get(index);
}
inline uint32_t CMsgShortcutAppIds::appids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgShortcutAppIds.appids)
  return _internal_appids(index);
}
inline void CMsgShortcutAppIds::set_appids(int index, uint32_t value) {
  appids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgShortcutAppIds.appids)
}
inline void CMsgShortcutAppIds::_internal_add_appids(uint32_t value) {
  appids_.Add(value);
}
inline void CMsgShortcutAppIds::add_appids(uint32_t value) {
  _internal_add_appids(value);
  // @@protoc_insertion_point(field_add:CMsgShortcutAppIds.appids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgShortcutAppIds::_internal_appids() const {
  return appids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgShortcutAppIds::appids() const {
  // @@protoc_insertion_point(field_list:CMsgShortcutAppIds.appids)
  return _internal_appids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgShortcutAppIds::_internal_mutable_appids() {
  return &appids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgShortcutAppIds::mutable_appids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgShortcutAppIds.appids)
  return _internal_mutable_appids();
}

// -------------------------------------------------------------------

// CMsgMonitorInfo_MonitorInfo

// required string monitor_device_name = 1;
inline bool CMsgMonitorInfo_MonitorInfo::_internal_has_monitor_device_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMonitorInfo_MonitorInfo::has_monitor_device_name() const {
  return _internal_has_monitor_device_name();
}
inline void CMsgMonitorInfo_MonitorInfo::clear_monitor_device_name() {
  monitor_device_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgMonitorInfo_MonitorInfo::monitor_device_name() const {
  // @@protoc_insertion_point(field_get:CMsgMonitorInfo.MonitorInfo.monitor_device_name)
  return _internal_monitor_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgMonitorInfo_MonitorInfo::set_monitor_device_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 monitor_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgMonitorInfo.MonitorInfo.monitor_device_name)
}
inline std::string* CMsgMonitorInfo_MonitorInfo::mutable_monitor_device_name() {
  std::string* _s = _internal_mutable_monitor_device_name();
  // @@protoc_insertion_point(field_mutable:CMsgMonitorInfo.MonitorInfo.monitor_device_name)
  return _s;
}
inline const std::string& CMsgMonitorInfo_MonitorInfo::_internal_monitor_device_name() const {
  return monitor_device_name_.Get();
}
inline void CMsgMonitorInfo_MonitorInfo::_internal_set_monitor_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  monitor_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgMonitorInfo_MonitorInfo::_internal_mutable_monitor_device_name() {
  _has_bits_[0] |= 0x00000001u;
  return monitor_device_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgMonitorInfo_MonitorInfo::release_monitor_device_name() {
  // @@protoc_insertion_point(field_release:CMsgMonitorInfo.MonitorInfo.monitor_device_name)
  if (!_internal_has_monitor_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = monitor_device_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (monitor_device_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    monitor_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgMonitorInfo_MonitorInfo::set_allocated_monitor_device_name(std::string* monitor_device_name) {
  if (monitor_device_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  monitor_device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), monitor_device_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (monitor_device_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    monitor_device_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgMonitorInfo.MonitorInfo.monitor_device_name)
}

// required string monitor_display_name = 2;
inline bool CMsgMonitorInfo_MonitorInfo::_internal_has_monitor_display_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMonitorInfo_MonitorInfo::has_monitor_display_name() const {
  return _internal_has_monitor_display_name();
}
inline void CMsgMonitorInfo_MonitorInfo::clear_monitor_display_name() {
  monitor_display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgMonitorInfo_MonitorInfo::monitor_display_name() const {
  // @@protoc_insertion_point(field_get:CMsgMonitorInfo.MonitorInfo.monitor_display_name)
  return _internal_monitor_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgMonitorInfo_MonitorInfo::set_monitor_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 monitor_display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgMonitorInfo.MonitorInfo.monitor_display_name)
}
inline std::string* CMsgMonitorInfo_MonitorInfo::mutable_monitor_display_name() {
  std::string* _s = _internal_mutable_monitor_display_name();
  // @@protoc_insertion_point(field_mutable:CMsgMonitorInfo.MonitorInfo.monitor_display_name)
  return _s;
}
inline const std::string& CMsgMonitorInfo_MonitorInfo::_internal_monitor_display_name() const {
  return monitor_display_name_.Get();
}
inline void CMsgMonitorInfo_MonitorInfo::_internal_set_monitor_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  monitor_display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgMonitorInfo_MonitorInfo::_internal_mutable_monitor_display_name() {
  _has_bits_[0] |= 0x00000002u;
  return monitor_display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgMonitorInfo_MonitorInfo::release_monitor_display_name() {
  // @@protoc_insertion_point(field_release:CMsgMonitorInfo.MonitorInfo.monitor_display_name)
  if (!_internal_has_monitor_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = monitor_display_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (monitor_display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    monitor_display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgMonitorInfo_MonitorInfo::set_allocated_monitor_display_name(std::string* monitor_display_name) {
  if (monitor_display_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  monitor_display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), monitor_display_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (monitor_display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    monitor_display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgMonitorInfo.MonitorInfo.monitor_display_name)
}

// -------------------------------------------------------------------

// CMsgMonitorInfo

// required string selected_display_name = 1;
inline bool CMsgMonitorInfo::_internal_has_selected_display_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMonitorInfo::has_selected_display_name() const {
  return _internal_has_selected_display_name();
}
inline void CMsgMonitorInfo::clear_selected_display_name() {
  selected_display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgMonitorInfo::selected_display_name() const {
  // @@protoc_insertion_point(field_get:CMsgMonitorInfo.selected_display_name)
  return _internal_selected_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgMonitorInfo::set_selected_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 selected_display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgMonitorInfo.selected_display_name)
}
inline std::string* CMsgMonitorInfo::mutable_selected_display_name() {
  std::string* _s = _internal_mutable_selected_display_name();
  // @@protoc_insertion_point(field_mutable:CMsgMonitorInfo.selected_display_name)
  return _s;
}
inline const std::string& CMsgMonitorInfo::_internal_selected_display_name() const {
  return selected_display_name_.Get();
}
inline void CMsgMonitorInfo::_internal_set_selected_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  selected_display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgMonitorInfo::_internal_mutable_selected_display_name() {
  _has_bits_[0] |= 0x00000001u;
  return selected_display_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgMonitorInfo::release_selected_display_name() {
  // @@protoc_insertion_point(field_release:CMsgMonitorInfo.selected_display_name)
  if (!_internal_has_selected_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = selected_display_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (selected_display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    selected_display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgMonitorInfo::set_allocated_selected_display_name(std::string* selected_display_name) {
  if (selected_display_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  selected_display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selected_display_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (selected_display_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    selected_display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgMonitorInfo.selected_display_name)
}

// repeated .CMsgMonitorInfo.MonitorInfo monitors = 2;
inline int CMsgMonitorInfo::_internal_monitors_size() const {
  return monitors_.size();
}
inline int CMsgMonitorInfo::monitors_size() const {
  return _internal_monitors_size();
}
inline void CMsgMonitorInfo::clear_monitors() {
  monitors_.Clear();
}
inline ::CMsgMonitorInfo_MonitorInfo* CMsgMonitorInfo::mutable_monitors(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgMonitorInfo.monitors)
  return monitors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMonitorInfo_MonitorInfo >*
CMsgMonitorInfo::mutable_monitors() {
  // @@protoc_insertion_point(field_mutable_list:CMsgMonitorInfo.monitors)
  return &monitors_;
}
inline const ::CMsgMonitorInfo_MonitorInfo& CMsgMonitorInfo::_internal_monitors(int index) const {
  return monitors_.Get(index);
}
inline const ::CMsgMonitorInfo_MonitorInfo& CMsgMonitorInfo::monitors(int index) const {
  // @@protoc_insertion_point(field_get:CMsgMonitorInfo.monitors)
  return _internal_monitors(index);
}
inline ::CMsgMonitorInfo_MonitorInfo* CMsgMonitorInfo::_internal_add_monitors() {
  return monitors_.Add();
}
inline ::CMsgMonitorInfo_MonitorInfo* CMsgMonitorInfo::add_monitors() {
  ::CMsgMonitorInfo_MonitorInfo* _add = _internal_add_monitors();
  // @@protoc_insertion_point(field_add:CMsgMonitorInfo.monitors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMonitorInfo_MonitorInfo >&
CMsgMonitorInfo::monitors() const {
  // @@protoc_insertion_point(field_list:CMsgMonitorInfo.monitors)
  return monitors_;
}

// -------------------------------------------------------------------

// CMsgGenerateSystemReportReply

// optional string report_id = 1;
inline bool CMsgGenerateSystemReportReply::_internal_has_report_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGenerateSystemReportReply::has_report_id() const {
  return _internal_has_report_id();
}
inline void CMsgGenerateSystemReportReply::clear_report_id() {
  report_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGenerateSystemReportReply::report_id() const {
  // @@protoc_insertion_point(field_get:CMsgGenerateSystemReportReply.report_id)
  return _internal_report_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGenerateSystemReportReply::set_report_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 report_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGenerateSystemReportReply.report_id)
}
inline std::string* CMsgGenerateSystemReportReply::mutable_report_id() {
  std::string* _s = _internal_mutable_report_id();
  // @@protoc_insertion_point(field_mutable:CMsgGenerateSystemReportReply.report_id)
  return _s;
}
inline const std::string& CMsgGenerateSystemReportReply::_internal_report_id() const {
  return report_id_.Get();
}
inline void CMsgGenerateSystemReportReply::_internal_set_report_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  report_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGenerateSystemReportReply::_internal_mutable_report_id() {
  _has_bits_[0] |= 0x00000001u;
  return report_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGenerateSystemReportReply::release_report_id() {
  // @@protoc_insertion_point(field_release:CMsgGenerateSystemReportReply.report_id)
  if (!_internal_has_report_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = report_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (report_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    report_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGenerateSystemReportReply::set_allocated_report_id(std::string* report_id) {
  if (report_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  report_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), report_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (report_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    report_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGenerateSystemReportReply.report_id)
}

// -------------------------------------------------------------------

// CMsgWebUITransportInfo

// optional uint32 port = 1;
inline bool CMsgWebUITransportInfo::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgWebUITransportInfo::has_port() const {
  return _internal_has_port();
}
inline void CMsgWebUITransportInfo::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgWebUITransportInfo::_internal_port() const {
  return port_;
}
inline uint32_t CMsgWebUITransportInfo::port() const {
  // @@protoc_insertion_point(field_get:CMsgWebUITransportInfo.port)
  return _internal_port();
}
inline void CMsgWebUITransportInfo::_internal_set_port(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
}
inline void CMsgWebUITransportInfo::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:CMsgWebUITransportInfo.port)
}

// optional string auth_key = 2;
inline bool CMsgWebUITransportInfo::_internal_has_auth_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgWebUITransportInfo::has_auth_key() const {
  return _internal_has_auth_key();
}
inline void CMsgWebUITransportInfo::clear_auth_key() {
  auth_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgWebUITransportInfo::auth_key() const {
  // @@protoc_insertion_point(field_get:CMsgWebUITransportInfo.auth_key)
  return _internal_auth_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgWebUITransportInfo::set_auth_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 auth_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgWebUITransportInfo.auth_key)
}
inline std::string* CMsgWebUITransportInfo::mutable_auth_key() {
  std::string* _s = _internal_mutable_auth_key();
  // @@protoc_insertion_point(field_mutable:CMsgWebUITransportInfo.auth_key)
  return _s;
}
inline const std::string& CMsgWebUITransportInfo::_internal_auth_key() const {
  return auth_key_.Get();
}
inline void CMsgWebUITransportInfo::_internal_set_auth_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  auth_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgWebUITransportInfo::_internal_mutable_auth_key() {
  _has_bits_[0] |= 0x00000001u;
  return auth_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgWebUITransportInfo::release_auth_key() {
  // @@protoc_insertion_point(field_release:CMsgWebUITransportInfo.auth_key)
  if (!_internal_has_auth_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = auth_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auth_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgWebUITransportInfo::set_allocated_auth_key(std::string* auth_key) {
  if (auth_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  auth_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    auth_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgWebUITransportInfo.auth_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ECloudPendingRemoteOperation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ECloudPendingRemoteOperation>() {
  return ::ECloudPendingRemoteOperation_descriptor();
}
template <> struct is_proto_enum< ::ESteamDeckKeyboardLayout> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESteamDeckKeyboardLayout>() {
  return ::ESteamDeckKeyboardLayout_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclient_5fobjects_2eproto
