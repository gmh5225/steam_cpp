// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_offline.steamclient.proto

#include "steammessages_offline.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr COffline_GetOfflineLogonTicket_Request::COffline_GetOfflineLogonTicket_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : priority_(0u)
  , perform_encryption_(false){}
struct COffline_GetOfflineLogonTicket_RequestDefaultTypeInternal {
  constexpr COffline_GetOfflineLogonTicket_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~COffline_GetOfflineLogonTicket_RequestDefaultTypeInternal() {}
  union {
    COffline_GetOfflineLogonTicket_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT COffline_GetOfflineLogonTicket_RequestDefaultTypeInternal _COffline_GetOfflineLogonTicket_Request_default_instance_;
constexpr COffline_GetOfflineLogonTicket_Response::COffline_GetOfflineLogonTicket_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serialized_ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encrypted_ticket_(nullptr){}
struct COffline_GetOfflineLogonTicket_ResponseDefaultTypeInternal {
  constexpr COffline_GetOfflineLogonTicket_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~COffline_GetOfflineLogonTicket_ResponseDefaultTypeInternal() {}
  union {
    COffline_GetOfflineLogonTicket_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT COffline_GetOfflineLogonTicket_ResponseDefaultTypeInternal _COffline_GetOfflineLogonTicket_Response_default_instance_;
constexpr COffline_GetUnsignedOfflineLogonTicket_Request::COffline_GetUnsignedOfflineLogonTicket_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct COffline_GetUnsignedOfflineLogonTicket_RequestDefaultTypeInternal {
  constexpr COffline_GetUnsignedOfflineLogonTicket_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~COffline_GetUnsignedOfflineLogonTicket_RequestDefaultTypeInternal() {}
  union {
    COffline_GetUnsignedOfflineLogonTicket_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT COffline_GetUnsignedOfflineLogonTicket_RequestDefaultTypeInternal _COffline_GetUnsignedOfflineLogonTicket_Request_default_instance_;
constexpr COffline_OfflineLogonTicket::COffline_OfflineLogonTicket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accountid_(0u)
  , rtime32_creation_time_(0u){}
struct COffline_OfflineLogonTicketDefaultTypeInternal {
  constexpr COffline_OfflineLogonTicketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~COffline_OfflineLogonTicketDefaultTypeInternal() {}
  union {
    COffline_OfflineLogonTicket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT COffline_OfflineLogonTicketDefaultTypeInternal _COffline_OfflineLogonTicket_default_instance_;
constexpr COffline_GetUnsignedOfflineLogonTicket_Response::COffline_GetUnsignedOfflineLogonTicket_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ticket_(nullptr){}
struct COffline_GetUnsignedOfflineLogonTicket_ResponseDefaultTypeInternal {
  constexpr COffline_GetUnsignedOfflineLogonTicket_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~COffline_GetUnsignedOfflineLogonTicket_ResponseDefaultTypeInternal() {}
  union {
    COffline_GetUnsignedOfflineLogonTicket_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT COffline_GetUnsignedOfflineLogonTicket_ResponseDefaultTypeInternal _COffline_GetUnsignedOfflineLogonTicket_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5foffline_2esteamclient_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5foffline_2esteamclient_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5foffline_2esteamclient_2eproto[1];

const uint32_t TableStruct_steammessages_5foffline_2esteamclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::COffline_GetOfflineLogonTicket_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::COffline_GetOfflineLogonTicket_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::COffline_GetOfflineLogonTicket_Request, priority_),
  PROTOBUF_FIELD_OFFSET(::COffline_GetOfflineLogonTicket_Request, perform_encryption_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::COffline_GetOfflineLogonTicket_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::COffline_GetOfflineLogonTicket_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::COffline_GetOfflineLogonTicket_Response, serialized_ticket_),
  PROTOBUF_FIELD_OFFSET(::COffline_GetOfflineLogonTicket_Response, signature_),
  PROTOBUF_FIELD_OFFSET(::COffline_GetOfflineLogonTicket_Response, encrypted_ticket_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::COffline_GetUnsignedOfflineLogonTicket_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::COffline_OfflineLogonTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::COffline_OfflineLogonTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::COffline_OfflineLogonTicket, accountid_),
  PROTOBUF_FIELD_OFFSET(::COffline_OfflineLogonTicket, rtime32_creation_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::COffline_GetUnsignedOfflineLogonTicket_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::COffline_GetUnsignedOfflineLogonTicket_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::COffline_GetUnsignedOfflineLogonTicket_Response, ticket_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::COffline_GetOfflineLogonTicket_Request)},
  { 10, 19, -1, sizeof(::COffline_GetOfflineLogonTicket_Response)},
  { 22, -1, -1, sizeof(::COffline_GetUnsignedOfflineLogonTicket_Request)},
  { 28, 36, -1, sizeof(::COffline_OfflineLogonTicket)},
  { 38, 45, -1, sizeof(::COffline_GetUnsignedOfflineLogonTicket_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_COffline_GetOfflineLogonTicket_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_COffline_GetOfflineLogonTicket_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_COffline_GetUnsignedOfflineLogonTicket_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_COffline_OfflineLogonTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_COffline_GetUnsignedOfflineLogonTicket_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5foffline_2esteamclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'steammessages_offline.steamclient.prot"
  "o\032\030steammessages_base.proto\032,steammessag"
  "es_unified_base.steamclient.proto\032\024offli"
  "ne_ticket.proto\"V\n&COffline_GetOfflineLo"
  "gonTicket_Request\022\020\n\010priority\030\001 \001(\r\022\032\n\022p"
  "erform_encryption\030\002 \001(\010\"\202\001\n\'COffline_Get"
  "OfflineLogonTicket_Response\022\031\n\021serialize"
  "d_ticket\030\001 \001(\014\022\021\n\tsignature\030\002 \001(\014\022)\n\020enc"
  "rypted_ticket\030\003 \001(\0132\017.Offline_Ticket\"0\n."
  "COffline_GetUnsignedOfflineLogonTicket_R"
  "equest\"O\n\033COffline_OfflineLogonTicket\022\021\n"
  "\taccountid\030\001 \001(\r\022\035\n\025rtime32_creation_tim"
  "e\030\002 \001(\007\"_\n/COffline_GetUnsignedOfflineLo"
  "gonTicket_Response\022,\n\006ticket\030\001 \001(\0132\034.COf"
  "fline_OfflineLogonTicket2\243\003\n\007Offline\022\265\001\n"
  "\025GetOfflineLogonTicket\022\'.COffline_GetOff"
  "lineLogonTicket_Request\032(.COffline_GetOf"
  "flineLogonTicket_Response\"I\202\265\030EGet a ser"
  "ialized and signed offline logon ticket "
  "for the current user\022\301\001\n\035GetUnsignedOffl"
  "ineLogonTicket\022/.COffline_GetUnsignedOff"
  "lineLogonTicket_Request\0320.COffline_GetUn"
  "signedOfflineLogonTicket_Response\"=\202\265\0309G"
  "et an unsigned offline logon ticket for "
  "the current user\032\034\202\265\030\030Offline settings s"
  "erviceB\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5foffline_2esteamclient_2eproto_deps[3] = {
  &::descriptor_table_offline_5fticket_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
  &::descriptor_table_steammessages_5funified_5fbase_2esteamclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5foffline_2esteamclient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5foffline_2esteamclient_2eproto = {
  false, false, 1011, descriptor_table_protodef_steammessages_5foffline_2esteamclient_2eproto, "steammessages_offline.steamclient.proto", 
  &descriptor_table_steammessages_5foffline_2esteamclient_2eproto_once, descriptor_table_steammessages_5foffline_2esteamclient_2eproto_deps, 3, 5,
  schemas, file_default_instances, TableStruct_steammessages_5foffline_2esteamclient_2eproto::offsets,
  file_level_metadata_steammessages_5foffline_2esteamclient_2eproto, file_level_enum_descriptors_steammessages_5foffline_2esteamclient_2eproto, file_level_service_descriptors_steammessages_5foffline_2esteamclient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_5foffline_2esteamclient_2eproto_getter() {
  return &descriptor_table_steammessages_5foffline_2esteamclient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5foffline_2esteamclient_2eproto(&descriptor_table_steammessages_5foffline_2esteamclient_2eproto);

// ===================================================================

class COffline_GetOfflineLogonTicket_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<COffline_GetOfflineLogonTicket_Request>()._has_bits_);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_perform_encryption(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

COffline_GetOfflineLogonTicket_Request::COffline_GetOfflineLogonTicket_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:COffline_GetOfflineLogonTicket_Request)
}
COffline_GetOfflineLogonTicket_Request::COffline_GetOfflineLogonTicket_Request(const COffline_GetOfflineLogonTicket_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&priority_, &from.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&perform_encryption_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(perform_encryption_));
  // @@protoc_insertion_point(copy_constructor:COffline_GetOfflineLogonTicket_Request)
}

inline void COffline_GetOfflineLogonTicket_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&priority_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&perform_encryption_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(perform_encryption_));
}

COffline_GetOfflineLogonTicket_Request::~COffline_GetOfflineLogonTicket_Request() {
  // @@protoc_insertion_point(destructor:COffline_GetOfflineLogonTicket_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void COffline_GetOfflineLogonTicket_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void COffline_GetOfflineLogonTicket_Request::ArenaDtor(void* object) {
  COffline_GetOfflineLogonTicket_Request* _this = reinterpret_cast< COffline_GetOfflineLogonTicket_Request* >(object);
  (void)_this;
}
void COffline_GetOfflineLogonTicket_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void COffline_GetOfflineLogonTicket_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void COffline_GetOfflineLogonTicket_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:COffline_GetOfflineLogonTicket_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&priority_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&perform_encryption_) -
        reinterpret_cast<char*>(&priority_)) + sizeof(perform_encryption_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* COffline_GetOfflineLogonTicket_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool perform_encryption = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_perform_encryption(&has_bits);
          perform_encryption_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* COffline_GetOfflineLogonTicket_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:COffline_GetOfflineLogonTicket_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 priority = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_priority(), target);
  }

  // optional bool perform_encryption = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_perform_encryption(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COffline_GetOfflineLogonTicket_Request)
  return target;
}

size_t COffline_GetOfflineLogonTicket_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COffline_GetOfflineLogonTicket_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 priority = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_priority());
    }

    // optional bool perform_encryption = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData COffline_GetOfflineLogonTicket_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    COffline_GetOfflineLogonTicket_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*COffline_GetOfflineLogonTicket_Request::GetClassData() const { return &_class_data_; }

void COffline_GetOfflineLogonTicket_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<COffline_GetOfflineLogonTicket_Request *>(to)->MergeFrom(
      static_cast<const COffline_GetOfflineLogonTicket_Request &>(from));
}


void COffline_GetOfflineLogonTicket_Request::MergeFrom(const COffline_GetOfflineLogonTicket_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COffline_GetOfflineLogonTicket_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000002u) {
      perform_encryption_ = from.perform_encryption_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void COffline_GetOfflineLogonTicket_Request::CopyFrom(const COffline_GetOfflineLogonTicket_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COffline_GetOfflineLogonTicket_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COffline_GetOfflineLogonTicket_Request::IsInitialized() const {
  return true;
}

void COffline_GetOfflineLogonTicket_Request::InternalSwap(COffline_GetOfflineLogonTicket_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(COffline_GetOfflineLogonTicket_Request, perform_encryption_)
      + sizeof(COffline_GetOfflineLogonTicket_Request::perform_encryption_)
      - PROTOBUF_FIELD_OFFSET(COffline_GetOfflineLogonTicket_Request, priority_)>(
          reinterpret_cast<char*>(&priority_),
          reinterpret_cast<char*>(&other->priority_));
}

::PROTOBUF_NAMESPACE_ID::Metadata COffline_GetOfflineLogonTicket_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5foffline_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5foffline_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5foffline_2esteamclient_2eproto[0]);
}

// ===================================================================

class COffline_GetOfflineLogonTicket_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<COffline_GetOfflineLogonTicket_Response>()._has_bits_);
  static void set_has_serialized_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Offline_Ticket& encrypted_ticket(const COffline_GetOfflineLogonTicket_Response* msg);
  static void set_has_encrypted_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Offline_Ticket&
COffline_GetOfflineLogonTicket_Response::_Internal::encrypted_ticket(const COffline_GetOfflineLogonTicket_Response* msg) {
  return *msg->encrypted_ticket_;
}
void COffline_GetOfflineLogonTicket_Response::clear_encrypted_ticket() {
  if (encrypted_ticket_ != nullptr) encrypted_ticket_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
COffline_GetOfflineLogonTicket_Response::COffline_GetOfflineLogonTicket_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:COffline_GetOfflineLogonTicket_Response)
}
COffline_GetOfflineLogonTicket_Response::COffline_GetOfflineLogonTicket_Response(const COffline_GetOfflineLogonTicket_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serialized_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serialized_ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_ticket()) {
    serialized_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_ticket(), 
      GetArenaForAllocation());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_encrypted_ticket()) {
    encrypted_ticket_ = new ::Offline_Ticket(*from.encrypted_ticket_);
  } else {
    encrypted_ticket_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:COffline_GetOfflineLogonTicket_Response)
}

inline void COffline_GetOfflineLogonTicket_Response::SharedCtor() {
serialized_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serialized_ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
encrypted_ticket_ = nullptr;
}

COffline_GetOfflineLogonTicket_Response::~COffline_GetOfflineLogonTicket_Response() {
  // @@protoc_insertion_point(destructor:COffline_GetOfflineLogonTicket_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void COffline_GetOfflineLogonTicket_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  serialized_ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encrypted_ticket_;
}

void COffline_GetOfflineLogonTicket_Response::ArenaDtor(void* object) {
  COffline_GetOfflineLogonTicket_Response* _this = reinterpret_cast< COffline_GetOfflineLogonTicket_Response* >(object);
  (void)_this;
}
void COffline_GetOfflineLogonTicket_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void COffline_GetOfflineLogonTicket_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void COffline_GetOfflineLogonTicket_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:COffline_GetOfflineLogonTicket_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      serialized_ticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(encrypted_ticket_ != nullptr);
      encrypted_ticket_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* COffline_GetOfflineLogonTicket_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes serialized_ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serialized_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Offline_Ticket encrypted_ticket = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_encrypted_ticket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* COffline_GetOfflineLogonTicket_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:COffline_GetOfflineLogonTicket_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_serialized_ticket(), target);
  }

  // optional bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  // optional .Offline_Ticket encrypted_ticket = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::encrypted_ticket(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COffline_GetOfflineLogonTicket_Response)
  return target;
}

size_t COffline_GetOfflineLogonTicket_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COffline_GetOfflineLogonTicket_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes serialized_ticket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_ticket());
    }

    // optional bytes signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional .Offline_Ticket encrypted_ticket = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encrypted_ticket_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData COffline_GetOfflineLogonTicket_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    COffline_GetOfflineLogonTicket_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*COffline_GetOfflineLogonTicket_Response::GetClassData() const { return &_class_data_; }

void COffline_GetOfflineLogonTicket_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<COffline_GetOfflineLogonTicket_Response *>(to)->MergeFrom(
      static_cast<const COffline_GetOfflineLogonTicket_Response &>(from));
}


void COffline_GetOfflineLogonTicket_Response::MergeFrom(const COffline_GetOfflineLogonTicket_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COffline_GetOfflineLogonTicket_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serialized_ticket(from._internal_serialized_ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_encrypted_ticket()->::Offline_Ticket::MergeFrom(from._internal_encrypted_ticket());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void COffline_GetOfflineLogonTicket_Response::CopyFrom(const COffline_GetOfflineLogonTicket_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COffline_GetOfflineLogonTicket_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COffline_GetOfflineLogonTicket_Response::IsInitialized() const {
  return true;
}

void COffline_GetOfflineLogonTicket_Response::InternalSwap(COffline_GetOfflineLogonTicket_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serialized_ticket_, lhs_arena,
      &other->serialized_ticket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  swap(encrypted_ticket_, other->encrypted_ticket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata COffline_GetOfflineLogonTicket_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5foffline_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5foffline_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5foffline_2esteamclient_2eproto[1]);
}

// ===================================================================

class COffline_GetUnsignedOfflineLogonTicket_Request::_Internal {
 public:
};

COffline_GetUnsignedOfflineLogonTicket_Request::COffline_GetUnsignedOfflineLogonTicket_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:COffline_GetUnsignedOfflineLogonTicket_Request)
}
COffline_GetUnsignedOfflineLogonTicket_Request::COffline_GetUnsignedOfflineLogonTicket_Request(const COffline_GetUnsignedOfflineLogonTicket_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:COffline_GetUnsignedOfflineLogonTicket_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData COffline_GetUnsignedOfflineLogonTicket_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*COffline_GetUnsignedOfflineLogonTicket_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata COffline_GetUnsignedOfflineLogonTicket_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5foffline_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5foffline_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5foffline_2esteamclient_2eproto[2]);
}

// ===================================================================

class COffline_OfflineLogonTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<COffline_OfflineLogonTicket>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rtime32_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

COffline_OfflineLogonTicket::COffline_OfflineLogonTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:COffline_OfflineLogonTicket)
}
COffline_OfflineLogonTicket::COffline_OfflineLogonTicket(const COffline_OfflineLogonTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtime32_creation_time_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(rtime32_creation_time_));
  // @@protoc_insertion_point(copy_constructor:COffline_OfflineLogonTicket)
}

inline void COffline_OfflineLogonTicket::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtime32_creation_time_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(rtime32_creation_time_));
}

COffline_OfflineLogonTicket::~COffline_OfflineLogonTicket() {
  // @@protoc_insertion_point(destructor:COffline_OfflineLogonTicket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void COffline_OfflineLogonTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void COffline_OfflineLogonTicket::ArenaDtor(void* object) {
  COffline_OfflineLogonTicket* _this = reinterpret_cast< COffline_OfflineLogonTicket* >(object);
  (void)_this;
}
void COffline_OfflineLogonTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void COffline_OfflineLogonTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void COffline_OfflineLogonTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:COffline_OfflineLogonTicket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtime32_creation_time_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(rtime32_creation_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* COffline_OfflineLogonTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 rtime32_creation_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_rtime32_creation_time(&has_bits);
          rtime32_creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* COffline_OfflineLogonTicket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:COffline_OfflineLogonTicket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional fixed32 rtime32_creation_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_rtime32_creation_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COffline_OfflineLogonTicket)
  return target;
}

size_t COffline_OfflineLogonTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COffline_OfflineLogonTicket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional fixed32 rtime32_creation_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData COffline_OfflineLogonTicket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    COffline_OfflineLogonTicket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*COffline_OfflineLogonTicket::GetClassData() const { return &_class_data_; }

void COffline_OfflineLogonTicket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<COffline_OfflineLogonTicket *>(to)->MergeFrom(
      static_cast<const COffline_OfflineLogonTicket &>(from));
}


void COffline_OfflineLogonTicket::MergeFrom(const COffline_OfflineLogonTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COffline_OfflineLogonTicket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      rtime32_creation_time_ = from.rtime32_creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void COffline_OfflineLogonTicket::CopyFrom(const COffline_OfflineLogonTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COffline_OfflineLogonTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COffline_OfflineLogonTicket::IsInitialized() const {
  return true;
}

void COffline_OfflineLogonTicket::InternalSwap(COffline_OfflineLogonTicket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(COffline_OfflineLogonTicket, rtime32_creation_time_)
      + sizeof(COffline_OfflineLogonTicket::rtime32_creation_time_)
      - PROTOBUF_FIELD_OFFSET(COffline_OfflineLogonTicket, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata COffline_OfflineLogonTicket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5foffline_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5foffline_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5foffline_2esteamclient_2eproto[3]);
}

// ===================================================================

class COffline_GetUnsignedOfflineLogonTicket_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<COffline_GetUnsignedOfflineLogonTicket_Response>()._has_bits_);
  static const ::COffline_OfflineLogonTicket& ticket(const COffline_GetUnsignedOfflineLogonTicket_Response* msg);
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::COffline_OfflineLogonTicket&
COffline_GetUnsignedOfflineLogonTicket_Response::_Internal::ticket(const COffline_GetUnsignedOfflineLogonTicket_Response* msg) {
  return *msg->ticket_;
}
COffline_GetUnsignedOfflineLogonTicket_Response::COffline_GetUnsignedOfflineLogonTicket_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:COffline_GetUnsignedOfflineLogonTicket_Response)
}
COffline_GetUnsignedOfflineLogonTicket_Response::COffline_GetUnsignedOfflineLogonTicket_Response(const COffline_GetUnsignedOfflineLogonTicket_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ticket()) {
    ticket_ = new ::COffline_OfflineLogonTicket(*from.ticket_);
  } else {
    ticket_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:COffline_GetUnsignedOfflineLogonTicket_Response)
}

inline void COffline_GetUnsignedOfflineLogonTicket_Response::SharedCtor() {
ticket_ = nullptr;
}

COffline_GetUnsignedOfflineLogonTicket_Response::~COffline_GetUnsignedOfflineLogonTicket_Response() {
  // @@protoc_insertion_point(destructor:COffline_GetUnsignedOfflineLogonTicket_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void COffline_GetUnsignedOfflineLogonTicket_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ticket_;
}

void COffline_GetUnsignedOfflineLogonTicket_Response::ArenaDtor(void* object) {
  COffline_GetUnsignedOfflineLogonTicket_Response* _this = reinterpret_cast< COffline_GetUnsignedOfflineLogonTicket_Response* >(object);
  (void)_this;
}
void COffline_GetUnsignedOfflineLogonTicket_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void COffline_GetUnsignedOfflineLogonTicket_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void COffline_GetUnsignedOfflineLogonTicket_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:COffline_GetUnsignedOfflineLogonTicket_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ticket_ != nullptr);
    ticket_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* COffline_GetUnsignedOfflineLogonTicket_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .COffline_OfflineLogonTicket ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ticket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* COffline_GetUnsignedOfflineLogonTicket_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:COffline_GetUnsignedOfflineLogonTicket_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .COffline_OfflineLogonTicket ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ticket(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COffline_GetUnsignedOfflineLogonTicket_Response)
  return target;
}

size_t COffline_GetUnsignedOfflineLogonTicket_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COffline_GetUnsignedOfflineLogonTicket_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .COffline_OfflineLogonTicket ticket = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ticket_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData COffline_GetUnsignedOfflineLogonTicket_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    COffline_GetUnsignedOfflineLogonTicket_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*COffline_GetUnsignedOfflineLogonTicket_Response::GetClassData() const { return &_class_data_; }

void COffline_GetUnsignedOfflineLogonTicket_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<COffline_GetUnsignedOfflineLogonTicket_Response *>(to)->MergeFrom(
      static_cast<const COffline_GetUnsignedOfflineLogonTicket_Response &>(from));
}


void COffline_GetUnsignedOfflineLogonTicket_Response::MergeFrom(const COffline_GetUnsignedOfflineLogonTicket_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COffline_GetUnsignedOfflineLogonTicket_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ticket()) {
    _internal_mutable_ticket()->::COffline_OfflineLogonTicket::MergeFrom(from._internal_ticket());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void COffline_GetUnsignedOfflineLogonTicket_Response::CopyFrom(const COffline_GetUnsignedOfflineLogonTicket_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COffline_GetUnsignedOfflineLogonTicket_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COffline_GetUnsignedOfflineLogonTicket_Response::IsInitialized() const {
  return true;
}

void COffline_GetUnsignedOfflineLogonTicket_Response::InternalSwap(COffline_GetUnsignedOfflineLogonTicket_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ticket_, other->ticket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata COffline_GetUnsignedOfflineLogonTicket_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_5foffline_2esteamclient_2eproto_getter, &descriptor_table_steammessages_5foffline_2esteamclient_2eproto_once,
      file_level_metadata_steammessages_5foffline_2esteamclient_2eproto[4]);
}

// ===================================================================

Offline::~Offline() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Offline::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5foffline_2esteamclient_2eproto);
  return file_level_service_descriptors_steammessages_5foffline_2esteamclient_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Offline::GetDescriptor() {
  return descriptor();
}

void Offline::GetOfflineLogonTicket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::COffline_GetOfflineLogonTicket_Request*,
                         ::COffline_GetOfflineLogonTicket_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetOfflineLogonTicket() not implemented.");
  done->Run();
}

void Offline::GetUnsignedOfflineLogonTicket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::COffline_GetUnsignedOfflineLogonTicket_Request*,
                         ::COffline_GetUnsignedOfflineLogonTicket_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUnsignedOfflineLogonTicket() not implemented.");
  done->Run();
}

void Offline::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5foffline_2esteamclient_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetOfflineLogonTicket(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::COffline_GetOfflineLogonTicket_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::COffline_GetOfflineLogonTicket_Response*>(
                 response),
             done);
      break;
    case 1:
      GetUnsignedOfflineLogonTicket(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::COffline_GetUnsignedOfflineLogonTicket_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::COffline_GetUnsignedOfflineLogonTicket_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Offline::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::COffline_GetOfflineLogonTicket_Request::default_instance();
    case 1:
      return ::COffline_GetUnsignedOfflineLogonTicket_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Offline::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::COffline_GetOfflineLogonTicket_Response::default_instance();
    case 1:
      return ::COffline_GetUnsignedOfflineLogonTicket_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Offline_Stub::Offline_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Offline_Stub::Offline_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Offline_Stub::~Offline_Stub() {
  if (owns_channel_) delete channel_;
}

void Offline_Stub::GetOfflineLogonTicket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::COffline_GetOfflineLogonTicket_Request* request,
                              ::COffline_GetOfflineLogonTicket_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Offline_Stub::GetUnsignedOfflineLogonTicket(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::COffline_GetUnsignedOfflineLogonTicket_Request* request,
                              ::COffline_GetUnsignedOfflineLogonTicket_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::COffline_GetOfflineLogonTicket_Request* Arena::CreateMaybeMessage< ::COffline_GetOfflineLogonTicket_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::COffline_GetOfflineLogonTicket_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::COffline_GetOfflineLogonTicket_Response* Arena::CreateMaybeMessage< ::COffline_GetOfflineLogonTicket_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::COffline_GetOfflineLogonTicket_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::COffline_GetUnsignedOfflineLogonTicket_Request* Arena::CreateMaybeMessage< ::COffline_GetUnsignedOfflineLogonTicket_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::COffline_GetUnsignedOfflineLogonTicket_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::COffline_OfflineLogonTicket* Arena::CreateMaybeMessage< ::COffline_OfflineLogonTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::COffline_OfflineLogonTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::COffline_GetUnsignedOfflineLogonTicket_Response* Arena::CreateMaybeMessage< ::COffline_GetUnsignedOfflineLogonTicket_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::COffline_GetUnsignedOfflineLogonTicket_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
