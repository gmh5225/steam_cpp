import "steammessages_base.proto";
import "steammessages_unified_base.steamclient.proto";

option cc_generic_services = true;

message CDataPublisher_ClientContentCorruptionReport_Notification {
	optional uint32 appid = 1;
	optional uint32 depotid = 2;
	optional string download_source = 3 [(description) = "host name of download source"];
	optional string objectid = 4 [(description) = "Chunk SHA or Manifest ID"];
	optional uint32 cellid = 5 [(description) = "Client Cell ID"];
	optional bool is_manifest = 6 [(description) = "The object is a manifest, not a chunk"];
	optional uint64 object_size = 7 [(description) = "object size in bytes"];
	optional uint32 corruption_type = 8 [(description) = "See EContentCorruptionType"];
	optional bool used_https = 9 [(description) = "the request was HTTPS"];
	optional bool oc_proxy_detected = 10 [(description) = "detected an OpenCache proxy"];
}

message CDataPublisher_ClientUpdateAppJob_Notification {
	optional uint32 app_id = 1;
	repeated uint32 depot_ids = 2;
	optional uint32 app_state = 3;
	optional uint32 job_app_error = 4;
	optional string error_details = 5;
	optional uint32 job_duration = 6;
	optional uint32 files_validation_failed = 7;
	optional uint64 job_bytes_downloaded = 8;
	optional uint64 job_bytes_staged = 9;
	optional uint64 bytes_comitted = 10;
	optional uint32 start_app_state = 11;
	optional fixed64 stats_machine_id = 12;
	optional string branch_name = 13;
	optional uint64 total_bytes_downloaded = 14;
	optional uint64 total_bytes_staged = 15;
	optional uint64 total_bytes_restored = 16;
	optional bool is_borrowed = 17;
	optional bool is_free_weekend = 18;
	optional uint64 total_bytes_patched = 20;
	optional uint64 total_bytes_saved = 21;
	optional uint32 cell_id = 22;
}

message CDataPublisher_GetVRDeviceInfo_Request {
	optional uint32 month_count = 1 [(description) = "Number of months for which to generate a report"];
}

message CDataPublisher_GetVRDeviceInfo_Response {
	message Device {
		optional string name = 1 [(description) = "Name to show for this device"];
		optional uint32 ref = 2 [(description) = "Reference number for this device"];
		optional uint32 aggregation_ref = 3 [(description) = "Reference number to aggregate this device under"];
		optional uint32 total = 4 [(description) = "Sum of all the counts"];
		optional string driver = 5 [(description) = "driver name reported by the user"];
		optional int32 device_class = 6 [(description) = "Class of the device. HMD=1, controller=2, tracker=3, base=4"];
	}

	repeated .CDataPublisher_GetVRDeviceInfo_Response.Device device = 1 [(description) = "Result devices"];
}

message CDataPublisher_SetVRDeviceInfoAggregationReference_Request {
	optional uint32 ref = 1 [(description) = "Reference number in the VRDeviceInfo table for the entry to set"];
	optional uint32 aggregation_ref = 2 [(description) = "Aggregation to set the entry to"];
}

message CDataPublisher_SetVRDeviceInfoAggregationReference_Response {
	optional uint32 result = 1 [(description) = "k_EResultOK, etc."];
}

message CDataPublisher_AddVRDeviceInfo_Request {
	optional string manufacturer = 1 [(description) = "Manufacturer for the new device"];
	optional string model = 2 [(description) = "Model for the new device"];
	optional string driver = 3 [(description) = "driver name (not including driver_). e.g. lighthouse, oculus, holographic"];
	optional string controller_type = 4 [(description) = "controller type for the device. Can be an empty string for devices with no inputs"];
	optional int32 device_class = 5 [(description) = "Class of the device. HMD=1, controller=2, tracker=3, base=4"];
}

message CDataPublisher_AddVRDeviceInfo_Response {
	optional uint32 result = 1 [(description) = "k_EResultOK, etc."];
	optional uint32 ref = 2 [(description) = "The reference number of the inserted device"];
}

message CValveHWSurvey_GetSurveySchedule_Request {
	optional string surveydatetoken = 1;
	optional fixed64 surveydatetokenversion = 2;
}

message CValveHWSurvey_GetSurveySchedule_Response {
	optional uint32 surveydatetoken = 1;
	optional fixed64 surveydatetokenversion = 2;
}

service DataPublisher {
	option (service_description) = "Data Publisher (DP) server services";

	rpc ClientContentCorruptionReport (.CDataPublisher_ClientContentCorruptionReport_Notification) returns (.NoResponse);
	rpc ClientUpdateAppJobReport (.CDataPublisher_ClientUpdateAppJob_Notification) returns (.NoResponse);
	rpc GetVRDeviceInfo (.CDataPublisher_GetVRDeviceInfo_Request) returns (.CDataPublisher_GetVRDeviceInfo_Response) {
		option (method_description) = "Generate a debug report of what devices are in the survey";
	}

	rpc SetVRDeviceInfoAggregationReference (.CDataPublisher_SetVRDeviceInfoAggregationReference_Request) returns (.CDataPublisher_SetVRDeviceInfoAggregationReference_Response) {
		option (method_description) = "Set the rollup reference of a single VR device";
	}

	rpc AddVRDeviceInfo (.CDataPublisher_AddVRDeviceInfo_Request) returns (.CDataPublisher_AddVRDeviceInfo_Response) {
		option (method_description) = "Adds a device to the VRDeviceInfo table for the hardware survey";
	}
}

service ValveHWSurvey {
	option (service_description) = "ValveHWSurvey";

	rpc GetSurveySchedule (.CValveHWSurvey_GetSurveySchedule_Request) returns (.CValveHWSurvey_GetSurveySchedule_Response) {
		option (method_description) = "Should I run the survey";
	}
}
